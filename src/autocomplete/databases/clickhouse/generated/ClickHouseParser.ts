////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/clickhouse/grammar/ClickHouseParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { ClickHouseParserVisitor } from "./ClickHouseParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class ClickHouseParser extends antlr.Parser {
    public static readonly ADD = 1;
    public static readonly AFTER = 2;
    public static readonly ALIAS = 3;
    public static readonly ALL = 4;
    public static readonly ALTER = 5;
    public static readonly AND = 6;
    public static readonly ANTI = 7;
    public static readonly ANY = 8;
    public static readonly ARRAY = 9;
    public static readonly AS = 10;
    public static readonly ASCENDING = 11;
    public static readonly ASOF = 12;
    public static readonly AST = 13;
    public static readonly ASYNC = 14;
    public static readonly ATTACH = 15;
    public static readonly BETWEEN = 16;
    public static readonly BOTH = 17;
    public static readonly BY = 18;
    public static readonly CASE = 19;
    public static readonly CAST = 20;
    public static readonly CHECK = 21;
    public static readonly CLEAR = 22;
    public static readonly CLUSTER = 23;
    public static readonly CODEC = 24;
    public static readonly COLLATE = 25;
    public static readonly COLUMN = 26;
    public static readonly COMMENT = 27;
    public static readonly CONSTRAINT = 28;
    public static readonly CREATE = 29;
    public static readonly CROSS = 30;
    public static readonly CUBE = 31;
    public static readonly CURRENT = 32;
    public static readonly DATABASE = 33;
    public static readonly DATABASES = 34;
    public static readonly DATE = 35;
    public static readonly DAY = 36;
    public static readonly DEDUPLICATE = 37;
    public static readonly DEFAULT = 38;
    public static readonly DELAY = 39;
    public static readonly DELETE = 40;
    public static readonly DESC = 41;
    public static readonly DESCENDING = 42;
    public static readonly DESCRIBE = 43;
    public static readonly DETACH = 44;
    public static readonly DICTIONARIES = 45;
    public static readonly DICTIONARY = 46;
    public static readonly DISK = 47;
    public static readonly DISTINCT = 48;
    public static readonly DISTRIBUTED = 49;
    public static readonly DROP = 50;
    public static readonly ELSE = 51;
    public static readonly END = 52;
    public static readonly ENGINE = 53;
    public static readonly ESTIMATE = 54;
    public static readonly EVENTS = 55;
    public static readonly EXISTS = 56;
    public static readonly EXPLAIN = 57;
    public static readonly EXPRESSION = 58;
    public static readonly EXTRACT = 59;
    public static readonly FETCHES = 60;
    public static readonly FINAL = 61;
    public static readonly FIRST = 62;
    public static readonly FLUSH = 63;
    public static readonly FOLLOWING = 64;
    public static readonly FOR = 65;
    public static readonly FORMAT = 66;
    public static readonly FREEZE = 67;
    public static readonly FROM = 68;
    public static readonly FULL = 69;
    public static readonly FUNCTION = 70;
    public static readonly GLOBAL = 71;
    public static readonly GRANULARITY = 72;
    public static readonly GROUP = 73;
    public static readonly HAVING = 74;
    public static readonly HIERARCHICAL = 75;
    public static readonly HOUR = 76;
    public static readonly ID = 77;
    public static readonly IF = 78;
    public static readonly ILIKE = 79;
    public static readonly IN = 80;
    public static readonly INDEX = 81;
    public static readonly INF = 82;
    public static readonly INJECTIVE = 83;
    public static readonly INNER = 84;
    public static readonly INSERT = 85;
    public static readonly INTERVAL = 86;
    public static readonly INTO = 87;
    public static readonly IS = 88;
    public static readonly IS_OBJECT_ID = 89;
    public static readonly JOIN = 90;
    public static readonly KEY = 91;
    public static readonly KILL = 92;
    public static readonly LAST = 93;
    public static readonly LAYOUT = 94;
    public static readonly LEADING = 95;
    public static readonly LEFT = 96;
    public static readonly LIFETIME = 97;
    public static readonly LIKE = 98;
    public static readonly LIMIT = 99;
    public static readonly LIVE = 100;
    public static readonly LOCAL = 101;
    public static readonly LOGS = 102;
    public static readonly MATERIALIZE = 103;
    public static readonly MATERIALIZED = 104;
    public static readonly MAX = 105;
    public static readonly MERGES = 106;
    public static readonly MIN = 107;
    public static readonly MINUTE = 108;
    public static readonly MODIFY = 109;
    public static readonly MONTH = 110;
    public static readonly MOVE = 111;
    public static readonly MUTATION = 112;
    public static readonly NAN_SQL = 113;
    public static readonly NO = 114;
    public static readonly NOT = 115;
    public static readonly NULL_SQL = 116;
    public static readonly NULLS = 117;
    public static readonly OFFSET = 118;
    public static readonly ON = 119;
    public static readonly OPTIMIZE = 120;
    public static readonly OR = 121;
    public static readonly ORDER = 122;
    public static readonly OUTER = 123;
    public static readonly OUTFILE = 124;
    public static readonly OVER = 125;
    public static readonly PARTITION = 126;
    public static readonly PIPELINE = 127;
    public static readonly PLAN = 128;
    public static readonly POPULATE = 129;
    public static readonly PRECEDING = 130;
    public static readonly PREWHERE = 131;
    public static readonly PRIMARY = 132;
    public static readonly PROJECTION = 133;
    public static readonly QUARTER = 134;
    public static readonly QUERY = 135;
    public static readonly RANGE = 136;
    public static readonly RELOAD = 137;
    public static readonly REMOVE = 138;
    public static readonly RENAME = 139;
    public static readonly REPLACE = 140;
    public static readonly REPLICA = 141;
    public static readonly REPLICATED = 142;
    public static readonly RIGHT = 143;
    public static readonly ROLLUP = 144;
    public static readonly ROW = 145;
    public static readonly ROWS = 146;
    public static readonly SAMPLE = 147;
    public static readonly SECOND = 148;
    public static readonly SELECT = 149;
    public static readonly SEMI = 150;
    public static readonly SENDS = 151;
    public static readonly SET = 152;
    public static readonly SETTINGS = 153;
    public static readonly SHOW = 154;
    public static readonly SOURCE = 155;
    public static readonly START = 156;
    public static readonly STOP = 157;
    public static readonly SUBSTRING = 158;
    public static readonly SYNC = 159;
    public static readonly SYNTAX = 160;
    public static readonly SYSTEM = 161;
    public static readonly TABLE = 162;
    public static readonly TABLES = 163;
    public static readonly TEMPORARY = 164;
    public static readonly TEST = 165;
    public static readonly THEN = 166;
    public static readonly TIES = 167;
    public static readonly TIMEOUT = 168;
    public static readonly TIMESTAMP = 169;
    public static readonly TO = 170;
    public static readonly TOP = 171;
    public static readonly TOTALS = 172;
    public static readonly TRAILING = 173;
    public static readonly TRIM = 174;
    public static readonly TREE = 175;
    public static readonly TRUNCATE = 176;
    public static readonly TTL = 177;
    public static readonly TYPE = 178;
    public static readonly UNBOUNDED = 179;
    public static readonly UNION = 180;
    public static readonly UPDATE = 181;
    public static readonly USE = 182;
    public static readonly USING = 183;
    public static readonly UUID = 184;
    public static readonly VALUES = 185;
    public static readonly VIEW = 186;
    public static readonly VOLUME = 187;
    public static readonly WATCH = 188;
    public static readonly WEEK = 189;
    public static readonly WHEN = 190;
    public static readonly WHERE = 191;
    public static readonly WINDOW = 192;
    public static readonly WITH = 193;
    public static readonly YEAR = 194;
    public static readonly GRANT = 195;
    public static readonly USER = 196;
    public static readonly FETCH = 197;
    public static readonly REFRESH = 198;
    public static readonly POLICY = 199;
    public static readonly QUOTA = 200;
    public static readonly ROLE = 201;
    public static readonly PROFILE = 202;
    public static readonly ARBITRARY = 203;
    public static readonly COLUMNS = 204;
    public static readonly CURRENT_USER = 205;
    public static readonly ACCESS = 206;
    public static readonly SHOW_USERS = 207;
    public static readonly SHOW_ROLES = 208;
    public static readonly SHOW_ROW_POLICIES = 209;
    public static readonly SHOW_QUOTAS = 210;
    public static readonly SHOW_SETTINGS_PROFILES = 211;
    public static readonly SHUTDOWN = 212;
    public static readonly CACHE = 213;
    public static readonly DNS = 214;
    public static readonly MARK = 215;
    public static readonly MARKS = 216;
    public static readonly PART = 217;
    public static readonly UNCOMPRESSED = 218;
    public static readonly CONFIG = 219;
    public static readonly EMBEDDED = 220;
    public static readonly FUNCTIONS = 221;
    public static readonly MOVES = 222;
    public static readonly REPLICATION = 223;
    public static readonly QUEUES = 224;
    public static readonly RESTART = 225;
    public static readonly DICTGET = 226;
    public static readonly DICTGETHIERARCHY = 227;
    public static readonly DICTHAS = 228;
    public static readonly DICTISIN = 229;
    public static readonly MANAGEMENT = 230;
    public static readonly ADMIN = 231;
    public static readonly NAMED = 232;
    public static readonly COLLECTION = 233;
    public static readonly CONTROL = 234;
    public static readonly COLLECTIONS = 235;
    public static readonly SECRETS = 236;
    public static readonly USAGE = 237;
    public static readonly INTROSPECTION = 238;
    public static readonly ADDRESSTOLINE = 239;
    public static readonly ADDRESSTOSYMBOL = 240;
    public static readonly DEMANGLE = 241;
    public static readonly SOURCES = 242;
    public static readonly FILE = 243;
    public static readonly URL = 244;
    public static readonly REMOTE = 245;
    public static readonly MYSQL = 246;
    public static readonly ODBC = 247;
    public static readonly JDBC = 248;
    public static readonly HDFS = 249;
    public static readonly S3 = 250;
    public static readonly SETTING = 251;
    public static readonly OPTION = 252;
    public static readonly NONE = 253;
    public static readonly AZURE = 254;
    public static readonly HIVE = 255;
    public static readonly MONGO = 256;
    public static readonly POSTGRES = 257;
    public static readonly REDIS = 258;
    public static readonly SQLITE = 259;
    public static readonly ADDRESSTOLINEWITHINLINES = 260;
    public static readonly SQL = 261;
    public static readonly SECURITY = 262;
    public static readonly DISPLAYSECRETSINSHOWANDSELECT = 263;
    public static readonly POLICIES = 264;
    public static readonly PROFILES = 265;
    public static readonly ALLOW = 266;
    public static readonly GRANTS = 267;
    public static readonly EXCEPT = 268;
    public static readonly REVOKE = 269;
    public static readonly IDENTIFIED = 270;
    public static readonly PLAINTEXT_PASSWORD = 271;
    public static readonly SHA256_PASSWORD = 272;
    public static readonly SHA256_HASH = 273;
    public static readonly DOUBLE_SHA1_PASSWORD = 274;
    public static readonly DOUBLE_SHA1_HASH = 275;
    public static readonly NO_PASSWORD = 276;
    public static readonly LDAP = 277;
    public static readonly SERVER = 278;
    public static readonly KERBEROS = 279;
    public static readonly REALM = 280;
    public static readonly SSL_CERTIFICATE = 281;
    public static readonly SAN = 282;
    public static readonly CN = 283;
    public static readonly SSH_KEY = 284;
    public static readonly HTTP = 285;
    public static readonly SCHEME = 286;
    public static readonly BCRYPT_PASSWORD = 287;
    public static readonly BCRYPT_HASH = 288;
    public static readonly VALID = 289;
    public static readonly UNTIL = 290;
    public static readonly GRANTEES = 291;
    public static readonly NAME = 292;
    public static readonly REGEXP = 293;
    public static readonly IP = 294;
    public static readonly HOST = 295;
    public static readonly READONLY = 296;
    public static readonly WRITABLE = 297;
    public static readonly PERMISSIVE = 298;
    public static readonly RESTRICTIVE = 299;
    public static readonly TABSEPARATED = 300;
    public static readonly TABSEPARATEDRAW = 301;
    public static readonly TABSEPARATEDWITHNAMES = 302;
    public static readonly TABSEPARATEDWITHNAMESANDTYPES = 303;
    public static readonly TABSEPARATEDRAWWITHNAMES = 304;
    public static readonly TABSEPARATEDRAWWITHNAMESANDTYPES = 305;
    public static readonly TEMPLATE = 306;
    public static readonly TEMPLATEIGNORESPACES = 307;
    public static readonly CSV = 308;
    public static readonly CSVWITHNAMES = 309;
    public static readonly CSVWITHNAMESANDTYPES = 310;
    public static readonly CUSTOMSEPARATED = 311;
    public static readonly CUSTOMSEPARATEDWITHNAMES = 312;
    public static readonly CUSTOMSEPARATEDWITHNAMESANDTYPES = 313;
    public static readonly JSON = 314;
    public static readonly JSONASSTRING = 315;
    public static readonly JSONASOBJECT = 316;
    public static readonly JSONSTRINGS = 317;
    public static readonly JSONCOLUMNS = 318;
    public static readonly JSONCOLUMNSWITHMETADATA = 319;
    public static readonly JSONCOMPACT = 320;
    public static readonly JSONCOMPACTCOLUMNS = 321;
    public static readonly JSONEACHROW = 322;
    public static readonly JSONSTRINGSEACHROW = 323;
    public static readonly JSONCOMPACTEACHROW = 324;
    public static readonly JSONCOMPACTEACHROWWITHNAMES = 325;
    public static readonly JSONCOMPACTEACHROWWITHNAMESANDTYPES = 326;
    public static readonly JSONCOMPACTSTRINGSEACHROW = 327;
    public static readonly JSONCOMPACTSTRINGSEACHROWWITHNAMES = 328;
    public static readonly JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES = 329;
    public static readonly JSONOBJECTEACHROW = 330;
    public static readonly BSONEACHROW = 331;
    public static readonly TSKV = 332;
    public static readonly PROTOBUF = 333;
    public static readonly PROTOBUFSINGLE = 334;
    public static readonly PROTOBUFLIST = 335;
    public static readonly AVRO = 336;
    public static readonly AVROCONFLUENT = 337;
    public static readonly PARQUET = 338;
    public static readonly PARQUETMETADATA = 339;
    public static readonly ARROW = 340;
    public static readonly ARROWSTREAM = 341;
    public static readonly ORC = 342;
    public static readonly ONE = 343;
    public static readonly NPY = 344;
    public static readonly ROWBINARY = 345;
    public static readonly ROWBINARYWITHNAMES = 346;
    public static readonly ROWBINARYWITHNAMESANDTYPES = 347;
    public static readonly ROWBINARYWITHDEFAULTS = 348;
    public static readonly NATIVE = 349;
    public static readonly CAPNPROTO = 350;
    public static readonly LINEASSTRING = 351;
    public static readonly RAWBLOB = 352;
    public static readonly MSGPACK = 353;
    public static readonly MYSQLDUMP = 354;
    public static readonly DWARF = 355;
    public static readonly FORM = 356;
    public static readonly KEYED = 357;
    public static readonly RANDOMIZED = 358;
    public static readonly USER_NAME = 359;
    public static readonly IP_ADDRESS = 360;
    public static readonly FORWARDED_IP_ADDRESS = 361;
    public static readonly CLIENT_KEY = 362;
    public static readonly CLIENT_KEY_OR_USER_NAME = 363;
    public static readonly CLIENT_KEY_OR_IP_ADDRESS = 364;
    public static readonly QUERIES = 365;
    public static readonly QUERY_SELECTS = 366;
    public static readonly QUERY_INSERTS = 367;
    public static readonly ERRORS = 368;
    public static readonly RESULT_ROWS = 369;
    public static readonly RESULT_BYTES = 370;
    public static readonly READ_ROWS = 371;
    public static readonly READ_BYTES = 372;
    public static readonly EXECUTION_TIME = 373;
    public static readonly FAILED_SEQUENTIAL_AUTHENTICATIONS = 374;
    public static readonly LIMITS = 375;
    public static readonly TRACKING = 376;
    public static readonly ONLY = 377;
    public static readonly CONST = 378;
    public static readonly CHANGEABLE_IN_READONLY = 379;
    public static readonly OVERRIDABLE = 380;
    public static readonly JSON_FALSE = 381;
    public static readonly JSON_TRUE = 382;
    public static readonly IDENTIFIER = 383;
    public static readonly FLOATING_LITERAL = 384;
    public static readonly OCTAL_LITERAL = 385;
    public static readonly DECIMAL_LITERAL = 386;
    public static readonly HEXADECIMAL_LITERAL = 387;
    public static readonly STRING_LITERAL = 388;
    public static readonly ARROW_SYMBOL = 389;
    public static readonly ASTERISK = 390;
    public static readonly BACKQUOTE = 391;
    public static readonly BACKSLASH = 392;
    public static readonly COLON = 393;
    public static readonly COMMA = 394;
    public static readonly CONCAT = 395;
    public static readonly DASH = 396;
    public static readonly DOT = 397;
    public static readonly EQ_DOUBLE = 398;
    public static readonly EQ_SINGLE = 399;
    public static readonly GE = 400;
    public static readonly GT = 401;
    public static readonly LBRACE = 402;
    public static readonly LBRACKET = 403;
    public static readonly LE = 404;
    public static readonly LPAREN = 405;
    public static readonly LT = 406;
    public static readonly NOT_EQ = 407;
    public static readonly PERCENT = 408;
    public static readonly PLUS = 409;
    public static readonly QUESTIONMARK = 410;
    public static readonly QUOTE_DOUBLE = 411;
    public static readonly QUOTE_SINGLE = 412;
    public static readonly RBRACE = 413;
    public static readonly RBRACKET = 414;
    public static readonly RPAREN = 415;
    public static readonly SEMICOLON = 416;
    public static readonly SLASH = 417;
    public static readonly UNDERSCORE = 418;
    public static readonly MULTI_LINE_COMMENT = 419;
    public static readonly SINGLE_LINE_COMMENT = 420;
    public static readonly WHITESPACE = 421;
    public static readonly RULE_root = 0;
    public static readonly RULE_statements = 1;
    public static readonly RULE_statement = 2;
    public static readonly RULE_notInsertStatement = 3;
    public static readonly RULE_commonTableExpressionStatement = 4;
    public static readonly RULE_namedQuery = 5;
    public static readonly RULE_columnAliases = 6;
    public static readonly RULE_alterStatement = 7;
    public static readonly RULE_alterTableClause = 8;
    public static readonly RULE_assignmentExpressionList = 9;
    public static readonly RULE_assignmentExpression = 10;
    public static readonly RULE_tableColumnPropertyType = 11;
    public static readonly RULE_partitionClause = 12;
    public static readonly RULE_attachStatement = 13;
    public static readonly RULE_checkStatement = 14;
    public static readonly RULE_deleteStatement = 15;
    public static readonly RULE_createTableStatement = 16;
    public static readonly RULE_createDatabaseStatement = 17;
    public static readonly RULE_createDictionaryStatement = 18;
    public static readonly RULE_createLiveViewStatement = 19;
    public static readonly RULE_createMaterializedViewStatement = 20;
    public static readonly RULE_createViewStatement = 21;
    public static readonly RULE_stringIdentificationType = 22;
    public static readonly RULE_keyTypeClause = 23;
    public static readonly RULE_otherIdentificationType = 24;
    public static readonly RULE_userIdentificationClause = 25;
    public static readonly RULE_validUntilClause = 26;
    public static readonly RULE_grantsProvider = 27;
    public static readonly RULE_granteesClause = 28;
    public static readonly RULE_hostType = 29;
    public static readonly RULE_hostClause = 30;
    public static readonly RULE_extendedSettingExpression = 31;
    public static readonly RULE_extendedSettingsClause = 32;
    public static readonly RULE_inAccessStorageClause = 33;
    public static readonly RULE_createUserStatement = 34;
    public static readonly RULE_replaceOrIfNotExistsClause = 35;
    public static readonly RULE_policyAssignmentSubject = 36;
    public static readonly RULE_policyExpression = 37;
    public static readonly RULE_identifierOrLiteral = 38;
    public static readonly RULE_conditionClause = 39;
    public static readonly RULE_subjectOrAllOrExcept = 40;
    public static readonly RULE_subjectExpression = 41;
    public static readonly RULE_createRowPolicyStatement = 42;
    public static readonly RULE_quotaKeyType = 43;
    public static readonly RULE_quotaKeyedByClause = 44;
    public static readonly RULE_quotaRestrictionType = 45;
    public static readonly RULE_stringOrNumberLiteral = 46;
    public static readonly RULE_quotaRestrictionExpression = 47;
    public static readonly RULE_quotaRestrictionClause = 48;
    public static readonly RULE_quotaForClause = 49;
    public static readonly RULE_quotaForList = 50;
    public static readonly RULE_createQuotaStatement = 51;
    public static readonly RULE_identifierList = 52;
    public static readonly RULE_createRoleStatement = 53;
    public static readonly RULE_createSettingsProfileStatement = 54;
    public static readonly RULE_namedCollectionExpression = 55;
    public static readonly RULE_namedCollectionClause = 56;
    public static readonly RULE_createNamedCollectionStatement = 57;
    public static readonly RULE_createStatement = 58;
    public static readonly RULE_dictionarySchemaClause = 59;
    public static readonly RULE_dictionaryAttributeDefinition = 60;
    public static readonly RULE_dictionaryEngineClause = 61;
    public static readonly RULE_dictionaryPrimaryKeyClause = 62;
    public static readonly RULE_dictionaryArgumentExpression = 63;
    public static readonly RULE_sourceClause = 64;
    public static readonly RULE_lifetimeClause = 65;
    public static readonly RULE_layoutClause = 66;
    public static readonly RULE_rangeClause = 67;
    public static readonly RULE_dictionarySettingsClause = 68;
    public static readonly RULE_clusterClause = 69;
    public static readonly RULE_uuidClause = 70;
    public static readonly RULE_destinationClause = 71;
    public static readonly RULE_subqueryClause = 72;
    public static readonly RULE_tableSchemaClause = 73;
    public static readonly RULE_engineClause = 74;
    public static readonly RULE_partitionByClause = 75;
    public static readonly RULE_primaryKeyClause = 76;
    public static readonly RULE_sampleByClause = 77;
    public static readonly RULE_ttlClause = 78;
    public static readonly RULE_engineExpression = 79;
    public static readonly RULE_tableElementExpression = 80;
    public static readonly RULE_tableColumnDefinition = 81;
    public static readonly RULE_tableColumnPropertyExpression = 82;
    public static readonly RULE_tableIndexDefinition = 83;
    public static readonly RULE_tableProjectionDefinition = 84;
    public static readonly RULE_codecExpression = 85;
    public static readonly RULE_codecArgExpression = 86;
    public static readonly RULE_ttlExpression = 87;
    public static readonly RULE_describeStatement = 88;
    public static readonly RULE_dropStatement = 89;
    public static readonly RULE_existsStatement = 90;
    public static readonly RULE_explainStatement = 91;
    public static readonly RULE_revokeStatement = 92;
    public static readonly RULE_subjectExpressionList = 93;
    public static readonly RULE_userExpressionList = 94;
    public static readonly RULE_roleExpressionList = 95;
    public static readonly RULE_grantStatement = 96;
    public static readonly RULE_withGrantOrReplaceOption = 97;
    public static readonly RULE_withReplaceOption = 98;
    public static readonly RULE_accessSubjectIdentifier = 99;
    public static readonly RULE_privilegeList = 100;
    public static readonly RULE_roleIdentifier = 101;
    public static readonly RULE_userIdentifier = 102;
    public static readonly RULE_userOrRoleExpressionList = 103;
    public static readonly RULE_userOrRoleIdentifier = 104;
    public static readonly RULE_selectPrivilege = 105;
    public static readonly RULE_insertPrivilege = 106;
    public static readonly RULE_createPrivilege = 107;
    public static readonly RULE_dropPrivilege = 108;
    public static readonly RULE_showPrivilege = 109;
    public static readonly RULE_introspectionPrivilege = 110;
    public static readonly RULE_sourcePrivilege = 111;
    public static readonly RULE_dictPrivilege = 112;
    public static readonly RULE_alterPrivilege = 113;
    public static readonly RULE_accessManagementPrivilege = 114;
    public static readonly RULE_systemPrivilege = 115;
    public static readonly RULE_namedCollectionAdminPrivilege = 116;
    public static readonly RULE_privilege = 117;
    public static readonly RULE_insertStatement = 118;
    public static readonly RULE_columnsOrExceptClause = 119;
    public static readonly RULE_columnsClause = 120;
    public static readonly RULE_insertFormatType = 121;
    public static readonly RULE_dataClause = 122;
    public static readonly RULE_literalList = 123;
    public static readonly RULE_valueIdentifier = 124;
    public static readonly RULE_valueOrArrayIdentifier = 125;
    public static readonly RULE_arrayIdentifier = 126;
    public static readonly RULE_valuesClause = 127;
    public static readonly RULE_valuesStatement = 128;
    public static readonly RULE_killStatement = 129;
    public static readonly RULE_optimizeStatement = 130;
    public static readonly RULE_renameStatement = 131;
    public static readonly RULE_projectionSelectStatement = 132;
    public static readonly RULE_selectUnionStatement = 133;
    public static readonly RULE_selectStatementWithParentheses = 134;
    public static readonly RULE_selectStatement = 135;
    public static readonly RULE_withClause = 136;
    public static readonly RULE_topClause = 137;
    public static readonly RULE_fromClause = 138;
    public static readonly RULE_arrayJoinClause = 139;
    public static readonly RULE_windowClause = 140;
    public static readonly RULE_prewhereClause = 141;
    public static readonly RULE_whereClause = 142;
    public static readonly RULE_groupByClause = 143;
    public static readonly RULE_havingClause = 144;
    public static readonly RULE_orderByClause = 145;
    public static readonly RULE_projectionOrderByClause = 146;
    public static readonly RULE_limitByClause = 147;
    public static readonly RULE_limitClause = 148;
    public static readonly RULE_settingsClause = 149;
    public static readonly RULE_joinExpression = 150;
    public static readonly RULE_joinOperator = 151;
    public static readonly RULE_joinOperatorCross = 152;
    public static readonly RULE_joinConstraintClause = 153;
    public static readonly RULE_sampleClause = 154;
    public static readonly RULE_limitExpression = 155;
    public static readonly RULE_orderExpressionList = 156;
    public static readonly RULE_orderExpression = 157;
    public static readonly RULE_ratioExpression = 158;
    public static readonly RULE_settingExpressionList = 159;
    public static readonly RULE_settingExpression = 160;
    public static readonly RULE_windowExpression = 161;
    public static readonly RULE_windowPartitionByClause = 162;
    public static readonly RULE_windowOrderByClause = 163;
    public static readonly RULE_windowFrameClause = 164;
    public static readonly RULE_windowFrameExtend = 165;
    public static readonly RULE_windowFrameBound = 166;
    public static readonly RULE_setStatement = 167;
    public static readonly RULE_showStatement = 168;
    public static readonly RULE_systemStatement = 169;
    public static readonly RULE_truncateStatement = 170;
    public static readonly RULE_useStatement = 171;
    public static readonly RULE_watchStatement = 172;
    public static readonly RULE_columnTypeExpression = 173;
    public static readonly RULE_columnExpressionList = 174;
    public static readonly RULE_columnsExpression = 175;
    public static readonly RULE_columnExpression = 176;
    public static readonly RULE_columnArgumentList = 177;
    public static readonly RULE_columnArgumentExpression = 178;
    public static readonly RULE_columnLambdaExpression = 179;
    public static readonly RULE_columnIdentifier = 180;
    public static readonly RULE_tableExpression = 181;
    public static readonly RULE_tableFunctionExpression = 182;
    public static readonly RULE_tableIdentifier = 183;
    public static readonly RULE_tableArgList = 184;
    public static readonly RULE_tableArgExpression = 185;
    public static readonly RULE_databaseIdentifier = 186;
    public static readonly RULE_floatingLiteral = 187;
    public static readonly RULE_numberLiteral = 188;
    public static readonly RULE_literal = 189;
    public static readonly RULE_interval = 190;
    public static readonly RULE_keyword = 191;
    public static readonly RULE_keywordForAlias = 192;
    public static readonly RULE_alias = 193;
    public static readonly RULE_identifier = 194;
    public static readonly RULE_identifierOrNull = 195;
    public static readonly RULE_enumValue = 196;

    public static readonly literalNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, "'query_selects'", "'query_inserts'", null, "'result_rows'", 
        "'result_bytes'", "'read_rows'", "'read_bytes'", "'execution_time'", 
        "'failed_sequential_authentications'", null, null, null, null, null, 
        null, "'false'", "'true'", null, null, null, null, null, null, "'->'", 
        "'*'", "'`'", "'\'", "':'", "','", "'||'", "'-'", "'.'", "'=='", 
        "'='", "'>='", "'>'", "'{'", "'['", "'<='", "'('", "'<'", null, 
        "'%'", "'+'", "'?'", "'\"'", "'''", "'}'", "']'", "')'", "';'", 
        "'/'", "'_'"
    ];

    public static readonly symbolicNames = [
        null, "ADD", "AFTER", "ALIAS", "ALL", "ALTER", "AND", "ANTI", "ANY", 
        "ARRAY", "AS", "ASCENDING", "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", 
        "BOTH", "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", "CODEC", 
        "COLLATE", "COLUMN", "COMMENT", "CONSTRAINT", "CREATE", "CROSS", 
        "CUBE", "CURRENT", "DATABASE", "DATABASES", "DATE", "DAY", "DEDUPLICATE", 
        "DEFAULT", "DELAY", "DELETE", "DESC", "DESCENDING", "DESCRIBE", 
        "DETACH", "DICTIONARIES", "DICTIONARY", "DISK", "DISTINCT", "DISTRIBUTED", 
        "DROP", "ELSE", "END", "ENGINE", "ESTIMATE", "EVENTS", "EXISTS", 
        "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES", "FINAL", "FIRST", 
        "FLUSH", "FOLLOWING", "FOR", "FORMAT", "FREEZE", "FROM", "FULL", 
        "FUNCTION", "GLOBAL", "GRANULARITY", "GROUP", "HAVING", "HIERARCHICAL", 
        "HOUR", "ID", "IF", "ILIKE", "IN", "INDEX", "INF", "INJECTIVE", 
        "INNER", "INSERT", "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", "JOIN", 
        "KEY", "KILL", "LAST", "LAYOUT", "LEADING", "LEFT", "LIFETIME", 
        "LIKE", "LIMIT", "LIVE", "LOCAL", "LOGS", "MATERIALIZE", "MATERIALIZED", 
        "MAX", "MERGES", "MIN", "MINUTE", "MODIFY", "MONTH", "MOVE", "MUTATION", 
        "NAN_SQL", "NO", "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", "OPTIMIZE", 
        "OR", "ORDER", "OUTER", "OUTFILE", "OVER", "PARTITION", "PIPELINE", 
        "PLAN", "POPULATE", "PRECEDING", "PREWHERE", "PRIMARY", "PROJECTION", 
        "QUARTER", "QUERY", "RANGE", "RELOAD", "REMOVE", "RENAME", "REPLACE", 
        "REPLICA", "REPLICATED", "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", 
        "SECOND", "SELECT", "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", 
        "SOURCE", "START", "STOP", "SUBSTRING", "SYNC", "SYNTAX", "SYSTEM", 
        "TABLE", "TABLES", "TEMPORARY", "TEST", "THEN", "TIES", "TIMEOUT", 
        "TIMESTAMP", "TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TREE", 
        "TRUNCATE", "TTL", "TYPE", "UNBOUNDED", "UNION", "UPDATE", "USE", 
        "USING", "UUID", "VALUES", "VIEW", "VOLUME", "WATCH", "WEEK", "WHEN", 
        "WHERE", "WINDOW", "WITH", "YEAR", "GRANT", "USER", "FETCH", "REFRESH", 
        "POLICY", "QUOTA", "ROLE", "PROFILE", "ARBITRARY", "COLUMNS", "CURRENT_USER", 
        "ACCESS", "SHOW_USERS", "SHOW_ROLES", "SHOW_ROW_POLICIES", "SHOW_QUOTAS", 
        "SHOW_SETTINGS_PROFILES", "SHUTDOWN", "CACHE", "DNS", "MARK", "MARKS", 
        "PART", "UNCOMPRESSED", "CONFIG", "EMBEDDED", "FUNCTIONS", "MOVES", 
        "REPLICATION", "QUEUES", "RESTART", "DICTGET", "DICTGETHIERARCHY", 
        "DICTHAS", "DICTISIN", "MANAGEMENT", "ADMIN", "NAMED", "COLLECTION", 
        "CONTROL", "COLLECTIONS", "SECRETS", "USAGE", "INTROSPECTION", "ADDRESSTOLINE", 
        "ADDRESSTOSYMBOL", "DEMANGLE", "SOURCES", "FILE", "URL", "REMOTE", 
        "MYSQL", "ODBC", "JDBC", "HDFS", "S3", "SETTING", "OPTION", "NONE", 
        "AZURE", "HIVE", "MONGO", "POSTGRES", "REDIS", "SQLITE", "ADDRESSTOLINEWITHINLINES", 
        "SQL", "SECURITY", "DISPLAYSECRETSINSHOWANDSELECT", "POLICIES", 
        "PROFILES", "ALLOW", "GRANTS", "EXCEPT", "REVOKE", "IDENTIFIED", 
        "PLAINTEXT_PASSWORD", "SHA256_PASSWORD", "SHA256_HASH", "DOUBLE_SHA1_PASSWORD", 
        "DOUBLE_SHA1_HASH", "NO_PASSWORD", "LDAP", "SERVER", "KERBEROS", 
        "REALM", "SSL_CERTIFICATE", "SAN", "CN", "SSH_KEY", "HTTP", "SCHEME", 
        "BCRYPT_PASSWORD", "BCRYPT_HASH", "VALID", "UNTIL", "GRANTEES", 
        "NAME", "REGEXP", "IP", "HOST", "READONLY", "WRITABLE", "PERMISSIVE", 
        "RESTRICTIVE", "TABSEPARATED", "TABSEPARATEDRAW", "TABSEPARATEDWITHNAMES", 
        "TABSEPARATEDWITHNAMESANDTYPES", "TABSEPARATEDRAWWITHNAMES", "TABSEPARATEDRAWWITHNAMESANDTYPES", 
        "TEMPLATE", "TEMPLATEIGNORESPACES", "CSV", "CSVWITHNAMES", "CSVWITHNAMESANDTYPES", 
        "CUSTOMSEPARATED", "CUSTOMSEPARATEDWITHNAMES", "CUSTOMSEPARATEDWITHNAMESANDTYPES", 
        "JSON", "JSONASSTRING", "JSONASOBJECT", "JSONSTRINGS", "JSONCOLUMNS", 
        "JSONCOLUMNSWITHMETADATA", "JSONCOMPACT", "JSONCOMPACTCOLUMNS", 
        "JSONEACHROW", "JSONSTRINGSEACHROW", "JSONCOMPACTEACHROW", "JSONCOMPACTEACHROWWITHNAMES", 
        "JSONCOMPACTEACHROWWITHNAMESANDTYPES", "JSONCOMPACTSTRINGSEACHROW", 
        "JSONCOMPACTSTRINGSEACHROWWITHNAMES", "JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES", 
        "JSONOBJECTEACHROW", "BSONEACHROW", "TSKV", "PROTOBUF", "PROTOBUFSINGLE", 
        "PROTOBUFLIST", "AVRO", "AVROCONFLUENT", "PARQUET", "PARQUETMETADATA", 
        "ARROW", "ARROWSTREAM", "ORC", "ONE", "NPY", "ROWBINARY", "ROWBINARYWITHNAMES", 
        "ROWBINARYWITHNAMESANDTYPES", "ROWBINARYWITHDEFAULTS", "NATIVE", 
        "CAPNPROTO", "LINEASSTRING", "RAWBLOB", "MSGPACK", "MYSQLDUMP", 
        "DWARF", "FORM", "KEYED", "RANDOMIZED", "USER_NAME", "IP_ADDRESS", 
        "FORWARDED_IP_ADDRESS", "CLIENT_KEY", "CLIENT_KEY_OR_USER_NAME", 
        "CLIENT_KEY_OR_IP_ADDRESS", "QUERIES", "QUERY_SELECTS", "QUERY_INSERTS", 
        "ERRORS", "RESULT_ROWS", "RESULT_BYTES", "READ_ROWS", "READ_BYTES", 
        "EXECUTION_TIME", "FAILED_SEQUENTIAL_AUTHENTICATIONS", "LIMITS", 
        "TRACKING", "ONLY", "CONST", "CHANGEABLE_IN_READONLY", "OVERRIDABLE", 
        "JSON_FALSE", "JSON_TRUE", "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
        "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", "ARROW_SYMBOL", 
        "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", "CONCAT", 
        "DASH", "DOT", "EQ_DOUBLE", "EQ_SINGLE", "GE", "GT", "LBRACE", "LBRACKET", 
        "LE", "LPAREN", "LT", "NOT_EQ", "PERCENT", "PLUS", "QUESTIONMARK", 
        "QUOTE_DOUBLE", "QUOTE_SINGLE", "RBRACE", "RBRACKET", "RPAREN", 
        "SEMICOLON", "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
        "WHITESPACE"
    ];
    public static readonly ruleNames = [
        "root", "statements", "statement", "notInsertStatement", "commonTableExpressionStatement", 
        "namedQuery", "columnAliases", "alterStatement", "alterTableClause", 
        "assignmentExpressionList", "assignmentExpression", "tableColumnPropertyType", 
        "partitionClause", "attachStatement", "checkStatement", "deleteStatement", 
        "createTableStatement", "createDatabaseStatement", "createDictionaryStatement", 
        "createLiveViewStatement", "createMaterializedViewStatement", "createViewStatement", 
        "stringIdentificationType", "keyTypeClause", "otherIdentificationType", 
        "userIdentificationClause", "validUntilClause", "grantsProvider", 
        "granteesClause", "hostType", "hostClause", "extendedSettingExpression", 
        "extendedSettingsClause", "inAccessStorageClause", "createUserStatement", 
        "replaceOrIfNotExistsClause", "policyAssignmentSubject", "policyExpression", 
        "identifierOrLiteral", "conditionClause", "subjectOrAllOrExcept", 
        "subjectExpression", "createRowPolicyStatement", "quotaKeyType", 
        "quotaKeyedByClause", "quotaRestrictionType", "stringOrNumberLiteral", 
        "quotaRestrictionExpression", "quotaRestrictionClause", "quotaForClause", 
        "quotaForList", "createQuotaStatement", "identifierList", "createRoleStatement", 
        "createSettingsProfileStatement", "namedCollectionExpression", "namedCollectionClause", 
        "createNamedCollectionStatement", "createStatement", "dictionarySchemaClause", 
        "dictionaryAttributeDefinition", "dictionaryEngineClause", "dictionaryPrimaryKeyClause", 
        "dictionaryArgumentExpression", "sourceClause", "lifetimeClause", 
        "layoutClause", "rangeClause", "dictionarySettingsClause", "clusterClause", 
        "uuidClause", "destinationClause", "subqueryClause", "tableSchemaClause", 
        "engineClause", "partitionByClause", "primaryKeyClause", "sampleByClause", 
        "ttlClause", "engineExpression", "tableElementExpression", "tableColumnDefinition", 
        "tableColumnPropertyExpression", "tableIndexDefinition", "tableProjectionDefinition", 
        "codecExpression", "codecArgExpression", "ttlExpression", "describeStatement", 
        "dropStatement", "existsStatement", "explainStatement", "revokeStatement", 
        "subjectExpressionList", "userExpressionList", "roleExpressionList", 
        "grantStatement", "withGrantOrReplaceOption", "withReplaceOption", 
        "accessSubjectIdentifier", "privilegeList", "roleIdentifier", "userIdentifier", 
        "userOrRoleExpressionList", "userOrRoleIdentifier", "selectPrivilege", 
        "insertPrivilege", "createPrivilege", "dropPrivilege", "showPrivilege", 
        "introspectionPrivilege", "sourcePrivilege", "dictPrivilege", "alterPrivilege", 
        "accessManagementPrivilege", "systemPrivilege", "namedCollectionAdminPrivilege", 
        "privilege", "insertStatement", "columnsOrExceptClause", "columnsClause", 
        "insertFormatType", "dataClause", "literalList", "valueIdentifier", 
        "valueOrArrayIdentifier", "arrayIdentifier", "valuesClause", "valuesStatement", 
        "killStatement", "optimizeStatement", "renameStatement", "projectionSelectStatement", 
        "selectUnionStatement", "selectStatementWithParentheses", "selectStatement", 
        "withClause", "topClause", "fromClause", "arrayJoinClause", "windowClause", 
        "prewhereClause", "whereClause", "groupByClause", "havingClause", 
        "orderByClause", "projectionOrderByClause", "limitByClause", "limitClause", 
        "settingsClause", "joinExpression", "joinOperator", "joinOperatorCross", 
        "joinConstraintClause", "sampleClause", "limitExpression", "orderExpressionList", 
        "orderExpression", "ratioExpression", "settingExpressionList", "settingExpression", 
        "windowExpression", "windowPartitionByClause", "windowOrderByClause", 
        "windowFrameClause", "windowFrameExtend", "windowFrameBound", "setStatement", 
        "showStatement", "systemStatement", "truncateStatement", "useStatement", 
        "watchStatement", "columnTypeExpression", "columnExpressionList", 
        "columnsExpression", "columnExpression", "columnArgumentList", "columnArgumentExpression", 
        "columnLambdaExpression", "columnIdentifier", "tableExpression", 
        "tableFunctionExpression", "tableIdentifier", "tableArgList", "tableArgExpression", 
        "databaseIdentifier", "floatingLiteral", "numberLiteral", "literal", 
        "interval", "keyword", "keywordForAlias", "alias", "identifier", 
        "identifierOrNull", "enumValue",
    ];

    public get grammarFileName(): string { return "ClickHouseParser.g4"; }
    public get literalNames(): (string | null)[] { return ClickHouseParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return ClickHouseParser.symbolicNames; }
    public get ruleNames(): string[] { return ClickHouseParser.ruleNames; }
    public get serializedATN(): number[] { return ClickHouseParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, ClickHouseParser._ATN, ClickHouseParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, ClickHouseParser.RULE_root);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 395;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 539000864) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & 197659) !== 0) || _la === 85 || _la === 92 || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & 538443777) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & 1090519557) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & 161) !== 0) || _la === 269 || _la === 405) {
                {
                this.state = 394;
                this.statements();
                }
            }

            this.state = 397;
            this.match(ClickHouseParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statements(): StatementsContext {
        let localContext = new StatementsContext(this.context, this.state);
        this.enterRule(localContext, 2, ClickHouseParser.RULE_statements);
        let _la: number;
        try {
            this.state = 407;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 399;
                this.statement();
                this.state = 401;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 416) {
                    {
                    this.state = 400;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 403;
                this.statement();
                this.state = 404;
                this.match(ClickHouseParser.SEMICOLON);
                this.state = 405;
                this.statements();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 4, ClickHouseParser.RULE_statement);
        let _la: number;
        try {
            this.state = 425;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ALTER:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DROP:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.KILL:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SET:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WITH:
            case ClickHouseParser.LPAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 409;
                this.notInsertStatement();
                this.state = 413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 87) {
                    {
                    this.state = 410;
                    this.match(ClickHouseParser.INTO);
                    this.state = 411;
                    this.match(ClickHouseParser.OUTFILE);
                    this.state = 412;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 417;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 66) {
                    {
                    this.state = 415;
                    this.match(ClickHouseParser.FORMAT);
                    this.state = 416;
                    this.identifierOrNull();
                    }
                }

                this.state = 420;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 5, this.context) ) {
                case 1:
                    {
                    this.state = 419;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                    break;
                }
                }
                break;
            case ClickHouseParser.INSERT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 422;
                this.insertStatement();
                }
                break;
            case ClickHouseParser.GRANT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 423;
                this.grantStatement();
                }
                break;
            case ClickHouseParser.REVOKE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 424;
                this.revokeStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notInsertStatement(): NotInsertStatementContext {
        let localContext = new NotInsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 6, ClickHouseParser.RULE_notInsertStatement);
        try {
            this.state = 450;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 8, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 427;
                this.alterStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 428;
                this.attachStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 429;
                this.checkStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 430;
                this.createStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 431;
                this.describeStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 432;
                this.deleteStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 433;
                this.dropStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 434;
                this.existsStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 435;
                this.explainStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 436;
                this.killStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 437;
                this.optimizeStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 438;
                this.renameStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 439;
                this.selectUnionStatement();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 440;
                this.setStatement();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 441;
                this.showStatement();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 442;
                this.systemStatement();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 443;
                this.truncateStatement();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 444;
                this.useStatement();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 445;
                this.watchStatement();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 447;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
                case 1:
                    {
                    this.state = 446;
                    this.commonTableExpressionStatement();
                    }
                    break;
                }
                this.state = 449;
                this.selectStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonTableExpressionStatement(): CommonTableExpressionStatementContext {
        let localContext = new CommonTableExpressionStatementContext(this.context, this.state);
        this.enterRule(localContext, 8, ClickHouseParser.RULE_commonTableExpressionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 452;
            this.match(ClickHouseParser.WITH);
            this.state = 453;
            this.namedQuery();
            this.state = 458;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 454;
                this.match(ClickHouseParser.COMMA);
                this.state = 455;
                this.namedQuery();
                }
                }
                this.state = 460;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 10, ClickHouseParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 461;
            localContext._name = this.identifier();
            this.state = 463;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 405) {
                {
                this.state = 462;
                this.columnAliases();
                }
            }

            this.state = 465;
            this.match(ClickHouseParser.AS);
            this.state = 466;
            this.match(ClickHouseParser.LPAREN);
            this.state = 467;
            this.notInsertStatement();
            this.state = 468;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAliases(): ColumnAliasesContext {
        let localContext = new ColumnAliasesContext(this.context, this.state);
        this.enterRule(localContext, 12, ClickHouseParser.RULE_columnAliases);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 470;
            this.match(ClickHouseParser.LPAREN);
            this.state = 471;
            this.identifierList();
            this.state = 472;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatement(): AlterStatementContext {
        let localContext = new AlterStatementContext(this.context, this.state);
        this.enterRule(localContext, 14, ClickHouseParser.RULE_alterStatement);
        let _la: number;
        try {
            localContext = new AlterTableStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 474;
            this.match(ClickHouseParser.ALTER);
            this.state = 475;
            this.match(ClickHouseParser.TABLE);
            this.state = 476;
            this.tableIdentifier();
            this.state = 478;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 477;
                this.clusterClause();
                }
            }

            this.state = 480;
            this.alterTableClause();
            this.state = 485;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 481;
                this.match(ClickHouseParser.COMMA);
                this.state = 482;
                this.alterTableClause();
                }
                }
                this.state = 487;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableClause(): AlterTableClauseContext {
        let localContext = new AlterTableClauseContext(this.context, this.state);
        this.enterRule(localContext, 16, ClickHouseParser.RULE_alterTableClause);
        let _la: number;
        try {
            this.state = 702;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 41, this.context) ) {
            case 1:
                localContext = new AlterTableClauseAddColumnContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 488;
                this.match(ClickHouseParser.ADD);
                this.state = 489;
                this.match(ClickHouseParser.COLUMN);
                this.state = 493;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 13, this.context) ) {
                case 1:
                    {
                    this.state = 490;
                    this.match(ClickHouseParser.IF);
                    this.state = 491;
                    this.match(ClickHouseParser.NOT);
                    this.state = 492;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 495;
                this.tableColumnDefinition();
                this.state = 498;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 496;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 497;
                    this.columnIdentifier();
                    }
                }

                }
                break;
            case 2:
                localContext = new AlterTableClauseAddIndexContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 500;
                this.match(ClickHouseParser.ADD);
                this.state = 501;
                this.match(ClickHouseParser.INDEX);
                this.state = 505;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 15, this.context) ) {
                case 1:
                    {
                    this.state = 502;
                    this.match(ClickHouseParser.IF);
                    this.state = 503;
                    this.match(ClickHouseParser.NOT);
                    this.state = 504;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 507;
                this.tableIndexDefinition();
                this.state = 510;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 508;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 509;
                    this.columnIdentifier();
                    }
                }

                }
                break;
            case 3:
                localContext = new AlterTableClauseAddProjectionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 512;
                this.match(ClickHouseParser.ADD);
                this.state = 513;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 517;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 17, this.context) ) {
                case 1:
                    {
                    this.state = 514;
                    this.match(ClickHouseParser.IF);
                    this.state = 515;
                    this.match(ClickHouseParser.NOT);
                    this.state = 516;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 519;
                this.tableProjectionDefinition();
                this.state = 522;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 520;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 521;
                    this.columnIdentifier();
                    }
                }

                }
                break;
            case 4:
                localContext = new AlterTableClauseAttachContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 524;
                this.match(ClickHouseParser.ATTACH);
                this.state = 525;
                this.partitionClause();
                this.state = 528;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68) {
                    {
                    this.state = 526;
                    this.match(ClickHouseParser.FROM);
                    this.state = 527;
                    this.tableIdentifier();
                    }
                }

                }
                break;
            case 5:
                localContext = new AlterTableClauseClearColumnContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 530;
                this.match(ClickHouseParser.CLEAR);
                this.state = 531;
                this.match(ClickHouseParser.COLUMN);
                this.state = 534;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 20, this.context) ) {
                case 1:
                    {
                    this.state = 532;
                    this.match(ClickHouseParser.IF);
                    this.state = 533;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 536;
                this.columnIdentifier();
                this.state = 539;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 537;
                    this.match(ClickHouseParser.IN);
                    this.state = 538;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 6:
                localContext = new AlterTableClauseClearIndexContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 541;
                this.match(ClickHouseParser.CLEAR);
                this.state = 542;
                this.match(ClickHouseParser.INDEX);
                this.state = 545;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 22, this.context) ) {
                case 1:
                    {
                    this.state = 543;
                    this.match(ClickHouseParser.IF);
                    this.state = 544;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 547;
                this.columnIdentifier();
                this.state = 550;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 548;
                    this.match(ClickHouseParser.IN);
                    this.state = 549;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 7:
                localContext = new AlterTableClauseClearProjectionContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 552;
                this.match(ClickHouseParser.CLEAR);
                this.state = 553;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 556;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
                case 1:
                    {
                    this.state = 554;
                    this.match(ClickHouseParser.IF);
                    this.state = 555;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 558;
                this.columnIdentifier();
                this.state = 561;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 559;
                    this.match(ClickHouseParser.IN);
                    this.state = 560;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 8:
                localContext = new AlterTableClauseCommentContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 563;
                this.match(ClickHouseParser.COMMENT);
                this.state = 564;
                this.match(ClickHouseParser.COLUMN);
                this.state = 567;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 26, this.context) ) {
                case 1:
                    {
                    this.state = 565;
                    this.match(ClickHouseParser.IF);
                    this.state = 566;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 569;
                this.columnIdentifier();
                this.state = 570;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 9:
                localContext = new AlterTableClauseDeleteContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 572;
                this.match(ClickHouseParser.DELETE);
                this.state = 573;
                this.match(ClickHouseParser.WHERE);
                this.state = 574;
                this.columnExpression(0);
                }
                break;
            case 10:
                localContext = new AlterTableClauseDetachContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 575;
                this.match(ClickHouseParser.DETACH);
                this.state = 576;
                this.partitionClause();
                }
                break;
            case 11:
                localContext = new AlterTableClauseDropColumnContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 577;
                this.match(ClickHouseParser.DROP);
                this.state = 578;
                this.match(ClickHouseParser.COLUMN);
                this.state = 581;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
                case 1:
                    {
                    this.state = 579;
                    this.match(ClickHouseParser.IF);
                    this.state = 580;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 583;
                this.columnIdentifier();
                }
                break;
            case 12:
                localContext = new AlterTableClauseDropIndexContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 584;
                this.match(ClickHouseParser.DROP);
                this.state = 585;
                this.match(ClickHouseParser.INDEX);
                this.state = 588;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 28, this.context) ) {
                case 1:
                    {
                    this.state = 586;
                    this.match(ClickHouseParser.IF);
                    this.state = 587;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 590;
                this.columnIdentifier();
                }
                break;
            case 13:
                localContext = new AlterTableClauseDropProjectionContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 591;
                this.match(ClickHouseParser.DROP);
                this.state = 592;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 595;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 29, this.context) ) {
                case 1:
                    {
                    this.state = 593;
                    this.match(ClickHouseParser.IF);
                    this.state = 594;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 597;
                this.columnIdentifier();
                }
                break;
            case 14:
                localContext = new AlterTableClauseDropPartitionContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 598;
                this.match(ClickHouseParser.DROP);
                this.state = 599;
                this.partitionClause();
                }
                break;
            case 15:
                localContext = new AlterTableClauseFreezePartitionContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 600;
                this.match(ClickHouseParser.FREEZE);
                this.state = 602;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 126) {
                    {
                    this.state = 601;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 16:
                localContext = new AlterTableClauseMaterializeIndexContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 604;
                this.match(ClickHouseParser.MATERIALIZE);
                this.state = 605;
                this.match(ClickHouseParser.INDEX);
                this.state = 608;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 31, this.context) ) {
                case 1:
                    {
                    this.state = 606;
                    this.match(ClickHouseParser.IF);
                    this.state = 607;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 610;
                this.columnIdentifier();
                this.state = 613;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 611;
                    this.match(ClickHouseParser.IN);
                    this.state = 612;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 17:
                localContext = new AlterTableClauseMaterializeProjectionContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 615;
                this.match(ClickHouseParser.MATERIALIZE);
                this.state = 616;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 619;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 33, this.context) ) {
                case 1:
                    {
                    this.state = 617;
                    this.match(ClickHouseParser.IF);
                    this.state = 618;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 621;
                this.columnIdentifier();
                this.state = 624;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 622;
                    this.match(ClickHouseParser.IN);
                    this.state = 623;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 18:
                localContext = new AlterTableClauseModifyCodecContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 626;
                this.match(ClickHouseParser.MODIFY);
                this.state = 627;
                this.match(ClickHouseParser.COLUMN);
                this.state = 630;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 35, this.context) ) {
                case 1:
                    {
                    this.state = 628;
                    this.match(ClickHouseParser.IF);
                    this.state = 629;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 632;
                this.columnIdentifier();
                this.state = 633;
                this.codecExpression();
                }
                break;
            case 19:
                localContext = new AlterTableClauseModifyCommentContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 635;
                this.match(ClickHouseParser.MODIFY);
                this.state = 636;
                this.match(ClickHouseParser.COLUMN);
                this.state = 639;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 36, this.context) ) {
                case 1:
                    {
                    this.state = 637;
                    this.match(ClickHouseParser.IF);
                    this.state = 638;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 641;
                this.columnIdentifier();
                this.state = 642;
                this.match(ClickHouseParser.COMMENT);
                this.state = 643;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 20:
                localContext = new AlterTableClauseModifyRemoveContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 645;
                this.match(ClickHouseParser.MODIFY);
                this.state = 646;
                this.match(ClickHouseParser.COLUMN);
                this.state = 649;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
                case 1:
                    {
                    this.state = 647;
                    this.match(ClickHouseParser.IF);
                    this.state = 648;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 651;
                this.columnIdentifier();
                this.state = 652;
                this.match(ClickHouseParser.REMOVE);
                this.state = 653;
                this.tableColumnPropertyType();
                }
                break;
            case 21:
                localContext = new AlterTableClauseModifyContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 655;
                this.match(ClickHouseParser.MODIFY);
                this.state = 656;
                this.match(ClickHouseParser.COLUMN);
                this.state = 659;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 38, this.context) ) {
                case 1:
                    {
                    this.state = 657;
                    this.match(ClickHouseParser.IF);
                    this.state = 658;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 661;
                this.tableColumnDefinition();
                }
                break;
            case 22:
                localContext = new AlterTableClauseModifyOrderByContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 662;
                this.match(ClickHouseParser.MODIFY);
                this.state = 663;
                this.match(ClickHouseParser.ORDER);
                this.state = 664;
                this.match(ClickHouseParser.BY);
                this.state = 665;
                this.columnExpression(0);
                }
                break;
            case 23:
                localContext = new AlterTableClauseModifyTTLContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 666;
                this.match(ClickHouseParser.MODIFY);
                this.state = 667;
                this.ttlClause();
                }
                break;
            case 24:
                localContext = new AlterTableClauseMovePartitionContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 668;
                this.match(ClickHouseParser.MOVE);
                this.state = 669;
                this.partitionClause();
                this.state = 679;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
                case 1:
                    {
                    this.state = 670;
                    this.match(ClickHouseParser.TO);
                    this.state = 671;
                    this.match(ClickHouseParser.DISK);
                    this.state = 672;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case 2:
                    {
                    this.state = 673;
                    this.match(ClickHouseParser.TO);
                    this.state = 674;
                    this.match(ClickHouseParser.VOLUME);
                    this.state = 675;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case 3:
                    {
                    this.state = 676;
                    this.match(ClickHouseParser.TO);
                    this.state = 677;
                    this.match(ClickHouseParser.TABLE);
                    this.state = 678;
                    this.tableIdentifier();
                    }
                    break;
                }
                }
                break;
            case 25:
                localContext = new AlterTableClauseRemoveTTLContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 681;
                this.match(ClickHouseParser.REMOVE);
                this.state = 682;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 26:
                localContext = new AlterTableClauseRenameContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 683;
                this.match(ClickHouseParser.RENAME);
                this.state = 684;
                this.match(ClickHouseParser.COLUMN);
                this.state = 687;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 40, this.context) ) {
                case 1:
                    {
                    this.state = 685;
                    this.match(ClickHouseParser.IF);
                    this.state = 686;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 689;
                this.columnIdentifier();
                this.state = 690;
                this.match(ClickHouseParser.TO);
                this.state = 691;
                this.columnIdentifier();
                }
                break;
            case 27:
                localContext = new AlterTableClauseReplaceContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 693;
                this.match(ClickHouseParser.REPLACE);
                this.state = 694;
                this.partitionClause();
                this.state = 695;
                this.match(ClickHouseParser.FROM);
                this.state = 696;
                this.tableIdentifier();
                }
                break;
            case 28:
                localContext = new AlterTableClauseUpdateContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 698;
                this.match(ClickHouseParser.UPDATE);
                this.state = 699;
                this.assignmentExpressionList();
                this.state = 700;
                this.whereClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentExpressionList(): AssignmentExpressionListContext {
        let localContext = new AssignmentExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 18, ClickHouseParser.RULE_assignmentExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 704;
            this.assignmentExpression();
            this.state = 709;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 705;
                this.match(ClickHouseParser.COMMA);
                this.state = 706;
                this.assignmentExpression();
                }
                }
                this.state = 711;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentExpression(): AssignmentExpressionContext {
        let localContext = new AssignmentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 20, ClickHouseParser.RULE_assignmentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 712;
            this.columnIdentifier();
            this.state = 713;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 714;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnPropertyType(): TableColumnPropertyTypeContext {
        let localContext = new TableColumnPropertyTypeContext(this.context, this.state);
        this.enterRule(localContext, 22, ClickHouseParser.RULE_tableColumnPropertyType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 716;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 150994952) !== 0) || _la === 38 || _la === 104 || _la === 177)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionClause(): PartitionClauseContext {
        let localContext = new PartitionClauseContext(this.context, this.state);
        this.enterRule(localContext, 24, ClickHouseParser.RULE_partitionClause);
        try {
            this.state = 723;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 43, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 718;
                this.match(ClickHouseParser.PARTITION);
                this.state = 719;
                this.columnExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 720;
                this.match(ClickHouseParser.PARTITION);
                this.state = 721;
                this.match(ClickHouseParser.ID);
                this.state = 722;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public attachStatement(): AttachStatementContext {
        let localContext = new AttachStatementContext(this.context, this.state);
        this.enterRule(localContext, 26, ClickHouseParser.RULE_attachStatement);
        let _la: number;
        try {
            localContext = new AttachDictionaryStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 725;
            this.match(ClickHouseParser.ATTACH);
            this.state = 726;
            this.match(ClickHouseParser.DICTIONARY);
            this.state = 727;
            this.tableIdentifier();
            this.state = 729;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 728;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkStatement(): CheckStatementContext {
        let localContext = new CheckStatementContext(this.context, this.state);
        this.enterRule(localContext, 28, ClickHouseParser.RULE_checkStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 731;
            this.match(ClickHouseParser.CHECK);
            this.state = 732;
            this.match(ClickHouseParser.TABLE);
            this.state = 733;
            this.tableIdentifier();
            this.state = 735;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 126) {
                {
                this.state = 734;
                this.partitionClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteStatement(): DeleteStatementContext {
        let localContext = new DeleteStatementContext(this.context, this.state);
        this.enterRule(localContext, 30, ClickHouseParser.RULE_deleteStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 737;
            this.match(ClickHouseParser.DELETE);
            this.state = 738;
            this.match(ClickHouseParser.FROM);
            this.state = 739;
            this.tableIdentifier();
            this.state = 741;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 740;
                this.clusterClause();
                }
            }

            this.state = 744;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 191) {
                {
                this.state = 743;
                this.whereClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableStatement(): CreateTableStatementContext {
        let localContext = new CreateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 32, ClickHouseParser.RULE_createTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 753;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ATTACH:
                {
                this.state = 746;
                this.match(ClickHouseParser.ATTACH);
                }
                break;
            case ClickHouseParser.CREATE:
                {
                this.state = 747;
                this.match(ClickHouseParser.CREATE);
                this.state = 750;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 748;
                    this.match(ClickHouseParser.OR);
                    this.state = 749;
                    this.match(ClickHouseParser.REPLACE);
                    }
                }

                }
                break;
            case ClickHouseParser.REPLACE:
                {
                this.state = 752;
                this.match(ClickHouseParser.REPLACE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 756;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 164) {
                {
                this.state = 755;
                this.match(ClickHouseParser.TEMPORARY);
                }
            }

            this.state = 758;
            this.match(ClickHouseParser.TABLE);
            this.state = 762;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 51, this.context) ) {
            case 1:
                {
                this.state = 759;
                this.match(ClickHouseParser.IF);
                this.state = 760;
                this.match(ClickHouseParser.NOT);
                this.state = 761;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 764;
            this.tableIdentifier();
            this.state = 766;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 765;
                this.uuidClause();
                }
            }

            this.state = 769;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 768;
                this.clusterClause();
                }
            }

            this.state = 772;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 54, this.context) ) {
            case 1:
                {
                this.state = 771;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 775;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 774;
                this.engineClause();
                }
            }

            this.state = 778;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 777;
                this.subqueryClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext {
        let localContext = new CreateDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 34, ClickHouseParser.RULE_createDatabaseStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 780;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 781;
            this.match(ClickHouseParser.DATABASE);
            this.state = 785;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 57, this.context) ) {
            case 1:
                {
                this.state = 782;
                this.match(ClickHouseParser.IF);
                this.state = 783;
                this.match(ClickHouseParser.NOT);
                this.state = 784;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 787;
            this.identifier();
            this.state = 789;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 788;
                this.clusterClause();
                }
            }

            this.state = 792;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 791;
                this.engineExpression();
                }
            }

            this.state = 796;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 27) {
                {
                this.state = 794;
                this.match(ClickHouseParser.COMMENT);
                this.state = 795;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDictionaryStatement(): CreateDictionaryStatementContext {
        let localContext = new CreateDictionaryStatementContext(this.context, this.state);
        this.enterRule(localContext, 36, ClickHouseParser.RULE_createDictionaryStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 805;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ATTACH:
                {
                this.state = 798;
                this.match(ClickHouseParser.ATTACH);
                }
                break;
            case ClickHouseParser.CREATE:
                {
                this.state = 799;
                this.match(ClickHouseParser.CREATE);
                this.state = 802;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 800;
                    this.match(ClickHouseParser.OR);
                    this.state = 801;
                    this.match(ClickHouseParser.REPLACE);
                    }
                }

                }
                break;
            case ClickHouseParser.REPLACE:
                {
                this.state = 804;
                this.match(ClickHouseParser.REPLACE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 807;
            this.match(ClickHouseParser.DICTIONARY);
            this.state = 811;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 63, this.context) ) {
            case 1:
                {
                this.state = 808;
                this.match(ClickHouseParser.IF);
                this.state = 809;
                this.match(ClickHouseParser.NOT);
                this.state = 810;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 813;
            this.tableIdentifier();
            this.state = 815;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 814;
                this.uuidClause();
                }
            }

            this.state = 818;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 817;
                this.clusterClause();
                }
            }

            this.state = 820;
            this.dictionarySchemaClause();
            this.state = 821;
            this.dictionaryEngineClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createLiveViewStatement(): CreateLiveViewStatementContext {
        let localContext = new CreateLiveViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 38, ClickHouseParser.RULE_createLiveViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 823;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 824;
            this.match(ClickHouseParser.LIVE);
            this.state = 825;
            this.match(ClickHouseParser.VIEW);
            this.state = 829;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 66, this.context) ) {
            case 1:
                {
                this.state = 826;
                this.match(ClickHouseParser.IF);
                this.state = 827;
                this.match(ClickHouseParser.NOT);
                this.state = 828;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 831;
            this.tableIdentifier();
            this.state = 833;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 832;
                this.uuidClause();
                }
            }

            this.state = 836;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 835;
                this.clusterClause();
                }
            }

            this.state = 843;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 838;
                this.match(ClickHouseParser.WITH);
                this.state = 839;
                this.match(ClickHouseParser.TIMEOUT);
                this.state = 841;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 386) {
                    {
                    this.state = 840;
                    this.match(ClickHouseParser.DECIMAL_LITERAL);
                    }
                }

                }
            }

            this.state = 846;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 170) {
                {
                this.state = 845;
                this.destinationClause();
                }
            }

            this.state = 849;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 72, this.context) ) {
            case 1:
                {
                this.state = 848;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 851;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext {
        let localContext = new CreateMaterializedViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 40, ClickHouseParser.RULE_createMaterializedViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 853;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 854;
            this.match(ClickHouseParser.MATERIALIZED);
            this.state = 855;
            this.match(ClickHouseParser.VIEW);
            this.state = 859;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 73, this.context) ) {
            case 1:
                {
                this.state = 856;
                this.match(ClickHouseParser.IF);
                this.state = 857;
                this.match(ClickHouseParser.NOT);
                this.state = 858;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 861;
            this.tableIdentifier();
            this.state = 863;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 862;
                this.uuidClause();
                }
            }

            this.state = 866;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 865;
                this.clusterClause();
                }
            }

            this.state = 869;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 405) {
                {
                this.state = 868;
                this.tableSchemaClause();
                }
            }

            this.state = 876;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.TO:
                {
                this.state = 871;
                this.destinationClause();
                }
                break;
            case ClickHouseParser.ENGINE:
                {
                this.state = 872;
                this.engineClause();
                this.state = 874;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 129) {
                    {
                    this.state = 873;
                    this.match(ClickHouseParser.POPULATE);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 878;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createViewStatement(): CreateViewStatementContext {
        let localContext = new CreateViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 42, ClickHouseParser.RULE_createViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 880;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 883;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 121) {
                {
                this.state = 881;
                this.match(ClickHouseParser.OR);
                this.state = 882;
                this.match(ClickHouseParser.REPLACE);
                }
            }

            this.state = 885;
            this.match(ClickHouseParser.VIEW);
            this.state = 889;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 80, this.context) ) {
            case 1:
                {
                this.state = 886;
                this.match(ClickHouseParser.IF);
                this.state = 887;
                this.match(ClickHouseParser.NOT);
                this.state = 888;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 891;
            this.tableIdentifier();
            this.state = 893;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 892;
                this.uuidClause();
                }
            }

            this.state = 896;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 895;
                this.clusterClause();
                }
            }

            this.state = 899;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 83, this.context) ) {
            case 1:
                {
                this.state = 898;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 901;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringIdentificationType(): StringIdentificationTypeContext {
        let localContext = new StringIdentificationTypeContext(this.context, this.state);
        this.enterRule(localContext, 44, ClickHouseParser.RULE_stringIdentificationType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 903;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 196639) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyTypeClause(): KeyTypeClauseContext {
        let localContext = new KeyTypeClauseContext(this.context, this.state);
        this.enterRule(localContext, 46, ClickHouseParser.RULE_keyTypeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 905;
            this.match(ClickHouseParser.KEY);
            this.state = 906;
            this.match(ClickHouseParser.STRING_LITERAL);
            this.state = 907;
            this.match(ClickHouseParser.TYPE);
            this.state = 908;
            this.match(ClickHouseParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public otherIdentificationType(): OtherIdentificationTypeContext {
        let localContext = new OtherIdentificationTypeContext(this.context, this.state);
        this.enterRule(localContext, 48, ClickHouseParser.RULE_otherIdentificationType);
        let _la: number;
        try {
            this.state = 937;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.NO_PASSWORD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 910;
                this.match(ClickHouseParser.NO_PASSWORD);
                }
                break;
            case ClickHouseParser.LDAP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 911;
                this.match(ClickHouseParser.LDAP);
                this.state = 912;
                this.match(ClickHouseParser.SERVER);
                this.state = 913;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.KERBEROS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 914;
                this.match(ClickHouseParser.KERBEROS);
                {
                this.state = 915;
                this.match(ClickHouseParser.REALM);
                this.state = 916;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                }
                break;
            case ClickHouseParser.SSL_CERTIFICATE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 917;
                this.match(ClickHouseParser.SSL_CERTIFICATE);
                this.state = 918;
                _la = this.tokenStream.LA(1);
                if(!(_la === 282 || _la === 283)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 919;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.SSH_KEY:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 920;
                this.match(ClickHouseParser.SSH_KEY);
                this.state = 921;
                this.match(ClickHouseParser.BY);
                this.state = 922;
                this.keyTypeClause();
                this.state = 927;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 394) {
                    {
                    {
                    this.state = 923;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 924;
                    this.keyTypeClause();
                    }
                    }
                    this.state = 929;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case ClickHouseParser.HTTP:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 930;
                this.match(ClickHouseParser.HTTP);
                this.state = 931;
                this.match(ClickHouseParser.SERVER);
                this.state = 932;
                this.match(ClickHouseParser.STRING_LITERAL);
                this.state = 935;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 286) {
                    {
                    this.state = 933;
                    this.match(ClickHouseParser.SCHEME);
                    this.state = 934;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userIdentificationClause(): UserIdentificationClauseContext {
        let localContext = new UserIdentificationClauseContext(this.context, this.state);
        this.enterRule(localContext, 50, ClickHouseParser.RULE_userIdentificationClause);
        let _la: number;
        try {
            this.state = 951;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 88, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 939;
                this.match(ClickHouseParser.NOT);
                this.state = 940;
                this.match(ClickHouseParser.IDENTIFIED);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 941;
                this.match(ClickHouseParser.IDENTIFIED);
                this.state = 944;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 193) {
                    {
                    this.state = 942;
                    this.match(ClickHouseParser.WITH);
                    this.state = 943;
                    this.stringIdentificationType();
                    }
                }

                this.state = 946;
                this.match(ClickHouseParser.BY);
                this.state = 947;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 948;
                this.match(ClickHouseParser.IDENTIFIED);
                this.state = 949;
                this.match(ClickHouseParser.WITH);
                this.state = 950;
                this.otherIdentificationType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public validUntilClause(): ValidUntilClauseContext {
        let localContext = new ValidUntilClauseContext(this.context, this.state);
        this.enterRule(localContext, 52, ClickHouseParser.RULE_validUntilClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 953;
            this.match(ClickHouseParser.VALID);
            this.state = 954;
            this.match(ClickHouseParser.UNTIL);
            this.state = 955;
            this.match(ClickHouseParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantsProvider(): GrantsProviderContext {
        let localContext = new GrantsProviderContext(this.context, this.state);
        this.enterRule(localContext, 54, ClickHouseParser.RULE_grantsProvider);
        try {
            this.state = 961;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 957;
                this.userIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 958;
                this.roleIdentifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 959;
                this.match(ClickHouseParser.ANY);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 960;
                this.match(ClickHouseParser.NONE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public granteesClause(): GranteesClauseContext {
        let localContext = new GranteesClauseContext(this.context, this.state);
        this.enterRule(localContext, 56, ClickHouseParser.RULE_granteesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 963;
            this.match(ClickHouseParser.GRANTEES);
            this.state = 964;
            this.grantsProvider();
            this.state = 969;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 965;
                this.match(ClickHouseParser.COMMA);
                this.state = 966;
                this.grantsProvider();
                }
                }
                this.state = 971;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 974;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 268) {
                {
                this.state = 972;
                this.match(ClickHouseParser.EXCEPT);
                this.state = 973;
                this.userOrRoleExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hostType(): HostTypeContext {
        let localContext = new HostTypeContext(this.context, this.state);
        this.enterRule(localContext, 58, ClickHouseParser.RULE_hostType);
        let _la: number;
        try {
            this.state = 981;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 976;
                this.match(ClickHouseParser.LOCAL);
                }
                break;
            case ClickHouseParser.ANY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 977;
                this.match(ClickHouseParser.ANY);
                }
                break;
            case ClickHouseParser.NONE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 978;
                this.match(ClickHouseParser.NONE);
                }
                break;
            case ClickHouseParser.LIKE:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 979;
                _la = this.tokenStream.LA(1);
                if(!(_la === 98 || ((((_la - 292)) & ~0x1F) === 0 && ((1 << (_la - 292)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 980;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hostClause(): HostClauseContext {
        let localContext = new HostClauseContext(this.context, this.state);
        this.enterRule(localContext, 60, ClickHouseParser.RULE_hostClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 983;
            this.match(ClickHouseParser.HOST);
            this.state = 984;
            this.hostType();
            this.state = 989;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 985;
                this.match(ClickHouseParser.COMMA);
                this.state = 986;
                this.hostType();
                }
                }
                this.state = 991;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extendedSettingExpression(): ExtendedSettingExpressionContext {
        let localContext = new ExtendedSettingExpressionContext(this.context, this.state);
        this.enterRule(localContext, 62, ClickHouseParser.RULE_extendedSettingExpression);
        let _la: number;
        try {
            this.state = 1014;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 99, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 992;
                this.identifier();
                this.state = 993;
                this.match(ClickHouseParser.EQ_SINGLE);
                this.state = 994;
                this.literal();
                this.state = 1000;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 107) {
                    {
                    this.state = 995;
                    this.match(ClickHouseParser.MIN);
                    this.state = 997;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 399) {
                        {
                        this.state = 996;
                        this.match(ClickHouseParser.EQ_SINGLE);
                        }
                    }

                    this.state = 999;
                    this.literal();
                    }
                }

                this.state = 1007;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 1002;
                    this.match(ClickHouseParser.MAX);
                    this.state = 1004;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 399) {
                        {
                        this.state = 1003;
                        this.match(ClickHouseParser.EQ_SINGLE);
                        }
                    }

                    this.state = 1006;
                    this.literal();
                    }
                }

                this.state = 1010;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 296 || _la === 297 || _la === 378 || _la === 379) {
                    {
                    this.state = 1009;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 296 || _la === 297 || _la === 378 || _la === 379)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1012;
                this.match(ClickHouseParser.PROFILE);
                this.state = 1013;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extendedSettingsClause(): ExtendedSettingsClauseContext {
        let localContext = new ExtendedSettingsClauseContext(this.context, this.state);
        this.enterRule(localContext, 64, ClickHouseParser.RULE_extendedSettingsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1016;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 1017;
            this.extendedSettingExpression();
            this.state = 1022;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 1018;
                this.match(ClickHouseParser.COMMA);
                this.state = 1019;
                this.extendedSettingExpression();
                }
                }
                this.state = 1024;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inAccessStorageClause(): InAccessStorageClauseContext {
        let localContext = new InAccessStorageClauseContext(this.context, this.state);
        this.enterRule(localContext, 66, ClickHouseParser.RULE_inAccessStorageClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1025;
            this.match(ClickHouseParser.IN);
            this.state = 1028;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.KEYED:
            case ClickHouseParser.RANDOMIZED:
            case ClickHouseParser.USER_NAME:
            case ClickHouseParser.IP_ADDRESS:
            case ClickHouseParser.FORWARDED_IP_ADDRESS:
            case ClickHouseParser.CLIENT_KEY:
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
            case ClickHouseParser.QUERIES:
            case ClickHouseParser.QUERY_SELECTS:
            case ClickHouseParser.QUERY_INSERTS:
            case ClickHouseParser.ERRORS:
            case ClickHouseParser.RESULT_ROWS:
            case ClickHouseParser.RESULT_BYTES:
            case ClickHouseParser.READ_ROWS:
            case ClickHouseParser.READ_BYTES:
            case ClickHouseParser.EXECUTION_TIME:
            case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
            case ClickHouseParser.LIMITS:
            case ClickHouseParser.TRACKING:
            case ClickHouseParser.ONLY:
            case ClickHouseParser.CONST:
            case ClickHouseParser.CHANGEABLE_IN_READONLY:
            case ClickHouseParser.OVERRIDABLE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 1026;
                this.identifier();
                }
                break;
            case ClickHouseParser.STRING_LITERAL:
                {
                this.state = 1027;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUserStatement(): CreateUserStatementContext {
        let localContext = new CreateUserStatementContext(this.context, this.state);
        this.enterRule(localContext, 68, ClickHouseParser.RULE_createUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1030;
            this.match(ClickHouseParser.CREATE);
            this.state = 1031;
            this.match(ClickHouseParser.USER);
            this.state = 1033;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 102, this.context) ) {
            case 1:
                {
                this.state = 1032;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1035;
            this.identifierList();
            this.state = 1037;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 1036;
                this.clusterClause();
                }
            }

            this.state = 1039;
            this.userIdentificationClause();
            this.state = 1041;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 295) {
                {
                this.state = 1040;
                this.hostClause();
                }
            }

            this.state = 1044;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 289) {
                {
                this.state = 1043;
                this.validUntilClause();
                }
            }

            this.state = 1047;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 1046;
                this.inAccessStorageClause();
                }
            }

            this.state = 1052;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 107, this.context) ) {
            case 1:
                {
                this.state = 1049;
                this.match(ClickHouseParser.DEFAULT);
                this.state = 1050;
                this.match(ClickHouseParser.ROLE);
                this.state = 1051;
                this.roleExpressionList();
                }
                break;
            }
            this.state = 1060;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 38) {
                {
                this.state = 1054;
                this.match(ClickHouseParser.DEFAULT);
                this.state = 1055;
                this.match(ClickHouseParser.DATABASE);
                this.state = 1058;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 108, this.context) ) {
                case 1:
                    {
                    this.state = 1056;
                    this.databaseIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 1057;
                    this.match(ClickHouseParser.NONE);
                    }
                    break;
                }
                }
            }

            this.state = 1063;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 291) {
                {
                this.state = 1062;
                this.granteesClause();
                }
            }

            this.state = 1066;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 1065;
                this.extendedSettingsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext {
        let localContext = new ReplaceOrIfNotExistsClauseContext(this.context, this.state);
        this.enterRule(localContext, 70, ClickHouseParser.RULE_replaceOrIfNotExistsClause);
        try {
            this.state = 1073;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.OR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1068;
                this.match(ClickHouseParser.OR);
                this.state = 1069;
                this.match(ClickHouseParser.REPLACE);
                }
                break;
            case ClickHouseParser.IF:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1070;
                this.match(ClickHouseParser.IF);
                this.state = 1071;
                this.match(ClickHouseParser.NOT);
                this.state = 1072;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public policyAssignmentSubject(): PolicyAssignmentSubjectContext {
        let localContext = new PolicyAssignmentSubjectContext(this.context, this.state);
        this.enterRule(localContext, 72, ClickHouseParser.RULE_policyAssignmentSubject);
        try {
            this.state = 1080;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 113, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1075;
                this.tableIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1076;
                this.identifier();
                this.state = 1077;
                this.match(ClickHouseParser.DOT);
                this.state = 1078;
                this.match(ClickHouseParser.ASTERISK);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public policyExpression(): PolicyExpressionContext {
        let localContext = new PolicyExpressionContext(this.context, this.state);
        this.enterRule(localContext, 74, ClickHouseParser.RULE_policyExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1082;
            this.identifier();
            this.state = 1084;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 114, this.context) ) {
            case 1:
                {
                this.state = 1083;
                this.clusterClause();
                }
                break;
            }
            this.state = 1086;
            this.match(ClickHouseParser.ON);
            this.state = 1087;
            this.policyAssignmentSubject();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierOrLiteral(): IdentifierOrLiteralContext {
        let localContext = new IdentifierOrLiteralContext(this.context, this.state);
        this.enterRule(localContext, 76, ClickHouseParser.RULE_identifierOrLiteral);
        try {
            this.state = 1091;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 115, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1089;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1090;
                this.literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public conditionClause(): ConditionClauseContext {
        let localContext = new ConditionClauseContext(this.context, this.state);
        this.enterRule(localContext, 78, ClickHouseParser.RULE_conditionClause);
        let _la: number;
        try {
            this.state = 1098;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 116, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1093;
                this.identifierOrLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1094;
                this.identifierOrLiteral();
                this.state = 1095;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 399)) & ~0x1F) === 0 && ((1 << (_la - 399)) & 389) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1096;
                this.identifierOrLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subjectOrAllOrExcept(): SubjectOrAllOrExceptContext {
        let localContext = new SubjectOrAllOrExceptContext(this.context, this.state);
        this.enterRule(localContext, 80, ClickHouseParser.RULE_subjectOrAllOrExcept);
        try {
            this.state = 1105;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 117, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1100;
                this.userOrRoleIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1101;
                this.match(ClickHouseParser.ALL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1102;
                this.match(ClickHouseParser.ALL);
                this.state = 1103;
                this.match(ClickHouseParser.EXCEPT);
                this.state = 1104;
                this.userOrRoleExpressionList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subjectExpression(): SubjectExpressionContext {
        let localContext = new SubjectExpressionContext(this.context, this.state);
        this.enterRule(localContext, 82, ClickHouseParser.RULE_subjectExpression);
        try {
            this.state = 1112;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 118, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1107;
                this.userOrRoleIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1108;
                this.match(ClickHouseParser.ALL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1109;
                this.match(ClickHouseParser.ALL);
                this.state = 1110;
                this.match(ClickHouseParser.EXCEPT);
                this.state = 1111;
                this.userOrRoleExpressionList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRowPolicyStatement(): CreateRowPolicyStatementContext {
        let localContext = new CreateRowPolicyStatementContext(this.context, this.state);
        this.enterRule(localContext, 84, ClickHouseParser.RULE_createRowPolicyStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1114;
            this.match(ClickHouseParser.CREATE);
            this.state = 1116;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 145) {
                {
                this.state = 1115;
                this.match(ClickHouseParser.ROW);
                }
            }

            this.state = 1118;
            this.match(ClickHouseParser.POLICY);
            this.state = 1120;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
            case 1:
                {
                this.state = 1119;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1122;
            this.policyExpression();
            this.state = 1127;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 1123;
                this.match(ClickHouseParser.COMMA);
                this.state = 1124;
                this.policyExpression();
                }
                }
                this.state = 1129;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1131;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 1130;
                this.inAccessStorageClause();
                }
            }

            this.state = 1135;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 65) {
                {
                this.state = 1133;
                this.match(ClickHouseParser.FOR);
                this.state = 1134;
                this.match(ClickHouseParser.SELECT);
                }
            }

            this.state = 1137;
            this.match(ClickHouseParser.USING);
            this.state = 1138;
            this.conditionClause();
            this.state = 1141;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 1139;
                this.match(ClickHouseParser.AS);
                this.state = 1140;
                _la = this.tokenStream.LA(1);
                if(!(_la === 298 || _la === 299)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1145;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 170) {
                {
                this.state = 1143;
                this.match(ClickHouseParser.TO);
                this.state = 1144;
                this.subjectExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaKeyType(): QuotaKeyTypeContext {
        let localContext = new QuotaKeyTypeContext(this.context, this.state);
        this.enterRule(localContext, 86, ClickHouseParser.RULE_quotaKeyType);
        let _la: number;
        try {
            this.state = 1158;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.USER_NAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1147;
                this.match(ClickHouseParser.USER_NAME);
                }
                break;
            case ClickHouseParser.IP_ADDRESS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1148;
                this.match(ClickHouseParser.IP_ADDRESS);
                }
                break;
            case ClickHouseParser.CLIENT_KEY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1149;
                this.match(ClickHouseParser.CLIENT_KEY);
                this.state = 1152;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 394) {
                    {
                    this.state = 1150;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1151;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 359 || _la === 360)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case ClickHouseParser.NOT:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1154;
                this.match(ClickHouseParser.NOT);
                this.state = 1155;
                this.match(ClickHouseParser.KEYED);
                }
                break;
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1156;
                this.match(ClickHouseParser.CLIENT_KEY_OR_USER_NAME);
                }
                break;
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1157;
                this.match(ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaKeyedByClause(): QuotaKeyedByClauseContext {
        let localContext = new QuotaKeyedByClauseContext(this.context, this.state);
        this.enterRule(localContext, 88, ClickHouseParser.RULE_quotaKeyedByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1160;
            this.match(ClickHouseParser.KEYED);
            this.state = 1161;
            this.match(ClickHouseParser.BY);
            this.state = 1162;
            this.quotaKeyType();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaRestrictionType(): QuotaRestrictionTypeContext {
        let localContext = new QuotaRestrictionTypeContext(this.context, this.state);
        this.enterRule(localContext, 90, ClickHouseParser.RULE_quotaRestrictionType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1164;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 365)) & ~0x1F) === 0 && ((1 << (_la - 365)) & 1023) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringOrNumberLiteral(): StringOrNumberLiteralContext {
        let localContext = new StringOrNumberLiteralContext(this.context, this.state);
        this.enterRule(localContext, 92, ClickHouseParser.RULE_stringOrNumberLiteral);
        try {
            this.state = 1168;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1166;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.INF:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.PLUS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1167;
                this.numberLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaRestrictionExpression(): QuotaRestrictionExpressionContext {
        let localContext = new QuotaRestrictionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 94, ClickHouseParser.RULE_quotaRestrictionExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1170;
            this.match(ClickHouseParser.MAX);
            this.state = 1171;
            this.quotaRestrictionType();
            this.state = 1172;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 1173;
            this.stringOrNumberLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaRestrictionClause(): QuotaRestrictionClauseContext {
        let localContext = new QuotaRestrictionClauseContext(this.context, this.state);
        this.enterRule(localContext, 96, ClickHouseParser.RULE_quotaRestrictionClause);
        try {
            let alternative: number;
            this.state = 1187;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.MAX:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1175;
                this.quotaRestrictionExpression();
                this.state = 1180;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 129, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1176;
                        this.match(ClickHouseParser.COMMA);
                        this.state = 1177;
                        this.quotaRestrictionExpression();
                        }
                        }
                    }
                    this.state = 1182;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 129, this.context);
                }
                }
                break;
            case ClickHouseParser.NO:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1183;
                this.match(ClickHouseParser.NO);
                this.state = 1184;
                this.match(ClickHouseParser.LIMITS);
                }
                break;
            case ClickHouseParser.TRACKING:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1185;
                this.match(ClickHouseParser.TRACKING);
                this.state = 1186;
                this.match(ClickHouseParser.ONLY);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaForClause(): QuotaForClauseContext {
        let localContext = new QuotaForClauseContext(this.context, this.state);
        this.enterRule(localContext, 98, ClickHouseParser.RULE_quotaForClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1189;
            this.match(ClickHouseParser.FOR);
            this.state = 1191;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 358) {
                {
                this.state = 1190;
                this.match(ClickHouseParser.RANDOMIZED);
                }
            }

            this.state = 1193;
            this.match(ClickHouseParser.INTERVAL);
            this.state = 1194;
            this.numberLiteral();
            this.state = 1195;
            this.interval();
            this.state = 1196;
            this.quotaRestrictionClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaForList(): QuotaForListContext {
        let localContext = new QuotaForListContext(this.context, this.state);
        this.enterRule(localContext, 100, ClickHouseParser.RULE_quotaForList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1198;
            this.quotaForClause();
            this.state = 1205;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 65 || _la === 394) {
                {
                {
                this.state = 1200;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 394) {
                    {
                    this.state = 1199;
                    this.match(ClickHouseParser.COMMA);
                    }
                }

                this.state = 1202;
                this.quotaForClause();
                }
                }
                this.state = 1207;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createQuotaStatement(): CreateQuotaStatementContext {
        let localContext = new CreateQuotaStatementContext(this.context, this.state);
        this.enterRule(localContext, 102, ClickHouseParser.RULE_createQuotaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1208;
            this.match(ClickHouseParser.CREATE);
            this.state = 1209;
            this.match(ClickHouseParser.QUOTA);
            this.state = 1211;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 134, this.context) ) {
            case 1:
                {
                this.state = 1210;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1213;
            this.identifier();
            this.state = 1215;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 1214;
                this.clusterClause();
                }
            }

            this.state = 1218;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 1217;
                this.inAccessStorageClause();
                }
            }

            this.state = 1221;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 357) {
                {
                this.state = 1220;
                this.quotaKeyedByClause();
                }
            }

            this.state = 1224;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 65) {
                {
                this.state = 1223;
                this.quotaForList();
                }
            }

            this.state = 1228;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 170) {
                {
                this.state = 1226;
                this.match(ClickHouseParser.TO);
                this.state = 1227;
                this.subjectExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierList(): IdentifierListContext {
        let localContext = new IdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 104, ClickHouseParser.RULE_identifierList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1230;
            this.identifier();
            this.state = 1235;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 1231;
                this.match(ClickHouseParser.COMMA);
                this.state = 1232;
                this.identifier();
                }
                }
                this.state = 1237;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRoleStatement(): CreateRoleStatementContext {
        let localContext = new CreateRoleStatementContext(this.context, this.state);
        this.enterRule(localContext, 106, ClickHouseParser.RULE_createRoleStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1238;
            this.match(ClickHouseParser.CREATE);
            this.state = 1239;
            this.match(ClickHouseParser.ROLE);
            this.state = 1241;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 141, this.context) ) {
            case 1:
                {
                this.state = 1240;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1243;
            this.identifierList();
            this.state = 1245;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 1244;
                this.clusterClause();
                }
            }

            this.state = 1248;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 1247;
                this.inAccessStorageClause();
                }
            }

            this.state = 1251;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 1250;
                this.extendedSettingsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createSettingsProfileStatement(): CreateSettingsProfileStatementContext {
        let localContext = new CreateSettingsProfileStatementContext(this.context, this.state);
        this.enterRule(localContext, 108, ClickHouseParser.RULE_createSettingsProfileStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1253;
            this.match(ClickHouseParser.CREATE);
            this.state = 1254;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 1255;
            this.match(ClickHouseParser.PROFILE);
            this.state = 1257;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 145, this.context) ) {
            case 1:
                {
                this.state = 1256;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1259;
            this.identifierList();
            this.state = 1261;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 1260;
                this.clusterClause();
                }
            }

            this.state = 1264;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 1263;
                this.inAccessStorageClause();
                }
            }

            this.state = 1267;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 1266;
                this.extendedSettingsClause();
                }
            }

            this.state = 1271;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 170) {
                {
                this.state = 1269;
                this.match(ClickHouseParser.TO);
                this.state = 1270;
                this.subjectExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedCollectionExpression(): NamedCollectionExpressionContext {
        let localContext = new NamedCollectionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 110, ClickHouseParser.RULE_namedCollectionExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1273;
            this.identifier();
            this.state = 1274;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 1275;
            this.stringOrNumberLiteral();
            this.state = 1280;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 115 || _la === 380) {
                {
                this.state = 1277;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 115) {
                    {
                    this.state = 1276;
                    this.match(ClickHouseParser.NOT);
                    }
                }

                this.state = 1279;
                this.match(ClickHouseParser.OVERRIDABLE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedCollectionClause(): NamedCollectionClauseContext {
        let localContext = new NamedCollectionClauseContext(this.context, this.state);
        this.enterRule(localContext, 112, ClickHouseParser.RULE_namedCollectionClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1282;
            this.namedCollectionExpression();
            this.state = 1287;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 1283;
                this.match(ClickHouseParser.COMMA);
                this.state = 1284;
                this.namedCollectionExpression();
                }
                }
                this.state = 1289;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createNamedCollectionStatement(): CreateNamedCollectionStatementContext {
        let localContext = new CreateNamedCollectionStatementContext(this.context, this.state);
        this.enterRule(localContext, 114, ClickHouseParser.RULE_createNamedCollectionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1290;
            this.match(ClickHouseParser.CREATE);
            this.state = 1291;
            this.match(ClickHouseParser.NAMED);
            this.state = 1292;
            this.match(ClickHouseParser.COLLECTION);
            this.state = 1296;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 153, this.context) ) {
            case 1:
                {
                this.state = 1293;
                this.match(ClickHouseParser.IF);
                this.state = 1294;
                this.match(ClickHouseParser.NOT);
                this.state = 1295;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 1298;
            this.identifier();
            this.state = 1300;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 1299;
                this.clusterClause();
                }
            }

            this.state = 1302;
            this.match(ClickHouseParser.AS);
            this.state = 1303;
            this.namedCollectionClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createStatement(): CreateStatementContext {
        let localContext = new CreateStatementContext(this.context, this.state);
        this.enterRule(localContext, 116, ClickHouseParser.RULE_createStatement);
        try {
            this.state = 1317;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 155, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1305;
                this.createDatabaseStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1306;
                this.createDictionaryStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1307;
                this.createLiveViewStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1308;
                this.createMaterializedViewStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1309;
                this.createTableStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1310;
                this.createViewStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1311;
                this.createUserStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1312;
                this.createRowPolicyStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1313;
                this.createQuotaStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1314;
                this.createRoleStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1315;
                this.createSettingsProfileStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1316;
                this.createNamedCollectionStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionarySchemaClause(): DictionarySchemaClauseContext {
        let localContext = new DictionarySchemaClauseContext(this.context, this.state);
        this.enterRule(localContext, 118, ClickHouseParser.RULE_dictionarySchemaClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1319;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1320;
            this.dictionaryAttributeDefinition();
            this.state = 1325;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 1321;
                this.match(ClickHouseParser.COMMA);
                this.state = 1322;
                this.dictionaryAttributeDefinition();
                }
                }
                this.state = 1327;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1328;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryAttributeDefinition(): DictionaryAttributeDefinitionContext {
        let localContext = new DictionaryAttributeDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 120, ClickHouseParser.RULE_dictionaryAttributeDefinition);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1330;
            this.identifier();
            this.state = 1331;
            this.columnTypeExpression();
            this.state = 1353;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 158, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1351;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 157, this.context) ) {
                    case 1:
                        {
                        this.state = 1332;
                        if (!(!localContext.attrs.has("default"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"default\")");
                        }
                        this.state = 1333;
                        this.match(ClickHouseParser.DEFAULT);
                        this.state = 1334;
                        this.literal();
                        localContext.attrs.add("default");
                        }
                        break;
                    case 2:
                        {
                        this.state = 1337;
                        if (!(!localContext.attrs.has("expression"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"expression\")");
                        }
                        this.state = 1338;
                        this.match(ClickHouseParser.EXPRESSION);
                        this.state = 1339;
                        this.columnExpression(0);
                        localContext.attrs.add("expression");
                        }
                        break;
                    case 3:
                        {
                        this.state = 1342;
                        if (!(!localContext.attrs.has("hierarchical"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"hierarchical\")");
                        }
                        this.state = 1343;
                        this.match(ClickHouseParser.HIERARCHICAL);
                        localContext.attrs.add("hierarchical");
                        }
                        break;
                    case 4:
                        {
                        this.state = 1345;
                        if (!(!localContext.attrs.has("injective"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"injective\")");
                        }
                        this.state = 1346;
                        this.match(ClickHouseParser.INJECTIVE);
                        localContext.attrs.add("injective");
                        }
                        break;
                    case 5:
                        {
                        this.state = 1348;
                        if (!(!localContext.attrs.has("is_object_id"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"is_object_id\")");
                        }
                        this.state = 1349;
                        this.match(ClickHouseParser.IS_OBJECT_ID);
                        localContext.attrs.add("is_object_id");
                        }
                        break;
                    }
                    }
                }
                this.state = 1355;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 158, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryEngineClause(): DictionaryEngineClauseContext {
        let localContext = new DictionaryEngineClauseContext(this.context, this.state);
        this.enterRule(localContext, 122, ClickHouseParser.RULE_dictionaryEngineClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1357;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 159, this.context) ) {
            case 1:
                {
                this.state = 1356;
                this.dictionaryPrimaryKeyClause();
                }
                break;
            }
            this.state = 1381;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 161, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1379;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 160, this.context) ) {
                    case 1:
                        {
                        this.state = 1359;
                        if (!(!localContext.clauses.has("source"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"source\")");
                        }
                        this.state = 1360;
                        this.sourceClause();
                        localContext.clauses.add("source");
                        }
                        break;
                    case 2:
                        {
                        this.state = 1363;
                        if (!(!localContext.clauses.has("lifetime"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"lifetime\")");
                        }
                        this.state = 1364;
                        this.lifetimeClause();
                        localContext.clauses.add("lifetime");
                        }
                        break;
                    case 3:
                        {
                        this.state = 1367;
                        if (!(!localContext.clauses.has("layout"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"layout\")");
                        }
                        this.state = 1368;
                        this.layoutClause();
                        localContext.clauses.add("layout");
                        }
                        break;
                    case 4:
                        {
                        this.state = 1371;
                        if (!(!localContext.clauses.has("range"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"range\")");
                        }
                        this.state = 1372;
                        this.rangeClause();
                        localContext.clauses.add("range");
                        }
                        break;
                    case 5:
                        {
                        this.state = 1375;
                        if (!(!localContext.clauses.has("settings"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"settings\")");
                        }
                        this.state = 1376;
                        this.dictionarySettingsClause();
                        localContext.clauses.add("settings");
                        }
                        break;
                    }
                    }
                }
                this.state = 1383;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 161, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryPrimaryKeyClause(): DictionaryPrimaryKeyClauseContext {
        let localContext = new DictionaryPrimaryKeyClauseContext(this.context, this.state);
        this.enterRule(localContext, 124, ClickHouseParser.RULE_dictionaryPrimaryKeyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1384;
            this.match(ClickHouseParser.PRIMARY);
            this.state = 1385;
            this.match(ClickHouseParser.KEY);
            this.state = 1386;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext {
        let localContext = new DictionaryArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 126, ClickHouseParser.RULE_dictionaryArgumentExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1388;
            this.identifier();
            this.state = 1395;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 163, this.context) ) {
            case 1:
                {
                this.state = 1389;
                this.identifier();
                this.state = 1392;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 405) {
                    {
                    this.state = 1390;
                    this.match(ClickHouseParser.LPAREN);
                    this.state = 1391;
                    this.match(ClickHouseParser.RPAREN);
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 1394;
                this.literal();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceClause(): SourceClauseContext {
        let localContext = new SourceClauseContext(this.context, this.state);
        this.enterRule(localContext, 128, ClickHouseParser.RULE_sourceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1397;
            this.match(ClickHouseParser.SOURCE);
            this.state = 1398;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1399;
            this.identifier();
            this.state = 1400;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1404;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0)) {
                {
                {
                this.state = 1401;
                this.dictionaryArgumentExpression();
                }
                }
                this.state = 1406;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1407;
            this.match(ClickHouseParser.RPAREN);
            this.state = 1408;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lifetimeClause(): LifetimeClauseContext {
        let localContext = new LifetimeClauseContext(this.context, this.state);
        this.enterRule(localContext, 130, ClickHouseParser.RULE_lifetimeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1410;
            this.match(ClickHouseParser.LIFETIME);
            this.state = 1411;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1421;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.DECIMAL_LITERAL:
                {
                this.state = 1412;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case ClickHouseParser.MIN:
                {
                this.state = 1413;
                this.match(ClickHouseParser.MIN);
                this.state = 1414;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 1415;
                this.match(ClickHouseParser.MAX);
                this.state = 1416;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case ClickHouseParser.MAX:
                {
                this.state = 1417;
                this.match(ClickHouseParser.MAX);
                this.state = 1418;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 1419;
                this.match(ClickHouseParser.MIN);
                this.state = 1420;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1423;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public layoutClause(): LayoutClauseContext {
        let localContext = new LayoutClauseContext(this.context, this.state);
        this.enterRule(localContext, 132, ClickHouseParser.RULE_layoutClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1425;
            this.match(ClickHouseParser.LAYOUT);
            this.state = 1426;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1427;
            this.identifier();
            this.state = 1428;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1432;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0)) {
                {
                {
                this.state = 1429;
                this.dictionaryArgumentExpression();
                }
                }
                this.state = 1434;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1435;
            this.match(ClickHouseParser.RPAREN);
            this.state = 1436;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangeClause(): RangeClauseContext {
        let localContext = new RangeClauseContext(this.context, this.state);
        this.enterRule(localContext, 134, ClickHouseParser.RULE_rangeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1438;
            this.match(ClickHouseParser.RANGE);
            this.state = 1439;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1450;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.MIN:
                {
                this.state = 1440;
                this.match(ClickHouseParser.MIN);
                this.state = 1441;
                this.identifier();
                this.state = 1442;
                this.match(ClickHouseParser.MAX);
                this.state = 1443;
                this.identifier();
                }
                break;
            case ClickHouseParser.MAX:
                {
                this.state = 1445;
                this.match(ClickHouseParser.MAX);
                this.state = 1446;
                this.identifier();
                this.state = 1447;
                this.match(ClickHouseParser.MIN);
                this.state = 1448;
                this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1452;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionarySettingsClause(): DictionarySettingsClauseContext {
        let localContext = new DictionarySettingsClauseContext(this.context, this.state);
        this.enterRule(localContext, 136, ClickHouseParser.RULE_dictionarySettingsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1454;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 1455;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1456;
            this.settingExpressionList();
            this.state = 1457;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterClause(): ClusterClauseContext {
        let localContext = new ClusterClauseContext(this.context, this.state);
        this.enterRule(localContext, 138, ClickHouseParser.RULE_clusterClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1459;
            this.match(ClickHouseParser.ON);
            this.state = 1460;
            this.match(ClickHouseParser.CLUSTER);
            this.state = 1463;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.KEYED:
            case ClickHouseParser.RANDOMIZED:
            case ClickHouseParser.USER_NAME:
            case ClickHouseParser.IP_ADDRESS:
            case ClickHouseParser.FORWARDED_IP_ADDRESS:
            case ClickHouseParser.CLIENT_KEY:
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
            case ClickHouseParser.QUERIES:
            case ClickHouseParser.QUERY_SELECTS:
            case ClickHouseParser.QUERY_INSERTS:
            case ClickHouseParser.ERRORS:
            case ClickHouseParser.RESULT_ROWS:
            case ClickHouseParser.RESULT_BYTES:
            case ClickHouseParser.READ_ROWS:
            case ClickHouseParser.READ_BYTES:
            case ClickHouseParser.EXECUTION_TIME:
            case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
            case ClickHouseParser.LIMITS:
            case ClickHouseParser.TRACKING:
            case ClickHouseParser.ONLY:
            case ClickHouseParser.CONST:
            case ClickHouseParser.CHANGEABLE_IN_READONLY:
            case ClickHouseParser.OVERRIDABLE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 1461;
                this.identifier();
                }
                break;
            case ClickHouseParser.STRING_LITERAL:
                {
                this.state = 1462;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uuidClause(): UuidClauseContext {
        let localContext = new UuidClauseContext(this.context, this.state);
        this.enterRule(localContext, 140, ClickHouseParser.RULE_uuidClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1465;
            this.match(ClickHouseParser.UUID);
            this.state = 1466;
            this.match(ClickHouseParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public destinationClause(): DestinationClauseContext {
        let localContext = new DestinationClauseContext(this.context, this.state);
        this.enterRule(localContext, 142, ClickHouseParser.RULE_destinationClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1468;
            this.match(ClickHouseParser.TO);
            this.state = 1469;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subqueryClause(): SubqueryClauseContext {
        let localContext = new SubqueryClauseContext(this.context, this.state);
        this.enterRule(localContext, 144, ClickHouseParser.RULE_subqueryClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1471;
            this.match(ClickHouseParser.AS);
            this.state = 1472;
            this.selectUnionStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSchemaClause(): TableSchemaClauseContext {
        let localContext = new TableSchemaClauseContext(this.context, this.state);
        this.enterRule(localContext, 146, ClickHouseParser.RULE_tableSchemaClause);
        let _la: number;
        try {
            this.state = 1489;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 170, this.context) ) {
            case 1:
                localContext = new SchemaDescriptionClauseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1474;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1475;
                this.tableElementExpression();
                this.state = 1480;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 394) {
                    {
                    {
                    this.state = 1476;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1477;
                    this.tableElementExpression();
                    }
                    }
                    this.state = 1482;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1483;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 2:
                localContext = new SchemaAsTableClauseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1485;
                this.match(ClickHouseParser.AS);
                this.state = 1486;
                this.tableIdentifier();
                }
                break;
            case 3:
                localContext = new SchemaAsFunctionClauseContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1487;
                this.match(ClickHouseParser.AS);
                this.state = 1488;
                this.tableFunctionExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineClause(): EngineClauseContext {
        let localContext = new EngineClauseContext(this.context, this.state);
        this.enterRule(localContext, 148, ClickHouseParser.RULE_engineClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1491;
            this.engineExpression();
            this.state = 1518;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 172, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1516;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 171, this.context) ) {
                    case 1:
                        {
                        this.state = 1492;
                        if (!(!localContext.clauses.has("orderByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"orderByClause\")");
                        }
                        this.state = 1493;
                        this.orderByClause();
                        localContext.clauses.add("orderByClause");
                        }
                        break;
                    case 2:
                        {
                        this.state = 1496;
                        if (!(!localContext.clauses.has("partitionByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"partitionByClause\")");
                        }
                        this.state = 1497;
                        this.partitionByClause();
                        localContext.clauses.add("partitionByClause");
                        			
                        }
                        break;
                    case 3:
                        {
                        this.state = 1500;
                        if (!(!localContext.clauses.has("primaryKeyClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"primaryKeyClause\")");
                        }
                        this.state = 1501;
                        this.primaryKeyClause();
                        localContext.clauses.add("primaryKeyClause");
                        			
                        }
                        break;
                    case 4:
                        {
                        this.state = 1504;
                        if (!(!localContext.clauses.has("sampleByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"sampleByClause\")");
                        }
                        this.state = 1505;
                        this.sampleByClause();
                        localContext.clauses.add("sampleByClause");
                        }
                        break;
                    case 5:
                        {
                        this.state = 1508;
                        if (!(!localContext.clauses.has("ttlClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"ttlClause\")");
                        }
                        this.state = 1509;
                        this.ttlClause();
                        localContext.clauses.add("ttlClause");
                        }
                        break;
                    case 6:
                        {
                        this.state = 1512;
                        if (!(!localContext.clauses.has("settingsClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"settingsClause\")");
                        }
                        this.state = 1513;
                        this.settingsClause();
                        localContext.clauses.add("settingsClause");
                        }
                        break;
                    }
                    }
                }
                this.state = 1520;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 172, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionByClause(): PartitionByClauseContext {
        let localContext = new PartitionByClauseContext(this.context, this.state);
        this.enterRule(localContext, 150, ClickHouseParser.RULE_partitionByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1521;
            this.match(ClickHouseParser.PARTITION);
            this.state = 1522;
            this.match(ClickHouseParser.BY);
            this.state = 1523;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primaryKeyClause(): PrimaryKeyClauseContext {
        let localContext = new PrimaryKeyClauseContext(this.context, this.state);
        this.enterRule(localContext, 152, ClickHouseParser.RULE_primaryKeyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1525;
            this.match(ClickHouseParser.PRIMARY);
            this.state = 1526;
            this.match(ClickHouseParser.KEY);
            this.state = 1527;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleByClause(): SampleByClauseContext {
        let localContext = new SampleByClauseContext(this.context, this.state);
        this.enterRule(localContext, 154, ClickHouseParser.RULE_sampleByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1529;
            this.match(ClickHouseParser.SAMPLE);
            this.state = 1530;
            this.match(ClickHouseParser.BY);
            this.state = 1531;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ttlClause(): TtlClauseContext {
        let localContext = new TtlClauseContext(this.context, this.state);
        this.enterRule(localContext, 156, ClickHouseParser.RULE_ttlClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1533;
            this.match(ClickHouseParser.TTL);
            this.state = 1534;
            this.ttlExpression();
            this.state = 1539;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 173, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1535;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1536;
                    this.ttlExpression();
                    }
                    }
                }
                this.state = 1541;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 173, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineExpression(): EngineExpressionContext {
        let localContext = new EngineExpressionContext(this.context, this.state);
        this.enterRule(localContext, 158, ClickHouseParser.RULE_engineExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1542;
            this.match(ClickHouseParser.ENGINE);
            this.state = 1544;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 399) {
                {
                this.state = 1543;
                this.match(ClickHouseParser.EQ_SINGLE);
                }
            }

            this.state = 1546;
            this.identifierOrNull();
            this.state = 1552;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 176, this.context) ) {
            case 1:
                {
                this.state = 1547;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1549;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 36188255) !== 0)) {
                    {
                    this.state = 1548;
                    this.columnExpressionList();
                    }
                }

                this.state = 1551;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElementExpression(): TableElementExpressionContext {
        let localContext = new TableElementExpressionContext(this.context, this.state);
        this.enterRule(localContext, 160, ClickHouseParser.RULE_tableElementExpression);
        try {
            this.state = 1564;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 177, this.context) ) {
            case 1:
                localContext = new TableElementExpressionColumnContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1554;
                this.tableColumnDefinition();
                }
                break;
            case 2:
                localContext = new TableElementExpressionConstraintContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1555;
                this.match(ClickHouseParser.CONSTRAINT);
                this.state = 1556;
                this.identifier();
                this.state = 1557;
                this.match(ClickHouseParser.CHECK);
                this.state = 1558;
                this.columnExpression(0);
                }
                break;
            case 3:
                localContext = new TableElementExpressionIndexContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1560;
                this.match(ClickHouseParser.INDEX);
                this.state = 1561;
                this.tableIndexDefinition();
                }
                break;
            case 4:
                localContext = new TableElementExpressionProjectionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1562;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 1563;
                this.tableProjectionDefinition();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        let localContext = new TableColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 162, ClickHouseParser.RULE_tableColumnDefinition);
        let _la: number;
        try {
            this.state = 1598;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 186, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1566;
                this.columnIdentifier();
                this.state = 1567;
                this.columnTypeExpression();
                this.state = 1569;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3 || _la === 38 || _la === 104) {
                    {
                    this.state = 1568;
                    this.tableColumnPropertyExpression();
                    }
                }

                this.state = 1573;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 1571;
                    this.match(ClickHouseParser.COMMENT);
                    this.state = 1572;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 1576;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 24) {
                    {
                    this.state = 1575;
                    this.codecExpression();
                    }
                }

                this.state = 1580;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 1578;
                    this.match(ClickHouseParser.TTL);
                    this.state = 1579;
                    this.columnExpression(0);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1582;
                this.columnIdentifier();
                this.state = 1584;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 182, this.context) ) {
                case 1:
                    {
                    this.state = 1583;
                    this.columnTypeExpression();
                    }
                    break;
                }
                this.state = 1586;
                this.tableColumnPropertyExpression();
                this.state = 1589;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 1587;
                    this.match(ClickHouseParser.COMMENT);
                    this.state = 1588;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 1592;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 24) {
                    {
                    this.state = 1591;
                    this.codecExpression();
                    }
                }

                this.state = 1596;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 1594;
                    this.match(ClickHouseParser.TTL);
                    this.state = 1595;
                    this.columnExpression(0);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnPropertyExpression(): TableColumnPropertyExpressionContext {
        let localContext = new TableColumnPropertyExpressionContext(this.context, this.state);
        this.enterRule(localContext, 164, ClickHouseParser.RULE_tableColumnPropertyExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1600;
            _la = this.tokenStream.LA(1);
            if(!(_la === 3 || _la === 38 || _la === 104)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1601;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIndexDefinition(): TableIndexDefinitionContext {
        let localContext = new TableIndexDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 166, ClickHouseParser.RULE_tableIndexDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1603;
            this.columnIdentifier();
            this.state = 1604;
            this.columnExpression(0);
            this.state = 1605;
            this.match(ClickHouseParser.TYPE);
            this.state = 1606;
            this.columnTypeExpression();
            this.state = 1607;
            this.match(ClickHouseParser.GRANULARITY);
            this.state = 1608;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext {
        let localContext = new TableProjectionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 168, ClickHouseParser.RULE_tableProjectionDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1610;
            this.columnIdentifier();
            this.state = 1611;
            this.projectionSelectStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public codecExpression(): CodecExpressionContext {
        let localContext = new CodecExpressionContext(this.context, this.state);
        this.enterRule(localContext, 170, ClickHouseParser.RULE_codecExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1613;
            this.match(ClickHouseParser.CODEC);
            this.state = 1614;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1615;
            this.codecArgExpression();
            this.state = 1620;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 1616;
                this.match(ClickHouseParser.COMMA);
                this.state = 1617;
                this.codecArgExpression();
                }
                }
                this.state = 1622;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1623;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public codecArgExpression(): CodecArgExpressionContext {
        let localContext = new CodecArgExpressionContext(this.context, this.state);
        this.enterRule(localContext, 172, ClickHouseParser.RULE_codecArgExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1625;
            this.identifier();
            this.state = 1631;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 405) {
                {
                this.state = 1626;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1628;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 36188255) !== 0)) {
                    {
                    this.state = 1627;
                    this.columnExpressionList();
                    }
                }

                this.state = 1630;
                this.match(ClickHouseParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ttlExpression(): TtlExpressionContext {
        let localContext = new TtlExpressionContext(this.context, this.state);
        this.enterRule(localContext, 174, ClickHouseParser.RULE_ttlExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1633;
            this.columnExpression(0);
            this.state = 1641;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 190, this.context) ) {
            case 1:
                {
                this.state = 1634;
                this.match(ClickHouseParser.DELETE);
                }
                break;
            case 2:
                {
                this.state = 1635;
                this.match(ClickHouseParser.TO);
                this.state = 1636;
                this.match(ClickHouseParser.DISK);
                this.state = 1637;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 3:
                {
                this.state = 1638;
                this.match(ClickHouseParser.TO);
                this.state = 1639;
                this.match(ClickHouseParser.VOLUME);
                this.state = 1640;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeStatement(): DescribeStatementContext {
        let localContext = new DescribeStatementContext(this.context, this.state);
        this.enterRule(localContext, 176, ClickHouseParser.RULE_describeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1643;
            _la = this.tokenStream.LA(1);
            if(!(_la === 41 || _la === 43)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1645;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 191, this.context) ) {
            case 1:
                {
                this.state = 1644;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 1647;
            this.tableExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropStatement(): DropStatementContext {
        let localContext = new DropStatementContext(this.context, this.state);
        this.enterRule(localContext, 178, ClickHouseParser.RULE_dropStatement);
        let _la: number;
        try {
            this.state = 1680;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 199, this.context) ) {
            case 1:
                localContext = new DropDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1649;
                _la = this.tokenStream.LA(1);
                if(!(_la === 44 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1650;
                this.match(ClickHouseParser.DATABASE);
                this.state = 1653;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 192, this.context) ) {
                case 1:
                    {
                    this.state = 1651;
                    this.match(ClickHouseParser.IF);
                    this.state = 1652;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 1655;
                this.databaseIdentifier();
                this.state = 1657;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 1656;
                    this.clusterClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new DropTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1659;
                _la = this.tokenStream.LA(1);
                if(!(_la === 44 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1666;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.DICTIONARY:
                    {
                    this.state = 1660;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case ClickHouseParser.TABLE:
                case ClickHouseParser.TEMPORARY:
                    {
                    this.state = 1662;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 164) {
                        {
                        this.state = 1661;
                        this.match(ClickHouseParser.TEMPORARY);
                        }
                    }

                    this.state = 1664;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                case ClickHouseParser.VIEW:
                    {
                    this.state = 1665;
                    this.match(ClickHouseParser.VIEW);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1670;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 196, this.context) ) {
                case 1:
                    {
                    this.state = 1668;
                    this.match(ClickHouseParser.IF);
                    this.state = 1669;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 1672;
                this.tableIdentifier();
                this.state = 1674;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 1673;
                    this.clusterClause();
                    }
                }

                this.state = 1678;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 114) {
                    {
                    this.state = 1676;
                    this.match(ClickHouseParser.NO);
                    this.state = 1677;
                    this.match(ClickHouseParser.DELAY);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existsStatement(): ExistsStatementContext {
        let localContext = new ExistsStatementContext(this.context, this.state);
        this.enterRule(localContext, 180, ClickHouseParser.RULE_existsStatement);
        let _la: number;
        try {
            this.state = 1695;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 202, this.context) ) {
            case 1:
                localContext = new ExistsDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1682;
                this.match(ClickHouseParser.EXISTS);
                this.state = 1683;
                this.match(ClickHouseParser.DATABASE);
                this.state = 1684;
                this.databaseIdentifier();
                }
                break;
            case 2:
                localContext = new ExistsTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1685;
                this.match(ClickHouseParser.EXISTS);
                this.state = 1692;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
                case 1:
                    {
                    this.state = 1686;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case 2:
                    {
                    this.state = 1688;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 164) {
                        {
                        this.state = 1687;
                        this.match(ClickHouseParser.TEMPORARY);
                        }
                    }

                    this.state = 1690;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                case 3:
                    {
                    this.state = 1691;
                    this.match(ClickHouseParser.VIEW);
                    }
                    break;
                }
                this.state = 1694;
                this.tableIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainStatement(): ExplainStatementContext {
        let localContext = new ExplainStatementContext(this.context, this.state);
        this.enterRule(localContext, 182, ClickHouseParser.RULE_explainStatement);
        try {
            this.state = 1718;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 203, this.context) ) {
            case 1:
                localContext = new ExplainDefaultStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1697;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1698;
                this.notInsertStatement();
                }
                break;
            case 2:
                localContext = new ExplainASTStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1699;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1700;
                this.match(ClickHouseParser.AST);
                this.state = 1701;
                this.notInsertStatement();
                }
                break;
            case 3:
                localContext = new ExplainSyntaxStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1702;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1703;
                this.match(ClickHouseParser.SYNTAX);
                this.state = 1704;
                this.notInsertStatement();
                }
                break;
            case 4:
                localContext = new ExplainPipelineStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1705;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1706;
                this.match(ClickHouseParser.PIPELINE);
                this.state = 1707;
                this.notInsertStatement();
                }
                break;
            case 5:
                localContext = new ExplainPlanStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1708;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1709;
                this.match(ClickHouseParser.PLAN);
                this.state = 1710;
                this.notInsertStatement();
                }
                break;
            case 6:
                localContext = new ExplainQueryTreeStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1711;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1712;
                this.match(ClickHouseParser.QUERY);
                this.state = 1713;
                this.match(ClickHouseParser.TREE);
                this.state = 1714;
                this.notInsertStatement();
                }
                break;
            case 7:
                localContext = new ExplainEstimateStatementContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1715;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1716;
                this.match(ClickHouseParser.ESTIMATE);
                this.state = 1717;
                this.notInsertStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokeStatement(): RevokeStatementContext {
        let localContext = new RevokeStatementContext(this.context, this.state);
        this.enterRule(localContext, 184, ClickHouseParser.RULE_revokeStatement);
        let _la: number;
        try {
            this.state = 1748;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 208, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1720;
                this.match(ClickHouseParser.REVOKE);
                this.state = 1722;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 1721;
                    this.clusterClause();
                    }
                }

                this.state = 1727;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 1724;
                    this.match(ClickHouseParser.GRANT);
                    this.state = 1725;
                    this.match(ClickHouseParser.OPTION);
                    this.state = 1726;
                    this.match(ClickHouseParser.FOR);
                    }
                }

                this.state = 1729;
                this.privilegeList();
                this.state = 1730;
                this.match(ClickHouseParser.ON);
                this.state = 1731;
                this.accessSubjectIdentifier();
                this.state = 1732;
                this.match(ClickHouseParser.FROM);
                this.state = 1733;
                this.subjectExpressionList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1735;
                this.match(ClickHouseParser.REVOKE);
                this.state = 1737;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 206, this.context) ) {
                case 1:
                    {
                    this.state = 1736;
                    this.clusterClause();
                    }
                    break;
                }
                this.state = 1742;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 207, this.context) ) {
                case 1:
                    {
                    this.state = 1739;
                    this.match(ClickHouseParser.ADMIN);
                    this.state = 1740;
                    this.match(ClickHouseParser.OPTION);
                    this.state = 1741;
                    this.match(ClickHouseParser.FOR);
                    }
                    break;
                }
                this.state = 1744;
                this.roleExpressionList();
                this.state = 1745;
                this.match(ClickHouseParser.FROM);
                this.state = 1746;
                this.subjectExpressionList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subjectExpressionList(): SubjectExpressionListContext {
        let localContext = new SubjectExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 186, ClickHouseParser.RULE_subjectExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1750;
            this.subjectExpression();
            this.state = 1755;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 1751;
                this.match(ClickHouseParser.COMMA);
                this.state = 1752;
                this.subjectExpression();
                }
                }
                this.state = 1757;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userExpressionList(): UserExpressionListContext {
        let localContext = new UserExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 188, ClickHouseParser.RULE_userExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1758;
            this.userIdentifier();
            this.state = 1763;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 1759;
                this.match(ClickHouseParser.COMMA);
                this.state = 1760;
                this.userIdentifier();
                }
                }
                this.state = 1765;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleExpressionList(): RoleExpressionListContext {
        let localContext = new RoleExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 190, ClickHouseParser.RULE_roleExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1766;
            this.roleIdentifier();
            this.state = 1771;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 1767;
                this.match(ClickHouseParser.COMMA);
                this.state = 1768;
                this.roleIdentifier();
                }
                }
                this.state = 1773;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantStatement(): GrantStatementContext {
        let localContext = new GrantStatementContext(this.context, this.state);
        this.enterRule(localContext, 192, ClickHouseParser.RULE_grantStatement);
        let _la: number;
        try {
            this.state = 1828;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 218, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1774;
                this.match(ClickHouseParser.GRANT);
                this.state = 1776;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 1775;
                    this.clusterClause();
                    }
                }

                {
                this.state = 1778;
                this.privilegeList();
                this.state = 1779;
                this.match(ClickHouseParser.ON);
                this.state = 1780;
                this.accessSubjectIdentifier();
                }
                this.state = 1789;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 394) {
                    {
                    {
                    this.state = 1782;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1783;
                    this.privilegeList();
                    this.state = 1784;
                    this.match(ClickHouseParser.ON);
                    this.state = 1785;
                    this.accessSubjectIdentifier();
                    }
                    }
                    this.state = 1791;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1792;
                this.match(ClickHouseParser.TO);
                this.state = 1793;
                this.userOrRoleExpressionList();
                this.state = 1794;
                this.withGrantOrReplaceOption();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1796;
                this.match(ClickHouseParser.GRANT);
                this.state = 1798;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 214, this.context) ) {
                case 1:
                    {
                    this.state = 1797;
                    this.clusterClause();
                    }
                    break;
                }
                this.state = 1800;
                this.roleExpressionList();
                this.state = 1801;
                this.match(ClickHouseParser.TO);
                this.state = 1802;
                this.userOrRoleExpressionList();
                this.state = 1806;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 215, this.context) ) {
                case 1:
                    {
                    this.state = 1803;
                    this.match(ClickHouseParser.WITH);
                    this.state = 1804;
                    this.match(ClickHouseParser.ADMIN);
                    this.state = 1805;
                    this.match(ClickHouseParser.OPTION);
                    }
                    break;
                }
                this.state = 1809;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 193) {
                    {
                    this.state = 1808;
                    this.withReplaceOption();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1811;
                this.match(ClickHouseParser.GRANT);
                this.state = 1812;
                this.match(ClickHouseParser.CURRENT);
                this.state = 1813;
                this.match(ClickHouseParser.GRANTS);
                this.state = 1822;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.LPAREN:
                    {
                    {
                    this.state = 1814;
                    this.match(ClickHouseParser.LPAREN);
                    this.state = 1815;
                    this.privilegeList();
                    this.state = 1816;
                    this.match(ClickHouseParser.ON);
                    this.state = 1817;
                    this.accessSubjectIdentifier();
                    this.state = 1818;
                    this.match(ClickHouseParser.RPAREN);
                    }
                    }
                    break;
                case ClickHouseParser.ON:
                    {
                    this.state = 1820;
                    this.match(ClickHouseParser.ON);
                    this.state = 1821;
                    this.accessSubjectIdentifier();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1824;
                this.match(ClickHouseParser.TO);
                this.state = 1825;
                this.userOrRoleExpressionList();
                this.state = 1826;
                this.withGrantOrReplaceOption();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withGrantOrReplaceOption(): WithGrantOrReplaceOptionContext {
        let localContext = new WithGrantOrReplaceOptionContext(this.context, this.state);
        this.enterRule(localContext, 194, ClickHouseParser.RULE_withGrantOrReplaceOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1833;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 219, this.context) ) {
            case 1:
                {
                this.state = 1830;
                this.match(ClickHouseParser.WITH);
                this.state = 1831;
                this.match(ClickHouseParser.GRANT);
                this.state = 1832;
                this.match(ClickHouseParser.OPTION);
                }
                break;
            }
            this.state = 1836;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 1835;
                this.withReplaceOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withReplaceOption(): WithReplaceOptionContext {
        let localContext = new WithReplaceOptionContext(this.context, this.state);
        this.enterRule(localContext, 196, ClickHouseParser.RULE_withReplaceOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1838;
            this.match(ClickHouseParser.WITH);
            this.state = 1839;
            this.match(ClickHouseParser.REPLACE);
            this.state = 1840;
            this.match(ClickHouseParser.OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public accessSubjectIdentifier(): AccessSubjectIdentifierContext {
        let localContext = new AccessSubjectIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 198, ClickHouseParser.RULE_accessSubjectIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1855;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 224, this.context) ) {
            case 1:
                {
                this.state = 1842;
                this.databaseIdentifier();
                }
                break;
            case 2:
                {
                this.state = 1843;
                this.tableIdentifier();
                }
                break;
            case 3:
                {
                this.state = 1849;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 222, this.context) ) {
                case 1:
                    {
                    this.state = 1846;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case ClickHouseParser.ASTERISK:
                        {
                        this.state = 1844;
                        this.match(ClickHouseParser.ASTERISK);
                        }
                        break;
                    case ClickHouseParser.ADD:
                    case ClickHouseParser.AFTER:
                    case ClickHouseParser.ALIAS:
                    case ClickHouseParser.ALL:
                    case ClickHouseParser.ALTER:
                    case ClickHouseParser.AND:
                    case ClickHouseParser.ANTI:
                    case ClickHouseParser.ANY:
                    case ClickHouseParser.ARRAY:
                    case ClickHouseParser.AS:
                    case ClickHouseParser.ASCENDING:
                    case ClickHouseParser.ASOF:
                    case ClickHouseParser.AST:
                    case ClickHouseParser.ASYNC:
                    case ClickHouseParser.ATTACH:
                    case ClickHouseParser.BETWEEN:
                    case ClickHouseParser.BOTH:
                    case ClickHouseParser.BY:
                    case ClickHouseParser.CASE:
                    case ClickHouseParser.CAST:
                    case ClickHouseParser.CHECK:
                    case ClickHouseParser.CLEAR:
                    case ClickHouseParser.CLUSTER:
                    case ClickHouseParser.CODEC:
                    case ClickHouseParser.COLLATE:
                    case ClickHouseParser.COLUMN:
                    case ClickHouseParser.COMMENT:
                    case ClickHouseParser.CONSTRAINT:
                    case ClickHouseParser.CREATE:
                    case ClickHouseParser.CROSS:
                    case ClickHouseParser.CUBE:
                    case ClickHouseParser.CURRENT:
                    case ClickHouseParser.DATABASE:
                    case ClickHouseParser.DATABASES:
                    case ClickHouseParser.DATE:
                    case ClickHouseParser.DAY:
                    case ClickHouseParser.DEDUPLICATE:
                    case ClickHouseParser.DEFAULT:
                    case ClickHouseParser.DELAY:
                    case ClickHouseParser.DELETE:
                    case ClickHouseParser.DESC:
                    case ClickHouseParser.DESCENDING:
                    case ClickHouseParser.DESCRIBE:
                    case ClickHouseParser.DETACH:
                    case ClickHouseParser.DICTIONARIES:
                    case ClickHouseParser.DICTIONARY:
                    case ClickHouseParser.DISK:
                    case ClickHouseParser.DISTINCT:
                    case ClickHouseParser.DISTRIBUTED:
                    case ClickHouseParser.DROP:
                    case ClickHouseParser.ELSE:
                    case ClickHouseParser.END:
                    case ClickHouseParser.ENGINE:
                    case ClickHouseParser.ESTIMATE:
                    case ClickHouseParser.EVENTS:
                    case ClickHouseParser.EXISTS:
                    case ClickHouseParser.EXPLAIN:
                    case ClickHouseParser.EXPRESSION:
                    case ClickHouseParser.EXTRACT:
                    case ClickHouseParser.FETCHES:
                    case ClickHouseParser.FINAL:
                    case ClickHouseParser.FIRST:
                    case ClickHouseParser.FLUSH:
                    case ClickHouseParser.FOLLOWING:
                    case ClickHouseParser.FOR:
                    case ClickHouseParser.FORMAT:
                    case ClickHouseParser.FREEZE:
                    case ClickHouseParser.FROM:
                    case ClickHouseParser.FULL:
                    case ClickHouseParser.FUNCTION:
                    case ClickHouseParser.GLOBAL:
                    case ClickHouseParser.GRANULARITY:
                    case ClickHouseParser.GROUP:
                    case ClickHouseParser.HAVING:
                    case ClickHouseParser.HIERARCHICAL:
                    case ClickHouseParser.HOUR:
                    case ClickHouseParser.ID:
                    case ClickHouseParser.IF:
                    case ClickHouseParser.ILIKE:
                    case ClickHouseParser.IN:
                    case ClickHouseParser.INDEX:
                    case ClickHouseParser.INF:
                    case ClickHouseParser.INJECTIVE:
                    case ClickHouseParser.INNER:
                    case ClickHouseParser.INSERT:
                    case ClickHouseParser.INTERVAL:
                    case ClickHouseParser.INTO:
                    case ClickHouseParser.IS:
                    case ClickHouseParser.IS_OBJECT_ID:
                    case ClickHouseParser.JOIN:
                    case ClickHouseParser.KEY:
                    case ClickHouseParser.KILL:
                    case ClickHouseParser.LAST:
                    case ClickHouseParser.LAYOUT:
                    case ClickHouseParser.LEADING:
                    case ClickHouseParser.LEFT:
                    case ClickHouseParser.LIFETIME:
                    case ClickHouseParser.LIKE:
                    case ClickHouseParser.LIMIT:
                    case ClickHouseParser.LIVE:
                    case ClickHouseParser.LOCAL:
                    case ClickHouseParser.LOGS:
                    case ClickHouseParser.MATERIALIZE:
                    case ClickHouseParser.MATERIALIZED:
                    case ClickHouseParser.MAX:
                    case ClickHouseParser.MERGES:
                    case ClickHouseParser.MIN:
                    case ClickHouseParser.MINUTE:
                    case ClickHouseParser.MODIFY:
                    case ClickHouseParser.MONTH:
                    case ClickHouseParser.MOVE:
                    case ClickHouseParser.MUTATION:
                    case ClickHouseParser.NO:
                    case ClickHouseParser.NOT:
                    case ClickHouseParser.NULLS:
                    case ClickHouseParser.OFFSET:
                    case ClickHouseParser.ON:
                    case ClickHouseParser.OPTIMIZE:
                    case ClickHouseParser.OR:
                    case ClickHouseParser.ORDER:
                    case ClickHouseParser.OUTER:
                    case ClickHouseParser.OUTFILE:
                    case ClickHouseParser.OVER:
                    case ClickHouseParser.PARTITION:
                    case ClickHouseParser.PIPELINE:
                    case ClickHouseParser.PLAN:
                    case ClickHouseParser.POPULATE:
                    case ClickHouseParser.PRECEDING:
                    case ClickHouseParser.PREWHERE:
                    case ClickHouseParser.PRIMARY:
                    case ClickHouseParser.PROJECTION:
                    case ClickHouseParser.QUARTER:
                    case ClickHouseParser.QUERY:
                    case ClickHouseParser.RANGE:
                    case ClickHouseParser.RELOAD:
                    case ClickHouseParser.REMOVE:
                    case ClickHouseParser.RENAME:
                    case ClickHouseParser.REPLACE:
                    case ClickHouseParser.REPLICA:
                    case ClickHouseParser.REPLICATED:
                    case ClickHouseParser.RIGHT:
                    case ClickHouseParser.ROLLUP:
                    case ClickHouseParser.ROW:
                    case ClickHouseParser.ROWS:
                    case ClickHouseParser.SAMPLE:
                    case ClickHouseParser.SECOND:
                    case ClickHouseParser.SELECT:
                    case ClickHouseParser.SEMI:
                    case ClickHouseParser.SENDS:
                    case ClickHouseParser.SET:
                    case ClickHouseParser.SETTINGS:
                    case ClickHouseParser.SHOW:
                    case ClickHouseParser.SOURCE:
                    case ClickHouseParser.START:
                    case ClickHouseParser.STOP:
                    case ClickHouseParser.SUBSTRING:
                    case ClickHouseParser.SYNC:
                    case ClickHouseParser.SYNTAX:
                    case ClickHouseParser.SYSTEM:
                    case ClickHouseParser.TABLE:
                    case ClickHouseParser.TABLES:
                    case ClickHouseParser.TEMPORARY:
                    case ClickHouseParser.TEST:
                    case ClickHouseParser.THEN:
                    case ClickHouseParser.TIES:
                    case ClickHouseParser.TIMEOUT:
                    case ClickHouseParser.TIMESTAMP:
                    case ClickHouseParser.TO:
                    case ClickHouseParser.TOP:
                    case ClickHouseParser.TOTALS:
                    case ClickHouseParser.TRAILING:
                    case ClickHouseParser.TRIM:
                    case ClickHouseParser.TREE:
                    case ClickHouseParser.TRUNCATE:
                    case ClickHouseParser.TTL:
                    case ClickHouseParser.TYPE:
                    case ClickHouseParser.UNBOUNDED:
                    case ClickHouseParser.UNION:
                    case ClickHouseParser.UPDATE:
                    case ClickHouseParser.USE:
                    case ClickHouseParser.USING:
                    case ClickHouseParser.UUID:
                    case ClickHouseParser.VALUES:
                    case ClickHouseParser.VIEW:
                    case ClickHouseParser.VOLUME:
                    case ClickHouseParser.WATCH:
                    case ClickHouseParser.WEEK:
                    case ClickHouseParser.WHEN:
                    case ClickHouseParser.WHERE:
                    case ClickHouseParser.WINDOW:
                    case ClickHouseParser.WITH:
                    case ClickHouseParser.YEAR:
                    case ClickHouseParser.GRANT:
                    case ClickHouseParser.USER:
                    case ClickHouseParser.FETCH:
                    case ClickHouseParser.REFRESH:
                    case ClickHouseParser.POLICY:
                    case ClickHouseParser.QUOTA:
                    case ClickHouseParser.ROLE:
                    case ClickHouseParser.PROFILE:
                    case ClickHouseParser.ARBITRARY:
                    case ClickHouseParser.COLUMNS:
                    case ClickHouseParser.CURRENT_USER:
                    case ClickHouseParser.ACCESS:
                    case ClickHouseParser.SHOW_USERS:
                    case ClickHouseParser.SHOW_ROLES:
                    case ClickHouseParser.SHOW_ROW_POLICIES:
                    case ClickHouseParser.SHOW_QUOTAS:
                    case ClickHouseParser.SHOW_SETTINGS_PROFILES:
                    case ClickHouseParser.SHUTDOWN:
                    case ClickHouseParser.CACHE:
                    case ClickHouseParser.DNS:
                    case ClickHouseParser.MARK:
                    case ClickHouseParser.MARKS:
                    case ClickHouseParser.PART:
                    case ClickHouseParser.UNCOMPRESSED:
                    case ClickHouseParser.CONFIG:
                    case ClickHouseParser.EMBEDDED:
                    case ClickHouseParser.FUNCTIONS:
                    case ClickHouseParser.MOVES:
                    case ClickHouseParser.REPLICATION:
                    case ClickHouseParser.QUEUES:
                    case ClickHouseParser.RESTART:
                    case ClickHouseParser.DICTGET:
                    case ClickHouseParser.DICTGETHIERARCHY:
                    case ClickHouseParser.DICTHAS:
                    case ClickHouseParser.DICTISIN:
                    case ClickHouseParser.MANAGEMENT:
                    case ClickHouseParser.ADMIN:
                    case ClickHouseParser.NAMED:
                    case ClickHouseParser.COLLECTION:
                    case ClickHouseParser.CONTROL:
                    case ClickHouseParser.COLLECTIONS:
                    case ClickHouseParser.SECRETS:
                    case ClickHouseParser.USAGE:
                    case ClickHouseParser.INTROSPECTION:
                    case ClickHouseParser.ADDRESSTOLINE:
                    case ClickHouseParser.ADDRESSTOSYMBOL:
                    case ClickHouseParser.DEMANGLE:
                    case ClickHouseParser.SOURCES:
                    case ClickHouseParser.FILE:
                    case ClickHouseParser.URL:
                    case ClickHouseParser.REMOTE:
                    case ClickHouseParser.MYSQL:
                    case ClickHouseParser.ODBC:
                    case ClickHouseParser.JDBC:
                    case ClickHouseParser.HDFS:
                    case ClickHouseParser.S3:
                    case ClickHouseParser.SETTING:
                    case ClickHouseParser.OPTION:
                    case ClickHouseParser.NONE:
                    case ClickHouseParser.AZURE:
                    case ClickHouseParser.HIVE:
                    case ClickHouseParser.MONGO:
                    case ClickHouseParser.POSTGRES:
                    case ClickHouseParser.REDIS:
                    case ClickHouseParser.SQLITE:
                    case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
                    case ClickHouseParser.SQL:
                    case ClickHouseParser.SECURITY:
                    case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
                    case ClickHouseParser.POLICIES:
                    case ClickHouseParser.PROFILES:
                    case ClickHouseParser.ALLOW:
                    case ClickHouseParser.GRANTS:
                    case ClickHouseParser.EXCEPT:
                    case ClickHouseParser.REVOKE:
                    case ClickHouseParser.IDENTIFIED:
                    case ClickHouseParser.PLAINTEXT_PASSWORD:
                    case ClickHouseParser.SHA256_PASSWORD:
                    case ClickHouseParser.SHA256_HASH:
                    case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
                    case ClickHouseParser.DOUBLE_SHA1_HASH:
                    case ClickHouseParser.NO_PASSWORD:
                    case ClickHouseParser.LDAP:
                    case ClickHouseParser.SERVER:
                    case ClickHouseParser.KERBEROS:
                    case ClickHouseParser.REALM:
                    case ClickHouseParser.SSL_CERTIFICATE:
                    case ClickHouseParser.SAN:
                    case ClickHouseParser.CN:
                    case ClickHouseParser.SSH_KEY:
                    case ClickHouseParser.HTTP:
                    case ClickHouseParser.SCHEME:
                    case ClickHouseParser.BCRYPT_PASSWORD:
                    case ClickHouseParser.BCRYPT_HASH:
                    case ClickHouseParser.VALID:
                    case ClickHouseParser.UNTIL:
                    case ClickHouseParser.GRANTEES:
                    case ClickHouseParser.NAME:
                    case ClickHouseParser.REGEXP:
                    case ClickHouseParser.IP:
                    case ClickHouseParser.HOST:
                    case ClickHouseParser.READONLY:
                    case ClickHouseParser.WRITABLE:
                    case ClickHouseParser.PERMISSIVE:
                    case ClickHouseParser.RESTRICTIVE:
                    case ClickHouseParser.TABSEPARATED:
                    case ClickHouseParser.TABSEPARATEDRAW:
                    case ClickHouseParser.TABSEPARATEDWITHNAMES:
                    case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
                    case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
                    case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
                    case ClickHouseParser.TEMPLATE:
                    case ClickHouseParser.TEMPLATEIGNORESPACES:
                    case ClickHouseParser.CSV:
                    case ClickHouseParser.CSVWITHNAMES:
                    case ClickHouseParser.CSVWITHNAMESANDTYPES:
                    case ClickHouseParser.CUSTOMSEPARATED:
                    case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
                    case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
                    case ClickHouseParser.JSON:
                    case ClickHouseParser.JSONASSTRING:
                    case ClickHouseParser.JSONASOBJECT:
                    case ClickHouseParser.JSONSTRINGS:
                    case ClickHouseParser.JSONCOLUMNS:
                    case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
                    case ClickHouseParser.JSONCOMPACT:
                    case ClickHouseParser.JSONCOMPACTCOLUMNS:
                    case ClickHouseParser.JSONEACHROW:
                    case ClickHouseParser.JSONSTRINGSEACHROW:
                    case ClickHouseParser.JSONCOMPACTEACHROW:
                    case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
                    case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
                    case ClickHouseParser.JSONOBJECTEACHROW:
                    case ClickHouseParser.BSONEACHROW:
                    case ClickHouseParser.TSKV:
                    case ClickHouseParser.PROTOBUF:
                    case ClickHouseParser.PROTOBUFSINGLE:
                    case ClickHouseParser.PROTOBUFLIST:
                    case ClickHouseParser.AVRO:
                    case ClickHouseParser.AVROCONFLUENT:
                    case ClickHouseParser.PARQUET:
                    case ClickHouseParser.PARQUETMETADATA:
                    case ClickHouseParser.ARROW:
                    case ClickHouseParser.ARROWSTREAM:
                    case ClickHouseParser.ORC:
                    case ClickHouseParser.ONE:
                    case ClickHouseParser.NPY:
                    case ClickHouseParser.ROWBINARY:
                    case ClickHouseParser.ROWBINARYWITHNAMES:
                    case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
                    case ClickHouseParser.ROWBINARYWITHDEFAULTS:
                    case ClickHouseParser.NATIVE:
                    case ClickHouseParser.CAPNPROTO:
                    case ClickHouseParser.LINEASSTRING:
                    case ClickHouseParser.RAWBLOB:
                    case ClickHouseParser.MSGPACK:
                    case ClickHouseParser.MYSQLDUMP:
                    case ClickHouseParser.DWARF:
                    case ClickHouseParser.FORM:
                    case ClickHouseParser.KEYED:
                    case ClickHouseParser.RANDOMIZED:
                    case ClickHouseParser.USER_NAME:
                    case ClickHouseParser.IP_ADDRESS:
                    case ClickHouseParser.FORWARDED_IP_ADDRESS:
                    case ClickHouseParser.CLIENT_KEY:
                    case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
                    case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
                    case ClickHouseParser.QUERIES:
                    case ClickHouseParser.QUERY_SELECTS:
                    case ClickHouseParser.QUERY_INSERTS:
                    case ClickHouseParser.ERRORS:
                    case ClickHouseParser.RESULT_ROWS:
                    case ClickHouseParser.RESULT_BYTES:
                    case ClickHouseParser.READ_ROWS:
                    case ClickHouseParser.READ_BYTES:
                    case ClickHouseParser.EXECUTION_TIME:
                    case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
                    case ClickHouseParser.LIMITS:
                    case ClickHouseParser.TRACKING:
                    case ClickHouseParser.ONLY:
                    case ClickHouseParser.CONST:
                    case ClickHouseParser.CHANGEABLE_IN_READONLY:
                    case ClickHouseParser.OVERRIDABLE:
                    case ClickHouseParser.JSON_FALSE:
                    case ClickHouseParser.JSON_TRUE:
                    case ClickHouseParser.IDENTIFIER:
                        {
                        this.state = 1845;
                        this.identifier();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1848;
                    this.match(ClickHouseParser.DOT);
                    }
                    break;
                }
                this.state = 1853;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.ASTERISK:
                    {
                    this.state = 1851;
                    this.match(ClickHouseParser.ASTERISK);
                    }
                    break;
                case ClickHouseParser.ADD:
                case ClickHouseParser.AFTER:
                case ClickHouseParser.ALIAS:
                case ClickHouseParser.ALL:
                case ClickHouseParser.ALTER:
                case ClickHouseParser.AND:
                case ClickHouseParser.ANTI:
                case ClickHouseParser.ANY:
                case ClickHouseParser.ARRAY:
                case ClickHouseParser.AS:
                case ClickHouseParser.ASCENDING:
                case ClickHouseParser.ASOF:
                case ClickHouseParser.AST:
                case ClickHouseParser.ASYNC:
                case ClickHouseParser.ATTACH:
                case ClickHouseParser.BETWEEN:
                case ClickHouseParser.BOTH:
                case ClickHouseParser.BY:
                case ClickHouseParser.CASE:
                case ClickHouseParser.CAST:
                case ClickHouseParser.CHECK:
                case ClickHouseParser.CLEAR:
                case ClickHouseParser.CLUSTER:
                case ClickHouseParser.CODEC:
                case ClickHouseParser.COLLATE:
                case ClickHouseParser.COLUMN:
                case ClickHouseParser.COMMENT:
                case ClickHouseParser.CONSTRAINT:
                case ClickHouseParser.CREATE:
                case ClickHouseParser.CROSS:
                case ClickHouseParser.CUBE:
                case ClickHouseParser.CURRENT:
                case ClickHouseParser.DATABASE:
                case ClickHouseParser.DATABASES:
                case ClickHouseParser.DATE:
                case ClickHouseParser.DAY:
                case ClickHouseParser.DEDUPLICATE:
                case ClickHouseParser.DEFAULT:
                case ClickHouseParser.DELAY:
                case ClickHouseParser.DELETE:
                case ClickHouseParser.DESC:
                case ClickHouseParser.DESCENDING:
                case ClickHouseParser.DESCRIBE:
                case ClickHouseParser.DETACH:
                case ClickHouseParser.DICTIONARIES:
                case ClickHouseParser.DICTIONARY:
                case ClickHouseParser.DISK:
                case ClickHouseParser.DISTINCT:
                case ClickHouseParser.DISTRIBUTED:
                case ClickHouseParser.DROP:
                case ClickHouseParser.ELSE:
                case ClickHouseParser.END:
                case ClickHouseParser.ENGINE:
                case ClickHouseParser.ESTIMATE:
                case ClickHouseParser.EVENTS:
                case ClickHouseParser.EXISTS:
                case ClickHouseParser.EXPLAIN:
                case ClickHouseParser.EXPRESSION:
                case ClickHouseParser.EXTRACT:
                case ClickHouseParser.FETCHES:
                case ClickHouseParser.FINAL:
                case ClickHouseParser.FIRST:
                case ClickHouseParser.FLUSH:
                case ClickHouseParser.FOLLOWING:
                case ClickHouseParser.FOR:
                case ClickHouseParser.FORMAT:
                case ClickHouseParser.FREEZE:
                case ClickHouseParser.FROM:
                case ClickHouseParser.FULL:
                case ClickHouseParser.FUNCTION:
                case ClickHouseParser.GLOBAL:
                case ClickHouseParser.GRANULARITY:
                case ClickHouseParser.GROUP:
                case ClickHouseParser.HAVING:
                case ClickHouseParser.HIERARCHICAL:
                case ClickHouseParser.HOUR:
                case ClickHouseParser.ID:
                case ClickHouseParser.IF:
                case ClickHouseParser.ILIKE:
                case ClickHouseParser.IN:
                case ClickHouseParser.INDEX:
                case ClickHouseParser.INF:
                case ClickHouseParser.INJECTIVE:
                case ClickHouseParser.INNER:
                case ClickHouseParser.INSERT:
                case ClickHouseParser.INTERVAL:
                case ClickHouseParser.INTO:
                case ClickHouseParser.IS:
                case ClickHouseParser.IS_OBJECT_ID:
                case ClickHouseParser.JOIN:
                case ClickHouseParser.KEY:
                case ClickHouseParser.KILL:
                case ClickHouseParser.LAST:
                case ClickHouseParser.LAYOUT:
                case ClickHouseParser.LEADING:
                case ClickHouseParser.LEFT:
                case ClickHouseParser.LIFETIME:
                case ClickHouseParser.LIKE:
                case ClickHouseParser.LIMIT:
                case ClickHouseParser.LIVE:
                case ClickHouseParser.LOCAL:
                case ClickHouseParser.LOGS:
                case ClickHouseParser.MATERIALIZE:
                case ClickHouseParser.MATERIALIZED:
                case ClickHouseParser.MAX:
                case ClickHouseParser.MERGES:
                case ClickHouseParser.MIN:
                case ClickHouseParser.MINUTE:
                case ClickHouseParser.MODIFY:
                case ClickHouseParser.MONTH:
                case ClickHouseParser.MOVE:
                case ClickHouseParser.MUTATION:
                case ClickHouseParser.NO:
                case ClickHouseParser.NOT:
                case ClickHouseParser.NULLS:
                case ClickHouseParser.OFFSET:
                case ClickHouseParser.ON:
                case ClickHouseParser.OPTIMIZE:
                case ClickHouseParser.OR:
                case ClickHouseParser.ORDER:
                case ClickHouseParser.OUTER:
                case ClickHouseParser.OUTFILE:
                case ClickHouseParser.OVER:
                case ClickHouseParser.PARTITION:
                case ClickHouseParser.PIPELINE:
                case ClickHouseParser.PLAN:
                case ClickHouseParser.POPULATE:
                case ClickHouseParser.PRECEDING:
                case ClickHouseParser.PREWHERE:
                case ClickHouseParser.PRIMARY:
                case ClickHouseParser.PROJECTION:
                case ClickHouseParser.QUARTER:
                case ClickHouseParser.QUERY:
                case ClickHouseParser.RANGE:
                case ClickHouseParser.RELOAD:
                case ClickHouseParser.REMOVE:
                case ClickHouseParser.RENAME:
                case ClickHouseParser.REPLACE:
                case ClickHouseParser.REPLICA:
                case ClickHouseParser.REPLICATED:
                case ClickHouseParser.RIGHT:
                case ClickHouseParser.ROLLUP:
                case ClickHouseParser.ROW:
                case ClickHouseParser.ROWS:
                case ClickHouseParser.SAMPLE:
                case ClickHouseParser.SECOND:
                case ClickHouseParser.SELECT:
                case ClickHouseParser.SEMI:
                case ClickHouseParser.SENDS:
                case ClickHouseParser.SET:
                case ClickHouseParser.SETTINGS:
                case ClickHouseParser.SHOW:
                case ClickHouseParser.SOURCE:
                case ClickHouseParser.START:
                case ClickHouseParser.STOP:
                case ClickHouseParser.SUBSTRING:
                case ClickHouseParser.SYNC:
                case ClickHouseParser.SYNTAX:
                case ClickHouseParser.SYSTEM:
                case ClickHouseParser.TABLE:
                case ClickHouseParser.TABLES:
                case ClickHouseParser.TEMPORARY:
                case ClickHouseParser.TEST:
                case ClickHouseParser.THEN:
                case ClickHouseParser.TIES:
                case ClickHouseParser.TIMEOUT:
                case ClickHouseParser.TIMESTAMP:
                case ClickHouseParser.TO:
                case ClickHouseParser.TOP:
                case ClickHouseParser.TOTALS:
                case ClickHouseParser.TRAILING:
                case ClickHouseParser.TRIM:
                case ClickHouseParser.TREE:
                case ClickHouseParser.TRUNCATE:
                case ClickHouseParser.TTL:
                case ClickHouseParser.TYPE:
                case ClickHouseParser.UNBOUNDED:
                case ClickHouseParser.UNION:
                case ClickHouseParser.UPDATE:
                case ClickHouseParser.USE:
                case ClickHouseParser.USING:
                case ClickHouseParser.UUID:
                case ClickHouseParser.VALUES:
                case ClickHouseParser.VIEW:
                case ClickHouseParser.VOLUME:
                case ClickHouseParser.WATCH:
                case ClickHouseParser.WEEK:
                case ClickHouseParser.WHEN:
                case ClickHouseParser.WHERE:
                case ClickHouseParser.WINDOW:
                case ClickHouseParser.WITH:
                case ClickHouseParser.YEAR:
                case ClickHouseParser.GRANT:
                case ClickHouseParser.USER:
                case ClickHouseParser.FETCH:
                case ClickHouseParser.REFRESH:
                case ClickHouseParser.POLICY:
                case ClickHouseParser.QUOTA:
                case ClickHouseParser.ROLE:
                case ClickHouseParser.PROFILE:
                case ClickHouseParser.ARBITRARY:
                case ClickHouseParser.COLUMNS:
                case ClickHouseParser.CURRENT_USER:
                case ClickHouseParser.ACCESS:
                case ClickHouseParser.SHOW_USERS:
                case ClickHouseParser.SHOW_ROLES:
                case ClickHouseParser.SHOW_ROW_POLICIES:
                case ClickHouseParser.SHOW_QUOTAS:
                case ClickHouseParser.SHOW_SETTINGS_PROFILES:
                case ClickHouseParser.SHUTDOWN:
                case ClickHouseParser.CACHE:
                case ClickHouseParser.DNS:
                case ClickHouseParser.MARK:
                case ClickHouseParser.MARKS:
                case ClickHouseParser.PART:
                case ClickHouseParser.UNCOMPRESSED:
                case ClickHouseParser.CONFIG:
                case ClickHouseParser.EMBEDDED:
                case ClickHouseParser.FUNCTIONS:
                case ClickHouseParser.MOVES:
                case ClickHouseParser.REPLICATION:
                case ClickHouseParser.QUEUES:
                case ClickHouseParser.RESTART:
                case ClickHouseParser.DICTGET:
                case ClickHouseParser.DICTGETHIERARCHY:
                case ClickHouseParser.DICTHAS:
                case ClickHouseParser.DICTISIN:
                case ClickHouseParser.MANAGEMENT:
                case ClickHouseParser.ADMIN:
                case ClickHouseParser.NAMED:
                case ClickHouseParser.COLLECTION:
                case ClickHouseParser.CONTROL:
                case ClickHouseParser.COLLECTIONS:
                case ClickHouseParser.SECRETS:
                case ClickHouseParser.USAGE:
                case ClickHouseParser.INTROSPECTION:
                case ClickHouseParser.ADDRESSTOLINE:
                case ClickHouseParser.ADDRESSTOSYMBOL:
                case ClickHouseParser.DEMANGLE:
                case ClickHouseParser.SOURCES:
                case ClickHouseParser.FILE:
                case ClickHouseParser.URL:
                case ClickHouseParser.REMOTE:
                case ClickHouseParser.MYSQL:
                case ClickHouseParser.ODBC:
                case ClickHouseParser.JDBC:
                case ClickHouseParser.HDFS:
                case ClickHouseParser.S3:
                case ClickHouseParser.SETTING:
                case ClickHouseParser.OPTION:
                case ClickHouseParser.NONE:
                case ClickHouseParser.AZURE:
                case ClickHouseParser.HIVE:
                case ClickHouseParser.MONGO:
                case ClickHouseParser.POSTGRES:
                case ClickHouseParser.REDIS:
                case ClickHouseParser.SQLITE:
                case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
                case ClickHouseParser.SQL:
                case ClickHouseParser.SECURITY:
                case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
                case ClickHouseParser.POLICIES:
                case ClickHouseParser.PROFILES:
                case ClickHouseParser.ALLOW:
                case ClickHouseParser.GRANTS:
                case ClickHouseParser.EXCEPT:
                case ClickHouseParser.REVOKE:
                case ClickHouseParser.IDENTIFIED:
                case ClickHouseParser.PLAINTEXT_PASSWORD:
                case ClickHouseParser.SHA256_PASSWORD:
                case ClickHouseParser.SHA256_HASH:
                case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
                case ClickHouseParser.DOUBLE_SHA1_HASH:
                case ClickHouseParser.NO_PASSWORD:
                case ClickHouseParser.LDAP:
                case ClickHouseParser.SERVER:
                case ClickHouseParser.KERBEROS:
                case ClickHouseParser.REALM:
                case ClickHouseParser.SSL_CERTIFICATE:
                case ClickHouseParser.SAN:
                case ClickHouseParser.CN:
                case ClickHouseParser.SSH_KEY:
                case ClickHouseParser.HTTP:
                case ClickHouseParser.SCHEME:
                case ClickHouseParser.BCRYPT_PASSWORD:
                case ClickHouseParser.BCRYPT_HASH:
                case ClickHouseParser.VALID:
                case ClickHouseParser.UNTIL:
                case ClickHouseParser.GRANTEES:
                case ClickHouseParser.NAME:
                case ClickHouseParser.REGEXP:
                case ClickHouseParser.IP:
                case ClickHouseParser.HOST:
                case ClickHouseParser.READONLY:
                case ClickHouseParser.WRITABLE:
                case ClickHouseParser.PERMISSIVE:
                case ClickHouseParser.RESTRICTIVE:
                case ClickHouseParser.TABSEPARATED:
                case ClickHouseParser.TABSEPARATEDRAW:
                case ClickHouseParser.TABSEPARATEDWITHNAMES:
                case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
                case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
                case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
                case ClickHouseParser.TEMPLATE:
                case ClickHouseParser.TEMPLATEIGNORESPACES:
                case ClickHouseParser.CSV:
                case ClickHouseParser.CSVWITHNAMES:
                case ClickHouseParser.CSVWITHNAMESANDTYPES:
                case ClickHouseParser.CUSTOMSEPARATED:
                case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
                case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
                case ClickHouseParser.JSON:
                case ClickHouseParser.JSONASSTRING:
                case ClickHouseParser.JSONASOBJECT:
                case ClickHouseParser.JSONSTRINGS:
                case ClickHouseParser.JSONCOLUMNS:
                case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
                case ClickHouseParser.JSONCOMPACT:
                case ClickHouseParser.JSONCOMPACTCOLUMNS:
                case ClickHouseParser.JSONEACHROW:
                case ClickHouseParser.JSONSTRINGSEACHROW:
                case ClickHouseParser.JSONCOMPACTEACHROW:
                case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
                case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
                case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
                case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
                case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
                case ClickHouseParser.JSONOBJECTEACHROW:
                case ClickHouseParser.BSONEACHROW:
                case ClickHouseParser.TSKV:
                case ClickHouseParser.PROTOBUF:
                case ClickHouseParser.PROTOBUFSINGLE:
                case ClickHouseParser.PROTOBUFLIST:
                case ClickHouseParser.AVRO:
                case ClickHouseParser.AVROCONFLUENT:
                case ClickHouseParser.PARQUET:
                case ClickHouseParser.PARQUETMETADATA:
                case ClickHouseParser.ARROW:
                case ClickHouseParser.ARROWSTREAM:
                case ClickHouseParser.ORC:
                case ClickHouseParser.ONE:
                case ClickHouseParser.NPY:
                case ClickHouseParser.ROWBINARY:
                case ClickHouseParser.ROWBINARYWITHNAMES:
                case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
                case ClickHouseParser.ROWBINARYWITHDEFAULTS:
                case ClickHouseParser.NATIVE:
                case ClickHouseParser.CAPNPROTO:
                case ClickHouseParser.LINEASSTRING:
                case ClickHouseParser.RAWBLOB:
                case ClickHouseParser.MSGPACK:
                case ClickHouseParser.MYSQLDUMP:
                case ClickHouseParser.DWARF:
                case ClickHouseParser.FORM:
                case ClickHouseParser.KEYED:
                case ClickHouseParser.RANDOMIZED:
                case ClickHouseParser.USER_NAME:
                case ClickHouseParser.IP_ADDRESS:
                case ClickHouseParser.FORWARDED_IP_ADDRESS:
                case ClickHouseParser.CLIENT_KEY:
                case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
                case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
                case ClickHouseParser.QUERIES:
                case ClickHouseParser.QUERY_SELECTS:
                case ClickHouseParser.QUERY_INSERTS:
                case ClickHouseParser.ERRORS:
                case ClickHouseParser.RESULT_ROWS:
                case ClickHouseParser.RESULT_BYTES:
                case ClickHouseParser.READ_ROWS:
                case ClickHouseParser.READ_BYTES:
                case ClickHouseParser.EXECUTION_TIME:
                case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
                case ClickHouseParser.LIMITS:
                case ClickHouseParser.TRACKING:
                case ClickHouseParser.ONLY:
                case ClickHouseParser.CONST:
                case ClickHouseParser.CHANGEABLE_IN_READONLY:
                case ClickHouseParser.OVERRIDABLE:
                case ClickHouseParser.JSON_FALSE:
                case ClickHouseParser.JSON_TRUE:
                case ClickHouseParser.IDENTIFIER:
                    {
                    this.state = 1852;
                    this.identifier();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeList(): PrivilegeListContext {
        let localContext = new PrivilegeListContext(this.context, this.state);
        this.enterRule(localContext, 200, ClickHouseParser.RULE_privilegeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1857;
            this.privilege();
            this.state = 1862;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 1858;
                this.match(ClickHouseParser.COMMA);
                this.state = 1859;
                this.privilege();
                }
                }
                this.state = 1864;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleIdentifier(): RoleIdentifierContext {
        let localContext = new RoleIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 202, ClickHouseParser.RULE_roleIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1865;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userIdentifier(): UserIdentifierContext {
        let localContext = new UserIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 204, ClickHouseParser.RULE_userIdentifier);
        try {
            this.state = 1869;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 226, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1867;
                this.match(ClickHouseParser.CURRENT_USER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1868;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext {
        let localContext = new UserOrRoleExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 206, ClickHouseParser.RULE_userOrRoleExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1871;
            this.userOrRoleIdentifier();
            this.state = 1876;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 227, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1872;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1873;
                    this.userOrRoleIdentifier();
                    }
                    }
                }
                this.state = 1878;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 227, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userOrRoleIdentifier(): UserOrRoleIdentifierContext {
        let localContext = new UserOrRoleIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 208, ClickHouseParser.RULE_userOrRoleIdentifier);
        try {
            this.state = 1881;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 228, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1879;
                this.userIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1880;
                this.roleIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectPrivilege(): SelectPrivilegeContext {
        let localContext = new SelectPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 210, ClickHouseParser.RULE_selectPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1883;
            this.match(ClickHouseParser.SELECT);
            this.state = 1885;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 405) {
                {
                this.state = 1884;
                this.columnsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertPrivilege(): InsertPrivilegeContext {
        let localContext = new InsertPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 212, ClickHouseParser.RULE_insertPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1887;
            this.match(ClickHouseParser.INSERT);
            this.state = 1889;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 405) {
                {
                this.state = 1888;
                this.columnsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createPrivilege(): CreatePrivilegeContext {
        let localContext = new CreatePrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 214, ClickHouseParser.RULE_createPrivilege);
        let _la: number;
        try {
            this.state = 1902;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 233, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1891;
                this.match(ClickHouseParser.CREATE);
                this.state = 1893;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33 || _la === 46 || _la === 70 || _la === 162 || _la === 186) {
                    {
                    this.state = 1892;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 33 || _la === 46 || _la === 70 || _la === 162 || _la === 186)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1895;
                this.match(ClickHouseParser.CREATE);
                this.state = 1899;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.ARBITRARY:
                    {
                    this.state = 1896;
                    this.match(ClickHouseParser.ARBITRARY);
                    this.state = 1897;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                case ClickHouseParser.TEMPORARY:
                    {
                    this.state = 1898;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                case ClickHouseParser.TABLE:
                    break;
                default:
                    break;
                }
                this.state = 1901;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropPrivilege(): DropPrivilegeContext {
        let localContext = new DropPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 216, ClickHouseParser.RULE_dropPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1904;
            this.match(ClickHouseParser.DROP);
            this.state = 1906;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 33 || _la === 46 || _la === 162 || _la === 186) {
                {
                this.state = 1905;
                _la = this.tokenStream.LA(1);
                if(!(_la === 33 || _la === 46 || _la === 162 || _la === 186)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showPrivilege(): ShowPrivilegeContext {
        let localContext = new ShowPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 218, ClickHouseParser.RULE_showPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1908;
            this.match(ClickHouseParser.SHOW);
            this.state = 1910;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34 || _la === 45 || _la === 163 || _la === 204) {
                {
                this.state = 1909;
                _la = this.tokenStream.LA(1);
                if(!(_la === 34 || _la === 45 || _la === 163 || _la === 204)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public introspectionPrivilege(): IntrospectionPrivilegeContext {
        let localContext = new IntrospectionPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 220, ClickHouseParser.RULE_introspectionPrivilege);
        let _la: number;
        try {
            this.state = 1920;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.INTROSPECTION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1912;
                this.match(ClickHouseParser.INTROSPECTION);
                this.state = 1914;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 221) {
                    {
                    this.state = 1913;
                    this.match(ClickHouseParser.FUNCTIONS);
                    }
                }

                }
                break;
            case ClickHouseParser.ADDRESSTOLINE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1916;
                this.match(ClickHouseParser.ADDRESSTOLINE);
                }
                break;
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1917;
                this.match(ClickHouseParser.ADDRESSTOLINEWITHINLINES);
                }
                break;
            case ClickHouseParser.ADDRESSTOSYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1918;
                this.match(ClickHouseParser.ADDRESSTOSYMBOL);
                }
                break;
            case ClickHouseParser.DEMANGLE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1919;
                this.match(ClickHouseParser.DEMANGLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourcePrivilege(): SourcePrivilegeContext {
        let localContext = new SourcePrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 222, ClickHouseParser.RULE_sourcePrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1922;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 242)) & ~0x1F) === 0 && ((1 << (_la - 242)) & 258559) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictPrivilege(): DictPrivilegeContext {
        let localContext = new DictPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 224, ClickHouseParser.RULE_dictPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1924;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterPrivilege(): AlterPrivilegeContext {
        let localContext = new AlterPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 226, ClickHouseParser.RULE_alterPrivilege);
        let _la: number;
        try {
            this.state = 2022;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1926;
                this.match(ClickHouseParser.ALTER);
                this.state = 1928;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 40 || _la === 181) {
                    {
                    this.state = 1927;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 40 || _la === 181)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1931;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 405) {
                    {
                    this.state = 1930;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1933;
                _la = this.tokenStream.LA(1);
                if(!(_la === 40 || _la === 181)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1935;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 405) {
                    {
                    this.state = 1934;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1937;
                this.match(ClickHouseParser.ALTER);
                this.state = 1938;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1939;
                this.match(ClickHouseParser.ALTER);
                this.state = 1941;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 138412034) !== 0) || _la === 50 || _la === 109 || _la === 139) {
                    {
                    this.state = 1940;
                    _la = this.tokenStream.LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 138412034) !== 0) || _la === 50 || _la === 109 || _la === 139)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1943;
                this.match(ClickHouseParser.COLUMN);
                this.state = 1945;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 405) {
                    {
                    this.state = 1944;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1947;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 138412034) !== 0) || _la === 50 || _la === 109 || _la === 139)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1948;
                this.match(ClickHouseParser.COLUMN);
                this.state = 1950;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 405) {
                    {
                    this.state = 1949;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1952;
                this.match(ClickHouseParser.ALTER);
                this.state = 1954;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 22 || _la === 50 || _la === 103) {
                    {
                    this.state = 1953;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 22 || _la === 50 || _la === 103)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1956;
                this.match(ClickHouseParser.INDEX);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1958;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 22 || _la === 50 || _la === 103) {
                    {
                    this.state = 1957;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 22 || _la === 50 || _la === 103)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1960;
                this.match(ClickHouseParser.INDEX);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1961;
                this.match(ClickHouseParser.ALTER);
                this.state = 1963;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 1962;
                    this.match(ClickHouseParser.MODIFY);
                    }
                }

                this.state = 1965;
                _la = this.tokenStream.LA(1);
                if(!(_la === 122 || _la === 147)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1966;
                this.match(ClickHouseParser.BY);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1967;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1968;
                _la = this.tokenStream.LA(1);
                if(!(_la === 122 || _la === 147)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1969;
                this.match(ClickHouseParser.BY);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1971;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 1970;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 1974;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 50) {
                    {
                    this.state = 1973;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 50)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1976;
                this.match(ClickHouseParser.CONSTRAINT);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1977;
                this.match(ClickHouseParser.ALTER);
                this.state = 1979;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103 || _la === 109) {
                    {
                    this.state = 1978;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 103 || _la === 109)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1981;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1982;
                _la = this.tokenStream.LA(1);
                if(!(_la === 103 || _la === 109)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1983;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1984;
                this.match(ClickHouseParser.ALTER);
                this.state = 1985;
                this.match(ClickHouseParser.SETTINGS);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1990;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 250, this.context) ) {
                case 1:
                    {
                    this.state = 1986;
                    this.match(ClickHouseParser.ALTER);
                    }
                    break;
                case 2:
                    {
                    this.state = 1987;
                    this.match(ClickHouseParser.ALTER);
                    this.state = 1988;
                    this.match(ClickHouseParser.MODIFY);
                    }
                    break;
                case 3:
                    {
                    this.state = 1989;
                    this.match(ClickHouseParser.MODIFY);
                    }
                    break;
                }
                this.state = 1992;
                this.match(ClickHouseParser.SETTING);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1994;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 1993;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 1996;
                _la = this.tokenStream.LA(1);
                if(!(_la === 111 || _la === 197)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1997;
                _la = this.tokenStream.LA(1);
                if(!(_la === 126 || _la === 217)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1999;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 1998;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 2001;
                this.match(ClickHouseParser.FREEZE);
                this.state = 2002;
                this.match(ClickHouseParser.PARTITION);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2003;
                this.match(ClickHouseParser.ALTER);
                this.state = 2004;
                this.match(ClickHouseParser.VIEW);
                this.state = 2006;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 2005;
                    this.match(ClickHouseParser.REFRESH);
                    }
                }

                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2008;
                this.match(ClickHouseParser.ALTER);
                this.state = 2009;
                this.match(ClickHouseParser.LIVE);
                this.state = 2010;
                this.match(ClickHouseParser.VIEW);
                this.state = 2011;
                this.match(ClickHouseParser.REFRESH);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2012;
                this.match(ClickHouseParser.REFRESH);
                this.state = 2013;
                this.match(ClickHouseParser.VIEW);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 2014;
                this.match(ClickHouseParser.ALTER);
                this.state = 2015;
                _la = this.tokenStream.LA(1);
                if(!(_la === 162 || _la === 186)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2016;
                this.match(ClickHouseParser.MODIFY);
                this.state = 2020;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.QUERY:
                    {
                    this.state = 2017;
                    this.match(ClickHouseParser.QUERY);
                    }
                    break;
                case ClickHouseParser.SQL:
                    {
                    this.state = 2018;
                    this.match(ClickHouseParser.SQL);
                    this.state = 2019;
                    this.match(ClickHouseParser.SECURITY);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public accessManagementPrivilege(): AccessManagementPrivilegeContext {
        let localContext = new AccessManagementPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 228, ClickHouseParser.RULE_accessManagementPrivilege);
        let _la: number;
        try {
            this.state = 2084;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 261, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2024;
                this.match(ClickHouseParser.ACCESS);
                this.state = 2025;
                this.match(ClickHouseParser.MANAGEMENT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2026;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2027;
                this.match(ClickHouseParser.USER);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2028;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2029;
                this.match(ClickHouseParser.ROLE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2030;
                this.match(ClickHouseParser.ROLE);
                this.state = 2031;
                this.match(ClickHouseParser.ADMIN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2032;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2034;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 145) {
                    {
                    this.state = 2033;
                    this.match(ClickHouseParser.ROW);
                    }
                }

                this.state = 2036;
                this.match(ClickHouseParser.POLICY);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2037;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2038;
                this.match(ClickHouseParser.QUOTA);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2039;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2041;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 153) {
                    {
                    this.state = 2040;
                    this.match(ClickHouseParser.SETTINGS);
                    }
                }

                this.state = 2043;
                this.match(ClickHouseParser.PROFILE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2044;
                this.match(ClickHouseParser.SHOW);
                this.state = 2045;
                this.match(ClickHouseParser.ACCESS);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2046;
                this.match(ClickHouseParser.SHOW_USERS);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2047;
                this.match(ClickHouseParser.SHOW);
                this.state = 2048;
                this.match(ClickHouseParser.CREATE);
                this.state = 2049;
                this.match(ClickHouseParser.USER);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2050;
                this.match(ClickHouseParser.SHOW_ROLES);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2051;
                this.match(ClickHouseParser.SHOW);
                this.state = 2052;
                this.match(ClickHouseParser.CREATE);
                this.state = 2053;
                this.match(ClickHouseParser.ROLE);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2054;
                this.match(ClickHouseParser.SHOW_ROW_POLICIES);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2055;
                this.match(ClickHouseParser.SHOW);
                this.state = 2056;
                this.match(ClickHouseParser.POLICIES);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2057;
                this.match(ClickHouseParser.SHOW);
                this.state = 2058;
                this.match(ClickHouseParser.CREATE);
                this.state = 2060;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 145) {
                    {
                    this.state = 2059;
                    this.match(ClickHouseParser.ROW);
                    }
                }

                this.state = 2062;
                this.match(ClickHouseParser.POLICY);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2063;
                this.match(ClickHouseParser.SHOW_QUOTAS);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2064;
                this.match(ClickHouseParser.SHOW);
                this.state = 2065;
                this.match(ClickHouseParser.CREATE);
                this.state = 2066;
                this.match(ClickHouseParser.QUOTA);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2067;
                this.match(ClickHouseParser.SHOW_SETTINGS_PROFILES);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2068;
                this.match(ClickHouseParser.SHOW);
                this.state = 2069;
                this.match(ClickHouseParser.PROFILES);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 2070;
                this.match(ClickHouseParser.SHOW);
                this.state = 2071;
                this.match(ClickHouseParser.CREATE);
                this.state = 2073;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 153) {
                    {
                    this.state = 2072;
                    this.match(ClickHouseParser.SETTINGS);
                    }
                }

                this.state = 2075;
                this.match(ClickHouseParser.PROFILE);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 2077;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29 || _la === 266) {
                    {
                    this.state = 2076;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 29 || _la === 266)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2079;
                this.match(ClickHouseParser.SQL);
                this.state = 2080;
                this.match(ClickHouseParser.SECURITY);
                this.state = 2081;
                this.match(ClickHouseParser.NONE);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 2082;
                this.match(ClickHouseParser.SECURITY);
                this.state = 2083;
                this.match(ClickHouseParser.NONE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public systemPrivilege(): SystemPrivilegeContext {
        let localContext = new SystemPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 230, ClickHouseParser.RULE_systemPrivilege);
        let _la: number;
        try {
            this.state = 2176;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 277, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2086;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2088;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92 || _la === 212) {
                    {
                    this.state = 2087;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 92 || _la === 212)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2090;
                this.match(ClickHouseParser.SHUTDOWN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2092;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 161) {
                    {
                    this.state = 2091;
                    this.match(ClickHouseParser.SYSTEM);
                    }
                }

                this.state = 2094;
                this.match(ClickHouseParser.DROP);
                this.state = 2095;
                this.match(ClickHouseParser.CACHE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2096;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2097;
                this.match(ClickHouseParser.DROP);
                this.state = 2098;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 19) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2100;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 213) {
                    {
                    this.state = 2099;
                    this.match(ClickHouseParser.CACHE);
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2102;
                this.match(ClickHouseParser.DROP);
                this.state = 2103;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 19) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2104;
                this.match(ClickHouseParser.CACHE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2105;
                this.match(ClickHouseParser.DROP);
                this.state = 2106;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 21) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2107;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2108;
                this.match(ClickHouseParser.RELOAD);
                this.state = 2115;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.CONFIG:
                    {
                    this.state = 2109;
                    this.match(ClickHouseParser.CONFIG);
                    }
                    break;
                case ClickHouseParser.DICTIONARY:
                    {
                    this.state = 2110;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case ClickHouseParser.DICTIONARIES:
                case ClickHouseParser.EMBEDDED:
                    {
                    this.state = 2112;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 220) {
                        {
                        this.state = 2111;
                        this.match(ClickHouseParser.EMBEDDED);
                        }
                    }

                    this.state = 2114;
                    this.match(ClickHouseParser.DICTIONARIES);
                    }
                    break;
                case ClickHouseParser.ON:
                case ClickHouseParser.COMMA:
                    break;
                default:
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2117;
                this.match(ClickHouseParser.RELOAD);
                this.state = 2124;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.CONFIG:
                    {
                    this.state = 2118;
                    this.match(ClickHouseParser.CONFIG);
                    }
                    break;
                case ClickHouseParser.DICTIONARY:
                    {
                    this.state = 2119;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case ClickHouseParser.DICTIONARIES:
                case ClickHouseParser.EMBEDDED:
                    {
                    this.state = 2121;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 220) {
                        {
                        this.state = 2120;
                        this.match(ClickHouseParser.EMBEDDED);
                        }
                    }

                    this.state = 2123;
                    this.match(ClickHouseParser.DICTIONARIES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2126;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2128;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 156 || _la === 157) {
                    {
                    this.state = 2127;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 156 || _la === 157)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2131;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 2130;
                    this.match(ClickHouseParser.TTL);
                    }
                }

                this.state = 2133;
                this.match(ClickHouseParser.MERGES);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2134;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2136;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 2135;
                    this.match(ClickHouseParser.TTL);
                    }
                }

                this.state = 2138;
                this.match(ClickHouseParser.MERGES);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2139;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2141;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 156 || _la === 157) {
                    {
                    this.state = 2140;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 156 || _la === 157)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2143;
                _la = this.tokenStream.LA(1);
                if(!(_la === 60 || _la === 151 || _la === 222)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2144;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2145;
                _la = this.tokenStream.LA(1);
                if(!(_la === 60 || _la === 151 || _la === 222)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2146;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2148;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 156 || _la === 157) {
                    {
                    this.state = 2147;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 156 || _la === 157)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2150;
                _la = this.tokenStream.LA(1);
                if(!(_la === 49 || _la === 142)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2151;
                this.match(ClickHouseParser.SENDS);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2152;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2153;
                _la = this.tokenStream.LA(1);
                if(!(_la === 49 || _la === 142)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2154;
                this.match(ClickHouseParser.SENDS);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2155;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2157;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 156 || _la === 157) {
                    {
                    this.state = 2156;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 156 || _la === 157)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2159;
                this.match(ClickHouseParser.REPLICATION);
                this.state = 2160;
                this.match(ClickHouseParser.QUEUES);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2161;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2162;
                this.match(ClickHouseParser.REPLICATION);
                this.state = 2163;
                this.match(ClickHouseParser.QUEUES);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2165;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 161) {
                    {
                    this.state = 2164;
                    this.match(ClickHouseParser.SYSTEM);
                    }
                }

                this.state = 2167;
                _la = this.tokenStream.LA(1);
                if(!(_la === 159 || _la === 225)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2168;
                this.match(ClickHouseParser.REPLICA);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2169;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2170;
                this.match(ClickHouseParser.FLUSH);
                this.state = 2172;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 49 || _la === 102) {
                    {
                    this.state = 2171;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 49 || _la === 102)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2174;
                this.match(ClickHouseParser.FLUSH);
                this.state = 2175;
                _la = this.tokenStream.LA(1);
                if(!(_la === 49 || _la === 102)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedCollectionAdminPrivilege(): NamedCollectionAdminPrivilegeContext {
        let localContext = new NamedCollectionAdminPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 232, ClickHouseParser.RULE_namedCollectionAdminPrivilege);
        let _la: number;
        try {
            this.state = 2197;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 281, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2178;
                this.match(ClickHouseParser.NAMED);
                this.state = 2179;
                this.match(ClickHouseParser.COLLECTION);
                this.state = 2181;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & 73) !== 0)) {
                    {
                    this.state = 2180;
                    _la = this.tokenStream.LA(1);
                    if(!(((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & 73) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2184;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5 || _la === 29 || _la === 50) {
                    {
                    this.state = 2183;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 5 || _la === 29 || _la === 50)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2186;
                this.match(ClickHouseParser.NAMED);
                this.state = 2187;
                this.match(ClickHouseParser.COLLECTION);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2188;
                this.match(ClickHouseParser.SHOW);
                this.state = 2189;
                this.match(ClickHouseParser.NAMED);
                this.state = 2190;
                this.match(ClickHouseParser.COLLECTIONS);
                this.state = 2192;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 236) {
                    {
                    this.state = 2191;
                    this.match(ClickHouseParser.SECRETS);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2194;
                this.match(ClickHouseParser.USE);
                this.state = 2195;
                this.match(ClickHouseParser.NAMED);
                this.state = 2196;
                this.match(ClickHouseParser.COLLECTION);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 234, ClickHouseParser.RULE_privilege);
        try {
            this.state = 2224;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2199;
                this.selectPrivilege();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2200;
                this.insertPrivilege();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2201;
                this.createPrivilege();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2202;
                this.dropPrivilege();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2203;
                this.match(ClickHouseParser.TRUNCATE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2204;
                this.match(ClickHouseParser.KILL);
                this.state = 2205;
                this.match(ClickHouseParser.QUERY);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2206;
                this.match(ClickHouseParser.OPTIMIZE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2207;
                this.showPrivilege();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2208;
                this.introspectionPrivilege();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2209;
                this.sourcePrivilege();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2210;
                this.dictPrivilege();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2211;
                this.alterPrivilege();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2212;
                this.match(ClickHouseParser.ALL);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2213;
                this.match(ClickHouseParser.NONE);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2214;
                this.match(ClickHouseParser.OPTIMIZE);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2215;
                this.match(ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2216;
                this.accessManagementPrivilege();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2217;
                this.systemPrivilege();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2218;
                this.namedCollectionAdminPrivilege();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 2219;
                this.match(ClickHouseParser.TABLE);
                this.state = 2220;
                this.match(ClickHouseParser.ENGINE);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 2221;
                this.match(ClickHouseParser.ADMIN);
                this.state = 2222;
                this.match(ClickHouseParser.OPTION);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 2223;
                this.match(ClickHouseParser.USAGE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertStatement(): InsertStatementContext {
        let localContext = new InsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 236, ClickHouseParser.RULE_insertStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2226;
            this.match(ClickHouseParser.INSERT);
            this.state = 2227;
            this.match(ClickHouseParser.INTO);
            this.state = 2229;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 283, this.context) ) {
            case 1:
                {
                this.state = 2228;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 2234;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 284, this.context) ) {
            case 1:
                {
                this.state = 2231;
                this.tableIdentifier();
                }
                break;
            case 2:
                {
                this.state = 2232;
                this.match(ClickHouseParser.FUNCTION);
                this.state = 2233;
                this.tableFunctionExpression();
                }
                break;
            }
            this.state = 2237;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 285, this.context) ) {
            case 1:
                {
                this.state = 2236;
                this.columnsOrExceptClause();
                }
                break;
            }
            this.state = 2240;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 2239;
                this.settingsClause();
                }
            }

            this.state = 2242;
            this.dataClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsOrExceptClause(): ColumnsOrExceptClauseContext {
        let localContext = new ColumnsOrExceptClauseContext(this.context, this.state);
        this.enterRule(localContext, 238, ClickHouseParser.RULE_columnsOrExceptClause);
        let _la: number;
        try {
            this.state = 2252;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 288, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2244;
                this.columnsClause();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2245;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2246;
                this.match(ClickHouseParser.ASTERISK);
                this.state = 2249;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 2247;
                    this.match(ClickHouseParser.EXCEPT);
                    this.state = 2248;
                    this.columnsClause();
                    }
                }

                this.state = 2251;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsClause(): ColumnsClauseContext {
        let localContext = new ColumnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 240, ClickHouseParser.RULE_columnsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2254;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2255;
            this.columnIdentifier();
            this.state = 2260;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 2256;
                this.match(ClickHouseParser.COMMA);
                this.state = 2257;
                this.columnIdentifier();
                }
                }
                this.state = 2262;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2263;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertFormatType(): InsertFormatTypeContext {
        let localContext = new InsertFormatTypeContext(this.context, this.state);
        this.enterRule(localContext, 242, ClickHouseParser.RULE_insertFormatType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2265;
            _la = this.tokenStream.LA(1);
            if(!(_la === 185 || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & 4294967169) !== 0) || ((((_la - 325)) & ~0x1F) === 0 && ((1 << (_la - 325)) & 4294967295) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataClause(): DataClauseContext {
        let localContext = new DataClauseContext(this.context, this.state);
        this.enterRule(localContext, 244, ClickHouseParser.RULE_dataClause);
        let _la: number;
        try {
            this.state = 2284;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 293, this.context) ) {
            case 1:
                localContext = new DataClauseFormatContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2267;
                this.match(ClickHouseParser.FORMAT);
                this.state = 2268;
                this.insertFormatType();
                this.state = 2270;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2269;
                    this.identifier();
                    }
                    }
                    this.state = 2272;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0));
                }
                break;
            case 2:
                localContext = new DataClauseValuesContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2275;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 66) {
                    {
                    this.state = 2274;
                    this.match(ClickHouseParser.FORMAT);
                    }
                }

                this.state = 2277;
                this.valuesStatement();
                }
                break;
            case 3:
                localContext = new DataClauseSelectContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2278;
                this.selectUnionStatement();
                this.state = 2280;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 416) {
                    {
                    this.state = 2279;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                }

                this.state = 2282;
                this.match(ClickHouseParser.EOF);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literalList(): LiteralListContext {
        let localContext = new LiteralListContext(this.context, this.state);
        this.enterRule(localContext, 246, ClickHouseParser.RULE_literalList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2286;
            this.literal();
            this.state = 2291;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 2287;
                this.match(ClickHouseParser.COMMA);
                this.state = 2288;
                this.literal();
                }
                }
                this.state = 2293;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueIdentifier(): ValueIdentifierContext {
        let localContext = new ValueIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 248, ClickHouseParser.RULE_valueIdentifier);
        let _la: number;
        try {
            this.state = 2308;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 296, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2294;
                this.literal();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2295;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2296;
                this.numberLiteral();
                this.state = 2297;
                this.match(ClickHouseParser.COMMA);
                this.state = 2298;
                this.numberLiteral();
                this.state = 2299;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2301;
                this.identifier();
                this.state = 2302;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2304;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82 || _la === 113 || _la === 116 || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 33566751) !== 0)) {
                    {
                    this.state = 2303;
                    this.literalList();
                    }
                }

                this.state = 2306;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueOrArrayIdentifier(): ValueOrArrayIdentifierContext {
        let localContext = new ValueOrArrayIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 250, ClickHouseParser.RULE_valueOrArrayIdentifier);
        try {
            this.state = 2312;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULL_SQL:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.KEYED:
            case ClickHouseParser.RANDOMIZED:
            case ClickHouseParser.USER_NAME:
            case ClickHouseParser.IP_ADDRESS:
            case ClickHouseParser.FORWARDED_IP_ADDRESS:
            case ClickHouseParser.CLIENT_KEY:
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
            case ClickHouseParser.QUERIES:
            case ClickHouseParser.QUERY_SELECTS:
            case ClickHouseParser.QUERY_INSERTS:
            case ClickHouseParser.ERRORS:
            case ClickHouseParser.RESULT_ROWS:
            case ClickHouseParser.RESULT_BYTES:
            case ClickHouseParser.READ_ROWS:
            case ClickHouseParser.READ_BYTES:
            case ClickHouseParser.EXECUTION_TIME:
            case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
            case ClickHouseParser.LIMITS:
            case ClickHouseParser.TRACKING:
            case ClickHouseParser.ONLY:
            case ClickHouseParser.CONST:
            case ClickHouseParser.CHANGEABLE_IN_READONLY:
            case ClickHouseParser.OVERRIDABLE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.STRING_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.LPAREN:
            case ClickHouseParser.PLUS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2310;
                this.valueIdentifier();
                }
                break;
            case ClickHouseParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2311;
                this.arrayIdentifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arrayIdentifier(): ArrayIdentifierContext {
        let localContext = new ArrayIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 252, ClickHouseParser.RULE_arrayIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2314;
            this.match(ClickHouseParser.LBRACKET);
            this.state = 2323;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 36188191) !== 0)) {
                {
                this.state = 2315;
                this.valueOrArrayIdentifier();
                this.state = 2320;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 394) {
                    {
                    {
                    this.state = 2316;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2317;
                    this.valueOrArrayIdentifier();
                    }
                    }
                    this.state = 2322;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2325;
            this.match(ClickHouseParser.RBRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesClause(): ValuesClauseContext {
        let localContext = new ValuesClauseContext(this.context, this.state);
        this.enterRule(localContext, 254, ClickHouseParser.RULE_valuesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2327;
            this.match(ClickHouseParser.LPAREN);
            {
            this.state = 2328;
            this.valueOrArrayIdentifier();
            this.state = 2333;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 2329;
                this.match(ClickHouseParser.COMMA);
                this.state = 2330;
                this.valueOrArrayIdentifier();
                }
                }
                this.state = 2335;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 2336;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesStatement(): ValuesStatementContext {
        let localContext = new ValuesStatementContext(this.context, this.state);
        this.enterRule(localContext, 256, ClickHouseParser.RULE_valuesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2338;
            this.match(ClickHouseParser.VALUES);
            this.state = 2339;
            this.valuesClause();
            this.state = 2346;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394 || _la === 405) {
                {
                {
                this.state = 2341;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 394) {
                    {
                    this.state = 2340;
                    this.match(ClickHouseParser.COMMA);
                    }
                }

                this.state = 2343;
                this.valuesClause();
                }
                }
                this.state = 2348;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public killStatement(): KillStatementContext {
        let localContext = new KillStatementContext(this.context, this.state);
        this.enterRule(localContext, 258, ClickHouseParser.RULE_killStatement);
        let _la: number;
        try {
            localContext = new KillMutationStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2349;
            this.match(ClickHouseParser.KILL);
            this.state = 2350;
            this.match(ClickHouseParser.MUTATION);
            this.state = 2352;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 2351;
                this.clusterClause();
                }
            }

            this.state = 2354;
            this.whereClause();
            this.state = 2356;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14 || _la === 159 || _la === 165) {
                {
                this.state = 2355;
                _la = this.tokenStream.LA(1);
                if(!(_la === 14 || _la === 159 || _la === 165)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optimizeStatement(): OptimizeStatementContext {
        let localContext = new OptimizeStatementContext(this.context, this.state);
        this.enterRule(localContext, 260, ClickHouseParser.RULE_optimizeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2358;
            this.match(ClickHouseParser.OPTIMIZE);
            this.state = 2359;
            this.match(ClickHouseParser.TABLE);
            this.state = 2360;
            this.tableIdentifier();
            this.state = 2362;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 2361;
                this.clusterClause();
                }
            }

            this.state = 2365;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 126) {
                {
                this.state = 2364;
                this.partitionClause();
                }
            }

            this.state = 2368;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 2367;
                this.match(ClickHouseParser.FINAL);
                }
            }

            this.state = 2371;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 37) {
                {
                this.state = 2370;
                this.match(ClickHouseParser.DEDUPLICATE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameStatement(): RenameStatementContext {
        let localContext = new RenameStatementContext(this.context, this.state);
        this.enterRule(localContext, 262, ClickHouseParser.RULE_renameStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2373;
            this.match(ClickHouseParser.RENAME);
            this.state = 2374;
            this.match(ClickHouseParser.TABLE);
            this.state = 2375;
            this.tableIdentifier();
            this.state = 2376;
            this.match(ClickHouseParser.TO);
            this.state = 2377;
            this.tableIdentifier();
            this.state = 2385;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 2378;
                this.match(ClickHouseParser.COMMA);
                this.state = 2379;
                this.tableIdentifier();
                this.state = 2380;
                this.match(ClickHouseParser.TO);
                this.state = 2381;
                this.tableIdentifier();
                }
                }
                this.state = 2387;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2389;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 2388;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public projectionSelectStatement(): ProjectionSelectStatementContext {
        let localContext = new ProjectionSelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 264, ClickHouseParser.RULE_projectionSelectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2391;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2393;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 2392;
                this.withClause();
                }
            }

            this.state = 2395;
            this.match(ClickHouseParser.SELECT);
            this.state = 2396;
            this.columnExpressionList();
            this.state = 2398;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 73) {
                {
                this.state = 2397;
                this.groupByClause();
                }
            }

            this.state = 2401;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 2400;
                this.projectionOrderByClause();
                }
            }

            this.state = 2403;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        let localContext = new SelectUnionStatementContext(this.context, this.state);
        this.enterRule(localContext, 266, ClickHouseParser.RULE_selectUnionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2405;
            this.selectStatementWithParentheses();
            this.state = 2411;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 180) {
                {
                {
                this.state = 2406;
                this.match(ClickHouseParser.UNION);
                this.state = 2407;
                this.match(ClickHouseParser.ALL);
                this.state = 2408;
                this.selectStatementWithParentheses();
                }
                }
                this.state = 2413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatementWithParentheses(): SelectStatementWithParenthesesContext {
        let localContext = new SelectStatementWithParenthesesContext(this.context, this.state);
        this.enterRule(localContext, 268, ClickHouseParser.RULE_selectStatementWithParentheses);
        try {
            this.state = 2419;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.SELECT:
            case ClickHouseParser.WITH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2414;
                this.selectStatement();
                }
                break;
            case ClickHouseParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2415;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2416;
                this.selectUnionStatement();
                this.state = 2417;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatement(): SelectStatementContext {
        let localContext = new SelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 270, ClickHouseParser.RULE_selectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2422;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 2421;
                this.withClause();
                }
            }

            this.state = 2424;
            this.match(ClickHouseParser.SELECT);
            this.state = 2426;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 317, this.context) ) {
            case 1:
                {
                this.state = 2425;
                this.match(ClickHouseParser.DISTINCT);
                }
                break;
            }
            this.state = 2429;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
            case 1:
                {
                this.state = 2428;
                this.topClause();
                }
                break;
            }
            this.state = 2431;
            this.columnExpressionList();
            this.state = 2433;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 68) {
                {
                this.state = 2432;
                this.fromClause();
                }
            }

            this.state = 2436;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 9 || _la === 84 || _la === 96) {
                {
                this.state = 2435;
                this.arrayJoinClause();
                }
            }

            this.state = 2439;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 192) {
                {
                this.state = 2438;
                this.windowClause();
                }
            }

            this.state = 2442;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 131) {
                {
                this.state = 2441;
                this.prewhereClause();
                }
            }

            this.state = 2445;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 191) {
                {
                this.state = 2444;
                this.whereClause();
                }
            }

            this.state = 2448;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 73) {
                {
                this.state = 2447;
                this.groupByClause();
                }
            }

            this.state = 2452;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 325, this.context) ) {
            case 1:
                {
                this.state = 2450;
                this.match(ClickHouseParser.WITH);
                this.state = 2451;
                _la = this.tokenStream.LA(1);
                if(!(_la === 31 || _la === 144)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 2456;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 2454;
                this.match(ClickHouseParser.WITH);
                this.state = 2455;
                this.match(ClickHouseParser.TOTALS);
                }
            }

            this.state = 2459;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 2458;
                this.havingClause();
                }
            }

            this.state = 2462;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 2461;
                this.orderByClause();
                }
            }

            this.state = 2465;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
            case 1:
                {
                this.state = 2464;
                this.limitByClause();
                }
                break;
            }
            this.state = 2468;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99) {
                {
                this.state = 2467;
                this.limitClause();
                }
            }

            this.state = 2471;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 2470;
                this.settingsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withClause(): WithClauseContext {
        let localContext = new WithClauseContext(this.context, this.state);
        this.enterRule(localContext, 272, ClickHouseParser.RULE_withClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2473;
            this.match(ClickHouseParser.WITH);
            this.state = 2474;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topClause(): TopClauseContext {
        let localContext = new TopClauseContext(this.context, this.state);
        this.enterRule(localContext, 274, ClickHouseParser.RULE_topClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2476;
            this.match(ClickHouseParser.TOP);
            this.state = 2477;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            this.state = 2480;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 332, this.context) ) {
            case 1:
                {
                this.state = 2478;
                this.match(ClickHouseParser.WITH);
                this.state = 2479;
                this.match(ClickHouseParser.TIES);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 276, ClickHouseParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2482;
            this.match(ClickHouseParser.FROM);
            this.state = 2483;
            this.joinExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arrayJoinClause(): ArrayJoinClauseContext {
        let localContext = new ArrayJoinClauseContext(this.context, this.state);
        this.enterRule(localContext, 278, ClickHouseParser.RULE_arrayJoinClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2486;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 84 || _la === 96) {
                {
                this.state = 2485;
                _la = this.tokenStream.LA(1);
                if(!(_la === 84 || _la === 96)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2488;
            this.match(ClickHouseParser.ARRAY);
            this.state = 2489;
            this.match(ClickHouseParser.JOIN);
            this.state = 2490;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 280, ClickHouseParser.RULE_windowClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2492;
            this.match(ClickHouseParser.WINDOW);
            this.state = 2493;
            this.identifier();
            this.state = 2494;
            this.match(ClickHouseParser.AS);
            this.state = 2495;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2496;
            this.windowExpression();
            this.state = 2497;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prewhereClause(): PrewhereClauseContext {
        let localContext = new PrewhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 282, ClickHouseParser.RULE_prewhereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2499;
            this.match(ClickHouseParser.PREWHERE);
            this.state = 2500;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 284, ClickHouseParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2502;
            this.match(ClickHouseParser.WHERE);
            this.state = 2503;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 286, ClickHouseParser.RULE_groupByClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2505;
            this.match(ClickHouseParser.GROUP);
            this.state = 2506;
            this.match(ClickHouseParser.BY);
            this.state = 2513;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 334, this.context) ) {
            case 1:
                {
                this.state = 2507;
                _la = this.tokenStream.LA(1);
                if(!(_la === 31 || _la === 144)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2508;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2509;
                this.columnExpressionList();
                this.state = 2510;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 2:
                {
                this.state = 2512;
                this.columnExpressionList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 288, ClickHouseParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2515;
            this.match(ClickHouseParser.HAVING);
            this.state = 2516;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByClause(): OrderByClauseContext {
        let localContext = new OrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 290, ClickHouseParser.RULE_orderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2518;
            this.match(ClickHouseParser.ORDER);
            this.state = 2519;
            this.match(ClickHouseParser.BY);
            this.state = 2520;
            this.orderExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public projectionOrderByClause(): ProjectionOrderByClauseContext {
        let localContext = new ProjectionOrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 292, ClickHouseParser.RULE_projectionOrderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2522;
            this.match(ClickHouseParser.ORDER);
            this.state = 2523;
            this.match(ClickHouseParser.BY);
            this.state = 2524;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitByClause(): LimitByClauseContext {
        let localContext = new LimitByClauseContext(this.context, this.state);
        this.enterRule(localContext, 294, ClickHouseParser.RULE_limitByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2526;
            this.match(ClickHouseParser.LIMIT);
            this.state = 2527;
            this.limitExpression();
            this.state = 2528;
            this.match(ClickHouseParser.BY);
            this.state = 2529;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 296, ClickHouseParser.RULE_limitClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2531;
            this.match(ClickHouseParser.LIMIT);
            this.state = 2532;
            this.limitExpression();
            this.state = 2535;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 2533;
                this.match(ClickHouseParser.WITH);
                this.state = 2534;
                this.match(ClickHouseParser.TIES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingsClause(): SettingsClauseContext {
        let localContext = new SettingsClauseContext(this.context, this.state);
        this.enterRule(localContext, 298, ClickHouseParser.RULE_settingsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2537;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 2538;
            this.settingExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public joinExpression(): JoinExpressionContext;
    public joinExpression(_p: number): JoinExpressionContext;
    public joinExpression(_p?: number): JoinExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new JoinExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 300;
        this.enterRecursionRule(localContext, 300, ClickHouseParser.RULE_joinExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2552;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 338, this.context) ) {
            case 1:
                {
                localContext = new JoinExpressionTableContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2541;
                this.tableExpression(0);
                this.state = 2543;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 336, this.context) ) {
                case 1:
                    {
                    this.state = 2542;
                    this.match(ClickHouseParser.FINAL);
                    }
                    break;
                }
                this.state = 2546;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 337, this.context) ) {
                case 1:
                    {
                    this.state = 2545;
                    this.sampleClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                localContext = new JoinExpressionParensContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2548;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2549;
                this.joinExpression(0);
                this.state = 2550;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2571;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 342, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2569;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 341, this.context) ) {
                    case 1:
                        {
                        localContext = new JoinExpressionCrossOpContext(new JoinExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_joinExpression);
                        this.state = 2554;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 2555;
                        this.joinOperatorCross();
                        this.state = 2556;
                        this.joinExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new JoinExpressionOpContext(new JoinExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_joinExpression);
                        this.state = 2558;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 2560;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 71 || _la === 101) {
                            {
                            this.state = 2559;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 71 || _la === 101)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                        }

                        this.state = 2563;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & 134250497) !== 0) || _la === 143 || _la === 150) {
                            {
                            this.state = 2562;
                            this.joinOperator();
                            }
                        }

                        this.state = 2565;
                        this.match(ClickHouseParser.JOIN);
                        this.state = 2566;
                        this.joinExpression(0);
                        this.state = 2567;
                        this.joinConstraintClause();
                        }
                        break;
                    }
                    }
                }
                this.state = 2573;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 342, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public joinOperator(): JoinOperatorContext {
        let localContext = new JoinOperatorContext(this.context, this.state);
        this.enterRule(localContext, 302, ClickHouseParser.RULE_joinOperator);
        let _la: number;
        try {
            this.state = 2617;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 356, this.context) ) {
            case 1:
                localContext = new JoinOpInnerContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2583;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 345, this.context) ) {
                case 1:
                    {
                    this.state = 2575;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0)) {
                        {
                        this.state = 2574;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 2577;
                    this.match(ClickHouseParser.INNER);
                    }
                    break;
                case 2:
                    {
                    this.state = 2578;
                    this.match(ClickHouseParser.INNER);
                    this.state = 2580;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0)) {
                        {
                        this.state = 2579;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.state = 2582;
                    _la = this.tokenStream.LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new JoinOpLeftRightContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2599;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 350, this.context) ) {
                case 1:
                    {
                    this.state = 2586;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150) {
                        {
                        this.state = 2585;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 2588;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 96 || _la === 143)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2590;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 2589;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 2592;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 96 || _la === 143)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2594;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 2593;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    this.state = 2597;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150) {
                        {
                        this.state = 2596;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new JoinOpFullContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2615;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 355, this.context) ) {
                case 1:
                    {
                    this.state = 2602;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 4 || _la === 8) {
                        {
                        this.state = 2601;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 4 || _la === 8)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 2604;
                    this.match(ClickHouseParser.FULL);
                    this.state = 2606;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 2605;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 2608;
                    this.match(ClickHouseParser.FULL);
                    this.state = 2610;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 2609;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    this.state = 2613;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 4 || _la === 8) {
                        {
                        this.state = 2612;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 4 || _la === 8)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinOperatorCross(): JoinOperatorCrossContext {
        let localContext = new JoinOperatorCrossContext(this.context, this.state);
        this.enterRule(localContext, 304, ClickHouseParser.RULE_joinOperatorCross);
        let _la: number;
        try {
            this.state = 2625;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.CROSS:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2620;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71 || _la === 101) {
                    {
                    this.state = 2619;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 71 || _la === 101)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2622;
                this.match(ClickHouseParser.CROSS);
                this.state = 2623;
                this.match(ClickHouseParser.JOIN);
                }
                break;
            case ClickHouseParser.COMMA:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2624;
                this.match(ClickHouseParser.COMMA);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinConstraintClause(): JoinConstraintClauseContext {
        let localContext = new JoinConstraintClauseContext(this.context, this.state);
        this.enterRule(localContext, 306, ClickHouseParser.RULE_joinConstraintClause);
        try {
            this.state = 2636;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 359, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2627;
                this.match(ClickHouseParser.ON);
                this.state = 2628;
                this.columnExpressionList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2629;
                this.match(ClickHouseParser.USING);
                this.state = 2630;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2631;
                this.columnExpressionList();
                this.state = 2632;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2634;
                this.match(ClickHouseParser.USING);
                this.state = 2635;
                this.columnExpressionList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleClause(): SampleClauseContext {
        let localContext = new SampleClauseContext(this.context, this.state);
        this.enterRule(localContext, 308, ClickHouseParser.RULE_sampleClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2638;
            this.match(ClickHouseParser.SAMPLE);
            this.state = 2639;
            this.ratioExpression();
            this.state = 2642;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 360, this.context) ) {
            case 1:
                {
                this.state = 2640;
                this.match(ClickHouseParser.OFFSET);
                this.state = 2641;
                this.ratioExpression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitExpression(): LimitExpressionContext {
        let localContext = new LimitExpressionContext(this.context, this.state);
        this.enterRule(localContext, 310, ClickHouseParser.RULE_limitExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2644;
            this.columnExpression(0);
            this.state = 2647;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118 || _la === 394) {
                {
                this.state = 2645;
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 394)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2646;
                this.columnExpression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderExpressionList(): OrderExpressionListContext {
        let localContext = new OrderExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 312, ClickHouseParser.RULE_orderExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2649;
            this.orderExpression();
            this.state = 2654;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 362, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2650;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2651;
                    this.orderExpression();
                    }
                    }
                }
                this.state = 2656;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 362, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderExpression(): OrderExpressionContext {
        let localContext = new OrderExpressionContext(this.context, this.state);
        this.enterRule(localContext, 314, ClickHouseParser.RULE_orderExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2657;
            this.columnExpression(0);
            this.state = 2659;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 363, this.context) ) {
            case 1:
                {
                this.state = 2658;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 11)) & ~0x1F) === 0 && ((1 << (_la - 11)) & 3221225473) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 2663;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 364, this.context) ) {
            case 1:
                {
                this.state = 2661;
                this.match(ClickHouseParser.NULLS);
                this.state = 2662;
                _la = this.tokenStream.LA(1);
                if(!(_la === 62 || _la === 93)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 2667;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 365, this.context) ) {
            case 1:
                {
                this.state = 2665;
                this.match(ClickHouseParser.COLLATE);
                this.state = 2666;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ratioExpression(): RatioExpressionContext {
        let localContext = new RatioExpressionContext(this.context, this.state);
        this.enterRule(localContext, 316, ClickHouseParser.RULE_ratioExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2669;
            this.numberLiteral();
            this.state = 2672;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 366, this.context) ) {
            case 1:
                {
                this.state = 2670;
                this.match(ClickHouseParser.SLASH);
                this.state = 2671;
                this.numberLiteral();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingExpressionList(): SettingExpressionListContext {
        let localContext = new SettingExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 318, ClickHouseParser.RULE_settingExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2674;
            this.settingExpression();
            this.state = 2679;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 367, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2675;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2676;
                    this.settingExpression();
                    }
                    }
                }
                this.state = 2681;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 367, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingExpression(): SettingExpressionContext {
        let localContext = new SettingExpressionContext(this.context, this.state);
        this.enterRule(localContext, 320, ClickHouseParser.RULE_settingExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2682;
            this.identifier();
            this.state = 2683;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 2684;
            this.literal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowExpression(): WindowExpressionContext {
        let localContext = new WindowExpressionContext(this.context, this.state);
        this.enterRule(localContext, 322, ClickHouseParser.RULE_windowExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2687;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 126) {
                {
                this.state = 2686;
                this.windowPartitionByClause();
                }
            }

            this.state = 2690;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 2689;
                this.windowOrderByClause();
                }
            }

            this.state = 2693;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 136 || _la === 146) {
                {
                this.state = 2692;
                this.windowFrameClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowPartitionByClause(): WindowPartitionByClauseContext {
        let localContext = new WindowPartitionByClauseContext(this.context, this.state);
        this.enterRule(localContext, 324, ClickHouseParser.RULE_windowPartitionByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2695;
            this.match(ClickHouseParser.PARTITION);
            this.state = 2696;
            this.match(ClickHouseParser.BY);
            this.state = 2697;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowOrderByClause(): WindowOrderByClauseContext {
        let localContext = new WindowOrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 326, ClickHouseParser.RULE_windowOrderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2699;
            this.match(ClickHouseParser.ORDER);
            this.state = 2700;
            this.match(ClickHouseParser.BY);
            this.state = 2701;
            this.orderExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameClause(): WindowFrameClauseContext {
        let localContext = new WindowFrameClauseContext(this.context, this.state);
        this.enterRule(localContext, 328, ClickHouseParser.RULE_windowFrameClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2703;
            _la = this.tokenStream.LA(1);
            if(!(_la === 136 || _la === 146)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2704;
            this.windowFrameExtend();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameExtend(): WindowFrameExtendContext {
        let localContext = new WindowFrameExtendContext(this.context, this.state);
        this.enterRule(localContext, 330, ClickHouseParser.RULE_windowFrameExtend);
        try {
            this.state = 2712;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.INF:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.PLUS:
                localContext = new FrameStartContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2706;
                this.windowFrameBound();
                }
                break;
            case ClickHouseParser.BETWEEN:
                localContext = new FrameBetweenContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2707;
                this.match(ClickHouseParser.BETWEEN);
                this.state = 2708;
                this.windowFrameBound();
                this.state = 2709;
                this.match(ClickHouseParser.AND);
                this.state = 2710;
                this.windowFrameBound();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameBound(): WindowFrameBoundContext {
        let localContext = new WindowFrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 332, ClickHouseParser.RULE_windowFrameBound);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2726;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 372, this.context) ) {
            case 1:
                {
                this.state = 2714;
                this.match(ClickHouseParser.CURRENT);
                this.state = 2715;
                this.match(ClickHouseParser.ROW);
                }
                break;
            case 2:
                {
                this.state = 2716;
                this.match(ClickHouseParser.UNBOUNDED);
                this.state = 2717;
                this.match(ClickHouseParser.PRECEDING);
                }
                break;
            case 3:
                {
                this.state = 2718;
                this.match(ClickHouseParser.UNBOUNDED);
                this.state = 2719;
                this.match(ClickHouseParser.FOLLOWING);
                }
                break;
            case 4:
                {
                this.state = 2720;
                this.numberLiteral();
                this.state = 2721;
                this.match(ClickHouseParser.PRECEDING);
                }
                break;
            case 5:
                {
                this.state = 2723;
                this.numberLiteral();
                this.state = 2724;
                this.match(ClickHouseParser.FOLLOWING);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setStatement(): SetStatementContext {
        let localContext = new SetStatementContext(this.context, this.state);
        this.enterRule(localContext, 334, ClickHouseParser.RULE_setStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2728;
            this.match(ClickHouseParser.SET);
            this.state = 2729;
            this.settingExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStatement(): ShowStatementContext {
        let localContext = new ShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 336, ClickHouseParser.RULE_showStatement);
        let _la: number;
        try {
            this.state = 2773;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
            case 1:
                localContext = new ShowCreateDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2731;
                this.match(ClickHouseParser.SHOW);
                this.state = 2732;
                this.match(ClickHouseParser.CREATE);
                this.state = 2733;
                this.match(ClickHouseParser.DATABASE);
                this.state = 2734;
                this.databaseIdentifier();
                }
                break;
            case 2:
                localContext = new ShowCreateDictionaryStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2735;
                this.match(ClickHouseParser.SHOW);
                this.state = 2736;
                this.match(ClickHouseParser.CREATE);
                this.state = 2737;
                this.match(ClickHouseParser.DICTIONARY);
                this.state = 2738;
                this.tableIdentifier();
                }
                break;
            case 3:
                localContext = new ShowCreateTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2739;
                this.match(ClickHouseParser.SHOW);
                this.state = 2740;
                this.match(ClickHouseParser.CREATE);
                this.state = 2742;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 373, this.context) ) {
                case 1:
                    {
                    this.state = 2741;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                }
                this.state = 2745;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 374, this.context) ) {
                case 1:
                    {
                    this.state = 2744;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                }
                this.state = 2747;
                this.tableIdentifier();
                }
                break;
            case 4:
                localContext = new ShowDatabasesStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2748;
                this.match(ClickHouseParser.SHOW);
                this.state = 2749;
                this.match(ClickHouseParser.DATABASES);
                }
                break;
            case 5:
                localContext = new ShowDictionariesStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2750;
                this.match(ClickHouseParser.SHOW);
                this.state = 2751;
                this.match(ClickHouseParser.DICTIONARIES);
                this.state = 2754;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68) {
                    {
                    this.state = 2752;
                    this.match(ClickHouseParser.FROM);
                    this.state = 2753;
                    this.databaseIdentifier();
                    }
                }

                }
                break;
            case 6:
                localContext = new ShowTablesStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2756;
                this.match(ClickHouseParser.SHOW);
                this.state = 2758;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 164) {
                    {
                    this.state = 2757;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                }

                this.state = 2760;
                this.match(ClickHouseParser.TABLES);
                this.state = 2763;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68 || _la === 80) {
                    {
                    this.state = 2761;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 68 || _la === 80)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2762;
                    this.databaseIdentifier();
                    }
                }

                this.state = 2768;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.LIKE:
                    {
                    this.state = 2765;
                    this.match(ClickHouseParser.LIKE);
                    this.state = 2766;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case ClickHouseParser.WHERE:
                    {
                    this.state = 2767;
                    this.whereClause();
                    }
                    break;
                case ClickHouseParser.EOF:
                case ClickHouseParser.FORMAT:
                case ClickHouseParser.INTO:
                case ClickHouseParser.LIMIT:
                case ClickHouseParser.RPAREN:
                case ClickHouseParser.SEMICOLON:
                    break;
                default:
                    break;
                }
                this.state = 2771;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99) {
                    {
                    this.state = 2770;
                    this.limitClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public systemStatement(): SystemStatementContext {
        let localContext = new SystemStatementContext(this.context, this.state);
        this.enterRule(localContext, 338, ClickHouseParser.RULE_systemStatement);
        let _la: number;
        try {
            this.state = 2809;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2775;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2776;
                this.match(ClickHouseParser.FLUSH);
                this.state = 2777;
                this.match(ClickHouseParser.DISTRIBUTED);
                this.state = 2778;
                this.tableIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2779;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2780;
                this.match(ClickHouseParser.FLUSH);
                this.state = 2781;
                this.match(ClickHouseParser.LOGS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2782;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2783;
                this.match(ClickHouseParser.RELOAD);
                this.state = 2784;
                this.match(ClickHouseParser.DICTIONARIES);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2785;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2786;
                this.match(ClickHouseParser.RELOAD);
                this.state = 2787;
                this.match(ClickHouseParser.DICTIONARY);
                this.state = 2788;
                this.tableIdentifier();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2789;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2790;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2798;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.DISTRIBUTED:
                    {
                    this.state = 2791;
                    this.match(ClickHouseParser.DISTRIBUTED);
                    this.state = 2792;
                    this.match(ClickHouseParser.SENDS);
                    }
                    break;
                case ClickHouseParser.FETCHES:
                    {
                    this.state = 2793;
                    this.match(ClickHouseParser.FETCHES);
                    }
                    break;
                case ClickHouseParser.MERGES:
                case ClickHouseParser.TTL:
                    {
                    this.state = 2795;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 177) {
                        {
                        this.state = 2794;
                        this.match(ClickHouseParser.TTL);
                        }
                    }

                    this.state = 2797;
                    this.match(ClickHouseParser.MERGES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2800;
                this.tableIdentifier();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2801;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2802;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2803;
                this.match(ClickHouseParser.REPLICATED);
                this.state = 2804;
                this.match(ClickHouseParser.SENDS);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2805;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2806;
                this.match(ClickHouseParser.SYNC);
                this.state = 2807;
                this.match(ClickHouseParser.REPLICA);
                this.state = 2808;
                this.tableIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateStatement(): TruncateStatementContext {
        let localContext = new TruncateStatementContext(this.context, this.state);
        this.enterRule(localContext, 340, ClickHouseParser.RULE_truncateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2811;
            this.match(ClickHouseParser.TRUNCATE);
            this.state = 2813;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 384, this.context) ) {
            case 1:
                {
                this.state = 2812;
                this.match(ClickHouseParser.TEMPORARY);
                }
                break;
            }
            this.state = 2816;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 385, this.context) ) {
            case 1:
                {
                this.state = 2815;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 2820;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 386, this.context) ) {
            case 1:
                {
                this.state = 2818;
                this.match(ClickHouseParser.IF);
                this.state = 2819;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 2822;
            this.tableIdentifier();
            this.state = 2824;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 2823;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public useStatement(): UseStatementContext {
        let localContext = new UseStatementContext(this.context, this.state);
        this.enterRule(localContext, 342, ClickHouseParser.RULE_useStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2826;
            this.match(ClickHouseParser.USE);
            this.state = 2827;
            this.databaseIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public watchStatement(): WatchStatementContext {
        let localContext = new WatchStatementContext(this.context, this.state);
        this.enterRule(localContext, 344, ClickHouseParser.RULE_watchStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2829;
            this.match(ClickHouseParser.WATCH);
            this.state = 2830;
            this.tableIdentifier();
            this.state = 2832;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2831;
                this.match(ClickHouseParser.EVENTS);
                }
            }

            this.state = 2836;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99) {
                {
                this.state = 2834;
                this.match(ClickHouseParser.LIMIT);
                this.state = 2835;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        let localContext = new ColumnTypeExpressionContext(this.context, this.state);
        this.enterRule(localContext, 346, ClickHouseParser.RULE_columnTypeExpression);
        let _la: number;
        try {
            this.state = 2885;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 394, this.context) ) {
            case 1:
                localContext = new ColumnTypeExpressionSimpleContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2838;
                this.identifier();
                }
                break;
            case 2:
                localContext = new ColumnTypeExpressionNestedContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2839;
                this.identifier();
                this.state = 2840;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2841;
                this.identifier();
                this.state = 2842;
                this.columnTypeExpression();
                this.state = 2849;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 394) {
                    {
                    {
                    this.state = 2843;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2844;
                    this.identifier();
                    this.state = 2845;
                    this.columnTypeExpression();
                    }
                    }
                    this.state = 2851;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2852;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                localContext = new ColumnTypeExpressionEnumContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2854;
                this.identifier();
                this.state = 2855;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2856;
                this.enumValue();
                this.state = 2861;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 394) {
                    {
                    {
                    this.state = 2857;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2858;
                    this.enumValue();
                    }
                    }
                    this.state = 2863;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2864;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 4:
                localContext = new ColumnTypeExpressionComplexContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2866;
                this.identifier();
                this.state = 2867;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2868;
                this.columnTypeExpression();
                this.state = 2873;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 394) {
                    {
                    {
                    this.state = 2869;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2870;
                    this.columnTypeExpression();
                    }
                    }
                    this.state = 2875;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2876;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 5:
                localContext = new ColumnTypeExpressionParamContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2878;
                this.identifier();
                this.state = 2879;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2881;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 36188255) !== 0)) {
                    {
                    this.state = 2880;
                    this.columnExpressionList();
                    }
                }

                this.state = 2883;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        let localContext = new ColumnExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 348, ClickHouseParser.RULE_columnExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2887;
            this.columnsExpression();
            this.state = 2892;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 395, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2888;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2889;
                    this.columnsExpression();
                    }
                    }
                }
                this.state = 2894;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 395, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsExpression(): ColumnsExpressionContext {
        let localContext = new ColumnsExpressionContext(this.context, this.state);
        this.enterRule(localContext, 350, ClickHouseParser.RULE_columnsExpression);
        let _la: number;
        try {
            this.state = 2906;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 397, this.context) ) {
            case 1:
                localContext = new ColumnsExpressionAsteriskContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2898;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0)) {
                    {
                    this.state = 2895;
                    this.tableIdentifier();
                    this.state = 2896;
                    this.match(ClickHouseParser.DOT);
                    }
                }

                this.state = 2900;
                this.match(ClickHouseParser.ASTERISK);
                }
                break;
            case 2:
                localContext = new ColumnsExpressionSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2901;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2902;
                this.selectUnionStatement();
                this.state = 2903;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                localContext = new ColumnsExpressionColumnContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2905;
                this.columnExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public columnExpression(): ColumnExpressionContext;
    public columnExpression(_p: number): ColumnExpressionContext;
    public columnExpression(_p?: number): ColumnExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ColumnExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 352;
        this.enterRecursionRule(localContext, 352, ClickHouseParser.RULE_columnExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3037;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 410, this.context) ) {
            case 1:
                {
                localContext = new ColumnExpressionCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2909;
                this.match(ClickHouseParser.CASE);
                this.state = 2911;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 398, this.context) ) {
                case 1:
                    {
                    this.state = 2910;
                    this.columnExpression(0);
                    }
                    break;
                }
                this.state = 2918;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2913;
                    this.match(ClickHouseParser.WHEN);
                    this.state = 2914;
                    this.columnExpression(0);
                    this.state = 2915;
                    this.match(ClickHouseParser.THEN);
                    this.state = 2916;
                    this.columnExpression(0);
                    }
                    }
                    this.state = 2920;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 190);
                this.state = 2924;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 51) {
                    {
                    this.state = 2922;
                    this.match(ClickHouseParser.ELSE);
                    this.state = 2923;
                    this.columnExpression(0);
                    }
                }

                this.state = 2926;
                this.match(ClickHouseParser.END);
                }
                break;
            case 2:
                {
                localContext = new ColumnExpressionCastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2928;
                this.match(ClickHouseParser.CAST);
                this.state = 2929;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2930;
                this.columnExpression(0);
                this.state = 2931;
                this.match(ClickHouseParser.AS);
                this.state = 2932;
                this.columnTypeExpression();
                this.state = 2933;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                {
                localContext = new ColumnExpressionDateContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2935;
                this.match(ClickHouseParser.DATE);
                this.state = 2936;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 4:
                {
                localContext = new ColumnExpressionExtractContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2937;
                this.match(ClickHouseParser.EXTRACT);
                this.state = 2938;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2939;
                this.interval();
                this.state = 2940;
                this.match(ClickHouseParser.FROM);
                this.state = 2941;
                this.columnExpression(0);
                this.state = 2942;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 5:
                {
                localContext = new ColumnExpressionIntervalContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2944;
                this.match(ClickHouseParser.INTERVAL);
                this.state = 2945;
                this.columnExpression(0);
                this.state = 2946;
                this.interval();
                }
                break;
            case 6:
                {
                localContext = new ColumnExpressionSubstringContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2948;
                this.match(ClickHouseParser.SUBSTRING);
                this.state = 2949;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2950;
                this.columnExpression(0);
                this.state = 2951;
                this.match(ClickHouseParser.FROM);
                this.state = 2952;
                this.columnExpression(0);
                this.state = 2955;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 2953;
                    this.match(ClickHouseParser.FOR);
                    this.state = 2954;
                    this.columnExpression(0);
                    }
                }

                this.state = 2957;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 7:
                {
                localContext = new ColumnExpressionTimestampContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2959;
                this.match(ClickHouseParser.TIMESTAMP);
                this.state = 2960;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 8:
                {
                localContext = new ColumnExpressionTrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2961;
                this.match(ClickHouseParser.TRIM);
                this.state = 2962;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2963;
                _la = this.tokenStream.LA(1);
                if(!(_la === 17 || _la === 95 || _la === 173)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2964;
                this.match(ClickHouseParser.STRING_LITERAL);
                this.state = 2965;
                this.match(ClickHouseParser.FROM);
                this.state = 2966;
                this.columnExpression(0);
                this.state = 2967;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 9:
                {
                localContext = new ColumnExpressionWinFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2969;
                this.identifier();
                {
                this.state = 2970;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2972;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 36188255) !== 0)) {
                    {
                    this.state = 2971;
                    this.columnExpressionList();
                    }
                }

                this.state = 2974;
                this.match(ClickHouseParser.RPAREN);
                }
                this.state = 2976;
                this.match(ClickHouseParser.OVER);
                this.state = 2977;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2978;
                this.windowExpression();
                this.state = 2979;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 10:
                {
                localContext = new ColumnExpressionWinFunctionTargetContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2981;
                this.identifier();
                {
                this.state = 2982;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2984;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 36188255) !== 0)) {
                    {
                    this.state = 2983;
                    this.columnExpressionList();
                    }
                }

                this.state = 2986;
                this.match(ClickHouseParser.RPAREN);
                }
                this.state = 2988;
                this.match(ClickHouseParser.OVER);
                this.state = 2989;
                this.identifier();
                }
                break;
            case 11:
                {
                localContext = new ColumnExpressionFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2991;
                this.identifier();
                this.state = 2997;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 405, this.context) ) {
                case 1:
                    {
                    this.state = 2992;
                    this.match(ClickHouseParser.LPAREN);
                    this.state = 2994;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 36188255) !== 0)) {
                        {
                        this.state = 2993;
                        this.columnExpressionList();
                        }
                    }

                    this.state = 2996;
                    this.match(ClickHouseParser.RPAREN);
                    }
                    break;
                }
                this.state = 2999;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3001;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
                case 1:
                    {
                    this.state = 3000;
                    this.match(ClickHouseParser.DISTINCT);
                    }
                    break;
                }
                this.state = 3004;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 36188255) !== 0)) {
                    {
                    this.state = 3003;
                    this.columnArgumentList();
                    }
                }

                this.state = 3006;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 12:
                {
                localContext = new ColumnExpressionLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3008;
                this.literal();
                }
                break;
            case 13:
                {
                localContext = new ColumnExpressionNegateContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3009;
                this.match(ClickHouseParser.DASH);
                this.state = 3010;
                this.columnExpression(17);
                }
                break;
            case 14:
                {
                localContext = new ColumnExpressionNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3011;
                this.match(ClickHouseParser.NOT);
                this.state = 3012;
                this.columnExpression(12);
                }
                break;
            case 15:
                {
                localContext = new ColumnExpressionAsteriskContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3016;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0)) {
                    {
                    this.state = 3013;
                    this.tableIdentifier();
                    this.state = 3014;
                    this.match(ClickHouseParser.DOT);
                    }
                }

                this.state = 3018;
                this.match(ClickHouseParser.ASTERISK);
                }
                break;
            case 16:
                {
                localContext = new ColumnExpressionSubqueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3019;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3020;
                this.selectUnionStatement();
                this.state = 3021;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 17:
                {
                localContext = new ColumnExpressionParensContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3023;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3024;
                this.columnExpression(0);
                this.state = 3025;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 18:
                {
                localContext = new ColumnExpressionTupleContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3027;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3028;
                this.columnExpressionList();
                this.state = 3029;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 19:
                {
                localContext = new ColumnExpressionArrayContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3031;
                this.match(ClickHouseParser.LBRACKET);
                this.state = 3033;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 36188255) !== 0)) {
                    {
                    this.state = 3032;
                    this.columnExpressionList();
                    }
                }

                this.state = 3035;
                this.match(ClickHouseParser.RBRACKET);
                }
                break;
            case 20:
                {
                localContext = new ColumnExpressionIdentifierContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3036;
                this.columnIdentifier();
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3110;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 419, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3108;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 418, this.context) ) {
                    case 1:
                        {
                        localContext = new ColumnExpressionPrecedence1Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3039;
                        if (!(this.precpred(this.context, 16))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 16)");
                        }
                        this.state = 3040;
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 390)) & ~0x1F) === 0 && ((1 << (_la - 390)) & 134479873) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3041;
                        this.columnExpression(17);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ColumnExpressionPrecedence2Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3042;
                        if (!(this.precpred(this.context, 15))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 15)");
                        }
                        this.state = 3043;
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 395)) & ~0x1F) === 0 && ((1 << (_la - 395)) & 16387) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3044;
                        this.columnExpression(16);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ColumnExpressionPrecedence3Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3045;
                        if (!(this.precpred(this.context, 14))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 14)");
                        }
                        this.state = 3064;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 414, this.context) ) {
                        case 1:
                            {
                            this.state = 3046;
                            this.match(ClickHouseParser.EQ_DOUBLE);
                            }
                            break;
                        case 2:
                            {
                            this.state = 3047;
                            this.match(ClickHouseParser.EQ_SINGLE);
                            }
                            break;
                        case 3:
                            {
                            this.state = 3048;
                            this.match(ClickHouseParser.NOT_EQ);
                            }
                            break;
                        case 4:
                            {
                            this.state = 3049;
                            this.match(ClickHouseParser.LE);
                            }
                            break;
                        case 5:
                            {
                            this.state = 3050;
                            this.match(ClickHouseParser.GE);
                            }
                            break;
                        case 6:
                            {
                            this.state = 3051;
                            this.match(ClickHouseParser.LT);
                            }
                            break;
                        case 7:
                            {
                            this.state = 3052;
                            this.match(ClickHouseParser.GT);
                            }
                            break;
                        case 8:
                            {
                            this.state = 3054;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 71) {
                                {
                                this.state = 3053;
                                this.match(ClickHouseParser.GLOBAL);
                                }
                            }

                            this.state = 3057;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 115) {
                                {
                                this.state = 3056;
                                this.match(ClickHouseParser.NOT);
                                }
                            }

                            this.state = 3059;
                            this.match(ClickHouseParser.IN);
                            }
                            break;
                        case 9:
                            {
                            this.state = 3061;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 115) {
                                {
                                this.state = 3060;
                                this.match(ClickHouseParser.NOT);
                                }
                            }

                            this.state = 3063;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 79 || _la === 98)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                        }
                        this.state = 3066;
                        this.columnExpression(15);
                        }
                        break;
                    case 4:
                        {
                        localContext = new ColumnExpressionAndContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3067;
                        if (!(this.precpred(this.context, 11))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 11)");
                        }
                        this.state = 3068;
                        this.match(ClickHouseParser.AND);
                        this.state = 3069;
                        this.columnExpression(12);
                        }
                        break;
                    case 5:
                        {
                        localContext = new ColumnExpressionOrContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3070;
                        if (!(this.precpred(this.context, 10))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 10)");
                        }
                        this.state = 3071;
                        this.match(ClickHouseParser.OR);
                        this.state = 3072;
                        this.columnExpression(11);
                        }
                        break;
                    case 6:
                        {
                        localContext = new ColumnExpressionBetweenContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3073;
                        if (!(this.precpred(this.context, 9))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 9)");
                        }
                        this.state = 3075;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 115) {
                            {
                            this.state = 3074;
                            this.match(ClickHouseParser.NOT);
                            }
                        }

                        this.state = 3077;
                        this.match(ClickHouseParser.BETWEEN);
                        this.state = 3078;
                        this.columnExpression(0);
                        this.state = 3079;
                        this.match(ClickHouseParser.AND);
                        this.state = 3080;
                        this.columnExpression(10);
                        }
                        break;
                    case 7:
                        {
                        localContext = new ColumnExpressionTernaryOpContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3082;
                        if (!(this.precpred(this.context, 8))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 8)");
                        }
                        this.state = 3083;
                        this.match(ClickHouseParser.QUESTIONMARK);
                        this.state = 3084;
                        this.columnExpression(0);
                        this.state = 3085;
                        this.match(ClickHouseParser.COLON);
                        this.state = 3086;
                        this.columnExpression(8);
                        }
                        break;
                    case 8:
                        {
                        localContext = new ColumnExpressionArrayAccessContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3088;
                        if (!(this.precpred(this.context, 19))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 19)");
                        }
                        this.state = 3089;
                        this.match(ClickHouseParser.LBRACKET);
                        this.state = 3090;
                        this.columnExpression(0);
                        this.state = 3091;
                        this.match(ClickHouseParser.RBRACKET);
                        }
                        break;
                    case 9:
                        {
                        localContext = new ColumnExpressionTupleAccessContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3093;
                        if (!(this.precpred(this.context, 18))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 18)");
                        }
                        this.state = 3094;
                        this.match(ClickHouseParser.DOT);
                        this.state = 3095;
                        this.match(ClickHouseParser.DECIMAL_LITERAL);
                        }
                        break;
                    case 10:
                        {
                        localContext = new ColumnExpressionIsNullContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3096;
                        if (!(this.precpred(this.context, 13))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 13)");
                        }
                        this.state = 3097;
                        this.match(ClickHouseParser.IS);
                        this.state = 3099;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 115) {
                            {
                            this.state = 3098;
                            this.match(ClickHouseParser.NOT);
                            }
                        }

                        this.state = 3101;
                        this.match(ClickHouseParser.NULL_SQL);
                        }
                        break;
                    case 11:
                        {
                        localContext = new ColumnExpressionAliasContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3102;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 3106;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case ClickHouseParser.DATE:
                        case ClickHouseParser.FIRST:
                        case ClickHouseParser.ID:
                        case ClickHouseParser.KEY:
                        case ClickHouseParser.IDENTIFIER:
                            {
                            this.state = 3103;
                            this.alias();
                            }
                            break;
                        case ClickHouseParser.AS:
                            {
                            this.state = 3104;
                            this.match(ClickHouseParser.AS);
                            this.state = 3105;
                            this.identifier();
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 3112;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 419, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public columnArgumentList(): ColumnArgumentListContext {
        let localContext = new ColumnArgumentListContext(this.context, this.state);
        this.enterRule(localContext, 354, ClickHouseParser.RULE_columnArgumentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3113;
            this.columnArgumentExpression();
            this.state = 3118;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 3114;
                this.match(ClickHouseParser.COMMA);
                this.state = 3115;
                this.columnArgumentExpression();
                }
                }
                this.state = 3120;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnArgumentExpression(): ColumnArgumentExpressionContext {
        let localContext = new ColumnArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 356, ClickHouseParser.RULE_columnArgumentExpression);
        try {
            this.state = 3123;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 421, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3121;
                this.columnLambdaExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3122;
                this.columnExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnLambdaExpression(): ColumnLambdaExpressionContext {
        let localContext = new ColumnLambdaExpressionContext(this.context, this.state);
        this.enterRule(localContext, 358, ClickHouseParser.RULE_columnLambdaExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3130;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.LPAREN:
                {
                this.state = 3125;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3126;
                this.identifierList();
                this.state = 3127;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.KEYED:
            case ClickHouseParser.RANDOMIZED:
            case ClickHouseParser.USER_NAME:
            case ClickHouseParser.IP_ADDRESS:
            case ClickHouseParser.FORWARDED_IP_ADDRESS:
            case ClickHouseParser.CLIENT_KEY:
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
            case ClickHouseParser.QUERIES:
            case ClickHouseParser.QUERY_SELECTS:
            case ClickHouseParser.QUERY_INSERTS:
            case ClickHouseParser.ERRORS:
            case ClickHouseParser.RESULT_ROWS:
            case ClickHouseParser.RESULT_BYTES:
            case ClickHouseParser.READ_ROWS:
            case ClickHouseParser.READ_BYTES:
            case ClickHouseParser.EXECUTION_TIME:
            case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
            case ClickHouseParser.LIMITS:
            case ClickHouseParser.TRACKING:
            case ClickHouseParser.ONLY:
            case ClickHouseParser.CONST:
            case ClickHouseParser.CHANGEABLE_IN_READONLY:
            case ClickHouseParser.OVERRIDABLE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 3129;
                this.identifierList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3132;
            this.match(ClickHouseParser.ARROW_SYMBOL);
            this.state = 3133;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        let localContext = new ColumnIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 360, ClickHouseParser.RULE_columnIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3138;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 423, this.context) ) {
            case 1:
                {
                this.state = 3135;
                this.tableIdentifier();
                this.state = 3136;
                this.match(ClickHouseParser.DOT);
                }
                break;
            }
            this.state = 3140;
            this.identifier();
            this.state = 3143;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 424, this.context) ) {
            case 1:
                {
                this.state = 3141;
                this.match(ClickHouseParser.DOT);
                this.state = 3142;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public tableExpression(): TableExpressionContext;
    public tableExpression(_p: number): TableExpressionContext;
    public tableExpression(_p?: number): TableExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new TableExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 362;
        this.enterRecursionRule(localContext, 362, ClickHouseParser.RULE_tableExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3152;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 425, this.context) ) {
            case 1:
                {
                localContext = new TableExpressionIdentifierContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 3146;
                this.tableIdentifier();
                }
                break;
            case 2:
                {
                localContext = new TableExpressionFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3147;
                this.tableFunctionExpression();
                }
                break;
            case 3:
                {
                localContext = new TableExpressionSubqueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3148;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3149;
                this.selectUnionStatement();
                this.state = 3150;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3162;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 427, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new TableExpressionAliasContext(new TableExpressionContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_tableExpression);
                    this.state = 3154;
                    if (!(this.precpred(this.context, 1))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                    }
                    this.state = 3158;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case ClickHouseParser.DATE:
                    case ClickHouseParser.FIRST:
                    case ClickHouseParser.ID:
                    case ClickHouseParser.KEY:
                    case ClickHouseParser.IDENTIFIER:
                        {
                        this.state = 3155;
                        this.alias();
                        }
                        break;
                    case ClickHouseParser.AS:
                        {
                        this.state = 3156;
                        this.match(ClickHouseParser.AS);
                        this.state = 3157;
                        this.identifier();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    }
                }
                this.state = 3164;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 427, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        let localContext = new TableFunctionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 364, ClickHouseParser.RULE_tableFunctionExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3165;
            this.identifier();
            this.state = 3166;
            this.match(ClickHouseParser.LPAREN);
            this.state = 3168;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 33566751) !== 0)) {
                {
                this.state = 3167;
                this.tableArgList();
                }
            }

            this.state = 3170;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIdentifier(): TableIdentifierContext {
        let localContext = new TableIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 366, ClickHouseParser.RULE_tableIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3175;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 429, this.context) ) {
            case 1:
                {
                this.state = 3172;
                this.databaseIdentifier();
                this.state = 3173;
                this.match(ClickHouseParser.DOT);
                }
                break;
            }
            this.state = 3177;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgList(): TableArgListContext {
        let localContext = new TableArgListContext(this.context, this.state);
        this.enterRule(localContext, 368, ClickHouseParser.RULE_tableArgList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3179;
            this.tableArgExpression();
            this.state = 3184;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 394) {
                {
                {
                this.state = 3180;
                this.match(ClickHouseParser.COMMA);
                this.state = 3181;
                this.tableArgExpression();
                }
                }
                this.state = 3186;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgExpression(): TableArgExpressionContext {
        let localContext = new TableArgExpressionContext(this.context, this.state);
        this.enterRule(localContext, 370, ClickHouseParser.RULE_tableArgExpression);
        try {
            this.state = 3190;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 431, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3187;
                this.columnIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3188;
                this.tableFunctionExpression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3189;
                this.literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        let localContext = new DatabaseIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 372, ClickHouseParser.RULE_databaseIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3192;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public floatingLiteral(): FloatingLiteralContext {
        let localContext = new FloatingLiteralContext(this.context, this.state);
        this.enterRule(localContext, 374, ClickHouseParser.RULE_floatingLiteral);
        let _la: number;
        try {
            this.state = 3202;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.FLOATING_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3194;
                this.match(ClickHouseParser.FLOATING_LITERAL);
                }
                break;
            case ClickHouseParser.DOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3195;
                this.match(ClickHouseParser.DOT);
                this.state = 3196;
                _la = this.tokenStream.LA(1);
                if(!(_la === 385 || _la === 386)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case ClickHouseParser.DECIMAL_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3197;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 3198;
                this.match(ClickHouseParser.DOT);
                this.state = 3200;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 432, this.context) ) {
                case 1:
                    {
                    this.state = 3199;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 385 || _la === 386)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberLiteral(): NumberLiteralContext {
        let localContext = new NumberLiteralContext(this.context, this.state);
        this.enterRule(localContext, 376, ClickHouseParser.RULE_numberLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3205;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 396 || _la === 409) {
                {
                this.state = 3204;
                _la = this.tokenStream.LA(1);
                if(!(_la === 396 || _la === 409)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3213;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 435, this.context) ) {
            case 1:
                {
                this.state = 3207;
                this.floatingLiteral();
                }
                break;
            case 2:
                {
                this.state = 3208;
                this.match(ClickHouseParser.OCTAL_LITERAL);
                }
                break;
            case 3:
                {
                this.state = 3209;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case 4:
                {
                this.state = 3210;
                this.match(ClickHouseParser.HEXADECIMAL_LITERAL);
                }
                break;
            case 5:
                {
                this.state = 3211;
                this.match(ClickHouseParser.INF);
                }
                break;
            case 6:
                {
                this.state = 3212;
                this.match(ClickHouseParser.NAN_SQL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literal(): LiteralContext {
        let localContext = new LiteralContext(this.context, this.state);
        this.enterRule(localContext, 378, ClickHouseParser.RULE_literal);
        try {
            this.state = 3218;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.INF:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.PLUS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3215;
                this.numberLiteral();
                }
                break;
            case ClickHouseParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3216;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.NULL_SQL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3217;
                this.match(ClickHouseParser.NULL_SQL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 380, ClickHouseParser.RULE_interval);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3220;
            _la = this.tokenStream.LA(1);
            if(!(_la === 36 || _la === 76 || ((((_la - 108)) & ~0x1F) === 0 && ((1 << (_la - 108)) & 67108869) !== 0) || _la === 148 || _la === 189 || _la === 194)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword(): KeywordContext {
        let localContext = new KeywordContext(this.context, this.state);
        this.enterRule(localContext, 382, ClickHouseParser.RULE_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3222;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 2147483647) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keywordForAlias(): KeywordForAliasContext {
        let localContext = new KeywordForAliasContext(this.context, this.state);
        this.enterRule(localContext, 384, ClickHouseParser.RULE_keywordForAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3224;
            _la = this.tokenStream.LA(1);
            if(!(_la === 35 || _la === 62 || _la === 77 || _la === 91)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alias(): AliasContext {
        let localContext = new AliasContext(this.context, this.state);
        this.enterRule(localContext, 386, ClickHouseParser.RULE_alias);
        try {
            this.state = 3228;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3226;
                this.match(ClickHouseParser.IDENTIFIER);
                }
                break;
            case ClickHouseParser.DATE:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.ID:
            case ClickHouseParser.KEY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3227;
                this.keywordForAlias();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 388, ClickHouseParser.RULE_identifier);
        try {
            this.state = 3233;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 438, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3230;
                this.match(ClickHouseParser.IDENTIFIER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3231;
                this.interval();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3232;
                this.keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierOrNull(): IdentifierOrNullContext {
        let localContext = new IdentifierOrNullContext(this.context, this.state);
        this.enterRule(localContext, 390, ClickHouseParser.RULE_identifierOrNull);
        try {
            this.state = 3237;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.KEYED:
            case ClickHouseParser.RANDOMIZED:
            case ClickHouseParser.USER_NAME:
            case ClickHouseParser.IP_ADDRESS:
            case ClickHouseParser.FORWARDED_IP_ADDRESS:
            case ClickHouseParser.CLIENT_KEY:
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
            case ClickHouseParser.QUERIES:
            case ClickHouseParser.QUERY_SELECTS:
            case ClickHouseParser.QUERY_INSERTS:
            case ClickHouseParser.ERRORS:
            case ClickHouseParser.RESULT_ROWS:
            case ClickHouseParser.RESULT_BYTES:
            case ClickHouseParser.READ_ROWS:
            case ClickHouseParser.READ_BYTES:
            case ClickHouseParser.EXECUTION_TIME:
            case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
            case ClickHouseParser.LIMITS:
            case ClickHouseParser.TRACKING:
            case ClickHouseParser.ONLY:
            case ClickHouseParser.CONST:
            case ClickHouseParser.CHANGEABLE_IN_READONLY:
            case ClickHouseParser.OVERRIDABLE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3235;
                this.identifier();
                }
                break;
            case ClickHouseParser.NULL_SQL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3236;
                this.match(ClickHouseParser.NULL_SQL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enumValue(): EnumValueContext {
        let localContext = new EnumValueContext(this.context, this.state);
        this.enterRule(localContext, 392, ClickHouseParser.RULE_enumValue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3239;
            this.match(ClickHouseParser.STRING_LITERAL);
            this.state = 3240;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 3241;
            this.numberLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 60:
            return this.dictionaryAttributeDefinition_sempred(localContext as DictionaryAttributeDefinitionContext, predIndex);
        case 61:
            return this.dictionaryEngineClause_sempred(localContext as DictionaryEngineClauseContext, predIndex);
        case 74:
            return this.engineClause_sempred(localContext as EngineClauseContext, predIndex);
        case 150:
            return this.joinExpression_sempred(localContext as JoinExpressionContext, predIndex);
        case 176:
            return this.columnExpression_sempred(localContext as ColumnExpressionContext, predIndex);
        case 181:
            return this.tableExpression_sempred(localContext as TableExpressionContext, predIndex);
        }
        return true;
    }
    private dictionaryAttributeDefinition_sempred(localContext: DictionaryAttributeDefinitionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return !localContext.attrs.has("default");
        case 1:
            return !localContext.attrs.has("expression");
        case 2:
            return !localContext.attrs.has("hierarchical");
        case 3:
            return !localContext.attrs.has("injective");
        case 4:
            return !localContext.attrs.has("is_object_id");
        }
        return true;
    }
    private dictionaryEngineClause_sempred(localContext: DictionaryEngineClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return !localContext.clauses.has("source");
        case 6:
            return !localContext.clauses.has("lifetime");
        case 7:
            return !localContext.clauses.has("layout");
        case 8:
            return !localContext.clauses.has("range");
        case 9:
            return !localContext.clauses.has("settings");
        }
        return true;
    }
    private engineClause_sempred(localContext: EngineClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 10:
            return !localContext.clauses.has("orderByClause");
        case 11:
            return !localContext.clauses.has("partitionByClause");
        case 12:
            return !localContext.clauses.has("primaryKeyClause");
        case 13:
            return !localContext.clauses.has("sampleByClause");
        case 14:
            return !localContext.clauses.has("ttlClause");
        case 15:
            return !localContext.clauses.has("settingsClause");
        }
        return true;
    }
    private joinExpression_sempred(localContext: JoinExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 16:
            return this.precpred(this.context, 3);
        case 17:
            return this.precpred(this.context, 4);
        }
        return true;
    }
    private columnExpression_sempred(localContext: ColumnExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 18:
            return this.precpred(this.context, 16);
        case 19:
            return this.precpred(this.context, 15);
        case 20:
            return this.precpred(this.context, 14);
        case 21:
            return this.precpred(this.context, 11);
        case 22:
            return this.precpred(this.context, 10);
        case 23:
            return this.precpred(this.context, 9);
        case 24:
            return this.precpred(this.context, 8);
        case 25:
            return this.precpred(this.context, 19);
        case 26:
            return this.precpred(this.context, 18);
        case 27:
            return this.precpred(this.context, 13);
        case 28:
            return this.precpred(this.context, 7);
        }
        return true;
    }
    private tableExpression_sempred(localContext: TableExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 29:
            return this.precpred(this.context, 1);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,421,3244,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,1,0,
        3,0,396,8,0,1,0,1,0,1,1,1,1,3,1,402,8,1,1,1,1,1,1,1,1,1,3,1,408,
        8,1,1,2,1,2,1,2,1,2,3,2,414,8,2,1,2,1,2,3,2,418,8,2,1,2,3,2,421,
        8,2,1,2,1,2,1,2,3,2,426,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,448,8,3,1,3,3,3,
        451,8,3,1,4,1,4,1,4,1,4,5,4,457,8,4,10,4,12,4,460,9,4,1,5,1,5,3,
        5,464,8,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,3,
        7,479,8,7,1,7,1,7,1,7,5,7,484,8,7,10,7,12,7,487,9,7,1,8,1,8,1,8,
        1,8,1,8,3,8,494,8,8,1,8,1,8,1,8,3,8,499,8,8,1,8,1,8,1,8,1,8,1,8,
        3,8,506,8,8,1,8,1,8,1,8,3,8,511,8,8,1,8,1,8,1,8,1,8,1,8,3,8,518,
        8,8,1,8,1,8,1,8,3,8,523,8,8,1,8,1,8,1,8,1,8,3,8,529,8,8,1,8,1,8,
        1,8,1,8,3,8,535,8,8,1,8,1,8,1,8,3,8,540,8,8,1,8,1,8,1,8,1,8,3,8,
        546,8,8,1,8,1,8,1,8,3,8,551,8,8,1,8,1,8,1,8,1,8,3,8,557,8,8,1,8,
        1,8,1,8,3,8,562,8,8,1,8,1,8,1,8,1,8,3,8,568,8,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,582,8,8,1,8,1,8,1,8,1,8,1,8,
        3,8,589,8,8,1,8,1,8,1,8,1,8,1,8,3,8,596,8,8,1,8,1,8,1,8,1,8,1,8,
        3,8,603,8,8,1,8,1,8,1,8,1,8,3,8,609,8,8,1,8,1,8,1,8,3,8,614,8,8,
        1,8,1,8,1,8,1,8,3,8,620,8,8,1,8,1,8,1,8,3,8,625,8,8,1,8,1,8,1,8,
        1,8,3,8,631,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,640,8,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,650,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,3,8,660,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,680,8,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,
        688,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,
        703,8,8,1,9,1,9,1,9,5,9,708,8,9,10,9,12,9,711,9,9,1,10,1,10,1,10,
        1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,724,8,12,1,13,1,13,
        1,13,1,13,3,13,730,8,13,1,14,1,14,1,14,1,14,3,14,736,8,14,1,15,1,
        15,1,15,1,15,3,15,742,8,15,1,15,3,15,745,8,15,1,16,1,16,1,16,1,16,
        3,16,751,8,16,1,16,3,16,754,8,16,1,16,3,16,757,8,16,1,16,1,16,1,
        16,1,16,3,16,763,8,16,1,16,1,16,3,16,767,8,16,1,16,3,16,770,8,16,
        1,16,3,16,773,8,16,1,16,3,16,776,8,16,1,16,3,16,779,8,16,1,17,1,
        17,1,17,1,17,1,17,3,17,786,8,17,1,17,1,17,3,17,790,8,17,1,17,3,17,
        793,8,17,1,17,1,17,3,17,797,8,17,1,18,1,18,1,18,1,18,3,18,803,8,
        18,1,18,3,18,806,8,18,1,18,1,18,1,18,1,18,3,18,812,8,18,1,18,1,18,
        3,18,816,8,18,1,18,3,18,819,8,18,1,18,1,18,1,18,1,19,1,19,1,19,1,
        19,1,19,1,19,3,19,830,8,19,1,19,1,19,3,19,834,8,19,1,19,3,19,837,
        8,19,1,19,1,19,1,19,3,19,842,8,19,3,19,844,8,19,1,19,3,19,847,8,
        19,1,19,3,19,850,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,
        20,860,8,20,1,20,1,20,3,20,864,8,20,1,20,3,20,867,8,20,1,20,3,20,
        870,8,20,1,20,1,20,1,20,3,20,875,8,20,3,20,877,8,20,1,20,1,20,1,
        21,1,21,1,21,3,21,884,8,21,1,21,1,21,1,21,1,21,3,21,890,8,21,1,21,
        1,21,3,21,894,8,21,1,21,3,21,897,8,21,1,21,3,21,900,8,21,1,21,1,
        21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,926,8,24,10,
        24,12,24,929,9,24,1,24,1,24,1,24,1,24,1,24,3,24,936,8,24,3,24,938,
        8,24,1,25,1,25,1,25,1,25,1,25,3,25,945,8,25,1,25,1,25,1,25,1,25,
        1,25,3,25,952,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,3,27,
        962,8,27,1,28,1,28,1,28,1,28,5,28,968,8,28,10,28,12,28,971,9,28,
        1,28,1,28,3,28,975,8,28,1,29,1,29,1,29,1,29,1,29,3,29,982,8,29,1,
        30,1,30,1,30,1,30,5,30,988,8,30,10,30,12,30,991,9,30,1,31,1,31,1,
        31,1,31,1,31,3,31,998,8,31,1,31,3,31,1001,8,31,1,31,1,31,3,31,1005,
        8,31,1,31,3,31,1008,8,31,1,31,3,31,1011,8,31,1,31,1,31,3,31,1015,
        8,31,1,32,1,32,1,32,1,32,5,32,1021,8,32,10,32,12,32,1024,9,32,1,
        33,1,33,1,33,3,33,1029,8,33,1,34,1,34,1,34,3,34,1034,8,34,1,34,1,
        34,3,34,1038,8,34,1,34,1,34,3,34,1042,8,34,1,34,3,34,1045,8,34,1,
        34,3,34,1048,8,34,1,34,1,34,1,34,3,34,1053,8,34,1,34,1,34,1,34,1,
        34,3,34,1059,8,34,3,34,1061,8,34,1,34,3,34,1064,8,34,1,34,3,34,1067,
        8,34,1,35,1,35,1,35,1,35,1,35,3,35,1074,8,35,1,36,1,36,1,36,1,36,
        1,36,3,36,1081,8,36,1,37,1,37,3,37,1085,8,37,1,37,1,37,1,37,1,38,
        1,38,3,38,1092,8,38,1,39,1,39,1,39,1,39,1,39,3,39,1099,8,39,1,40,
        1,40,1,40,1,40,1,40,3,40,1106,8,40,1,41,1,41,1,41,1,41,1,41,3,41,
        1113,8,41,1,42,1,42,3,42,1117,8,42,1,42,1,42,3,42,1121,8,42,1,42,
        1,42,1,42,5,42,1126,8,42,10,42,12,42,1129,9,42,1,42,3,42,1132,8,
        42,1,42,1,42,3,42,1136,8,42,1,42,1,42,1,42,1,42,3,42,1142,8,42,1,
        42,1,42,3,42,1146,8,42,1,43,1,43,1,43,1,43,1,43,3,43,1153,8,43,1,
        43,1,43,1,43,1,43,3,43,1159,8,43,1,44,1,44,1,44,1,44,1,45,1,45,1,
        46,1,46,3,46,1169,8,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,5,
        48,1179,8,48,10,48,12,48,1182,9,48,1,48,1,48,1,48,1,48,3,48,1188,
        8,48,1,49,1,49,3,49,1192,8,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,
        3,50,1201,8,50,1,50,5,50,1204,8,50,10,50,12,50,1207,9,50,1,51,1,
        51,1,51,3,51,1212,8,51,1,51,1,51,3,51,1216,8,51,1,51,3,51,1219,8,
        51,1,51,3,51,1222,8,51,1,51,3,51,1225,8,51,1,51,1,51,3,51,1229,8,
        51,1,52,1,52,1,52,5,52,1234,8,52,10,52,12,52,1237,9,52,1,53,1,53,
        1,53,3,53,1242,8,53,1,53,1,53,3,53,1246,8,53,1,53,3,53,1249,8,53,
        1,53,3,53,1252,8,53,1,54,1,54,1,54,1,54,3,54,1258,8,54,1,54,1,54,
        3,54,1262,8,54,1,54,3,54,1265,8,54,1,54,3,54,1268,8,54,1,54,1,54,
        3,54,1272,8,54,1,55,1,55,1,55,1,55,3,55,1278,8,55,1,55,3,55,1281,
        8,55,1,56,1,56,1,56,5,56,1286,8,56,10,56,12,56,1289,9,56,1,57,1,
        57,1,57,1,57,1,57,1,57,3,57,1297,8,57,1,57,1,57,3,57,1301,8,57,1,
        57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,
        58,1,58,3,58,1318,8,58,1,59,1,59,1,59,1,59,5,59,1324,8,59,10,59,
        12,59,1327,9,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        5,60,1352,8,60,10,60,12,60,1355,9,60,1,61,3,61,1358,8,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,5,61,1380,8,61,10,61,12,61,1383,9,61,
        1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,3,63,1393,8,63,1,63,3,63,
        1396,8,63,1,64,1,64,1,64,1,64,1,64,5,64,1403,8,64,10,64,12,64,1406,
        9,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,3,65,1422,8,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,5,66,
        1431,8,66,10,66,12,66,1434,9,66,1,66,1,66,1,66,1,67,1,67,1,67,1,
        67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1451,8,67,1,67,1,
        67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,3,69,1464,8,69,1,
        70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,73,5,
        73,1479,8,73,10,73,12,73,1482,9,73,1,73,1,73,1,73,1,73,1,73,1,73,
        3,73,1490,8,73,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,5,74,1517,8,74,10,74,12,74,1520,9,74,1,75,1,75,1,75,1,
        75,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,5,
        78,1538,8,78,10,78,12,78,1541,9,78,1,79,1,79,3,79,1545,8,79,1,79,
        1,79,1,79,3,79,1550,8,79,1,79,3,79,1553,8,79,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,3,80,1565,8,80,1,81,1,81,1,81,3,81,
        1570,8,81,1,81,1,81,3,81,1574,8,81,1,81,3,81,1577,8,81,1,81,1,81,
        3,81,1581,8,81,1,81,1,81,3,81,1585,8,81,1,81,1,81,1,81,3,81,1590,
        8,81,1,81,3,81,1593,8,81,1,81,1,81,3,81,1597,8,81,3,81,1599,8,81,
        1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,
        1,85,1,85,1,85,1,85,1,85,5,85,1619,8,85,10,85,12,85,1622,9,85,1,
        85,1,85,1,86,1,86,1,86,3,86,1629,8,86,1,86,3,86,1632,8,86,1,87,1,
        87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1642,8,87,1,88,1,88,3,88,1646,
        8,88,1,88,1,88,1,89,1,89,1,89,1,89,3,89,1654,8,89,1,89,1,89,3,89,
        1658,8,89,1,89,1,89,1,89,3,89,1663,8,89,1,89,1,89,3,89,1667,8,89,
        1,89,1,89,3,89,1671,8,89,1,89,1,89,3,89,1675,8,89,1,89,1,89,3,89,
        1679,8,89,3,89,1681,8,89,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1689,
        8,90,1,90,1,90,3,90,1693,8,90,1,90,3,90,1696,8,90,1,91,1,91,1,91,
        1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
        1,91,1,91,1,91,1,91,1,91,3,91,1719,8,91,1,92,1,92,3,92,1723,8,92,
        1,92,1,92,1,92,3,92,1728,8,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
        1,92,3,92,1738,8,92,1,92,1,92,1,92,3,92,1743,8,92,1,92,1,92,1,92,
        1,92,3,92,1749,8,92,1,93,1,93,1,93,5,93,1754,8,93,10,93,12,93,1757,
        9,93,1,94,1,94,1,94,5,94,1762,8,94,10,94,12,94,1765,9,94,1,95,1,
        95,1,95,5,95,1770,8,95,10,95,12,95,1773,9,95,1,96,1,96,3,96,1777,
        8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,1788,8,96,
        10,96,12,96,1791,9,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1799,8,
        96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1807,8,96,1,96,3,96,1810,8,
        96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1823,
        8,96,1,96,1,96,1,96,1,96,3,96,1829,8,96,1,97,1,97,1,97,3,97,1834,
        8,97,1,97,3,97,1837,8,97,1,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,
        3,99,1847,8,99,1,99,3,99,1850,8,99,1,99,1,99,3,99,1854,8,99,3,99,
        1856,8,99,1,100,1,100,1,100,5,100,1861,8,100,10,100,12,100,1864,
        9,100,1,101,1,101,1,102,1,102,3,102,1870,8,102,1,103,1,103,1,103,
        5,103,1875,8,103,10,103,12,103,1878,9,103,1,104,1,104,3,104,1882,
        8,104,1,105,1,105,3,105,1886,8,105,1,106,1,106,3,106,1890,8,106,
        1,107,1,107,3,107,1894,8,107,1,107,1,107,1,107,1,107,3,107,1900,
        8,107,1,107,3,107,1903,8,107,1,108,1,108,3,108,1907,8,108,1,109,
        1,109,3,109,1911,8,109,1,110,1,110,3,110,1915,8,110,1,110,1,110,
        1,110,1,110,3,110,1921,8,110,1,111,1,111,1,112,1,112,1,113,1,113,
        3,113,1929,8,113,1,113,3,113,1932,8,113,1,113,1,113,3,113,1936,8,
        113,1,113,1,113,1,113,1,113,3,113,1942,8,113,1,113,1,113,3,113,1946,
        8,113,1,113,1,113,1,113,3,113,1951,8,113,1,113,1,113,3,113,1955,
        8,113,1,113,1,113,3,113,1959,8,113,1,113,1,113,1,113,3,113,1964,
        8,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1972,8,113,1,113,
        3,113,1975,8,113,1,113,1,113,1,113,3,113,1980,8,113,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1991,8,113,1,113,
        1,113,3,113,1995,8,113,1,113,1,113,1,113,3,113,2000,8,113,1,113,
        1,113,1,113,1,113,1,113,3,113,2007,8,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,2021,8,113,
        3,113,2023,8,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,3,114,2035,8,114,1,114,1,114,1,114,1,114,1,114,3,114,
        2042,8,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,3,114,2061,8,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        3,114,2074,8,114,1,114,1,114,3,114,2078,8,114,1,114,1,114,1,114,
        1,114,1,114,3,114,2085,8,114,1,115,1,115,3,115,2089,8,115,1,115,
        1,115,3,115,2093,8,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,
        2101,8,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,3,115,2113,8,115,1,115,3,115,2116,8,115,1,115,1,115,1,115,
        1,115,3,115,2122,8,115,1,115,3,115,2125,8,115,1,115,1,115,3,115,
        2129,8,115,1,115,3,115,2132,8,115,1,115,1,115,1,115,3,115,2137,8,
        115,1,115,1,115,1,115,3,115,2142,8,115,1,115,1,115,1,115,1,115,1,
        115,3,115,2149,8,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,
        115,2158,8,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,2166,8,
        115,1,115,1,115,1,115,1,115,1,115,3,115,2173,8,115,1,115,1,115,3,
        115,2177,8,115,1,116,1,116,1,116,3,116,2182,8,116,1,116,3,116,2185,
        8,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,2193,8,116,1,116,
        1,116,1,116,3,116,2198,8,116,1,117,1,117,1,117,1,117,1,117,1,117,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,2225,8,117,
        1,118,1,118,1,118,3,118,2230,8,118,1,118,1,118,1,118,3,118,2235,
        8,118,1,118,3,118,2238,8,118,1,118,3,118,2241,8,118,1,118,1,118,
        1,119,1,119,1,119,1,119,1,119,3,119,2250,8,119,1,119,3,119,2253,
        8,119,1,120,1,120,1,120,1,120,5,120,2259,8,120,10,120,12,120,2262,
        9,120,1,120,1,120,1,121,1,121,1,122,1,122,1,122,4,122,2271,8,122,
        11,122,12,122,2272,1,122,3,122,2276,8,122,1,122,1,122,1,122,3,122,
        2281,8,122,1,122,1,122,3,122,2285,8,122,1,123,1,123,1,123,5,123,
        2290,8,123,10,123,12,123,2293,9,123,1,124,1,124,1,124,1,124,1,124,
        1,124,1,124,1,124,1,124,1,124,3,124,2305,8,124,1,124,1,124,3,124,
        2309,8,124,1,125,1,125,3,125,2313,8,125,1,126,1,126,1,126,1,126,
        5,126,2319,8,126,10,126,12,126,2322,9,126,3,126,2324,8,126,1,126,
        1,126,1,127,1,127,1,127,1,127,5,127,2332,8,127,10,127,12,127,2335,
        9,127,1,127,1,127,1,128,1,128,1,128,3,128,2342,8,128,1,128,5,128,
        2345,8,128,10,128,12,128,2348,9,128,1,129,1,129,1,129,3,129,2353,
        8,129,1,129,1,129,3,129,2357,8,129,1,130,1,130,1,130,1,130,3,130,
        2363,8,130,1,130,3,130,2366,8,130,1,130,3,130,2369,8,130,1,130,3,
        130,2372,8,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,
        131,1,131,5,131,2384,8,131,10,131,12,131,2387,9,131,1,131,3,131,
        2390,8,131,1,132,1,132,3,132,2394,8,132,1,132,1,132,1,132,3,132,
        2399,8,132,1,132,3,132,2402,8,132,1,132,1,132,1,133,1,133,1,133,
        1,133,5,133,2410,8,133,10,133,12,133,2413,9,133,1,134,1,134,1,134,
        1,134,1,134,3,134,2420,8,134,1,135,3,135,2423,8,135,1,135,1,135,
        3,135,2427,8,135,1,135,3,135,2430,8,135,1,135,1,135,3,135,2434,8,
        135,1,135,3,135,2437,8,135,1,135,3,135,2440,8,135,1,135,3,135,2443,
        8,135,1,135,3,135,2446,8,135,1,135,3,135,2449,8,135,1,135,1,135,
        3,135,2453,8,135,1,135,1,135,3,135,2457,8,135,1,135,3,135,2460,8,
        135,1,135,3,135,2463,8,135,1,135,3,135,2466,8,135,1,135,3,135,2469,
        8,135,1,135,3,135,2472,8,135,1,136,1,136,1,136,1,137,1,137,1,137,
        1,137,3,137,2481,8,137,1,138,1,138,1,138,1,139,3,139,2487,8,139,
        1,139,1,139,1,139,1,139,1,140,1,140,1,140,1,140,1,140,1,140,1,140,
        1,141,1,141,1,141,1,142,1,142,1,142,1,143,1,143,1,143,1,143,1,143,
        1,143,1,143,1,143,3,143,2514,8,143,1,144,1,144,1,144,1,145,1,145,
        1,145,1,145,1,146,1,146,1,146,1,146,1,147,1,147,1,147,1,147,1,147,
        1,148,1,148,1,148,1,148,3,148,2536,8,148,1,149,1,149,1,149,1,150,
        1,150,1,150,3,150,2544,8,150,1,150,3,150,2547,8,150,1,150,1,150,
        1,150,1,150,3,150,2553,8,150,1,150,1,150,1,150,1,150,1,150,1,150,
        3,150,2561,8,150,1,150,3,150,2564,8,150,1,150,1,150,1,150,1,150,
        5,150,2570,8,150,10,150,12,150,2573,9,150,1,151,3,151,2576,8,151,
        1,151,1,151,1,151,3,151,2581,8,151,1,151,3,151,2584,8,151,1,151,
        3,151,2587,8,151,1,151,1,151,3,151,2591,8,151,1,151,1,151,3,151,
        2595,8,151,1,151,3,151,2598,8,151,3,151,2600,8,151,1,151,3,151,2603,
        8,151,1,151,1,151,3,151,2607,8,151,1,151,1,151,3,151,2611,8,151,
        1,151,3,151,2614,8,151,3,151,2616,8,151,3,151,2618,8,151,1,152,3,
        152,2621,8,152,1,152,1,152,1,152,3,152,2626,8,152,1,153,1,153,1,
        153,1,153,1,153,1,153,1,153,1,153,1,153,3,153,2637,8,153,1,154,1,
        154,1,154,1,154,3,154,2643,8,154,1,155,1,155,1,155,3,155,2648,8,
        155,1,156,1,156,1,156,5,156,2653,8,156,10,156,12,156,2656,9,156,
        1,157,1,157,3,157,2660,8,157,1,157,1,157,3,157,2664,8,157,1,157,
        1,157,3,157,2668,8,157,1,158,1,158,1,158,3,158,2673,8,158,1,159,
        1,159,1,159,5,159,2678,8,159,10,159,12,159,2681,9,159,1,160,1,160,
        1,160,1,160,1,161,3,161,2688,8,161,1,161,3,161,2691,8,161,1,161,
        3,161,2694,8,161,1,162,1,162,1,162,1,162,1,163,1,163,1,163,1,163,
        1,164,1,164,1,164,1,165,1,165,1,165,1,165,1,165,1,165,3,165,2713,
        8,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,
        1,166,1,166,3,166,2727,8,166,1,167,1,167,1,167,1,168,1,168,1,168,
        1,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,3,168,2743,8,168,
        1,168,3,168,2746,8,168,1,168,1,168,1,168,1,168,1,168,1,168,1,168,
        3,168,2755,8,168,1,168,1,168,3,168,2759,8,168,1,168,1,168,1,168,
        3,168,2764,8,168,1,168,1,168,1,168,3,168,2769,8,168,1,168,3,168,
        2772,8,168,3,168,2774,8,168,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,
        1,169,1,169,1,169,3,169,2796,8,169,1,169,3,169,2799,8,169,1,169,
        1,169,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,2810,8,169,
        1,170,1,170,3,170,2814,8,170,1,170,3,170,2817,8,170,1,170,1,170,
        3,170,2821,8,170,1,170,1,170,3,170,2825,8,170,1,171,1,171,1,171,
        1,172,1,172,1,172,3,172,2833,8,172,1,172,1,172,3,172,2837,8,172,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,5,173,2848,
        8,173,10,173,12,173,2851,9,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,5,173,2860,8,173,10,173,12,173,2863,9,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,5,173,2872,8,173,10,173,12,173,2875,9,173,
        1,173,1,173,1,173,1,173,1,173,3,173,2882,8,173,1,173,1,173,3,173,
        2886,8,173,1,174,1,174,1,174,5,174,2891,8,174,10,174,12,174,2894,
        9,174,1,175,1,175,1,175,3,175,2899,8,175,1,175,1,175,1,175,1,175,
        1,175,1,175,3,175,2907,8,175,1,176,1,176,1,176,3,176,2912,8,176,
        1,176,1,176,1,176,1,176,1,176,4,176,2919,8,176,11,176,12,176,2920,
        1,176,1,176,3,176,2925,8,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,3,176,2956,8,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,2973,8,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,
        2985,8,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,
        2995,8,176,1,176,3,176,2998,8,176,1,176,1,176,3,176,3002,8,176,1,
        176,3,176,3005,8,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,
        176,1,176,1,176,3,176,3017,8,176,1,176,1,176,1,176,1,176,1,176,1,
        176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,3,176,
        3034,8,176,1,176,1,176,3,176,3038,8,176,1,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        3,176,3055,8,176,1,176,3,176,3058,8,176,1,176,1,176,3,176,3062,8,
        176,1,176,3,176,3065,8,176,1,176,1,176,1,176,1,176,1,176,1,176,1,
        176,1,176,1,176,3,176,3076,8,176,1,176,1,176,1,176,1,176,1,176,1,
        176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,3,176,3100,8,176,1,176,1,176,
        1,176,1,176,1,176,3,176,3107,8,176,5,176,3109,8,176,10,176,12,176,
        3112,9,176,1,177,1,177,1,177,5,177,3117,8,177,10,177,12,177,3120,
        9,177,1,178,1,178,3,178,3124,8,178,1,179,1,179,1,179,1,179,1,179,
        3,179,3131,8,179,1,179,1,179,1,179,1,180,1,180,1,180,3,180,3139,
        8,180,1,180,1,180,1,180,3,180,3144,8,180,1,181,1,181,1,181,1,181,
        1,181,1,181,1,181,3,181,3153,8,181,1,181,1,181,1,181,1,181,3,181,
        3159,8,181,5,181,3161,8,181,10,181,12,181,3164,9,181,1,182,1,182,
        1,182,3,182,3169,8,182,1,182,1,182,1,183,1,183,1,183,3,183,3176,
        8,183,1,183,1,183,1,184,1,184,1,184,5,184,3183,8,184,10,184,12,184,
        3186,9,184,1,185,1,185,1,185,3,185,3191,8,185,1,186,1,186,1,187,
        1,187,1,187,1,187,1,187,1,187,3,187,3201,8,187,3,187,3203,8,187,
        1,188,3,188,3206,8,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,
        3214,8,188,1,189,1,189,1,189,3,189,3219,8,189,1,190,1,190,1,191,
        1,191,1,192,1,192,1,193,1,193,3,193,3229,8,193,1,194,1,194,1,194,
        3,194,3234,8,194,1,195,1,195,3,195,3238,8,195,1,196,1,196,1,196,
        1,196,1,196,0,3,300,352,362,197,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
        206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
        238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
        270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,
        302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
        334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,
        366,368,370,372,374,376,378,380,382,384,386,388,390,392,0,61,6,0,
        3,3,24,24,27,27,38,38,104,104,177,177,2,0,15,15,29,29,2,0,271,275,
        287,288,1,0,282,283,2,0,98,98,292,294,2,0,296,297,378,379,3,0,399,
        399,401,401,406,407,1,0,298,299,1,0,359,360,1,0,365,374,3,0,3,3,
        38,38,104,104,2,0,41,41,43,43,2,0,44,44,50,50,5,0,33,33,46,46,70,
        70,162,162,186,186,4,0,33,33,46,46,162,162,186,186,4,0,34,34,45,
        45,163,163,204,204,2,0,242,250,254,259,1,0,226,229,2,0,40,40,181,
        181,6,0,1,1,22,22,27,27,50,50,109,109,139,139,4,0,1,1,22,22,50,50,
        103,103,2,0,122,122,147,147,2,0,1,1,50,50,2,0,103,103,109,109,2,
        0,111,111,197,197,2,0,126,126,217,217,2,0,162,162,186,186,3,0,5,
        5,29,29,50,50,2,0,29,29,266,266,2,0,92,92,212,212,2,0,214,215,218,
        218,3,0,214,214,216,216,218,218,1,0,156,157,3,0,60,60,151,151,222,
        222,2,0,49,49,142,142,2,0,159,159,225,225,2,0,49,49,102,102,3,0,
        231,231,234,234,237,237,3,0,185,185,293,293,300,356,3,0,14,14,159,
        159,165,165,2,0,31,31,144,144,2,0,84,84,96,96,2,0,71,71,101,101,
        3,0,4,4,8,8,12,12,4,0,4,4,7,8,12,12,150,150,2,0,96,96,143,143,2,
        0,4,4,8,8,2,0,118,118,394,394,2,0,11,11,41,42,2,0,62,62,93,93,2,
        0,136,136,146,146,2,0,68,68,80,80,3,0,17,17,95,95,173,173,3,0,390,
        390,408,408,417,417,2,0,395,396,409,409,2,0,79,79,98,98,1,0,385,
        386,2,0,396,396,409,409,8,0,36,36,76,76,108,108,110,110,134,134,
        148,148,189,189,194,194,3,0,1,112,114,115,117,382,4,0,35,35,62,62,
        77,77,91,91,3738,0,395,1,0,0,0,2,407,1,0,0,0,4,425,1,0,0,0,6,450,
        1,0,0,0,8,452,1,0,0,0,10,461,1,0,0,0,12,470,1,0,0,0,14,474,1,0,0,
        0,16,702,1,0,0,0,18,704,1,0,0,0,20,712,1,0,0,0,22,716,1,0,0,0,24,
        723,1,0,0,0,26,725,1,0,0,0,28,731,1,0,0,0,30,737,1,0,0,0,32,753,
        1,0,0,0,34,780,1,0,0,0,36,805,1,0,0,0,38,823,1,0,0,0,40,853,1,0,
        0,0,42,880,1,0,0,0,44,903,1,0,0,0,46,905,1,0,0,0,48,937,1,0,0,0,
        50,951,1,0,0,0,52,953,1,0,0,0,54,961,1,0,0,0,56,963,1,0,0,0,58,981,
        1,0,0,0,60,983,1,0,0,0,62,1014,1,0,0,0,64,1016,1,0,0,0,66,1025,1,
        0,0,0,68,1030,1,0,0,0,70,1073,1,0,0,0,72,1080,1,0,0,0,74,1082,1,
        0,0,0,76,1091,1,0,0,0,78,1098,1,0,0,0,80,1105,1,0,0,0,82,1112,1,
        0,0,0,84,1114,1,0,0,0,86,1158,1,0,0,0,88,1160,1,0,0,0,90,1164,1,
        0,0,0,92,1168,1,0,0,0,94,1170,1,0,0,0,96,1187,1,0,0,0,98,1189,1,
        0,0,0,100,1198,1,0,0,0,102,1208,1,0,0,0,104,1230,1,0,0,0,106,1238,
        1,0,0,0,108,1253,1,0,0,0,110,1273,1,0,0,0,112,1282,1,0,0,0,114,1290,
        1,0,0,0,116,1317,1,0,0,0,118,1319,1,0,0,0,120,1330,1,0,0,0,122,1357,
        1,0,0,0,124,1384,1,0,0,0,126,1388,1,0,0,0,128,1397,1,0,0,0,130,1410,
        1,0,0,0,132,1425,1,0,0,0,134,1438,1,0,0,0,136,1454,1,0,0,0,138,1459,
        1,0,0,0,140,1465,1,0,0,0,142,1468,1,0,0,0,144,1471,1,0,0,0,146,1489,
        1,0,0,0,148,1491,1,0,0,0,150,1521,1,0,0,0,152,1525,1,0,0,0,154,1529,
        1,0,0,0,156,1533,1,0,0,0,158,1542,1,0,0,0,160,1564,1,0,0,0,162,1598,
        1,0,0,0,164,1600,1,0,0,0,166,1603,1,0,0,0,168,1610,1,0,0,0,170,1613,
        1,0,0,0,172,1625,1,0,0,0,174,1633,1,0,0,0,176,1643,1,0,0,0,178,1680,
        1,0,0,0,180,1695,1,0,0,0,182,1718,1,0,0,0,184,1748,1,0,0,0,186,1750,
        1,0,0,0,188,1758,1,0,0,0,190,1766,1,0,0,0,192,1828,1,0,0,0,194,1833,
        1,0,0,0,196,1838,1,0,0,0,198,1855,1,0,0,0,200,1857,1,0,0,0,202,1865,
        1,0,0,0,204,1869,1,0,0,0,206,1871,1,0,0,0,208,1881,1,0,0,0,210,1883,
        1,0,0,0,212,1887,1,0,0,0,214,1902,1,0,0,0,216,1904,1,0,0,0,218,1908,
        1,0,0,0,220,1920,1,0,0,0,222,1922,1,0,0,0,224,1924,1,0,0,0,226,2022,
        1,0,0,0,228,2084,1,0,0,0,230,2176,1,0,0,0,232,2197,1,0,0,0,234,2224,
        1,0,0,0,236,2226,1,0,0,0,238,2252,1,0,0,0,240,2254,1,0,0,0,242,2265,
        1,0,0,0,244,2284,1,0,0,0,246,2286,1,0,0,0,248,2308,1,0,0,0,250,2312,
        1,0,0,0,252,2314,1,0,0,0,254,2327,1,0,0,0,256,2338,1,0,0,0,258,2349,
        1,0,0,0,260,2358,1,0,0,0,262,2373,1,0,0,0,264,2391,1,0,0,0,266,2405,
        1,0,0,0,268,2419,1,0,0,0,270,2422,1,0,0,0,272,2473,1,0,0,0,274,2476,
        1,0,0,0,276,2482,1,0,0,0,278,2486,1,0,0,0,280,2492,1,0,0,0,282,2499,
        1,0,0,0,284,2502,1,0,0,0,286,2505,1,0,0,0,288,2515,1,0,0,0,290,2518,
        1,0,0,0,292,2522,1,0,0,0,294,2526,1,0,0,0,296,2531,1,0,0,0,298,2537,
        1,0,0,0,300,2552,1,0,0,0,302,2617,1,0,0,0,304,2625,1,0,0,0,306,2636,
        1,0,0,0,308,2638,1,0,0,0,310,2644,1,0,0,0,312,2649,1,0,0,0,314,2657,
        1,0,0,0,316,2669,1,0,0,0,318,2674,1,0,0,0,320,2682,1,0,0,0,322,2687,
        1,0,0,0,324,2695,1,0,0,0,326,2699,1,0,0,0,328,2703,1,0,0,0,330,2712,
        1,0,0,0,332,2726,1,0,0,0,334,2728,1,0,0,0,336,2773,1,0,0,0,338,2809,
        1,0,0,0,340,2811,1,0,0,0,342,2826,1,0,0,0,344,2829,1,0,0,0,346,2885,
        1,0,0,0,348,2887,1,0,0,0,350,2906,1,0,0,0,352,3037,1,0,0,0,354,3113,
        1,0,0,0,356,3123,1,0,0,0,358,3130,1,0,0,0,360,3138,1,0,0,0,362,3152,
        1,0,0,0,364,3165,1,0,0,0,366,3175,1,0,0,0,368,3179,1,0,0,0,370,3190,
        1,0,0,0,372,3192,1,0,0,0,374,3202,1,0,0,0,376,3205,1,0,0,0,378,3218,
        1,0,0,0,380,3220,1,0,0,0,382,3222,1,0,0,0,384,3224,1,0,0,0,386,3228,
        1,0,0,0,388,3233,1,0,0,0,390,3237,1,0,0,0,392,3239,1,0,0,0,394,396,
        3,2,1,0,395,394,1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,398,
        5,0,0,1,398,1,1,0,0,0,399,401,3,4,2,0,400,402,5,416,0,0,401,400,
        1,0,0,0,401,402,1,0,0,0,402,408,1,0,0,0,403,404,3,4,2,0,404,405,
        5,416,0,0,405,406,3,2,1,0,406,408,1,0,0,0,407,399,1,0,0,0,407,403,
        1,0,0,0,408,3,1,0,0,0,409,413,3,6,3,0,410,411,5,87,0,0,411,412,5,
        124,0,0,412,414,5,388,0,0,413,410,1,0,0,0,413,414,1,0,0,0,414,417,
        1,0,0,0,415,416,5,66,0,0,416,418,3,390,195,0,417,415,1,0,0,0,417,
        418,1,0,0,0,418,420,1,0,0,0,419,421,5,416,0,0,420,419,1,0,0,0,420,
        421,1,0,0,0,421,426,1,0,0,0,422,426,3,236,118,0,423,426,3,192,96,
        0,424,426,3,184,92,0,425,409,1,0,0,0,425,422,1,0,0,0,425,423,1,0,
        0,0,425,424,1,0,0,0,426,5,1,0,0,0,427,451,3,14,7,0,428,451,3,26,
        13,0,429,451,3,28,14,0,430,451,3,116,58,0,431,451,3,176,88,0,432,
        451,3,30,15,0,433,451,3,178,89,0,434,451,3,180,90,0,435,451,3,182,
        91,0,436,451,3,258,129,0,437,451,3,260,130,0,438,451,3,262,131,0,
        439,451,3,266,133,0,440,451,3,334,167,0,441,451,3,336,168,0,442,
        451,3,338,169,0,443,451,3,340,170,0,444,451,3,342,171,0,445,451,
        3,344,172,0,446,448,3,8,4,0,447,446,1,0,0,0,447,448,1,0,0,0,448,
        449,1,0,0,0,449,451,3,270,135,0,450,427,1,0,0,0,450,428,1,0,0,0,
        450,429,1,0,0,0,450,430,1,0,0,0,450,431,1,0,0,0,450,432,1,0,0,0,
        450,433,1,0,0,0,450,434,1,0,0,0,450,435,1,0,0,0,450,436,1,0,0,0,
        450,437,1,0,0,0,450,438,1,0,0,0,450,439,1,0,0,0,450,440,1,0,0,0,
        450,441,1,0,0,0,450,442,1,0,0,0,450,443,1,0,0,0,450,444,1,0,0,0,
        450,445,1,0,0,0,450,447,1,0,0,0,451,7,1,0,0,0,452,453,5,193,0,0,
        453,458,3,10,5,0,454,455,5,394,0,0,455,457,3,10,5,0,456,454,1,0,
        0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,9,1,0,0,
        0,460,458,1,0,0,0,461,463,3,388,194,0,462,464,3,12,6,0,463,462,1,
        0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,466,5,10,0,0,466,467,5,
        405,0,0,467,468,3,6,3,0,468,469,5,415,0,0,469,11,1,0,0,0,470,471,
        5,405,0,0,471,472,3,104,52,0,472,473,5,415,0,0,473,13,1,0,0,0,474,
        475,5,5,0,0,475,476,5,162,0,0,476,478,3,366,183,0,477,479,3,138,
        69,0,478,477,1,0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,480,485,3,16,
        8,0,481,482,5,394,0,0,482,484,3,16,8,0,483,481,1,0,0,0,484,487,1,
        0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,15,1,0,0,0,487,485,1,0,
        0,0,488,489,5,1,0,0,489,493,5,26,0,0,490,491,5,78,0,0,491,492,5,
        115,0,0,492,494,5,56,0,0,493,490,1,0,0,0,493,494,1,0,0,0,494,495,
        1,0,0,0,495,498,3,162,81,0,496,497,5,2,0,0,497,499,3,360,180,0,498,
        496,1,0,0,0,498,499,1,0,0,0,499,703,1,0,0,0,500,501,5,1,0,0,501,
        505,5,81,0,0,502,503,5,78,0,0,503,504,5,115,0,0,504,506,5,56,0,0,
        505,502,1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,510,3,166,83,
        0,508,509,5,2,0,0,509,511,3,360,180,0,510,508,1,0,0,0,510,511,1,
        0,0,0,511,703,1,0,0,0,512,513,5,1,0,0,513,517,5,133,0,0,514,515,
        5,78,0,0,515,516,5,115,0,0,516,518,5,56,0,0,517,514,1,0,0,0,517,
        518,1,0,0,0,518,519,1,0,0,0,519,522,3,168,84,0,520,521,5,2,0,0,521,
        523,3,360,180,0,522,520,1,0,0,0,522,523,1,0,0,0,523,703,1,0,0,0,
        524,525,5,15,0,0,525,528,3,24,12,0,526,527,5,68,0,0,527,529,3,366,
        183,0,528,526,1,0,0,0,528,529,1,0,0,0,529,703,1,0,0,0,530,531,5,
        22,0,0,531,534,5,26,0,0,532,533,5,78,0,0,533,535,5,56,0,0,534,532,
        1,0,0,0,534,535,1,0,0,0,535,536,1,0,0,0,536,539,3,360,180,0,537,
        538,5,80,0,0,538,540,3,24,12,0,539,537,1,0,0,0,539,540,1,0,0,0,540,
        703,1,0,0,0,541,542,5,22,0,0,542,545,5,81,0,0,543,544,5,78,0,0,544,
        546,5,56,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,
        550,3,360,180,0,548,549,5,80,0,0,549,551,3,24,12,0,550,548,1,0,0,
        0,550,551,1,0,0,0,551,703,1,0,0,0,552,553,5,22,0,0,553,556,5,133,
        0,0,554,555,5,78,0,0,555,557,5,56,0,0,556,554,1,0,0,0,556,557,1,
        0,0,0,557,558,1,0,0,0,558,561,3,360,180,0,559,560,5,80,0,0,560,562,
        3,24,12,0,561,559,1,0,0,0,561,562,1,0,0,0,562,703,1,0,0,0,563,564,
        5,27,0,0,564,567,5,26,0,0,565,566,5,78,0,0,566,568,5,56,0,0,567,
        565,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,570,3,360,180,0,
        570,571,5,388,0,0,571,703,1,0,0,0,572,573,5,40,0,0,573,574,5,191,
        0,0,574,703,3,352,176,0,575,576,5,44,0,0,576,703,3,24,12,0,577,578,
        5,50,0,0,578,581,5,26,0,0,579,580,5,78,0,0,580,582,5,56,0,0,581,
        579,1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,703,3,360,180,0,
        584,585,5,50,0,0,585,588,5,81,0,0,586,587,5,78,0,0,587,589,5,56,
        0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,590,1,0,0,0,590,703,3,360,
        180,0,591,592,5,50,0,0,592,595,5,133,0,0,593,594,5,78,0,0,594,596,
        5,56,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,0,597,703,
        3,360,180,0,598,599,5,50,0,0,599,703,3,24,12,0,600,602,5,67,0,0,
        601,603,3,24,12,0,602,601,1,0,0,0,602,603,1,0,0,0,603,703,1,0,0,
        0,604,605,5,103,0,0,605,608,5,81,0,0,606,607,5,78,0,0,607,609,5,
        56,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,613,3,
        360,180,0,611,612,5,80,0,0,612,614,3,24,12,0,613,611,1,0,0,0,613,
        614,1,0,0,0,614,703,1,0,0,0,615,616,5,103,0,0,616,619,5,133,0,0,
        617,618,5,78,0,0,618,620,5,56,0,0,619,617,1,0,0,0,619,620,1,0,0,
        0,620,621,1,0,0,0,621,624,3,360,180,0,622,623,5,80,0,0,623,625,3,
        24,12,0,624,622,1,0,0,0,624,625,1,0,0,0,625,703,1,0,0,0,626,627,
        5,109,0,0,627,630,5,26,0,0,628,629,5,78,0,0,629,631,5,56,0,0,630,
        628,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,633,3,360,180,0,
        633,634,3,170,85,0,634,703,1,0,0,0,635,636,5,109,0,0,636,639,5,26,
        0,0,637,638,5,78,0,0,638,640,5,56,0,0,639,637,1,0,0,0,639,640,1,
        0,0,0,640,641,1,0,0,0,641,642,3,360,180,0,642,643,5,27,0,0,643,644,
        5,388,0,0,644,703,1,0,0,0,645,646,5,109,0,0,646,649,5,26,0,0,647,
        648,5,78,0,0,648,650,5,56,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,
        651,1,0,0,0,651,652,3,360,180,0,652,653,5,138,0,0,653,654,3,22,11,
        0,654,703,1,0,0,0,655,656,5,109,0,0,656,659,5,26,0,0,657,658,5,78,
        0,0,658,660,5,56,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,661,1,0,
        0,0,661,703,3,162,81,0,662,663,5,109,0,0,663,664,5,122,0,0,664,665,
        5,18,0,0,665,703,3,352,176,0,666,667,5,109,0,0,667,703,3,156,78,
        0,668,669,5,111,0,0,669,679,3,24,12,0,670,671,5,170,0,0,671,672,
        5,47,0,0,672,680,5,388,0,0,673,674,5,170,0,0,674,675,5,187,0,0,675,
        680,5,388,0,0,676,677,5,170,0,0,677,678,5,162,0,0,678,680,3,366,
        183,0,679,670,1,0,0,0,679,673,1,0,0,0,679,676,1,0,0,0,680,703,1,
        0,0,0,681,682,5,138,0,0,682,703,5,177,0,0,683,684,5,139,0,0,684,
        687,5,26,0,0,685,686,5,78,0,0,686,688,5,56,0,0,687,685,1,0,0,0,687,
        688,1,0,0,0,688,689,1,0,0,0,689,690,3,360,180,0,690,691,5,170,0,
        0,691,692,3,360,180,0,692,703,1,0,0,0,693,694,5,140,0,0,694,695,
        3,24,12,0,695,696,5,68,0,0,696,697,3,366,183,0,697,703,1,0,0,0,698,
        699,5,181,0,0,699,700,3,18,9,0,700,701,3,284,142,0,701,703,1,0,0,
        0,702,488,1,0,0,0,702,500,1,0,0,0,702,512,1,0,0,0,702,524,1,0,0,
        0,702,530,1,0,0,0,702,541,1,0,0,0,702,552,1,0,0,0,702,563,1,0,0,
        0,702,572,1,0,0,0,702,575,1,0,0,0,702,577,1,0,0,0,702,584,1,0,0,
        0,702,591,1,0,0,0,702,598,1,0,0,0,702,600,1,0,0,0,702,604,1,0,0,
        0,702,615,1,0,0,0,702,626,1,0,0,0,702,635,1,0,0,0,702,645,1,0,0,
        0,702,655,1,0,0,0,702,662,1,0,0,0,702,666,1,0,0,0,702,668,1,0,0,
        0,702,681,1,0,0,0,702,683,1,0,0,0,702,693,1,0,0,0,702,698,1,0,0,
        0,703,17,1,0,0,0,704,709,3,20,10,0,705,706,5,394,0,0,706,708,3,20,
        10,0,707,705,1,0,0,0,708,711,1,0,0,0,709,707,1,0,0,0,709,710,1,0,
        0,0,710,19,1,0,0,0,711,709,1,0,0,0,712,713,3,360,180,0,713,714,5,
        399,0,0,714,715,3,352,176,0,715,21,1,0,0,0,716,717,7,0,0,0,717,23,
        1,0,0,0,718,719,5,126,0,0,719,724,3,352,176,0,720,721,5,126,0,0,
        721,722,5,77,0,0,722,724,5,388,0,0,723,718,1,0,0,0,723,720,1,0,0,
        0,724,25,1,0,0,0,725,726,5,15,0,0,726,727,5,46,0,0,727,729,3,366,
        183,0,728,730,3,138,69,0,729,728,1,0,0,0,729,730,1,0,0,0,730,27,
        1,0,0,0,731,732,5,21,0,0,732,733,5,162,0,0,733,735,3,366,183,0,734,
        736,3,24,12,0,735,734,1,0,0,0,735,736,1,0,0,0,736,29,1,0,0,0,737,
        738,5,40,0,0,738,739,5,68,0,0,739,741,3,366,183,0,740,742,3,138,
        69,0,741,740,1,0,0,0,741,742,1,0,0,0,742,744,1,0,0,0,743,745,3,284,
        142,0,744,743,1,0,0,0,744,745,1,0,0,0,745,31,1,0,0,0,746,754,5,15,
        0,0,747,750,5,29,0,0,748,749,5,121,0,0,749,751,5,140,0,0,750,748,
        1,0,0,0,750,751,1,0,0,0,751,754,1,0,0,0,752,754,5,140,0,0,753,746,
        1,0,0,0,753,747,1,0,0,0,753,752,1,0,0,0,754,756,1,0,0,0,755,757,
        5,164,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,762,
        5,162,0,0,759,760,5,78,0,0,760,761,5,115,0,0,761,763,5,56,0,0,762,
        759,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,766,3,366,183,0,
        765,767,3,140,70,0,766,765,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,
        0,768,770,3,138,69,0,769,768,1,0,0,0,769,770,1,0,0,0,770,772,1,0,
        0,0,771,773,3,146,73,0,772,771,1,0,0,0,772,773,1,0,0,0,773,775,1,
        0,0,0,774,776,3,148,74,0,775,774,1,0,0,0,775,776,1,0,0,0,776,778,
        1,0,0,0,777,779,3,144,72,0,778,777,1,0,0,0,778,779,1,0,0,0,779,33,
        1,0,0,0,780,781,7,1,0,0,781,785,5,33,0,0,782,783,5,78,0,0,783,784,
        5,115,0,0,784,786,5,56,0,0,785,782,1,0,0,0,785,786,1,0,0,0,786,787,
        1,0,0,0,787,789,3,388,194,0,788,790,3,138,69,0,789,788,1,0,0,0,789,
        790,1,0,0,0,790,792,1,0,0,0,791,793,3,158,79,0,792,791,1,0,0,0,792,
        793,1,0,0,0,793,796,1,0,0,0,794,795,5,27,0,0,795,797,5,388,0,0,796,
        794,1,0,0,0,796,797,1,0,0,0,797,35,1,0,0,0,798,806,5,15,0,0,799,
        802,5,29,0,0,800,801,5,121,0,0,801,803,5,140,0,0,802,800,1,0,0,0,
        802,803,1,0,0,0,803,806,1,0,0,0,804,806,5,140,0,0,805,798,1,0,0,
        0,805,799,1,0,0,0,805,804,1,0,0,0,806,807,1,0,0,0,807,811,5,46,0,
        0,808,809,5,78,0,0,809,810,5,115,0,0,810,812,5,56,0,0,811,808,1,
        0,0,0,811,812,1,0,0,0,812,813,1,0,0,0,813,815,3,366,183,0,814,816,
        3,140,70,0,815,814,1,0,0,0,815,816,1,0,0,0,816,818,1,0,0,0,817,819,
        3,138,69,0,818,817,1,0,0,0,818,819,1,0,0,0,819,820,1,0,0,0,820,821,
        3,118,59,0,821,822,3,122,61,0,822,37,1,0,0,0,823,824,7,1,0,0,824,
        825,5,100,0,0,825,829,5,186,0,0,826,827,5,78,0,0,827,828,5,115,0,
        0,828,830,5,56,0,0,829,826,1,0,0,0,829,830,1,0,0,0,830,831,1,0,0,
        0,831,833,3,366,183,0,832,834,3,140,70,0,833,832,1,0,0,0,833,834,
        1,0,0,0,834,836,1,0,0,0,835,837,3,138,69,0,836,835,1,0,0,0,836,837,
        1,0,0,0,837,843,1,0,0,0,838,839,5,193,0,0,839,841,5,168,0,0,840,
        842,5,386,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,844,1,0,0,0,843,
        838,1,0,0,0,843,844,1,0,0,0,844,846,1,0,0,0,845,847,3,142,71,0,846,
        845,1,0,0,0,846,847,1,0,0,0,847,849,1,0,0,0,848,850,3,146,73,0,849,
        848,1,0,0,0,849,850,1,0,0,0,850,851,1,0,0,0,851,852,3,144,72,0,852,
        39,1,0,0,0,853,854,7,1,0,0,854,855,5,104,0,0,855,859,5,186,0,0,856,
        857,5,78,0,0,857,858,5,115,0,0,858,860,5,56,0,0,859,856,1,0,0,0,
        859,860,1,0,0,0,860,861,1,0,0,0,861,863,3,366,183,0,862,864,3,140,
        70,0,863,862,1,0,0,0,863,864,1,0,0,0,864,866,1,0,0,0,865,867,3,138,
        69,0,866,865,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,870,3,146,
        73,0,869,868,1,0,0,0,869,870,1,0,0,0,870,876,1,0,0,0,871,877,3,142,
        71,0,872,874,3,148,74,0,873,875,5,129,0,0,874,873,1,0,0,0,874,875,
        1,0,0,0,875,877,1,0,0,0,876,871,1,0,0,0,876,872,1,0,0,0,877,878,
        1,0,0,0,878,879,3,144,72,0,879,41,1,0,0,0,880,883,7,1,0,0,881,882,
        5,121,0,0,882,884,5,140,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,
        885,1,0,0,0,885,889,5,186,0,0,886,887,5,78,0,0,887,888,5,115,0,0,
        888,890,5,56,0,0,889,886,1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,
        891,893,3,366,183,0,892,894,3,140,70,0,893,892,1,0,0,0,893,894,1,
        0,0,0,894,896,1,0,0,0,895,897,3,138,69,0,896,895,1,0,0,0,896,897,
        1,0,0,0,897,899,1,0,0,0,898,900,3,146,73,0,899,898,1,0,0,0,899,900,
        1,0,0,0,900,901,1,0,0,0,901,902,3,144,72,0,902,43,1,0,0,0,903,904,
        7,2,0,0,904,45,1,0,0,0,905,906,5,91,0,0,906,907,5,388,0,0,907,908,
        5,178,0,0,908,909,5,388,0,0,909,47,1,0,0,0,910,938,5,276,0,0,911,
        912,5,277,0,0,912,913,5,278,0,0,913,938,5,388,0,0,914,915,5,279,
        0,0,915,916,5,280,0,0,916,938,5,388,0,0,917,918,5,281,0,0,918,919,
        7,3,0,0,919,938,5,388,0,0,920,921,5,284,0,0,921,922,5,18,0,0,922,
        927,3,46,23,0,923,924,5,394,0,0,924,926,3,46,23,0,925,923,1,0,0,
        0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,938,1,0,0,
        0,929,927,1,0,0,0,930,931,5,285,0,0,931,932,5,278,0,0,932,935,5,
        388,0,0,933,934,5,286,0,0,934,936,5,388,0,0,935,933,1,0,0,0,935,
        936,1,0,0,0,936,938,1,0,0,0,937,910,1,0,0,0,937,911,1,0,0,0,937,
        914,1,0,0,0,937,917,1,0,0,0,937,920,1,0,0,0,937,930,1,0,0,0,938,
        49,1,0,0,0,939,940,5,115,0,0,940,952,5,270,0,0,941,944,5,270,0,0,
        942,943,5,193,0,0,943,945,3,44,22,0,944,942,1,0,0,0,944,945,1,0,
        0,0,945,946,1,0,0,0,946,947,5,18,0,0,947,952,5,388,0,0,948,949,5,
        270,0,0,949,950,5,193,0,0,950,952,3,48,24,0,951,939,1,0,0,0,951,
        941,1,0,0,0,951,948,1,0,0,0,952,51,1,0,0,0,953,954,5,289,0,0,954,
        955,5,290,0,0,955,956,5,388,0,0,956,53,1,0,0,0,957,962,3,204,102,
        0,958,962,3,202,101,0,959,962,5,8,0,0,960,962,5,253,0,0,961,957,
        1,0,0,0,961,958,1,0,0,0,961,959,1,0,0,0,961,960,1,0,0,0,962,55,1,
        0,0,0,963,964,5,291,0,0,964,969,3,54,27,0,965,966,5,394,0,0,966,
        968,3,54,27,0,967,965,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,969,
        970,1,0,0,0,970,974,1,0,0,0,971,969,1,0,0,0,972,973,5,268,0,0,973,
        975,3,206,103,0,974,972,1,0,0,0,974,975,1,0,0,0,975,57,1,0,0,0,976,
        982,5,101,0,0,977,982,5,8,0,0,978,982,5,253,0,0,979,980,7,4,0,0,
        980,982,5,388,0,0,981,976,1,0,0,0,981,977,1,0,0,0,981,978,1,0,0,
        0,981,979,1,0,0,0,982,59,1,0,0,0,983,984,5,295,0,0,984,989,3,58,
        29,0,985,986,5,394,0,0,986,988,3,58,29,0,987,985,1,0,0,0,988,991,
        1,0,0,0,989,987,1,0,0,0,989,990,1,0,0,0,990,61,1,0,0,0,991,989,1,
        0,0,0,992,993,3,388,194,0,993,994,5,399,0,0,994,1000,3,378,189,0,
        995,997,5,107,0,0,996,998,5,399,0,0,997,996,1,0,0,0,997,998,1,0,
        0,0,998,999,1,0,0,0,999,1001,3,378,189,0,1000,995,1,0,0,0,1000,1001,
        1,0,0,0,1001,1007,1,0,0,0,1002,1004,5,105,0,0,1003,1005,5,399,0,
        0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1006,1,0,0,0,1006,1008,
        3,378,189,0,1007,1002,1,0,0,0,1007,1008,1,0,0,0,1008,1010,1,0,0,
        0,1009,1011,7,5,0,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1015,
        1,0,0,0,1012,1013,5,202,0,0,1013,1015,5,388,0,0,1014,992,1,0,0,0,
        1014,1012,1,0,0,0,1015,63,1,0,0,0,1016,1017,5,153,0,0,1017,1022,
        3,62,31,0,1018,1019,5,394,0,0,1019,1021,3,62,31,0,1020,1018,1,0,
        0,0,1021,1024,1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,65,
        1,0,0,0,1024,1022,1,0,0,0,1025,1028,5,80,0,0,1026,1029,3,388,194,
        0,1027,1029,5,388,0,0,1028,1026,1,0,0,0,1028,1027,1,0,0,0,1029,67,
        1,0,0,0,1030,1031,5,29,0,0,1031,1033,5,196,0,0,1032,1034,3,70,35,
        0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1035,1,0,0,0,1035,1037,
        3,104,52,0,1036,1038,3,138,69,0,1037,1036,1,0,0,0,1037,1038,1,0,
        0,0,1038,1039,1,0,0,0,1039,1041,3,50,25,0,1040,1042,3,60,30,0,1041,
        1040,1,0,0,0,1041,1042,1,0,0,0,1042,1044,1,0,0,0,1043,1045,3,52,
        26,0,1044,1043,1,0,0,0,1044,1045,1,0,0,0,1045,1047,1,0,0,0,1046,
        1048,3,66,33,0,1047,1046,1,0,0,0,1047,1048,1,0,0,0,1048,1052,1,0,
        0,0,1049,1050,5,38,0,0,1050,1051,5,201,0,0,1051,1053,3,190,95,0,
        1052,1049,1,0,0,0,1052,1053,1,0,0,0,1053,1060,1,0,0,0,1054,1055,
        5,38,0,0,1055,1058,5,33,0,0,1056,1059,3,372,186,0,1057,1059,5,253,
        0,0,1058,1056,1,0,0,0,1058,1057,1,0,0,0,1059,1061,1,0,0,0,1060,1054,
        1,0,0,0,1060,1061,1,0,0,0,1061,1063,1,0,0,0,1062,1064,3,56,28,0,
        1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1066,1,0,0,0,1065,1067,
        3,64,32,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,69,1,0,0,0,1068,
        1069,5,121,0,0,1069,1074,5,140,0,0,1070,1071,5,78,0,0,1071,1072,
        5,115,0,0,1072,1074,5,56,0,0,1073,1068,1,0,0,0,1073,1070,1,0,0,0,
        1074,71,1,0,0,0,1075,1081,3,366,183,0,1076,1077,3,388,194,0,1077,
        1078,5,397,0,0,1078,1079,5,390,0,0,1079,1081,1,0,0,0,1080,1075,1,
        0,0,0,1080,1076,1,0,0,0,1081,73,1,0,0,0,1082,1084,3,388,194,0,1083,
        1085,3,138,69,0,1084,1083,1,0,0,0,1084,1085,1,0,0,0,1085,1086,1,
        0,0,0,1086,1087,5,119,0,0,1087,1088,3,72,36,0,1088,75,1,0,0,0,1089,
        1092,3,388,194,0,1090,1092,3,378,189,0,1091,1089,1,0,0,0,1091,1090,
        1,0,0,0,1092,77,1,0,0,0,1093,1099,3,76,38,0,1094,1095,3,76,38,0,
        1095,1096,7,6,0,0,1096,1097,3,76,38,0,1097,1099,1,0,0,0,1098,1093,
        1,0,0,0,1098,1094,1,0,0,0,1099,79,1,0,0,0,1100,1106,3,208,104,0,
        1101,1106,5,4,0,0,1102,1103,5,4,0,0,1103,1104,5,268,0,0,1104,1106,
        3,206,103,0,1105,1100,1,0,0,0,1105,1101,1,0,0,0,1105,1102,1,0,0,
        0,1106,81,1,0,0,0,1107,1113,3,208,104,0,1108,1113,5,4,0,0,1109,1110,
        5,4,0,0,1110,1111,5,268,0,0,1111,1113,3,206,103,0,1112,1107,1,0,
        0,0,1112,1108,1,0,0,0,1112,1109,1,0,0,0,1113,83,1,0,0,0,1114,1116,
        5,29,0,0,1115,1117,5,145,0,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,
        1117,1118,1,0,0,0,1118,1120,5,199,0,0,1119,1121,3,70,35,0,1120,1119,
        1,0,0,0,1120,1121,1,0,0,0,1121,1122,1,0,0,0,1122,1127,3,74,37,0,
        1123,1124,5,394,0,0,1124,1126,3,74,37,0,1125,1123,1,0,0,0,1126,1129,
        1,0,0,0,1127,1125,1,0,0,0,1127,1128,1,0,0,0,1128,1131,1,0,0,0,1129,
        1127,1,0,0,0,1130,1132,3,66,33,0,1131,1130,1,0,0,0,1131,1132,1,0,
        0,0,1132,1135,1,0,0,0,1133,1134,5,65,0,0,1134,1136,5,149,0,0,1135,
        1133,1,0,0,0,1135,1136,1,0,0,0,1136,1137,1,0,0,0,1137,1138,5,183,
        0,0,1138,1141,3,78,39,0,1139,1140,5,10,0,0,1140,1142,7,7,0,0,1141,
        1139,1,0,0,0,1141,1142,1,0,0,0,1142,1145,1,0,0,0,1143,1144,5,170,
        0,0,1144,1146,3,186,93,0,1145,1143,1,0,0,0,1145,1146,1,0,0,0,1146,
        85,1,0,0,0,1147,1159,5,359,0,0,1148,1159,5,360,0,0,1149,1152,5,362,
        0,0,1150,1151,5,394,0,0,1151,1153,7,8,0,0,1152,1150,1,0,0,0,1152,
        1153,1,0,0,0,1153,1159,1,0,0,0,1154,1155,5,115,0,0,1155,1159,5,357,
        0,0,1156,1159,5,363,0,0,1157,1159,5,364,0,0,1158,1147,1,0,0,0,1158,
        1148,1,0,0,0,1158,1149,1,0,0,0,1158,1154,1,0,0,0,1158,1156,1,0,0,
        0,1158,1157,1,0,0,0,1159,87,1,0,0,0,1160,1161,5,357,0,0,1161,1162,
        5,18,0,0,1162,1163,3,86,43,0,1163,89,1,0,0,0,1164,1165,7,9,0,0,1165,
        91,1,0,0,0,1166,1169,5,388,0,0,1167,1169,3,376,188,0,1168,1166,1,
        0,0,0,1168,1167,1,0,0,0,1169,93,1,0,0,0,1170,1171,5,105,0,0,1171,
        1172,3,90,45,0,1172,1173,5,399,0,0,1173,1174,3,92,46,0,1174,95,1,
        0,0,0,1175,1180,3,94,47,0,1176,1177,5,394,0,0,1177,1179,3,94,47,
        0,1178,1176,1,0,0,0,1179,1182,1,0,0,0,1180,1178,1,0,0,0,1180,1181,
        1,0,0,0,1181,1188,1,0,0,0,1182,1180,1,0,0,0,1183,1184,5,114,0,0,
        1184,1188,5,375,0,0,1185,1186,5,376,0,0,1186,1188,5,377,0,0,1187,
        1175,1,0,0,0,1187,1183,1,0,0,0,1187,1185,1,0,0,0,1188,97,1,0,0,0,
        1189,1191,5,65,0,0,1190,1192,5,358,0,0,1191,1190,1,0,0,0,1191,1192,
        1,0,0,0,1192,1193,1,0,0,0,1193,1194,5,86,0,0,1194,1195,3,376,188,
        0,1195,1196,3,380,190,0,1196,1197,3,96,48,0,1197,99,1,0,0,0,1198,
        1205,3,98,49,0,1199,1201,5,394,0,0,1200,1199,1,0,0,0,1200,1201,1,
        0,0,0,1201,1202,1,0,0,0,1202,1204,3,98,49,0,1203,1200,1,0,0,0,1204,
        1207,1,0,0,0,1205,1203,1,0,0,0,1205,1206,1,0,0,0,1206,101,1,0,0,
        0,1207,1205,1,0,0,0,1208,1209,5,29,0,0,1209,1211,5,200,0,0,1210,
        1212,3,70,35,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,
        0,0,1213,1215,3,388,194,0,1214,1216,3,138,69,0,1215,1214,1,0,0,0,
        1215,1216,1,0,0,0,1216,1218,1,0,0,0,1217,1219,3,66,33,0,1218,1217,
        1,0,0,0,1218,1219,1,0,0,0,1219,1221,1,0,0,0,1220,1222,3,88,44,0,
        1221,1220,1,0,0,0,1221,1222,1,0,0,0,1222,1224,1,0,0,0,1223,1225,
        3,100,50,0,1224,1223,1,0,0,0,1224,1225,1,0,0,0,1225,1228,1,0,0,0,
        1226,1227,5,170,0,0,1227,1229,3,186,93,0,1228,1226,1,0,0,0,1228,
        1229,1,0,0,0,1229,103,1,0,0,0,1230,1235,3,388,194,0,1231,1232,5,
        394,0,0,1232,1234,3,388,194,0,1233,1231,1,0,0,0,1234,1237,1,0,0,
        0,1235,1233,1,0,0,0,1235,1236,1,0,0,0,1236,105,1,0,0,0,1237,1235,
        1,0,0,0,1238,1239,5,29,0,0,1239,1241,5,201,0,0,1240,1242,3,70,35,
        0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1243,1,0,0,0,1243,1245,
        3,104,52,0,1244,1246,3,138,69,0,1245,1244,1,0,0,0,1245,1246,1,0,
        0,0,1246,1248,1,0,0,0,1247,1249,3,66,33,0,1248,1247,1,0,0,0,1248,
        1249,1,0,0,0,1249,1251,1,0,0,0,1250,1252,3,64,32,0,1251,1250,1,0,
        0,0,1251,1252,1,0,0,0,1252,107,1,0,0,0,1253,1254,5,29,0,0,1254,1255,
        5,153,0,0,1255,1257,5,202,0,0,1256,1258,3,70,35,0,1257,1256,1,0,
        0,0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1261,3,104,52,0,1260,
        1262,3,138,69,0,1261,1260,1,0,0,0,1261,1262,1,0,0,0,1262,1264,1,
        0,0,0,1263,1265,3,66,33,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,1265,
        1267,1,0,0,0,1266,1268,3,64,32,0,1267,1266,1,0,0,0,1267,1268,1,0,
        0,0,1268,1271,1,0,0,0,1269,1270,5,170,0,0,1270,1272,3,186,93,0,1271,
        1269,1,0,0,0,1271,1272,1,0,0,0,1272,109,1,0,0,0,1273,1274,3,388,
        194,0,1274,1275,5,399,0,0,1275,1280,3,92,46,0,1276,1278,5,115,0,
        0,1277,1276,1,0,0,0,1277,1278,1,0,0,0,1278,1279,1,0,0,0,1279,1281,
        5,380,0,0,1280,1277,1,0,0,0,1280,1281,1,0,0,0,1281,111,1,0,0,0,1282,
        1287,3,110,55,0,1283,1284,5,394,0,0,1284,1286,3,110,55,0,1285,1283,
        1,0,0,0,1286,1289,1,0,0,0,1287,1285,1,0,0,0,1287,1288,1,0,0,0,1288,
        113,1,0,0,0,1289,1287,1,0,0,0,1290,1291,5,29,0,0,1291,1292,5,232,
        0,0,1292,1296,5,233,0,0,1293,1294,5,78,0,0,1294,1295,5,115,0,0,1295,
        1297,5,56,0,0,1296,1293,1,0,0,0,1296,1297,1,0,0,0,1297,1298,1,0,
        0,0,1298,1300,3,388,194,0,1299,1301,3,138,69,0,1300,1299,1,0,0,0,
        1300,1301,1,0,0,0,1301,1302,1,0,0,0,1302,1303,5,10,0,0,1303,1304,
        3,112,56,0,1304,115,1,0,0,0,1305,1318,3,34,17,0,1306,1318,3,36,18,
        0,1307,1318,3,38,19,0,1308,1318,3,40,20,0,1309,1318,3,32,16,0,1310,
        1318,3,42,21,0,1311,1318,3,68,34,0,1312,1318,3,84,42,0,1313,1318,
        3,102,51,0,1314,1318,3,106,53,0,1315,1318,3,108,54,0,1316,1318,3,
        114,57,0,1317,1305,1,0,0,0,1317,1306,1,0,0,0,1317,1307,1,0,0,0,1317,
        1308,1,0,0,0,1317,1309,1,0,0,0,1317,1310,1,0,0,0,1317,1311,1,0,0,
        0,1317,1312,1,0,0,0,1317,1313,1,0,0,0,1317,1314,1,0,0,0,1317,1315,
        1,0,0,0,1317,1316,1,0,0,0,1318,117,1,0,0,0,1319,1320,5,405,0,0,1320,
        1325,3,120,60,0,1321,1322,5,394,0,0,1322,1324,3,120,60,0,1323,1321,
        1,0,0,0,1324,1327,1,0,0,0,1325,1323,1,0,0,0,1325,1326,1,0,0,0,1326,
        1328,1,0,0,0,1327,1325,1,0,0,0,1328,1329,5,415,0,0,1329,119,1,0,
        0,0,1330,1331,3,388,194,0,1331,1353,3,346,173,0,1332,1333,4,60,0,
        1,1333,1334,5,38,0,0,1334,1335,3,378,189,0,1335,1336,6,60,-1,0,1336,
        1352,1,0,0,0,1337,1338,4,60,1,1,1338,1339,5,58,0,0,1339,1340,3,352,
        176,0,1340,1341,6,60,-1,0,1341,1352,1,0,0,0,1342,1343,4,60,2,1,1343,
        1344,5,75,0,0,1344,1352,6,60,-1,0,1345,1346,4,60,3,1,1346,1347,5,
        83,0,0,1347,1352,6,60,-1,0,1348,1349,4,60,4,1,1349,1350,5,89,0,0,
        1350,1352,6,60,-1,0,1351,1332,1,0,0,0,1351,1337,1,0,0,0,1351,1342,
        1,0,0,0,1351,1345,1,0,0,0,1351,1348,1,0,0,0,1352,1355,1,0,0,0,1353,
        1351,1,0,0,0,1353,1354,1,0,0,0,1354,121,1,0,0,0,1355,1353,1,0,0,
        0,1356,1358,3,124,62,0,1357,1356,1,0,0,0,1357,1358,1,0,0,0,1358,
        1381,1,0,0,0,1359,1360,4,61,5,1,1360,1361,3,128,64,0,1361,1362,6,
        61,-1,0,1362,1380,1,0,0,0,1363,1364,4,61,6,1,1364,1365,3,130,65,
        0,1365,1366,6,61,-1,0,1366,1380,1,0,0,0,1367,1368,4,61,7,1,1368,
        1369,3,132,66,0,1369,1370,6,61,-1,0,1370,1380,1,0,0,0,1371,1372,
        4,61,8,1,1372,1373,3,134,67,0,1373,1374,6,61,-1,0,1374,1380,1,0,
        0,0,1375,1376,4,61,9,1,1376,1377,3,136,68,0,1377,1378,6,61,-1,0,
        1378,1380,1,0,0,0,1379,1359,1,0,0,0,1379,1363,1,0,0,0,1379,1367,
        1,0,0,0,1379,1371,1,0,0,0,1379,1375,1,0,0,0,1380,1383,1,0,0,0,1381,
        1379,1,0,0,0,1381,1382,1,0,0,0,1382,123,1,0,0,0,1383,1381,1,0,0,
        0,1384,1385,5,132,0,0,1385,1386,5,91,0,0,1386,1387,3,348,174,0,1387,
        125,1,0,0,0,1388,1395,3,388,194,0,1389,1392,3,388,194,0,1390,1391,
        5,405,0,0,1391,1393,5,415,0,0,1392,1390,1,0,0,0,1392,1393,1,0,0,
        0,1393,1396,1,0,0,0,1394,1396,3,378,189,0,1395,1389,1,0,0,0,1395,
        1394,1,0,0,0,1396,127,1,0,0,0,1397,1398,5,155,0,0,1398,1399,5,405,
        0,0,1399,1400,3,388,194,0,1400,1404,5,405,0,0,1401,1403,3,126,63,
        0,1402,1401,1,0,0,0,1403,1406,1,0,0,0,1404,1402,1,0,0,0,1404,1405,
        1,0,0,0,1405,1407,1,0,0,0,1406,1404,1,0,0,0,1407,1408,5,415,0,0,
        1408,1409,5,415,0,0,1409,129,1,0,0,0,1410,1411,5,97,0,0,1411,1421,
        5,405,0,0,1412,1422,5,386,0,0,1413,1414,5,107,0,0,1414,1415,5,386,
        0,0,1415,1416,5,105,0,0,1416,1422,5,386,0,0,1417,1418,5,105,0,0,
        1418,1419,5,386,0,0,1419,1420,5,107,0,0,1420,1422,5,386,0,0,1421,
        1412,1,0,0,0,1421,1413,1,0,0,0,1421,1417,1,0,0,0,1422,1423,1,0,0,
        0,1423,1424,5,415,0,0,1424,131,1,0,0,0,1425,1426,5,94,0,0,1426,1427,
        5,405,0,0,1427,1428,3,388,194,0,1428,1432,5,405,0,0,1429,1431,3,
        126,63,0,1430,1429,1,0,0,0,1431,1434,1,0,0,0,1432,1430,1,0,0,0,1432,
        1433,1,0,0,0,1433,1435,1,0,0,0,1434,1432,1,0,0,0,1435,1436,5,415,
        0,0,1436,1437,5,415,0,0,1437,133,1,0,0,0,1438,1439,5,136,0,0,1439,
        1450,5,405,0,0,1440,1441,5,107,0,0,1441,1442,3,388,194,0,1442,1443,
        5,105,0,0,1443,1444,3,388,194,0,1444,1451,1,0,0,0,1445,1446,5,105,
        0,0,1446,1447,3,388,194,0,1447,1448,5,107,0,0,1448,1449,3,388,194,
        0,1449,1451,1,0,0,0,1450,1440,1,0,0,0,1450,1445,1,0,0,0,1451,1452,
        1,0,0,0,1452,1453,5,415,0,0,1453,135,1,0,0,0,1454,1455,5,153,0,0,
        1455,1456,5,405,0,0,1456,1457,3,318,159,0,1457,1458,5,415,0,0,1458,
        137,1,0,0,0,1459,1460,5,119,0,0,1460,1463,5,23,0,0,1461,1464,3,388,
        194,0,1462,1464,5,388,0,0,1463,1461,1,0,0,0,1463,1462,1,0,0,0,1464,
        139,1,0,0,0,1465,1466,5,184,0,0,1466,1467,5,388,0,0,1467,141,1,0,
        0,0,1468,1469,5,170,0,0,1469,1470,3,366,183,0,1470,143,1,0,0,0,1471,
        1472,5,10,0,0,1472,1473,3,266,133,0,1473,145,1,0,0,0,1474,1475,5,
        405,0,0,1475,1480,3,160,80,0,1476,1477,5,394,0,0,1477,1479,3,160,
        80,0,1478,1476,1,0,0,0,1479,1482,1,0,0,0,1480,1478,1,0,0,0,1480,
        1481,1,0,0,0,1481,1483,1,0,0,0,1482,1480,1,0,0,0,1483,1484,5,415,
        0,0,1484,1490,1,0,0,0,1485,1486,5,10,0,0,1486,1490,3,366,183,0,1487,
        1488,5,10,0,0,1488,1490,3,364,182,0,1489,1474,1,0,0,0,1489,1485,
        1,0,0,0,1489,1487,1,0,0,0,1490,147,1,0,0,0,1491,1518,3,158,79,0,
        1492,1493,4,74,10,1,1493,1494,3,290,145,0,1494,1495,6,74,-1,0,1495,
        1517,1,0,0,0,1496,1497,4,74,11,1,1497,1498,3,150,75,0,1498,1499,
        6,74,-1,0,1499,1517,1,0,0,0,1500,1501,4,74,12,1,1501,1502,3,152,
        76,0,1502,1503,6,74,-1,0,1503,1517,1,0,0,0,1504,1505,4,74,13,1,1505,
        1506,3,154,77,0,1506,1507,6,74,-1,0,1507,1517,1,0,0,0,1508,1509,
        4,74,14,1,1509,1510,3,156,78,0,1510,1511,6,74,-1,0,1511,1517,1,0,
        0,0,1512,1513,4,74,15,1,1513,1514,3,298,149,0,1514,1515,6,74,-1,
        0,1515,1517,1,0,0,0,1516,1492,1,0,0,0,1516,1496,1,0,0,0,1516,1500,
        1,0,0,0,1516,1504,1,0,0,0,1516,1508,1,0,0,0,1516,1512,1,0,0,0,1517,
        1520,1,0,0,0,1518,1516,1,0,0,0,1518,1519,1,0,0,0,1519,149,1,0,0,
        0,1520,1518,1,0,0,0,1521,1522,5,126,0,0,1522,1523,5,18,0,0,1523,
        1524,3,352,176,0,1524,151,1,0,0,0,1525,1526,5,132,0,0,1526,1527,
        5,91,0,0,1527,1528,3,352,176,0,1528,153,1,0,0,0,1529,1530,5,147,
        0,0,1530,1531,5,18,0,0,1531,1532,3,352,176,0,1532,155,1,0,0,0,1533,
        1534,5,177,0,0,1534,1539,3,174,87,0,1535,1536,5,394,0,0,1536,1538,
        3,174,87,0,1537,1535,1,0,0,0,1538,1541,1,0,0,0,1539,1537,1,0,0,0,
        1539,1540,1,0,0,0,1540,157,1,0,0,0,1541,1539,1,0,0,0,1542,1544,5,
        53,0,0,1543,1545,5,399,0,0,1544,1543,1,0,0,0,1544,1545,1,0,0,0,1545,
        1546,1,0,0,0,1546,1552,3,390,195,0,1547,1549,5,405,0,0,1548,1550,
        3,348,174,0,1549,1548,1,0,0,0,1549,1550,1,0,0,0,1550,1551,1,0,0,
        0,1551,1553,5,415,0,0,1552,1547,1,0,0,0,1552,1553,1,0,0,0,1553,159,
        1,0,0,0,1554,1565,3,162,81,0,1555,1556,5,28,0,0,1556,1557,3,388,
        194,0,1557,1558,5,21,0,0,1558,1559,3,352,176,0,1559,1565,1,0,0,0,
        1560,1561,5,81,0,0,1561,1565,3,166,83,0,1562,1563,5,133,0,0,1563,
        1565,3,168,84,0,1564,1554,1,0,0,0,1564,1555,1,0,0,0,1564,1560,1,
        0,0,0,1564,1562,1,0,0,0,1565,161,1,0,0,0,1566,1567,3,360,180,0,1567,
        1569,3,346,173,0,1568,1570,3,164,82,0,1569,1568,1,0,0,0,1569,1570,
        1,0,0,0,1570,1573,1,0,0,0,1571,1572,5,27,0,0,1572,1574,5,388,0,0,
        1573,1571,1,0,0,0,1573,1574,1,0,0,0,1574,1576,1,0,0,0,1575,1577,
        3,170,85,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,1580,1,0,0,0,
        1578,1579,5,177,0,0,1579,1581,3,352,176,0,1580,1578,1,0,0,0,1580,
        1581,1,0,0,0,1581,1599,1,0,0,0,1582,1584,3,360,180,0,1583,1585,3,
        346,173,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,1586,1,0,0,0,
        1586,1589,3,164,82,0,1587,1588,5,27,0,0,1588,1590,5,388,0,0,1589,
        1587,1,0,0,0,1589,1590,1,0,0,0,1590,1592,1,0,0,0,1591,1593,3,170,
        85,0,1592,1591,1,0,0,0,1592,1593,1,0,0,0,1593,1596,1,0,0,0,1594,
        1595,5,177,0,0,1595,1597,3,352,176,0,1596,1594,1,0,0,0,1596,1597,
        1,0,0,0,1597,1599,1,0,0,0,1598,1566,1,0,0,0,1598,1582,1,0,0,0,1599,
        163,1,0,0,0,1600,1601,7,10,0,0,1601,1602,3,352,176,0,1602,165,1,
        0,0,0,1603,1604,3,360,180,0,1604,1605,3,352,176,0,1605,1606,5,178,
        0,0,1606,1607,3,346,173,0,1607,1608,5,72,0,0,1608,1609,5,386,0,0,
        1609,167,1,0,0,0,1610,1611,3,360,180,0,1611,1612,3,264,132,0,1612,
        169,1,0,0,0,1613,1614,5,24,0,0,1614,1615,5,405,0,0,1615,1620,3,172,
        86,0,1616,1617,5,394,0,0,1617,1619,3,172,86,0,1618,1616,1,0,0,0,
        1619,1622,1,0,0,0,1620,1618,1,0,0,0,1620,1621,1,0,0,0,1621,1623,
        1,0,0,0,1622,1620,1,0,0,0,1623,1624,5,415,0,0,1624,171,1,0,0,0,1625,
        1631,3,388,194,0,1626,1628,5,405,0,0,1627,1629,3,348,174,0,1628,
        1627,1,0,0,0,1628,1629,1,0,0,0,1629,1630,1,0,0,0,1630,1632,5,415,
        0,0,1631,1626,1,0,0,0,1631,1632,1,0,0,0,1632,173,1,0,0,0,1633,1641,
        3,352,176,0,1634,1642,5,40,0,0,1635,1636,5,170,0,0,1636,1637,5,47,
        0,0,1637,1642,5,388,0,0,1638,1639,5,170,0,0,1639,1640,5,187,0,0,
        1640,1642,5,388,0,0,1641,1634,1,0,0,0,1641,1635,1,0,0,0,1641,1638,
        1,0,0,0,1641,1642,1,0,0,0,1642,175,1,0,0,0,1643,1645,7,11,0,0,1644,
        1646,5,162,0,0,1645,1644,1,0,0,0,1645,1646,1,0,0,0,1646,1647,1,0,
        0,0,1647,1648,3,362,181,0,1648,177,1,0,0,0,1649,1650,7,12,0,0,1650,
        1653,5,33,0,0,1651,1652,5,78,0,0,1652,1654,5,56,0,0,1653,1651,1,
        0,0,0,1653,1654,1,0,0,0,1654,1655,1,0,0,0,1655,1657,3,372,186,0,
        1656,1658,3,138,69,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1681,
        1,0,0,0,1659,1666,7,12,0,0,1660,1667,5,46,0,0,1661,1663,5,164,0,
        0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,1663,1664,1,0,0,0,1664,1667,
        5,162,0,0,1665,1667,5,186,0,0,1666,1660,1,0,0,0,1666,1662,1,0,0,
        0,1666,1665,1,0,0,0,1667,1670,1,0,0,0,1668,1669,5,78,0,0,1669,1671,
        5,56,0,0,1670,1668,1,0,0,0,1670,1671,1,0,0,0,1671,1672,1,0,0,0,1672,
        1674,3,366,183,0,1673,1675,3,138,69,0,1674,1673,1,0,0,0,1674,1675,
        1,0,0,0,1675,1678,1,0,0,0,1676,1677,5,114,0,0,1677,1679,5,39,0,0,
        1678,1676,1,0,0,0,1678,1679,1,0,0,0,1679,1681,1,0,0,0,1680,1649,
        1,0,0,0,1680,1659,1,0,0,0,1681,179,1,0,0,0,1682,1683,5,56,0,0,1683,
        1684,5,33,0,0,1684,1696,3,372,186,0,1685,1692,5,56,0,0,1686,1693,
        5,46,0,0,1687,1689,5,164,0,0,1688,1687,1,0,0,0,1688,1689,1,0,0,0,
        1689,1690,1,0,0,0,1690,1693,5,162,0,0,1691,1693,5,186,0,0,1692,1686,
        1,0,0,0,1692,1688,1,0,0,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,
        1694,1,0,0,0,1694,1696,3,366,183,0,1695,1682,1,0,0,0,1695,1685,1,
        0,0,0,1696,181,1,0,0,0,1697,1698,5,57,0,0,1698,1719,3,6,3,0,1699,
        1700,5,57,0,0,1700,1701,5,13,0,0,1701,1719,3,6,3,0,1702,1703,5,57,
        0,0,1703,1704,5,160,0,0,1704,1719,3,6,3,0,1705,1706,5,57,0,0,1706,
        1707,5,127,0,0,1707,1719,3,6,3,0,1708,1709,5,57,0,0,1709,1710,5,
        128,0,0,1710,1719,3,6,3,0,1711,1712,5,57,0,0,1712,1713,5,135,0,0,
        1713,1714,5,175,0,0,1714,1719,3,6,3,0,1715,1716,5,57,0,0,1716,1717,
        5,54,0,0,1717,1719,3,6,3,0,1718,1697,1,0,0,0,1718,1699,1,0,0,0,1718,
        1702,1,0,0,0,1718,1705,1,0,0,0,1718,1708,1,0,0,0,1718,1711,1,0,0,
        0,1718,1715,1,0,0,0,1719,183,1,0,0,0,1720,1722,5,269,0,0,1721,1723,
        3,138,69,0,1722,1721,1,0,0,0,1722,1723,1,0,0,0,1723,1727,1,0,0,0,
        1724,1725,5,195,0,0,1725,1726,5,252,0,0,1726,1728,5,65,0,0,1727,
        1724,1,0,0,0,1727,1728,1,0,0,0,1728,1729,1,0,0,0,1729,1730,3,200,
        100,0,1730,1731,5,119,0,0,1731,1732,3,198,99,0,1732,1733,5,68,0,
        0,1733,1734,3,186,93,0,1734,1749,1,0,0,0,1735,1737,5,269,0,0,1736,
        1738,3,138,69,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1742,1,
        0,0,0,1739,1740,5,231,0,0,1740,1741,5,252,0,0,1741,1743,5,65,0,0,
        1742,1739,1,0,0,0,1742,1743,1,0,0,0,1743,1744,1,0,0,0,1744,1745,
        3,190,95,0,1745,1746,5,68,0,0,1746,1747,3,186,93,0,1747,1749,1,0,
        0,0,1748,1720,1,0,0,0,1748,1735,1,0,0,0,1749,185,1,0,0,0,1750,1755,
        3,82,41,0,1751,1752,5,394,0,0,1752,1754,3,82,41,0,1753,1751,1,0,
        0,0,1754,1757,1,0,0,0,1755,1753,1,0,0,0,1755,1756,1,0,0,0,1756,187,
        1,0,0,0,1757,1755,1,0,0,0,1758,1763,3,204,102,0,1759,1760,5,394,
        0,0,1760,1762,3,204,102,0,1761,1759,1,0,0,0,1762,1765,1,0,0,0,1763,
        1761,1,0,0,0,1763,1764,1,0,0,0,1764,189,1,0,0,0,1765,1763,1,0,0,
        0,1766,1771,3,202,101,0,1767,1768,5,394,0,0,1768,1770,3,202,101,
        0,1769,1767,1,0,0,0,1770,1773,1,0,0,0,1771,1769,1,0,0,0,1771,1772,
        1,0,0,0,1772,191,1,0,0,0,1773,1771,1,0,0,0,1774,1776,5,195,0,0,1775,
        1777,3,138,69,0,1776,1775,1,0,0,0,1776,1777,1,0,0,0,1777,1778,1,
        0,0,0,1778,1779,3,200,100,0,1779,1780,5,119,0,0,1780,1781,3,198,
        99,0,1781,1789,1,0,0,0,1782,1783,5,394,0,0,1783,1784,3,200,100,0,
        1784,1785,5,119,0,0,1785,1786,3,198,99,0,1786,1788,1,0,0,0,1787,
        1782,1,0,0,0,1788,1791,1,0,0,0,1789,1787,1,0,0,0,1789,1790,1,0,0,
        0,1790,1792,1,0,0,0,1791,1789,1,0,0,0,1792,1793,5,170,0,0,1793,1794,
        3,206,103,0,1794,1795,3,194,97,0,1795,1829,1,0,0,0,1796,1798,5,195,
        0,0,1797,1799,3,138,69,0,1798,1797,1,0,0,0,1798,1799,1,0,0,0,1799,
        1800,1,0,0,0,1800,1801,3,190,95,0,1801,1802,5,170,0,0,1802,1806,
        3,206,103,0,1803,1804,5,193,0,0,1804,1805,5,231,0,0,1805,1807,5,
        252,0,0,1806,1803,1,0,0,0,1806,1807,1,0,0,0,1807,1809,1,0,0,0,1808,
        1810,3,196,98,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1829,1,
        0,0,0,1811,1812,5,195,0,0,1812,1813,5,32,0,0,1813,1822,5,267,0,0,
        1814,1815,5,405,0,0,1815,1816,3,200,100,0,1816,1817,5,119,0,0,1817,
        1818,3,198,99,0,1818,1819,5,415,0,0,1819,1823,1,0,0,0,1820,1821,
        5,119,0,0,1821,1823,3,198,99,0,1822,1814,1,0,0,0,1822,1820,1,0,0,
        0,1823,1824,1,0,0,0,1824,1825,5,170,0,0,1825,1826,3,206,103,0,1826,
        1827,3,194,97,0,1827,1829,1,0,0,0,1828,1774,1,0,0,0,1828,1796,1,
        0,0,0,1828,1811,1,0,0,0,1829,193,1,0,0,0,1830,1831,5,193,0,0,1831,
        1832,5,195,0,0,1832,1834,5,252,0,0,1833,1830,1,0,0,0,1833,1834,1,
        0,0,0,1834,1836,1,0,0,0,1835,1837,3,196,98,0,1836,1835,1,0,0,0,1836,
        1837,1,0,0,0,1837,195,1,0,0,0,1838,1839,5,193,0,0,1839,1840,5,140,
        0,0,1840,1841,5,252,0,0,1841,197,1,0,0,0,1842,1856,3,372,186,0,1843,
        1856,3,366,183,0,1844,1847,5,390,0,0,1845,1847,3,388,194,0,1846,
        1844,1,0,0,0,1846,1845,1,0,0,0,1847,1848,1,0,0,0,1848,1850,5,397,
        0,0,1849,1846,1,0,0,0,1849,1850,1,0,0,0,1850,1853,1,0,0,0,1851,1854,
        5,390,0,0,1852,1854,3,388,194,0,1853,1851,1,0,0,0,1853,1852,1,0,
        0,0,1854,1856,1,0,0,0,1855,1842,1,0,0,0,1855,1843,1,0,0,0,1855,1849,
        1,0,0,0,1856,199,1,0,0,0,1857,1862,3,234,117,0,1858,1859,5,394,0,
        0,1859,1861,3,234,117,0,1860,1858,1,0,0,0,1861,1864,1,0,0,0,1862,
        1860,1,0,0,0,1862,1863,1,0,0,0,1863,201,1,0,0,0,1864,1862,1,0,0,
        0,1865,1866,3,388,194,0,1866,203,1,0,0,0,1867,1870,5,205,0,0,1868,
        1870,3,388,194,0,1869,1867,1,0,0,0,1869,1868,1,0,0,0,1870,205,1,
        0,0,0,1871,1876,3,208,104,0,1872,1873,5,394,0,0,1873,1875,3,208,
        104,0,1874,1872,1,0,0,0,1875,1878,1,0,0,0,1876,1874,1,0,0,0,1876,
        1877,1,0,0,0,1877,207,1,0,0,0,1878,1876,1,0,0,0,1879,1882,3,204,
        102,0,1880,1882,3,202,101,0,1881,1879,1,0,0,0,1881,1880,1,0,0,0,
        1882,209,1,0,0,0,1883,1885,5,149,0,0,1884,1886,3,240,120,0,1885,
        1884,1,0,0,0,1885,1886,1,0,0,0,1886,211,1,0,0,0,1887,1889,5,85,0,
        0,1888,1890,3,240,120,0,1889,1888,1,0,0,0,1889,1890,1,0,0,0,1890,
        213,1,0,0,0,1891,1893,5,29,0,0,1892,1894,7,13,0,0,1893,1892,1,0,
        0,0,1893,1894,1,0,0,0,1894,1903,1,0,0,0,1895,1899,5,29,0,0,1896,
        1897,5,203,0,0,1897,1900,5,164,0,0,1898,1900,5,164,0,0,1899,1896,
        1,0,0,0,1899,1898,1,0,0,0,1899,1900,1,0,0,0,1900,1901,1,0,0,0,1901,
        1903,5,162,0,0,1902,1891,1,0,0,0,1902,1895,1,0,0,0,1903,215,1,0,
        0,0,1904,1906,5,50,0,0,1905,1907,7,14,0,0,1906,1905,1,0,0,0,1906,
        1907,1,0,0,0,1907,217,1,0,0,0,1908,1910,5,154,0,0,1909,1911,7,15,
        0,0,1910,1909,1,0,0,0,1910,1911,1,0,0,0,1911,219,1,0,0,0,1912,1914,
        5,238,0,0,1913,1915,5,221,0,0,1914,1913,1,0,0,0,1914,1915,1,0,0,
        0,1915,1921,1,0,0,0,1916,1921,5,239,0,0,1917,1921,5,260,0,0,1918,
        1921,5,240,0,0,1919,1921,5,241,0,0,1920,1912,1,0,0,0,1920,1916,1,
        0,0,0,1920,1917,1,0,0,0,1920,1918,1,0,0,0,1920,1919,1,0,0,0,1921,
        221,1,0,0,0,1922,1923,7,16,0,0,1923,223,1,0,0,0,1924,1925,7,17,0,
        0,1925,225,1,0,0,0,1926,1928,5,5,0,0,1927,1929,7,18,0,0,1928,1927,
        1,0,0,0,1928,1929,1,0,0,0,1929,1931,1,0,0,0,1930,1932,3,240,120,
        0,1931,1930,1,0,0,0,1931,1932,1,0,0,0,1932,2023,1,0,0,0,1933,1935,
        7,18,0,0,1934,1936,3,240,120,0,1935,1934,1,0,0,0,1935,1936,1,0,0,
        0,1936,2023,1,0,0,0,1937,1938,5,5,0,0,1938,2023,5,162,0,0,1939,1941,
        5,5,0,0,1940,1942,7,19,0,0,1941,1940,1,0,0,0,1941,1942,1,0,0,0,1942,
        1943,1,0,0,0,1943,1945,5,26,0,0,1944,1946,3,240,120,0,1945,1944,
        1,0,0,0,1945,1946,1,0,0,0,1946,2023,1,0,0,0,1947,1948,7,19,0,0,1948,
        1950,5,26,0,0,1949,1951,3,240,120,0,1950,1949,1,0,0,0,1950,1951,
        1,0,0,0,1951,2023,1,0,0,0,1952,1954,5,5,0,0,1953,1955,7,20,0,0,1954,
        1953,1,0,0,0,1954,1955,1,0,0,0,1955,1956,1,0,0,0,1956,2023,5,81,
        0,0,1957,1959,7,20,0,0,1958,1957,1,0,0,0,1958,1959,1,0,0,0,1959,
        1960,1,0,0,0,1960,2023,5,81,0,0,1961,1963,5,5,0,0,1962,1964,5,109,
        0,0,1963,1962,1,0,0,0,1963,1964,1,0,0,0,1964,1965,1,0,0,0,1965,1966,
        7,21,0,0,1966,2023,5,18,0,0,1967,1968,5,109,0,0,1968,1969,7,21,0,
        0,1969,2023,5,18,0,0,1970,1972,5,5,0,0,1971,1970,1,0,0,0,1971,1972,
        1,0,0,0,1972,1974,1,0,0,0,1973,1975,7,22,0,0,1974,1973,1,0,0,0,1974,
        1975,1,0,0,0,1975,1976,1,0,0,0,1976,2023,5,28,0,0,1977,1979,5,5,
        0,0,1978,1980,7,23,0,0,1979,1978,1,0,0,0,1979,1980,1,0,0,0,1980,
        1981,1,0,0,0,1981,2023,5,177,0,0,1982,1983,7,23,0,0,1983,2023,5,
        177,0,0,1984,1985,5,5,0,0,1985,2023,5,153,0,0,1986,1991,5,5,0,0,
        1987,1988,5,5,0,0,1988,1991,5,109,0,0,1989,1991,5,109,0,0,1990,1986,
        1,0,0,0,1990,1987,1,0,0,0,1990,1989,1,0,0,0,1991,1992,1,0,0,0,1992,
        2023,5,251,0,0,1993,1995,5,5,0,0,1994,1993,1,0,0,0,1994,1995,1,0,
        0,0,1995,1996,1,0,0,0,1996,1997,7,24,0,0,1997,2023,7,25,0,0,1998,
        2000,5,5,0,0,1999,1998,1,0,0,0,1999,2000,1,0,0,0,2000,2001,1,0,0,
        0,2001,2002,5,67,0,0,2002,2023,5,126,0,0,2003,2004,5,5,0,0,2004,
        2006,5,186,0,0,2005,2007,5,198,0,0,2006,2005,1,0,0,0,2006,2007,1,
        0,0,0,2007,2023,1,0,0,0,2008,2009,5,5,0,0,2009,2010,5,100,0,0,2010,
        2011,5,186,0,0,2011,2023,5,198,0,0,2012,2013,5,198,0,0,2013,2023,
        5,186,0,0,2014,2015,5,5,0,0,2015,2016,7,26,0,0,2016,2020,5,109,0,
        0,2017,2021,5,135,0,0,2018,2019,5,261,0,0,2019,2021,5,262,0,0,2020,
        2017,1,0,0,0,2020,2018,1,0,0,0,2021,2023,1,0,0,0,2022,1926,1,0,0,
        0,2022,1933,1,0,0,0,2022,1937,1,0,0,0,2022,1939,1,0,0,0,2022,1947,
        1,0,0,0,2022,1952,1,0,0,0,2022,1958,1,0,0,0,2022,1961,1,0,0,0,2022,
        1967,1,0,0,0,2022,1971,1,0,0,0,2022,1977,1,0,0,0,2022,1982,1,0,0,
        0,2022,1984,1,0,0,0,2022,1990,1,0,0,0,2022,1994,1,0,0,0,2022,1999,
        1,0,0,0,2022,2003,1,0,0,0,2022,2008,1,0,0,0,2022,2012,1,0,0,0,2022,
        2014,1,0,0,0,2023,227,1,0,0,0,2024,2025,5,206,0,0,2025,2085,5,230,
        0,0,2026,2027,7,27,0,0,2027,2085,5,196,0,0,2028,2029,7,27,0,0,2029,
        2085,5,201,0,0,2030,2031,5,201,0,0,2031,2085,5,231,0,0,2032,2034,
        7,27,0,0,2033,2035,5,145,0,0,2034,2033,1,0,0,0,2034,2035,1,0,0,0,
        2035,2036,1,0,0,0,2036,2085,5,199,0,0,2037,2038,7,27,0,0,2038,2085,
        5,200,0,0,2039,2041,7,27,0,0,2040,2042,5,153,0,0,2041,2040,1,0,0,
        0,2041,2042,1,0,0,0,2042,2043,1,0,0,0,2043,2085,5,202,0,0,2044,2045,
        5,154,0,0,2045,2085,5,206,0,0,2046,2085,5,207,0,0,2047,2048,5,154,
        0,0,2048,2049,5,29,0,0,2049,2085,5,196,0,0,2050,2085,5,208,0,0,2051,
        2052,5,154,0,0,2052,2053,5,29,0,0,2053,2085,5,201,0,0,2054,2085,
        5,209,0,0,2055,2056,5,154,0,0,2056,2085,5,264,0,0,2057,2058,5,154,
        0,0,2058,2060,5,29,0,0,2059,2061,5,145,0,0,2060,2059,1,0,0,0,2060,
        2061,1,0,0,0,2061,2062,1,0,0,0,2062,2085,5,199,0,0,2063,2085,5,210,
        0,0,2064,2065,5,154,0,0,2065,2066,5,29,0,0,2066,2085,5,200,0,0,2067,
        2085,5,211,0,0,2068,2069,5,154,0,0,2069,2085,5,265,0,0,2070,2071,
        5,154,0,0,2071,2073,5,29,0,0,2072,2074,5,153,0,0,2073,2072,1,0,0,
        0,2073,2074,1,0,0,0,2074,2075,1,0,0,0,2075,2085,5,202,0,0,2076,2078,
        7,28,0,0,2077,2076,1,0,0,0,2077,2078,1,0,0,0,2078,2079,1,0,0,0,2079,
        2080,5,261,0,0,2080,2081,5,262,0,0,2081,2085,5,253,0,0,2082,2083,
        5,262,0,0,2083,2085,5,253,0,0,2084,2024,1,0,0,0,2084,2026,1,0,0,
        0,2084,2028,1,0,0,0,2084,2030,1,0,0,0,2084,2032,1,0,0,0,2084,2037,
        1,0,0,0,2084,2039,1,0,0,0,2084,2044,1,0,0,0,2084,2046,1,0,0,0,2084,
        2047,1,0,0,0,2084,2050,1,0,0,0,2084,2051,1,0,0,0,2084,2054,1,0,0,
        0,2084,2055,1,0,0,0,2084,2057,1,0,0,0,2084,2063,1,0,0,0,2084,2064,
        1,0,0,0,2084,2067,1,0,0,0,2084,2068,1,0,0,0,2084,2070,1,0,0,0,2084,
        2077,1,0,0,0,2084,2082,1,0,0,0,2085,229,1,0,0,0,2086,2088,5,161,
        0,0,2087,2089,7,29,0,0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,
        2177,1,0,0,0,2090,2177,5,212,0,0,2091,2093,5,161,0,0,2092,2091,1,
        0,0,0,2092,2093,1,0,0,0,2093,2094,1,0,0,0,2094,2095,5,50,0,0,2095,
        2177,5,213,0,0,2096,2097,5,161,0,0,2097,2098,5,50,0,0,2098,2100,
        7,30,0,0,2099,2101,5,213,0,0,2100,2099,1,0,0,0,2100,2101,1,0,0,0,
        2101,2177,1,0,0,0,2102,2103,5,50,0,0,2103,2104,7,30,0,0,2104,2177,
        5,213,0,0,2105,2106,5,50,0,0,2106,2177,7,31,0,0,2107,2108,5,161,
        0,0,2108,2115,5,137,0,0,2109,2116,5,219,0,0,2110,2116,5,46,0,0,2111,
        2113,5,220,0,0,2112,2111,1,0,0,0,2112,2113,1,0,0,0,2113,2114,1,0,
        0,0,2114,2116,5,45,0,0,2115,2109,1,0,0,0,2115,2110,1,0,0,0,2115,
        2112,1,0,0,0,2115,2116,1,0,0,0,2116,2177,1,0,0,0,2117,2124,5,137,
        0,0,2118,2125,5,219,0,0,2119,2125,5,46,0,0,2120,2122,5,220,0,0,2121,
        2120,1,0,0,0,2121,2122,1,0,0,0,2122,2123,1,0,0,0,2123,2125,5,45,
        0,0,2124,2118,1,0,0,0,2124,2119,1,0,0,0,2124,2121,1,0,0,0,2125,2177,
        1,0,0,0,2126,2128,5,161,0,0,2127,2129,7,32,0,0,2128,2127,1,0,0,0,
        2128,2129,1,0,0,0,2129,2131,1,0,0,0,2130,2132,5,177,0,0,2131,2130,
        1,0,0,0,2131,2132,1,0,0,0,2132,2133,1,0,0,0,2133,2177,5,106,0,0,
        2134,2136,7,32,0,0,2135,2137,5,177,0,0,2136,2135,1,0,0,0,2136,2137,
        1,0,0,0,2137,2138,1,0,0,0,2138,2177,5,106,0,0,2139,2141,5,161,0,
        0,2140,2142,7,32,0,0,2141,2140,1,0,0,0,2141,2142,1,0,0,0,2142,2143,
        1,0,0,0,2143,2177,7,33,0,0,2144,2145,7,32,0,0,2145,2177,7,33,0,0,
        2146,2148,5,161,0,0,2147,2149,7,32,0,0,2148,2147,1,0,0,0,2148,2149,
        1,0,0,0,2149,2150,1,0,0,0,2150,2151,7,34,0,0,2151,2177,5,151,0,0,
        2152,2153,7,32,0,0,2153,2154,7,34,0,0,2154,2177,5,151,0,0,2155,2157,
        5,161,0,0,2156,2158,7,32,0,0,2157,2156,1,0,0,0,2157,2158,1,0,0,0,
        2158,2159,1,0,0,0,2159,2160,5,223,0,0,2160,2177,5,224,0,0,2161,2162,
        7,32,0,0,2162,2163,5,223,0,0,2163,2177,5,224,0,0,2164,2166,5,161,
        0,0,2165,2164,1,0,0,0,2165,2166,1,0,0,0,2166,2167,1,0,0,0,2167,2168,
        7,35,0,0,2168,2177,5,141,0,0,2169,2170,5,161,0,0,2170,2172,5,63,
        0,0,2171,2173,7,36,0,0,2172,2171,1,0,0,0,2172,2173,1,0,0,0,2173,
        2177,1,0,0,0,2174,2175,5,63,0,0,2175,2177,7,36,0,0,2176,2086,1,0,
        0,0,2176,2090,1,0,0,0,2176,2092,1,0,0,0,2176,2096,1,0,0,0,2176,2102,
        1,0,0,0,2176,2105,1,0,0,0,2176,2107,1,0,0,0,2176,2117,1,0,0,0,2176,
        2126,1,0,0,0,2176,2134,1,0,0,0,2176,2139,1,0,0,0,2176,2144,1,0,0,
        0,2176,2146,1,0,0,0,2176,2152,1,0,0,0,2176,2155,1,0,0,0,2176,2161,
        1,0,0,0,2176,2165,1,0,0,0,2176,2169,1,0,0,0,2176,2174,1,0,0,0,2177,
        231,1,0,0,0,2178,2179,5,232,0,0,2179,2181,5,233,0,0,2180,2182,7,
        37,0,0,2181,2180,1,0,0,0,2181,2182,1,0,0,0,2182,2198,1,0,0,0,2183,
        2185,7,27,0,0,2184,2183,1,0,0,0,2184,2185,1,0,0,0,2185,2186,1,0,
        0,0,2186,2187,5,232,0,0,2187,2198,5,233,0,0,2188,2189,5,154,0,0,
        2189,2190,5,232,0,0,2190,2192,5,235,0,0,2191,2193,5,236,0,0,2192,
        2191,1,0,0,0,2192,2193,1,0,0,0,2193,2198,1,0,0,0,2194,2195,5,182,
        0,0,2195,2196,5,232,0,0,2196,2198,5,233,0,0,2197,2178,1,0,0,0,2197,
        2184,1,0,0,0,2197,2188,1,0,0,0,2197,2194,1,0,0,0,2198,233,1,0,0,
        0,2199,2225,3,210,105,0,2200,2225,3,212,106,0,2201,2225,3,214,107,
        0,2202,2225,3,216,108,0,2203,2225,5,176,0,0,2204,2205,5,92,0,0,2205,
        2225,5,135,0,0,2206,2225,5,120,0,0,2207,2225,3,218,109,0,2208,2225,
        3,220,110,0,2209,2225,3,222,111,0,2210,2225,3,224,112,0,2211,2225,
        3,226,113,0,2212,2225,5,4,0,0,2213,2225,5,253,0,0,2214,2225,5,120,
        0,0,2215,2225,5,263,0,0,2216,2225,3,228,114,0,2217,2225,3,230,115,
        0,2218,2225,3,232,116,0,2219,2220,5,162,0,0,2220,2225,5,53,0,0,2221,
        2222,5,231,0,0,2222,2225,5,252,0,0,2223,2225,5,237,0,0,2224,2199,
        1,0,0,0,2224,2200,1,0,0,0,2224,2201,1,0,0,0,2224,2202,1,0,0,0,2224,
        2203,1,0,0,0,2224,2204,1,0,0,0,2224,2206,1,0,0,0,2224,2207,1,0,0,
        0,2224,2208,1,0,0,0,2224,2209,1,0,0,0,2224,2210,1,0,0,0,2224,2211,
        1,0,0,0,2224,2212,1,0,0,0,2224,2213,1,0,0,0,2224,2214,1,0,0,0,2224,
        2215,1,0,0,0,2224,2216,1,0,0,0,2224,2217,1,0,0,0,2224,2218,1,0,0,
        0,2224,2219,1,0,0,0,2224,2221,1,0,0,0,2224,2223,1,0,0,0,2225,235,
        1,0,0,0,2226,2227,5,85,0,0,2227,2229,5,87,0,0,2228,2230,5,162,0,
        0,2229,2228,1,0,0,0,2229,2230,1,0,0,0,2230,2234,1,0,0,0,2231,2235,
        3,366,183,0,2232,2233,5,70,0,0,2233,2235,3,364,182,0,2234,2231,1,
        0,0,0,2234,2232,1,0,0,0,2235,2237,1,0,0,0,2236,2238,3,238,119,0,
        2237,2236,1,0,0,0,2237,2238,1,0,0,0,2238,2240,1,0,0,0,2239,2241,
        3,298,149,0,2240,2239,1,0,0,0,2240,2241,1,0,0,0,2241,2242,1,0,0,
        0,2242,2243,3,244,122,0,2243,237,1,0,0,0,2244,2253,3,240,120,0,2245,
        2246,5,405,0,0,2246,2249,5,390,0,0,2247,2248,5,268,0,0,2248,2250,
        3,240,120,0,2249,2247,1,0,0,0,2249,2250,1,0,0,0,2250,2251,1,0,0,
        0,2251,2253,5,415,0,0,2252,2244,1,0,0,0,2252,2245,1,0,0,0,2253,239,
        1,0,0,0,2254,2255,5,405,0,0,2255,2260,3,360,180,0,2256,2257,5,394,
        0,0,2257,2259,3,360,180,0,2258,2256,1,0,0,0,2259,2262,1,0,0,0,2260,
        2258,1,0,0,0,2260,2261,1,0,0,0,2261,2263,1,0,0,0,2262,2260,1,0,0,
        0,2263,2264,5,415,0,0,2264,241,1,0,0,0,2265,2266,7,38,0,0,2266,243,
        1,0,0,0,2267,2268,5,66,0,0,2268,2270,3,242,121,0,2269,2271,3,388,
        194,0,2270,2269,1,0,0,0,2271,2272,1,0,0,0,2272,2270,1,0,0,0,2272,
        2273,1,0,0,0,2273,2285,1,0,0,0,2274,2276,5,66,0,0,2275,2274,1,0,
        0,0,2275,2276,1,0,0,0,2276,2277,1,0,0,0,2277,2285,3,256,128,0,2278,
        2280,3,266,133,0,2279,2281,5,416,0,0,2280,2279,1,0,0,0,2280,2281,
        1,0,0,0,2281,2282,1,0,0,0,2282,2283,5,0,0,1,2283,2285,1,0,0,0,2284,
        2267,1,0,0,0,2284,2275,1,0,0,0,2284,2278,1,0,0,0,2285,245,1,0,0,
        0,2286,2291,3,378,189,0,2287,2288,5,394,0,0,2288,2290,3,378,189,
        0,2289,2287,1,0,0,0,2290,2293,1,0,0,0,2291,2289,1,0,0,0,2291,2292,
        1,0,0,0,2292,247,1,0,0,0,2293,2291,1,0,0,0,2294,2309,3,378,189,0,
        2295,2296,5,405,0,0,2296,2297,3,376,188,0,2297,2298,5,394,0,0,2298,
        2299,3,376,188,0,2299,2300,5,415,0,0,2300,2309,1,0,0,0,2301,2302,
        3,388,194,0,2302,2304,5,405,0,0,2303,2305,3,246,123,0,2304,2303,
        1,0,0,0,2304,2305,1,0,0,0,2305,2306,1,0,0,0,2306,2307,5,415,0,0,
        2307,2309,1,0,0,0,2308,2294,1,0,0,0,2308,2295,1,0,0,0,2308,2301,
        1,0,0,0,2309,249,1,0,0,0,2310,2313,3,248,124,0,2311,2313,3,252,126,
        0,2312,2310,1,0,0,0,2312,2311,1,0,0,0,2313,251,1,0,0,0,2314,2323,
        5,403,0,0,2315,2320,3,250,125,0,2316,2317,5,394,0,0,2317,2319,3,
        250,125,0,2318,2316,1,0,0,0,2319,2322,1,0,0,0,2320,2318,1,0,0,0,
        2320,2321,1,0,0,0,2321,2324,1,0,0,0,2322,2320,1,0,0,0,2323,2315,
        1,0,0,0,2323,2324,1,0,0,0,2324,2325,1,0,0,0,2325,2326,5,414,0,0,
        2326,253,1,0,0,0,2327,2328,5,405,0,0,2328,2333,3,250,125,0,2329,
        2330,5,394,0,0,2330,2332,3,250,125,0,2331,2329,1,0,0,0,2332,2335,
        1,0,0,0,2333,2331,1,0,0,0,2333,2334,1,0,0,0,2334,2336,1,0,0,0,2335,
        2333,1,0,0,0,2336,2337,5,415,0,0,2337,255,1,0,0,0,2338,2339,5,185,
        0,0,2339,2346,3,254,127,0,2340,2342,5,394,0,0,2341,2340,1,0,0,0,
        2341,2342,1,0,0,0,2342,2343,1,0,0,0,2343,2345,3,254,127,0,2344,2341,
        1,0,0,0,2345,2348,1,0,0,0,2346,2344,1,0,0,0,2346,2347,1,0,0,0,2347,
        257,1,0,0,0,2348,2346,1,0,0,0,2349,2350,5,92,0,0,2350,2352,5,112,
        0,0,2351,2353,3,138,69,0,2352,2351,1,0,0,0,2352,2353,1,0,0,0,2353,
        2354,1,0,0,0,2354,2356,3,284,142,0,2355,2357,7,39,0,0,2356,2355,
        1,0,0,0,2356,2357,1,0,0,0,2357,259,1,0,0,0,2358,2359,5,120,0,0,2359,
        2360,5,162,0,0,2360,2362,3,366,183,0,2361,2363,3,138,69,0,2362,2361,
        1,0,0,0,2362,2363,1,0,0,0,2363,2365,1,0,0,0,2364,2366,3,24,12,0,
        2365,2364,1,0,0,0,2365,2366,1,0,0,0,2366,2368,1,0,0,0,2367,2369,
        5,61,0,0,2368,2367,1,0,0,0,2368,2369,1,0,0,0,2369,2371,1,0,0,0,2370,
        2372,5,37,0,0,2371,2370,1,0,0,0,2371,2372,1,0,0,0,2372,261,1,0,0,
        0,2373,2374,5,139,0,0,2374,2375,5,162,0,0,2375,2376,3,366,183,0,
        2376,2377,5,170,0,0,2377,2385,3,366,183,0,2378,2379,5,394,0,0,2379,
        2380,3,366,183,0,2380,2381,5,170,0,0,2381,2382,3,366,183,0,2382,
        2384,1,0,0,0,2383,2378,1,0,0,0,2384,2387,1,0,0,0,2385,2383,1,0,0,
        0,2385,2386,1,0,0,0,2386,2389,1,0,0,0,2387,2385,1,0,0,0,2388,2390,
        3,138,69,0,2389,2388,1,0,0,0,2389,2390,1,0,0,0,2390,263,1,0,0,0,
        2391,2393,5,405,0,0,2392,2394,3,272,136,0,2393,2392,1,0,0,0,2393,
        2394,1,0,0,0,2394,2395,1,0,0,0,2395,2396,5,149,0,0,2396,2398,3,348,
        174,0,2397,2399,3,286,143,0,2398,2397,1,0,0,0,2398,2399,1,0,0,0,
        2399,2401,1,0,0,0,2400,2402,3,292,146,0,2401,2400,1,0,0,0,2401,2402,
        1,0,0,0,2402,2403,1,0,0,0,2403,2404,5,415,0,0,2404,265,1,0,0,0,2405,
        2411,3,268,134,0,2406,2407,5,180,0,0,2407,2408,5,4,0,0,2408,2410,
        3,268,134,0,2409,2406,1,0,0,0,2410,2413,1,0,0,0,2411,2409,1,0,0,
        0,2411,2412,1,0,0,0,2412,267,1,0,0,0,2413,2411,1,0,0,0,2414,2420,
        3,270,135,0,2415,2416,5,405,0,0,2416,2417,3,266,133,0,2417,2418,
        5,415,0,0,2418,2420,1,0,0,0,2419,2414,1,0,0,0,2419,2415,1,0,0,0,
        2420,269,1,0,0,0,2421,2423,3,272,136,0,2422,2421,1,0,0,0,2422,2423,
        1,0,0,0,2423,2424,1,0,0,0,2424,2426,5,149,0,0,2425,2427,5,48,0,0,
        2426,2425,1,0,0,0,2426,2427,1,0,0,0,2427,2429,1,0,0,0,2428,2430,
        3,274,137,0,2429,2428,1,0,0,0,2429,2430,1,0,0,0,2430,2431,1,0,0,
        0,2431,2433,3,348,174,0,2432,2434,3,276,138,0,2433,2432,1,0,0,0,
        2433,2434,1,0,0,0,2434,2436,1,0,0,0,2435,2437,3,278,139,0,2436,2435,
        1,0,0,0,2436,2437,1,0,0,0,2437,2439,1,0,0,0,2438,2440,3,280,140,
        0,2439,2438,1,0,0,0,2439,2440,1,0,0,0,2440,2442,1,0,0,0,2441,2443,
        3,282,141,0,2442,2441,1,0,0,0,2442,2443,1,0,0,0,2443,2445,1,0,0,
        0,2444,2446,3,284,142,0,2445,2444,1,0,0,0,2445,2446,1,0,0,0,2446,
        2448,1,0,0,0,2447,2449,3,286,143,0,2448,2447,1,0,0,0,2448,2449,1,
        0,0,0,2449,2452,1,0,0,0,2450,2451,5,193,0,0,2451,2453,7,40,0,0,2452,
        2450,1,0,0,0,2452,2453,1,0,0,0,2453,2456,1,0,0,0,2454,2455,5,193,
        0,0,2455,2457,5,172,0,0,2456,2454,1,0,0,0,2456,2457,1,0,0,0,2457,
        2459,1,0,0,0,2458,2460,3,288,144,0,2459,2458,1,0,0,0,2459,2460,1,
        0,0,0,2460,2462,1,0,0,0,2461,2463,3,290,145,0,2462,2461,1,0,0,0,
        2462,2463,1,0,0,0,2463,2465,1,0,0,0,2464,2466,3,294,147,0,2465,2464,
        1,0,0,0,2465,2466,1,0,0,0,2466,2468,1,0,0,0,2467,2469,3,296,148,
        0,2468,2467,1,0,0,0,2468,2469,1,0,0,0,2469,2471,1,0,0,0,2470,2472,
        3,298,149,0,2471,2470,1,0,0,0,2471,2472,1,0,0,0,2472,271,1,0,0,0,
        2473,2474,5,193,0,0,2474,2475,3,348,174,0,2475,273,1,0,0,0,2476,
        2477,5,171,0,0,2477,2480,5,386,0,0,2478,2479,5,193,0,0,2479,2481,
        5,167,0,0,2480,2478,1,0,0,0,2480,2481,1,0,0,0,2481,275,1,0,0,0,2482,
        2483,5,68,0,0,2483,2484,3,300,150,0,2484,277,1,0,0,0,2485,2487,7,
        41,0,0,2486,2485,1,0,0,0,2486,2487,1,0,0,0,2487,2488,1,0,0,0,2488,
        2489,5,9,0,0,2489,2490,5,90,0,0,2490,2491,3,348,174,0,2491,279,1,
        0,0,0,2492,2493,5,192,0,0,2493,2494,3,388,194,0,2494,2495,5,10,0,
        0,2495,2496,5,405,0,0,2496,2497,3,322,161,0,2497,2498,5,415,0,0,
        2498,281,1,0,0,0,2499,2500,5,131,0,0,2500,2501,3,352,176,0,2501,
        283,1,0,0,0,2502,2503,5,191,0,0,2503,2504,3,352,176,0,2504,285,1,
        0,0,0,2505,2506,5,73,0,0,2506,2513,5,18,0,0,2507,2508,7,40,0,0,2508,
        2509,5,405,0,0,2509,2510,3,348,174,0,2510,2511,5,415,0,0,2511,2514,
        1,0,0,0,2512,2514,3,348,174,0,2513,2507,1,0,0,0,2513,2512,1,0,0,
        0,2514,287,1,0,0,0,2515,2516,5,74,0,0,2516,2517,3,352,176,0,2517,
        289,1,0,0,0,2518,2519,5,122,0,0,2519,2520,5,18,0,0,2520,2521,3,312,
        156,0,2521,291,1,0,0,0,2522,2523,5,122,0,0,2523,2524,5,18,0,0,2524,
        2525,3,348,174,0,2525,293,1,0,0,0,2526,2527,5,99,0,0,2527,2528,3,
        310,155,0,2528,2529,5,18,0,0,2529,2530,3,348,174,0,2530,295,1,0,
        0,0,2531,2532,5,99,0,0,2532,2535,3,310,155,0,2533,2534,5,193,0,0,
        2534,2536,5,167,0,0,2535,2533,1,0,0,0,2535,2536,1,0,0,0,2536,297,
        1,0,0,0,2537,2538,5,153,0,0,2538,2539,3,318,159,0,2539,299,1,0,0,
        0,2540,2541,6,150,-1,0,2541,2543,3,362,181,0,2542,2544,5,61,0,0,
        2543,2542,1,0,0,0,2543,2544,1,0,0,0,2544,2546,1,0,0,0,2545,2547,
        3,308,154,0,2546,2545,1,0,0,0,2546,2547,1,0,0,0,2547,2553,1,0,0,
        0,2548,2549,5,405,0,0,2549,2550,3,300,150,0,2550,2551,5,415,0,0,
        2551,2553,1,0,0,0,2552,2540,1,0,0,0,2552,2548,1,0,0,0,2553,2571,
        1,0,0,0,2554,2555,10,3,0,0,2555,2556,3,304,152,0,2556,2557,3,300,
        150,4,2557,2570,1,0,0,0,2558,2560,10,4,0,0,2559,2561,7,42,0,0,2560,
        2559,1,0,0,0,2560,2561,1,0,0,0,2561,2563,1,0,0,0,2562,2564,3,302,
        151,0,2563,2562,1,0,0,0,2563,2564,1,0,0,0,2564,2565,1,0,0,0,2565,
        2566,5,90,0,0,2566,2567,3,300,150,0,2567,2568,3,306,153,0,2568,2570,
        1,0,0,0,2569,2554,1,0,0,0,2569,2558,1,0,0,0,2570,2573,1,0,0,0,2571,
        2569,1,0,0,0,2571,2572,1,0,0,0,2572,301,1,0,0,0,2573,2571,1,0,0,
        0,2574,2576,7,43,0,0,2575,2574,1,0,0,0,2575,2576,1,0,0,0,2576,2577,
        1,0,0,0,2577,2584,5,84,0,0,2578,2580,5,84,0,0,2579,2581,7,43,0,0,
        2580,2579,1,0,0,0,2580,2581,1,0,0,0,2581,2584,1,0,0,0,2582,2584,
        7,43,0,0,2583,2575,1,0,0,0,2583,2578,1,0,0,0,2583,2582,1,0,0,0,2584,
        2618,1,0,0,0,2585,2587,7,44,0,0,2586,2585,1,0,0,0,2586,2587,1,0,
        0,0,2587,2588,1,0,0,0,2588,2590,7,45,0,0,2589,2591,5,123,0,0,2590,
        2589,1,0,0,0,2590,2591,1,0,0,0,2591,2600,1,0,0,0,2592,2594,7,45,
        0,0,2593,2595,5,123,0,0,2594,2593,1,0,0,0,2594,2595,1,0,0,0,2595,
        2597,1,0,0,0,2596,2598,7,44,0,0,2597,2596,1,0,0,0,2597,2598,1,0,
        0,0,2598,2600,1,0,0,0,2599,2586,1,0,0,0,2599,2592,1,0,0,0,2600,2618,
        1,0,0,0,2601,2603,7,46,0,0,2602,2601,1,0,0,0,2602,2603,1,0,0,0,2603,
        2604,1,0,0,0,2604,2606,5,69,0,0,2605,2607,5,123,0,0,2606,2605,1,
        0,0,0,2606,2607,1,0,0,0,2607,2616,1,0,0,0,2608,2610,5,69,0,0,2609,
        2611,5,123,0,0,2610,2609,1,0,0,0,2610,2611,1,0,0,0,2611,2613,1,0,
        0,0,2612,2614,7,46,0,0,2613,2612,1,0,0,0,2613,2614,1,0,0,0,2614,
        2616,1,0,0,0,2615,2602,1,0,0,0,2615,2608,1,0,0,0,2616,2618,1,0,0,
        0,2617,2583,1,0,0,0,2617,2599,1,0,0,0,2617,2615,1,0,0,0,2618,303,
        1,0,0,0,2619,2621,7,42,0,0,2620,2619,1,0,0,0,2620,2621,1,0,0,0,2621,
        2622,1,0,0,0,2622,2623,5,30,0,0,2623,2626,5,90,0,0,2624,2626,5,394,
        0,0,2625,2620,1,0,0,0,2625,2624,1,0,0,0,2626,305,1,0,0,0,2627,2628,
        5,119,0,0,2628,2637,3,348,174,0,2629,2630,5,183,0,0,2630,2631,5,
        405,0,0,2631,2632,3,348,174,0,2632,2633,5,415,0,0,2633,2637,1,0,
        0,0,2634,2635,5,183,0,0,2635,2637,3,348,174,0,2636,2627,1,0,0,0,
        2636,2629,1,0,0,0,2636,2634,1,0,0,0,2637,307,1,0,0,0,2638,2639,5,
        147,0,0,2639,2642,3,316,158,0,2640,2641,5,118,0,0,2641,2643,3,316,
        158,0,2642,2640,1,0,0,0,2642,2643,1,0,0,0,2643,309,1,0,0,0,2644,
        2647,3,352,176,0,2645,2646,7,47,0,0,2646,2648,3,352,176,0,2647,2645,
        1,0,0,0,2647,2648,1,0,0,0,2648,311,1,0,0,0,2649,2654,3,314,157,0,
        2650,2651,5,394,0,0,2651,2653,3,314,157,0,2652,2650,1,0,0,0,2653,
        2656,1,0,0,0,2654,2652,1,0,0,0,2654,2655,1,0,0,0,2655,313,1,0,0,
        0,2656,2654,1,0,0,0,2657,2659,3,352,176,0,2658,2660,7,48,0,0,2659,
        2658,1,0,0,0,2659,2660,1,0,0,0,2660,2663,1,0,0,0,2661,2662,5,117,
        0,0,2662,2664,7,49,0,0,2663,2661,1,0,0,0,2663,2664,1,0,0,0,2664,
        2667,1,0,0,0,2665,2666,5,25,0,0,2666,2668,5,388,0,0,2667,2665,1,
        0,0,0,2667,2668,1,0,0,0,2668,315,1,0,0,0,2669,2672,3,376,188,0,2670,
        2671,5,417,0,0,2671,2673,3,376,188,0,2672,2670,1,0,0,0,2672,2673,
        1,0,0,0,2673,317,1,0,0,0,2674,2679,3,320,160,0,2675,2676,5,394,0,
        0,2676,2678,3,320,160,0,2677,2675,1,0,0,0,2678,2681,1,0,0,0,2679,
        2677,1,0,0,0,2679,2680,1,0,0,0,2680,319,1,0,0,0,2681,2679,1,0,0,
        0,2682,2683,3,388,194,0,2683,2684,5,399,0,0,2684,2685,3,378,189,
        0,2685,321,1,0,0,0,2686,2688,3,324,162,0,2687,2686,1,0,0,0,2687,
        2688,1,0,0,0,2688,2690,1,0,0,0,2689,2691,3,326,163,0,2690,2689,1,
        0,0,0,2690,2691,1,0,0,0,2691,2693,1,0,0,0,2692,2694,3,328,164,0,
        2693,2692,1,0,0,0,2693,2694,1,0,0,0,2694,323,1,0,0,0,2695,2696,5,
        126,0,0,2696,2697,5,18,0,0,2697,2698,3,348,174,0,2698,325,1,0,0,
        0,2699,2700,5,122,0,0,2700,2701,5,18,0,0,2701,2702,3,312,156,0,2702,
        327,1,0,0,0,2703,2704,7,50,0,0,2704,2705,3,330,165,0,2705,329,1,
        0,0,0,2706,2713,3,332,166,0,2707,2708,5,16,0,0,2708,2709,3,332,166,
        0,2709,2710,5,6,0,0,2710,2711,3,332,166,0,2711,2713,1,0,0,0,2712,
        2706,1,0,0,0,2712,2707,1,0,0,0,2713,331,1,0,0,0,2714,2715,5,32,0,
        0,2715,2727,5,145,0,0,2716,2717,5,179,0,0,2717,2727,5,130,0,0,2718,
        2719,5,179,0,0,2719,2727,5,64,0,0,2720,2721,3,376,188,0,2721,2722,
        5,130,0,0,2722,2727,1,0,0,0,2723,2724,3,376,188,0,2724,2725,5,64,
        0,0,2725,2727,1,0,0,0,2726,2714,1,0,0,0,2726,2716,1,0,0,0,2726,2718,
        1,0,0,0,2726,2720,1,0,0,0,2726,2723,1,0,0,0,2727,333,1,0,0,0,2728,
        2729,5,152,0,0,2729,2730,3,318,159,0,2730,335,1,0,0,0,2731,2732,
        5,154,0,0,2732,2733,5,29,0,0,2733,2734,5,33,0,0,2734,2774,3,372,
        186,0,2735,2736,5,154,0,0,2736,2737,5,29,0,0,2737,2738,5,46,0,0,
        2738,2774,3,366,183,0,2739,2740,5,154,0,0,2740,2742,5,29,0,0,2741,
        2743,5,164,0,0,2742,2741,1,0,0,0,2742,2743,1,0,0,0,2743,2745,1,0,
        0,0,2744,2746,5,162,0,0,2745,2744,1,0,0,0,2745,2746,1,0,0,0,2746,
        2747,1,0,0,0,2747,2774,3,366,183,0,2748,2749,5,154,0,0,2749,2774,
        5,34,0,0,2750,2751,5,154,0,0,2751,2754,5,45,0,0,2752,2753,5,68,0,
        0,2753,2755,3,372,186,0,2754,2752,1,0,0,0,2754,2755,1,0,0,0,2755,
        2774,1,0,0,0,2756,2758,5,154,0,0,2757,2759,5,164,0,0,2758,2757,1,
        0,0,0,2758,2759,1,0,0,0,2759,2760,1,0,0,0,2760,2763,5,163,0,0,2761,
        2762,7,51,0,0,2762,2764,3,372,186,0,2763,2761,1,0,0,0,2763,2764,
        1,0,0,0,2764,2768,1,0,0,0,2765,2766,5,98,0,0,2766,2769,5,388,0,0,
        2767,2769,3,284,142,0,2768,2765,1,0,0,0,2768,2767,1,0,0,0,2768,2769,
        1,0,0,0,2769,2771,1,0,0,0,2770,2772,3,296,148,0,2771,2770,1,0,0,
        0,2771,2772,1,0,0,0,2772,2774,1,0,0,0,2773,2731,1,0,0,0,2773,2735,
        1,0,0,0,2773,2739,1,0,0,0,2773,2748,1,0,0,0,2773,2750,1,0,0,0,2773,
        2756,1,0,0,0,2774,337,1,0,0,0,2775,2776,5,161,0,0,2776,2777,5,63,
        0,0,2777,2778,5,49,0,0,2778,2810,3,366,183,0,2779,2780,5,161,0,0,
        2780,2781,5,63,0,0,2781,2810,5,102,0,0,2782,2783,5,161,0,0,2783,
        2784,5,137,0,0,2784,2810,5,45,0,0,2785,2786,5,161,0,0,2786,2787,
        5,137,0,0,2787,2788,5,46,0,0,2788,2810,3,366,183,0,2789,2790,5,161,
        0,0,2790,2798,7,32,0,0,2791,2792,5,49,0,0,2792,2799,5,151,0,0,2793,
        2799,5,60,0,0,2794,2796,5,177,0,0,2795,2794,1,0,0,0,2795,2796,1,
        0,0,0,2796,2797,1,0,0,0,2797,2799,5,106,0,0,2798,2791,1,0,0,0,2798,
        2793,1,0,0,0,2798,2795,1,0,0,0,2799,2800,1,0,0,0,2800,2810,3,366,
        183,0,2801,2802,5,161,0,0,2802,2803,7,32,0,0,2803,2804,5,142,0,0,
        2804,2810,5,151,0,0,2805,2806,5,161,0,0,2806,2807,5,159,0,0,2807,
        2808,5,141,0,0,2808,2810,3,366,183,0,2809,2775,1,0,0,0,2809,2779,
        1,0,0,0,2809,2782,1,0,0,0,2809,2785,1,0,0,0,2809,2789,1,0,0,0,2809,
        2801,1,0,0,0,2809,2805,1,0,0,0,2810,339,1,0,0,0,2811,2813,5,176,
        0,0,2812,2814,5,164,0,0,2813,2812,1,0,0,0,2813,2814,1,0,0,0,2814,
        2816,1,0,0,0,2815,2817,5,162,0,0,2816,2815,1,0,0,0,2816,2817,1,0,
        0,0,2817,2820,1,0,0,0,2818,2819,5,78,0,0,2819,2821,5,56,0,0,2820,
        2818,1,0,0,0,2820,2821,1,0,0,0,2821,2822,1,0,0,0,2822,2824,3,366,
        183,0,2823,2825,3,138,69,0,2824,2823,1,0,0,0,2824,2825,1,0,0,0,2825,
        341,1,0,0,0,2826,2827,5,182,0,0,2827,2828,3,372,186,0,2828,343,1,
        0,0,0,2829,2830,5,188,0,0,2830,2832,3,366,183,0,2831,2833,5,55,0,
        0,2832,2831,1,0,0,0,2832,2833,1,0,0,0,2833,2836,1,0,0,0,2834,2835,
        5,99,0,0,2835,2837,5,386,0,0,2836,2834,1,0,0,0,2836,2837,1,0,0,0,
        2837,345,1,0,0,0,2838,2886,3,388,194,0,2839,2840,3,388,194,0,2840,
        2841,5,405,0,0,2841,2842,3,388,194,0,2842,2849,3,346,173,0,2843,
        2844,5,394,0,0,2844,2845,3,388,194,0,2845,2846,3,346,173,0,2846,
        2848,1,0,0,0,2847,2843,1,0,0,0,2848,2851,1,0,0,0,2849,2847,1,0,0,
        0,2849,2850,1,0,0,0,2850,2852,1,0,0,0,2851,2849,1,0,0,0,2852,2853,
        5,415,0,0,2853,2886,1,0,0,0,2854,2855,3,388,194,0,2855,2856,5,405,
        0,0,2856,2861,3,392,196,0,2857,2858,5,394,0,0,2858,2860,3,392,196,
        0,2859,2857,1,0,0,0,2860,2863,1,0,0,0,2861,2859,1,0,0,0,2861,2862,
        1,0,0,0,2862,2864,1,0,0,0,2863,2861,1,0,0,0,2864,2865,5,415,0,0,
        2865,2886,1,0,0,0,2866,2867,3,388,194,0,2867,2868,5,405,0,0,2868,
        2873,3,346,173,0,2869,2870,5,394,0,0,2870,2872,3,346,173,0,2871,
        2869,1,0,0,0,2872,2875,1,0,0,0,2873,2871,1,0,0,0,2873,2874,1,0,0,
        0,2874,2876,1,0,0,0,2875,2873,1,0,0,0,2876,2877,5,415,0,0,2877,2886,
        1,0,0,0,2878,2879,3,388,194,0,2879,2881,5,405,0,0,2880,2882,3,348,
        174,0,2881,2880,1,0,0,0,2881,2882,1,0,0,0,2882,2883,1,0,0,0,2883,
        2884,5,415,0,0,2884,2886,1,0,0,0,2885,2838,1,0,0,0,2885,2839,1,0,
        0,0,2885,2854,1,0,0,0,2885,2866,1,0,0,0,2885,2878,1,0,0,0,2886,347,
        1,0,0,0,2887,2892,3,350,175,0,2888,2889,5,394,0,0,2889,2891,3,350,
        175,0,2890,2888,1,0,0,0,2891,2894,1,0,0,0,2892,2890,1,0,0,0,2892,
        2893,1,0,0,0,2893,349,1,0,0,0,2894,2892,1,0,0,0,2895,2896,3,366,
        183,0,2896,2897,5,397,0,0,2897,2899,1,0,0,0,2898,2895,1,0,0,0,2898,
        2899,1,0,0,0,2899,2900,1,0,0,0,2900,2907,5,390,0,0,2901,2902,5,405,
        0,0,2902,2903,3,266,133,0,2903,2904,5,415,0,0,2904,2907,1,0,0,0,
        2905,2907,3,352,176,0,2906,2898,1,0,0,0,2906,2901,1,0,0,0,2906,2905,
        1,0,0,0,2907,351,1,0,0,0,2908,2909,6,176,-1,0,2909,2911,5,19,0,0,
        2910,2912,3,352,176,0,2911,2910,1,0,0,0,2911,2912,1,0,0,0,2912,2918,
        1,0,0,0,2913,2914,5,190,0,0,2914,2915,3,352,176,0,2915,2916,5,166,
        0,0,2916,2917,3,352,176,0,2917,2919,1,0,0,0,2918,2913,1,0,0,0,2919,
        2920,1,0,0,0,2920,2918,1,0,0,0,2920,2921,1,0,0,0,2921,2924,1,0,0,
        0,2922,2923,5,51,0,0,2923,2925,3,352,176,0,2924,2922,1,0,0,0,2924,
        2925,1,0,0,0,2925,2926,1,0,0,0,2926,2927,5,52,0,0,2927,3038,1,0,
        0,0,2928,2929,5,20,0,0,2929,2930,5,405,0,0,2930,2931,3,352,176,0,
        2931,2932,5,10,0,0,2932,2933,3,346,173,0,2933,2934,5,415,0,0,2934,
        3038,1,0,0,0,2935,2936,5,35,0,0,2936,3038,5,388,0,0,2937,2938,5,
        59,0,0,2938,2939,5,405,0,0,2939,2940,3,380,190,0,2940,2941,5,68,
        0,0,2941,2942,3,352,176,0,2942,2943,5,415,0,0,2943,3038,1,0,0,0,
        2944,2945,5,86,0,0,2945,2946,3,352,176,0,2946,2947,3,380,190,0,2947,
        3038,1,0,0,0,2948,2949,5,158,0,0,2949,2950,5,405,0,0,2950,2951,3,
        352,176,0,2951,2952,5,68,0,0,2952,2955,3,352,176,0,2953,2954,5,65,
        0,0,2954,2956,3,352,176,0,2955,2953,1,0,0,0,2955,2956,1,0,0,0,2956,
        2957,1,0,0,0,2957,2958,5,415,0,0,2958,3038,1,0,0,0,2959,2960,5,169,
        0,0,2960,3038,5,388,0,0,2961,2962,5,174,0,0,2962,2963,5,405,0,0,
        2963,2964,7,52,0,0,2964,2965,5,388,0,0,2965,2966,5,68,0,0,2966,2967,
        3,352,176,0,2967,2968,5,415,0,0,2968,3038,1,0,0,0,2969,2970,3,388,
        194,0,2970,2972,5,405,0,0,2971,2973,3,348,174,0,2972,2971,1,0,0,
        0,2972,2973,1,0,0,0,2973,2974,1,0,0,0,2974,2975,5,415,0,0,2975,2976,
        1,0,0,0,2976,2977,5,125,0,0,2977,2978,5,405,0,0,2978,2979,3,322,
        161,0,2979,2980,5,415,0,0,2980,3038,1,0,0,0,2981,2982,3,388,194,
        0,2982,2984,5,405,0,0,2983,2985,3,348,174,0,2984,2983,1,0,0,0,2984,
        2985,1,0,0,0,2985,2986,1,0,0,0,2986,2987,5,415,0,0,2987,2988,1,0,
        0,0,2988,2989,5,125,0,0,2989,2990,3,388,194,0,2990,3038,1,0,0,0,
        2991,2997,3,388,194,0,2992,2994,5,405,0,0,2993,2995,3,348,174,0,
        2994,2993,1,0,0,0,2994,2995,1,0,0,0,2995,2996,1,0,0,0,2996,2998,
        5,415,0,0,2997,2992,1,0,0,0,2997,2998,1,0,0,0,2998,2999,1,0,0,0,
        2999,3001,5,405,0,0,3000,3002,5,48,0,0,3001,3000,1,0,0,0,3001,3002,
        1,0,0,0,3002,3004,1,0,0,0,3003,3005,3,354,177,0,3004,3003,1,0,0,
        0,3004,3005,1,0,0,0,3005,3006,1,0,0,0,3006,3007,5,415,0,0,3007,3038,
        1,0,0,0,3008,3038,3,378,189,0,3009,3010,5,396,0,0,3010,3038,3,352,
        176,17,3011,3012,5,115,0,0,3012,3038,3,352,176,12,3013,3014,3,366,
        183,0,3014,3015,5,397,0,0,3015,3017,1,0,0,0,3016,3013,1,0,0,0,3016,
        3017,1,0,0,0,3017,3018,1,0,0,0,3018,3038,5,390,0,0,3019,3020,5,405,
        0,0,3020,3021,3,266,133,0,3021,3022,5,415,0,0,3022,3038,1,0,0,0,
        3023,3024,5,405,0,0,3024,3025,3,352,176,0,3025,3026,5,415,0,0,3026,
        3038,1,0,0,0,3027,3028,5,405,0,0,3028,3029,3,348,174,0,3029,3030,
        5,415,0,0,3030,3038,1,0,0,0,3031,3033,5,403,0,0,3032,3034,3,348,
        174,0,3033,3032,1,0,0,0,3033,3034,1,0,0,0,3034,3035,1,0,0,0,3035,
        3038,5,414,0,0,3036,3038,3,360,180,0,3037,2908,1,0,0,0,3037,2928,
        1,0,0,0,3037,2935,1,0,0,0,3037,2937,1,0,0,0,3037,2944,1,0,0,0,3037,
        2948,1,0,0,0,3037,2959,1,0,0,0,3037,2961,1,0,0,0,3037,2969,1,0,0,
        0,3037,2981,1,0,0,0,3037,2991,1,0,0,0,3037,3008,1,0,0,0,3037,3009,
        1,0,0,0,3037,3011,1,0,0,0,3037,3016,1,0,0,0,3037,3019,1,0,0,0,3037,
        3023,1,0,0,0,3037,3027,1,0,0,0,3037,3031,1,0,0,0,3037,3036,1,0,0,
        0,3038,3110,1,0,0,0,3039,3040,10,16,0,0,3040,3041,7,53,0,0,3041,
        3109,3,352,176,17,3042,3043,10,15,0,0,3043,3044,7,54,0,0,3044,3109,
        3,352,176,16,3045,3064,10,14,0,0,3046,3065,5,398,0,0,3047,3065,5,
        399,0,0,3048,3065,5,407,0,0,3049,3065,5,404,0,0,3050,3065,5,400,
        0,0,3051,3065,5,406,0,0,3052,3065,5,401,0,0,3053,3055,5,71,0,0,3054,
        3053,1,0,0,0,3054,3055,1,0,0,0,3055,3057,1,0,0,0,3056,3058,5,115,
        0,0,3057,3056,1,0,0,0,3057,3058,1,0,0,0,3058,3059,1,0,0,0,3059,3065,
        5,80,0,0,3060,3062,5,115,0,0,3061,3060,1,0,0,0,3061,3062,1,0,0,0,
        3062,3063,1,0,0,0,3063,3065,7,55,0,0,3064,3046,1,0,0,0,3064,3047,
        1,0,0,0,3064,3048,1,0,0,0,3064,3049,1,0,0,0,3064,3050,1,0,0,0,3064,
        3051,1,0,0,0,3064,3052,1,0,0,0,3064,3054,1,0,0,0,3064,3061,1,0,0,
        0,3065,3066,1,0,0,0,3066,3109,3,352,176,15,3067,3068,10,11,0,0,3068,
        3069,5,6,0,0,3069,3109,3,352,176,12,3070,3071,10,10,0,0,3071,3072,
        5,121,0,0,3072,3109,3,352,176,11,3073,3075,10,9,0,0,3074,3076,5,
        115,0,0,3075,3074,1,0,0,0,3075,3076,1,0,0,0,3076,3077,1,0,0,0,3077,
        3078,5,16,0,0,3078,3079,3,352,176,0,3079,3080,5,6,0,0,3080,3081,
        3,352,176,10,3081,3109,1,0,0,0,3082,3083,10,8,0,0,3083,3084,5,410,
        0,0,3084,3085,3,352,176,0,3085,3086,5,393,0,0,3086,3087,3,352,176,
        8,3087,3109,1,0,0,0,3088,3089,10,19,0,0,3089,3090,5,403,0,0,3090,
        3091,3,352,176,0,3091,3092,5,414,0,0,3092,3109,1,0,0,0,3093,3094,
        10,18,0,0,3094,3095,5,397,0,0,3095,3109,5,386,0,0,3096,3097,10,13,
        0,0,3097,3099,5,88,0,0,3098,3100,5,115,0,0,3099,3098,1,0,0,0,3099,
        3100,1,0,0,0,3100,3101,1,0,0,0,3101,3109,5,116,0,0,3102,3106,10,
        7,0,0,3103,3107,3,386,193,0,3104,3105,5,10,0,0,3105,3107,3,388,194,
        0,3106,3103,1,0,0,0,3106,3104,1,0,0,0,3107,3109,1,0,0,0,3108,3039,
        1,0,0,0,3108,3042,1,0,0,0,3108,3045,1,0,0,0,3108,3067,1,0,0,0,3108,
        3070,1,0,0,0,3108,3073,1,0,0,0,3108,3082,1,0,0,0,3108,3088,1,0,0,
        0,3108,3093,1,0,0,0,3108,3096,1,0,0,0,3108,3102,1,0,0,0,3109,3112,
        1,0,0,0,3110,3108,1,0,0,0,3110,3111,1,0,0,0,3111,353,1,0,0,0,3112,
        3110,1,0,0,0,3113,3118,3,356,178,0,3114,3115,5,394,0,0,3115,3117,
        3,356,178,0,3116,3114,1,0,0,0,3117,3120,1,0,0,0,3118,3116,1,0,0,
        0,3118,3119,1,0,0,0,3119,355,1,0,0,0,3120,3118,1,0,0,0,3121,3124,
        3,358,179,0,3122,3124,3,352,176,0,3123,3121,1,0,0,0,3123,3122,1,
        0,0,0,3124,357,1,0,0,0,3125,3126,5,405,0,0,3126,3127,3,104,52,0,
        3127,3128,5,415,0,0,3128,3131,1,0,0,0,3129,3131,3,104,52,0,3130,
        3125,1,0,0,0,3130,3129,1,0,0,0,3131,3132,1,0,0,0,3132,3133,5,389,
        0,0,3133,3134,3,352,176,0,3134,359,1,0,0,0,3135,3136,3,366,183,0,
        3136,3137,5,397,0,0,3137,3139,1,0,0,0,3138,3135,1,0,0,0,3138,3139,
        1,0,0,0,3139,3140,1,0,0,0,3140,3143,3,388,194,0,3141,3142,5,397,
        0,0,3142,3144,3,388,194,0,3143,3141,1,0,0,0,3143,3144,1,0,0,0,3144,
        361,1,0,0,0,3145,3146,6,181,-1,0,3146,3153,3,366,183,0,3147,3153,
        3,364,182,0,3148,3149,5,405,0,0,3149,3150,3,266,133,0,3150,3151,
        5,415,0,0,3151,3153,1,0,0,0,3152,3145,1,0,0,0,3152,3147,1,0,0,0,
        3152,3148,1,0,0,0,3153,3162,1,0,0,0,3154,3158,10,1,0,0,3155,3159,
        3,386,193,0,3156,3157,5,10,0,0,3157,3159,3,388,194,0,3158,3155,1,
        0,0,0,3158,3156,1,0,0,0,3159,3161,1,0,0,0,3160,3154,1,0,0,0,3161,
        3164,1,0,0,0,3162,3160,1,0,0,0,3162,3163,1,0,0,0,3163,363,1,0,0,
        0,3164,3162,1,0,0,0,3165,3166,3,388,194,0,3166,3168,5,405,0,0,3167,
        3169,3,368,184,0,3168,3167,1,0,0,0,3168,3169,1,0,0,0,3169,3170,1,
        0,0,0,3170,3171,5,415,0,0,3171,365,1,0,0,0,3172,3173,3,372,186,0,
        3173,3174,5,397,0,0,3174,3176,1,0,0,0,3175,3172,1,0,0,0,3175,3176,
        1,0,0,0,3176,3177,1,0,0,0,3177,3178,3,388,194,0,3178,367,1,0,0,0,
        3179,3184,3,370,185,0,3180,3181,5,394,0,0,3181,3183,3,370,185,0,
        3182,3180,1,0,0,0,3183,3186,1,0,0,0,3184,3182,1,0,0,0,3184,3185,
        1,0,0,0,3185,369,1,0,0,0,3186,3184,1,0,0,0,3187,3191,3,360,180,0,
        3188,3191,3,364,182,0,3189,3191,3,378,189,0,3190,3187,1,0,0,0,3190,
        3188,1,0,0,0,3190,3189,1,0,0,0,3191,371,1,0,0,0,3192,3193,3,388,
        194,0,3193,373,1,0,0,0,3194,3203,5,384,0,0,3195,3196,5,397,0,0,3196,
        3203,7,56,0,0,3197,3198,5,386,0,0,3198,3200,5,397,0,0,3199,3201,
        7,56,0,0,3200,3199,1,0,0,0,3200,3201,1,0,0,0,3201,3203,1,0,0,0,3202,
        3194,1,0,0,0,3202,3195,1,0,0,0,3202,3197,1,0,0,0,3203,375,1,0,0,
        0,3204,3206,7,57,0,0,3205,3204,1,0,0,0,3205,3206,1,0,0,0,3206,3213,
        1,0,0,0,3207,3214,3,374,187,0,3208,3214,5,385,0,0,3209,3214,5,386,
        0,0,3210,3214,5,387,0,0,3211,3214,5,82,0,0,3212,3214,5,113,0,0,3213,
        3207,1,0,0,0,3213,3208,1,0,0,0,3213,3209,1,0,0,0,3213,3210,1,0,0,
        0,3213,3211,1,0,0,0,3213,3212,1,0,0,0,3214,377,1,0,0,0,3215,3219,
        3,376,188,0,3216,3219,5,388,0,0,3217,3219,5,116,0,0,3218,3215,1,
        0,0,0,3218,3216,1,0,0,0,3218,3217,1,0,0,0,3219,379,1,0,0,0,3220,
        3221,7,58,0,0,3221,381,1,0,0,0,3222,3223,7,59,0,0,3223,383,1,0,0,
        0,3224,3225,7,60,0,0,3225,385,1,0,0,0,3226,3229,5,383,0,0,3227,3229,
        3,384,192,0,3228,3226,1,0,0,0,3228,3227,1,0,0,0,3229,387,1,0,0,0,
        3230,3234,5,383,0,0,3231,3234,3,380,190,0,3232,3234,3,382,191,0,
        3233,3230,1,0,0,0,3233,3231,1,0,0,0,3233,3232,1,0,0,0,3234,389,1,
        0,0,0,3235,3238,3,388,194,0,3236,3238,5,116,0,0,3237,3235,1,0,0,
        0,3237,3236,1,0,0,0,3238,391,1,0,0,0,3239,3240,5,388,0,0,3240,3241,
        5,399,0,0,3241,3242,3,376,188,0,3242,393,1,0,0,0,440,395,401,407,
        413,417,420,425,447,450,458,463,478,485,493,498,505,510,517,522,
        528,534,539,545,550,556,561,567,581,588,595,602,608,613,619,624,
        630,639,649,659,679,687,702,709,723,729,735,741,744,750,753,756,
        762,766,769,772,775,778,785,789,792,796,802,805,811,815,818,829,
        833,836,841,843,846,849,859,863,866,869,874,876,883,889,893,896,
        899,927,935,937,944,951,961,969,974,981,989,997,1000,1004,1007,1010,
        1014,1022,1028,1033,1037,1041,1044,1047,1052,1058,1060,1063,1066,
        1073,1080,1084,1091,1098,1105,1112,1116,1120,1127,1131,1135,1141,
        1145,1152,1158,1168,1180,1187,1191,1200,1205,1211,1215,1218,1221,
        1224,1228,1235,1241,1245,1248,1251,1257,1261,1264,1267,1271,1277,
        1280,1287,1296,1300,1317,1325,1351,1353,1357,1379,1381,1392,1395,
        1404,1421,1432,1450,1463,1480,1489,1516,1518,1539,1544,1549,1552,
        1564,1569,1573,1576,1580,1584,1589,1592,1596,1598,1620,1628,1631,
        1641,1645,1653,1657,1662,1666,1670,1674,1678,1680,1688,1692,1695,
        1718,1722,1727,1737,1742,1748,1755,1763,1771,1776,1789,1798,1806,
        1809,1822,1828,1833,1836,1846,1849,1853,1855,1862,1869,1876,1881,
        1885,1889,1893,1899,1902,1906,1910,1914,1920,1928,1931,1935,1941,
        1945,1950,1954,1958,1963,1971,1974,1979,1990,1994,1999,2006,2020,
        2022,2034,2041,2060,2073,2077,2084,2088,2092,2100,2112,2115,2121,
        2124,2128,2131,2136,2141,2148,2157,2165,2172,2176,2181,2184,2192,
        2197,2224,2229,2234,2237,2240,2249,2252,2260,2272,2275,2280,2284,
        2291,2304,2308,2312,2320,2323,2333,2341,2346,2352,2356,2362,2365,
        2368,2371,2385,2389,2393,2398,2401,2411,2419,2422,2426,2429,2433,
        2436,2439,2442,2445,2448,2452,2456,2459,2462,2465,2468,2471,2480,
        2486,2513,2535,2543,2546,2552,2560,2563,2569,2571,2575,2580,2583,
        2586,2590,2594,2597,2599,2602,2606,2610,2613,2615,2617,2620,2625,
        2636,2642,2647,2654,2659,2663,2667,2672,2679,2687,2690,2693,2712,
        2726,2742,2745,2754,2758,2763,2768,2771,2773,2795,2798,2809,2813,
        2816,2820,2824,2832,2836,2849,2861,2873,2881,2885,2892,2898,2906,
        2911,2920,2924,2955,2972,2984,2994,2997,3001,3004,3016,3033,3037,
        3054,3057,3061,3064,3075,3099,3106,3108,3110,3118,3123,3130,3138,
        3143,3152,3158,3162,3168,3175,3184,3190,3200,3202,3205,3213,3218,
        3228,3233,3237
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!ClickHouseParser.__ATN) {
            ClickHouseParser.__ATN = new antlr.ATNDeserializer().deserialize(ClickHouseParser._serializedATN);
        }

        return ClickHouseParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(ClickHouseParser.literalNames, ClickHouseParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return ClickHouseParser.vocabulary;
    }

    private static readonly decisionsToDFA = ClickHouseParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EOF, 0)!;
    }
    public statements(): StatementsContext | null {
        return this.getRuleContext(0, StatementsContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_root;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRoot) {
            return visitor.visitRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public statements(): StatementsContext | null {
        return this.getRuleContext(0, StatementsContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_statements;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStatements) {
            return visitor.visitStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public notInsertStatement(): NotInsertStatementContext | null {
        return this.getRuleContext(0, NotInsertStatementContext);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTO, 0);
    }
    public OUTFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTFILE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORMAT, 0);
    }
    public identifierOrNull(): IdentifierOrNullContext | null {
        return this.getRuleContext(0, IdentifierOrNullContext);
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(0, InsertStatementContext);
    }
    public grantStatement(): GrantStatementContext | null {
        return this.getRuleContext(0, GrantStatementContext);
    }
    public revokeStatement(): RevokeStatementContext | null {
        return this.getRuleContext(0, RevokeStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_statement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotInsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterStatement(): AlterStatementContext | null {
        return this.getRuleContext(0, AlterStatementContext);
    }
    public attachStatement(): AttachStatementContext | null {
        return this.getRuleContext(0, AttachStatementContext);
    }
    public checkStatement(): CheckStatementContext | null {
        return this.getRuleContext(0, CheckStatementContext);
    }
    public createStatement(): CreateStatementContext | null {
        return this.getRuleContext(0, CreateStatementContext);
    }
    public describeStatement(): DescribeStatementContext | null {
        return this.getRuleContext(0, DescribeStatementContext);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(0, DeleteStatementContext);
    }
    public dropStatement(): DropStatementContext | null {
        return this.getRuleContext(0, DropStatementContext);
    }
    public existsStatement(): ExistsStatementContext | null {
        return this.getRuleContext(0, ExistsStatementContext);
    }
    public explainStatement(): ExplainStatementContext | null {
        return this.getRuleContext(0, ExplainStatementContext);
    }
    public killStatement(): KillStatementContext | null {
        return this.getRuleContext(0, KillStatementContext);
    }
    public optimizeStatement(): OptimizeStatementContext | null {
        return this.getRuleContext(0, OptimizeStatementContext);
    }
    public renameStatement(): RenameStatementContext | null {
        return this.getRuleContext(0, RenameStatementContext);
    }
    public selectUnionStatement(): SelectUnionStatementContext | null {
        return this.getRuleContext(0, SelectUnionStatementContext);
    }
    public setStatement(): SetStatementContext | null {
        return this.getRuleContext(0, SetStatementContext);
    }
    public showStatement(): ShowStatementContext | null {
        return this.getRuleContext(0, ShowStatementContext);
    }
    public systemStatement(): SystemStatementContext | null {
        return this.getRuleContext(0, SystemStatementContext);
    }
    public truncateStatement(): TruncateStatementContext | null {
        return this.getRuleContext(0, TruncateStatementContext);
    }
    public useStatement(): UseStatementContext | null {
        return this.getRuleContext(0, UseStatementContext);
    }
    public watchStatement(): WatchStatementContext | null {
        return this.getRuleContext(0, WatchStatementContext);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public commonTableExpressionStatement(): CommonTableExpressionStatementContext | null {
        return this.getRuleContext(0, CommonTableExpressionStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_notInsertStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNotInsertStatement) {
            return visitor.visitNotInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonTableExpressionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WITH, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_commonTableExpressionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCommonTableExpressionStatement) {
            return visitor.visitCommonTableExpressionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_namedQuery;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAliasesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnAliases;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnAliases) {
            return visitor.visitColumnAliases(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterStatement;
    }
    public override copyFrom(ctx: AlterStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterTableStatementContext extends AlterStatementContext {
    public constructor(ctx: AlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public alterTableClause(): AlterTableClauseContext[];
    public alterTableClause(i: number): AlterTableClauseContext | null;
    public alterTableClause(i?: number): AlterTableClauseContext[] | AlterTableClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterTableClauseContext);
        }

        return this.getRuleContext(i, AlterTableClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableStatement) {
            return visitor.visitAlterTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableClause;
    }
    public override copyFrom(ctx: AlterTableClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterTableClauseReplaceContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REPLACE, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseReplace) {
            return visitor.visitAlterTableClauseReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyOrderByContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyOrderBy) {
            return visitor.visitAlterTableClauseModifyOrderBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseUpdateContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.UPDATE, 0)!;
    }
    public assignmentExpressionList(): AssignmentExpressionListContext {
        return this.getRuleContext(0, AssignmentExpressionListContext)!;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(0, WhereClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseUpdate) {
            return visitor.visitAlterTableClauseUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseClearProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLEAR, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseClearProjection) {
            return visitor.visitAlterTableClauseClearProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyRemoveContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public REMOVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REMOVE, 0)!;
    }
    public tableColumnPropertyType(): TableColumnPropertyTypeContext {
        return this.getRuleContext(0, TableColumnPropertyTypeContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyRemove) {
            return visitor.visitAlterTableClauseModifyRemove(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDeleteContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DELETE, 0)!;
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDelete) {
            return visitor.visitAlterTableClauseDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseCommentContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COMMENT, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseComment) {
            return visitor.visitAlterTableClauseComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropColumnContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropColumn) {
            return visitor.visitAlterTableClauseDropColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDetachContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DETACH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DETACH, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDetach) {
            return visitor.visitAlterTableClauseDetach(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAddIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ADD, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public tableIndexDefinition(): TableIndexDefinitionContext {
        return this.getRuleContext(0, TableIndexDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAddIndex) {
            return visitor.visitAlterTableClauseAddIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropPartitionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropPartition) {
            return visitor.visitAlterTableClauseDropPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseMaterializeIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MATERIALIZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseMaterializeIndex) {
            return visitor.visitAlterTableClauseMaterializeIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseMaterializeProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MATERIALIZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseMaterializeProjection) {
            return visitor.visitAlterTableClauseMaterializeProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseMovePartitionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MOVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MOVE, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseMovePartition) {
            return visitor.visitAlterTableClauseMovePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseRenameContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RENAME, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext[];
    public columnIdentifier(i: number): ColumnIdentifierContext | null;
    public columnIdentifier(i?: number): ColumnIdentifierContext[] | ColumnIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnIdentifierContext);
        }

        return this.getRuleContext(i, ColumnIdentifierContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseRename) {
            return visitor.visitAlterTableClauseRename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseFreezePartitionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FREEZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FREEZE, 0)!;
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseFreezePartition) {
            return visitor.visitAlterTableClauseFreezePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseClearColumnContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLEAR, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseClearColumn) {
            return visitor.visitAlterTableClauseClearColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        return this.getRuleContext(0, TableColumnDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModify) {
            return visitor.visitAlterTableClauseModify(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseClearIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLEAR, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseClearIndex) {
            return visitor.visitAlterTableClauseClearIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseRemoveTTLContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REMOVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REMOVE, 0)!;
    }
    public TTL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TTL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseRemoveTTL) {
            return visitor.visitAlterTableClauseRemoveTTL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyCodecContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public codecExpression(): CodecExpressionContext {
        return this.getRuleContext(0, CodecExpressionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyCodec) {
            return visitor.visitAlterTableClauseModifyCodec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAttachContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ATTACH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ATTACH, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAttach) {
            return visitor.visitAlterTableClauseAttach(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropProjection) {
            return visitor.visitAlterTableClauseDropProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropIndex) {
            return visitor.visitAlterTableClauseDropIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyCommentContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COMMENT, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyComment) {
            return visitor.visitAlterTableClauseModifyComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyTTLContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public ttlClause(): TtlClauseContext {
        return this.getRuleContext(0, TtlClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyTTL) {
            return visitor.visitAlterTableClauseModifyTTL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAddProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ADD, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext {
        return this.getRuleContext(0, TableProjectionDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAddProjection) {
            return visitor.visitAlterTableClauseAddProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAddColumnContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ADD, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        return this.getRuleContext(0, TableColumnDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAddColumn) {
            return visitor.visitAlterTableClauseAddColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignmentExpression(): AssignmentExpressionContext[];
    public assignmentExpression(i: number): AssignmentExpressionContext | null;
    public assignmentExpression(i?: number): AssignmentExpressionContext[] | AssignmentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignmentExpressionContext);
        }

        return this.getRuleContext(i, AssignmentExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_assignmentExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentExpressionList) {
            return visitor.visitAssignmentExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_assignmentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentExpression) {
            return visitor.visitAssignmentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnPropertyTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public CODEC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CODEC, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnPropertyType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnPropertyType) {
            return visitor.visitTableColumnPropertyType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_partitionClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionClause) {
            return visitor.visitPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AttachStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_attachStatement;
    }
    public override copyFrom(ctx: AttachStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class AttachDictionaryStatementContext extends AttachStatementContext {
    public constructor(ctx: AttachStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ATTACH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ATTACH, 0)!;
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAttachDictionaryStatement) {
            return visitor.visitAttachDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CHECK, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_checkStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCheckStatement) {
            return visitor.visitCheckStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_deleteStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteStatement) {
            return visitor.visitDeleteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public engineClause(): EngineClauseContext | null {
        return this.getRuleContext(0, EngineClauseContext);
    }
    public subqueryClause(): SubqueryClauseContext | null {
        return this.getRuleContext(0, SubqueryClauseContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createTableStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableStatement) {
            return visitor.visitCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public engineExpression(): EngineExpressionContext | null {
        return this.getRuleContext(0, EngineExpressionContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createDatabaseStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabaseStatement) {
            return visitor.visitCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDictionaryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public dictionarySchemaClause(): DictionarySchemaClauseContext {
        return this.getRuleContext(0, DictionarySchemaClauseContext)!;
    }
    public dictionaryEngineClause(): DictionaryEngineClauseContext {
        return this.getRuleContext(0, DictionaryEngineClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createDictionaryStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDictionaryStatement) {
            return visitor.visitCreateDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateLiveViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIVE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIMEOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMEOUT, 0);
    }
    public destinationClause(): DestinationClauseContext | null {
        return this.getRuleContext(0, DestinationClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createLiveViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateLiveViewStatement) {
            return visitor.visitCreateLiveViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMaterializedViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public destinationClause(): DestinationClauseContext | null {
        return this.getRuleContext(0, DestinationClauseContext);
    }
    public engineClause(): EngineClauseContext | null {
        return this.getRuleContext(0, EngineClauseContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public POPULATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POPULATE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createMaterializedViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedViewStatement) {
            return visitor.visitCreateMaterializedViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateViewStatement) {
            return visitor.visitCreateViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringIdentificationTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLAINTEXT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLAINTEXT_PASSWORD, 0);
    }
    public SHA256_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_PASSWORD, 0);
    }
    public SHA256_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_HASH, 0);
    }
    public DOUBLE_SHA1_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_PASSWORD, 0);
    }
    public DOUBLE_SHA1_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_HASH, 0);
    }
    public BCRYPT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_PASSWORD, 0);
    }
    public BCRYPT_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_HASH, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_stringIdentificationType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStringIdentificationType) {
            return visitor.visitStringIdentificationType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyTypeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEY, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.STRING_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.STRING_LITERAL, i);
    	}
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TYPE, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_keyTypeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKeyTypeClause) {
            return visitor.visitKeyTypeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OtherIdentificationTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NO_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO_PASSWORD, 0);
    }
    public LDAP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LDAP, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SERVER, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.STRING_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.STRING_LITERAL, i);
    	}
    }
    public KERBEROS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KERBEROS, 0);
    }
    public REALM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REALM, 0);
    }
    public SSL_CERTIFICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSL_CERTIFICATE, 0);
    }
    public SAN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAN, 0);
    }
    public CN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CN, 0);
    }
    public SSH_KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSH_KEY, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public keyTypeClause(): KeyTypeClauseContext[];
    public keyTypeClause(i: number): KeyTypeClauseContext | null;
    public keyTypeClause(i?: number): KeyTypeClauseContext[] | KeyTypeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyTypeClauseContext);
        }

        return this.getRuleContext(i, KeyTypeClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public HTTP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HTTP, 0);
    }
    public SCHEME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SCHEME, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_otherIdentificationType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOtherIdentificationType) {
            return visitor.visitOtherIdentificationType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserIdentificationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public IDENTIFIED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.IDENTIFIED, 0)!;
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public stringIdentificationType(): StringIdentificationTypeContext | null {
        return this.getRuleContext(0, StringIdentificationTypeContext);
    }
    public otherIdentificationType(): OtherIdentificationTypeContext | null {
        return this.getRuleContext(0, OtherIdentificationTypeContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userIdentificationClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserIdentificationClause) {
            return visitor.visitUserIdentificationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValidUntilClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALID(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VALID, 0)!;
    }
    public UNTIL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.UNTIL, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_validUntilClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValidUntilClause) {
            return visitor.visitValidUntilClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantsProviderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifier(): UserIdentifierContext | null {
        return this.getRuleContext(0, UserIdentifierContext);
    }
    public roleIdentifier(): RoleIdentifierContext | null {
        return this.getRuleContext(0, RoleIdentifierContext);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_grantsProvider;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGrantsProvider) {
            return visitor.visitGrantsProvider(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GranteesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANTEES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GRANTEES, 0)!;
    }
    public grantsProvider(): GrantsProviderContext[];
    public grantsProvider(i: number): GrantsProviderContext | null;
    public grantsProvider(i?: number): GrantsProviderContext[] | GrantsProviderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GrantsProviderContext);
        }

        return this.getRuleContext(i, GrantsProviderContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext | null {
        return this.getRuleContext(0, UserOrRoleExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_granteesClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGranteesClause) {
            return visitor.visitGranteesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HostTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAME, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REGEXP, 0);
    }
    public IP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IP, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_hostType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitHostType) {
            return visitor.visitHostType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HostClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOST(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.HOST, 0)!;
    }
    public hostType(): HostTypeContext[];
    public hostType(i: number): HostTypeContext | null;
    public hostType(i?: number): HostTypeContext[] | HostTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HostTypeContext);
        }

        return this.getRuleContext(i, HostTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_hostClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitHostClause) {
            return visitor.visitHostClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtendedSettingExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public EQ_SINGLE(): antlr.TerminalNode[];
    public EQ_SINGLE(i: number): antlr.TerminalNode | null;
    public EQ_SINGLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.EQ_SINGLE);
    	} else {
    		return this.getToken(ClickHouseParser.EQ_SINGLE, i);
    	}
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public CONST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONST, 0);
    }
    public READONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READONLY, 0);
    }
    public WRITABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WRITABLE, 0);
    }
    public CHANGEABLE_IN_READONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CHANGEABLE_IN_READONLY, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_extendedSettingExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExtendedSettingExpression) {
            return visitor.visitExtendedSettingExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtendedSettingsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public extendedSettingExpression(): ExtendedSettingExpressionContext[];
    public extendedSettingExpression(i: number): ExtendedSettingExpressionContext | null;
    public extendedSettingExpression(i?: number): ExtendedSettingExpressionContext[] | ExtendedSettingExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExtendedSettingExpressionContext);
        }

        return this.getRuleContext(i, ExtendedSettingExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_extendedSettingsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExtendedSettingsClause) {
            return visitor.visitExtendedSettingsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InAccessStorageClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.IN, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_inAccessStorageClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInAccessStorageClause) {
            return visitor.visitInAccessStorageClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.USER, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public userIdentificationClause(): UserIdentificationClauseContext {
        return this.getRuleContext(0, UserIdentificationClauseContext)!;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public hostClause(): HostClauseContext | null {
        return this.getRuleContext(0, HostClauseContext);
    }
    public validUntilClause(): ValidUntilClauseContext | null {
        return this.getRuleContext(0, ValidUntilClauseContext);
    }
    public inAccessStorageClause(): InAccessStorageClauseContext | null {
        return this.getRuleContext(0, InAccessStorageClauseContext);
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DEFAULT);
    	} else {
    		return this.getToken(ClickHouseParser.DEFAULT, i);
    	}
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLE, 0);
    }
    public roleExpressionList(): RoleExpressionListContext | null {
        return this.getRuleContext(0, RoleExpressionListContext);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public granteesClause(): GranteesClauseContext | null {
        return this.getRuleContext(0, GranteesClauseContext);
    }
    public extendedSettingsClause(): ExtendedSettingsClauseContext | null {
        return this.getRuleContext(0, ExtendedSettingsClauseContext);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createUserStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUserStatement) {
            return visitor.visitCreateUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceOrIfNotExistsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_replaceOrIfNotExistsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceOrIfNotExistsClause) {
            return visitor.visitReplaceOrIfNotExistsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PolicyAssignmentSubjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASTERISK, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_policyAssignmentSubject;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPolicyAssignmentSubject) {
            return visitor.visitPolicyAssignmentSubject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PolicyExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ON, 0)!;
    }
    public policyAssignmentSubject(): PolicyAssignmentSubjectContext {
        return this.getRuleContext(0, PolicyAssignmentSubjectContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_policyExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPolicyExpression) {
            return visitor.visitPolicyExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierOrLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifierOrLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierOrLiteral) {
            return visitor.visitIdentifierOrLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConditionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierOrLiteral(): IdentifierOrLiteralContext[];
    public identifierOrLiteral(i: number): IdentifierOrLiteralContext | null;
    public identifierOrLiteral(i?: number): IdentifierOrLiteralContext[] | IdentifierOrLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierOrLiteralContext);
        }

        return this.getRuleContext(i, IdentifierOrLiteralContext);
    }
    public EQ_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
    }
    public NOT_EQ(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT_EQ, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GT, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_conditionClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitConditionClause) {
            return visitor.visitConditionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubjectOrAllOrExceptContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userOrRoleIdentifier(): UserOrRoleIdentifierContext | null {
        return this.getRuleContext(0, UserOrRoleIdentifierContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext | null {
        return this.getRuleContext(0, UserOrRoleExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_subjectOrAllOrExcept;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSubjectOrAllOrExcept) {
            return visitor.visitSubjectOrAllOrExcept(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubjectExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userOrRoleIdentifier(): UserOrRoleIdentifierContext | null {
        return this.getRuleContext(0, UserOrRoleIdentifierContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext | null {
        return this.getRuleContext(0, UserOrRoleExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_subjectExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSubjectExpression) {
            return visitor.visitSubjectExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRowPolicyStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.POLICY, 0)!;
    }
    public policyExpression(): PolicyExpressionContext[];
    public policyExpression(i: number): PolicyExpressionContext | null;
    public policyExpression(i?: number): PolicyExpressionContext[] | PolicyExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PolicyExpressionContext);
        }

        return this.getRuleContext(i, PolicyExpressionContext);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.USING, 0)!;
    }
    public conditionClause(): ConditionClauseContext {
        return this.getRuleContext(0, ConditionClauseContext)!;
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public inAccessStorageClause(): InAccessStorageClauseContext | null {
        return this.getRuleContext(0, InAccessStorageClauseContext);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SELECT, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public subjectExpressionList(): SubjectExpressionListContext | null {
        return this.getRuleContext(0, SubjectExpressionListContext);
    }
    public PERMISSIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PERMISSIVE, 0);
    }
    public RESTRICTIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTRICTIVE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createRowPolicyStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRowPolicyStatement) {
            return visitor.visitCreateRowPolicyStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaKeyTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER_NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER_NAME, 0);
    }
    public IP_ADDRESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IP_ADDRESS, 0);
    }
    public CLIENT_KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public KEYED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEYED, 0);
    }
    public CLIENT_KEY_OR_USER_NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY_OR_USER_NAME, 0);
    }
    public CLIENT_KEY_OR_IP_ADDRESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaKeyType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaKeyType) {
            return visitor.visitQuotaKeyType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaKeyedByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEYED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEYED, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public quotaKeyType(): QuotaKeyTypeContext {
        return this.getRuleContext(0, QuotaKeyTypeContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaKeyedByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaKeyedByClause) {
            return visitor.visitQuotaKeyedByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaRestrictionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUERIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERIES, 0);
    }
    public QUERY_SELECTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY_SELECTS, 0);
    }
    public QUERY_INSERTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY_INSERTS, 0);
    }
    public ERRORS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ERRORS, 0);
    }
    public RESULT_ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESULT_ROWS, 0);
    }
    public RESULT_BYTES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESULT_BYTES, 0);
    }
    public READ_ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READ_ROWS, 0);
    }
    public READ_BYTES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READ_BYTES, 0);
    }
    public EXECUTION_TIME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXECUTION_TIME, 0);
    }
    public FAILED_SEQUENTIAL_AUTHENTICATIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaRestrictionType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaRestrictionType) {
            return visitor.visitQuotaRestrictionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringOrNumberLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public numberLiteral(): NumberLiteralContext | null {
        return this.getRuleContext(0, NumberLiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_stringOrNumberLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStringOrNumberLiteral) {
            return visitor.visitStringOrNumberLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaRestrictionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MAX, 0)!;
    }
    public quotaRestrictionType(): QuotaRestrictionTypeContext {
        return this.getRuleContext(0, QuotaRestrictionTypeContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public stringOrNumberLiteral(): StringOrNumberLiteralContext {
        return this.getRuleContext(0, StringOrNumberLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaRestrictionExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaRestrictionExpression) {
            return visitor.visitQuotaRestrictionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaRestrictionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public quotaRestrictionExpression(): QuotaRestrictionExpressionContext[];
    public quotaRestrictionExpression(i: number): QuotaRestrictionExpressionContext | null;
    public quotaRestrictionExpression(i?: number): QuotaRestrictionExpressionContext[] | QuotaRestrictionExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QuotaRestrictionExpressionContext);
        }

        return this.getRuleContext(i, QuotaRestrictionExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO, 0);
    }
    public LIMITS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMITS, 0);
    }
    public TRACKING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRACKING, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ONLY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaRestrictionClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaRestrictionClause) {
            return visitor.visitQuotaRestrictionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaForClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FOR, 0)!;
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INTERVAL, 0)!;
    }
    public numberLiteral(): NumberLiteralContext {
        return this.getRuleContext(0, NumberLiteralContext)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public quotaRestrictionClause(): QuotaRestrictionClauseContext {
        return this.getRuleContext(0, QuotaRestrictionClauseContext)!;
    }
    public RANDOMIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANDOMIZED, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaForClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaForClause) {
            return visitor.visitQuotaForClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaForListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public quotaForClause(): QuotaForClauseContext[];
    public quotaForClause(i: number): QuotaForClauseContext | null;
    public quotaForClause(i?: number): QuotaForClauseContext[] | QuotaForClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QuotaForClauseContext);
        }

        return this.getRuleContext(i, QuotaForClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaForList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaForList) {
            return visitor.visitQuotaForList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateQuotaStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public QUOTA(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.QUOTA, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public inAccessStorageClause(): InAccessStorageClauseContext | null {
        return this.getRuleContext(0, InAccessStorageClauseContext);
    }
    public quotaKeyedByClause(): QuotaKeyedByClauseContext | null {
        return this.getRuleContext(0, QuotaKeyedByClauseContext);
    }
    public quotaForList(): QuotaForListContext | null {
        return this.getRuleContext(0, QuotaForListContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public subjectExpressionList(): SubjectExpressionListContext | null {
        return this.getRuleContext(0, SubjectExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createQuotaStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateQuotaStatement) {
            return visitor.visitCreateQuotaStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifierList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierList) {
            return visitor.visitIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ROLE, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public inAccessStorageClause(): InAccessStorageClauseContext | null {
        return this.getRuleContext(0, InAccessStorageClauseContext);
    }
    public extendedSettingsClause(): ExtendedSettingsClauseContext | null {
        return this.getRuleContext(0, ExtendedSettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createRoleStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRoleStatement) {
            return visitor.visitCreateRoleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateSettingsProfileStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public PROFILE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROFILE, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public inAccessStorageClause(): InAccessStorageClauseContext | null {
        return this.getRuleContext(0, InAccessStorageClauseContext);
    }
    public extendedSettingsClause(): ExtendedSettingsClauseContext | null {
        return this.getRuleContext(0, ExtendedSettingsClauseContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public subjectExpressionList(): SubjectExpressionListContext | null {
        return this.getRuleContext(0, SubjectExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createSettingsProfileStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateSettingsProfileStatement) {
            return visitor.visitCreateSettingsProfileStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedCollectionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public stringOrNumberLiteral(): StringOrNumberLiteralContext {
        return this.getRuleContext(0, StringOrNumberLiteralContext)!;
    }
    public OVERRIDABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OVERRIDABLE, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_namedCollectionExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNamedCollectionExpression) {
            return visitor.visitNamedCollectionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedCollectionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public namedCollectionExpression(): NamedCollectionExpressionContext[];
    public namedCollectionExpression(i: number): NamedCollectionExpressionContext | null;
    public namedCollectionExpression(i?: number): NamedCollectionExpressionContext[] | NamedCollectionExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedCollectionExpressionContext);
        }

        return this.getRuleContext(i, NamedCollectionExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_namedCollectionClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNamedCollectionClause) {
            return visitor.visitNamedCollectionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateNamedCollectionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public NAMED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NAMED, 0)!;
    }
    public COLLECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLLECTION, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public namedCollectionClause(): NamedCollectionClauseContext {
        return this.getRuleContext(0, NamedCollectionClauseContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createNamedCollectionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateNamedCollectionStatement) {
            return visitor.visitCreateNamedCollectionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext | null {
        return this.getRuleContext(0, CreateDatabaseStatementContext);
    }
    public createDictionaryStatement(): CreateDictionaryStatementContext | null {
        return this.getRuleContext(0, CreateDictionaryStatementContext);
    }
    public createLiveViewStatement(): CreateLiveViewStatementContext | null {
        return this.getRuleContext(0, CreateLiveViewStatementContext);
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext | null {
        return this.getRuleContext(0, CreateMaterializedViewStatementContext);
    }
    public createTableStatement(): CreateTableStatementContext | null {
        return this.getRuleContext(0, CreateTableStatementContext);
    }
    public createViewStatement(): CreateViewStatementContext | null {
        return this.getRuleContext(0, CreateViewStatementContext);
    }
    public createUserStatement(): CreateUserStatementContext | null {
        return this.getRuleContext(0, CreateUserStatementContext);
    }
    public createRowPolicyStatement(): CreateRowPolicyStatementContext | null {
        return this.getRuleContext(0, CreateRowPolicyStatementContext);
    }
    public createQuotaStatement(): CreateQuotaStatementContext | null {
        return this.getRuleContext(0, CreateQuotaStatementContext);
    }
    public createRoleStatement(): CreateRoleStatementContext | null {
        return this.getRuleContext(0, CreateRoleStatementContext);
    }
    public createSettingsProfileStatement(): CreateSettingsProfileStatementContext | null {
        return this.getRuleContext(0, CreateSettingsProfileStatementContext);
    }
    public createNamedCollectionStatement(): CreateNamedCollectionStatementContext | null {
        return this.getRuleContext(0, CreateNamedCollectionStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateStatement) {
            return visitor.visitCreateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionarySchemaClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public dictionaryAttributeDefinition(): DictionaryAttributeDefinitionContext[];
    public dictionaryAttributeDefinition(i: number): DictionaryAttributeDefinitionContext | null;
    public dictionaryAttributeDefinition(i?: number): DictionaryAttributeDefinitionContext[] | DictionaryAttributeDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryAttributeDefinitionContext);
        }

        return this.getRuleContext(i, DictionaryAttributeDefinitionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionarySchemaClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionarySchemaClause) {
            return visitor.visitDictionarySchemaClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryAttributeDefinitionContext extends antlr.ParserRuleContext {
    public attrs: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DEFAULT);
    	} else {
    		return this.getToken(ClickHouseParser.DEFAULT, i);
    	}
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public EXPRESSION(): antlr.TerminalNode[];
    public EXPRESSION(i: number): antlr.TerminalNode | null;
    public EXPRESSION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.EXPRESSION);
    	} else {
    		return this.getToken(ClickHouseParser.EXPRESSION, i);
    	}
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public HIERARCHICAL(): antlr.TerminalNode[];
    public HIERARCHICAL(i: number): antlr.TerminalNode | null;
    public HIERARCHICAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.HIERARCHICAL);
    	} else {
    		return this.getToken(ClickHouseParser.HIERARCHICAL, i);
    	}
    }
    public INJECTIVE(): antlr.TerminalNode[];
    public INJECTIVE(i: number): antlr.TerminalNode | null;
    public INJECTIVE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.INJECTIVE);
    	} else {
    		return this.getToken(ClickHouseParser.INJECTIVE, i);
    	}
    }
    public IS_OBJECT_ID(): antlr.TerminalNode[];
    public IS_OBJECT_ID(i: number): antlr.TerminalNode | null;
    public IS_OBJECT_ID(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.IS_OBJECT_ID);
    	} else {
    		return this.getToken(ClickHouseParser.IS_OBJECT_ID, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryAttributeDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryAttributeDefinition) {
            return visitor.visitDictionaryAttributeDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryEngineClauseContext extends antlr.ParserRuleContext {
    public clauses: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dictionaryPrimaryKeyClause(): DictionaryPrimaryKeyClauseContext | null {
        return this.getRuleContext(0, DictionaryPrimaryKeyClauseContext);
    }
    public sourceClause(): SourceClauseContext[];
    public sourceClause(i: number): SourceClauseContext | null;
    public sourceClause(i?: number): SourceClauseContext[] | SourceClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SourceClauseContext);
        }

        return this.getRuleContext(i, SourceClauseContext);
    }
    public lifetimeClause(): LifetimeClauseContext[];
    public lifetimeClause(i: number): LifetimeClauseContext | null;
    public lifetimeClause(i?: number): LifetimeClauseContext[] | LifetimeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LifetimeClauseContext);
        }

        return this.getRuleContext(i, LifetimeClauseContext);
    }
    public layoutClause(): LayoutClauseContext[];
    public layoutClause(i: number): LayoutClauseContext | null;
    public layoutClause(i?: number): LayoutClauseContext[] | LayoutClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LayoutClauseContext);
        }

        return this.getRuleContext(i, LayoutClauseContext);
    }
    public rangeClause(): RangeClauseContext[];
    public rangeClause(i: number): RangeClauseContext | null;
    public rangeClause(i?: number): RangeClauseContext[] | RangeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RangeClauseContext);
        }

        return this.getRuleContext(i, RangeClauseContext);
    }
    public dictionarySettingsClause(): DictionarySettingsClauseContext[];
    public dictionarySettingsClause(i: number): DictionarySettingsClauseContext | null;
    public dictionarySettingsClause(i?: number): DictionarySettingsClauseContext[] | DictionarySettingsClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionarySettingsClauseContext);
        }

        return this.getRuleContext(i, DictionarySettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryEngineClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryEngineClause) {
            return visitor.visitDictionaryEngineClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryPrimaryKeyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PRIMARY, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryPrimaryKeyClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryPrimaryKeyClause) {
            return visitor.visitDictionaryPrimaryKeyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryArgumentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryArgumentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryArgumentExpression) {
            return visitor.visitDictionaryArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SOURCE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext[];
    public dictionaryArgumentExpression(i: number): DictionaryArgumentExpressionContext | null;
    public dictionaryArgumentExpression(i?: number): DictionaryArgumentExpressionContext[] | DictionaryArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryArgumentExpressionContext);
        }

        return this.getRuleContext(i, DictionaryArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sourceClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSourceClause) {
            return visitor.visitSourceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LifetimeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIFETIME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIFETIME, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode[];
    public DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
    	}
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_lifetimeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLifetimeClause) {
            return visitor.visitLifetimeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LayoutClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LAYOUT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LAYOUT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext[];
    public dictionaryArgumentExpression(i: number): DictionaryArgumentExpressionContext | null;
    public dictionaryArgumentExpression(i?: number): DictionaryArgumentExpressionContext[] | DictionaryArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryArgumentExpressionContext);
        }

        return this.getRuleContext(i, DictionaryArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_layoutClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLayoutClause) {
            return visitor.visitLayoutClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANGE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RANGE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_rangeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRangeClause) {
            return visitor.visitRangeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionarySettingsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionarySettingsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionarySettingsClause) {
            return visitor.visitDictionarySettingsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ON, 0)!;
    }
    public CLUSTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLUSTER, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_clusterClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitClusterClause) {
            return visitor.visitClusterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UuidClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UUID(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.UUID, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_uuidClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUuidClause) {
            return visitor.visitUuidClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DestinationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_destinationClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDestinationClause) {
            return visitor.visitDestinationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubqueryClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_subqueryClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryClause) {
            return visitor.visitSubqueryClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSchemaClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableSchemaClause;
    }
    public override copyFrom(ctx: TableSchemaClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class SchemaAsTableClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaAsTableClause) {
            return visitor.visitSchemaAsTableClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SchemaAsFunctionClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        return this.getRuleContext(0, TableFunctionExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaAsFunctionClause) {
            return visitor.visitSchemaAsFunctionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SchemaDescriptionClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public tableElementExpression(): TableElementExpressionContext[];
    public tableElementExpression(i: number): TableElementExpressionContext | null;
    public tableElementExpression(i?: number): TableElementExpressionContext[] | TableElementExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableElementExpressionContext);
        }

        return this.getRuleContext(i, TableElementExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaDescriptionClause) {
            return visitor.visitSchemaDescriptionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineClauseContext extends antlr.ParserRuleContext {
    public clauses: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public engineExpression(): EngineExpressionContext {
        return this.getRuleContext(0, EngineExpressionContext)!;
    }
    public orderByClause(): OrderByClauseContext[];
    public orderByClause(i: number): OrderByClauseContext | null;
    public orderByClause(i?: number): OrderByClauseContext[] | OrderByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderByClauseContext);
        }

        return this.getRuleContext(i, OrderByClauseContext);
    }
    public partitionByClause(): PartitionByClauseContext[];
    public partitionByClause(i: number): PartitionByClauseContext | null;
    public partitionByClause(i?: number): PartitionByClauseContext[] | PartitionByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionByClauseContext);
        }

        return this.getRuleContext(i, PartitionByClauseContext);
    }
    public primaryKeyClause(): PrimaryKeyClauseContext[];
    public primaryKeyClause(i: number): PrimaryKeyClauseContext | null;
    public primaryKeyClause(i?: number): PrimaryKeyClauseContext[] | PrimaryKeyClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryKeyClauseContext);
        }

        return this.getRuleContext(i, PrimaryKeyClauseContext);
    }
    public sampleByClause(): SampleByClauseContext[];
    public sampleByClause(i: number): SampleByClauseContext | null;
    public sampleByClause(i?: number): SampleByClauseContext[] | SampleByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SampleByClauseContext);
        }

        return this.getRuleContext(i, SampleByClauseContext);
    }
    public ttlClause(): TtlClauseContext[];
    public ttlClause(i: number): TtlClauseContext | null;
    public ttlClause(i?: number): TtlClauseContext[] | TtlClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TtlClauseContext);
        }

        return this.getRuleContext(i, TtlClauseContext);
    }
    public settingsClause(): SettingsClauseContext[];
    public settingsClause(i: number): SettingsClauseContext | null;
    public settingsClause(i?: number): SettingsClauseContext[] | SettingsClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SettingsClauseContext);
        }

        return this.getRuleContext(i, SettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_engineClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEngineClause) {
            return visitor.visitEngineClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_partitionByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionByClause) {
            return visitor.visitPartitionByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryKeyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PRIMARY, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_primaryKeyClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryKeyClause) {
            return visitor.visitPrimaryKeyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAMPLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SAMPLE, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sampleByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSampleByClause) {
            return visitor.visitSampleByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TtlClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TTL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TTL, 0)!;
    }
    public ttlExpression(): TtlExpressionContext[];
    public ttlExpression(i: number): TtlExpressionContext | null;
    public ttlExpression(i?: number): TtlExpressionContext[] | TtlExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TtlExpressionContext);
        }

        return this.getRuleContext(i, TtlExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ttlClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTtlClause) {
            return visitor.visitTtlClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ENGINE, 0)!;
    }
    public identifierOrNull(): IdentifierOrNullContext {
        return this.getRuleContext(0, IdentifierOrNullContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_engineExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEngineExpression) {
            return visitor.visitEngineExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableElementExpression;
    }
    public override copyFrom(ctx: TableElementExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class TableElementExpressionColumnContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        return this.getRuleContext(0, TableColumnDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionColumn) {
            return visitor.visitTableElementExpressionColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionConstraintContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CHECK, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionConstraint) {
            return visitor.visitTableElementExpressionConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionIndexContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public tableIndexDefinition(): TableIndexDefinitionContext {
        return this.getRuleContext(0, TableIndexDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionIndex) {
            return visitor.visitTableElementExpressionIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionProjectionContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext {
        return this.getRuleContext(0, TableProjectionDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionProjection) {
            return visitor.visitTableElementExpressionProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext | null {
        return this.getRuleContext(0, ColumnTypeExpressionContext);
    }
    public tableColumnPropertyExpression(): TableColumnPropertyExpressionContext | null {
        return this.getRuleContext(0, TableColumnPropertyExpressionContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public codecExpression(): CodecExpressionContext | null {
        return this.getRuleContext(0, CodecExpressionContext);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnDefinition) {
            return visitor.visitTableColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnPropertyExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnPropertyExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnPropertyExpression) {
            return visitor.visitTableColumnPropertyExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIndexDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TYPE, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public GRANULARITY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GRANULARITY, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableIndexDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableIndexDefinition) {
            return visitor.visitTableIndexDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableProjectionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public projectionSelectStatement(): ProjectionSelectStatementContext {
        return this.getRuleContext(0, ProjectionSelectStatementContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableProjectionDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableProjectionDefinition) {
            return visitor.visitTableProjectionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CodecExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CODEC(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CODEC, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public codecArgExpression(): CodecArgExpressionContext[];
    public codecArgExpression(i: number): CodecArgExpressionContext | null;
    public codecArgExpression(i?: number): CodecArgExpressionContext[] | CodecArgExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CodecArgExpressionContext);
        }

        return this.getRuleContext(i, CodecArgExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_codecExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCodecExpression) {
            return visitor.visitCodecExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CodecArgExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_codecArgExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCodecArgExpression) {
            return visitor.visitCodecArgExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TtlExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ttlExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTtlExpression) {
            return visitor.visitTtlExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_describeStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeStatement) {
            return visitor.visitDescribeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dropStatement;
    }
    public override copyFrom(ctx: DropStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class DropDatabaseStatementContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropDatabaseStatement) {
            return visitor.visitDropDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableStatementContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO, 0);
    }
    public DELAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELAY, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropTableStatement) {
            return visitor.visitDropTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExistsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_existsStatement;
    }
    public override copyFrom(ctx: ExistsStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExistsDatabaseStatementContext extends ExistsStatementContext {
    public constructor(ctx: ExistsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXISTS, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExistsDatabaseStatement) {
            return visitor.visitExistsDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsTableStatementContext extends ExistsStatementContext {
    public constructor(ctx: ExistsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXISTS, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExistsTableStatement) {
            return visitor.visitExistsTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_explainStatement;
    }
    public override copyFrom(ctx: ExplainStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainASTStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public AST(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AST, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainASTStatement) {
            return visitor.visitExplainASTStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainQueryTreeStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public QUERY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.QUERY, 0)!;
    }
    public TREE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TREE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainQueryTreeStatement) {
            return visitor.visitExplainQueryTreeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainPlanStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public PLAN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PLAN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainPlanStatement) {
            return visitor.visitExplainPlanStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainDefaultStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainDefaultStatement) {
            return visitor.visitExplainDefaultStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainEstimateStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public ESTIMATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ESTIMATE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainEstimateStatement) {
            return visitor.visitExplainEstimateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainSyntaxStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public SYNTAX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SYNTAX, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainSyntaxStatement) {
            return visitor.visitExplainSyntaxStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainPipelineStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public PIPELINE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PIPELINE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainPipelineStatement) {
            return visitor.visitExplainPipelineStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REVOKE, 0)!;
    }
    public privilegeList(): PrivilegeListContext | null {
        return this.getRuleContext(0, PrivilegeListContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ON, 0);
    }
    public accessSubjectIdentifier(): AccessSubjectIdentifierContext | null {
        return this.getRuleContext(0, AccessSubjectIdentifierContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public subjectExpressionList(): SubjectExpressionListContext {
        return this.getRuleContext(0, SubjectExpressionListContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public roleExpressionList(): RoleExpressionListContext | null {
        return this.getRuleContext(0, RoleExpressionListContext);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_revokeStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRevokeStatement) {
            return visitor.visitRevokeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubjectExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subjectExpression(): SubjectExpressionContext[];
    public subjectExpression(i: number): SubjectExpressionContext | null;
    public subjectExpression(i?: number): SubjectExpressionContext[] | SubjectExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubjectExpressionContext);
        }

        return this.getRuleContext(i, SubjectExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_subjectExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSubjectExpressionList) {
            return visitor.visitSubjectExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifier(): UserIdentifierContext[];
    public userIdentifier(i: number): UserIdentifierContext | null;
    public userIdentifier(i?: number): UserIdentifierContext[] | UserIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserIdentifierContext);
        }

        return this.getRuleContext(i, UserIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserExpressionList) {
            return visitor.visitUserExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifier(): RoleIdentifierContext[];
    public roleIdentifier(i: number): RoleIdentifierContext | null;
    public roleIdentifier(i?: number): RoleIdentifierContext[] | RoleIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleIdentifierContext);
        }

        return this.getRuleContext(i, RoleIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_roleExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRoleExpressionList) {
            return visitor.visitRoleExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GRANT, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext {
        return this.getRuleContext(0, UserOrRoleExpressionListContext)!;
    }
    public withGrantOrReplaceOption(): WithGrantOrReplaceOptionContext | null {
        return this.getRuleContext(0, WithGrantOrReplaceOptionContext);
    }
    public privilegeList(): PrivilegeListContext[];
    public privilegeList(i: number): PrivilegeListContext | null;
    public privilegeList(i?: number): PrivilegeListContext[] | PrivilegeListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeListContext);
        }

        return this.getRuleContext(i, PrivilegeListContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ON);
    	} else {
    		return this.getToken(ClickHouseParser.ON, i);
    	}
    }
    public accessSubjectIdentifier(): AccessSubjectIdentifierContext[];
    public accessSubjectIdentifier(i: number): AccessSubjectIdentifierContext | null;
    public accessSubjectIdentifier(i?: number): AccessSubjectIdentifierContext[] | AccessSubjectIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AccessSubjectIdentifierContext);
        }

        return this.getRuleContext(i, AccessSubjectIdentifierContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public roleExpressionList(): RoleExpressionListContext | null {
        return this.getRuleContext(0, RoleExpressionListContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public withReplaceOption(): WithReplaceOptionContext | null {
        return this.getRuleContext(0, WithReplaceOptionContext);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT, 0);
    }
    public GRANTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANTS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_grantStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGrantStatement) {
            return visitor.visitGrantStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithGrantOrReplaceOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public withReplaceOption(): WithReplaceOptionContext | null {
        return this.getRuleContext(0, WithReplaceOptionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_withGrantOrReplaceOption;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWithGrantOrReplaceOption) {
            return visitor.visitWithGrantOrReplaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithReplaceOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WITH, 0)!;
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REPLACE, 0)!;
    }
    public OPTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_withReplaceOption;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWithReplaceOption) {
            return visitor.visitWithReplaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AccessSubjectIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public ASTERISK(): antlr.TerminalNode[];
    public ASTERISK(i: number): antlr.TerminalNode | null;
    public ASTERISK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ASTERISK);
    	} else {
    		return this.getToken(ClickHouseParser.ASTERISK, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_accessSubjectIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAccessSubjectIdentifier) {
            return visitor.visitAccessSubjectIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_privilegeList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeList) {
            return visitor.visitPrivilegeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_roleIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRoleIdentifier) {
            return visitor.visitRoleIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT_USER, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserIdentifier) {
            return visitor.visitUserIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserOrRoleExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userOrRoleIdentifier(): UserOrRoleIdentifierContext[];
    public userOrRoleIdentifier(i: number): UserOrRoleIdentifierContext | null;
    public userOrRoleIdentifier(i?: number): UserOrRoleIdentifierContext[] | UserOrRoleIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserOrRoleIdentifierContext);
        }

        return this.getRuleContext(i, UserOrRoleIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userOrRoleExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserOrRoleExpressionList) {
            return visitor.visitUserOrRoleExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserOrRoleIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifier(): UserIdentifierContext | null {
        return this.getRuleContext(0, UserIdentifierContext);
    }
    public roleIdentifier(): RoleIdentifierContext | null {
        return this.getRuleContext(0, RoleIdentifierContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userOrRoleIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserOrRoleIdentifier) {
            return visitor.visitUserOrRoleIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectPrivilege) {
            return visitor.visitSelectPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INSERT, 0)!;
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_insertPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInsertPrivilege) {
            return visitor.visitInsertPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatePrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public ARBITRARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARBITRARY, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreatePrivilege) {
            return visitor.visitCreatePrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dropPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropPrivilege) {
            return visitor.visitDropPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DATABASES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASES, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLES, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMNS, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_showPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowPrivilege) {
            return visitor.visitShowPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntrospectionPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTROSPECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTROSPECTION, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTIONS, 0);
    }
    public ADDRESSTOLINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINE, 0);
    }
    public ADDRESSTOLINEWITHINLINES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINEWITHINLINES, 0);
    }
    public ADDRESSTOSYMBOL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOSYMBOL, 0);
    }
    public DEMANGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEMANGLE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_introspectionPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIntrospectionPrivilege) {
            return visitor.visitIntrospectionPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourcePrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SOURCES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCES, 0);
    }
    public AZURE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AZURE, 0);
    }
    public FILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FILE, 0);
    }
    public HDFS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HDFS, 0);
    }
    public HIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HIVE, 0);
    }
    public JDBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JDBC, 0);
    }
    public MONGO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONGO, 0);
    }
    public MYSQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQL, 0);
    }
    public ODBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ODBC, 0);
    }
    public POSTGRES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POSTGRES, 0);
    }
    public REDIS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REDIS, 0);
    }
    public REMOTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOTE, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.S3, 0);
    }
    public SQLITE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQLITE, 0);
    }
    public URL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.URL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sourcePrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSourcePrivilege) {
            return visitor.visitSourcePrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DICTGET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGET, 0);
    }
    public DICTHAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTHAS, 0);
    }
    public DICTGETHIERARCHY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGETHIERARCHY, 0);
    }
    public DICTISIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTISIN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictPrivilege) {
            return visitor.visitDictPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UPDATE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADD, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MODIFY, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public CLEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLEAR, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RENAME, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public MATERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORDER, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAMPLE, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SETTING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTING, 0);
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVE, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCH, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARTITION, 0);
    }
    public PART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PART, 0);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FREEZE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REFRESH, 0);
    }
    public LIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIVE, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECURITY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterPrivilege) {
            return visitor.visitAlterPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AccessManagementPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ACCESS, 0);
    }
    public MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MANAGEMENT, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLE, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICY, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public QUOTA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUOTA, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILE, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW, 0);
    }
    public SHOW_USERS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_USERS, 0);
    }
    public SHOW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROLES, 0);
    }
    public SHOW_ROW_POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROW_POLICIES, 0);
    }
    public POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICIES, 0);
    }
    public SHOW_QUOTAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_QUOTAS, 0);
    }
    public SHOW_SETTINGS_PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_SETTINGS_PROFILES, 0);
    }
    public PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILES, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECURITY, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public ALLOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALLOW, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_accessManagementPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAccessManagementPrivilege) {
            return visitor.visitAccessManagementPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SystemPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYSTEM, 0);
    }
    public SHUTDOWN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHUTDOWN, 0);
    }
    public KILL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KILL, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CACHE, 0);
    }
    public DNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DNS, 0);
    }
    public MARK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARK, 0);
    }
    public UNCOMPRESSED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNCOMPRESSED, 0);
    }
    public MARKS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARKS, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RELOAD, 0);
    }
    public CONFIG(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONFIG, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public EMBEDDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EMBEDDED, 0);
    }
    public MERGES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MERGES, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STOP, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.START, 0);
    }
    public FETCHES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCHES, 0);
    }
    public MOVES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVES, 0);
    }
    public SENDS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SENDS, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
    }
    public REPLICATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATED, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATION, 0);
    }
    public QUEUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUEUES, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICA, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTART, 0);
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLUSH, 0);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOGS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_systemPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSystemPrivilege) {
            return visitor.visitSystemPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedCollectionAdminPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NAMED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NAMED, 0)!;
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTION, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public CONTROL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONTROL, 0);
    }
    public USAGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USAGE, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW, 0);
    }
    public COLLECTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTIONS, 0);
    }
    public SECRETS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECRETS, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_namedCollectionAdminPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNamedCollectionAdminPrivilege) {
            return visitor.visitNamedCollectionAdminPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectPrivilege(): SelectPrivilegeContext | null {
        return this.getRuleContext(0, SelectPrivilegeContext);
    }
    public insertPrivilege(): InsertPrivilegeContext | null {
        return this.getRuleContext(0, InsertPrivilegeContext);
    }
    public createPrivilege(): CreatePrivilegeContext | null {
        return this.getRuleContext(0, CreatePrivilegeContext);
    }
    public dropPrivilege(): DropPrivilegeContext | null {
        return this.getRuleContext(0, DropPrivilegeContext);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRUNCATE, 0);
    }
    public KILL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KILL, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY, 0);
    }
    public OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0);
    }
    public showPrivilege(): ShowPrivilegeContext | null {
        return this.getRuleContext(0, ShowPrivilegeContext);
    }
    public introspectionPrivilege(): IntrospectionPrivilegeContext | null {
        return this.getRuleContext(0, IntrospectionPrivilegeContext);
    }
    public sourcePrivilege(): SourcePrivilegeContext | null {
        return this.getRuleContext(0, SourcePrivilegeContext);
    }
    public dictPrivilege(): DictPrivilegeContext | null {
        return this.getRuleContext(0, DictPrivilegeContext);
    }
    public alterPrivilege(): AlterPrivilegeContext | null {
        return this.getRuleContext(0, AlterPrivilegeContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public DISPLAYSECRETSINSHOWANDSELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT, 0);
    }
    public accessManagementPrivilege(): AccessManagementPrivilegeContext | null {
        return this.getRuleContext(0, AccessManagementPrivilegeContext);
    }
    public systemPrivilege(): SystemPrivilegeContext | null {
        return this.getRuleContext(0, SystemPrivilegeContext);
    }
    public namedCollectionAdminPrivilege(): NamedCollectionAdminPrivilegeContext | null {
        return this.getRuleContext(0, NamedCollectionAdminPrivilegeContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ENGINE, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public USAGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USAGE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_privilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INSERT, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INTO, 0)!;
    }
    public dataClause(): DataClauseContext {
        return this.getRuleContext(0, DataClauseContext)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext | null {
        return this.getRuleContext(0, TableFunctionExpressionContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public columnsOrExceptClause(): ColumnsOrExceptClauseContext | null {
        return this.getRuleContext(0, ColumnsOrExceptClauseContext);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_insertStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsOrExceptClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASTERISK, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnsOrExceptClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsOrExceptClause) {
            return visitor.visitColumnsOrExceptClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext[];
    public columnIdentifier(i: number): ColumnIdentifierContext | null;
    public columnIdentifier(i?: number): ColumnIdentifierContext[] | ColumnIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnIdentifierContext);
        }

        return this.getRuleContext(i, ColumnIdentifierContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsClause) {
            return visitor.visitColumnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertFormatTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATED, 0);
    }
    public TABSEPARATEDRAW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAW, 0);
    }
    public TABSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMES, 0);
    }
    public TABSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public TABSEPARATEDRAWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMES, 0);
    }
    public TABSEPARATEDRAWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATE, 0);
    }
    public TEMPLATEIGNORESPACES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATEIGNORESPACES, 0);
    }
    public CSV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSV, 0);
    }
    public CSVWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMES, 0);
    }
    public CSVWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMESANDTYPES, 0);
    }
    public CUSTOMSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATED, 0);
    }
    public CUSTOMSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMES, 0);
    }
    public CUSTOMSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VALUES, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON, 0);
    }
    public JSONASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASSTRING, 0);
    }
    public JSONASOBJECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASOBJECT, 0);
    }
    public JSONSTRINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGS, 0);
    }
    public JSONCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNS, 0);
    }
    public JSONCOLUMNSWITHMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNSWITHMETADATA, 0);
    }
    public JSONCOMPACT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACT, 0);
    }
    public JSONCOMPACTCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTCOLUMNS, 0);
    }
    public JSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONEACHROW, 0);
    }
    public JSONSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROW, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONOBJECTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONOBJECTEACHROW, 0);
    }
    public BSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BSONEACHROW, 0);
    }
    public TSKV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TSKV, 0);
    }
    public PROTOBUF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUF, 0);
    }
    public PROTOBUFSINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFSINGLE, 0);
    }
    public PROTOBUFLIST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFLIST, 0);
    }
    public AVRO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVRO, 0);
    }
    public AVROCONFLUENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVROCONFLUENT, 0);
    }
    public PARQUET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUET, 0);
    }
    public PARQUETMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUETMETADATA, 0);
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROW, 0);
    }
    public ARROWSTREAM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROWSTREAM, 0);
    }
    public ORC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORC, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ONE, 0);
    }
    public NPY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NPY, 0);
    }
    public ROWBINARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARY, 0);
    }
    public ROWBINARYWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMES, 0);
    }
    public ROWBINARYWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMESANDTYPES, 0);
    }
    public ROWBINARYWITHDEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHDEFAULTS, 0);
    }
    public NATIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NATIVE, 0);
    }
    public CAPNPROTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CAPNPROTO, 0);
    }
    public LINEASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LINEASSTRING, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REGEXP, 0);
    }
    public RAWBLOB(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RAWBLOB, 0);
    }
    public MSGPACK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MSGPACK, 0);
    }
    public MYSQLDUMP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQLDUMP, 0);
    }
    public DWARF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DWARF, 0);
    }
    public FORM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORM, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_insertFormatType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInsertFormatType) {
            return visitor.visitInsertFormatType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dataClause;
    }
    public override copyFrom(ctx: DataClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class DataClauseValuesContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valuesStatement(): ValuesStatementContext {
        return this.getRuleContext(0, ValuesStatementContext)!;
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORMAT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseValues) {
            return visitor.visitDataClauseValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DataClauseFormatContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FORMAT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FORMAT, 0)!;
    }
    public insertFormatType(): InsertFormatTypeContext {
        return this.getRuleContext(0, InsertFormatTypeContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseFormat) {
            return visitor.visitDataClauseFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DataClauseSelectContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseSelect) {
            return visitor.visitDataClauseSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_literalList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLiteralList) {
            return visitor.visitLiteralList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public numberLiteral(): NumberLiteralContext[];
    public numberLiteral(i: number): NumberLiteralContext | null;
    public numberLiteral(i?: number): NumberLiteralContext[] | NumberLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumberLiteralContext);
        }

        return this.getRuleContext(i, NumberLiteralContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public literalList(): LiteralListContext | null {
        return this.getRuleContext(0, LiteralListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valueIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValueIdentifier) {
            return visitor.visitValueIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueOrArrayIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueIdentifier(): ValueIdentifierContext | null {
        return this.getRuleContext(0, ValueIdentifierContext);
    }
    public arrayIdentifier(): ArrayIdentifierContext | null {
        return this.getRuleContext(0, ArrayIdentifierContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valueOrArrayIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValueOrArrayIdentifier) {
            return visitor.visitValueOrArrayIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LBRACKET, 0)!;
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RBRACKET, 0)!;
    }
    public valueOrArrayIdentifier(): ValueOrArrayIdentifierContext[];
    public valueOrArrayIdentifier(i: number): ValueOrArrayIdentifierContext | null;
    public valueOrArrayIdentifier(i?: number): ValueOrArrayIdentifierContext[] | ValueOrArrayIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueOrArrayIdentifierContext);
        }

        return this.getRuleContext(i, ValueOrArrayIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_arrayIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitArrayIdentifier) {
            return visitor.visitArrayIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public valueOrArrayIdentifier(): ValueOrArrayIdentifierContext[];
    public valueOrArrayIdentifier(i: number): ValueOrArrayIdentifierContext | null;
    public valueOrArrayIdentifier(i?: number): ValueOrArrayIdentifierContext[] | ValueOrArrayIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueOrArrayIdentifierContext);
        }

        return this.getRuleContext(i, ValueOrArrayIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valuesClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValuesClause) {
            return visitor.visitValuesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VALUES, 0)!;
    }
    public valuesClause(): ValuesClauseContext[];
    public valuesClause(i: number): ValuesClauseContext | null;
    public valuesClause(i?: number): ValuesClauseContext[] | ValuesClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValuesClauseContext);
        }

        return this.getRuleContext(i, ValuesClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valuesStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValuesStatement) {
            return visitor.visitValuesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KillStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_killStatement;
    }
    public override copyFrom(ctx: KillStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class KillMutationStatementContext extends KillStatementContext {
    public constructor(ctx: KillStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KILL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KILL, 0)!;
    }
    public MUTATION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MUTATION, 0)!;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(0, WhereClauseContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASYNC, 0);
    }
    public TEST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEST, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKillMutationStatement) {
            return visitor.visitKillMutationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptimizeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIMIZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public DEDUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_optimizeStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOptimizeStatement) {
            return visitor.visitOptimizeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RENAME, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext[];
    public tableIdentifier(i: number): TableIdentifierContext | null;
    public tableIdentifier(i?: number): TableIdentifierContext[] | TableIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableIdentifierContext);
        }

        return this.getRuleContext(i, TableIdentifierContext);
    }
    public TO(): antlr.TerminalNode[];
    public TO(i: number): antlr.TerminalNode | null;
    public TO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.TO);
    	} else {
    		return this.getToken(ClickHouseParser.TO, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_renameStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRenameStatement) {
            return visitor.visitRenameStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProjectionSelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public projectionOrderByClause(): ProjectionOrderByClauseContext | null {
        return this.getRuleContext(0, ProjectionOrderByClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_projectionSelectStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitProjectionSelectStatement) {
            return visitor.visitProjectionSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectUnionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatementWithParentheses(): SelectStatementWithParenthesesContext[];
    public selectStatementWithParentheses(i: number): SelectStatementWithParenthesesContext | null;
    public selectStatementWithParentheses(i?: number): SelectStatementWithParenthesesContext[] | SelectStatementWithParenthesesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectStatementWithParenthesesContext);
        }

        return this.getRuleContext(i, SelectStatementWithParenthesesContext);
    }
    public UNION(): antlr.TerminalNode[];
    public UNION(i: number): antlr.TerminalNode | null;
    public UNION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.UNION);
    	} else {
    		return this.getToken(ClickHouseParser.UNION, i);
    	}
    }
    public ALL(): antlr.TerminalNode[];
    public ALL(i: number): antlr.TerminalNode | null;
    public ALL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ALL);
    	} else {
    		return this.getToken(ClickHouseParser.ALL, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectUnionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectUnionStatement) {
            return visitor.visitSelectUnionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementWithParenthesesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public selectUnionStatement(): SelectUnionStatementContext | null {
        return this.getRuleContext(0, SelectUnionStatementContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectStatementWithParentheses;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatementWithParentheses) {
            return visitor.visitSelectStatementWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public topClause(): TopClauseContext | null {
        return this.getRuleContext(0, TopClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public arrayJoinClause(): ArrayJoinClauseContext | null {
        return this.getRuleContext(0, ArrayJoinClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public prewhereClause(): PrewhereClauseContext | null {
        return this.getRuleContext(0, PrewhereClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.WITH);
    	} else {
    		return this.getToken(ClickHouseParser.WITH, i);
    	}
    }
    public TOTALS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOTALS, 0);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitByClause(): LimitByClauseContext | null {
        return this.getRuleContext(0, LimitByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WITH, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_withClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TopClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TOP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TOP, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_topClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTopClause) {
            return visitor.visitTopClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public joinExpression(): JoinExpressionContext {
        return this.getRuleContext(0, JoinExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_fromClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayJoinClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARRAY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ARRAY, 0)!;
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.JOIN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_arrayJoinClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitArrayJoinClause) {
            return visitor.visitArrayJoinClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WINDOW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public windowExpression(): WindowExpressionContext {
        return this.getRuleContext(0, WindowExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrewhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PREWHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PREWHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_prewhereClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrewhereClause) {
            return visitor.visitPrewhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_whereClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GROUP, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_groupByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HAVING(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.HAVING, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_havingClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public orderExpressionList(): OrderExpressionListContext {
        return this.getRuleContext(0, OrderExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderByClause) {
            return visitor.visitOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProjectionOrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_projectionOrderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitProjectionOrderByClause) {
            return visitor.visitProjectionOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIMIT, 0)!;
    }
    public limitExpression(): LimitExpressionContext {
        return this.getRuleContext(0, LimitExpressionContext)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitByClause) {
            return visitor.visitLimitByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIMIT, 0)!;
    }
    public limitExpression(): LimitExpressionContext {
        return this.getRuleContext(0, LimitExpressionContext)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingsClause) {
            return visitor.visitSettingsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinExpression;
    }
    public override copyFrom(ctx: JoinExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class JoinExpressionParensContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public joinExpression(): JoinExpressionContext {
        return this.getRuleContext(0, JoinExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionParens) {
            return visitor.visitJoinExpressionParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionTableContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public sampleClause(): SampleClauseContext | null {
        return this.getRuleContext(0, SampleClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionTable) {
            return visitor.visitJoinExpressionTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionCrossOpContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public joinExpression(): JoinExpressionContext[];
    public joinExpression(i: number): JoinExpressionContext | null;
    public joinExpression(i?: number): JoinExpressionContext[] | JoinExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinExpressionContext);
        }

        return this.getRuleContext(i, JoinExpressionContext);
    }
    public joinOperatorCross(): JoinOperatorCrossContext {
        return this.getRuleContext(0, JoinOperatorCrossContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionCrossOp) {
            return visitor.visitJoinExpressionCrossOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionOpContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public joinExpression(): JoinExpressionContext[];
    public joinExpression(i: number): JoinExpressionContext | null;
    public joinExpression(i?: number): JoinExpressionContext[] | JoinExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinExpressionContext);
        }

        return this.getRuleContext(i, JoinExpressionContext);
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.JOIN, 0)!;
    }
    public joinConstraintClause(): JoinConstraintClauseContext {
        return this.getRuleContext(0, JoinConstraintClauseContext)!;
    }
    public joinOperator(): JoinOperatorContext | null {
        return this.getRuleContext(0, JoinOperatorContext);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionOp) {
            return visitor.visitJoinExpressionOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinOperator;
    }
    public override copyFrom(ctx: JoinOperatorContext): void {
        super.copyFrom(ctx);
    }
}
export class JoinOpFullContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FULL, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpFull) {
            return visitor.visitJoinOpFull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinOpInnerContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpInner) {
            return visitor.visitJoinOpInner(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinOpLeftRightContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RIGHT, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMI, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANTI, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpLeftRight) {
            return visitor.visitJoinOpLeftRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinOperatorCrossContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CROSS, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JOIN, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinOperatorCross;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOperatorCross) {
            return visitor.visitJoinOperatorCross(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinConstraintClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ON, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USING, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinConstraintClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinConstraintClause) {
            return visitor.visitJoinConstraintClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAMPLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SAMPLE, 0)!;
    }
    public ratioExpression(): RatioExpressionContext[];
    public ratioExpression(i: number): RatioExpressionContext | null;
    public ratioExpression(i?: number): RatioExpressionContext[] | RatioExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RatioExpressionContext);
        }

        return this.getRuleContext(i, RatioExpressionContext);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sampleClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSampleClause) {
            return visitor.visitSampleClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitExpression) {
            return visitor.visitLimitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public orderExpression(): OrderExpressionContext[];
    public orderExpression(i: number): OrderExpressionContext | null;
    public orderExpression(i?: number): OrderExpressionContext[] | OrderExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderExpressionContext);
        }

        return this.getRuleContext(i, OrderExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderExpressionList) {
            return visitor.visitOrderExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULLS, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLATE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public ASCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASCENDING, 0);
    }
    public DESCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCENDING, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAST, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderExpression) {
            return visitor.visitOrderExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RatioExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numberLiteral(): NumberLiteralContext[];
    public numberLiteral(i: number): NumberLiteralContext | null;
    public numberLiteral(i?: number): NumberLiteralContext[] | NumberLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumberLiteralContext);
        }

        return this.getRuleContext(i, NumberLiteralContext);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SLASH, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ratioExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRatioExpression) {
            return visitor.visitRatioExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public settingExpression(): SettingExpressionContext[];
    public settingExpression(i: number): SettingExpressionContext | null;
    public settingExpression(i?: number): SettingExpressionContext[] | SettingExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SettingExpressionContext);
        }

        return this.getRuleContext(i, SettingExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingExpressionList) {
            return visitor.visitSettingExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public literal(): LiteralContext {
        return this.getRuleContext(0, LiteralContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingExpression) {
            return visitor.visitSettingExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowPartitionByClause(): WindowPartitionByClauseContext | null {
        return this.getRuleContext(0, WindowPartitionByClauseContext);
    }
    public windowOrderByClause(): WindowOrderByClauseContext | null {
        return this.getRuleContext(0, WindowOrderByClauseContext);
    }
    public windowFrameClause(): WindowFrameClauseContext | null {
        return this.getRuleContext(0, WindowFrameClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowExpression) {
            return visitor.visitWindowExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowPartitionByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowPartitionByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowPartitionByClause) {
            return visitor.visitWindowPartitionByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowOrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public orderExpressionList(): OrderExpressionListContext {
        return this.getRuleContext(0, OrderExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowOrderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowOrderByClause) {
            return visitor.visitWindowOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameExtend(): WindowFrameExtendContext {
        return this.getRuleContext(0, WindowFrameExtendContext)!;
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANGE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrameClause) {
            return visitor.visitWindowFrameClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameExtendContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameExtend;
    }
    public override copyFrom(ctx: WindowFrameExtendContext): void {
        super.copyFrom(ctx);
    }
}
export class FrameStartContext extends WindowFrameExtendContext {
    public constructor(ctx: WindowFrameExtendContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public windowFrameBound(): WindowFrameBoundContext {
        return this.getRuleContext(0, WindowFrameBoundContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFrameStart) {
            return visitor.visitFrameStart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FrameBetweenContext extends WindowFrameExtendContext {
    public constructor(ctx: WindowFrameExtendContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BETWEEN, 0)!;
    }
    public windowFrameBound(): WindowFrameBoundContext[];
    public windowFrameBound(i: number): WindowFrameBoundContext | null;
    public windowFrameBound(i?: number): WindowFrameBoundContext[] | WindowFrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowFrameBoundContext);
        }

        return this.getRuleContext(i, WindowFrameBoundContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFrameBetween) {
            return visitor.visitFrameBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNBOUNDED, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOLLOWING, 0);
    }
    public numberLiteral(): NumberLiteralContext | null {
        return this.getRuleContext(0, NumberLiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameBound;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrameBound) {
            return visitor.visitWindowFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SET, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_setStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSetStatement) {
            return visitor.visitSetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_showStatement;
    }
    public override copyFrom(ctx: ShowStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowCreateTableStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTableStatement) {
            return visitor.visitShowCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateDictionaryStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateDictionaryStatement) {
            return visitor.visitShowCreateDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLES, 0)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowTablesStatement) {
            return visitor.visitShowTablesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDictionariesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DICTIONARIES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowDictionariesStatement) {
            return visitor.visitShowDictionariesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateDatabaseStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateDatabaseStatement) {
            return visitor.visitShowCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDatabasesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DATABASES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASES, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowDatabasesStatement) {
            return visitor.visitShowDatabasesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SystemStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SYSTEM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SYSTEM, 0)!;
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLUSH, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOGS, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RELOAD, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.START, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STOP, 0);
    }
    public SENDS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SENDS, 0);
    }
    public FETCHES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCHES, 0);
    }
    public MERGES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MERGES, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public REPLICATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATED, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICA, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_systemStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSystemStatement) {
            return visitor.visitSystemStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUNCATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TRUNCATE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_truncateStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateStatement) {
            return visitor.visitTruncateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.USE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_useStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUseStatement) {
            return visitor.visitUseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WatchStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WATCH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WATCH, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public EVENTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EVENTS, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMIT, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_watchStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWatchStatement) {
            return visitor.visitWatchStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnTypeExpression;
    }
    public override copyFrom(ctx: ColumnTypeExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnTypeExpressionComplexContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext[];
    public columnTypeExpression(i: number): ColumnTypeExpressionContext | null;
    public columnTypeExpression(i?: number): ColumnTypeExpressionContext[] | ColumnTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeExpressionContext);
        }

        return this.getRuleContext(i, ColumnTypeExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionComplex) {
            return visitor.visitColumnTypeExpressionComplex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionEnumContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public enumValue(): EnumValueContext[];
    public enumValue(i: number): EnumValueContext | null;
    public enumValue(i?: number): EnumValueContext[] | EnumValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(EnumValueContext);
        }

        return this.getRuleContext(i, EnumValueContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionEnum) {
            return visitor.visitColumnTypeExpressionEnum(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionNestedContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext[];
    public columnTypeExpression(i: number): ColumnTypeExpressionContext | null;
    public columnTypeExpression(i?: number): ColumnTypeExpressionContext[] | ColumnTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeExpressionContext);
        }

        return this.getRuleContext(i, ColumnTypeExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionNested) {
            return visitor.visitColumnTypeExpressionNested(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionParamContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionParam) {
            return visitor.visitColumnTypeExpressionParam(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionSimpleContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionSimple) {
            return visitor.visitColumnTypeExpressionSimple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnsExpression(): ColumnsExpressionContext[];
    public columnsExpression(i: number): ColumnsExpressionContext | null;
    public columnsExpression(i?: number): ColumnsExpressionContext[] | ColumnsExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnsExpressionContext);
        }

        return this.getRuleContext(i, ColumnsExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionList) {
            return visitor.visitColumnExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnsExpression;
    }
    public override copyFrom(ctx: ColumnsExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnsExpressionAsteriskContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ASTERISK, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionAsterisk) {
            return visitor.visitColumnsExpressionAsterisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnsExpressionSubqueryContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionSubquery) {
            return visitor.visitColumnsExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnsExpressionColumnContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionColumn) {
            return visitor.visitColumnsExpressionColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnExpression;
    }
    public override copyFrom(ctx: ColumnExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnExpressionIsNullContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.IS, 0)!;
    }
    public NULL_SQL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NULL_SQL, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionIsNull) {
            return visitor.visitColumnExpressionIsNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTupleContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTuple) {
            return visitor.visitColumnExpressionTuple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAndContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAnd) {
            return visitor.visitColumnExpressionAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionDateContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionDate) {
            return visitor.visitColumnExpressionDate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionBetweenContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BETWEEN, 0)!;
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionBetween) {
            return visitor.visitColumnExpressionBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTrimContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRIM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TRIM, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BOTH, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEADING, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRAILING, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTrim) {
            return visitor.visitColumnExpressionTrim(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionNotContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NOT, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionNot) {
            return visitor.visitColumnExpressionNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionSubstringContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SUBSTRING(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SUBSTRING, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionSubstring) {
            return visitor.visitColumnExpressionSubstring(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionCaseContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.END, 0)!;
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public WHEN(): antlr.TerminalNode[];
    public WHEN(i: number): antlr.TerminalNode | null;
    public WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.WHEN);
    	} else {
    		return this.getToken(ClickHouseParser.WHEN, i);
    	}
    }
    public THEN(): antlr.TerminalNode[];
    public THEN(i: number): antlr.TerminalNode | null;
    public THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.THEN);
    	} else {
    		return this.getToken(ClickHouseParser.THEN, i);
    	}
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ELSE, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionCase) {
            return visitor.visitColumnExpressionCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionIdentifierContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionIdentifier) {
            return visitor.visitColumnExpressionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionArrayAccessContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LBRACKET, 0)!;
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RBRACKET, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionArrayAccess) {
            return visitor.visitColumnExpressionArrayAccess(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionFunctionContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public columnArgumentList(): ColumnArgumentListContext | null {
        return this.getRuleContext(0, ColumnArgumentListContext);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionFunction) {
            return visitor.visitColumnExpressionFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAsteriskContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ASTERISK, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAsterisk) {
            return visitor.visitColumnExpressionAsterisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionLiteralContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public literal(): LiteralContext {
        return this.getRuleContext(0, LiteralContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionLiteral) {
            return visitor.visitColumnExpressionLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionWinFunctionContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OVER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public windowExpression(): WindowExpressionContext {
        return this.getRuleContext(0, WindowExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionWinFunction) {
            return visitor.visitColumnExpressionWinFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTernaryOpContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public QUESTIONMARK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.QUESTIONMARK, 0)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLON, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTernaryOp) {
            return visitor.visitColumnExpressionTernaryOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionArrayContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LBRACKET, 0)!;
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RBRACKET, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionArray) {
            return visitor.visitColumnExpressionArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTupleAccessContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DOT, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTupleAccess) {
            return visitor.visitColumnExpressionTupleAccess(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionParensContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionParens) {
            return visitor.visitColumnExpressionParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionWinFunctionTargetContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OVER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionWinFunctionTarget) {
            return visitor.visitColumnExpressionWinFunctionTarget(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAliasContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public alias(): AliasContext | null {
        return this.getRuleContext(0, AliasContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAlias) {
            return visitor.visitColumnExpressionAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence3Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public EQ_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_DOUBLE, 0);
    }
    public EQ_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
    }
    public NOT_EQ(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT_EQ, 0);
    }
    public LE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LE, 0);
    }
    public GE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GE, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GT, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ILIKE, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence3) {
            return visitor.visitColumnExpressionPrecedence3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTimestampContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIMESTAMP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TIMESTAMP, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTimestamp) {
            return visitor.visitColumnExpressionTimestamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence2Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLUS, 0);
    }
    public DASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DASH, 0);
    }
    public CONCAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONCAT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence2) {
            return visitor.visitColumnExpressionPrecedence2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence1Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PERCENT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence1) {
            return visitor.visitColumnExpressionPrecedence1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionIntervalContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INTERVAL, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionInterval) {
            return visitor.visitColumnExpressionInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionSubqueryContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionSubquery) {
            return visitor.visitColumnExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionNegateContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DASH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DASH, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionNegate) {
            return visitor.visitColumnExpressionNegate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionExtractContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXTRACT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXTRACT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionExtract) {
            return visitor.visitColumnExpressionExtract(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionCastContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionCast) {
            return visitor.visitColumnExpressionCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionOrContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public OR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OR, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionOr) {
            return visitor.visitColumnExpressionOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnArgumentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnArgumentExpression(): ColumnArgumentExpressionContext[];
    public columnArgumentExpression(i: number): ColumnArgumentExpressionContext | null;
    public columnArgumentExpression(i?: number): ColumnArgumentExpressionContext[] | ColumnArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnArgumentExpressionContext);
        }

        return this.getRuleContext(i, ColumnArgumentExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnArgumentList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnArgumentList) {
            return visitor.visitColumnArgumentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnArgumentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnLambdaExpression(): ColumnLambdaExpressionContext | null {
        return this.getRuleContext(0, ColumnLambdaExpressionContext);
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnArgumentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnArgumentExpression) {
            return visitor.visitColumnArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnLambdaExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARROW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ARROW_SYMBOL, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnLambdaExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnLambdaExpression) {
            return visitor.visitColumnLambdaExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DOT);
    	} else {
    		return this.getToken(ClickHouseParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnIdentifier) {
            return visitor.visitColumnIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableExpression;
    }
    public override copyFrom(ctx: TableExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class TableExpressionFunctionContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        return this.getRuleContext(0, TableFunctionExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionFunction) {
            return visitor.visitTableExpressionFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionIdentifierContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionIdentifier) {
            return visitor.visitTableExpressionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionAliasContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public alias(): AliasContext | null {
        return this.getRuleContext(0, AliasContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionAlias) {
            return visitor.visitTableExpressionAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionSubqueryContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionSubquery) {
            return visitor.visitTableExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public tableArgList(): TableArgListContext | null {
        return this.getRuleContext(0, TableArgListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableFunctionExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionExpression) {
            return visitor.visitTableFunctionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdentifier) {
            return visitor.visitTableIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgExpression(): TableArgExpressionContext[];
    public tableArgExpression(i: number): TableArgExpressionContext | null;
    public tableArgExpression(i?: number): TableArgExpressionContext[] | TableArgExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableArgExpressionContext);
        }

        return this.getRuleContext(i, TableArgExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableArgList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgList) {
            return visitor.visitTableArgList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext | null {
        return this.getRuleContext(0, TableFunctionExpressionContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableArgExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgExpression) {
            return visitor.visitTableArgExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_databaseIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseIdentifier) {
            return visitor.visitDatabaseIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloatingLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLOATING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLOATING_LITERAL, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode[];
    public DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
    	}
    }
    public OCTAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_floatingLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFloatingLiteral) {
            return visitor.visitFloatingLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public floatingLiteral(): FloatingLiteralContext | null {
        return this.getRuleContext(0, FloatingLiteralContext);
    }
    public OCTAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public HEXADECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HEXADECIMAL_LITERAL, 0);
    }
    public INF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INF, 0);
    }
    public NAN_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAN_SQL, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLUS, 0);
    }
    public DASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DASH, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_numberLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNumberLiteral) {
            return visitor.visitNumberLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numberLiteral(): NumberLiteralContext | null {
        return this.getRuleContext(0, NumberLiteralContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public NULL_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULL_SQL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_literal;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECOND, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MINUTE, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HOUR, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DAY, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WEEK, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONTH, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUARTER, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.YEAR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_interval;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AND, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANTI, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARRAY, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public ASCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASCENDING, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public AST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AST, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASYNC, 0);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BETWEEN, 0);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BOTH, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public CASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CASE, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CAST, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CHECK, 0);
    }
    public CLEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLEAR, 0);
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLUSTER, 0);
    }
    public CODEC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CODEC, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLATE, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CROSS, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public DATABASES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASES, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATE, 0);
    }
    public DEDUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public DELAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELAY, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public DESCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCENDING, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ELSE, 0);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.END, 0);
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ENGINE, 0);
    }
    public EVENTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EVENTS, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXPLAIN, 0);
    }
    public EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXPRESSION, 0);
    }
    public EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXTRACT, 0);
    }
    public FETCHES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCHES, 0);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLUSH, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOLLOWING, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORMAT, 0);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FREEZE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FULL, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public GRANULARITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANULARITY, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GROUP, 0);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HAVING, 0);
    }
    public HIERARCHICAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HIERARCHICAL, 0);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ILIKE, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public INJECTIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INJECTIVE, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INSERT, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTERVAL, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTO, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IS, 0);
    }
    public IS_OBJECT_ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IS_OBJECT_ID, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JOIN, 0);
    }
    public JSON_FALSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON_FALSE, 0);
    }
    public JSON_TRUE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON_TRUE, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEY, 0);
    }
    public KILL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KILL, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAST, 0);
    }
    public LAYOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAYOUT, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEADING, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public LIFETIME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIFETIME, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMIT, 0);
    }
    public LIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIVE, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOGS, 0);
    }
    public MATERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public MERGES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MERGES, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MODIFY, 0);
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVE, 0);
    }
    public MUTATION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MUTATION, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULLS, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ON, 0);
    }
    public OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORDER, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public OUTFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTFILE, 0);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OVER, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARTITION, 0);
    }
    public POPULATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POPULATE, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRECEDING, 0);
    }
    public PREWHERE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PREWHERE, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRIMARY, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANGE, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RELOAD, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOVE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RENAME, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICA, 0);
    }
    public REPLICATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATED, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RIGHT, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWS, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAMPLE, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SELECT, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMI, 0);
    }
    public SENDS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SENDS, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SET, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCE, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.START, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STOP, 0);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SUBSTRING, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public SYNTAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNTAX, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYSTEM, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLES, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TEST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEST, 0);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.THEN, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public TIMEOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMEOUT, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMESTAMP, 0);
    }
    public TOTALS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOTALS, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRAILING, 0);
    }
    public TRIM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRIM, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRUNCATE, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public TOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOP, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TYPE, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNBOUNDED, 0);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNION, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UPDATE, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USE, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USING, 0);
    }
    public UUID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UUID, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VALUES, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public WATCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WATCH, 0);
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WHEN, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WHERE, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WINDOW, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANT, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCH, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REFRESH, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICY, 0);
    }
    public QUOTA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUOTA, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLE, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILE, 0);
    }
    public ARBITRARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARBITRARY, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMNS, 0);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT_USER, 0);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ACCESS, 0);
    }
    public SHOW_USERS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_USERS, 0);
    }
    public SHOW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROLES, 0);
    }
    public SHOW_ROW_POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROW_POLICIES, 0);
    }
    public SHOW_QUOTAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_QUOTAS, 0);
    }
    public SHOW_SETTINGS_PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_SETTINGS_PROFILES, 0);
    }
    public SHUTDOWN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHUTDOWN, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CACHE, 0);
    }
    public DNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DNS, 0);
    }
    public MARK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARK, 0);
    }
    public PART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PART, 0);
    }
    public UNCOMPRESSED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNCOMPRESSED, 0);
    }
    public CONFIG(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONFIG, 0);
    }
    public EMBEDDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EMBEDDED, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTIONS, 0);
    }
    public MOVES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVES, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATION, 0);
    }
    public QUEUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUEUES, 0);
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTART, 0);
    }
    public DICTGET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGET, 0);
    }
    public DICTGETHIERARCHY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGETHIERARCHY, 0);
    }
    public DICTHAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTHAS, 0);
    }
    public DICTISIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTISIN, 0);
    }
    public MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MANAGEMENT, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public INTROSPECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTROSPECTION, 0);
    }
    public ADDRESSTOLINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINE, 0);
    }
    public ADDRESSTOSYMBOL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOSYMBOL, 0);
    }
    public DEMANGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEMANGLE, 0);
    }
    public SOURCES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCES, 0);
    }
    public FILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FILE, 0);
    }
    public URL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.URL, 0);
    }
    public REMOTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOTE, 0);
    }
    public MYSQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQL, 0);
    }
    public ODBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ODBC, 0);
    }
    public JDBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JDBC, 0);
    }
    public HDFS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HDFS, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.S3, 0);
    }
    public SETTING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTING, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADD, 0);
    }
    public ADDRESSTOLINEWITHINLINES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINEWITHINLINES, 0);
    }
    public ALLOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALLOW, 0);
    }
    public AZURE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AZURE, 0);
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTION, 0);
    }
    public COLLECTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTIONS, 0);
    }
    public CONTROL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONTROL, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DAY, 0);
    }
    public DISPLAYSECRETSINSHOWANDSELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT, 0);
    }
    public ESTIMATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ESTIMATE, 0);
    }
    public HIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HIVE, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HOUR, 0);
    }
    public INF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INF, 0);
    }
    public MARKS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARKS, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MINUTE, 0);
    }
    public MONGO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONGO, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONTH, 0);
    }
    public NAMED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAMED, 0);
    }
    public PIPELINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PIPELINE, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLAN, 0);
    }
    public POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICIES, 0);
    }
    public POSTGRES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POSTGRES, 0);
    }
    public PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILES, 0);
    }
    public PROJECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROJECTION, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUARTER, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY, 0);
    }
    public REDIS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REDIS, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECOND, 0);
    }
    public SECRETS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECRETS, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECURITY, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQL, 0);
    }
    public SQLITE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQLITE, 0);
    }
    public TREE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TREE, 0);
    }
    public USAGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USAGE, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WEEK, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.YEAR, 0);
    }
    public GRANTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANTS, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REVOKE, 0);
    }
    public IDENTIFIED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IDENTIFIED, 0);
    }
    public PLAINTEXT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLAINTEXT_PASSWORD, 0);
    }
    public SHA256_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_PASSWORD, 0);
    }
    public SHA256_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_HASH, 0);
    }
    public DOUBLE_SHA1_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_PASSWORD, 0);
    }
    public DOUBLE_SHA1_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_HASH, 0);
    }
    public NO_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO_PASSWORD, 0);
    }
    public LDAP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LDAP, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SERVER, 0);
    }
    public KERBEROS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KERBEROS, 0);
    }
    public REALM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REALM, 0);
    }
    public SSL_CERTIFICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSL_CERTIFICATE, 0);
    }
    public SAN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAN, 0);
    }
    public CN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CN, 0);
    }
    public SSH_KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSH_KEY, 0);
    }
    public HTTP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HTTP, 0);
    }
    public SCHEME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SCHEME, 0);
    }
    public BCRYPT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_PASSWORD, 0);
    }
    public BCRYPT_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_HASH, 0);
    }
    public VALID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VALID, 0);
    }
    public UNTIL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNTIL, 0);
    }
    public GRANTEES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANTEES, 0);
    }
    public NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAME, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REGEXP, 0);
    }
    public IP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IP, 0);
    }
    public HOST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HOST, 0);
    }
    public READONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READONLY, 0);
    }
    public WRITABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WRITABLE, 0);
    }
    public PERMISSIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PERMISSIVE, 0);
    }
    public RESTRICTIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTRICTIVE, 0);
    }
    public TABSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATED, 0);
    }
    public TABSEPARATEDRAW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAW, 0);
    }
    public TABSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMES, 0);
    }
    public TABSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public TABSEPARATEDRAWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMES, 0);
    }
    public TABSEPARATEDRAWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATE, 0);
    }
    public TEMPLATEIGNORESPACES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATEIGNORESPACES, 0);
    }
    public CSV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSV, 0);
    }
    public CSVWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMES, 0);
    }
    public CSVWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMESANDTYPES, 0);
    }
    public CUSTOMSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATED, 0);
    }
    public CUSTOMSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMES, 0);
    }
    public CUSTOMSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON, 0);
    }
    public JSONASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASSTRING, 0);
    }
    public JSONASOBJECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASOBJECT, 0);
    }
    public JSONSTRINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGS, 0);
    }
    public JSONCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNS, 0);
    }
    public JSONCOLUMNSWITHMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNSWITHMETADATA, 0);
    }
    public JSONCOMPACT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACT, 0);
    }
    public JSONCOMPACTCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTCOLUMNS, 0);
    }
    public JSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONEACHROW, 0);
    }
    public JSONSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROW, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONOBJECTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONOBJECTEACHROW, 0);
    }
    public BSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BSONEACHROW, 0);
    }
    public TSKV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TSKV, 0);
    }
    public PROTOBUF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUF, 0);
    }
    public PROTOBUFSINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFSINGLE, 0);
    }
    public PROTOBUFLIST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFLIST, 0);
    }
    public AVRO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVRO, 0);
    }
    public AVROCONFLUENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVROCONFLUENT, 0);
    }
    public PARQUET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUET, 0);
    }
    public PARQUETMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUETMETADATA, 0);
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROW, 0);
    }
    public ARROWSTREAM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROWSTREAM, 0);
    }
    public ORC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORC, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ONE, 0);
    }
    public NPY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NPY, 0);
    }
    public ROWBINARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARY, 0);
    }
    public ROWBINARYWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMES, 0);
    }
    public ROWBINARYWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMESANDTYPES, 0);
    }
    public ROWBINARYWITHDEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHDEFAULTS, 0);
    }
    public NATIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NATIVE, 0);
    }
    public CAPNPROTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CAPNPROTO, 0);
    }
    public LINEASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LINEASSTRING, 0);
    }
    public RAWBLOB(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RAWBLOB, 0);
    }
    public MSGPACK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MSGPACK, 0);
    }
    public MYSQLDUMP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQLDUMP, 0);
    }
    public DWARF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DWARF, 0);
    }
    public FORM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORM, 0);
    }
    public KEYED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEYED, 0);
    }
    public RANDOMIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANDOMIZED, 0);
    }
    public USER_NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER_NAME, 0);
    }
    public IP_ADDRESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IP_ADDRESS, 0);
    }
    public FORWARDED_IP_ADDRESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORWARDED_IP_ADDRESS, 0);
    }
    public CLIENT_KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY, 0);
    }
    public CLIENT_KEY_OR_USER_NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY_OR_USER_NAME, 0);
    }
    public CLIENT_KEY_OR_IP_ADDRESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS, 0);
    }
    public QUERIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERIES, 0);
    }
    public QUERY_SELECTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY_SELECTS, 0);
    }
    public QUERY_INSERTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY_INSERTS, 0);
    }
    public ERRORS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ERRORS, 0);
    }
    public RESULT_ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESULT_ROWS, 0);
    }
    public RESULT_BYTES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESULT_BYTES, 0);
    }
    public READ_ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READ_ROWS, 0);
    }
    public READ_BYTES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READ_BYTES, 0);
    }
    public EXECUTION_TIME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXECUTION_TIME, 0);
    }
    public FAILED_SEQUENTIAL_AUTHENTICATIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS, 0);
    }
    public LIMITS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMITS, 0);
    }
    public TRACKING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRACKING, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ONLY, 0);
    }
    public CONST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONST, 0);
    }
    public CHANGEABLE_IN_READONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CHANGEABLE_IN_READONLY, 0);
    }
    public OVERRIDABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OVERRIDABLE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_keyword;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKeyword) {
            return visitor.visitKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordForAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATE, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_keywordForAlias;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKeywordForAlias) {
            return visitor.visitKeywordForAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IDENTIFIER, 0);
    }
    public keywordForAlias(): KeywordForAliasContext | null {
        return this.getRuleContext(0, KeywordForAliasContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alias;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlias) {
            return visitor.visitAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IDENTIFIER, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public keyword(): KeywordContext | null {
        return this.getRuleContext(0, KeywordContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierOrNullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public NULL_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULL_SQL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifierOrNull;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierOrNull) {
            return visitor.visitIdentifierOrNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnumValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public numberLiteral(): NumberLiteralContext {
        return this.getRuleContext(0, NumberLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_enumValue;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEnumValue) {
            return visitor.visitEnumValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
