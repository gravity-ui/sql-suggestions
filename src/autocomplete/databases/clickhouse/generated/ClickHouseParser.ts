////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/clickhouse/grammar/ClickHouseParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { ClickHouseParserVisitor } from "./ClickHouseParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class ClickHouseParser extends antlr.Parser {
    public static readonly ADD = 1;
    public static readonly AFTER = 2;
    public static readonly ALIAS = 3;
    public static readonly ALL = 4;
    public static readonly ALTER = 5;
    public static readonly AND = 6;
    public static readonly ANTI = 7;
    public static readonly ANY = 8;
    public static readonly ARRAY = 9;
    public static readonly AS = 10;
    public static readonly ASCENDING = 11;
    public static readonly ASOF = 12;
    public static readonly AST = 13;
    public static readonly ASYNC = 14;
    public static readonly ATTACH = 15;
    public static readonly BETWEEN = 16;
    public static readonly BOTH = 17;
    public static readonly BY = 18;
    public static readonly CASE = 19;
    public static readonly CAST = 20;
    public static readonly CHECK = 21;
    public static readonly CLEAR = 22;
    public static readonly CLUSTER = 23;
    public static readonly CODEC = 24;
    public static readonly COLLATE = 25;
    public static readonly COLUMN = 26;
    public static readonly COMMENT = 27;
    public static readonly CONSTRAINT = 28;
    public static readonly CREATE = 29;
    public static readonly CROSS = 30;
    public static readonly CUBE = 31;
    public static readonly CURRENT = 32;
    public static readonly DATABASE = 33;
    public static readonly DATABASES = 34;
    public static readonly DATE = 35;
    public static readonly DAY = 36;
    public static readonly DEDUPLICATE = 37;
    public static readonly DEFAULT = 38;
    public static readonly DELAY = 39;
    public static readonly DELETE = 40;
    public static readonly DESC = 41;
    public static readonly DESCENDING = 42;
    public static readonly DESCRIBE = 43;
    public static readonly DETACH = 44;
    public static readonly DICTIONARIES = 45;
    public static readonly DICTIONARY = 46;
    public static readonly DISK = 47;
    public static readonly DISTINCT = 48;
    public static readonly DISTRIBUTED = 49;
    public static readonly DROP = 50;
    public static readonly ELSE = 51;
    public static readonly END = 52;
    public static readonly ENGINE = 53;
    public static readonly ESTIMATE = 54;
    public static readonly EVENTS = 55;
    public static readonly EXISTS = 56;
    public static readonly EXPLAIN = 57;
    public static readonly EXPRESSION = 58;
    public static readonly EXTRACT = 59;
    public static readonly FETCHES = 60;
    public static readonly FINAL = 61;
    public static readonly FIRST = 62;
    public static readonly FLUSH = 63;
    public static readonly FOLLOWING = 64;
    public static readonly FOR = 65;
    public static readonly FORMAT = 66;
    public static readonly FREEZE = 67;
    public static readonly FROM = 68;
    public static readonly FULL = 69;
    public static readonly FUNCTION = 70;
    public static readonly GLOBAL = 71;
    public static readonly GRANULARITY = 72;
    public static readonly GROUP = 73;
    public static readonly HAVING = 74;
    public static readonly HIERARCHICAL = 75;
    public static readonly HOUR = 76;
    public static readonly ID = 77;
    public static readonly IF = 78;
    public static readonly ILIKE = 79;
    public static readonly IN = 80;
    public static readonly INDEX = 81;
    public static readonly INF = 82;
    public static readonly INJECTIVE = 83;
    public static readonly INNER = 84;
    public static readonly INSERT = 85;
    public static readonly INTERVAL = 86;
    public static readonly INTO = 87;
    public static readonly IS = 88;
    public static readonly IS_OBJECT_ID = 89;
    public static readonly JOIN = 90;
    public static readonly KEY = 91;
    public static readonly KILL = 92;
    public static readonly LAST = 93;
    public static readonly LAYOUT = 94;
    public static readonly LEADING = 95;
    public static readonly LEFT = 96;
    public static readonly LIFETIME = 97;
    public static readonly LIKE = 98;
    public static readonly LIMIT = 99;
    public static readonly LIVE = 100;
    public static readonly LOCAL = 101;
    public static readonly LOGS = 102;
    public static readonly MATERIALIZE = 103;
    public static readonly MATERIALIZED = 104;
    public static readonly MAX = 105;
    public static readonly MERGES = 106;
    public static readonly MIN = 107;
    public static readonly MINUTE = 108;
    public static readonly MODIFY = 109;
    public static readonly MONTH = 110;
    public static readonly MOVE = 111;
    public static readonly MUTATION = 112;
    public static readonly NAN_SQL = 113;
    public static readonly NO = 114;
    public static readonly NOT = 115;
    public static readonly NULL_SQL = 116;
    public static readonly NULLS = 117;
    public static readonly OFFSET = 118;
    public static readonly ON = 119;
    public static readonly OPTIMIZE = 120;
    public static readonly OR = 121;
    public static readonly ORDER = 122;
    public static readonly OUTER = 123;
    public static readonly OUTFILE = 124;
    public static readonly OVER = 125;
    public static readonly PARTITION = 126;
    public static readonly PIPELINE = 127;
    public static readonly PLAN = 128;
    public static readonly POPULATE = 129;
    public static readonly PRECEDING = 130;
    public static readonly PREWHERE = 131;
    public static readonly PRIMARY = 132;
    public static readonly PROJECTION = 133;
    public static readonly QUARTER = 134;
    public static readonly QUERY = 135;
    public static readonly RANGE = 136;
    public static readonly RELOAD = 137;
    public static readonly REMOVE = 138;
    public static readonly RENAME = 139;
    public static readonly REPLACE = 140;
    public static readonly REPLICA = 141;
    public static readonly REPLICATED = 142;
    public static readonly RIGHT = 143;
    public static readonly ROLLUP = 144;
    public static readonly ROW = 145;
    public static readonly ROWS = 146;
    public static readonly SAMPLE = 147;
    public static readonly SECOND = 148;
    public static readonly SELECT = 149;
    public static readonly SEMI = 150;
    public static readonly SENDS = 151;
    public static readonly SET = 152;
    public static readonly SETTINGS = 153;
    public static readonly SHOW = 154;
    public static readonly SOURCE = 155;
    public static readonly START = 156;
    public static readonly STOP = 157;
    public static readonly SUBSTRING = 158;
    public static readonly SYNC = 159;
    public static readonly SYNTAX = 160;
    public static readonly SYSTEM = 161;
    public static readonly TABLE = 162;
    public static readonly TABLES = 163;
    public static readonly TEMPORARY = 164;
    public static readonly TEST = 165;
    public static readonly THEN = 166;
    public static readonly TIES = 167;
    public static readonly TIMEOUT = 168;
    public static readonly TIMESTAMP = 169;
    public static readonly TO = 170;
    public static readonly TOP = 171;
    public static readonly TOTALS = 172;
    public static readonly TRAILING = 173;
    public static readonly TRIM = 174;
    public static readonly TREE = 175;
    public static readonly TRUNCATE = 176;
    public static readonly TTL = 177;
    public static readonly TYPE = 178;
    public static readonly UNBOUNDED = 179;
    public static readonly UNION = 180;
    public static readonly UPDATE = 181;
    public static readonly USE = 182;
    public static readonly USING = 183;
    public static readonly UUID = 184;
    public static readonly VALUES = 185;
    public static readonly VIEW = 186;
    public static readonly VOLUME = 187;
    public static readonly WATCH = 188;
    public static readonly WEEK = 189;
    public static readonly WHEN = 190;
    public static readonly WHERE = 191;
    public static readonly WINDOW = 192;
    public static readonly WITH = 193;
    public static readonly YEAR = 194;
    public static readonly GRANT = 195;
    public static readonly USER = 196;
    public static readonly FETCH = 197;
    public static readonly REFRESH = 198;
    public static readonly POLICY = 199;
    public static readonly QUOTA = 200;
    public static readonly ROLE = 201;
    public static readonly PROFILE = 202;
    public static readonly ARBITRARY = 203;
    public static readonly COLUMNS = 204;
    public static readonly CURRENT_USER = 205;
    public static readonly ACCESS = 206;
    public static readonly SHOW_USERS = 207;
    public static readonly SHOW_ROLES = 208;
    public static readonly SHOW_ROW_POLICIES = 209;
    public static readonly SHOW_QUOTAS = 210;
    public static readonly SHOW_SETTINGS_PROFILES = 211;
    public static readonly SHUTDOWN = 212;
    public static readonly CACHE = 213;
    public static readonly DNS = 214;
    public static readonly MARK = 215;
    public static readonly MARKS = 216;
    public static readonly PART = 217;
    public static readonly UNCOMPRESSED = 218;
    public static readonly CONFIG = 219;
    public static readonly EMBEDDED = 220;
    public static readonly FUNCTIONS = 221;
    public static readonly MOVES = 222;
    public static readonly REPLICATION = 223;
    public static readonly QUEUES = 224;
    public static readonly RESTART = 225;
    public static readonly DICTGET = 226;
    public static readonly DICTGETHIERARCHY = 227;
    public static readonly DICTHAS = 228;
    public static readonly DICTISIN = 229;
    public static readonly MANAGEMENT = 230;
    public static readonly ADMIN = 231;
    public static readonly NAMED = 232;
    public static readonly COLLECTION = 233;
    public static readonly CONTROL = 234;
    public static readonly COLLECTIONS = 235;
    public static readonly SECRETS = 236;
    public static readonly USAGE = 237;
    public static readonly INTROSPECTION = 238;
    public static readonly ADDRESSTOLINE = 239;
    public static readonly ADDRESSTOSYMBOL = 240;
    public static readonly DEMANGLE = 241;
    public static readonly SOURCES = 242;
    public static readonly FILE = 243;
    public static readonly URL = 244;
    public static readonly REMOTE = 245;
    public static readonly MYSQL = 246;
    public static readonly ODBC = 247;
    public static readonly JDBC = 248;
    public static readonly HDFS = 249;
    public static readonly S3 = 250;
    public static readonly SETTING = 251;
    public static readonly OPTION = 252;
    public static readonly NONE = 253;
    public static readonly AZURE = 254;
    public static readonly HIVE = 255;
    public static readonly MONGO = 256;
    public static readonly POSTGRES = 257;
    public static readonly REDIS = 258;
    public static readonly SQLITE = 259;
    public static readonly ADDRESSTOLINEWITHINLINES = 260;
    public static readonly SQL = 261;
    public static readonly SECURITY = 262;
    public static readonly DISPLAYSECRETSINSHOWANDSELECT = 263;
    public static readonly POLICIES = 264;
    public static readonly PROFILES = 265;
    public static readonly ALLOW = 266;
    public static readonly GRANTS = 267;
    public static readonly EXCEPT = 268;
    public static readonly REVOKE = 269;
    public static readonly IDENTIFIED = 270;
    public static readonly PLAINTEXT_PASSWORD = 271;
    public static readonly SHA256_PASSWORD = 272;
    public static readonly SHA256_HASH = 273;
    public static readonly DOUBLE_SHA1_PASSWORD = 274;
    public static readonly DOUBLE_SHA1_HASH = 275;
    public static readonly NO_PASSWORD = 276;
    public static readonly LDAP = 277;
    public static readonly SERVER = 278;
    public static readonly KERBEROS = 279;
    public static readonly REALM = 280;
    public static readonly SSL_CERTIFICATE = 281;
    public static readonly SAN = 282;
    public static readonly CN = 283;
    public static readonly SSH_KEY = 284;
    public static readonly HTTP = 285;
    public static readonly SCHEME = 286;
    public static readonly BCRYPT_PASSWORD = 287;
    public static readonly BCRYPT_HASH = 288;
    public static readonly VALID = 289;
    public static readonly UNTIL = 290;
    public static readonly GRANTEES = 291;
    public static readonly NAME = 292;
    public static readonly REGEXP = 293;
    public static readonly IP = 294;
    public static readonly HOST = 295;
    public static readonly READONLY = 296;
    public static readonly WRITABLE = 297;
    public static readonly PERMISSIVE = 298;
    public static readonly RESTRICTIVE = 299;
    public static readonly TABSEPARATED = 300;
    public static readonly TABSEPARATEDRAW = 301;
    public static readonly TABSEPARATEDWITHNAMES = 302;
    public static readonly TABSEPARATEDWITHNAMESANDTYPES = 303;
    public static readonly TABSEPARATEDRAWWITHNAMES = 304;
    public static readonly TABSEPARATEDRAWWITHNAMESANDTYPES = 305;
    public static readonly TEMPLATE = 306;
    public static readonly TEMPLATEIGNORESPACES = 307;
    public static readonly CSV = 308;
    public static readonly CSVWITHNAMES = 309;
    public static readonly CSVWITHNAMESANDTYPES = 310;
    public static readonly CUSTOMSEPARATED = 311;
    public static readonly CUSTOMSEPARATEDWITHNAMES = 312;
    public static readonly CUSTOMSEPARATEDWITHNAMESANDTYPES = 313;
    public static readonly JSON = 314;
    public static readonly JSONASSTRING = 315;
    public static readonly JSONASOBJECT = 316;
    public static readonly JSONSTRINGS = 317;
    public static readonly JSONCOLUMNS = 318;
    public static readonly JSONCOLUMNSWITHMETADATA = 319;
    public static readonly JSONCOMPACT = 320;
    public static readonly JSONCOMPACTCOLUMNS = 321;
    public static readonly JSONEACHROW = 322;
    public static readonly JSONSTRINGSEACHROW = 323;
    public static readonly JSONCOMPACTEACHROW = 324;
    public static readonly JSONCOMPACTEACHROWWITHNAMES = 325;
    public static readonly JSONCOMPACTEACHROWWITHNAMESANDTYPES = 326;
    public static readonly JSONCOMPACTSTRINGSEACHROW = 327;
    public static readonly JSONCOMPACTSTRINGSEACHROWWITHNAMES = 328;
    public static readonly JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES = 329;
    public static readonly JSONOBJECTEACHROW = 330;
    public static readonly BSONEACHROW = 331;
    public static readonly TSKV = 332;
    public static readonly PROTOBUF = 333;
    public static readonly PROTOBUFSINGLE = 334;
    public static readonly PROTOBUFLIST = 335;
    public static readonly AVRO = 336;
    public static readonly AVROCONFLUENT = 337;
    public static readonly PARQUET = 338;
    public static readonly PARQUETMETADATA = 339;
    public static readonly ARROW = 340;
    public static readonly ARROWSTREAM = 341;
    public static readonly ORC = 342;
    public static readonly ONE = 343;
    public static readonly NPY = 344;
    public static readonly ROWBINARY = 345;
    public static readonly ROWBINARYWITHNAMES = 346;
    public static readonly ROWBINARYWITHNAMESANDTYPES = 347;
    public static readonly ROWBINARYWITHDEFAULTS = 348;
    public static readonly NATIVE = 349;
    public static readonly CAPNPROTO = 350;
    public static readonly LINEASSTRING = 351;
    public static readonly RAWBLOB = 352;
    public static readonly MSGPACK = 353;
    public static readonly MYSQLDUMP = 354;
    public static readonly DWARF = 355;
    public static readonly FORM = 356;
    public static readonly JSON_FALSE = 357;
    public static readonly JSON_TRUE = 358;
    public static readonly IDENTIFIER = 359;
    public static readonly FLOATING_LITERAL = 360;
    public static readonly OCTAL_LITERAL = 361;
    public static readonly DECIMAL_LITERAL = 362;
    public static readonly HEXADECIMAL_LITERAL = 363;
    public static readonly STRING_LITERAL = 364;
    public static readonly ARROW_SYMBOL = 365;
    public static readonly ASTERISK = 366;
    public static readonly BACKQUOTE = 367;
    public static readonly BACKSLASH = 368;
    public static readonly COLON = 369;
    public static readonly COMMA = 370;
    public static readonly CONCAT = 371;
    public static readonly DASH = 372;
    public static readonly DOT = 373;
    public static readonly EQ_DOUBLE = 374;
    public static readonly EQ_SINGLE = 375;
    public static readonly GE = 376;
    public static readonly GT = 377;
    public static readonly LBRACE = 378;
    public static readonly LBRACKET = 379;
    public static readonly LE = 380;
    public static readonly LPAREN = 381;
    public static readonly LT = 382;
    public static readonly NOT_EQ = 383;
    public static readonly PERCENT = 384;
    public static readonly PLUS = 385;
    public static readonly QUESTIONMARK = 386;
    public static readonly QUOTE_DOUBLE = 387;
    public static readonly QUOTE_SINGLE = 388;
    public static readonly RBRACE = 389;
    public static readonly RBRACKET = 390;
    public static readonly RPAREN = 391;
    public static readonly SEMICOLON = 392;
    public static readonly SLASH = 393;
    public static readonly UNDERSCORE = 394;
    public static readonly MULTI_LINE_COMMENT = 395;
    public static readonly SINGLE_LINE_COMMENT = 396;
    public static readonly WHITESPACE = 397;
    public static readonly RULE_root = 0;
    public static readonly RULE_statements = 1;
    public static readonly RULE_statement = 2;
    public static readonly RULE_notInsertStatement = 3;
    public static readonly RULE_commonTableExpressionStatement = 4;
    public static readonly RULE_namedQuery = 5;
    public static readonly RULE_columnAliases = 6;
    public static readonly RULE_alterStatement = 7;
    public static readonly RULE_alterTableClause = 8;
    public static readonly RULE_assignmentExpressionList = 9;
    public static readonly RULE_assignmentExpression = 10;
    public static readonly RULE_tableColumnPropertyType = 11;
    public static readonly RULE_partitionClause = 12;
    public static readonly RULE_attachStatement = 13;
    public static readonly RULE_checkStatement = 14;
    public static readonly RULE_deleteStatement = 15;
    public static readonly RULE_createTableStatement = 16;
    public static readonly RULE_createDatabaseStatement = 17;
    public static readonly RULE_createDictionaryStatement = 18;
    public static readonly RULE_createLiveViewStatement = 19;
    public static readonly RULE_createMaterializedViewStatement = 20;
    public static readonly RULE_createViewStatement = 21;
    public static readonly RULE_stringIdentificationType = 22;
    public static readonly RULE_keyTypeClause = 23;
    public static readonly RULE_otherIdentificationType = 24;
    public static readonly RULE_userIdentificationClause = 25;
    public static readonly RULE_validUntilClause = 26;
    public static readonly RULE_grantsProvider = 27;
    public static readonly RULE_granteesClause = 28;
    public static readonly RULE_hostType = 29;
    public static readonly RULE_hostClause = 30;
    public static readonly RULE_createUserSettingExpression = 31;
    public static readonly RULE_createUserSettingsClause = 32;
    public static readonly RULE_inAccessStorageClause = 33;
    public static readonly RULE_createUserStatement = 34;
    public static readonly RULE_replaceOrIfNotExistsClause = 35;
    public static readonly RULE_policyAssignmentSubject = 36;
    public static readonly RULE_policyExpression = 37;
    public static readonly RULE_identifierOrLiteral = 38;
    public static readonly RULE_conditionClause = 39;
    public static readonly RULE_createRowPolicyStatement = 40;
    public static readonly RULE_createStatement = 41;
    public static readonly RULE_dictionarySchemaClause = 42;
    public static readonly RULE_dictionaryAttributeDefinition = 43;
    public static readonly RULE_dictionaryEngineClause = 44;
    public static readonly RULE_dictionaryPrimaryKeyClause = 45;
    public static readonly RULE_dictionaryArgumentExpression = 46;
    public static readonly RULE_sourceClause = 47;
    public static readonly RULE_lifetimeClause = 48;
    public static readonly RULE_layoutClause = 49;
    public static readonly RULE_rangeClause = 50;
    public static readonly RULE_dictionarySettingsClause = 51;
    public static readonly RULE_clusterClause = 52;
    public static readonly RULE_uuidClause = 53;
    public static readonly RULE_destinationClause = 54;
    public static readonly RULE_subqueryClause = 55;
    public static readonly RULE_tableSchemaClause = 56;
    public static readonly RULE_engineClause = 57;
    public static readonly RULE_partitionByClause = 58;
    public static readonly RULE_primaryKeyClause = 59;
    public static readonly RULE_sampleByClause = 60;
    public static readonly RULE_ttlClause = 61;
    public static readonly RULE_engineExpression = 62;
    public static readonly RULE_tableElementExpression = 63;
    public static readonly RULE_tableColumnDefinition = 64;
    public static readonly RULE_tableColumnPropertyExpression = 65;
    public static readonly RULE_tableIndexDefinition = 66;
    public static readonly RULE_tableProjectionDefinition = 67;
    public static readonly RULE_codecExpression = 68;
    public static readonly RULE_codecArgExpression = 69;
    public static readonly RULE_ttlExpression = 70;
    public static readonly RULE_describeStatement = 71;
    public static readonly RULE_dropStatement = 72;
    public static readonly RULE_existsStatement = 73;
    public static readonly RULE_explainStatement = 74;
    public static readonly RULE_revokeStatement = 75;
    public static readonly RULE_userExpressionList = 76;
    public static readonly RULE_roleExpressionList = 77;
    public static readonly RULE_grantStatement = 78;
    public static readonly RULE_withGrantOrReplaceOption = 79;
    public static readonly RULE_withReplaceOption = 80;
    public static readonly RULE_accessSubjectIdentifier = 81;
    public static readonly RULE_privilegeList = 82;
    public static readonly RULE_roleIdentifier = 83;
    public static readonly RULE_userIdentifier = 84;
    public static readonly RULE_userOrRoleExpressionList = 85;
    public static readonly RULE_userOrRoleIdentifier = 86;
    public static readonly RULE_selectPrivilege = 87;
    public static readonly RULE_insertPrivilege = 88;
    public static readonly RULE_createPrivilege = 89;
    public static readonly RULE_dropPrivilege = 90;
    public static readonly RULE_showPrivilege = 91;
    public static readonly RULE_introspectionPrivilege = 92;
    public static readonly RULE_sourcePrivilege = 93;
    public static readonly RULE_dictPrivilege = 94;
    public static readonly RULE_alterPrivilege = 95;
    public static readonly RULE_accessManagementPrivilege = 96;
    public static readonly RULE_systemPrivilege = 97;
    public static readonly RULE_namedCollectionAdminPrivilege = 98;
    public static readonly RULE_privilege = 99;
    public static readonly RULE_insertStatement = 100;
    public static readonly RULE_columnsOrExceptClause = 101;
    public static readonly RULE_columnsClause = 102;
    public static readonly RULE_insertFormatType = 103;
    public static readonly RULE_dataClause = 104;
    public static readonly RULE_literalList = 105;
    public static readonly RULE_valueIdentifier = 106;
    public static readonly RULE_valueOrArrayIdentifier = 107;
    public static readonly RULE_arrayIdentifier = 108;
    public static readonly RULE_valuesClause = 109;
    public static readonly RULE_valuesStatement = 110;
    public static readonly RULE_killStatement = 111;
    public static readonly RULE_optimizeStatement = 112;
    public static readonly RULE_renameStatement = 113;
    public static readonly RULE_projectionSelectStatement = 114;
    public static readonly RULE_selectUnionStatement = 115;
    public static readonly RULE_selectStatementWithParentheses = 116;
    public static readonly RULE_selectStatement = 117;
    public static readonly RULE_withClause = 118;
    public static readonly RULE_topClause = 119;
    public static readonly RULE_fromClause = 120;
    public static readonly RULE_arrayJoinClause = 121;
    public static readonly RULE_windowClause = 122;
    public static readonly RULE_prewhereClause = 123;
    public static readonly RULE_whereClause = 124;
    public static readonly RULE_groupByClause = 125;
    public static readonly RULE_havingClause = 126;
    public static readonly RULE_orderByClause = 127;
    public static readonly RULE_projectionOrderByClause = 128;
    public static readonly RULE_limitByClause = 129;
    public static readonly RULE_limitClause = 130;
    public static readonly RULE_settingsClause = 131;
    public static readonly RULE_joinExpression = 132;
    public static readonly RULE_joinOperator = 133;
    public static readonly RULE_joinOperatorCross = 134;
    public static readonly RULE_joinConstraintClause = 135;
    public static readonly RULE_sampleClause = 136;
    public static readonly RULE_limitExpression = 137;
    public static readonly RULE_orderExpressionList = 138;
    public static readonly RULE_orderExpression = 139;
    public static readonly RULE_ratioExpression = 140;
    public static readonly RULE_settingExpressionList = 141;
    public static readonly RULE_settingExpression = 142;
    public static readonly RULE_windowExpression = 143;
    public static readonly RULE_windowPartitionByClause = 144;
    public static readonly RULE_windowOrderByClause = 145;
    public static readonly RULE_windowFrameClause = 146;
    public static readonly RULE_windowFrameExtend = 147;
    public static readonly RULE_windowFrameBound = 148;
    public static readonly RULE_setStatement = 149;
    public static readonly RULE_showStatement = 150;
    public static readonly RULE_systemStatement = 151;
    public static readonly RULE_truncateStatement = 152;
    public static readonly RULE_useStatement = 153;
    public static readonly RULE_watchStatement = 154;
    public static readonly RULE_columnTypeExpression = 155;
    public static readonly RULE_columnExpressionList = 156;
    public static readonly RULE_columnsExpression = 157;
    public static readonly RULE_columnExpression = 158;
    public static readonly RULE_columnArgumentList = 159;
    public static readonly RULE_columnArgumentExpression = 160;
    public static readonly RULE_columnLambdaExpression = 161;
    public static readonly RULE_columnIdentifier = 162;
    public static readonly RULE_tableExpression = 163;
    public static readonly RULE_tableFunctionExpression = 164;
    public static readonly RULE_tableIdentifier = 165;
    public static readonly RULE_tableArgList = 166;
    public static readonly RULE_tableArgExpression = 167;
    public static readonly RULE_databaseIdentifier = 168;
    public static readonly RULE_floatingLiteral = 169;
    public static readonly RULE_numberLiteral = 170;
    public static readonly RULE_literal = 171;
    public static readonly RULE_interval = 172;
    public static readonly RULE_keyword = 173;
    public static readonly RULE_keywordForAlias = 174;
    public static readonly RULE_alias = 175;
    public static readonly RULE_identifier = 176;
    public static readonly RULE_identifierOrNull = 177;
    public static readonly RULE_enumValue = 178;

    public static readonly literalNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, "'false'", "'true'", null, null, null, 
        null, null, null, "'->'", "'*'", "'`'", "'\'", "':'", "','", "'||'", 
        "'-'", "'.'", "'=='", "'='", "'>='", "'>'", "'{'", "'['", "'<='", 
        "'('", "'<'", null, "'%'", "'+'", "'?'", "'\"'", "'''", "'}'", "']'", 
        "')'", "';'", "'/'", "'_'"
    ];

    public static readonly symbolicNames = [
        null, "ADD", "AFTER", "ALIAS", "ALL", "ALTER", "AND", "ANTI", "ANY", 
        "ARRAY", "AS", "ASCENDING", "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", 
        "BOTH", "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", "CODEC", 
        "COLLATE", "COLUMN", "COMMENT", "CONSTRAINT", "CREATE", "CROSS", 
        "CUBE", "CURRENT", "DATABASE", "DATABASES", "DATE", "DAY", "DEDUPLICATE", 
        "DEFAULT", "DELAY", "DELETE", "DESC", "DESCENDING", "DESCRIBE", 
        "DETACH", "DICTIONARIES", "DICTIONARY", "DISK", "DISTINCT", "DISTRIBUTED", 
        "DROP", "ELSE", "END", "ENGINE", "ESTIMATE", "EVENTS", "EXISTS", 
        "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES", "FINAL", "FIRST", 
        "FLUSH", "FOLLOWING", "FOR", "FORMAT", "FREEZE", "FROM", "FULL", 
        "FUNCTION", "GLOBAL", "GRANULARITY", "GROUP", "HAVING", "HIERARCHICAL", 
        "HOUR", "ID", "IF", "ILIKE", "IN", "INDEX", "INF", "INJECTIVE", 
        "INNER", "INSERT", "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", "JOIN", 
        "KEY", "KILL", "LAST", "LAYOUT", "LEADING", "LEFT", "LIFETIME", 
        "LIKE", "LIMIT", "LIVE", "LOCAL", "LOGS", "MATERIALIZE", "MATERIALIZED", 
        "MAX", "MERGES", "MIN", "MINUTE", "MODIFY", "MONTH", "MOVE", "MUTATION", 
        "NAN_SQL", "NO", "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", "OPTIMIZE", 
        "OR", "ORDER", "OUTER", "OUTFILE", "OVER", "PARTITION", "PIPELINE", 
        "PLAN", "POPULATE", "PRECEDING", "PREWHERE", "PRIMARY", "PROJECTION", 
        "QUARTER", "QUERY", "RANGE", "RELOAD", "REMOVE", "RENAME", "REPLACE", 
        "REPLICA", "REPLICATED", "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", 
        "SECOND", "SELECT", "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", 
        "SOURCE", "START", "STOP", "SUBSTRING", "SYNC", "SYNTAX", "SYSTEM", 
        "TABLE", "TABLES", "TEMPORARY", "TEST", "THEN", "TIES", "TIMEOUT", 
        "TIMESTAMP", "TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TREE", 
        "TRUNCATE", "TTL", "TYPE", "UNBOUNDED", "UNION", "UPDATE", "USE", 
        "USING", "UUID", "VALUES", "VIEW", "VOLUME", "WATCH", "WEEK", "WHEN", 
        "WHERE", "WINDOW", "WITH", "YEAR", "GRANT", "USER", "FETCH", "REFRESH", 
        "POLICY", "QUOTA", "ROLE", "PROFILE", "ARBITRARY", "COLUMNS", "CURRENT_USER", 
        "ACCESS", "SHOW_USERS", "SHOW_ROLES", "SHOW_ROW_POLICIES", "SHOW_QUOTAS", 
        "SHOW_SETTINGS_PROFILES", "SHUTDOWN", "CACHE", "DNS", "MARK", "MARKS", 
        "PART", "UNCOMPRESSED", "CONFIG", "EMBEDDED", "FUNCTIONS", "MOVES", 
        "REPLICATION", "QUEUES", "RESTART", "DICTGET", "DICTGETHIERARCHY", 
        "DICTHAS", "DICTISIN", "MANAGEMENT", "ADMIN", "NAMED", "COLLECTION", 
        "CONTROL", "COLLECTIONS", "SECRETS", "USAGE", "INTROSPECTION", "ADDRESSTOLINE", 
        "ADDRESSTOSYMBOL", "DEMANGLE", "SOURCES", "FILE", "URL", "REMOTE", 
        "MYSQL", "ODBC", "JDBC", "HDFS", "S3", "SETTING", "OPTION", "NONE", 
        "AZURE", "HIVE", "MONGO", "POSTGRES", "REDIS", "SQLITE", "ADDRESSTOLINEWITHINLINES", 
        "SQL", "SECURITY", "DISPLAYSECRETSINSHOWANDSELECT", "POLICIES", 
        "PROFILES", "ALLOW", "GRANTS", "EXCEPT", "REVOKE", "IDENTIFIED", 
        "PLAINTEXT_PASSWORD", "SHA256_PASSWORD", "SHA256_HASH", "DOUBLE_SHA1_PASSWORD", 
        "DOUBLE_SHA1_HASH", "NO_PASSWORD", "LDAP", "SERVER", "KERBEROS", 
        "REALM", "SSL_CERTIFICATE", "SAN", "CN", "SSH_KEY", "HTTP", "SCHEME", 
        "BCRYPT_PASSWORD", "BCRYPT_HASH", "VALID", "UNTIL", "GRANTEES", 
        "NAME", "REGEXP", "IP", "HOST", "READONLY", "WRITABLE", "PERMISSIVE", 
        "RESTRICTIVE", "TABSEPARATED", "TABSEPARATEDRAW", "TABSEPARATEDWITHNAMES", 
        "TABSEPARATEDWITHNAMESANDTYPES", "TABSEPARATEDRAWWITHNAMES", "TABSEPARATEDRAWWITHNAMESANDTYPES", 
        "TEMPLATE", "TEMPLATEIGNORESPACES", "CSV", "CSVWITHNAMES", "CSVWITHNAMESANDTYPES", 
        "CUSTOMSEPARATED", "CUSTOMSEPARATEDWITHNAMES", "CUSTOMSEPARATEDWITHNAMESANDTYPES", 
        "JSON", "JSONASSTRING", "JSONASOBJECT", "JSONSTRINGS", "JSONCOLUMNS", 
        "JSONCOLUMNSWITHMETADATA", "JSONCOMPACT", "JSONCOMPACTCOLUMNS", 
        "JSONEACHROW", "JSONSTRINGSEACHROW", "JSONCOMPACTEACHROW", "JSONCOMPACTEACHROWWITHNAMES", 
        "JSONCOMPACTEACHROWWITHNAMESANDTYPES", "JSONCOMPACTSTRINGSEACHROW", 
        "JSONCOMPACTSTRINGSEACHROWWITHNAMES", "JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES", 
        "JSONOBJECTEACHROW", "BSONEACHROW", "TSKV", "PROTOBUF", "PROTOBUFSINGLE", 
        "PROTOBUFLIST", "AVRO", "AVROCONFLUENT", "PARQUET", "PARQUETMETADATA", 
        "ARROW", "ARROWSTREAM", "ORC", "ONE", "NPY", "ROWBINARY", "ROWBINARYWITHNAMES", 
        "ROWBINARYWITHNAMESANDTYPES", "ROWBINARYWITHDEFAULTS", "NATIVE", 
        "CAPNPROTO", "LINEASSTRING", "RAWBLOB", "MSGPACK", "MYSQLDUMP", 
        "DWARF", "FORM", "JSON_FALSE", "JSON_TRUE", "IDENTIFIER", "FLOATING_LITERAL", 
        "OCTAL_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
        "ARROW_SYMBOL", "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", 
        "CONCAT", "DASH", "DOT", "EQ_DOUBLE", "EQ_SINGLE", "GE", "GT", "LBRACE", 
        "LBRACKET", "LE", "LPAREN", "LT", "NOT_EQ", "PERCENT", "PLUS", "QUESTIONMARK", 
        "QUOTE_DOUBLE", "QUOTE_SINGLE", "RBRACE", "RBRACKET", "RPAREN", 
        "SEMICOLON", "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
        "WHITESPACE"
    ];
    public static readonly ruleNames = [
        "root", "statements", "statement", "notInsertStatement", "commonTableExpressionStatement", 
        "namedQuery", "columnAliases", "alterStatement", "alterTableClause", 
        "assignmentExpressionList", "assignmentExpression", "tableColumnPropertyType", 
        "partitionClause", "attachStatement", "checkStatement", "deleteStatement", 
        "createTableStatement", "createDatabaseStatement", "createDictionaryStatement", 
        "createLiveViewStatement", "createMaterializedViewStatement", "createViewStatement", 
        "stringIdentificationType", "keyTypeClause", "otherIdentificationType", 
        "userIdentificationClause", "validUntilClause", "grantsProvider", 
        "granteesClause", "hostType", "hostClause", "createUserSettingExpression", 
        "createUserSettingsClause", "inAccessStorageClause", "createUserStatement", 
        "replaceOrIfNotExistsClause", "policyAssignmentSubject", "policyExpression", 
        "identifierOrLiteral", "conditionClause", "createRowPolicyStatement", 
        "createStatement", "dictionarySchemaClause", "dictionaryAttributeDefinition", 
        "dictionaryEngineClause", "dictionaryPrimaryKeyClause", "dictionaryArgumentExpression", 
        "sourceClause", "lifetimeClause", "layoutClause", "rangeClause", 
        "dictionarySettingsClause", "clusterClause", "uuidClause", "destinationClause", 
        "subqueryClause", "tableSchemaClause", "engineClause", "partitionByClause", 
        "primaryKeyClause", "sampleByClause", "ttlClause", "engineExpression", 
        "tableElementExpression", "tableColumnDefinition", "tableColumnPropertyExpression", 
        "tableIndexDefinition", "tableProjectionDefinition", "codecExpression", 
        "codecArgExpression", "ttlExpression", "describeStatement", "dropStatement", 
        "existsStatement", "explainStatement", "revokeStatement", "userExpressionList", 
        "roleExpressionList", "grantStatement", "withGrantOrReplaceOption", 
        "withReplaceOption", "accessSubjectIdentifier", "privilegeList", 
        "roleIdentifier", "userIdentifier", "userOrRoleExpressionList", 
        "userOrRoleIdentifier", "selectPrivilege", "insertPrivilege", "createPrivilege", 
        "dropPrivilege", "showPrivilege", "introspectionPrivilege", "sourcePrivilege", 
        "dictPrivilege", "alterPrivilege", "accessManagementPrivilege", 
        "systemPrivilege", "namedCollectionAdminPrivilege", "privilege", 
        "insertStatement", "columnsOrExceptClause", "columnsClause", "insertFormatType", 
        "dataClause", "literalList", "valueIdentifier", "valueOrArrayIdentifier", 
        "arrayIdentifier", "valuesClause", "valuesStatement", "killStatement", 
        "optimizeStatement", "renameStatement", "projectionSelectStatement", 
        "selectUnionStatement", "selectStatementWithParentheses", "selectStatement", 
        "withClause", "topClause", "fromClause", "arrayJoinClause", "windowClause", 
        "prewhereClause", "whereClause", "groupByClause", "havingClause", 
        "orderByClause", "projectionOrderByClause", "limitByClause", "limitClause", 
        "settingsClause", "joinExpression", "joinOperator", "joinOperatorCross", 
        "joinConstraintClause", "sampleClause", "limitExpression", "orderExpressionList", 
        "orderExpression", "ratioExpression", "settingExpressionList", "settingExpression", 
        "windowExpression", "windowPartitionByClause", "windowOrderByClause", 
        "windowFrameClause", "windowFrameExtend", "windowFrameBound", "setStatement", 
        "showStatement", "systemStatement", "truncateStatement", "useStatement", 
        "watchStatement", "columnTypeExpression", "columnExpressionList", 
        "columnsExpression", "columnExpression", "columnArgumentList", "columnArgumentExpression", 
        "columnLambdaExpression", "columnIdentifier", "tableExpression", 
        "tableFunctionExpression", "tableIdentifier", "tableArgList", "tableArgExpression", 
        "databaseIdentifier", "floatingLiteral", "numberLiteral", "literal", 
        "interval", "keyword", "keywordForAlias", "alias", "identifier", 
        "identifierOrNull", "enumValue",
    ];

    public get grammarFileName(): string { return "ClickHouseParser.g4"; }
    public get literalNames(): (string | null)[] { return ClickHouseParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return ClickHouseParser.symbolicNames; }
    public get ruleNames(): string[] { return ClickHouseParser.ruleNames; }
    public get serializedATN(): number[] { return ClickHouseParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, ClickHouseParser._ATN, ClickHouseParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, ClickHouseParser.RULE_root);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 359;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 539000864) !== 0) || ((((_la - 40)) & ~0x1F) === 0 && ((1 << (_la - 40)) & 197659) !== 0) || _la === 85 || _la === 92 || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & 538443777) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & 1090519557) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & 161) !== 0) || _la === 269 || _la === 381) {
                {
                this.state = 358;
                this.statements();
                }
            }

            this.state = 361;
            this.match(ClickHouseParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statements(): StatementsContext {
        let localContext = new StatementsContext(this.context, this.state);
        this.enterRule(localContext, 2, ClickHouseParser.RULE_statements);
        let _la: number;
        try {
            this.state = 371;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 363;
                this.statement();
                this.state = 365;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 392) {
                    {
                    this.state = 364;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 367;
                this.statement();
                this.state = 368;
                this.match(ClickHouseParser.SEMICOLON);
                this.state = 369;
                this.statements();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 4, ClickHouseParser.RULE_statement);
        let _la: number;
        try {
            this.state = 389;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ALTER:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DROP:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.KILL:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SET:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WITH:
            case ClickHouseParser.LPAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 373;
                this.notInsertStatement();
                this.state = 377;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 87) {
                    {
                    this.state = 374;
                    this.match(ClickHouseParser.INTO);
                    this.state = 375;
                    this.match(ClickHouseParser.OUTFILE);
                    this.state = 376;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 381;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 66) {
                    {
                    this.state = 379;
                    this.match(ClickHouseParser.FORMAT);
                    this.state = 380;
                    this.identifierOrNull();
                    }
                }

                this.state = 384;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 5, this.context) ) {
                case 1:
                    {
                    this.state = 383;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                    break;
                }
                }
                break;
            case ClickHouseParser.INSERT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 386;
                this.insertStatement();
                }
                break;
            case ClickHouseParser.GRANT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 387;
                this.grantStatement();
                }
                break;
            case ClickHouseParser.REVOKE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 388;
                this.revokeStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notInsertStatement(): NotInsertStatementContext {
        let localContext = new NotInsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 6, ClickHouseParser.RULE_notInsertStatement);
        try {
            this.state = 414;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 8, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 391;
                this.alterStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 392;
                this.attachStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 393;
                this.checkStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 394;
                this.createStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 395;
                this.describeStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 396;
                this.deleteStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 397;
                this.dropStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 398;
                this.existsStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 399;
                this.explainStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 400;
                this.killStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 401;
                this.optimizeStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 402;
                this.renameStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 403;
                this.selectUnionStatement();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 404;
                this.setStatement();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 405;
                this.showStatement();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 406;
                this.systemStatement();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 407;
                this.truncateStatement();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 408;
                this.useStatement();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 409;
                this.watchStatement();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 411;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
                case 1:
                    {
                    this.state = 410;
                    this.commonTableExpressionStatement();
                    }
                    break;
                }
                this.state = 413;
                this.selectStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonTableExpressionStatement(): CommonTableExpressionStatementContext {
        let localContext = new CommonTableExpressionStatementContext(this.context, this.state);
        this.enterRule(localContext, 8, ClickHouseParser.RULE_commonTableExpressionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 416;
            this.match(ClickHouseParser.WITH);
            this.state = 417;
            this.namedQuery();
            this.state = 422;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 418;
                this.match(ClickHouseParser.COMMA);
                this.state = 419;
                this.namedQuery();
                }
                }
                this.state = 424;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 10, ClickHouseParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 425;
            localContext._name = this.identifier();
            this.state = 427;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 381) {
                {
                this.state = 426;
                this.columnAliases();
                }
            }

            this.state = 429;
            this.match(ClickHouseParser.AS);
            this.state = 430;
            this.match(ClickHouseParser.LPAREN);
            this.state = 431;
            this.notInsertStatement();
            this.state = 432;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAliases(): ColumnAliasesContext {
        let localContext = new ColumnAliasesContext(this.context, this.state);
        this.enterRule(localContext, 12, ClickHouseParser.RULE_columnAliases);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 434;
            this.match(ClickHouseParser.LPAREN);
            this.state = 435;
            this.identifier();
            this.state = 440;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 436;
                this.match(ClickHouseParser.COMMA);
                this.state = 437;
                this.identifier();
                }
                }
                this.state = 442;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 443;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatement(): AlterStatementContext {
        let localContext = new AlterStatementContext(this.context, this.state);
        this.enterRule(localContext, 14, ClickHouseParser.RULE_alterStatement);
        let _la: number;
        try {
            localContext = new AlterTableStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 445;
            this.match(ClickHouseParser.ALTER);
            this.state = 446;
            this.match(ClickHouseParser.TABLE);
            this.state = 447;
            this.tableIdentifier();
            this.state = 449;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 448;
                this.clusterClause();
                }
            }

            this.state = 451;
            this.alterTableClause();
            this.state = 456;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 452;
                this.match(ClickHouseParser.COMMA);
                this.state = 453;
                this.alterTableClause();
                }
                }
                this.state = 458;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableClause(): AlterTableClauseContext {
        let localContext = new AlterTableClauseContext(this.context, this.state);
        this.enterRule(localContext, 16, ClickHouseParser.RULE_alterTableClause);
        let _la: number;
        try {
            this.state = 673;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 42, this.context) ) {
            case 1:
                localContext = new AlterTableClauseAddColumnContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 459;
                this.match(ClickHouseParser.ADD);
                this.state = 460;
                this.match(ClickHouseParser.COLUMN);
                this.state = 464;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 14, this.context) ) {
                case 1:
                    {
                    this.state = 461;
                    this.match(ClickHouseParser.IF);
                    this.state = 462;
                    this.match(ClickHouseParser.NOT);
                    this.state = 463;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 466;
                this.tableColumnDefinition();
                this.state = 469;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 467;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 468;
                    this.columnIdentifier();
                    }
                }

                }
                break;
            case 2:
                localContext = new AlterTableClauseAddIndexContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 471;
                this.match(ClickHouseParser.ADD);
                this.state = 472;
                this.match(ClickHouseParser.INDEX);
                this.state = 476;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 16, this.context) ) {
                case 1:
                    {
                    this.state = 473;
                    this.match(ClickHouseParser.IF);
                    this.state = 474;
                    this.match(ClickHouseParser.NOT);
                    this.state = 475;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 478;
                this.tableIndexDefinition();
                this.state = 481;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 479;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 480;
                    this.columnIdentifier();
                    }
                }

                }
                break;
            case 3:
                localContext = new AlterTableClauseAddProjectionContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 483;
                this.match(ClickHouseParser.ADD);
                this.state = 484;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 488;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 18, this.context) ) {
                case 1:
                    {
                    this.state = 485;
                    this.match(ClickHouseParser.IF);
                    this.state = 486;
                    this.match(ClickHouseParser.NOT);
                    this.state = 487;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 490;
                this.tableProjectionDefinition();
                this.state = 493;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 491;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 492;
                    this.columnIdentifier();
                    }
                }

                }
                break;
            case 4:
                localContext = new AlterTableClauseAttachContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 495;
                this.match(ClickHouseParser.ATTACH);
                this.state = 496;
                this.partitionClause();
                this.state = 499;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68) {
                    {
                    this.state = 497;
                    this.match(ClickHouseParser.FROM);
                    this.state = 498;
                    this.tableIdentifier();
                    }
                }

                }
                break;
            case 5:
                localContext = new AlterTableClauseClearColumnContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 501;
                this.match(ClickHouseParser.CLEAR);
                this.state = 502;
                this.match(ClickHouseParser.COLUMN);
                this.state = 505;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 21, this.context) ) {
                case 1:
                    {
                    this.state = 503;
                    this.match(ClickHouseParser.IF);
                    this.state = 504;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 507;
                this.columnIdentifier();
                this.state = 510;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 508;
                    this.match(ClickHouseParser.IN);
                    this.state = 509;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 6:
                localContext = new AlterTableClauseClearIndexContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 512;
                this.match(ClickHouseParser.CLEAR);
                this.state = 513;
                this.match(ClickHouseParser.INDEX);
                this.state = 516;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 23, this.context) ) {
                case 1:
                    {
                    this.state = 514;
                    this.match(ClickHouseParser.IF);
                    this.state = 515;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 518;
                this.columnIdentifier();
                this.state = 521;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 519;
                    this.match(ClickHouseParser.IN);
                    this.state = 520;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 7:
                localContext = new AlterTableClauseClearProjectionContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 523;
                this.match(ClickHouseParser.CLEAR);
                this.state = 524;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 527;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 25, this.context) ) {
                case 1:
                    {
                    this.state = 525;
                    this.match(ClickHouseParser.IF);
                    this.state = 526;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 529;
                this.columnIdentifier();
                this.state = 532;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 530;
                    this.match(ClickHouseParser.IN);
                    this.state = 531;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 8:
                localContext = new AlterTableClauseCommentContext(localContext);
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 534;
                this.match(ClickHouseParser.COMMENT);
                this.state = 535;
                this.match(ClickHouseParser.COLUMN);
                this.state = 538;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
                case 1:
                    {
                    this.state = 536;
                    this.match(ClickHouseParser.IF);
                    this.state = 537;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 540;
                this.columnIdentifier();
                this.state = 541;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 9:
                localContext = new AlterTableClauseDeleteContext(localContext);
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 543;
                this.match(ClickHouseParser.DELETE);
                this.state = 544;
                this.match(ClickHouseParser.WHERE);
                this.state = 545;
                this.columnExpression(0);
                }
                break;
            case 10:
                localContext = new AlterTableClauseDetachContext(localContext);
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 546;
                this.match(ClickHouseParser.DETACH);
                this.state = 547;
                this.partitionClause();
                }
                break;
            case 11:
                localContext = new AlterTableClauseDropColumnContext(localContext);
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 548;
                this.match(ClickHouseParser.DROP);
                this.state = 549;
                this.match(ClickHouseParser.COLUMN);
                this.state = 552;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 28, this.context) ) {
                case 1:
                    {
                    this.state = 550;
                    this.match(ClickHouseParser.IF);
                    this.state = 551;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 554;
                this.columnIdentifier();
                }
                break;
            case 12:
                localContext = new AlterTableClauseDropIndexContext(localContext);
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 555;
                this.match(ClickHouseParser.DROP);
                this.state = 556;
                this.match(ClickHouseParser.INDEX);
                this.state = 559;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 29, this.context) ) {
                case 1:
                    {
                    this.state = 557;
                    this.match(ClickHouseParser.IF);
                    this.state = 558;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 561;
                this.columnIdentifier();
                }
                break;
            case 13:
                localContext = new AlterTableClauseDropProjectionContext(localContext);
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 562;
                this.match(ClickHouseParser.DROP);
                this.state = 563;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 566;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 30, this.context) ) {
                case 1:
                    {
                    this.state = 564;
                    this.match(ClickHouseParser.IF);
                    this.state = 565;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 568;
                this.columnIdentifier();
                }
                break;
            case 14:
                localContext = new AlterTableClauseDropPartitionContext(localContext);
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 569;
                this.match(ClickHouseParser.DROP);
                this.state = 570;
                this.partitionClause();
                }
                break;
            case 15:
                localContext = new AlterTableClauseFreezePartitionContext(localContext);
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 571;
                this.match(ClickHouseParser.FREEZE);
                this.state = 573;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 126) {
                    {
                    this.state = 572;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 16:
                localContext = new AlterTableClauseMaterializeIndexContext(localContext);
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 575;
                this.match(ClickHouseParser.MATERIALIZE);
                this.state = 576;
                this.match(ClickHouseParser.INDEX);
                this.state = 579;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 32, this.context) ) {
                case 1:
                    {
                    this.state = 577;
                    this.match(ClickHouseParser.IF);
                    this.state = 578;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 581;
                this.columnIdentifier();
                this.state = 584;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 582;
                    this.match(ClickHouseParser.IN);
                    this.state = 583;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 17:
                localContext = new AlterTableClauseMaterializeProjectionContext(localContext);
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 586;
                this.match(ClickHouseParser.MATERIALIZE);
                this.state = 587;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 590;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 34, this.context) ) {
                case 1:
                    {
                    this.state = 588;
                    this.match(ClickHouseParser.IF);
                    this.state = 589;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 592;
                this.columnIdentifier();
                this.state = 595;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 80) {
                    {
                    this.state = 593;
                    this.match(ClickHouseParser.IN);
                    this.state = 594;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 18:
                localContext = new AlterTableClauseModifyCodecContext(localContext);
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 597;
                this.match(ClickHouseParser.MODIFY);
                this.state = 598;
                this.match(ClickHouseParser.COLUMN);
                this.state = 601;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 36, this.context) ) {
                case 1:
                    {
                    this.state = 599;
                    this.match(ClickHouseParser.IF);
                    this.state = 600;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 603;
                this.columnIdentifier();
                this.state = 604;
                this.codecExpression();
                }
                break;
            case 19:
                localContext = new AlterTableClauseModifyCommentContext(localContext);
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 606;
                this.match(ClickHouseParser.MODIFY);
                this.state = 607;
                this.match(ClickHouseParser.COLUMN);
                this.state = 610;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 37, this.context) ) {
                case 1:
                    {
                    this.state = 608;
                    this.match(ClickHouseParser.IF);
                    this.state = 609;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 612;
                this.columnIdentifier();
                this.state = 613;
                this.match(ClickHouseParser.COMMENT);
                this.state = 614;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 20:
                localContext = new AlterTableClauseModifyRemoveContext(localContext);
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 616;
                this.match(ClickHouseParser.MODIFY);
                this.state = 617;
                this.match(ClickHouseParser.COLUMN);
                this.state = 620;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 38, this.context) ) {
                case 1:
                    {
                    this.state = 618;
                    this.match(ClickHouseParser.IF);
                    this.state = 619;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 622;
                this.columnIdentifier();
                this.state = 623;
                this.match(ClickHouseParser.REMOVE);
                this.state = 624;
                this.tableColumnPropertyType();
                }
                break;
            case 21:
                localContext = new AlterTableClauseModifyContext(localContext);
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 626;
                this.match(ClickHouseParser.MODIFY);
                this.state = 627;
                this.match(ClickHouseParser.COLUMN);
                this.state = 630;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
                case 1:
                    {
                    this.state = 628;
                    this.match(ClickHouseParser.IF);
                    this.state = 629;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 632;
                this.tableColumnDefinition();
                }
                break;
            case 22:
                localContext = new AlterTableClauseModifyOrderByContext(localContext);
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 633;
                this.match(ClickHouseParser.MODIFY);
                this.state = 634;
                this.match(ClickHouseParser.ORDER);
                this.state = 635;
                this.match(ClickHouseParser.BY);
                this.state = 636;
                this.columnExpression(0);
                }
                break;
            case 23:
                localContext = new AlterTableClauseModifyTTLContext(localContext);
                this.enterOuterAlt(localContext, 23);
                {
                this.state = 637;
                this.match(ClickHouseParser.MODIFY);
                this.state = 638;
                this.ttlClause();
                }
                break;
            case 24:
                localContext = new AlterTableClauseMovePartitionContext(localContext);
                this.enterOuterAlt(localContext, 24);
                {
                this.state = 639;
                this.match(ClickHouseParser.MOVE);
                this.state = 640;
                this.partitionClause();
                this.state = 650;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 40, this.context) ) {
                case 1:
                    {
                    this.state = 641;
                    this.match(ClickHouseParser.TO);
                    this.state = 642;
                    this.match(ClickHouseParser.DISK);
                    this.state = 643;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case 2:
                    {
                    this.state = 644;
                    this.match(ClickHouseParser.TO);
                    this.state = 645;
                    this.match(ClickHouseParser.VOLUME);
                    this.state = 646;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case 3:
                    {
                    this.state = 647;
                    this.match(ClickHouseParser.TO);
                    this.state = 648;
                    this.match(ClickHouseParser.TABLE);
                    this.state = 649;
                    this.tableIdentifier();
                    }
                    break;
                }
                }
                break;
            case 25:
                localContext = new AlterTableClauseRemoveTTLContext(localContext);
                this.enterOuterAlt(localContext, 25);
                {
                this.state = 652;
                this.match(ClickHouseParser.REMOVE);
                this.state = 653;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 26:
                localContext = new AlterTableClauseRenameContext(localContext);
                this.enterOuterAlt(localContext, 26);
                {
                this.state = 654;
                this.match(ClickHouseParser.RENAME);
                this.state = 655;
                this.match(ClickHouseParser.COLUMN);
                this.state = 658;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 41, this.context) ) {
                case 1:
                    {
                    this.state = 656;
                    this.match(ClickHouseParser.IF);
                    this.state = 657;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 660;
                this.columnIdentifier();
                this.state = 661;
                this.match(ClickHouseParser.TO);
                this.state = 662;
                this.columnIdentifier();
                }
                break;
            case 27:
                localContext = new AlterTableClauseReplaceContext(localContext);
                this.enterOuterAlt(localContext, 27);
                {
                this.state = 664;
                this.match(ClickHouseParser.REPLACE);
                this.state = 665;
                this.partitionClause();
                this.state = 666;
                this.match(ClickHouseParser.FROM);
                this.state = 667;
                this.tableIdentifier();
                }
                break;
            case 28:
                localContext = new AlterTableClauseUpdateContext(localContext);
                this.enterOuterAlt(localContext, 28);
                {
                this.state = 669;
                this.match(ClickHouseParser.UPDATE);
                this.state = 670;
                this.assignmentExpressionList();
                this.state = 671;
                this.whereClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentExpressionList(): AssignmentExpressionListContext {
        let localContext = new AssignmentExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 18, ClickHouseParser.RULE_assignmentExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 675;
            this.assignmentExpression();
            this.state = 680;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 676;
                this.match(ClickHouseParser.COMMA);
                this.state = 677;
                this.assignmentExpression();
                }
                }
                this.state = 682;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentExpression(): AssignmentExpressionContext {
        let localContext = new AssignmentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 20, ClickHouseParser.RULE_assignmentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 683;
            this.columnIdentifier();
            this.state = 684;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 685;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnPropertyType(): TableColumnPropertyTypeContext {
        let localContext = new TableColumnPropertyTypeContext(this.context, this.state);
        this.enterRule(localContext, 22, ClickHouseParser.RULE_tableColumnPropertyType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 687;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 150994952) !== 0) || _la === 38 || _la === 104 || _la === 177)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionClause(): PartitionClauseContext {
        let localContext = new PartitionClauseContext(this.context, this.state);
        this.enterRule(localContext, 24, ClickHouseParser.RULE_partitionClause);
        try {
            this.state = 694;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 44, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 689;
                this.match(ClickHouseParser.PARTITION);
                this.state = 690;
                this.columnExpression(0);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 691;
                this.match(ClickHouseParser.PARTITION);
                this.state = 692;
                this.match(ClickHouseParser.ID);
                this.state = 693;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public attachStatement(): AttachStatementContext {
        let localContext = new AttachStatementContext(this.context, this.state);
        this.enterRule(localContext, 26, ClickHouseParser.RULE_attachStatement);
        let _la: number;
        try {
            localContext = new AttachDictionaryStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 696;
            this.match(ClickHouseParser.ATTACH);
            this.state = 697;
            this.match(ClickHouseParser.DICTIONARY);
            this.state = 698;
            this.tableIdentifier();
            this.state = 700;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 699;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkStatement(): CheckStatementContext {
        let localContext = new CheckStatementContext(this.context, this.state);
        this.enterRule(localContext, 28, ClickHouseParser.RULE_checkStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 702;
            this.match(ClickHouseParser.CHECK);
            this.state = 703;
            this.match(ClickHouseParser.TABLE);
            this.state = 704;
            this.tableIdentifier();
            this.state = 706;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 126) {
                {
                this.state = 705;
                this.partitionClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteStatement(): DeleteStatementContext {
        let localContext = new DeleteStatementContext(this.context, this.state);
        this.enterRule(localContext, 30, ClickHouseParser.RULE_deleteStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 708;
            this.match(ClickHouseParser.DELETE);
            this.state = 709;
            this.match(ClickHouseParser.FROM);
            this.state = 710;
            this.tableIdentifier();
            this.state = 712;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 711;
                this.clusterClause();
                }
            }

            this.state = 715;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 191) {
                {
                this.state = 714;
                this.whereClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableStatement(): CreateTableStatementContext {
        let localContext = new CreateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 32, ClickHouseParser.RULE_createTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 724;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ATTACH:
                {
                this.state = 717;
                this.match(ClickHouseParser.ATTACH);
                }
                break;
            case ClickHouseParser.CREATE:
                {
                this.state = 718;
                this.match(ClickHouseParser.CREATE);
                this.state = 721;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 719;
                    this.match(ClickHouseParser.OR);
                    this.state = 720;
                    this.match(ClickHouseParser.REPLACE);
                    }
                }

                }
                break;
            case ClickHouseParser.REPLACE:
                {
                this.state = 723;
                this.match(ClickHouseParser.REPLACE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 727;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 164) {
                {
                this.state = 726;
                this.match(ClickHouseParser.TEMPORARY);
                }
            }

            this.state = 729;
            this.match(ClickHouseParser.TABLE);
            this.state = 733;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 52, this.context) ) {
            case 1:
                {
                this.state = 730;
                this.match(ClickHouseParser.IF);
                this.state = 731;
                this.match(ClickHouseParser.NOT);
                this.state = 732;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 735;
            this.tableIdentifier();
            this.state = 737;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 736;
                this.uuidClause();
                }
            }

            this.state = 740;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 739;
                this.clusterClause();
                }
            }

            this.state = 743;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
            case 1:
                {
                this.state = 742;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 746;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 745;
                this.engineClause();
                }
            }

            this.state = 749;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 748;
                this.subqueryClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext {
        let localContext = new CreateDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 34, ClickHouseParser.RULE_createDatabaseStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 751;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 752;
            this.match(ClickHouseParser.DATABASE);
            this.state = 756;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 58, this.context) ) {
            case 1:
                {
                this.state = 753;
                this.match(ClickHouseParser.IF);
                this.state = 754;
                this.match(ClickHouseParser.NOT);
                this.state = 755;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 758;
            this.identifier();
            this.state = 760;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 759;
                this.clusterClause();
                }
            }

            this.state = 763;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 53) {
                {
                this.state = 762;
                this.engineExpression();
                }
            }

            this.state = 767;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 27) {
                {
                this.state = 765;
                this.match(ClickHouseParser.COMMENT);
                this.state = 766;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDictionaryStatement(): CreateDictionaryStatementContext {
        let localContext = new CreateDictionaryStatementContext(this.context, this.state);
        this.enterRule(localContext, 36, ClickHouseParser.RULE_createDictionaryStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 776;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ATTACH:
                {
                this.state = 769;
                this.match(ClickHouseParser.ATTACH);
                }
                break;
            case ClickHouseParser.CREATE:
                {
                this.state = 770;
                this.match(ClickHouseParser.CREATE);
                this.state = 773;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 121) {
                    {
                    this.state = 771;
                    this.match(ClickHouseParser.OR);
                    this.state = 772;
                    this.match(ClickHouseParser.REPLACE);
                    }
                }

                }
                break;
            case ClickHouseParser.REPLACE:
                {
                this.state = 775;
                this.match(ClickHouseParser.REPLACE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 778;
            this.match(ClickHouseParser.DICTIONARY);
            this.state = 782;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 64, this.context) ) {
            case 1:
                {
                this.state = 779;
                this.match(ClickHouseParser.IF);
                this.state = 780;
                this.match(ClickHouseParser.NOT);
                this.state = 781;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 784;
            this.tableIdentifier();
            this.state = 786;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 785;
                this.uuidClause();
                }
            }

            this.state = 789;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 788;
                this.clusterClause();
                }
            }

            this.state = 791;
            this.dictionarySchemaClause();
            this.state = 792;
            this.dictionaryEngineClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createLiveViewStatement(): CreateLiveViewStatementContext {
        let localContext = new CreateLiveViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 38, ClickHouseParser.RULE_createLiveViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 794;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 795;
            this.match(ClickHouseParser.LIVE);
            this.state = 796;
            this.match(ClickHouseParser.VIEW);
            this.state = 800;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 67, this.context) ) {
            case 1:
                {
                this.state = 797;
                this.match(ClickHouseParser.IF);
                this.state = 798;
                this.match(ClickHouseParser.NOT);
                this.state = 799;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 802;
            this.tableIdentifier();
            this.state = 804;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 803;
                this.uuidClause();
                }
            }

            this.state = 807;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 806;
                this.clusterClause();
                }
            }

            this.state = 814;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 809;
                this.match(ClickHouseParser.WITH);
                this.state = 810;
                this.match(ClickHouseParser.TIMEOUT);
                this.state = 812;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 362) {
                    {
                    this.state = 811;
                    this.match(ClickHouseParser.DECIMAL_LITERAL);
                    }
                }

                }
            }

            this.state = 817;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 170) {
                {
                this.state = 816;
                this.destinationClause();
                }
            }

            this.state = 820;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 73, this.context) ) {
            case 1:
                {
                this.state = 819;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 822;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext {
        let localContext = new CreateMaterializedViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 40, ClickHouseParser.RULE_createMaterializedViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 824;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 825;
            this.match(ClickHouseParser.MATERIALIZED);
            this.state = 826;
            this.match(ClickHouseParser.VIEW);
            this.state = 830;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 74, this.context) ) {
            case 1:
                {
                this.state = 827;
                this.match(ClickHouseParser.IF);
                this.state = 828;
                this.match(ClickHouseParser.NOT);
                this.state = 829;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 832;
            this.tableIdentifier();
            this.state = 834;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 833;
                this.uuidClause();
                }
            }

            this.state = 837;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 836;
                this.clusterClause();
                }
            }

            this.state = 840;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 381) {
                {
                this.state = 839;
                this.tableSchemaClause();
                }
            }

            this.state = 847;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.TO:
                {
                this.state = 842;
                this.destinationClause();
                }
                break;
            case ClickHouseParser.ENGINE:
                {
                this.state = 843;
                this.engineClause();
                this.state = 845;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 129) {
                    {
                    this.state = 844;
                    this.match(ClickHouseParser.POPULATE);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 849;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createViewStatement(): CreateViewStatementContext {
        let localContext = new CreateViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 42, ClickHouseParser.RULE_createViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 851;
            _la = this.tokenStream.LA(1);
            if(!(_la === 15 || _la === 29)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 854;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 121) {
                {
                this.state = 852;
                this.match(ClickHouseParser.OR);
                this.state = 853;
                this.match(ClickHouseParser.REPLACE);
                }
            }

            this.state = 856;
            this.match(ClickHouseParser.VIEW);
            this.state = 860;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 81, this.context) ) {
            case 1:
                {
                this.state = 857;
                this.match(ClickHouseParser.IF);
                this.state = 858;
                this.match(ClickHouseParser.NOT);
                this.state = 859;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 862;
            this.tableIdentifier();
            this.state = 864;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 863;
                this.uuidClause();
                }
            }

            this.state = 867;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 866;
                this.clusterClause();
                }
            }

            this.state = 870;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
            case 1:
                {
                this.state = 869;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 872;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringIdentificationType(): StringIdentificationTypeContext {
        let localContext = new StringIdentificationTypeContext(this.context, this.state);
        this.enterRule(localContext, 44, ClickHouseParser.RULE_stringIdentificationType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 874;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 271)) & ~0x1F) === 0 && ((1 << (_la - 271)) & 196639) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyTypeClause(): KeyTypeClauseContext {
        let localContext = new KeyTypeClauseContext(this.context, this.state);
        this.enterRule(localContext, 46, ClickHouseParser.RULE_keyTypeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 876;
            this.match(ClickHouseParser.KEY);
            this.state = 877;
            this.match(ClickHouseParser.STRING_LITERAL);
            this.state = 878;
            this.match(ClickHouseParser.TYPE);
            this.state = 879;
            this.match(ClickHouseParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public otherIdentificationType(): OtherIdentificationTypeContext {
        let localContext = new OtherIdentificationTypeContext(this.context, this.state);
        this.enterRule(localContext, 48, ClickHouseParser.RULE_otherIdentificationType);
        let _la: number;
        try {
            this.state = 908;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.NO_PASSWORD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 881;
                this.match(ClickHouseParser.NO_PASSWORD);
                }
                break;
            case ClickHouseParser.LDAP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 882;
                this.match(ClickHouseParser.LDAP);
                this.state = 883;
                this.match(ClickHouseParser.SERVER);
                this.state = 884;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.KERBEROS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 885;
                this.match(ClickHouseParser.KERBEROS);
                {
                this.state = 886;
                this.match(ClickHouseParser.REALM);
                this.state = 887;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                }
                break;
            case ClickHouseParser.SSL_CERTIFICATE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 888;
                this.match(ClickHouseParser.SSL_CERTIFICATE);
                this.state = 889;
                _la = this.tokenStream.LA(1);
                if(!(_la === 282 || _la === 283)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 890;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.SSH_KEY:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 891;
                this.match(ClickHouseParser.SSH_KEY);
                this.state = 892;
                this.match(ClickHouseParser.BY);
                this.state = 893;
                this.keyTypeClause();
                this.state = 898;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 370) {
                    {
                    {
                    this.state = 894;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 895;
                    this.keyTypeClause();
                    }
                    }
                    this.state = 900;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case ClickHouseParser.HTTP:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 901;
                this.match(ClickHouseParser.HTTP);
                this.state = 902;
                this.match(ClickHouseParser.SERVER);
                this.state = 903;
                this.match(ClickHouseParser.STRING_LITERAL);
                this.state = 906;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 286) {
                    {
                    this.state = 904;
                    this.match(ClickHouseParser.SCHEME);
                    this.state = 905;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userIdentificationClause(): UserIdentificationClauseContext {
        let localContext = new UserIdentificationClauseContext(this.context, this.state);
        this.enterRule(localContext, 50, ClickHouseParser.RULE_userIdentificationClause);
        let _la: number;
        try {
            this.state = 922;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 910;
                this.match(ClickHouseParser.NOT);
                this.state = 911;
                this.match(ClickHouseParser.IDENTIFIED);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 912;
                this.match(ClickHouseParser.IDENTIFIED);
                this.state = 915;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 193) {
                    {
                    this.state = 913;
                    this.match(ClickHouseParser.WITH);
                    this.state = 914;
                    this.stringIdentificationType();
                    }
                }

                this.state = 917;
                this.match(ClickHouseParser.BY);
                this.state = 918;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 919;
                this.match(ClickHouseParser.IDENTIFIED);
                this.state = 920;
                this.match(ClickHouseParser.WITH);
                this.state = 921;
                this.otherIdentificationType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public validUntilClause(): ValidUntilClauseContext {
        let localContext = new ValidUntilClauseContext(this.context, this.state);
        this.enterRule(localContext, 52, ClickHouseParser.RULE_validUntilClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 924;
            this.match(ClickHouseParser.VALID);
            this.state = 925;
            this.match(ClickHouseParser.UNTIL);
            this.state = 926;
            this.match(ClickHouseParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantsProvider(): GrantsProviderContext {
        let localContext = new GrantsProviderContext(this.context, this.state);
        this.enterRule(localContext, 54, ClickHouseParser.RULE_grantsProvider);
        try {
            this.state = 932;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 90, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 928;
                this.userIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 929;
                this.roleIdentifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 930;
                this.match(ClickHouseParser.ANY);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 931;
                this.match(ClickHouseParser.NONE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public granteesClause(): GranteesClauseContext {
        let localContext = new GranteesClauseContext(this.context, this.state);
        this.enterRule(localContext, 56, ClickHouseParser.RULE_granteesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 934;
            this.match(ClickHouseParser.GRANTEES);
            this.state = 935;
            this.grantsProvider();
            this.state = 940;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 936;
                this.match(ClickHouseParser.COMMA);
                this.state = 937;
                this.grantsProvider();
                }
                }
                this.state = 942;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 945;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 268) {
                {
                this.state = 943;
                this.match(ClickHouseParser.EXCEPT);
                this.state = 944;
                this.userOrRoleExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hostType(): HostTypeContext {
        let localContext = new HostTypeContext(this.context, this.state);
        this.enterRule(localContext, 58, ClickHouseParser.RULE_hostType);
        let _la: number;
        try {
            this.state = 952;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 947;
                this.match(ClickHouseParser.LOCAL);
                }
                break;
            case ClickHouseParser.ANY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 948;
                this.match(ClickHouseParser.ANY);
                }
                break;
            case ClickHouseParser.NONE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 949;
                this.match(ClickHouseParser.NONE);
                }
                break;
            case ClickHouseParser.LIKE:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 950;
                _la = this.tokenStream.LA(1);
                if(!(_la === 98 || ((((_la - 292)) & ~0x1F) === 0 && ((1 << (_la - 292)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 951;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hostClause(): HostClauseContext {
        let localContext = new HostClauseContext(this.context, this.state);
        this.enterRule(localContext, 60, ClickHouseParser.RULE_hostClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 954;
            this.match(ClickHouseParser.HOST);
            this.state = 955;
            this.hostType();
            this.state = 960;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 956;
                this.match(ClickHouseParser.COMMA);
                this.state = 957;
                this.hostType();
                }
                }
                this.state = 962;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUserSettingExpression(): CreateUserSettingExpressionContext {
        let localContext = new CreateUserSettingExpressionContext(this.context, this.state);
        this.enterRule(localContext, 62, ClickHouseParser.RULE_createUserSettingExpression);
        let _la: number;
        try {
            this.state = 985;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 100, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 963;
                this.identifier();
                this.state = 964;
                this.match(ClickHouseParser.EQ_SINGLE);
                this.state = 965;
                this.literal();
                this.state = 971;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 107) {
                    {
                    this.state = 966;
                    this.match(ClickHouseParser.MIN);
                    this.state = 968;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 375) {
                        {
                        this.state = 967;
                        this.match(ClickHouseParser.EQ_SINGLE);
                        }
                    }

                    this.state = 970;
                    this.literal();
                    }
                }

                this.state = 978;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 105) {
                    {
                    this.state = 973;
                    this.match(ClickHouseParser.MAX);
                    this.state = 975;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 375) {
                        {
                        this.state = 974;
                        this.match(ClickHouseParser.EQ_SINGLE);
                        }
                    }

                    this.state = 977;
                    this.literal();
                    }
                }

                this.state = 981;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 296 || _la === 297) {
                    {
                    this.state = 980;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 296 || _la === 297)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 983;
                this.match(ClickHouseParser.PROFILE);
                this.state = 984;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUserSettingsClause(): CreateUserSettingsClauseContext {
        let localContext = new CreateUserSettingsClauseContext(this.context, this.state);
        this.enterRule(localContext, 64, ClickHouseParser.RULE_createUserSettingsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 987;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 988;
            this.createUserSettingExpression();
            this.state = 993;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 989;
                this.match(ClickHouseParser.COMMA);
                this.state = 990;
                this.createUserSettingExpression();
                }
                }
                this.state = 995;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inAccessStorageClause(): InAccessStorageClauseContext {
        let localContext = new InAccessStorageClauseContext(this.context, this.state);
        this.enterRule(localContext, 66, ClickHouseParser.RULE_inAccessStorageClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 996;
            this.match(ClickHouseParser.IN);
            this.state = 999;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 997;
                this.identifier();
                }
                break;
            case ClickHouseParser.STRING_LITERAL:
                {
                this.state = 998;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUserStatement(): CreateUserStatementContext {
        let localContext = new CreateUserStatementContext(this.context, this.state);
        this.enterRule(localContext, 68, ClickHouseParser.RULE_createUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1001;
            this.match(ClickHouseParser.CREATE);
            this.state = 1002;
            this.match(ClickHouseParser.USER);
            this.state = 1004;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 103, this.context) ) {
            case 1:
                {
                this.state = 1003;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1006;
            this.identifier();
            this.state = 1011;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 1007;
                this.match(ClickHouseParser.COMMA);
                this.state = 1008;
                this.identifier();
                }
                }
                this.state = 1013;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1015;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 1014;
                this.clusterClause();
                }
            }

            this.state = 1017;
            this.userIdentificationClause();
            this.state = 1019;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 295) {
                {
                this.state = 1018;
                this.hostClause();
                }
            }

            this.state = 1022;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 289) {
                {
                this.state = 1021;
                this.validUntilClause();
                }
            }

            this.state = 1025;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 1024;
                this.inAccessStorageClause();
                }
            }

            this.state = 1030;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 109, this.context) ) {
            case 1:
                {
                this.state = 1027;
                this.match(ClickHouseParser.DEFAULT);
                this.state = 1028;
                this.match(ClickHouseParser.ROLE);
                this.state = 1029;
                this.roleExpressionList();
                }
                break;
            }
            this.state = 1038;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 38) {
                {
                this.state = 1032;
                this.match(ClickHouseParser.DEFAULT);
                this.state = 1033;
                this.match(ClickHouseParser.DATABASE);
                this.state = 1036;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 110, this.context) ) {
                case 1:
                    {
                    this.state = 1034;
                    this.databaseIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 1035;
                    this.match(ClickHouseParser.NONE);
                    }
                    break;
                }
                }
            }

            this.state = 1041;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 291) {
                {
                this.state = 1040;
                this.granteesClause();
                }
            }

            this.state = 1044;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 1043;
                this.createUserSettingsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext {
        let localContext = new ReplaceOrIfNotExistsClauseContext(this.context, this.state);
        this.enterRule(localContext, 70, ClickHouseParser.RULE_replaceOrIfNotExistsClause);
        try {
            this.state = 1051;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.OR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1046;
                this.match(ClickHouseParser.OR);
                this.state = 1047;
                this.match(ClickHouseParser.REPLACE);
                }
                break;
            case ClickHouseParser.IF:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1048;
                this.match(ClickHouseParser.IF);
                this.state = 1049;
                this.match(ClickHouseParser.NOT);
                this.state = 1050;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public policyAssignmentSubject(): PolicyAssignmentSubjectContext {
        let localContext = new PolicyAssignmentSubjectContext(this.context, this.state);
        this.enterRule(localContext, 72, ClickHouseParser.RULE_policyAssignmentSubject);
        try {
            this.state = 1058;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 115, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1053;
                this.tableIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1054;
                this.identifier();
                this.state = 1055;
                this.match(ClickHouseParser.DOT);
                this.state = 1056;
                this.match(ClickHouseParser.ASTERISK);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public policyExpression(): PolicyExpressionContext {
        let localContext = new PolicyExpressionContext(this.context, this.state);
        this.enterRule(localContext, 74, ClickHouseParser.RULE_policyExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1060;
            this.identifier();
            this.state = 1062;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 116, this.context) ) {
            case 1:
                {
                this.state = 1061;
                this.clusterClause();
                }
                break;
            }
            this.state = 1064;
            this.match(ClickHouseParser.ON);
            this.state = 1065;
            this.policyAssignmentSubject();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierOrLiteral(): IdentifierOrLiteralContext {
        let localContext = new IdentifierOrLiteralContext(this.context, this.state);
        this.enterRule(localContext, 76, ClickHouseParser.RULE_identifierOrLiteral);
        try {
            this.state = 1069;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 117, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1067;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1068;
                this.literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public conditionClause(): ConditionClauseContext {
        let localContext = new ConditionClauseContext(this.context, this.state);
        this.enterRule(localContext, 78, ClickHouseParser.RULE_conditionClause);
        let _la: number;
        try {
            this.state = 1076;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 118, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1071;
                this.identifierOrLiteral();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1072;
                this.identifierOrLiteral();
                this.state = 1073;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 375)) & ~0x1F) === 0 && ((1 << (_la - 375)) & 389) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1074;
                this.identifierOrLiteral();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRowPolicyStatement(): CreateRowPolicyStatementContext {
        let localContext = new CreateRowPolicyStatementContext(this.context, this.state);
        this.enterRule(localContext, 80, ClickHouseParser.RULE_createRowPolicyStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1078;
            this.match(ClickHouseParser.CREATE);
            this.state = 1080;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 145) {
                {
                this.state = 1079;
                this.match(ClickHouseParser.ROW);
                }
            }

            this.state = 1082;
            this.match(ClickHouseParser.POLICY);
            this.state = 1084;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 120, this.context) ) {
            case 1:
                {
                this.state = 1083;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1086;
            this.policyExpression();
            this.state = 1091;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 1087;
                this.match(ClickHouseParser.COMMA);
                this.state = 1088;
                this.policyExpression();
                }
                }
                this.state = 1093;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1095;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 80) {
                {
                this.state = 1094;
                this.inAccessStorageClause();
                }
            }

            this.state = 1099;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 65) {
                {
                this.state = 1097;
                this.match(ClickHouseParser.FOR);
                this.state = 1098;
                this.match(ClickHouseParser.SELECT);
                }
            }

            this.state = 1101;
            this.match(ClickHouseParser.USING);
            this.state = 1102;
            this.conditionClause();
            this.state = 1105;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 1103;
                this.match(ClickHouseParser.AS);
                this.state = 1104;
                _la = this.tokenStream.LA(1);
                if(!(_la === 298 || _la === 299)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 1115;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 170) {
                {
                this.state = 1107;
                this.match(ClickHouseParser.TO);
                this.state = 1113;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 125, this.context) ) {
                case 1:
                    {
                    this.state = 1108;
                    this.roleExpressionList();
                    }
                    break;
                case 2:
                    {
                    this.state = 1109;
                    this.match(ClickHouseParser.ALL);
                    }
                    break;
                case 3:
                    {
                    this.state = 1110;
                    this.match(ClickHouseParser.ALL);
                    this.state = 1111;
                    this.match(ClickHouseParser.EXCEPT);
                    this.state = 1112;
                    this.roleExpressionList();
                    }
                    break;
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createStatement(): CreateStatementContext {
        let localContext = new CreateStatementContext(this.context, this.state);
        this.enterRule(localContext, 82, ClickHouseParser.RULE_createStatement);
        try {
            this.state = 1125;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 127, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1117;
                this.createDatabaseStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1118;
                this.createDictionaryStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1119;
                this.createLiveViewStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1120;
                this.createMaterializedViewStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1121;
                this.createTableStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1122;
                this.createViewStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1123;
                this.createUserStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1124;
                this.createRowPolicyStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionarySchemaClause(): DictionarySchemaClauseContext {
        let localContext = new DictionarySchemaClauseContext(this.context, this.state);
        this.enterRule(localContext, 84, ClickHouseParser.RULE_dictionarySchemaClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1127;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1128;
            this.dictionaryAttributeDefinition();
            this.state = 1133;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 1129;
                this.match(ClickHouseParser.COMMA);
                this.state = 1130;
                this.dictionaryAttributeDefinition();
                }
                }
                this.state = 1135;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1136;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryAttributeDefinition(): DictionaryAttributeDefinitionContext {
        let localContext = new DictionaryAttributeDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 86, ClickHouseParser.RULE_dictionaryAttributeDefinition);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1138;
            this.identifier();
            this.state = 1139;
            this.columnTypeExpression();
            this.state = 1161;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 130, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1159;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 129, this.context) ) {
                    case 1:
                        {
                        this.state = 1140;
                        if (!(!localContext.attrs.has("default"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"default\")");
                        }
                        this.state = 1141;
                        this.match(ClickHouseParser.DEFAULT);
                        this.state = 1142;
                        this.literal();
                        localContext.attrs.add("default");
                        }
                        break;
                    case 2:
                        {
                        this.state = 1145;
                        if (!(!localContext.attrs.has("expression"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"expression\")");
                        }
                        this.state = 1146;
                        this.match(ClickHouseParser.EXPRESSION);
                        this.state = 1147;
                        this.columnExpression(0);
                        localContext.attrs.add("expression");
                        }
                        break;
                    case 3:
                        {
                        this.state = 1150;
                        if (!(!localContext.attrs.has("hierarchical"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"hierarchical\")");
                        }
                        this.state = 1151;
                        this.match(ClickHouseParser.HIERARCHICAL);
                        localContext.attrs.add("hierarchical");
                        }
                        break;
                    case 4:
                        {
                        this.state = 1153;
                        if (!(!localContext.attrs.has("injective"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"injective\")");
                        }
                        this.state = 1154;
                        this.match(ClickHouseParser.INJECTIVE);
                        localContext.attrs.add("injective");
                        }
                        break;
                    case 5:
                        {
                        this.state = 1156;
                        if (!(!localContext.attrs.has("is_object_id"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"is_object_id\")");
                        }
                        this.state = 1157;
                        this.match(ClickHouseParser.IS_OBJECT_ID);
                        localContext.attrs.add("is_object_id");
                        }
                        break;
                    }
                    }
                }
                this.state = 1163;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 130, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryEngineClause(): DictionaryEngineClauseContext {
        let localContext = new DictionaryEngineClauseContext(this.context, this.state);
        this.enterRule(localContext, 88, ClickHouseParser.RULE_dictionaryEngineClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1165;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 131, this.context) ) {
            case 1:
                {
                this.state = 1164;
                this.dictionaryPrimaryKeyClause();
                }
                break;
            }
            this.state = 1189;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 133, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1187;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 132, this.context) ) {
                    case 1:
                        {
                        this.state = 1167;
                        if (!(!localContext.clauses.has("source"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"source\")");
                        }
                        this.state = 1168;
                        this.sourceClause();
                        localContext.clauses.add("source");
                        }
                        break;
                    case 2:
                        {
                        this.state = 1171;
                        if (!(!localContext.clauses.has("lifetime"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"lifetime\")");
                        }
                        this.state = 1172;
                        this.lifetimeClause();
                        localContext.clauses.add("lifetime");
                        }
                        break;
                    case 3:
                        {
                        this.state = 1175;
                        if (!(!localContext.clauses.has("layout"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"layout\")");
                        }
                        this.state = 1176;
                        this.layoutClause();
                        localContext.clauses.add("layout");
                        }
                        break;
                    case 4:
                        {
                        this.state = 1179;
                        if (!(!localContext.clauses.has("range"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"range\")");
                        }
                        this.state = 1180;
                        this.rangeClause();
                        localContext.clauses.add("range");
                        }
                        break;
                    case 5:
                        {
                        this.state = 1183;
                        if (!(!localContext.clauses.has("settings"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"settings\")");
                        }
                        this.state = 1184;
                        this.dictionarySettingsClause();
                        localContext.clauses.add("settings");
                        }
                        break;
                    }
                    }
                }
                this.state = 1191;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 133, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryPrimaryKeyClause(): DictionaryPrimaryKeyClauseContext {
        let localContext = new DictionaryPrimaryKeyClauseContext(this.context, this.state);
        this.enterRule(localContext, 90, ClickHouseParser.RULE_dictionaryPrimaryKeyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1192;
            this.match(ClickHouseParser.PRIMARY);
            this.state = 1193;
            this.match(ClickHouseParser.KEY);
            this.state = 1194;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext {
        let localContext = new DictionaryArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 92, ClickHouseParser.RULE_dictionaryArgumentExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1196;
            this.identifier();
            this.state = 1203;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 135, this.context) ) {
            case 1:
                {
                this.state = 1197;
                this.identifier();
                this.state = 1200;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 381) {
                    {
                    this.state = 1198;
                    this.match(ClickHouseParser.LPAREN);
                    this.state = 1199;
                    this.match(ClickHouseParser.RPAREN);
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 1202;
                this.literal();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceClause(): SourceClauseContext {
        let localContext = new SourceClauseContext(this.context, this.state);
        this.enterRule(localContext, 94, ClickHouseParser.RULE_sourceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1205;
            this.match(ClickHouseParser.SOURCE);
            this.state = 1206;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1207;
            this.identifier();
            this.state = 1208;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1212;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 255) !== 0)) {
                {
                {
                this.state = 1209;
                this.dictionaryArgumentExpression();
                }
                }
                this.state = 1214;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1215;
            this.match(ClickHouseParser.RPAREN);
            this.state = 1216;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lifetimeClause(): LifetimeClauseContext {
        let localContext = new LifetimeClauseContext(this.context, this.state);
        this.enterRule(localContext, 96, ClickHouseParser.RULE_lifetimeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1218;
            this.match(ClickHouseParser.LIFETIME);
            this.state = 1219;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1229;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.DECIMAL_LITERAL:
                {
                this.state = 1220;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case ClickHouseParser.MIN:
                {
                this.state = 1221;
                this.match(ClickHouseParser.MIN);
                this.state = 1222;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 1223;
                this.match(ClickHouseParser.MAX);
                this.state = 1224;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case ClickHouseParser.MAX:
                {
                this.state = 1225;
                this.match(ClickHouseParser.MAX);
                this.state = 1226;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 1227;
                this.match(ClickHouseParser.MIN);
                this.state = 1228;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1231;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public layoutClause(): LayoutClauseContext {
        let localContext = new LayoutClauseContext(this.context, this.state);
        this.enterRule(localContext, 98, ClickHouseParser.RULE_layoutClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1233;
            this.match(ClickHouseParser.LAYOUT);
            this.state = 1234;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1235;
            this.identifier();
            this.state = 1236;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1240;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 255) !== 0)) {
                {
                {
                this.state = 1237;
                this.dictionaryArgumentExpression();
                }
                }
                this.state = 1242;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1243;
            this.match(ClickHouseParser.RPAREN);
            this.state = 1244;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangeClause(): RangeClauseContext {
        let localContext = new RangeClauseContext(this.context, this.state);
        this.enterRule(localContext, 100, ClickHouseParser.RULE_rangeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1246;
            this.match(ClickHouseParser.RANGE);
            this.state = 1247;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1258;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.MIN:
                {
                this.state = 1248;
                this.match(ClickHouseParser.MIN);
                this.state = 1249;
                this.identifier();
                this.state = 1250;
                this.match(ClickHouseParser.MAX);
                this.state = 1251;
                this.identifier();
                }
                break;
            case ClickHouseParser.MAX:
                {
                this.state = 1253;
                this.match(ClickHouseParser.MAX);
                this.state = 1254;
                this.identifier();
                this.state = 1255;
                this.match(ClickHouseParser.MIN);
                this.state = 1256;
                this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1260;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionarySettingsClause(): DictionarySettingsClauseContext {
        let localContext = new DictionarySettingsClauseContext(this.context, this.state);
        this.enterRule(localContext, 102, ClickHouseParser.RULE_dictionarySettingsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1262;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 1263;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1264;
            this.settingExpressionList();
            this.state = 1265;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterClause(): ClusterClauseContext {
        let localContext = new ClusterClauseContext(this.context, this.state);
        this.enterRule(localContext, 104, ClickHouseParser.RULE_clusterClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1267;
            this.match(ClickHouseParser.ON);
            this.state = 1268;
            this.match(ClickHouseParser.CLUSTER);
            this.state = 1271;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 1269;
                this.identifier();
                }
                break;
            case ClickHouseParser.STRING_LITERAL:
                {
                this.state = 1270;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uuidClause(): UuidClauseContext {
        let localContext = new UuidClauseContext(this.context, this.state);
        this.enterRule(localContext, 106, ClickHouseParser.RULE_uuidClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1273;
            this.match(ClickHouseParser.UUID);
            this.state = 1274;
            this.match(ClickHouseParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public destinationClause(): DestinationClauseContext {
        let localContext = new DestinationClauseContext(this.context, this.state);
        this.enterRule(localContext, 108, ClickHouseParser.RULE_destinationClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1276;
            this.match(ClickHouseParser.TO);
            this.state = 1277;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subqueryClause(): SubqueryClauseContext {
        let localContext = new SubqueryClauseContext(this.context, this.state);
        this.enterRule(localContext, 110, ClickHouseParser.RULE_subqueryClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1279;
            this.match(ClickHouseParser.AS);
            this.state = 1280;
            this.selectUnionStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSchemaClause(): TableSchemaClauseContext {
        let localContext = new TableSchemaClauseContext(this.context, this.state);
        this.enterRule(localContext, 112, ClickHouseParser.RULE_tableSchemaClause);
        let _la: number;
        try {
            this.state = 1297;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 142, this.context) ) {
            case 1:
                localContext = new SchemaDescriptionClauseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1282;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1283;
                this.tableElementExpression();
                this.state = 1288;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 370) {
                    {
                    {
                    this.state = 1284;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1285;
                    this.tableElementExpression();
                    }
                    }
                    this.state = 1290;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1291;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 2:
                localContext = new SchemaAsTableClauseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1293;
                this.match(ClickHouseParser.AS);
                this.state = 1294;
                this.tableIdentifier();
                }
                break;
            case 3:
                localContext = new SchemaAsFunctionClauseContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1295;
                this.match(ClickHouseParser.AS);
                this.state = 1296;
                this.tableFunctionExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineClause(): EngineClauseContext {
        let localContext = new EngineClauseContext(this.context, this.state);
        this.enterRule(localContext, 114, ClickHouseParser.RULE_engineClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1299;
            this.engineExpression();
            this.state = 1326;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 144, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1324;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 143, this.context) ) {
                    case 1:
                        {
                        this.state = 1300;
                        if (!(!localContext.clauses.has("orderByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"orderByClause\")");
                        }
                        this.state = 1301;
                        this.orderByClause();
                        localContext.clauses.add("orderByClause");
                        }
                        break;
                    case 2:
                        {
                        this.state = 1304;
                        if (!(!localContext.clauses.has("partitionByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"partitionByClause\")");
                        }
                        this.state = 1305;
                        this.partitionByClause();
                        localContext.clauses.add("partitionByClause");
                        			
                        }
                        break;
                    case 3:
                        {
                        this.state = 1308;
                        if (!(!localContext.clauses.has("primaryKeyClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"primaryKeyClause\")");
                        }
                        this.state = 1309;
                        this.primaryKeyClause();
                        localContext.clauses.add("primaryKeyClause");
                        			
                        }
                        break;
                    case 4:
                        {
                        this.state = 1312;
                        if (!(!localContext.clauses.has("sampleByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"sampleByClause\")");
                        }
                        this.state = 1313;
                        this.sampleByClause();
                        localContext.clauses.add("sampleByClause");
                        }
                        break;
                    case 5:
                        {
                        this.state = 1316;
                        if (!(!localContext.clauses.has("ttlClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"ttlClause\")");
                        }
                        this.state = 1317;
                        this.ttlClause();
                        localContext.clauses.add("ttlClause");
                        }
                        break;
                    case 6:
                        {
                        this.state = 1320;
                        if (!(!localContext.clauses.has("settingsClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"settingsClause\")");
                        }
                        this.state = 1321;
                        this.settingsClause();
                        localContext.clauses.add("settingsClause");
                        }
                        break;
                    }
                    }
                }
                this.state = 1328;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 144, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionByClause(): PartitionByClauseContext {
        let localContext = new PartitionByClauseContext(this.context, this.state);
        this.enterRule(localContext, 116, ClickHouseParser.RULE_partitionByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1329;
            this.match(ClickHouseParser.PARTITION);
            this.state = 1330;
            this.match(ClickHouseParser.BY);
            this.state = 1331;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primaryKeyClause(): PrimaryKeyClauseContext {
        let localContext = new PrimaryKeyClauseContext(this.context, this.state);
        this.enterRule(localContext, 118, ClickHouseParser.RULE_primaryKeyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1333;
            this.match(ClickHouseParser.PRIMARY);
            this.state = 1334;
            this.match(ClickHouseParser.KEY);
            this.state = 1335;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleByClause(): SampleByClauseContext {
        let localContext = new SampleByClauseContext(this.context, this.state);
        this.enterRule(localContext, 120, ClickHouseParser.RULE_sampleByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1337;
            this.match(ClickHouseParser.SAMPLE);
            this.state = 1338;
            this.match(ClickHouseParser.BY);
            this.state = 1339;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ttlClause(): TtlClauseContext {
        let localContext = new TtlClauseContext(this.context, this.state);
        this.enterRule(localContext, 122, ClickHouseParser.RULE_ttlClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1341;
            this.match(ClickHouseParser.TTL);
            this.state = 1342;
            this.ttlExpression();
            this.state = 1347;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 145, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1343;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1344;
                    this.ttlExpression();
                    }
                    }
                }
                this.state = 1349;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 145, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineExpression(): EngineExpressionContext {
        let localContext = new EngineExpressionContext(this.context, this.state);
        this.enterRule(localContext, 124, ClickHouseParser.RULE_engineExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1350;
            this.match(ClickHouseParser.ENGINE);
            this.state = 1352;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 375) {
                {
                this.state = 1351;
                this.match(ClickHouseParser.EQ_SINGLE);
                }
            }

            this.state = 1354;
            this.identifierOrNull();
            this.state = 1360;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 148, this.context) ) {
            case 1:
                {
                this.state = 1355;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1357;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 674258943) !== 0) || _la === 385) {
                    {
                    this.state = 1356;
                    this.columnExpressionList();
                    }
                }

                this.state = 1359;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElementExpression(): TableElementExpressionContext {
        let localContext = new TableElementExpressionContext(this.context, this.state);
        this.enterRule(localContext, 126, ClickHouseParser.RULE_tableElementExpression);
        try {
            this.state = 1372;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 149, this.context) ) {
            case 1:
                localContext = new TableElementExpressionColumnContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1362;
                this.tableColumnDefinition();
                }
                break;
            case 2:
                localContext = new TableElementExpressionConstraintContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1363;
                this.match(ClickHouseParser.CONSTRAINT);
                this.state = 1364;
                this.identifier();
                this.state = 1365;
                this.match(ClickHouseParser.CHECK);
                this.state = 1366;
                this.columnExpression(0);
                }
                break;
            case 3:
                localContext = new TableElementExpressionIndexContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1368;
                this.match(ClickHouseParser.INDEX);
                this.state = 1369;
                this.tableIndexDefinition();
                }
                break;
            case 4:
                localContext = new TableElementExpressionProjectionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1370;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 1371;
                this.tableProjectionDefinition();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        let localContext = new TableColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 128, ClickHouseParser.RULE_tableColumnDefinition);
        let _la: number;
        try {
            this.state = 1406;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 158, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1374;
                this.columnIdentifier();
                this.state = 1375;
                this.columnTypeExpression();
                this.state = 1377;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3 || _la === 38 || _la === 104) {
                    {
                    this.state = 1376;
                    this.tableColumnPropertyExpression();
                    }
                }

                this.state = 1381;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 1379;
                    this.match(ClickHouseParser.COMMENT);
                    this.state = 1380;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 1384;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 24) {
                    {
                    this.state = 1383;
                    this.codecExpression();
                    }
                }

                this.state = 1388;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 1386;
                    this.match(ClickHouseParser.TTL);
                    this.state = 1387;
                    this.columnExpression(0);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1390;
                this.columnIdentifier();
                this.state = 1392;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 154, this.context) ) {
                case 1:
                    {
                    this.state = 1391;
                    this.columnTypeExpression();
                    }
                    break;
                }
                this.state = 1394;
                this.tableColumnPropertyExpression();
                this.state = 1397;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 27) {
                    {
                    this.state = 1395;
                    this.match(ClickHouseParser.COMMENT);
                    this.state = 1396;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 1400;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 24) {
                    {
                    this.state = 1399;
                    this.codecExpression();
                    }
                }

                this.state = 1404;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 1402;
                    this.match(ClickHouseParser.TTL);
                    this.state = 1403;
                    this.columnExpression(0);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnPropertyExpression(): TableColumnPropertyExpressionContext {
        let localContext = new TableColumnPropertyExpressionContext(this.context, this.state);
        this.enterRule(localContext, 130, ClickHouseParser.RULE_tableColumnPropertyExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1408;
            _la = this.tokenStream.LA(1);
            if(!(_la === 3 || _la === 38 || _la === 104)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1409;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIndexDefinition(): TableIndexDefinitionContext {
        let localContext = new TableIndexDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 132, ClickHouseParser.RULE_tableIndexDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1411;
            this.columnIdentifier();
            this.state = 1412;
            this.columnExpression(0);
            this.state = 1413;
            this.match(ClickHouseParser.TYPE);
            this.state = 1414;
            this.columnTypeExpression();
            this.state = 1415;
            this.match(ClickHouseParser.GRANULARITY);
            this.state = 1416;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext {
        let localContext = new TableProjectionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 134, ClickHouseParser.RULE_tableProjectionDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1418;
            this.columnIdentifier();
            this.state = 1419;
            this.projectionSelectStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public codecExpression(): CodecExpressionContext {
        let localContext = new CodecExpressionContext(this.context, this.state);
        this.enterRule(localContext, 136, ClickHouseParser.RULE_codecExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1421;
            this.match(ClickHouseParser.CODEC);
            this.state = 1422;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1423;
            this.codecArgExpression();
            this.state = 1428;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 1424;
                this.match(ClickHouseParser.COMMA);
                this.state = 1425;
                this.codecArgExpression();
                }
                }
                this.state = 1430;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1431;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public codecArgExpression(): CodecArgExpressionContext {
        let localContext = new CodecArgExpressionContext(this.context, this.state);
        this.enterRule(localContext, 138, ClickHouseParser.RULE_codecArgExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1433;
            this.identifier();
            this.state = 1439;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 381) {
                {
                this.state = 1434;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1436;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 674258943) !== 0) || _la === 385) {
                    {
                    this.state = 1435;
                    this.columnExpressionList();
                    }
                }

                this.state = 1438;
                this.match(ClickHouseParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ttlExpression(): TtlExpressionContext {
        let localContext = new TtlExpressionContext(this.context, this.state);
        this.enterRule(localContext, 140, ClickHouseParser.RULE_ttlExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1441;
            this.columnExpression(0);
            this.state = 1449;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 162, this.context) ) {
            case 1:
                {
                this.state = 1442;
                this.match(ClickHouseParser.DELETE);
                }
                break;
            case 2:
                {
                this.state = 1443;
                this.match(ClickHouseParser.TO);
                this.state = 1444;
                this.match(ClickHouseParser.DISK);
                this.state = 1445;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 3:
                {
                this.state = 1446;
                this.match(ClickHouseParser.TO);
                this.state = 1447;
                this.match(ClickHouseParser.VOLUME);
                this.state = 1448;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeStatement(): DescribeStatementContext {
        let localContext = new DescribeStatementContext(this.context, this.state);
        this.enterRule(localContext, 142, ClickHouseParser.RULE_describeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1451;
            _la = this.tokenStream.LA(1);
            if(!(_la === 41 || _la === 43)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1453;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 163, this.context) ) {
            case 1:
                {
                this.state = 1452;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 1455;
            this.tableExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropStatement(): DropStatementContext {
        let localContext = new DropStatementContext(this.context, this.state);
        this.enterRule(localContext, 144, ClickHouseParser.RULE_dropStatement);
        let _la: number;
        try {
            this.state = 1488;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 171, this.context) ) {
            case 1:
                localContext = new DropDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1457;
                _la = this.tokenStream.LA(1);
                if(!(_la === 44 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1458;
                this.match(ClickHouseParser.DATABASE);
                this.state = 1461;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 164, this.context) ) {
                case 1:
                    {
                    this.state = 1459;
                    this.match(ClickHouseParser.IF);
                    this.state = 1460;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 1463;
                this.databaseIdentifier();
                this.state = 1465;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 1464;
                    this.clusterClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new DropTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1467;
                _la = this.tokenStream.LA(1);
                if(!(_la === 44 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1474;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.DICTIONARY:
                    {
                    this.state = 1468;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case ClickHouseParser.TABLE:
                case ClickHouseParser.TEMPORARY:
                    {
                    this.state = 1470;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 164) {
                        {
                        this.state = 1469;
                        this.match(ClickHouseParser.TEMPORARY);
                        }
                    }

                    this.state = 1472;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                case ClickHouseParser.VIEW:
                    {
                    this.state = 1473;
                    this.match(ClickHouseParser.VIEW);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1478;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 168, this.context) ) {
                case 1:
                    {
                    this.state = 1476;
                    this.match(ClickHouseParser.IF);
                    this.state = 1477;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 1480;
                this.tableIdentifier();
                this.state = 1482;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 1481;
                    this.clusterClause();
                    }
                }

                this.state = 1486;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 114) {
                    {
                    this.state = 1484;
                    this.match(ClickHouseParser.NO);
                    this.state = 1485;
                    this.match(ClickHouseParser.DELAY);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existsStatement(): ExistsStatementContext {
        let localContext = new ExistsStatementContext(this.context, this.state);
        this.enterRule(localContext, 146, ClickHouseParser.RULE_existsStatement);
        let _la: number;
        try {
            this.state = 1503;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 174, this.context) ) {
            case 1:
                localContext = new ExistsDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1490;
                this.match(ClickHouseParser.EXISTS);
                this.state = 1491;
                this.match(ClickHouseParser.DATABASE);
                this.state = 1492;
                this.databaseIdentifier();
                }
                break;
            case 2:
                localContext = new ExistsTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1493;
                this.match(ClickHouseParser.EXISTS);
                this.state = 1500;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 173, this.context) ) {
                case 1:
                    {
                    this.state = 1494;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case 2:
                    {
                    this.state = 1496;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 164) {
                        {
                        this.state = 1495;
                        this.match(ClickHouseParser.TEMPORARY);
                        }
                    }

                    this.state = 1498;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                case 3:
                    {
                    this.state = 1499;
                    this.match(ClickHouseParser.VIEW);
                    }
                    break;
                }
                this.state = 1502;
                this.tableIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainStatement(): ExplainStatementContext {
        let localContext = new ExplainStatementContext(this.context, this.state);
        this.enterRule(localContext, 148, ClickHouseParser.RULE_explainStatement);
        try {
            this.state = 1526;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 175, this.context) ) {
            case 1:
                localContext = new ExplainDefaultStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1505;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1506;
                this.notInsertStatement();
                }
                break;
            case 2:
                localContext = new ExplainASTStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1507;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1508;
                this.match(ClickHouseParser.AST);
                this.state = 1509;
                this.notInsertStatement();
                }
                break;
            case 3:
                localContext = new ExplainSyntaxStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1510;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1511;
                this.match(ClickHouseParser.SYNTAX);
                this.state = 1512;
                this.notInsertStatement();
                }
                break;
            case 4:
                localContext = new ExplainPipelineStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1513;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1514;
                this.match(ClickHouseParser.PIPELINE);
                this.state = 1515;
                this.notInsertStatement();
                }
                break;
            case 5:
                localContext = new ExplainPlanStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1516;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1517;
                this.match(ClickHouseParser.PLAN);
                this.state = 1518;
                this.notInsertStatement();
                }
                break;
            case 6:
                localContext = new ExplainQueryTreeStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1519;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1520;
                this.match(ClickHouseParser.QUERY);
                this.state = 1521;
                this.match(ClickHouseParser.TREE);
                this.state = 1522;
                this.notInsertStatement();
                }
                break;
            case 7:
                localContext = new ExplainEstimateStatementContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1523;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 1524;
                this.match(ClickHouseParser.ESTIMATE);
                this.state = 1525;
                this.notInsertStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokeStatement(): RevokeStatementContext {
        let localContext = new RevokeStatementContext(this.context, this.state);
        this.enterRule(localContext, 150, ClickHouseParser.RULE_revokeStatement);
        let _la: number;
        try {
            this.state = 1566;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 182, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1528;
                this.match(ClickHouseParser.REVOKE);
                this.state = 1530;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 1529;
                    this.clusterClause();
                    }
                }

                this.state = 1535;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 195) {
                    {
                    this.state = 1532;
                    this.match(ClickHouseParser.GRANT);
                    this.state = 1533;
                    this.match(ClickHouseParser.OPTION);
                    this.state = 1534;
                    this.match(ClickHouseParser.FOR);
                    }
                }

                this.state = 1537;
                this.privilegeList();
                this.state = 1538;
                this.match(ClickHouseParser.ON);
                this.state = 1539;
                this.accessSubjectIdentifier();
                this.state = 1540;
                this.match(ClickHouseParser.FROM);
                this.state = 1546;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 178, this.context) ) {
                case 1:
                    {
                    this.state = 1541;
                    this.userExpressionList();
                    }
                    break;
                case 2:
                    {
                    this.state = 1542;
                    this.match(ClickHouseParser.ALL);
                    }
                    break;
                case 3:
                    {
                    this.state = 1543;
                    this.match(ClickHouseParser.ALL);
                    this.state = 1544;
                    this.match(ClickHouseParser.EXCEPT);
                    this.state = 1545;
                    this.userExpressionList();
                    }
                    break;
                }
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1548;
                this.match(ClickHouseParser.REVOKE);
                this.state = 1550;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 179, this.context) ) {
                case 1:
                    {
                    this.state = 1549;
                    this.clusterClause();
                    }
                    break;
                }
                this.state = 1555;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 180, this.context) ) {
                case 1:
                    {
                    this.state = 1552;
                    this.match(ClickHouseParser.ADMIN);
                    this.state = 1553;
                    this.match(ClickHouseParser.OPTION);
                    this.state = 1554;
                    this.match(ClickHouseParser.FOR);
                    }
                    break;
                }
                this.state = 1557;
                this.roleExpressionList();
                this.state = 1558;
                this.match(ClickHouseParser.FROM);
                this.state = 1564;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 181, this.context) ) {
                case 1:
                    {
                    this.state = 1559;
                    this.userOrRoleExpressionList();
                    }
                    break;
                case 2:
                    {
                    this.state = 1560;
                    this.match(ClickHouseParser.ALL);
                    }
                    break;
                case 3:
                    {
                    this.state = 1561;
                    this.match(ClickHouseParser.ALL);
                    this.state = 1562;
                    this.match(ClickHouseParser.EXCEPT);
                    this.state = 1563;
                    this.userOrRoleExpressionList();
                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userExpressionList(): UserExpressionListContext {
        let localContext = new UserExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 152, ClickHouseParser.RULE_userExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1568;
            this.userIdentifier();
            this.state = 1573;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 1569;
                this.match(ClickHouseParser.COMMA);
                this.state = 1570;
                this.userIdentifier();
                }
                }
                this.state = 1575;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleExpressionList(): RoleExpressionListContext {
        let localContext = new RoleExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 154, ClickHouseParser.RULE_roleExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1576;
            this.roleIdentifier();
            this.state = 1581;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 1577;
                this.match(ClickHouseParser.COMMA);
                this.state = 1578;
                this.roleIdentifier();
                }
                }
                this.state = 1583;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantStatement(): GrantStatementContext {
        let localContext = new GrantStatementContext(this.context, this.state);
        this.enterRule(localContext, 156, ClickHouseParser.RULE_grantStatement);
        let _la: number;
        try {
            this.state = 1638;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 191, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1584;
                this.match(ClickHouseParser.GRANT);
                this.state = 1586;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 119) {
                    {
                    this.state = 1585;
                    this.clusterClause();
                    }
                }

                {
                this.state = 1588;
                this.privilegeList();
                this.state = 1589;
                this.match(ClickHouseParser.ON);
                this.state = 1590;
                this.accessSubjectIdentifier();
                }
                this.state = 1599;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 370) {
                    {
                    {
                    this.state = 1592;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1593;
                    this.privilegeList();
                    this.state = 1594;
                    this.match(ClickHouseParser.ON);
                    this.state = 1595;
                    this.accessSubjectIdentifier();
                    }
                    }
                    this.state = 1601;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 1602;
                this.match(ClickHouseParser.TO);
                this.state = 1603;
                this.userOrRoleExpressionList();
                this.state = 1604;
                this.withGrantOrReplaceOption();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1606;
                this.match(ClickHouseParser.GRANT);
                this.state = 1608;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 187, this.context) ) {
                case 1:
                    {
                    this.state = 1607;
                    this.clusterClause();
                    }
                    break;
                }
                this.state = 1610;
                this.roleExpressionList();
                this.state = 1611;
                this.match(ClickHouseParser.TO);
                this.state = 1612;
                this.userOrRoleExpressionList();
                this.state = 1616;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 188, this.context) ) {
                case 1:
                    {
                    this.state = 1613;
                    this.match(ClickHouseParser.WITH);
                    this.state = 1614;
                    this.match(ClickHouseParser.ADMIN);
                    this.state = 1615;
                    this.match(ClickHouseParser.OPTION);
                    }
                    break;
                }
                this.state = 1619;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 193) {
                    {
                    this.state = 1618;
                    this.withReplaceOption();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1621;
                this.match(ClickHouseParser.GRANT);
                this.state = 1622;
                this.match(ClickHouseParser.CURRENT);
                this.state = 1623;
                this.match(ClickHouseParser.GRANTS);
                this.state = 1632;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.LPAREN:
                    {
                    {
                    this.state = 1624;
                    this.match(ClickHouseParser.LPAREN);
                    this.state = 1625;
                    this.privilegeList();
                    this.state = 1626;
                    this.match(ClickHouseParser.ON);
                    this.state = 1627;
                    this.accessSubjectIdentifier();
                    this.state = 1628;
                    this.match(ClickHouseParser.RPAREN);
                    }
                    }
                    break;
                case ClickHouseParser.ON:
                    {
                    this.state = 1630;
                    this.match(ClickHouseParser.ON);
                    this.state = 1631;
                    this.accessSubjectIdentifier();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 1634;
                this.match(ClickHouseParser.TO);
                this.state = 1635;
                this.userOrRoleExpressionList();
                this.state = 1636;
                this.withGrantOrReplaceOption();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withGrantOrReplaceOption(): WithGrantOrReplaceOptionContext {
        let localContext = new WithGrantOrReplaceOptionContext(this.context, this.state);
        this.enterRule(localContext, 158, ClickHouseParser.RULE_withGrantOrReplaceOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1643;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 192, this.context) ) {
            case 1:
                {
                this.state = 1640;
                this.match(ClickHouseParser.WITH);
                this.state = 1641;
                this.match(ClickHouseParser.GRANT);
                this.state = 1642;
                this.match(ClickHouseParser.OPTION);
                }
                break;
            }
            this.state = 1646;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 1645;
                this.withReplaceOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withReplaceOption(): WithReplaceOptionContext {
        let localContext = new WithReplaceOptionContext(this.context, this.state);
        this.enterRule(localContext, 160, ClickHouseParser.RULE_withReplaceOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1648;
            this.match(ClickHouseParser.WITH);
            this.state = 1649;
            this.match(ClickHouseParser.REPLACE);
            this.state = 1650;
            this.match(ClickHouseParser.OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public accessSubjectIdentifier(): AccessSubjectIdentifierContext {
        let localContext = new AccessSubjectIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 162, ClickHouseParser.RULE_accessSubjectIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1665;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 197, this.context) ) {
            case 1:
                {
                this.state = 1652;
                this.databaseIdentifier();
                }
                break;
            case 2:
                {
                this.state = 1653;
                this.tableIdentifier();
                }
                break;
            case 3:
                {
                this.state = 1659;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 195, this.context) ) {
                case 1:
                    {
                    this.state = 1656;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case ClickHouseParser.ASTERISK:
                        {
                        this.state = 1654;
                        this.match(ClickHouseParser.ASTERISK);
                        }
                        break;
                    case ClickHouseParser.ADD:
                    case ClickHouseParser.AFTER:
                    case ClickHouseParser.ALIAS:
                    case ClickHouseParser.ALL:
                    case ClickHouseParser.ALTER:
                    case ClickHouseParser.AND:
                    case ClickHouseParser.ANTI:
                    case ClickHouseParser.ANY:
                    case ClickHouseParser.ARRAY:
                    case ClickHouseParser.AS:
                    case ClickHouseParser.ASCENDING:
                    case ClickHouseParser.ASOF:
                    case ClickHouseParser.AST:
                    case ClickHouseParser.ASYNC:
                    case ClickHouseParser.ATTACH:
                    case ClickHouseParser.BETWEEN:
                    case ClickHouseParser.BOTH:
                    case ClickHouseParser.BY:
                    case ClickHouseParser.CASE:
                    case ClickHouseParser.CAST:
                    case ClickHouseParser.CHECK:
                    case ClickHouseParser.CLEAR:
                    case ClickHouseParser.CLUSTER:
                    case ClickHouseParser.CODEC:
                    case ClickHouseParser.COLLATE:
                    case ClickHouseParser.COLUMN:
                    case ClickHouseParser.COMMENT:
                    case ClickHouseParser.CONSTRAINT:
                    case ClickHouseParser.CREATE:
                    case ClickHouseParser.CROSS:
                    case ClickHouseParser.CUBE:
                    case ClickHouseParser.CURRENT:
                    case ClickHouseParser.DATABASE:
                    case ClickHouseParser.DATABASES:
                    case ClickHouseParser.DATE:
                    case ClickHouseParser.DAY:
                    case ClickHouseParser.DEDUPLICATE:
                    case ClickHouseParser.DEFAULT:
                    case ClickHouseParser.DELAY:
                    case ClickHouseParser.DELETE:
                    case ClickHouseParser.DESC:
                    case ClickHouseParser.DESCENDING:
                    case ClickHouseParser.DESCRIBE:
                    case ClickHouseParser.DETACH:
                    case ClickHouseParser.DICTIONARIES:
                    case ClickHouseParser.DICTIONARY:
                    case ClickHouseParser.DISK:
                    case ClickHouseParser.DISTINCT:
                    case ClickHouseParser.DISTRIBUTED:
                    case ClickHouseParser.DROP:
                    case ClickHouseParser.ELSE:
                    case ClickHouseParser.END:
                    case ClickHouseParser.ENGINE:
                    case ClickHouseParser.ESTIMATE:
                    case ClickHouseParser.EVENTS:
                    case ClickHouseParser.EXISTS:
                    case ClickHouseParser.EXPLAIN:
                    case ClickHouseParser.EXPRESSION:
                    case ClickHouseParser.EXTRACT:
                    case ClickHouseParser.FETCHES:
                    case ClickHouseParser.FINAL:
                    case ClickHouseParser.FIRST:
                    case ClickHouseParser.FLUSH:
                    case ClickHouseParser.FOLLOWING:
                    case ClickHouseParser.FOR:
                    case ClickHouseParser.FORMAT:
                    case ClickHouseParser.FREEZE:
                    case ClickHouseParser.FROM:
                    case ClickHouseParser.FULL:
                    case ClickHouseParser.FUNCTION:
                    case ClickHouseParser.GLOBAL:
                    case ClickHouseParser.GRANULARITY:
                    case ClickHouseParser.GROUP:
                    case ClickHouseParser.HAVING:
                    case ClickHouseParser.HIERARCHICAL:
                    case ClickHouseParser.HOUR:
                    case ClickHouseParser.ID:
                    case ClickHouseParser.IF:
                    case ClickHouseParser.ILIKE:
                    case ClickHouseParser.IN:
                    case ClickHouseParser.INDEX:
                    case ClickHouseParser.INF:
                    case ClickHouseParser.INJECTIVE:
                    case ClickHouseParser.INNER:
                    case ClickHouseParser.INSERT:
                    case ClickHouseParser.INTERVAL:
                    case ClickHouseParser.INTO:
                    case ClickHouseParser.IS:
                    case ClickHouseParser.IS_OBJECT_ID:
                    case ClickHouseParser.JOIN:
                    case ClickHouseParser.KEY:
                    case ClickHouseParser.KILL:
                    case ClickHouseParser.LAST:
                    case ClickHouseParser.LAYOUT:
                    case ClickHouseParser.LEADING:
                    case ClickHouseParser.LEFT:
                    case ClickHouseParser.LIFETIME:
                    case ClickHouseParser.LIKE:
                    case ClickHouseParser.LIMIT:
                    case ClickHouseParser.LIVE:
                    case ClickHouseParser.LOCAL:
                    case ClickHouseParser.LOGS:
                    case ClickHouseParser.MATERIALIZE:
                    case ClickHouseParser.MATERIALIZED:
                    case ClickHouseParser.MAX:
                    case ClickHouseParser.MERGES:
                    case ClickHouseParser.MIN:
                    case ClickHouseParser.MINUTE:
                    case ClickHouseParser.MODIFY:
                    case ClickHouseParser.MONTH:
                    case ClickHouseParser.MOVE:
                    case ClickHouseParser.MUTATION:
                    case ClickHouseParser.NO:
                    case ClickHouseParser.NOT:
                    case ClickHouseParser.NULLS:
                    case ClickHouseParser.OFFSET:
                    case ClickHouseParser.ON:
                    case ClickHouseParser.OPTIMIZE:
                    case ClickHouseParser.OR:
                    case ClickHouseParser.ORDER:
                    case ClickHouseParser.OUTER:
                    case ClickHouseParser.OUTFILE:
                    case ClickHouseParser.OVER:
                    case ClickHouseParser.PARTITION:
                    case ClickHouseParser.PIPELINE:
                    case ClickHouseParser.PLAN:
                    case ClickHouseParser.POPULATE:
                    case ClickHouseParser.PRECEDING:
                    case ClickHouseParser.PREWHERE:
                    case ClickHouseParser.PRIMARY:
                    case ClickHouseParser.PROJECTION:
                    case ClickHouseParser.QUARTER:
                    case ClickHouseParser.QUERY:
                    case ClickHouseParser.RANGE:
                    case ClickHouseParser.RELOAD:
                    case ClickHouseParser.REMOVE:
                    case ClickHouseParser.RENAME:
                    case ClickHouseParser.REPLACE:
                    case ClickHouseParser.REPLICA:
                    case ClickHouseParser.REPLICATED:
                    case ClickHouseParser.RIGHT:
                    case ClickHouseParser.ROLLUP:
                    case ClickHouseParser.ROW:
                    case ClickHouseParser.ROWS:
                    case ClickHouseParser.SAMPLE:
                    case ClickHouseParser.SECOND:
                    case ClickHouseParser.SELECT:
                    case ClickHouseParser.SEMI:
                    case ClickHouseParser.SENDS:
                    case ClickHouseParser.SET:
                    case ClickHouseParser.SETTINGS:
                    case ClickHouseParser.SHOW:
                    case ClickHouseParser.SOURCE:
                    case ClickHouseParser.START:
                    case ClickHouseParser.STOP:
                    case ClickHouseParser.SUBSTRING:
                    case ClickHouseParser.SYNC:
                    case ClickHouseParser.SYNTAX:
                    case ClickHouseParser.SYSTEM:
                    case ClickHouseParser.TABLE:
                    case ClickHouseParser.TABLES:
                    case ClickHouseParser.TEMPORARY:
                    case ClickHouseParser.TEST:
                    case ClickHouseParser.THEN:
                    case ClickHouseParser.TIES:
                    case ClickHouseParser.TIMEOUT:
                    case ClickHouseParser.TIMESTAMP:
                    case ClickHouseParser.TO:
                    case ClickHouseParser.TOP:
                    case ClickHouseParser.TOTALS:
                    case ClickHouseParser.TRAILING:
                    case ClickHouseParser.TRIM:
                    case ClickHouseParser.TREE:
                    case ClickHouseParser.TRUNCATE:
                    case ClickHouseParser.TTL:
                    case ClickHouseParser.TYPE:
                    case ClickHouseParser.UNBOUNDED:
                    case ClickHouseParser.UNION:
                    case ClickHouseParser.UPDATE:
                    case ClickHouseParser.USE:
                    case ClickHouseParser.USING:
                    case ClickHouseParser.UUID:
                    case ClickHouseParser.VALUES:
                    case ClickHouseParser.VIEW:
                    case ClickHouseParser.VOLUME:
                    case ClickHouseParser.WATCH:
                    case ClickHouseParser.WEEK:
                    case ClickHouseParser.WHEN:
                    case ClickHouseParser.WHERE:
                    case ClickHouseParser.WINDOW:
                    case ClickHouseParser.WITH:
                    case ClickHouseParser.YEAR:
                    case ClickHouseParser.GRANT:
                    case ClickHouseParser.USER:
                    case ClickHouseParser.FETCH:
                    case ClickHouseParser.REFRESH:
                    case ClickHouseParser.POLICY:
                    case ClickHouseParser.QUOTA:
                    case ClickHouseParser.ROLE:
                    case ClickHouseParser.PROFILE:
                    case ClickHouseParser.ARBITRARY:
                    case ClickHouseParser.COLUMNS:
                    case ClickHouseParser.CURRENT_USER:
                    case ClickHouseParser.ACCESS:
                    case ClickHouseParser.SHOW_USERS:
                    case ClickHouseParser.SHOW_ROLES:
                    case ClickHouseParser.SHOW_ROW_POLICIES:
                    case ClickHouseParser.SHOW_QUOTAS:
                    case ClickHouseParser.SHOW_SETTINGS_PROFILES:
                    case ClickHouseParser.SHUTDOWN:
                    case ClickHouseParser.CACHE:
                    case ClickHouseParser.DNS:
                    case ClickHouseParser.MARK:
                    case ClickHouseParser.MARKS:
                    case ClickHouseParser.PART:
                    case ClickHouseParser.UNCOMPRESSED:
                    case ClickHouseParser.CONFIG:
                    case ClickHouseParser.EMBEDDED:
                    case ClickHouseParser.FUNCTIONS:
                    case ClickHouseParser.MOVES:
                    case ClickHouseParser.REPLICATION:
                    case ClickHouseParser.QUEUES:
                    case ClickHouseParser.RESTART:
                    case ClickHouseParser.DICTGET:
                    case ClickHouseParser.DICTGETHIERARCHY:
                    case ClickHouseParser.DICTHAS:
                    case ClickHouseParser.DICTISIN:
                    case ClickHouseParser.MANAGEMENT:
                    case ClickHouseParser.ADMIN:
                    case ClickHouseParser.NAMED:
                    case ClickHouseParser.COLLECTION:
                    case ClickHouseParser.CONTROL:
                    case ClickHouseParser.COLLECTIONS:
                    case ClickHouseParser.SECRETS:
                    case ClickHouseParser.USAGE:
                    case ClickHouseParser.INTROSPECTION:
                    case ClickHouseParser.ADDRESSTOLINE:
                    case ClickHouseParser.ADDRESSTOSYMBOL:
                    case ClickHouseParser.DEMANGLE:
                    case ClickHouseParser.SOURCES:
                    case ClickHouseParser.FILE:
                    case ClickHouseParser.URL:
                    case ClickHouseParser.REMOTE:
                    case ClickHouseParser.MYSQL:
                    case ClickHouseParser.ODBC:
                    case ClickHouseParser.JDBC:
                    case ClickHouseParser.HDFS:
                    case ClickHouseParser.S3:
                    case ClickHouseParser.SETTING:
                    case ClickHouseParser.OPTION:
                    case ClickHouseParser.NONE:
                    case ClickHouseParser.AZURE:
                    case ClickHouseParser.HIVE:
                    case ClickHouseParser.MONGO:
                    case ClickHouseParser.POSTGRES:
                    case ClickHouseParser.REDIS:
                    case ClickHouseParser.SQLITE:
                    case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
                    case ClickHouseParser.SQL:
                    case ClickHouseParser.SECURITY:
                    case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
                    case ClickHouseParser.POLICIES:
                    case ClickHouseParser.PROFILES:
                    case ClickHouseParser.ALLOW:
                    case ClickHouseParser.GRANTS:
                    case ClickHouseParser.EXCEPT:
                    case ClickHouseParser.REVOKE:
                    case ClickHouseParser.IDENTIFIED:
                    case ClickHouseParser.PLAINTEXT_PASSWORD:
                    case ClickHouseParser.SHA256_PASSWORD:
                    case ClickHouseParser.SHA256_HASH:
                    case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
                    case ClickHouseParser.DOUBLE_SHA1_HASH:
                    case ClickHouseParser.NO_PASSWORD:
                    case ClickHouseParser.LDAP:
                    case ClickHouseParser.SERVER:
                    case ClickHouseParser.KERBEROS:
                    case ClickHouseParser.REALM:
                    case ClickHouseParser.SSL_CERTIFICATE:
                    case ClickHouseParser.SAN:
                    case ClickHouseParser.CN:
                    case ClickHouseParser.SSH_KEY:
                    case ClickHouseParser.HTTP:
                    case ClickHouseParser.SCHEME:
                    case ClickHouseParser.BCRYPT_PASSWORD:
                    case ClickHouseParser.BCRYPT_HASH:
                    case ClickHouseParser.VALID:
                    case ClickHouseParser.UNTIL:
                    case ClickHouseParser.GRANTEES:
                    case ClickHouseParser.NAME:
                    case ClickHouseParser.REGEXP:
                    case ClickHouseParser.IP:
                    case ClickHouseParser.HOST:
                    case ClickHouseParser.READONLY:
                    case ClickHouseParser.WRITABLE:
                    case ClickHouseParser.PERMISSIVE:
                    case ClickHouseParser.RESTRICTIVE:
                    case ClickHouseParser.TABSEPARATED:
                    case ClickHouseParser.TABSEPARATEDRAW:
                    case ClickHouseParser.TABSEPARATEDWITHNAMES:
                    case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
                    case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
                    case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
                    case ClickHouseParser.TEMPLATE:
                    case ClickHouseParser.TEMPLATEIGNORESPACES:
                    case ClickHouseParser.CSV:
                    case ClickHouseParser.CSVWITHNAMES:
                    case ClickHouseParser.CSVWITHNAMESANDTYPES:
                    case ClickHouseParser.CUSTOMSEPARATED:
                    case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
                    case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
                    case ClickHouseParser.JSON:
                    case ClickHouseParser.JSONASSTRING:
                    case ClickHouseParser.JSONASOBJECT:
                    case ClickHouseParser.JSONSTRINGS:
                    case ClickHouseParser.JSONCOLUMNS:
                    case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
                    case ClickHouseParser.JSONCOMPACT:
                    case ClickHouseParser.JSONCOMPACTCOLUMNS:
                    case ClickHouseParser.JSONEACHROW:
                    case ClickHouseParser.JSONSTRINGSEACHROW:
                    case ClickHouseParser.JSONCOMPACTEACHROW:
                    case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
                    case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
                    case ClickHouseParser.JSONOBJECTEACHROW:
                    case ClickHouseParser.BSONEACHROW:
                    case ClickHouseParser.TSKV:
                    case ClickHouseParser.PROTOBUF:
                    case ClickHouseParser.PROTOBUFSINGLE:
                    case ClickHouseParser.PROTOBUFLIST:
                    case ClickHouseParser.AVRO:
                    case ClickHouseParser.AVROCONFLUENT:
                    case ClickHouseParser.PARQUET:
                    case ClickHouseParser.PARQUETMETADATA:
                    case ClickHouseParser.ARROW:
                    case ClickHouseParser.ARROWSTREAM:
                    case ClickHouseParser.ORC:
                    case ClickHouseParser.ONE:
                    case ClickHouseParser.NPY:
                    case ClickHouseParser.ROWBINARY:
                    case ClickHouseParser.ROWBINARYWITHNAMES:
                    case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
                    case ClickHouseParser.ROWBINARYWITHDEFAULTS:
                    case ClickHouseParser.NATIVE:
                    case ClickHouseParser.CAPNPROTO:
                    case ClickHouseParser.LINEASSTRING:
                    case ClickHouseParser.RAWBLOB:
                    case ClickHouseParser.MSGPACK:
                    case ClickHouseParser.MYSQLDUMP:
                    case ClickHouseParser.DWARF:
                    case ClickHouseParser.FORM:
                    case ClickHouseParser.JSON_FALSE:
                    case ClickHouseParser.JSON_TRUE:
                    case ClickHouseParser.IDENTIFIER:
                        {
                        this.state = 1655;
                        this.identifier();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 1658;
                    this.match(ClickHouseParser.DOT);
                    }
                    break;
                }
                this.state = 1663;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.ASTERISK:
                    {
                    this.state = 1661;
                    this.match(ClickHouseParser.ASTERISK);
                    }
                    break;
                case ClickHouseParser.ADD:
                case ClickHouseParser.AFTER:
                case ClickHouseParser.ALIAS:
                case ClickHouseParser.ALL:
                case ClickHouseParser.ALTER:
                case ClickHouseParser.AND:
                case ClickHouseParser.ANTI:
                case ClickHouseParser.ANY:
                case ClickHouseParser.ARRAY:
                case ClickHouseParser.AS:
                case ClickHouseParser.ASCENDING:
                case ClickHouseParser.ASOF:
                case ClickHouseParser.AST:
                case ClickHouseParser.ASYNC:
                case ClickHouseParser.ATTACH:
                case ClickHouseParser.BETWEEN:
                case ClickHouseParser.BOTH:
                case ClickHouseParser.BY:
                case ClickHouseParser.CASE:
                case ClickHouseParser.CAST:
                case ClickHouseParser.CHECK:
                case ClickHouseParser.CLEAR:
                case ClickHouseParser.CLUSTER:
                case ClickHouseParser.CODEC:
                case ClickHouseParser.COLLATE:
                case ClickHouseParser.COLUMN:
                case ClickHouseParser.COMMENT:
                case ClickHouseParser.CONSTRAINT:
                case ClickHouseParser.CREATE:
                case ClickHouseParser.CROSS:
                case ClickHouseParser.CUBE:
                case ClickHouseParser.CURRENT:
                case ClickHouseParser.DATABASE:
                case ClickHouseParser.DATABASES:
                case ClickHouseParser.DATE:
                case ClickHouseParser.DAY:
                case ClickHouseParser.DEDUPLICATE:
                case ClickHouseParser.DEFAULT:
                case ClickHouseParser.DELAY:
                case ClickHouseParser.DELETE:
                case ClickHouseParser.DESC:
                case ClickHouseParser.DESCENDING:
                case ClickHouseParser.DESCRIBE:
                case ClickHouseParser.DETACH:
                case ClickHouseParser.DICTIONARIES:
                case ClickHouseParser.DICTIONARY:
                case ClickHouseParser.DISK:
                case ClickHouseParser.DISTINCT:
                case ClickHouseParser.DISTRIBUTED:
                case ClickHouseParser.DROP:
                case ClickHouseParser.ELSE:
                case ClickHouseParser.END:
                case ClickHouseParser.ENGINE:
                case ClickHouseParser.ESTIMATE:
                case ClickHouseParser.EVENTS:
                case ClickHouseParser.EXISTS:
                case ClickHouseParser.EXPLAIN:
                case ClickHouseParser.EXPRESSION:
                case ClickHouseParser.EXTRACT:
                case ClickHouseParser.FETCHES:
                case ClickHouseParser.FINAL:
                case ClickHouseParser.FIRST:
                case ClickHouseParser.FLUSH:
                case ClickHouseParser.FOLLOWING:
                case ClickHouseParser.FOR:
                case ClickHouseParser.FORMAT:
                case ClickHouseParser.FREEZE:
                case ClickHouseParser.FROM:
                case ClickHouseParser.FULL:
                case ClickHouseParser.FUNCTION:
                case ClickHouseParser.GLOBAL:
                case ClickHouseParser.GRANULARITY:
                case ClickHouseParser.GROUP:
                case ClickHouseParser.HAVING:
                case ClickHouseParser.HIERARCHICAL:
                case ClickHouseParser.HOUR:
                case ClickHouseParser.ID:
                case ClickHouseParser.IF:
                case ClickHouseParser.ILIKE:
                case ClickHouseParser.IN:
                case ClickHouseParser.INDEX:
                case ClickHouseParser.INF:
                case ClickHouseParser.INJECTIVE:
                case ClickHouseParser.INNER:
                case ClickHouseParser.INSERT:
                case ClickHouseParser.INTERVAL:
                case ClickHouseParser.INTO:
                case ClickHouseParser.IS:
                case ClickHouseParser.IS_OBJECT_ID:
                case ClickHouseParser.JOIN:
                case ClickHouseParser.KEY:
                case ClickHouseParser.KILL:
                case ClickHouseParser.LAST:
                case ClickHouseParser.LAYOUT:
                case ClickHouseParser.LEADING:
                case ClickHouseParser.LEFT:
                case ClickHouseParser.LIFETIME:
                case ClickHouseParser.LIKE:
                case ClickHouseParser.LIMIT:
                case ClickHouseParser.LIVE:
                case ClickHouseParser.LOCAL:
                case ClickHouseParser.LOGS:
                case ClickHouseParser.MATERIALIZE:
                case ClickHouseParser.MATERIALIZED:
                case ClickHouseParser.MAX:
                case ClickHouseParser.MERGES:
                case ClickHouseParser.MIN:
                case ClickHouseParser.MINUTE:
                case ClickHouseParser.MODIFY:
                case ClickHouseParser.MONTH:
                case ClickHouseParser.MOVE:
                case ClickHouseParser.MUTATION:
                case ClickHouseParser.NO:
                case ClickHouseParser.NOT:
                case ClickHouseParser.NULLS:
                case ClickHouseParser.OFFSET:
                case ClickHouseParser.ON:
                case ClickHouseParser.OPTIMIZE:
                case ClickHouseParser.OR:
                case ClickHouseParser.ORDER:
                case ClickHouseParser.OUTER:
                case ClickHouseParser.OUTFILE:
                case ClickHouseParser.OVER:
                case ClickHouseParser.PARTITION:
                case ClickHouseParser.PIPELINE:
                case ClickHouseParser.PLAN:
                case ClickHouseParser.POPULATE:
                case ClickHouseParser.PRECEDING:
                case ClickHouseParser.PREWHERE:
                case ClickHouseParser.PRIMARY:
                case ClickHouseParser.PROJECTION:
                case ClickHouseParser.QUARTER:
                case ClickHouseParser.QUERY:
                case ClickHouseParser.RANGE:
                case ClickHouseParser.RELOAD:
                case ClickHouseParser.REMOVE:
                case ClickHouseParser.RENAME:
                case ClickHouseParser.REPLACE:
                case ClickHouseParser.REPLICA:
                case ClickHouseParser.REPLICATED:
                case ClickHouseParser.RIGHT:
                case ClickHouseParser.ROLLUP:
                case ClickHouseParser.ROW:
                case ClickHouseParser.ROWS:
                case ClickHouseParser.SAMPLE:
                case ClickHouseParser.SECOND:
                case ClickHouseParser.SELECT:
                case ClickHouseParser.SEMI:
                case ClickHouseParser.SENDS:
                case ClickHouseParser.SET:
                case ClickHouseParser.SETTINGS:
                case ClickHouseParser.SHOW:
                case ClickHouseParser.SOURCE:
                case ClickHouseParser.START:
                case ClickHouseParser.STOP:
                case ClickHouseParser.SUBSTRING:
                case ClickHouseParser.SYNC:
                case ClickHouseParser.SYNTAX:
                case ClickHouseParser.SYSTEM:
                case ClickHouseParser.TABLE:
                case ClickHouseParser.TABLES:
                case ClickHouseParser.TEMPORARY:
                case ClickHouseParser.TEST:
                case ClickHouseParser.THEN:
                case ClickHouseParser.TIES:
                case ClickHouseParser.TIMEOUT:
                case ClickHouseParser.TIMESTAMP:
                case ClickHouseParser.TO:
                case ClickHouseParser.TOP:
                case ClickHouseParser.TOTALS:
                case ClickHouseParser.TRAILING:
                case ClickHouseParser.TRIM:
                case ClickHouseParser.TREE:
                case ClickHouseParser.TRUNCATE:
                case ClickHouseParser.TTL:
                case ClickHouseParser.TYPE:
                case ClickHouseParser.UNBOUNDED:
                case ClickHouseParser.UNION:
                case ClickHouseParser.UPDATE:
                case ClickHouseParser.USE:
                case ClickHouseParser.USING:
                case ClickHouseParser.UUID:
                case ClickHouseParser.VALUES:
                case ClickHouseParser.VIEW:
                case ClickHouseParser.VOLUME:
                case ClickHouseParser.WATCH:
                case ClickHouseParser.WEEK:
                case ClickHouseParser.WHEN:
                case ClickHouseParser.WHERE:
                case ClickHouseParser.WINDOW:
                case ClickHouseParser.WITH:
                case ClickHouseParser.YEAR:
                case ClickHouseParser.GRANT:
                case ClickHouseParser.USER:
                case ClickHouseParser.FETCH:
                case ClickHouseParser.REFRESH:
                case ClickHouseParser.POLICY:
                case ClickHouseParser.QUOTA:
                case ClickHouseParser.ROLE:
                case ClickHouseParser.PROFILE:
                case ClickHouseParser.ARBITRARY:
                case ClickHouseParser.COLUMNS:
                case ClickHouseParser.CURRENT_USER:
                case ClickHouseParser.ACCESS:
                case ClickHouseParser.SHOW_USERS:
                case ClickHouseParser.SHOW_ROLES:
                case ClickHouseParser.SHOW_ROW_POLICIES:
                case ClickHouseParser.SHOW_QUOTAS:
                case ClickHouseParser.SHOW_SETTINGS_PROFILES:
                case ClickHouseParser.SHUTDOWN:
                case ClickHouseParser.CACHE:
                case ClickHouseParser.DNS:
                case ClickHouseParser.MARK:
                case ClickHouseParser.MARKS:
                case ClickHouseParser.PART:
                case ClickHouseParser.UNCOMPRESSED:
                case ClickHouseParser.CONFIG:
                case ClickHouseParser.EMBEDDED:
                case ClickHouseParser.FUNCTIONS:
                case ClickHouseParser.MOVES:
                case ClickHouseParser.REPLICATION:
                case ClickHouseParser.QUEUES:
                case ClickHouseParser.RESTART:
                case ClickHouseParser.DICTGET:
                case ClickHouseParser.DICTGETHIERARCHY:
                case ClickHouseParser.DICTHAS:
                case ClickHouseParser.DICTISIN:
                case ClickHouseParser.MANAGEMENT:
                case ClickHouseParser.ADMIN:
                case ClickHouseParser.NAMED:
                case ClickHouseParser.COLLECTION:
                case ClickHouseParser.CONTROL:
                case ClickHouseParser.COLLECTIONS:
                case ClickHouseParser.SECRETS:
                case ClickHouseParser.USAGE:
                case ClickHouseParser.INTROSPECTION:
                case ClickHouseParser.ADDRESSTOLINE:
                case ClickHouseParser.ADDRESSTOSYMBOL:
                case ClickHouseParser.DEMANGLE:
                case ClickHouseParser.SOURCES:
                case ClickHouseParser.FILE:
                case ClickHouseParser.URL:
                case ClickHouseParser.REMOTE:
                case ClickHouseParser.MYSQL:
                case ClickHouseParser.ODBC:
                case ClickHouseParser.JDBC:
                case ClickHouseParser.HDFS:
                case ClickHouseParser.S3:
                case ClickHouseParser.SETTING:
                case ClickHouseParser.OPTION:
                case ClickHouseParser.NONE:
                case ClickHouseParser.AZURE:
                case ClickHouseParser.HIVE:
                case ClickHouseParser.MONGO:
                case ClickHouseParser.POSTGRES:
                case ClickHouseParser.REDIS:
                case ClickHouseParser.SQLITE:
                case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
                case ClickHouseParser.SQL:
                case ClickHouseParser.SECURITY:
                case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
                case ClickHouseParser.POLICIES:
                case ClickHouseParser.PROFILES:
                case ClickHouseParser.ALLOW:
                case ClickHouseParser.GRANTS:
                case ClickHouseParser.EXCEPT:
                case ClickHouseParser.REVOKE:
                case ClickHouseParser.IDENTIFIED:
                case ClickHouseParser.PLAINTEXT_PASSWORD:
                case ClickHouseParser.SHA256_PASSWORD:
                case ClickHouseParser.SHA256_HASH:
                case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
                case ClickHouseParser.DOUBLE_SHA1_HASH:
                case ClickHouseParser.NO_PASSWORD:
                case ClickHouseParser.LDAP:
                case ClickHouseParser.SERVER:
                case ClickHouseParser.KERBEROS:
                case ClickHouseParser.REALM:
                case ClickHouseParser.SSL_CERTIFICATE:
                case ClickHouseParser.SAN:
                case ClickHouseParser.CN:
                case ClickHouseParser.SSH_KEY:
                case ClickHouseParser.HTTP:
                case ClickHouseParser.SCHEME:
                case ClickHouseParser.BCRYPT_PASSWORD:
                case ClickHouseParser.BCRYPT_HASH:
                case ClickHouseParser.VALID:
                case ClickHouseParser.UNTIL:
                case ClickHouseParser.GRANTEES:
                case ClickHouseParser.NAME:
                case ClickHouseParser.REGEXP:
                case ClickHouseParser.IP:
                case ClickHouseParser.HOST:
                case ClickHouseParser.READONLY:
                case ClickHouseParser.WRITABLE:
                case ClickHouseParser.PERMISSIVE:
                case ClickHouseParser.RESTRICTIVE:
                case ClickHouseParser.TABSEPARATED:
                case ClickHouseParser.TABSEPARATEDRAW:
                case ClickHouseParser.TABSEPARATEDWITHNAMES:
                case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
                case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
                case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
                case ClickHouseParser.TEMPLATE:
                case ClickHouseParser.TEMPLATEIGNORESPACES:
                case ClickHouseParser.CSV:
                case ClickHouseParser.CSVWITHNAMES:
                case ClickHouseParser.CSVWITHNAMESANDTYPES:
                case ClickHouseParser.CUSTOMSEPARATED:
                case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
                case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
                case ClickHouseParser.JSON:
                case ClickHouseParser.JSONASSTRING:
                case ClickHouseParser.JSONASOBJECT:
                case ClickHouseParser.JSONSTRINGS:
                case ClickHouseParser.JSONCOLUMNS:
                case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
                case ClickHouseParser.JSONCOMPACT:
                case ClickHouseParser.JSONCOMPACTCOLUMNS:
                case ClickHouseParser.JSONEACHROW:
                case ClickHouseParser.JSONSTRINGSEACHROW:
                case ClickHouseParser.JSONCOMPACTEACHROW:
                case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
                case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
                case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
                case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
                case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
                case ClickHouseParser.JSONOBJECTEACHROW:
                case ClickHouseParser.BSONEACHROW:
                case ClickHouseParser.TSKV:
                case ClickHouseParser.PROTOBUF:
                case ClickHouseParser.PROTOBUFSINGLE:
                case ClickHouseParser.PROTOBUFLIST:
                case ClickHouseParser.AVRO:
                case ClickHouseParser.AVROCONFLUENT:
                case ClickHouseParser.PARQUET:
                case ClickHouseParser.PARQUETMETADATA:
                case ClickHouseParser.ARROW:
                case ClickHouseParser.ARROWSTREAM:
                case ClickHouseParser.ORC:
                case ClickHouseParser.ONE:
                case ClickHouseParser.NPY:
                case ClickHouseParser.ROWBINARY:
                case ClickHouseParser.ROWBINARYWITHNAMES:
                case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
                case ClickHouseParser.ROWBINARYWITHDEFAULTS:
                case ClickHouseParser.NATIVE:
                case ClickHouseParser.CAPNPROTO:
                case ClickHouseParser.LINEASSTRING:
                case ClickHouseParser.RAWBLOB:
                case ClickHouseParser.MSGPACK:
                case ClickHouseParser.MYSQLDUMP:
                case ClickHouseParser.DWARF:
                case ClickHouseParser.FORM:
                case ClickHouseParser.JSON_FALSE:
                case ClickHouseParser.JSON_TRUE:
                case ClickHouseParser.IDENTIFIER:
                    {
                    this.state = 1662;
                    this.identifier();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeList(): PrivilegeListContext {
        let localContext = new PrivilegeListContext(this.context, this.state);
        this.enterRule(localContext, 164, ClickHouseParser.RULE_privilegeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1667;
            this.privilege();
            this.state = 1672;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 1668;
                this.match(ClickHouseParser.COMMA);
                this.state = 1669;
                this.privilege();
                }
                }
                this.state = 1674;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleIdentifier(): RoleIdentifierContext {
        let localContext = new RoleIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 166, ClickHouseParser.RULE_roleIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1675;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userIdentifier(): UserIdentifierContext {
        let localContext = new UserIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 168, ClickHouseParser.RULE_userIdentifier);
        try {
            this.state = 1679;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 199, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1677;
                this.match(ClickHouseParser.CURRENT_USER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1678;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext {
        let localContext = new UserOrRoleExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 170, ClickHouseParser.RULE_userOrRoleExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1681;
            this.userOrRoleIdentifier();
            this.state = 1686;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 1682;
                this.match(ClickHouseParser.COMMA);
                this.state = 1683;
                this.userOrRoleIdentifier();
                }
                }
                this.state = 1688;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userOrRoleIdentifier(): UserOrRoleIdentifierContext {
        let localContext = new UserOrRoleIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 172, ClickHouseParser.RULE_userOrRoleIdentifier);
        try {
            this.state = 1691;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 201, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1689;
                this.userIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1690;
                this.roleIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectPrivilege(): SelectPrivilegeContext {
        let localContext = new SelectPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 174, ClickHouseParser.RULE_selectPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1693;
            this.match(ClickHouseParser.SELECT);
            this.state = 1695;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 381) {
                {
                this.state = 1694;
                this.columnsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertPrivilege(): InsertPrivilegeContext {
        let localContext = new InsertPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 176, ClickHouseParser.RULE_insertPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1697;
            this.match(ClickHouseParser.INSERT);
            this.state = 1699;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 381) {
                {
                this.state = 1698;
                this.columnsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createPrivilege(): CreatePrivilegeContext {
        let localContext = new CreatePrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 178, ClickHouseParser.RULE_createPrivilege);
        let _la: number;
        try {
            this.state = 1712;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 206, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1701;
                this.match(ClickHouseParser.CREATE);
                this.state = 1703;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 33 || _la === 46 || _la === 70 || _la === 162 || _la === 186) {
                    {
                    this.state = 1702;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 33 || _la === 46 || _la === 70 || _la === 162 || _la === 186)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1705;
                this.match(ClickHouseParser.CREATE);
                this.state = 1709;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.ARBITRARY:
                    {
                    this.state = 1706;
                    this.match(ClickHouseParser.ARBITRARY);
                    this.state = 1707;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                case ClickHouseParser.TEMPORARY:
                    {
                    this.state = 1708;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                case ClickHouseParser.TABLE:
                    break;
                default:
                    break;
                }
                this.state = 1711;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropPrivilege(): DropPrivilegeContext {
        let localContext = new DropPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 180, ClickHouseParser.RULE_dropPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1714;
            this.match(ClickHouseParser.DROP);
            this.state = 1716;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 33 || _la === 46 || _la === 162 || _la === 186) {
                {
                this.state = 1715;
                _la = this.tokenStream.LA(1);
                if(!(_la === 33 || _la === 46 || _la === 162 || _la === 186)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showPrivilege(): ShowPrivilegeContext {
        let localContext = new ShowPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 182, ClickHouseParser.RULE_showPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1718;
            this.match(ClickHouseParser.SHOW);
            this.state = 1720;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34 || _la === 45 || _la === 163 || _la === 204) {
                {
                this.state = 1719;
                _la = this.tokenStream.LA(1);
                if(!(_la === 34 || _la === 45 || _la === 163 || _la === 204)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public introspectionPrivilege(): IntrospectionPrivilegeContext {
        let localContext = new IntrospectionPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 184, ClickHouseParser.RULE_introspectionPrivilege);
        let _la: number;
        try {
            this.state = 1730;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.INTROSPECTION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1722;
                this.match(ClickHouseParser.INTROSPECTION);
                this.state = 1724;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 221) {
                    {
                    this.state = 1723;
                    this.match(ClickHouseParser.FUNCTIONS);
                    }
                }

                }
                break;
            case ClickHouseParser.ADDRESSTOLINE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1726;
                this.match(ClickHouseParser.ADDRESSTOLINE);
                }
                break;
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1727;
                this.match(ClickHouseParser.ADDRESSTOLINEWITHINLINES);
                }
                break;
            case ClickHouseParser.ADDRESSTOSYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1728;
                this.match(ClickHouseParser.ADDRESSTOSYMBOL);
                }
                break;
            case ClickHouseParser.DEMANGLE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1729;
                this.match(ClickHouseParser.DEMANGLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourcePrivilege(): SourcePrivilegeContext {
        let localContext = new SourcePrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 186, ClickHouseParser.RULE_sourcePrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1732;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 242)) & ~0x1F) === 0 && ((1 << (_la - 242)) & 258559) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictPrivilege(): DictPrivilegeContext {
        let localContext = new DictPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 188, ClickHouseParser.RULE_dictPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1734;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterPrivilege(): AlterPrivilegeContext {
        let localContext = new AlterPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 190, ClickHouseParser.RULE_alterPrivilege);
        let _la: number;
        try {
            this.state = 1832;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 228, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1736;
                this.match(ClickHouseParser.ALTER);
                this.state = 1738;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 40 || _la === 181) {
                    {
                    this.state = 1737;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 40 || _la === 181)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1741;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 381) {
                    {
                    this.state = 1740;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1743;
                _la = this.tokenStream.LA(1);
                if(!(_la === 40 || _la === 181)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1745;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 381) {
                    {
                    this.state = 1744;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1747;
                this.match(ClickHouseParser.ALTER);
                this.state = 1748;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1749;
                this.match(ClickHouseParser.ALTER);
                this.state = 1751;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 138412034) !== 0) || _la === 50 || _la === 109 || _la === 139) {
                    {
                    this.state = 1750;
                    _la = this.tokenStream.LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 138412034) !== 0) || _la === 50 || _la === 109 || _la === 139)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1753;
                this.match(ClickHouseParser.COLUMN);
                this.state = 1755;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 381) {
                    {
                    this.state = 1754;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1757;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 138412034) !== 0) || _la === 50 || _la === 109 || _la === 139)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1758;
                this.match(ClickHouseParser.COLUMN);
                this.state = 1760;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 381) {
                    {
                    this.state = 1759;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1762;
                this.match(ClickHouseParser.ALTER);
                this.state = 1764;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 22 || _la === 50 || _la === 103) {
                    {
                    this.state = 1763;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 22 || _la === 50 || _la === 103)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1766;
                this.match(ClickHouseParser.INDEX);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1768;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 22 || _la === 50 || _la === 103) {
                    {
                    this.state = 1767;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 22 || _la === 50 || _la === 103)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1770;
                this.match(ClickHouseParser.INDEX);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1771;
                this.match(ClickHouseParser.ALTER);
                this.state = 1773;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 109) {
                    {
                    this.state = 1772;
                    this.match(ClickHouseParser.MODIFY);
                    }
                }

                this.state = 1775;
                _la = this.tokenStream.LA(1);
                if(!(_la === 122 || _la === 147)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1776;
                this.match(ClickHouseParser.BY);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1777;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1778;
                _la = this.tokenStream.LA(1);
                if(!(_la === 122 || _la === 147)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1779;
                this.match(ClickHouseParser.BY);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1781;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 1780;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 1784;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 50) {
                    {
                    this.state = 1783;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 50)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1786;
                this.match(ClickHouseParser.CONSTRAINT);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1787;
                this.match(ClickHouseParser.ALTER);
                this.state = 1789;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 103 || _la === 109) {
                    {
                    this.state = 1788;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 103 || _la === 109)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1791;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1792;
                _la = this.tokenStream.LA(1);
                if(!(_la === 103 || _la === 109)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1793;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1794;
                this.match(ClickHouseParser.ALTER);
                this.state = 1795;
                this.match(ClickHouseParser.SETTINGS);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1800;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 223, this.context) ) {
                case 1:
                    {
                    this.state = 1796;
                    this.match(ClickHouseParser.ALTER);
                    }
                    break;
                case 2:
                    {
                    this.state = 1797;
                    this.match(ClickHouseParser.ALTER);
                    this.state = 1798;
                    this.match(ClickHouseParser.MODIFY);
                    }
                    break;
                case 3:
                    {
                    this.state = 1799;
                    this.match(ClickHouseParser.MODIFY);
                    }
                    break;
                }
                this.state = 1802;
                this.match(ClickHouseParser.SETTING);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1804;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 1803;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 1806;
                _la = this.tokenStream.LA(1);
                if(!(_la === 111 || _la === 197)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1807;
                _la = this.tokenStream.LA(1);
                if(!(_la === 126 || _la === 217)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1809;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 1808;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 1811;
                this.match(ClickHouseParser.FREEZE);
                this.state = 1812;
                this.match(ClickHouseParser.PARTITION);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1813;
                this.match(ClickHouseParser.ALTER);
                this.state = 1814;
                this.match(ClickHouseParser.VIEW);
                this.state = 1816;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 198) {
                    {
                    this.state = 1815;
                    this.match(ClickHouseParser.REFRESH);
                    }
                }

                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1818;
                this.match(ClickHouseParser.ALTER);
                this.state = 1819;
                this.match(ClickHouseParser.LIVE);
                this.state = 1820;
                this.match(ClickHouseParser.VIEW);
                this.state = 1821;
                this.match(ClickHouseParser.REFRESH);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1822;
                this.match(ClickHouseParser.REFRESH);
                this.state = 1823;
                this.match(ClickHouseParser.VIEW);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1824;
                this.match(ClickHouseParser.ALTER);
                this.state = 1825;
                _la = this.tokenStream.LA(1);
                if(!(_la === 162 || _la === 186)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1826;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1830;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.QUERY:
                    {
                    this.state = 1827;
                    this.match(ClickHouseParser.QUERY);
                    }
                    break;
                case ClickHouseParser.SQL:
                    {
                    this.state = 1828;
                    this.match(ClickHouseParser.SQL);
                    this.state = 1829;
                    this.match(ClickHouseParser.SECURITY);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public accessManagementPrivilege(): AccessManagementPrivilegeContext {
        let localContext = new AccessManagementPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 192, ClickHouseParser.RULE_accessManagementPrivilege);
        let _la: number;
        try {
            this.state = 1894;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 234, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1834;
                this.match(ClickHouseParser.ACCESS);
                this.state = 1835;
                this.match(ClickHouseParser.MANAGEMENT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1836;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1837;
                this.match(ClickHouseParser.USER);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1838;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1839;
                this.match(ClickHouseParser.ROLE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1840;
                this.match(ClickHouseParser.ROLE);
                this.state = 1841;
                this.match(ClickHouseParser.ADMIN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1842;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1844;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 145) {
                    {
                    this.state = 1843;
                    this.match(ClickHouseParser.ROW);
                    }
                }

                this.state = 1846;
                this.match(ClickHouseParser.POLICY);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1847;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1848;
                this.match(ClickHouseParser.QUOTA);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1849;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 29 || _la === 50)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1851;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 153) {
                    {
                    this.state = 1850;
                    this.match(ClickHouseParser.SETTINGS);
                    }
                }

                this.state = 1853;
                this.match(ClickHouseParser.PROFILE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1854;
                this.match(ClickHouseParser.SHOW);
                this.state = 1855;
                this.match(ClickHouseParser.ACCESS);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1856;
                this.match(ClickHouseParser.SHOW_USERS);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1857;
                this.match(ClickHouseParser.SHOW);
                this.state = 1858;
                this.match(ClickHouseParser.CREATE);
                this.state = 1859;
                this.match(ClickHouseParser.USER);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1860;
                this.match(ClickHouseParser.SHOW_ROLES);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1861;
                this.match(ClickHouseParser.SHOW);
                this.state = 1862;
                this.match(ClickHouseParser.CREATE);
                this.state = 1863;
                this.match(ClickHouseParser.ROLE);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1864;
                this.match(ClickHouseParser.SHOW_ROW_POLICIES);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1865;
                this.match(ClickHouseParser.SHOW);
                this.state = 1866;
                this.match(ClickHouseParser.POLICIES);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1867;
                this.match(ClickHouseParser.SHOW);
                this.state = 1868;
                this.match(ClickHouseParser.CREATE);
                this.state = 1870;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 145) {
                    {
                    this.state = 1869;
                    this.match(ClickHouseParser.ROW);
                    }
                }

                this.state = 1872;
                this.match(ClickHouseParser.POLICY);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1873;
                this.match(ClickHouseParser.SHOW_QUOTAS);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1874;
                this.match(ClickHouseParser.SHOW);
                this.state = 1875;
                this.match(ClickHouseParser.CREATE);
                this.state = 1876;
                this.match(ClickHouseParser.QUOTA);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1877;
                this.match(ClickHouseParser.SHOW_SETTINGS_PROFILES);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1878;
                this.match(ClickHouseParser.SHOW);
                this.state = 1879;
                this.match(ClickHouseParser.PROFILES);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 1880;
                this.match(ClickHouseParser.SHOW);
                this.state = 1881;
                this.match(ClickHouseParser.CREATE);
                this.state = 1883;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 153) {
                    {
                    this.state = 1882;
                    this.match(ClickHouseParser.SETTINGS);
                    }
                }

                this.state = 1885;
                this.match(ClickHouseParser.PROFILE);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 1887;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 29 || _la === 266) {
                    {
                    this.state = 1886;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 29 || _la === 266)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1889;
                this.match(ClickHouseParser.SQL);
                this.state = 1890;
                this.match(ClickHouseParser.SECURITY);
                this.state = 1891;
                this.match(ClickHouseParser.NONE);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 1892;
                this.match(ClickHouseParser.SECURITY);
                this.state = 1893;
                this.match(ClickHouseParser.NONE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public systemPrivilege(): SystemPrivilegeContext {
        let localContext = new SystemPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 194, ClickHouseParser.RULE_systemPrivilege);
        let _la: number;
        try {
            this.state = 1986;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 250, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1896;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1898;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 92 || _la === 212) {
                    {
                    this.state = 1897;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 92 || _la === 212)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1900;
                this.match(ClickHouseParser.SHUTDOWN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1902;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 161) {
                    {
                    this.state = 1901;
                    this.match(ClickHouseParser.SYSTEM);
                    }
                }

                this.state = 1904;
                this.match(ClickHouseParser.DROP);
                this.state = 1905;
                this.match(ClickHouseParser.CACHE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1906;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1907;
                this.match(ClickHouseParser.DROP);
                this.state = 1908;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 19) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 213) {
                    {
                    this.state = 1909;
                    this.match(ClickHouseParser.CACHE);
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1912;
                this.match(ClickHouseParser.DROP);
                this.state = 1913;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 19) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1914;
                this.match(ClickHouseParser.CACHE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1915;
                this.match(ClickHouseParser.DROP);
                this.state = 1916;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 214)) & ~0x1F) === 0 && ((1 << (_la - 214)) & 21) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1917;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1918;
                this.match(ClickHouseParser.RELOAD);
                this.state = 1925;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.CONFIG:
                    {
                    this.state = 1919;
                    this.match(ClickHouseParser.CONFIG);
                    }
                    break;
                case ClickHouseParser.DICTIONARY:
                    {
                    this.state = 1920;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case ClickHouseParser.DICTIONARIES:
                case ClickHouseParser.EMBEDDED:
                    {
                    this.state = 1922;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 220) {
                        {
                        this.state = 1921;
                        this.match(ClickHouseParser.EMBEDDED);
                        }
                    }

                    this.state = 1924;
                    this.match(ClickHouseParser.DICTIONARIES);
                    }
                    break;
                case ClickHouseParser.ON:
                case ClickHouseParser.COMMA:
                    break;
                default:
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1927;
                this.match(ClickHouseParser.RELOAD);
                this.state = 1934;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.CONFIG:
                    {
                    this.state = 1928;
                    this.match(ClickHouseParser.CONFIG);
                    }
                    break;
                case ClickHouseParser.DICTIONARY:
                    {
                    this.state = 1929;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case ClickHouseParser.DICTIONARIES:
                case ClickHouseParser.EMBEDDED:
                    {
                    this.state = 1931;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 220) {
                        {
                        this.state = 1930;
                        this.match(ClickHouseParser.EMBEDDED);
                        }
                    }

                    this.state = 1933;
                    this.match(ClickHouseParser.DICTIONARIES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1936;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1938;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 156 || _la === 157) {
                    {
                    this.state = 1937;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 156 || _la === 157)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1941;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 1940;
                    this.match(ClickHouseParser.TTL);
                    }
                }

                this.state = 1943;
                this.match(ClickHouseParser.MERGES);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1944;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1946;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 177) {
                    {
                    this.state = 1945;
                    this.match(ClickHouseParser.TTL);
                    }
                }

                this.state = 1948;
                this.match(ClickHouseParser.MERGES);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1949;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1951;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 156 || _la === 157) {
                    {
                    this.state = 1950;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 156 || _la === 157)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1953;
                _la = this.tokenStream.LA(1);
                if(!(_la === 60 || _la === 151 || _la === 222)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1954;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1955;
                _la = this.tokenStream.LA(1);
                if(!(_la === 60 || _la === 151 || _la === 222)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1956;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1958;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 156 || _la === 157) {
                    {
                    this.state = 1957;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 156 || _la === 157)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1960;
                _la = this.tokenStream.LA(1);
                if(!(_la === 49 || _la === 142)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1961;
                this.match(ClickHouseParser.SENDS);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1962;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1963;
                _la = this.tokenStream.LA(1);
                if(!(_la === 49 || _la === 142)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1964;
                this.match(ClickHouseParser.SENDS);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 1965;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1967;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 156 || _la === 157) {
                    {
                    this.state = 1966;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 156 || _la === 157)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1969;
                this.match(ClickHouseParser.REPLICATION);
                this.state = 1970;
                this.match(ClickHouseParser.QUEUES);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 1971;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1972;
                this.match(ClickHouseParser.REPLICATION);
                this.state = 1973;
                this.match(ClickHouseParser.QUEUES);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 1975;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 161) {
                    {
                    this.state = 1974;
                    this.match(ClickHouseParser.SYSTEM);
                    }
                }

                this.state = 1977;
                _la = this.tokenStream.LA(1);
                if(!(_la === 159 || _la === 225)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1978;
                this.match(ClickHouseParser.REPLICA);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 1979;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 1980;
                this.match(ClickHouseParser.FLUSH);
                this.state = 1982;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 49 || _la === 102) {
                    {
                    this.state = 1981;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 49 || _la === 102)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 1984;
                this.match(ClickHouseParser.FLUSH);
                this.state = 1985;
                _la = this.tokenStream.LA(1);
                if(!(_la === 49 || _la === 102)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedCollectionAdminPrivilege(): NamedCollectionAdminPrivilegeContext {
        let localContext = new NamedCollectionAdminPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 196, ClickHouseParser.RULE_namedCollectionAdminPrivilege);
        let _la: number;
        try {
            this.state = 2007;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 254, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1988;
                this.match(ClickHouseParser.NAMED);
                this.state = 1989;
                this.match(ClickHouseParser.COLLECTION);
                this.state = 1991;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & 73) !== 0)) {
                    {
                    this.state = 1990;
                    _la = this.tokenStream.LA(1);
                    if(!(((((_la - 231)) & ~0x1F) === 0 && ((1 << (_la - 231)) & 73) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1994;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5 || _la === 29 || _la === 50) {
                    {
                    this.state = 1993;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 5 || _la === 29 || _la === 50)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 1996;
                this.match(ClickHouseParser.NAMED);
                this.state = 1997;
                this.match(ClickHouseParser.COLLECTION);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1998;
                this.match(ClickHouseParser.SHOW);
                this.state = 1999;
                this.match(ClickHouseParser.NAMED);
                this.state = 2000;
                this.match(ClickHouseParser.COLLECTIONS);
                this.state = 2002;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 236) {
                    {
                    this.state = 2001;
                    this.match(ClickHouseParser.SECRETS);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2004;
                this.match(ClickHouseParser.USE);
                this.state = 2005;
                this.match(ClickHouseParser.NAMED);
                this.state = 2006;
                this.match(ClickHouseParser.COLLECTION);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 198, ClickHouseParser.RULE_privilege);
        try {
            this.state = 2034;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2009;
                this.selectPrivilege();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2010;
                this.insertPrivilege();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2011;
                this.createPrivilege();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2012;
                this.dropPrivilege();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2013;
                this.match(ClickHouseParser.TRUNCATE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2014;
                this.match(ClickHouseParser.KILL);
                this.state = 2015;
                this.match(ClickHouseParser.QUERY);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2016;
                this.match(ClickHouseParser.OPTIMIZE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2017;
                this.showPrivilege();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2018;
                this.introspectionPrivilege();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2019;
                this.sourcePrivilege();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2020;
                this.dictPrivilege();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2021;
                this.alterPrivilege();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2022;
                this.match(ClickHouseParser.ALL);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2023;
                this.match(ClickHouseParser.NONE);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2024;
                this.match(ClickHouseParser.OPTIMIZE);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2025;
                this.match(ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2026;
                this.accessManagementPrivilege();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2027;
                this.systemPrivilege();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2028;
                this.namedCollectionAdminPrivilege();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 2029;
                this.match(ClickHouseParser.TABLE);
                this.state = 2030;
                this.match(ClickHouseParser.ENGINE);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 2031;
                this.match(ClickHouseParser.ADMIN);
                this.state = 2032;
                this.match(ClickHouseParser.OPTION);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 2033;
                this.match(ClickHouseParser.USAGE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertStatement(): InsertStatementContext {
        let localContext = new InsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 200, ClickHouseParser.RULE_insertStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2036;
            this.match(ClickHouseParser.INSERT);
            this.state = 2037;
            this.match(ClickHouseParser.INTO);
            this.state = 2039;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
            case 1:
                {
                this.state = 2038;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 2044;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 257, this.context) ) {
            case 1:
                {
                this.state = 2041;
                this.tableIdentifier();
                }
                break;
            case 2:
                {
                this.state = 2042;
                this.match(ClickHouseParser.FUNCTION);
                this.state = 2043;
                this.tableFunctionExpression();
                }
                break;
            }
            this.state = 2047;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 258, this.context) ) {
            case 1:
                {
                this.state = 2046;
                this.columnsOrExceptClause();
                }
                break;
            }
            this.state = 2050;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 2049;
                this.settingsClause();
                }
            }

            this.state = 2052;
            this.dataClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsOrExceptClause(): ColumnsOrExceptClauseContext {
        let localContext = new ColumnsOrExceptClauseContext(this.context, this.state);
        this.enterRule(localContext, 202, ClickHouseParser.RULE_columnsOrExceptClause);
        let _la: number;
        try {
            this.state = 2062;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 261, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2054;
                this.columnsClause();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2055;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2056;
                this.match(ClickHouseParser.ASTERISK);
                this.state = 2059;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 268) {
                    {
                    this.state = 2057;
                    this.match(ClickHouseParser.EXCEPT);
                    this.state = 2058;
                    this.columnsClause();
                    }
                }

                this.state = 2061;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsClause(): ColumnsClauseContext {
        let localContext = new ColumnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 204, ClickHouseParser.RULE_columnsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2064;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2065;
            this.columnIdentifier();
            this.state = 2070;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 2066;
                this.match(ClickHouseParser.COMMA);
                this.state = 2067;
                this.columnIdentifier();
                }
                }
                this.state = 2072;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2073;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertFormatType(): InsertFormatTypeContext {
        let localContext = new InsertFormatTypeContext(this.context, this.state);
        this.enterRule(localContext, 206, ClickHouseParser.RULE_insertFormatType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2075;
            _la = this.tokenStream.LA(1);
            if(!(_la === 185 || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & 4294967169) !== 0) || ((((_la - 325)) & ~0x1F) === 0 && ((1 << (_la - 325)) & 4294967295) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataClause(): DataClauseContext {
        let localContext = new DataClauseContext(this.context, this.state);
        this.enterRule(localContext, 208, ClickHouseParser.RULE_dataClause);
        let _la: number;
        try {
            this.state = 2094;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
            case 1:
                localContext = new DataClauseFormatContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2077;
                this.match(ClickHouseParser.FORMAT);
                this.state = 2078;
                this.insertFormatType();
                this.state = 2080;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2079;
                    this.identifier();
                    }
                    }
                    this.state = 2082;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 255) !== 0));
                }
                break;
            case 2:
                localContext = new DataClauseValuesContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2085;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 66) {
                    {
                    this.state = 2084;
                    this.match(ClickHouseParser.FORMAT);
                    }
                }

                this.state = 2087;
                this.valuesStatement();
                }
                break;
            case 3:
                localContext = new DataClauseSelectContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2088;
                this.selectUnionStatement();
                this.state = 2090;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 392) {
                    {
                    this.state = 2089;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                }

                this.state = 2092;
                this.match(ClickHouseParser.EOF);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literalList(): LiteralListContext {
        let localContext = new LiteralListContext(this.context, this.state);
        this.enterRule(localContext, 210, ClickHouseParser.RULE_literalList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2096;
            this.literal();
            this.state = 2101;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 2097;
                this.match(ClickHouseParser.COMMA);
                this.state = 2098;
                this.literal();
                }
                }
                this.state = 2103;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueIdentifier(): ValueIdentifierContext {
        let localContext = new ValueIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 212, ClickHouseParser.RULE_valueIdentifier);
        let _la: number;
        try {
            this.state = 2118;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 269, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2104;
                this.literal();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2105;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2106;
                this.numberLiteral();
                this.state = 2107;
                this.match(ClickHouseParser.COMMA);
                this.state = 2108;
                this.numberLiteral();
                this.state = 2109;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2111;
                this.identifier();
                this.state = 2112;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2114;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 82 || _la === 113 || _la === 116 || ((((_la - 360)) & ~0x1F) === 0 && ((1 << (_la - 360)) & 33566751) !== 0)) {
                    {
                    this.state = 2113;
                    this.literalList();
                    }
                }

                this.state = 2116;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueOrArrayIdentifier(): ValueOrArrayIdentifierContext {
        let localContext = new ValueOrArrayIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 214, ClickHouseParser.RULE_valueOrArrayIdentifier);
        try {
            this.state = 2122;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULL_SQL:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.STRING_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.LPAREN:
            case ClickHouseParser.PLUS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2120;
                this.valueIdentifier();
                }
                break;
            case ClickHouseParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2121;
                this.arrayIdentifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arrayIdentifier(): ArrayIdentifierContext {
        let localContext = new ArrayIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 216, ClickHouseParser.RULE_arrayIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2124;
            this.match(ClickHouseParser.LBRACKET);
            this.state = 2133;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 674242559) !== 0) || _la === 385) {
                {
                this.state = 2125;
                this.valueOrArrayIdentifier();
                this.state = 2130;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 370) {
                    {
                    {
                    this.state = 2126;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2127;
                    this.valueOrArrayIdentifier();
                    }
                    }
                    this.state = 2132;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2135;
            this.match(ClickHouseParser.RBRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesClause(): ValuesClauseContext {
        let localContext = new ValuesClauseContext(this.context, this.state);
        this.enterRule(localContext, 218, ClickHouseParser.RULE_valuesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2137;
            this.match(ClickHouseParser.LPAREN);
            {
            this.state = 2138;
            this.valueOrArrayIdentifier();
            this.state = 2143;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 2139;
                this.match(ClickHouseParser.COMMA);
                this.state = 2140;
                this.valueOrArrayIdentifier();
                }
                }
                this.state = 2145;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 2146;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesStatement(): ValuesStatementContext {
        let localContext = new ValuesStatementContext(this.context, this.state);
        this.enterRule(localContext, 220, ClickHouseParser.RULE_valuesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2148;
            this.match(ClickHouseParser.VALUES);
            this.state = 2149;
            this.valuesClause();
            this.state = 2156;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370 || _la === 381) {
                {
                {
                this.state = 2151;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 370) {
                    {
                    this.state = 2150;
                    this.match(ClickHouseParser.COMMA);
                    }
                }

                this.state = 2153;
                this.valuesClause();
                }
                }
                this.state = 2158;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public killStatement(): KillStatementContext {
        let localContext = new KillStatementContext(this.context, this.state);
        this.enterRule(localContext, 222, ClickHouseParser.RULE_killStatement);
        let _la: number;
        try {
            localContext = new KillMutationStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2159;
            this.match(ClickHouseParser.KILL);
            this.state = 2160;
            this.match(ClickHouseParser.MUTATION);
            this.state = 2162;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 2161;
                this.clusterClause();
                }
            }

            this.state = 2164;
            this.whereClause();
            this.state = 2166;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 14 || _la === 159 || _la === 165) {
                {
                this.state = 2165;
                _la = this.tokenStream.LA(1);
                if(!(_la === 14 || _la === 159 || _la === 165)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optimizeStatement(): OptimizeStatementContext {
        let localContext = new OptimizeStatementContext(this.context, this.state);
        this.enterRule(localContext, 224, ClickHouseParser.RULE_optimizeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2168;
            this.match(ClickHouseParser.OPTIMIZE);
            this.state = 2169;
            this.match(ClickHouseParser.TABLE);
            this.state = 2170;
            this.tableIdentifier();
            this.state = 2172;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 2171;
                this.clusterClause();
                }
            }

            this.state = 2175;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 126) {
                {
                this.state = 2174;
                this.partitionClause();
                }
            }

            this.state = 2178;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 61) {
                {
                this.state = 2177;
                this.match(ClickHouseParser.FINAL);
                }
            }

            this.state = 2181;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 37) {
                {
                this.state = 2180;
                this.match(ClickHouseParser.DEDUPLICATE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameStatement(): RenameStatementContext {
        let localContext = new RenameStatementContext(this.context, this.state);
        this.enterRule(localContext, 226, ClickHouseParser.RULE_renameStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2183;
            this.match(ClickHouseParser.RENAME);
            this.state = 2184;
            this.match(ClickHouseParser.TABLE);
            this.state = 2185;
            this.tableIdentifier();
            this.state = 2186;
            this.match(ClickHouseParser.TO);
            this.state = 2187;
            this.tableIdentifier();
            this.state = 2195;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 2188;
                this.match(ClickHouseParser.COMMA);
                this.state = 2189;
                this.tableIdentifier();
                this.state = 2190;
                this.match(ClickHouseParser.TO);
                this.state = 2191;
                this.tableIdentifier();
                }
                }
                this.state = 2197;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2199;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 2198;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public projectionSelectStatement(): ProjectionSelectStatementContext {
        let localContext = new ProjectionSelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 228, ClickHouseParser.RULE_projectionSelectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2201;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2203;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 2202;
                this.withClause();
                }
            }

            this.state = 2205;
            this.match(ClickHouseParser.SELECT);
            this.state = 2206;
            this.columnExpressionList();
            this.state = 2208;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 73) {
                {
                this.state = 2207;
                this.groupByClause();
                }
            }

            this.state = 2211;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 2210;
                this.projectionOrderByClause();
                }
            }

            this.state = 2213;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        let localContext = new SelectUnionStatementContext(this.context, this.state);
        this.enterRule(localContext, 230, ClickHouseParser.RULE_selectUnionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2215;
            this.selectStatementWithParentheses();
            this.state = 2221;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 180) {
                {
                {
                this.state = 2216;
                this.match(ClickHouseParser.UNION);
                this.state = 2217;
                this.match(ClickHouseParser.ALL);
                this.state = 2218;
                this.selectStatementWithParentheses();
                }
                }
                this.state = 2223;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatementWithParentheses(): SelectStatementWithParenthesesContext {
        let localContext = new SelectStatementWithParenthesesContext(this.context, this.state);
        this.enterRule(localContext, 232, ClickHouseParser.RULE_selectStatementWithParentheses);
        try {
            this.state = 2229;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.SELECT:
            case ClickHouseParser.WITH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2224;
                this.selectStatement();
                }
                break;
            case ClickHouseParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2225;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2226;
                this.selectUnionStatement();
                this.state = 2227;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatement(): SelectStatementContext {
        let localContext = new SelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 234, ClickHouseParser.RULE_selectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2232;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 2231;
                this.withClause();
                }
            }

            this.state = 2234;
            this.match(ClickHouseParser.SELECT);
            this.state = 2236;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 290, this.context) ) {
            case 1:
                {
                this.state = 2235;
                this.match(ClickHouseParser.DISTINCT);
                }
                break;
            }
            this.state = 2239;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 291, this.context) ) {
            case 1:
                {
                this.state = 2238;
                this.topClause();
                }
                break;
            }
            this.state = 2241;
            this.columnExpressionList();
            this.state = 2243;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 68) {
                {
                this.state = 2242;
                this.fromClause();
                }
            }

            this.state = 2246;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 9 || _la === 84 || _la === 96) {
                {
                this.state = 2245;
                this.arrayJoinClause();
                }
            }

            this.state = 2249;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 192) {
                {
                this.state = 2248;
                this.windowClause();
                }
            }

            this.state = 2252;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 131) {
                {
                this.state = 2251;
                this.prewhereClause();
                }
            }

            this.state = 2255;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 191) {
                {
                this.state = 2254;
                this.whereClause();
                }
            }

            this.state = 2258;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 73) {
                {
                this.state = 2257;
                this.groupByClause();
                }
            }

            this.state = 2262;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 298, this.context) ) {
            case 1:
                {
                this.state = 2260;
                this.match(ClickHouseParser.WITH);
                this.state = 2261;
                _la = this.tokenStream.LA(1);
                if(!(_la === 31 || _la === 144)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 2266;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 2264;
                this.match(ClickHouseParser.WITH);
                this.state = 2265;
                this.match(ClickHouseParser.TOTALS);
                }
            }

            this.state = 2269;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 2268;
                this.havingClause();
                }
            }

            this.state = 2272;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 2271;
                this.orderByClause();
                }
            }

            this.state = 2275;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 302, this.context) ) {
            case 1:
                {
                this.state = 2274;
                this.limitByClause();
                }
                break;
            }
            this.state = 2278;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99) {
                {
                this.state = 2277;
                this.limitClause();
                }
            }

            this.state = 2281;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 153) {
                {
                this.state = 2280;
                this.settingsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withClause(): WithClauseContext {
        let localContext = new WithClauseContext(this.context, this.state);
        this.enterRule(localContext, 236, ClickHouseParser.RULE_withClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2283;
            this.match(ClickHouseParser.WITH);
            this.state = 2284;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topClause(): TopClauseContext {
        let localContext = new TopClauseContext(this.context, this.state);
        this.enterRule(localContext, 238, ClickHouseParser.RULE_topClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2286;
            this.match(ClickHouseParser.TOP);
            this.state = 2287;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            this.state = 2290;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 305, this.context) ) {
            case 1:
                {
                this.state = 2288;
                this.match(ClickHouseParser.WITH);
                this.state = 2289;
                this.match(ClickHouseParser.TIES);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 240, ClickHouseParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2292;
            this.match(ClickHouseParser.FROM);
            this.state = 2293;
            this.joinExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arrayJoinClause(): ArrayJoinClauseContext {
        let localContext = new ArrayJoinClauseContext(this.context, this.state);
        this.enterRule(localContext, 242, ClickHouseParser.RULE_arrayJoinClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2296;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 84 || _la === 96) {
                {
                this.state = 2295;
                _la = this.tokenStream.LA(1);
                if(!(_la === 84 || _la === 96)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 2298;
            this.match(ClickHouseParser.ARRAY);
            this.state = 2299;
            this.match(ClickHouseParser.JOIN);
            this.state = 2300;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 244, ClickHouseParser.RULE_windowClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2302;
            this.match(ClickHouseParser.WINDOW);
            this.state = 2303;
            this.identifier();
            this.state = 2304;
            this.match(ClickHouseParser.AS);
            this.state = 2305;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2306;
            this.windowExpression();
            this.state = 2307;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prewhereClause(): PrewhereClauseContext {
        let localContext = new PrewhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 246, ClickHouseParser.RULE_prewhereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2309;
            this.match(ClickHouseParser.PREWHERE);
            this.state = 2310;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 248, ClickHouseParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2312;
            this.match(ClickHouseParser.WHERE);
            this.state = 2313;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 250, ClickHouseParser.RULE_groupByClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2315;
            this.match(ClickHouseParser.GROUP);
            this.state = 2316;
            this.match(ClickHouseParser.BY);
            this.state = 2323;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 307, this.context) ) {
            case 1:
                {
                this.state = 2317;
                _la = this.tokenStream.LA(1);
                if(!(_la === 31 || _la === 144)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2318;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2319;
                this.columnExpressionList();
                this.state = 2320;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 2:
                {
                this.state = 2322;
                this.columnExpressionList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 252, ClickHouseParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2325;
            this.match(ClickHouseParser.HAVING);
            this.state = 2326;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByClause(): OrderByClauseContext {
        let localContext = new OrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 254, ClickHouseParser.RULE_orderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2328;
            this.match(ClickHouseParser.ORDER);
            this.state = 2329;
            this.match(ClickHouseParser.BY);
            this.state = 2330;
            this.orderExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public projectionOrderByClause(): ProjectionOrderByClauseContext {
        let localContext = new ProjectionOrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 256, ClickHouseParser.RULE_projectionOrderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2332;
            this.match(ClickHouseParser.ORDER);
            this.state = 2333;
            this.match(ClickHouseParser.BY);
            this.state = 2334;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitByClause(): LimitByClauseContext {
        let localContext = new LimitByClauseContext(this.context, this.state);
        this.enterRule(localContext, 258, ClickHouseParser.RULE_limitByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2336;
            this.match(ClickHouseParser.LIMIT);
            this.state = 2337;
            this.limitExpression();
            this.state = 2338;
            this.match(ClickHouseParser.BY);
            this.state = 2339;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 260, ClickHouseParser.RULE_limitClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2341;
            this.match(ClickHouseParser.LIMIT);
            this.state = 2342;
            this.limitExpression();
            this.state = 2345;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 2343;
                this.match(ClickHouseParser.WITH);
                this.state = 2344;
                this.match(ClickHouseParser.TIES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingsClause(): SettingsClauseContext {
        let localContext = new SettingsClauseContext(this.context, this.state);
        this.enterRule(localContext, 262, ClickHouseParser.RULE_settingsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2347;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 2348;
            this.settingExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public joinExpression(): JoinExpressionContext;
    public joinExpression(_p: number): JoinExpressionContext;
    public joinExpression(_p?: number): JoinExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new JoinExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 264;
        this.enterRecursionRule(localContext, 264, ClickHouseParser.RULE_joinExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2362;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 311, this.context) ) {
            case 1:
                {
                localContext = new JoinExpressionTableContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2351;
                this.tableExpression(0);
                this.state = 2353;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 309, this.context) ) {
                case 1:
                    {
                    this.state = 2352;
                    this.match(ClickHouseParser.FINAL);
                    }
                    break;
                }
                this.state = 2356;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 310, this.context) ) {
                case 1:
                    {
                    this.state = 2355;
                    this.sampleClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                localContext = new JoinExpressionParensContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2358;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2359;
                this.joinExpression(0);
                this.state = 2360;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2381;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 315, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2379;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
                    case 1:
                        {
                        localContext = new JoinExpressionCrossOpContext(new JoinExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_joinExpression);
                        this.state = 2364;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 2365;
                        this.joinOperatorCross();
                        this.state = 2366;
                        this.joinExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new JoinExpressionOpContext(new JoinExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_joinExpression);
                        this.state = 2368;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 2370;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 71 || _la === 101) {
                            {
                            this.state = 2369;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 71 || _la === 101)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                        }

                        this.state = 2373;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || ((((_la - 69)) & ~0x1F) === 0 && ((1 << (_la - 69)) & 134250497) !== 0) || _la === 143 || _la === 150) {
                            {
                            this.state = 2372;
                            this.joinOperator();
                            }
                        }

                        this.state = 2375;
                        this.match(ClickHouseParser.JOIN);
                        this.state = 2376;
                        this.joinExpression(0);
                        this.state = 2377;
                        this.joinConstraintClause();
                        }
                        break;
                    }
                    }
                }
                this.state = 2383;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 315, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public joinOperator(): JoinOperatorContext {
        let localContext = new JoinOperatorContext(this.context, this.state);
        this.enterRule(localContext, 266, ClickHouseParser.RULE_joinOperator);
        let _la: number;
        try {
            this.state = 2427;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
            case 1:
                localContext = new JoinOpInnerContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2393;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
                case 1:
                    {
                    this.state = 2385;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0)) {
                        {
                        this.state = 2384;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 2387;
                    this.match(ClickHouseParser.INNER);
                    }
                    break;
                case 2:
                    {
                    this.state = 2388;
                    this.match(ClickHouseParser.INNER);
                    this.state = 2390;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0)) {
                        {
                        this.state = 2389;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.state = 2392;
                    _la = this.tokenStream.LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4368) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new JoinOpLeftRightContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2409;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 323, this.context) ) {
                case 1:
                    {
                    this.state = 2396;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150) {
                        {
                        this.state = 2395;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 2398;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 96 || _la === 143)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2400;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 2399;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 2402;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 96 || _la === 143)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2404;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 2403;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    this.state = 2407;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150) {
                        {
                        this.state = 2406;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4496) !== 0) || _la === 150)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new JoinOpFullContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2425;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 328, this.context) ) {
                case 1:
                    {
                    this.state = 2412;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 4 || _la === 8) {
                        {
                        this.state = 2411;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 4 || _la === 8)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 2414;
                    this.match(ClickHouseParser.FULL);
                    this.state = 2416;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 2415;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 2418;
                    this.match(ClickHouseParser.FULL);
                    this.state = 2420;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 123) {
                        {
                        this.state = 2419;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    this.state = 2423;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 4 || _la === 8) {
                        {
                        this.state = 2422;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 4 || _la === 8)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinOperatorCross(): JoinOperatorCrossContext {
        let localContext = new JoinOperatorCrossContext(this.context, this.state);
        this.enterRule(localContext, 268, ClickHouseParser.RULE_joinOperatorCross);
        let _la: number;
        try {
            this.state = 2435;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.CROSS:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2430;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 71 || _la === 101) {
                    {
                    this.state = 2429;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 71 || _la === 101)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2432;
                this.match(ClickHouseParser.CROSS);
                this.state = 2433;
                this.match(ClickHouseParser.JOIN);
                }
                break;
            case ClickHouseParser.COMMA:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2434;
                this.match(ClickHouseParser.COMMA);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinConstraintClause(): JoinConstraintClauseContext {
        let localContext = new JoinConstraintClauseContext(this.context, this.state);
        this.enterRule(localContext, 270, ClickHouseParser.RULE_joinConstraintClause);
        try {
            this.state = 2446;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 332, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2437;
                this.match(ClickHouseParser.ON);
                this.state = 2438;
                this.columnExpressionList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2439;
                this.match(ClickHouseParser.USING);
                this.state = 2440;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2441;
                this.columnExpressionList();
                this.state = 2442;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2444;
                this.match(ClickHouseParser.USING);
                this.state = 2445;
                this.columnExpressionList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleClause(): SampleClauseContext {
        let localContext = new SampleClauseContext(this.context, this.state);
        this.enterRule(localContext, 272, ClickHouseParser.RULE_sampleClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2448;
            this.match(ClickHouseParser.SAMPLE);
            this.state = 2449;
            this.ratioExpression();
            this.state = 2452;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 333, this.context) ) {
            case 1:
                {
                this.state = 2450;
                this.match(ClickHouseParser.OFFSET);
                this.state = 2451;
                this.ratioExpression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitExpression(): LimitExpressionContext {
        let localContext = new LimitExpressionContext(this.context, this.state);
        this.enterRule(localContext, 274, ClickHouseParser.RULE_limitExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2454;
            this.columnExpression(0);
            this.state = 2457;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 118 || _la === 370) {
                {
                this.state = 2455;
                _la = this.tokenStream.LA(1);
                if(!(_la === 118 || _la === 370)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2456;
                this.columnExpression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderExpressionList(): OrderExpressionListContext {
        let localContext = new OrderExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 276, ClickHouseParser.RULE_orderExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2459;
            this.orderExpression();
            this.state = 2464;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 335, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2460;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2461;
                    this.orderExpression();
                    }
                    }
                }
                this.state = 2466;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 335, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderExpression(): OrderExpressionContext {
        let localContext = new OrderExpressionContext(this.context, this.state);
        this.enterRule(localContext, 278, ClickHouseParser.RULE_orderExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2467;
            this.columnExpression(0);
            this.state = 2469;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 336, this.context) ) {
            case 1:
                {
                this.state = 2468;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 11)) & ~0x1F) === 0 && ((1 << (_la - 11)) & 3221225473) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 2473;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 337, this.context) ) {
            case 1:
                {
                this.state = 2471;
                this.match(ClickHouseParser.NULLS);
                this.state = 2472;
                _la = this.tokenStream.LA(1);
                if(!(_la === 62 || _la === 93)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 2477;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 338, this.context) ) {
            case 1:
                {
                this.state = 2475;
                this.match(ClickHouseParser.COLLATE);
                this.state = 2476;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ratioExpression(): RatioExpressionContext {
        let localContext = new RatioExpressionContext(this.context, this.state);
        this.enterRule(localContext, 280, ClickHouseParser.RULE_ratioExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2479;
            this.numberLiteral();
            this.state = 2482;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 339, this.context) ) {
            case 1:
                {
                this.state = 2480;
                this.match(ClickHouseParser.SLASH);
                this.state = 2481;
                this.numberLiteral();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingExpressionList(): SettingExpressionListContext {
        let localContext = new SettingExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 282, ClickHouseParser.RULE_settingExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2484;
            this.settingExpression();
            this.state = 2489;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 340, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2485;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2486;
                    this.settingExpression();
                    }
                    }
                }
                this.state = 2491;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 340, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingExpression(): SettingExpressionContext {
        let localContext = new SettingExpressionContext(this.context, this.state);
        this.enterRule(localContext, 284, ClickHouseParser.RULE_settingExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2492;
            this.identifier();
            this.state = 2493;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 2494;
            this.literal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowExpression(): WindowExpressionContext {
        let localContext = new WindowExpressionContext(this.context, this.state);
        this.enterRule(localContext, 286, ClickHouseParser.RULE_windowExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2497;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 126) {
                {
                this.state = 2496;
                this.windowPartitionByClause();
                }
            }

            this.state = 2500;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 2499;
                this.windowOrderByClause();
                }
            }

            this.state = 2503;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 136 || _la === 146) {
                {
                this.state = 2502;
                this.windowFrameClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowPartitionByClause(): WindowPartitionByClauseContext {
        let localContext = new WindowPartitionByClauseContext(this.context, this.state);
        this.enterRule(localContext, 288, ClickHouseParser.RULE_windowPartitionByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2505;
            this.match(ClickHouseParser.PARTITION);
            this.state = 2506;
            this.match(ClickHouseParser.BY);
            this.state = 2507;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowOrderByClause(): WindowOrderByClauseContext {
        let localContext = new WindowOrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 290, ClickHouseParser.RULE_windowOrderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2509;
            this.match(ClickHouseParser.ORDER);
            this.state = 2510;
            this.match(ClickHouseParser.BY);
            this.state = 2511;
            this.orderExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameClause(): WindowFrameClauseContext {
        let localContext = new WindowFrameClauseContext(this.context, this.state);
        this.enterRule(localContext, 292, ClickHouseParser.RULE_windowFrameClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2513;
            _la = this.tokenStream.LA(1);
            if(!(_la === 136 || _la === 146)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2514;
            this.windowFrameExtend();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameExtend(): WindowFrameExtendContext {
        let localContext = new WindowFrameExtendContext(this.context, this.state);
        this.enterRule(localContext, 294, ClickHouseParser.RULE_windowFrameExtend);
        try {
            this.state = 2522;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.INF:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.PLUS:
                localContext = new FrameStartContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2516;
                this.windowFrameBound();
                }
                break;
            case ClickHouseParser.BETWEEN:
                localContext = new FrameBetweenContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2517;
                this.match(ClickHouseParser.BETWEEN);
                this.state = 2518;
                this.windowFrameBound();
                this.state = 2519;
                this.match(ClickHouseParser.AND);
                this.state = 2520;
                this.windowFrameBound();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameBound(): WindowFrameBoundContext {
        let localContext = new WindowFrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 296, ClickHouseParser.RULE_windowFrameBound);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2536;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 345, this.context) ) {
            case 1:
                {
                this.state = 2524;
                this.match(ClickHouseParser.CURRENT);
                this.state = 2525;
                this.match(ClickHouseParser.ROW);
                }
                break;
            case 2:
                {
                this.state = 2526;
                this.match(ClickHouseParser.UNBOUNDED);
                this.state = 2527;
                this.match(ClickHouseParser.PRECEDING);
                }
                break;
            case 3:
                {
                this.state = 2528;
                this.match(ClickHouseParser.UNBOUNDED);
                this.state = 2529;
                this.match(ClickHouseParser.FOLLOWING);
                }
                break;
            case 4:
                {
                this.state = 2530;
                this.numberLiteral();
                this.state = 2531;
                this.match(ClickHouseParser.PRECEDING);
                }
                break;
            case 5:
                {
                this.state = 2533;
                this.numberLiteral();
                this.state = 2534;
                this.match(ClickHouseParser.FOLLOWING);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setStatement(): SetStatementContext {
        let localContext = new SetStatementContext(this.context, this.state);
        this.enterRule(localContext, 298, ClickHouseParser.RULE_setStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2538;
            this.match(ClickHouseParser.SET);
            this.state = 2539;
            this.settingExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStatement(): ShowStatementContext {
        let localContext = new ShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 300, ClickHouseParser.RULE_showStatement);
        let _la: number;
        try {
            this.state = 2583;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 353, this.context) ) {
            case 1:
                localContext = new ShowCreateDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2541;
                this.match(ClickHouseParser.SHOW);
                this.state = 2542;
                this.match(ClickHouseParser.CREATE);
                this.state = 2543;
                this.match(ClickHouseParser.DATABASE);
                this.state = 2544;
                this.databaseIdentifier();
                }
                break;
            case 2:
                localContext = new ShowCreateDictionaryStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2545;
                this.match(ClickHouseParser.SHOW);
                this.state = 2546;
                this.match(ClickHouseParser.CREATE);
                this.state = 2547;
                this.match(ClickHouseParser.DICTIONARY);
                this.state = 2548;
                this.tableIdentifier();
                }
                break;
            case 3:
                localContext = new ShowCreateTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2549;
                this.match(ClickHouseParser.SHOW);
                this.state = 2550;
                this.match(ClickHouseParser.CREATE);
                this.state = 2552;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 346, this.context) ) {
                case 1:
                    {
                    this.state = 2551;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                }
                this.state = 2555;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 347, this.context) ) {
                case 1:
                    {
                    this.state = 2554;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                }
                this.state = 2557;
                this.tableIdentifier();
                }
                break;
            case 4:
                localContext = new ShowDatabasesStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2558;
                this.match(ClickHouseParser.SHOW);
                this.state = 2559;
                this.match(ClickHouseParser.DATABASES);
                }
                break;
            case 5:
                localContext = new ShowDictionariesStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2560;
                this.match(ClickHouseParser.SHOW);
                this.state = 2561;
                this.match(ClickHouseParser.DICTIONARIES);
                this.state = 2564;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68) {
                    {
                    this.state = 2562;
                    this.match(ClickHouseParser.FROM);
                    this.state = 2563;
                    this.databaseIdentifier();
                    }
                }

                }
                break;
            case 6:
                localContext = new ShowTablesStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2566;
                this.match(ClickHouseParser.SHOW);
                this.state = 2568;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 164) {
                    {
                    this.state = 2567;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                }

                this.state = 2570;
                this.match(ClickHouseParser.TABLES);
                this.state = 2573;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 68 || _la === 80) {
                    {
                    this.state = 2571;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 68 || _la === 80)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 2572;
                    this.databaseIdentifier();
                    }
                }

                this.state = 2578;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.LIKE:
                    {
                    this.state = 2575;
                    this.match(ClickHouseParser.LIKE);
                    this.state = 2576;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case ClickHouseParser.WHERE:
                    {
                    this.state = 2577;
                    this.whereClause();
                    }
                    break;
                case ClickHouseParser.EOF:
                case ClickHouseParser.FORMAT:
                case ClickHouseParser.INTO:
                case ClickHouseParser.LIMIT:
                case ClickHouseParser.RPAREN:
                case ClickHouseParser.SEMICOLON:
                    break;
                default:
                    break;
                }
                this.state = 2581;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 99) {
                    {
                    this.state = 2580;
                    this.limitClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public systemStatement(): SystemStatementContext {
        let localContext = new SystemStatementContext(this.context, this.state);
        this.enterRule(localContext, 302, ClickHouseParser.RULE_systemStatement);
        let _la: number;
        try {
            this.state = 2619;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 356, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2585;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2586;
                this.match(ClickHouseParser.FLUSH);
                this.state = 2587;
                this.match(ClickHouseParser.DISTRIBUTED);
                this.state = 2588;
                this.tableIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2589;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2590;
                this.match(ClickHouseParser.FLUSH);
                this.state = 2591;
                this.match(ClickHouseParser.LOGS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2592;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2593;
                this.match(ClickHouseParser.RELOAD);
                this.state = 2594;
                this.match(ClickHouseParser.DICTIONARIES);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2595;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2596;
                this.match(ClickHouseParser.RELOAD);
                this.state = 2597;
                this.match(ClickHouseParser.DICTIONARY);
                this.state = 2598;
                this.tableIdentifier();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2599;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2600;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2608;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.DISTRIBUTED:
                    {
                    this.state = 2601;
                    this.match(ClickHouseParser.DISTRIBUTED);
                    this.state = 2602;
                    this.match(ClickHouseParser.SENDS);
                    }
                    break;
                case ClickHouseParser.FETCHES:
                    {
                    this.state = 2603;
                    this.match(ClickHouseParser.FETCHES);
                    }
                    break;
                case ClickHouseParser.MERGES:
                case ClickHouseParser.TTL:
                    {
                    this.state = 2605;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 177) {
                        {
                        this.state = 2604;
                        this.match(ClickHouseParser.TTL);
                        }
                    }

                    this.state = 2607;
                    this.match(ClickHouseParser.MERGES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2610;
                this.tableIdentifier();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2611;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2612;
                _la = this.tokenStream.LA(1);
                if(!(_la === 156 || _la === 157)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2613;
                this.match(ClickHouseParser.REPLICATED);
                this.state = 2614;
                this.match(ClickHouseParser.SENDS);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2615;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2616;
                this.match(ClickHouseParser.SYNC);
                this.state = 2617;
                this.match(ClickHouseParser.REPLICA);
                this.state = 2618;
                this.tableIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateStatement(): TruncateStatementContext {
        let localContext = new TruncateStatementContext(this.context, this.state);
        this.enterRule(localContext, 304, ClickHouseParser.RULE_truncateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2621;
            this.match(ClickHouseParser.TRUNCATE);
            this.state = 2623;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 357, this.context) ) {
            case 1:
                {
                this.state = 2622;
                this.match(ClickHouseParser.TEMPORARY);
                }
                break;
            }
            this.state = 2626;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 358, this.context) ) {
            case 1:
                {
                this.state = 2625;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 2630;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 359, this.context) ) {
            case 1:
                {
                this.state = 2628;
                this.match(ClickHouseParser.IF);
                this.state = 2629;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 2632;
            this.tableIdentifier();
            this.state = 2634;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119) {
                {
                this.state = 2633;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public useStatement(): UseStatementContext {
        let localContext = new UseStatementContext(this.context, this.state);
        this.enterRule(localContext, 306, ClickHouseParser.RULE_useStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2636;
            this.match(ClickHouseParser.USE);
            this.state = 2637;
            this.databaseIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public watchStatement(): WatchStatementContext {
        let localContext = new WatchStatementContext(this.context, this.state);
        this.enterRule(localContext, 308, ClickHouseParser.RULE_watchStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2639;
            this.match(ClickHouseParser.WATCH);
            this.state = 2640;
            this.tableIdentifier();
            this.state = 2642;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 55) {
                {
                this.state = 2641;
                this.match(ClickHouseParser.EVENTS);
                }
            }

            this.state = 2646;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 99) {
                {
                this.state = 2644;
                this.match(ClickHouseParser.LIMIT);
                this.state = 2645;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        let localContext = new ColumnTypeExpressionContext(this.context, this.state);
        this.enterRule(localContext, 310, ClickHouseParser.RULE_columnTypeExpression);
        let _la: number;
        try {
            this.state = 2695;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 367, this.context) ) {
            case 1:
                localContext = new ColumnTypeExpressionSimpleContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2648;
                this.identifier();
                }
                break;
            case 2:
                localContext = new ColumnTypeExpressionNestedContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2649;
                this.identifier();
                this.state = 2650;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2651;
                this.identifier();
                this.state = 2652;
                this.columnTypeExpression();
                this.state = 2659;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 370) {
                    {
                    {
                    this.state = 2653;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2654;
                    this.identifier();
                    this.state = 2655;
                    this.columnTypeExpression();
                    }
                    }
                    this.state = 2661;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2662;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                localContext = new ColumnTypeExpressionEnumContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2664;
                this.identifier();
                this.state = 2665;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2666;
                this.enumValue();
                this.state = 2671;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 370) {
                    {
                    {
                    this.state = 2667;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2668;
                    this.enumValue();
                    }
                    }
                    this.state = 2673;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2674;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 4:
                localContext = new ColumnTypeExpressionComplexContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2676;
                this.identifier();
                this.state = 2677;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2678;
                this.columnTypeExpression();
                this.state = 2683;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 370) {
                    {
                    {
                    this.state = 2679;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2680;
                    this.columnTypeExpression();
                    }
                    }
                    this.state = 2685;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2686;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 5:
                localContext = new ColumnTypeExpressionParamContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2688;
                this.identifier();
                this.state = 2689;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2691;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 674258943) !== 0) || _la === 385) {
                    {
                    this.state = 2690;
                    this.columnExpressionList();
                    }
                }

                this.state = 2693;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        let localContext = new ColumnExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 312, ClickHouseParser.RULE_columnExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2697;
            this.columnsExpression();
            this.state = 2702;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 368, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2698;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2699;
                    this.columnsExpression();
                    }
                    }
                }
                this.state = 2704;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 368, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsExpression(): ColumnsExpressionContext {
        let localContext = new ColumnsExpressionContext(this.context, this.state);
        this.enterRule(localContext, 314, ClickHouseParser.RULE_columnsExpression);
        let _la: number;
        try {
            this.state = 2716;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 370, this.context) ) {
            case 1:
                localContext = new ColumnsExpressionAsteriskContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2708;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 255) !== 0)) {
                    {
                    this.state = 2705;
                    this.tableIdentifier();
                    this.state = 2706;
                    this.match(ClickHouseParser.DOT);
                    }
                }

                this.state = 2710;
                this.match(ClickHouseParser.ASTERISK);
                }
                break;
            case 2:
                localContext = new ColumnsExpressionSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2711;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2712;
                this.selectUnionStatement();
                this.state = 2713;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                localContext = new ColumnsExpressionColumnContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2715;
                this.columnExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public columnExpression(): ColumnExpressionContext;
    public columnExpression(_p: number): ColumnExpressionContext;
    public columnExpression(_p?: number): ColumnExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ColumnExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 316;
        this.enterRecursionRule(localContext, 316, ClickHouseParser.RULE_columnExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2847;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 383, this.context) ) {
            case 1:
                {
                localContext = new ColumnExpressionCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2719;
                this.match(ClickHouseParser.CASE);
                this.state = 2721;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 371, this.context) ) {
                case 1:
                    {
                    this.state = 2720;
                    this.columnExpression(0);
                    }
                    break;
                }
                this.state = 2728;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2723;
                    this.match(ClickHouseParser.WHEN);
                    this.state = 2724;
                    this.columnExpression(0);
                    this.state = 2725;
                    this.match(ClickHouseParser.THEN);
                    this.state = 2726;
                    this.columnExpression(0);
                    }
                    }
                    this.state = 2730;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 190);
                this.state = 2734;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 51) {
                    {
                    this.state = 2732;
                    this.match(ClickHouseParser.ELSE);
                    this.state = 2733;
                    this.columnExpression(0);
                    }
                }

                this.state = 2736;
                this.match(ClickHouseParser.END);
                }
                break;
            case 2:
                {
                localContext = new ColumnExpressionCastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2738;
                this.match(ClickHouseParser.CAST);
                this.state = 2739;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2740;
                this.columnExpression(0);
                this.state = 2741;
                this.match(ClickHouseParser.AS);
                this.state = 2742;
                this.columnTypeExpression();
                this.state = 2743;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                {
                localContext = new ColumnExpressionDateContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2745;
                this.match(ClickHouseParser.DATE);
                this.state = 2746;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 4:
                {
                localContext = new ColumnExpressionExtractContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2747;
                this.match(ClickHouseParser.EXTRACT);
                this.state = 2748;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2749;
                this.interval();
                this.state = 2750;
                this.match(ClickHouseParser.FROM);
                this.state = 2751;
                this.columnExpression(0);
                this.state = 2752;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 5:
                {
                localContext = new ColumnExpressionIntervalContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2754;
                this.match(ClickHouseParser.INTERVAL);
                this.state = 2755;
                this.columnExpression(0);
                this.state = 2756;
                this.interval();
                }
                break;
            case 6:
                {
                localContext = new ColumnExpressionSubstringContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2758;
                this.match(ClickHouseParser.SUBSTRING);
                this.state = 2759;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2760;
                this.columnExpression(0);
                this.state = 2761;
                this.match(ClickHouseParser.FROM);
                this.state = 2762;
                this.columnExpression(0);
                this.state = 2765;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 65) {
                    {
                    this.state = 2763;
                    this.match(ClickHouseParser.FOR);
                    this.state = 2764;
                    this.columnExpression(0);
                    }
                }

                this.state = 2767;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 7:
                {
                localContext = new ColumnExpressionTimestampContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2769;
                this.match(ClickHouseParser.TIMESTAMP);
                this.state = 2770;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 8:
                {
                localContext = new ColumnExpressionTrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2771;
                this.match(ClickHouseParser.TRIM);
                this.state = 2772;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2773;
                _la = this.tokenStream.LA(1);
                if(!(_la === 17 || _la === 95 || _la === 173)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2774;
                this.match(ClickHouseParser.STRING_LITERAL);
                this.state = 2775;
                this.match(ClickHouseParser.FROM);
                this.state = 2776;
                this.columnExpression(0);
                this.state = 2777;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 9:
                {
                localContext = new ColumnExpressionWinFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2779;
                this.identifier();
                {
                this.state = 2780;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2782;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 674258943) !== 0) || _la === 385) {
                    {
                    this.state = 2781;
                    this.columnExpressionList();
                    }
                }

                this.state = 2784;
                this.match(ClickHouseParser.RPAREN);
                }
                this.state = 2786;
                this.match(ClickHouseParser.OVER);
                this.state = 2787;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2788;
                this.windowExpression();
                this.state = 2789;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 10:
                {
                localContext = new ColumnExpressionWinFunctionTargetContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2791;
                this.identifier();
                {
                this.state = 2792;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2794;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 674258943) !== 0) || _la === 385) {
                    {
                    this.state = 2793;
                    this.columnExpressionList();
                    }
                }

                this.state = 2796;
                this.match(ClickHouseParser.RPAREN);
                }
                this.state = 2798;
                this.match(ClickHouseParser.OVER);
                this.state = 2799;
                this.identifier();
                }
                break;
            case 11:
                {
                localContext = new ColumnExpressionFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2801;
                this.identifier();
                this.state = 2807;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
                case 1:
                    {
                    this.state = 2802;
                    this.match(ClickHouseParser.LPAREN);
                    this.state = 2804;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 674258943) !== 0) || _la === 385) {
                        {
                        this.state = 2803;
                        this.columnExpressionList();
                        }
                    }

                    this.state = 2806;
                    this.match(ClickHouseParser.RPAREN);
                    }
                    break;
                }
                this.state = 2809;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2811;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 379, this.context) ) {
                case 1:
                    {
                    this.state = 2810;
                    this.match(ClickHouseParser.DISTINCT);
                    }
                    break;
                }
                this.state = 2814;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 674258943) !== 0) || _la === 385) {
                    {
                    this.state = 2813;
                    this.columnArgumentList();
                    }
                }

                this.state = 2816;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 12:
                {
                localContext = new ColumnExpressionLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2818;
                this.literal();
                }
                break;
            case 13:
                {
                localContext = new ColumnExpressionNegateContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2819;
                this.match(ClickHouseParser.DASH);
                this.state = 2820;
                this.columnExpression(17);
                }
                break;
            case 14:
                {
                localContext = new ColumnExpressionNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2821;
                this.match(ClickHouseParser.NOT);
                this.state = 2822;
                this.columnExpression(12);
                }
                break;
            case 15:
                {
                localContext = new ColumnExpressionAsteriskContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2826;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 255) !== 0)) {
                    {
                    this.state = 2823;
                    this.tableIdentifier();
                    this.state = 2824;
                    this.match(ClickHouseParser.DOT);
                    }
                }

                this.state = 2828;
                this.match(ClickHouseParser.ASTERISK);
                }
                break;
            case 16:
                {
                localContext = new ColumnExpressionSubqueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2829;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2830;
                this.selectUnionStatement();
                this.state = 2831;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 17:
                {
                localContext = new ColumnExpressionParensContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2833;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2834;
                this.columnExpression(0);
                this.state = 2835;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 18:
                {
                localContext = new ColumnExpressionTupleContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2837;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2838;
                this.columnExpressionList();
                this.state = 2839;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 19:
                {
                localContext = new ColumnExpressionArrayContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2841;
                this.match(ClickHouseParser.LBRACKET);
                this.state = 2843;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 674258943) !== 0) || _la === 385) {
                    {
                    this.state = 2842;
                    this.columnExpressionList();
                    }
                }

                this.state = 2845;
                this.match(ClickHouseParser.RBRACKET);
                }
                break;
            case 20:
                {
                localContext = new ColumnExpressionIdentifierContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2846;
                this.columnIdentifier();
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2920;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 392, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 2918;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 391, this.context) ) {
                    case 1:
                        {
                        localContext = new ColumnExpressionPrecedence1Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2849;
                        if (!(this.precpred(this.context, 16))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 16)");
                        }
                        this.state = 2850;
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 134479873) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2851;
                        this.columnExpression(17);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ColumnExpressionPrecedence2Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2852;
                        if (!(this.precpred(this.context, 15))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 15)");
                        }
                        this.state = 2853;
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 371)) & ~0x1F) === 0 && ((1 << (_la - 371)) & 16387) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 2854;
                        this.columnExpression(16);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ColumnExpressionPrecedence3Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2855;
                        if (!(this.precpred(this.context, 14))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 14)");
                        }
                        this.state = 2874;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 387, this.context) ) {
                        case 1:
                            {
                            this.state = 2856;
                            this.match(ClickHouseParser.EQ_DOUBLE);
                            }
                            break;
                        case 2:
                            {
                            this.state = 2857;
                            this.match(ClickHouseParser.EQ_SINGLE);
                            }
                            break;
                        case 3:
                            {
                            this.state = 2858;
                            this.match(ClickHouseParser.NOT_EQ);
                            }
                            break;
                        case 4:
                            {
                            this.state = 2859;
                            this.match(ClickHouseParser.LE);
                            }
                            break;
                        case 5:
                            {
                            this.state = 2860;
                            this.match(ClickHouseParser.GE);
                            }
                            break;
                        case 6:
                            {
                            this.state = 2861;
                            this.match(ClickHouseParser.LT);
                            }
                            break;
                        case 7:
                            {
                            this.state = 2862;
                            this.match(ClickHouseParser.GT);
                            }
                            break;
                        case 8:
                            {
                            this.state = 2864;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 71) {
                                {
                                this.state = 2863;
                                this.match(ClickHouseParser.GLOBAL);
                                }
                            }

                            this.state = 2867;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 115) {
                                {
                                this.state = 2866;
                                this.match(ClickHouseParser.NOT);
                                }
                            }

                            this.state = 2869;
                            this.match(ClickHouseParser.IN);
                            }
                            break;
                        case 9:
                            {
                            this.state = 2871;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 115) {
                                {
                                this.state = 2870;
                                this.match(ClickHouseParser.NOT);
                                }
                            }

                            this.state = 2873;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 79 || _la === 98)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                        }
                        this.state = 2876;
                        this.columnExpression(15);
                        }
                        break;
                    case 4:
                        {
                        localContext = new ColumnExpressionAndContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2877;
                        if (!(this.precpred(this.context, 11))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 11)");
                        }
                        this.state = 2878;
                        this.match(ClickHouseParser.AND);
                        this.state = 2879;
                        this.columnExpression(12);
                        }
                        break;
                    case 5:
                        {
                        localContext = new ColumnExpressionOrContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2880;
                        if (!(this.precpred(this.context, 10))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 10)");
                        }
                        this.state = 2881;
                        this.match(ClickHouseParser.OR);
                        this.state = 2882;
                        this.columnExpression(11);
                        }
                        break;
                    case 6:
                        {
                        localContext = new ColumnExpressionBetweenContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2883;
                        if (!(this.precpred(this.context, 9))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 9)");
                        }
                        this.state = 2885;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 115) {
                            {
                            this.state = 2884;
                            this.match(ClickHouseParser.NOT);
                            }
                        }

                        this.state = 2887;
                        this.match(ClickHouseParser.BETWEEN);
                        this.state = 2888;
                        this.columnExpression(0);
                        this.state = 2889;
                        this.match(ClickHouseParser.AND);
                        this.state = 2890;
                        this.columnExpression(10);
                        }
                        break;
                    case 7:
                        {
                        localContext = new ColumnExpressionTernaryOpContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2892;
                        if (!(this.precpred(this.context, 8))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 8)");
                        }
                        this.state = 2893;
                        this.match(ClickHouseParser.QUESTIONMARK);
                        this.state = 2894;
                        this.columnExpression(0);
                        this.state = 2895;
                        this.match(ClickHouseParser.COLON);
                        this.state = 2896;
                        this.columnExpression(8);
                        }
                        break;
                    case 8:
                        {
                        localContext = new ColumnExpressionArrayAccessContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2898;
                        if (!(this.precpred(this.context, 19))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 19)");
                        }
                        this.state = 2899;
                        this.match(ClickHouseParser.LBRACKET);
                        this.state = 2900;
                        this.columnExpression(0);
                        this.state = 2901;
                        this.match(ClickHouseParser.RBRACKET);
                        }
                        break;
                    case 9:
                        {
                        localContext = new ColumnExpressionTupleAccessContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2903;
                        if (!(this.precpred(this.context, 18))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 18)");
                        }
                        this.state = 2904;
                        this.match(ClickHouseParser.DOT);
                        this.state = 2905;
                        this.match(ClickHouseParser.DECIMAL_LITERAL);
                        }
                        break;
                    case 10:
                        {
                        localContext = new ColumnExpressionIsNullContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2906;
                        if (!(this.precpred(this.context, 13))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 13)");
                        }
                        this.state = 2907;
                        this.match(ClickHouseParser.IS);
                        this.state = 2909;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 115) {
                            {
                            this.state = 2908;
                            this.match(ClickHouseParser.NOT);
                            }
                        }

                        this.state = 2911;
                        this.match(ClickHouseParser.NULL_SQL);
                        }
                        break;
                    case 11:
                        {
                        localContext = new ColumnExpressionAliasContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 2912;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 2916;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case ClickHouseParser.DATE:
                        case ClickHouseParser.FIRST:
                        case ClickHouseParser.ID:
                        case ClickHouseParser.KEY:
                        case ClickHouseParser.IDENTIFIER:
                            {
                            this.state = 2913;
                            this.alias();
                            }
                            break;
                        case ClickHouseParser.AS:
                            {
                            this.state = 2914;
                            this.match(ClickHouseParser.AS);
                            this.state = 2915;
                            this.identifier();
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 2922;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 392, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public columnArgumentList(): ColumnArgumentListContext {
        let localContext = new ColumnArgumentListContext(this.context, this.state);
        this.enterRule(localContext, 318, ClickHouseParser.RULE_columnArgumentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2923;
            this.columnArgumentExpression();
            this.state = 2928;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 2924;
                this.match(ClickHouseParser.COMMA);
                this.state = 2925;
                this.columnArgumentExpression();
                }
                }
                this.state = 2930;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnArgumentExpression(): ColumnArgumentExpressionContext {
        let localContext = new ColumnArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 320, ClickHouseParser.RULE_columnArgumentExpression);
        try {
            this.state = 2933;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 394, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2931;
                this.columnLambdaExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2932;
                this.columnExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnLambdaExpression(): ColumnLambdaExpressionContext {
        let localContext = new ColumnLambdaExpressionContext(this.context, this.state);
        this.enterRule(localContext, 322, ClickHouseParser.RULE_columnLambdaExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2954;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.LPAREN:
                {
                this.state = 2935;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2936;
                this.identifier();
                this.state = 2941;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 370) {
                    {
                    {
                    this.state = 2937;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2938;
                    this.identifier();
                    }
                    }
                    this.state = 2943;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2944;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 2946;
                this.identifier();
                this.state = 2951;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 370) {
                    {
                    {
                    this.state = 2947;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2948;
                    this.identifier();
                    }
                    }
                    this.state = 2953;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 2956;
            this.match(ClickHouseParser.ARROW_SYMBOL);
            this.state = 2957;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        let localContext = new ColumnIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 324, ClickHouseParser.RULE_columnIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2962;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 398, this.context) ) {
            case 1:
                {
                this.state = 2959;
                this.tableIdentifier();
                this.state = 2960;
                this.match(ClickHouseParser.DOT);
                }
                break;
            }
            this.state = 2964;
            this.identifier();
            this.state = 2967;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 399, this.context) ) {
            case 1:
                {
                this.state = 2965;
                this.match(ClickHouseParser.DOT);
                this.state = 2966;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public tableExpression(): TableExpressionContext;
    public tableExpression(_p: number): TableExpressionContext;
    public tableExpression(_p?: number): TableExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new TableExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 326;
        this.enterRecursionRule(localContext, 326, ClickHouseParser.RULE_tableExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2976;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 400, this.context) ) {
            case 1:
                {
                localContext = new TableExpressionIdentifierContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 2970;
                this.tableIdentifier();
                }
                break;
            case 2:
                {
                localContext = new TableExpressionFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2971;
                this.tableFunctionExpression();
                }
                break;
            case 3:
                {
                localContext = new TableExpressionSubqueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 2972;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2973;
                this.selectUnionStatement();
                this.state = 2974;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 2986;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 402, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new TableExpressionAliasContext(new TableExpressionContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_tableExpression);
                    this.state = 2978;
                    if (!(this.precpred(this.context, 1))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                    }
                    this.state = 2982;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case ClickHouseParser.DATE:
                    case ClickHouseParser.FIRST:
                    case ClickHouseParser.ID:
                    case ClickHouseParser.KEY:
                    case ClickHouseParser.IDENTIFIER:
                        {
                        this.state = 2979;
                        this.alias();
                        }
                        break;
                    case ClickHouseParser.AS:
                        {
                        this.state = 2980;
                        this.match(ClickHouseParser.AS);
                        this.state = 2981;
                        this.identifier();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    }
                }
                this.state = 2988;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 402, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        let localContext = new TableFunctionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 328, ClickHouseParser.RULE_tableFunctionExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2989;
            this.identifier();
            this.state = 2990;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2992;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4294967295) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 3153919) !== 0) || _la === 385) {
                {
                this.state = 2991;
                this.tableArgList();
                }
            }

            this.state = 2994;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIdentifier(): TableIdentifierContext {
        let localContext = new TableIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 330, ClickHouseParser.RULE_tableIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2999;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 404, this.context) ) {
            case 1:
                {
                this.state = 2996;
                this.databaseIdentifier();
                this.state = 2997;
                this.match(ClickHouseParser.DOT);
                }
                break;
            }
            this.state = 3001;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgList(): TableArgListContext {
        let localContext = new TableArgListContext(this.context, this.state);
        this.enterRule(localContext, 332, ClickHouseParser.RULE_tableArgList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3003;
            this.tableArgExpression();
            this.state = 3008;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 370) {
                {
                {
                this.state = 3004;
                this.match(ClickHouseParser.COMMA);
                this.state = 3005;
                this.tableArgExpression();
                }
                }
                this.state = 3010;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgExpression(): TableArgExpressionContext {
        let localContext = new TableArgExpressionContext(this.context, this.state);
        this.enterRule(localContext, 334, ClickHouseParser.RULE_tableArgExpression);
        try {
            this.state = 3014;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 406, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3011;
                this.columnIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3012;
                this.tableFunctionExpression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3013;
                this.literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        let localContext = new DatabaseIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 336, ClickHouseParser.RULE_databaseIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3016;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public floatingLiteral(): FloatingLiteralContext {
        let localContext = new FloatingLiteralContext(this.context, this.state);
        this.enterRule(localContext, 338, ClickHouseParser.RULE_floatingLiteral);
        let _la: number;
        try {
            this.state = 3026;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.FLOATING_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3018;
                this.match(ClickHouseParser.FLOATING_LITERAL);
                }
                break;
            case ClickHouseParser.DOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3019;
                this.match(ClickHouseParser.DOT);
                this.state = 3020;
                _la = this.tokenStream.LA(1);
                if(!(_la === 361 || _la === 362)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case ClickHouseParser.DECIMAL_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3021;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 3022;
                this.match(ClickHouseParser.DOT);
                this.state = 3024;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 407, this.context) ) {
                case 1:
                    {
                    this.state = 3023;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 361 || _la === 362)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberLiteral(): NumberLiteralContext {
        let localContext = new NumberLiteralContext(this.context, this.state);
        this.enterRule(localContext, 340, ClickHouseParser.RULE_numberLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3029;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 372 || _la === 385) {
                {
                this.state = 3028;
                _la = this.tokenStream.LA(1);
                if(!(_la === 372 || _la === 385)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3037;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 410, this.context) ) {
            case 1:
                {
                this.state = 3031;
                this.floatingLiteral();
                }
                break;
            case 2:
                {
                this.state = 3032;
                this.match(ClickHouseParser.OCTAL_LITERAL);
                }
                break;
            case 3:
                {
                this.state = 3033;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case 4:
                {
                this.state = 3034;
                this.match(ClickHouseParser.HEXADECIMAL_LITERAL);
                }
                break;
            case 5:
                {
                this.state = 3035;
                this.match(ClickHouseParser.INF);
                }
                break;
            case 6:
                {
                this.state = 3036;
                this.match(ClickHouseParser.NAN_SQL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literal(): LiteralContext {
        let localContext = new LiteralContext(this.context, this.state);
        this.enterRule(localContext, 342, ClickHouseParser.RULE_literal);
        try {
            this.state = 3042;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.INF:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.PLUS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3039;
                this.numberLiteral();
                }
                break;
            case ClickHouseParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3040;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.NULL_SQL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3041;
                this.match(ClickHouseParser.NULL_SQL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 344, ClickHouseParser.RULE_interval);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3044;
            _la = this.tokenStream.LA(1);
            if(!(_la === 36 || _la === 76 || ((((_la - 108)) & ~0x1F) === 0 && ((1 << (_la - 108)) & 67108869) !== 0) || _la === 148 || _la === 189 || _la === 194)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword(): KeywordContext {
        let localContext = new KeywordContext(this.context, this.state);
        this.enterRule(localContext, 346, ClickHouseParser.RULE_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3046;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4293787647) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 127) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keywordForAlias(): KeywordForAliasContext {
        let localContext = new KeywordForAliasContext(this.context, this.state);
        this.enterRule(localContext, 348, ClickHouseParser.RULE_keywordForAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3048;
            _la = this.tokenStream.LA(1);
            if(!(_la === 35 || _la === 62 || _la === 77 || _la === 91)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alias(): AliasContext {
        let localContext = new AliasContext(this.context, this.state);
        this.enterRule(localContext, 350, ClickHouseParser.RULE_alias);
        try {
            this.state = 3052;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3050;
                this.match(ClickHouseParser.IDENTIFIER);
                }
                break;
            case ClickHouseParser.DATE:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.ID:
            case ClickHouseParser.KEY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3051;
                this.keywordForAlias();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 352, ClickHouseParser.RULE_identifier);
        try {
            this.state = 3057;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 413, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3054;
                this.match(ClickHouseParser.IDENTIFIER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3055;
                this.interval();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3056;
                this.keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierOrNull(): IdentifierOrNullContext {
        let localContext = new IdentifierOrNullContext(this.context, this.state);
        this.enterRule(localContext, 354, ClickHouseParser.RULE_identifierOrNull);
        try {
            this.state = 3061;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3059;
                this.identifier();
                }
                break;
            case ClickHouseParser.NULL_SQL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3060;
                this.match(ClickHouseParser.NULL_SQL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enumValue(): EnumValueContext {
        let localContext = new EnumValueContext(this.context, this.state);
        this.enterRule(localContext, 356, ClickHouseParser.RULE_enumValue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3063;
            this.match(ClickHouseParser.STRING_LITERAL);
            this.state = 3064;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 3065;
            this.numberLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 43:
            return this.dictionaryAttributeDefinition_sempred(localContext as DictionaryAttributeDefinitionContext, predIndex);
        case 44:
            return this.dictionaryEngineClause_sempred(localContext as DictionaryEngineClauseContext, predIndex);
        case 57:
            return this.engineClause_sempred(localContext as EngineClauseContext, predIndex);
        case 132:
            return this.joinExpression_sempred(localContext as JoinExpressionContext, predIndex);
        case 158:
            return this.columnExpression_sempred(localContext as ColumnExpressionContext, predIndex);
        case 163:
            return this.tableExpression_sempred(localContext as TableExpressionContext, predIndex);
        }
        return true;
    }
    private dictionaryAttributeDefinition_sempred(localContext: DictionaryAttributeDefinitionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return !localContext.attrs.has("default");
        case 1:
            return !localContext.attrs.has("expression");
        case 2:
            return !localContext.attrs.has("hierarchical");
        case 3:
            return !localContext.attrs.has("injective");
        case 4:
            return !localContext.attrs.has("is_object_id");
        }
        return true;
    }
    private dictionaryEngineClause_sempred(localContext: DictionaryEngineClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return !localContext.clauses.has("source");
        case 6:
            return !localContext.clauses.has("lifetime");
        case 7:
            return !localContext.clauses.has("layout");
        case 8:
            return !localContext.clauses.has("range");
        case 9:
            return !localContext.clauses.has("settings");
        }
        return true;
    }
    private engineClause_sempred(localContext: EngineClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 10:
            return !localContext.clauses.has("orderByClause");
        case 11:
            return !localContext.clauses.has("partitionByClause");
        case 12:
            return !localContext.clauses.has("primaryKeyClause");
        case 13:
            return !localContext.clauses.has("sampleByClause");
        case 14:
            return !localContext.clauses.has("ttlClause");
        case 15:
            return !localContext.clauses.has("settingsClause");
        }
        return true;
    }
    private joinExpression_sempred(localContext: JoinExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 16:
            return this.precpred(this.context, 3);
        case 17:
            return this.precpred(this.context, 4);
        }
        return true;
    }
    private columnExpression_sempred(localContext: ColumnExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 18:
            return this.precpred(this.context, 16);
        case 19:
            return this.precpred(this.context, 15);
        case 20:
            return this.precpred(this.context, 14);
        case 21:
            return this.precpred(this.context, 11);
        case 22:
            return this.precpred(this.context, 10);
        case 23:
            return this.precpred(this.context, 9);
        case 24:
            return this.precpred(this.context, 8);
        case 25:
            return this.precpred(this.context, 19);
        case 26:
            return this.precpred(this.context, 18);
        case 27:
            return this.precpred(this.context, 13);
        case 28:
            return this.precpred(this.context, 7);
        }
        return true;
    }
    private tableExpression_sempred(localContext: TableExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 29:
            return this.precpred(this.context, 1);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,397,3068,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,1,0,3,0,360,8,0,1,0,1,
        0,1,1,1,1,3,1,366,8,1,1,1,1,1,1,1,1,1,3,1,372,8,1,1,2,1,2,1,2,1,
        2,3,2,378,8,2,1,2,1,2,3,2,382,8,2,1,2,3,2,385,8,2,1,2,1,2,1,2,3,
        2,390,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,412,8,3,1,3,3,3,415,8,3,1,4,1,4,1,
        4,1,4,5,4,421,8,4,10,4,12,4,424,9,4,1,5,1,5,3,5,428,8,5,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,439,8,6,10,6,12,6,442,9,6,1,6,1,
        6,1,7,1,7,1,7,1,7,3,7,450,8,7,1,7,1,7,1,7,5,7,455,8,7,10,7,12,7,
        458,9,7,1,8,1,8,1,8,1,8,1,8,3,8,465,8,8,1,8,1,8,1,8,3,8,470,8,8,
        1,8,1,8,1,8,1,8,1,8,3,8,477,8,8,1,8,1,8,1,8,3,8,482,8,8,1,8,1,8,
        1,8,1,8,1,8,3,8,489,8,8,1,8,1,8,1,8,3,8,494,8,8,1,8,1,8,1,8,1,8,
        3,8,500,8,8,1,8,1,8,1,8,1,8,3,8,506,8,8,1,8,1,8,1,8,3,8,511,8,8,
        1,8,1,8,1,8,1,8,3,8,517,8,8,1,8,1,8,1,8,3,8,522,8,8,1,8,1,8,1,8,
        1,8,3,8,528,8,8,1,8,1,8,1,8,3,8,533,8,8,1,8,1,8,1,8,1,8,3,8,539,
        8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,553,8,8,
        1,8,1,8,1,8,1,8,1,8,3,8,560,8,8,1,8,1,8,1,8,1,8,1,8,3,8,567,8,8,
        1,8,1,8,1,8,1,8,1,8,3,8,574,8,8,1,8,1,8,1,8,1,8,3,8,580,8,8,1,8,
        1,8,1,8,3,8,585,8,8,1,8,1,8,1,8,1,8,3,8,591,8,8,1,8,1,8,1,8,3,8,
        596,8,8,1,8,1,8,1,8,1,8,3,8,602,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        3,8,611,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,621,8,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,3,8,631,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,651,8,8,1,8,1,8,
        1,8,1,8,1,8,1,8,3,8,659,8,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,3,8,674,8,8,1,9,1,9,1,9,5,9,679,8,9,10,9,12,9,682,
        9,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,
        695,8,12,1,13,1,13,1,13,1,13,3,13,701,8,13,1,14,1,14,1,14,1,14,3,
        14,707,8,14,1,15,1,15,1,15,1,15,3,15,713,8,15,1,15,3,15,716,8,15,
        1,16,1,16,1,16,1,16,3,16,722,8,16,1,16,3,16,725,8,16,1,16,3,16,728,
        8,16,1,16,1,16,1,16,1,16,3,16,734,8,16,1,16,1,16,3,16,738,8,16,1,
        16,3,16,741,8,16,1,16,3,16,744,8,16,1,16,3,16,747,8,16,1,16,3,16,
        750,8,16,1,17,1,17,1,17,1,17,1,17,3,17,757,8,17,1,17,1,17,3,17,761,
        8,17,1,17,3,17,764,8,17,1,17,1,17,3,17,768,8,17,1,18,1,18,1,18,1,
        18,3,18,774,8,18,1,18,3,18,777,8,18,1,18,1,18,1,18,1,18,3,18,783,
        8,18,1,18,1,18,3,18,787,8,18,1,18,3,18,790,8,18,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,19,1,19,3,19,801,8,19,1,19,1,19,3,19,805,8,19,
        1,19,3,19,808,8,19,1,19,1,19,1,19,3,19,813,8,19,3,19,815,8,19,1,
        19,3,19,818,8,19,1,19,3,19,821,8,19,1,19,1,19,1,20,1,20,1,20,1,20,
        1,20,1,20,3,20,831,8,20,1,20,1,20,3,20,835,8,20,1,20,3,20,838,8,
        20,1,20,3,20,841,8,20,1,20,1,20,1,20,3,20,846,8,20,3,20,848,8,20,
        1,20,1,20,1,21,1,21,1,21,3,21,855,8,21,1,21,1,21,1,21,1,21,3,21,
        861,8,21,1,21,1,21,3,21,865,8,21,1,21,3,21,868,8,21,1,21,3,21,871,
        8,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,5,24,
        897,8,24,10,24,12,24,900,9,24,1,24,1,24,1,24,1,24,1,24,3,24,907,
        8,24,3,24,909,8,24,1,25,1,25,1,25,1,25,1,25,3,25,916,8,25,1,25,1,
        25,1,25,1,25,1,25,3,25,923,8,25,1,26,1,26,1,26,1,26,1,27,1,27,1,
        27,1,27,3,27,933,8,27,1,28,1,28,1,28,1,28,5,28,939,8,28,10,28,12,
        28,942,9,28,1,28,1,28,3,28,946,8,28,1,29,1,29,1,29,1,29,1,29,3,29,
        953,8,29,1,30,1,30,1,30,1,30,5,30,959,8,30,10,30,12,30,962,9,30,
        1,31,1,31,1,31,1,31,1,31,3,31,969,8,31,1,31,3,31,972,8,31,1,31,1,
        31,3,31,976,8,31,1,31,3,31,979,8,31,1,31,3,31,982,8,31,1,31,1,31,
        3,31,986,8,31,1,32,1,32,1,32,1,32,5,32,992,8,32,10,32,12,32,995,
        9,32,1,33,1,33,1,33,3,33,1000,8,33,1,34,1,34,1,34,3,34,1005,8,34,
        1,34,1,34,1,34,5,34,1010,8,34,10,34,12,34,1013,9,34,1,34,3,34,1016,
        8,34,1,34,1,34,3,34,1020,8,34,1,34,3,34,1023,8,34,1,34,3,34,1026,
        8,34,1,34,1,34,1,34,3,34,1031,8,34,1,34,1,34,1,34,1,34,3,34,1037,
        8,34,3,34,1039,8,34,1,34,3,34,1042,8,34,1,34,3,34,1045,8,34,1,35,
        1,35,1,35,1,35,1,35,3,35,1052,8,35,1,36,1,36,1,36,1,36,1,36,3,36,
        1059,8,36,1,37,1,37,3,37,1063,8,37,1,37,1,37,1,37,1,38,1,38,3,38,
        1070,8,38,1,39,1,39,1,39,1,39,1,39,3,39,1077,8,39,1,40,1,40,3,40,
        1081,8,40,1,40,1,40,3,40,1085,8,40,1,40,1,40,1,40,5,40,1090,8,40,
        10,40,12,40,1093,9,40,1,40,3,40,1096,8,40,1,40,1,40,3,40,1100,8,
        40,1,40,1,40,1,40,1,40,3,40,1106,8,40,1,40,1,40,1,40,1,40,1,40,1,
        40,3,40,1114,8,40,3,40,1116,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,
        41,1,41,3,41,1126,8,41,1,42,1,42,1,42,1,42,5,42,1132,8,42,10,42,
        12,42,1135,9,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        5,43,1160,8,43,10,43,12,43,1163,9,43,1,44,3,44,1166,8,44,1,44,1,
        44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
        44,1,44,1,44,1,44,1,44,1,44,5,44,1188,8,44,10,44,12,44,1191,9,44,
        1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,3,46,1201,8,46,1,46,3,46,
        1204,8,46,1,47,1,47,1,47,1,47,1,47,5,47,1211,8,47,10,47,12,47,1214,
        9,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,3,48,1230,8,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,5,49,
        1239,8,49,10,49,12,49,1242,9,49,1,49,1,49,1,49,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1259,8,50,1,50,1,
        50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,3,52,1272,8,52,1,
        53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,5,
        56,1287,8,56,10,56,12,56,1290,9,56,1,56,1,56,1,56,1,56,1,56,1,56,
        3,56,1298,8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
        1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
        1,57,1,57,5,57,1325,8,57,10,57,12,57,1328,9,57,1,58,1,58,1,58,1,
        58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,5,
        61,1346,8,61,10,61,12,61,1349,9,61,1,62,1,62,3,62,1353,8,62,1,62,
        1,62,1,62,3,62,1358,8,62,1,62,3,62,1361,8,62,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,3,63,1373,8,63,1,64,1,64,1,64,3,64,
        1378,8,64,1,64,1,64,3,64,1382,8,64,1,64,3,64,1385,8,64,1,64,1,64,
        3,64,1389,8,64,1,64,1,64,3,64,1393,8,64,1,64,1,64,1,64,3,64,1398,
        8,64,1,64,3,64,1401,8,64,1,64,1,64,3,64,1405,8,64,3,64,1407,8,64,
        1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,
        1,68,1,68,1,68,1,68,1,68,5,68,1427,8,68,10,68,12,68,1430,9,68,1,
        68,1,68,1,69,1,69,1,69,3,69,1437,8,69,1,69,3,69,1440,8,69,1,70,1,
        70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1450,8,70,1,71,1,71,3,71,1454,
        8,71,1,71,1,71,1,72,1,72,1,72,1,72,3,72,1462,8,72,1,72,1,72,3,72,
        1466,8,72,1,72,1,72,1,72,3,72,1471,8,72,1,72,1,72,3,72,1475,8,72,
        1,72,1,72,3,72,1479,8,72,1,72,1,72,3,72,1483,8,72,1,72,1,72,3,72,
        1487,8,72,3,72,1489,8,72,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1497,
        8,73,1,73,1,73,3,73,1501,8,73,1,73,3,73,1504,8,73,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,3,74,1527,8,74,1,75,1,75,3,75,1531,8,75,
        1,75,1,75,1,75,3,75,1536,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,3,75,1547,8,75,1,75,1,75,3,75,1551,8,75,1,75,1,75,1,75,
        3,75,1556,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,3,75,1565,8,75,
        3,75,1567,8,75,1,76,1,76,1,76,5,76,1572,8,76,10,76,12,76,1575,9,
        76,1,77,1,77,1,77,5,77,1580,8,77,10,77,12,77,1583,9,77,1,78,1,78,
        3,78,1587,8,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,5,78,
        1598,8,78,10,78,12,78,1601,9,78,1,78,1,78,1,78,1,78,1,78,1,78,3,
        78,1609,8,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1617,8,78,1,78,3,
        78,1620,8,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
        78,3,78,1633,8,78,1,78,1,78,1,78,1,78,3,78,1639,8,78,1,79,1,79,1,
        79,3,79,1644,8,79,1,79,3,79,1647,8,79,1,80,1,80,1,80,1,80,1,81,1,
        81,1,81,1,81,3,81,1657,8,81,1,81,3,81,1660,8,81,1,81,1,81,3,81,1664,
        8,81,3,81,1666,8,81,1,82,1,82,1,82,5,82,1671,8,82,10,82,12,82,1674,
        9,82,1,83,1,83,1,84,1,84,3,84,1680,8,84,1,85,1,85,1,85,5,85,1685,
        8,85,10,85,12,85,1688,9,85,1,86,1,86,3,86,1692,8,86,1,87,1,87,3,
        87,1696,8,87,1,88,1,88,3,88,1700,8,88,1,89,1,89,3,89,1704,8,89,1,
        89,1,89,1,89,1,89,3,89,1710,8,89,1,89,3,89,1713,8,89,1,90,1,90,3,
        90,1717,8,90,1,91,1,91,3,91,1721,8,91,1,92,1,92,3,92,1725,8,92,1,
        92,1,92,1,92,1,92,3,92,1731,8,92,1,93,1,93,1,94,1,94,1,95,1,95,3,
        95,1739,8,95,1,95,3,95,1742,8,95,1,95,1,95,3,95,1746,8,95,1,95,1,
        95,1,95,1,95,3,95,1752,8,95,1,95,1,95,3,95,1756,8,95,1,95,1,95,1,
        95,3,95,1761,8,95,1,95,1,95,3,95,1765,8,95,1,95,1,95,3,95,1769,8,
        95,1,95,1,95,1,95,3,95,1774,8,95,1,95,1,95,1,95,1,95,1,95,1,95,3,
        95,1782,8,95,1,95,3,95,1785,8,95,1,95,1,95,1,95,3,95,1790,8,95,1,
        95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1801,8,95,1,95,1,
        95,3,95,1805,8,95,1,95,1,95,1,95,3,95,1810,8,95,1,95,1,95,1,95,1,
        95,1,95,3,95,1817,8,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
        95,1,95,1,95,1,95,3,95,1831,8,95,3,95,1833,8,95,1,96,1,96,1,96,1,
        96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1845,8,96,1,96,1,96,1,96,1,
        96,1,96,3,96,1852,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,
        96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1871,8,96,1,96,1,
        96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1884,8,96,1,
        96,1,96,3,96,1888,8,96,1,96,1,96,1,96,1,96,1,96,3,96,1895,8,96,1,
        97,1,97,3,97,1899,8,97,1,97,1,97,3,97,1903,8,97,1,97,1,97,1,97,1,
        97,1,97,1,97,3,97,1911,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
        97,1,97,1,97,3,97,1923,8,97,1,97,3,97,1926,8,97,1,97,1,97,1,97,1,
        97,3,97,1932,8,97,1,97,3,97,1935,8,97,1,97,1,97,3,97,1939,8,97,1,
        97,3,97,1942,8,97,1,97,1,97,1,97,3,97,1947,8,97,1,97,1,97,1,97,3,
        97,1952,8,97,1,97,1,97,1,97,1,97,1,97,3,97,1959,8,97,1,97,1,97,1,
        97,1,97,1,97,1,97,1,97,3,97,1968,8,97,1,97,1,97,1,97,1,97,1,97,1,
        97,3,97,1976,8,97,1,97,1,97,1,97,1,97,1,97,3,97,1983,8,97,1,97,1,
        97,3,97,1987,8,97,1,98,1,98,1,98,3,98,1992,8,98,1,98,3,98,1995,8,
        98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2003,8,98,1,98,1,98,1,98,3,
        98,2008,8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
        99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,
        99,1,99,3,99,2035,8,99,1,100,1,100,1,100,3,100,2040,8,100,1,100,
        1,100,1,100,3,100,2045,8,100,1,100,3,100,2048,8,100,1,100,3,100,
        2051,8,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,3,101,2060,
        8,101,1,101,3,101,2063,8,101,1,102,1,102,1,102,1,102,5,102,2069,
        8,102,10,102,12,102,2072,9,102,1,102,1,102,1,103,1,103,1,104,1,104,
        1,104,4,104,2081,8,104,11,104,12,104,2082,1,104,3,104,2086,8,104,
        1,104,1,104,1,104,3,104,2091,8,104,1,104,1,104,3,104,2095,8,104,
        1,105,1,105,1,105,5,105,2100,8,105,10,105,12,105,2103,9,105,1,106,
        1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,2115,
        8,106,1,106,1,106,3,106,2119,8,106,1,107,1,107,3,107,2123,8,107,
        1,108,1,108,1,108,1,108,5,108,2129,8,108,10,108,12,108,2132,9,108,
        3,108,2134,8,108,1,108,1,108,1,109,1,109,1,109,1,109,5,109,2142,
        8,109,10,109,12,109,2145,9,109,1,109,1,109,1,110,1,110,1,110,3,110,
        2152,8,110,1,110,5,110,2155,8,110,10,110,12,110,2158,9,110,1,111,
        1,111,1,111,3,111,2163,8,111,1,111,1,111,3,111,2167,8,111,1,112,
        1,112,1,112,1,112,3,112,2173,8,112,1,112,3,112,2176,8,112,1,112,
        3,112,2179,8,112,1,112,3,112,2182,8,112,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,1,113,5,113,2194,8,113,10,113,12,113,
        2197,9,113,1,113,3,113,2200,8,113,1,114,1,114,3,114,2204,8,114,1,
        114,1,114,1,114,3,114,2209,8,114,1,114,3,114,2212,8,114,1,114,1,
        114,1,115,1,115,1,115,1,115,5,115,2220,8,115,10,115,12,115,2223,
        9,115,1,116,1,116,1,116,1,116,1,116,3,116,2230,8,116,1,117,3,117,
        2233,8,117,1,117,1,117,3,117,2237,8,117,1,117,3,117,2240,8,117,1,
        117,1,117,3,117,2244,8,117,1,117,3,117,2247,8,117,1,117,3,117,2250,
        8,117,1,117,3,117,2253,8,117,1,117,3,117,2256,8,117,1,117,3,117,
        2259,8,117,1,117,1,117,3,117,2263,8,117,1,117,1,117,3,117,2267,8,
        117,1,117,3,117,2270,8,117,1,117,3,117,2273,8,117,1,117,3,117,2276,
        8,117,1,117,3,117,2279,8,117,1,117,3,117,2282,8,117,1,118,1,118,
        1,118,1,119,1,119,1,119,1,119,3,119,2291,8,119,1,120,1,120,1,120,
        1,121,3,121,2297,8,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,123,1,123,1,123,1,124,1,124,1,124,1,125,
        1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,2324,8,125,1,126,
        1,126,1,126,1,127,1,127,1,127,1,127,1,128,1,128,1,128,1,128,1,129,
        1,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,3,130,2346,8,130,
        1,131,1,131,1,131,1,132,1,132,1,132,3,132,2354,8,132,1,132,3,132,
        2357,8,132,1,132,1,132,1,132,1,132,3,132,2363,8,132,1,132,1,132,
        1,132,1,132,1,132,1,132,3,132,2371,8,132,1,132,3,132,2374,8,132,
        1,132,1,132,1,132,1,132,5,132,2380,8,132,10,132,12,132,2383,9,132,
        1,133,3,133,2386,8,133,1,133,1,133,1,133,3,133,2391,8,133,1,133,
        3,133,2394,8,133,1,133,3,133,2397,8,133,1,133,1,133,3,133,2401,8,
        133,1,133,1,133,3,133,2405,8,133,1,133,3,133,2408,8,133,3,133,2410,
        8,133,1,133,3,133,2413,8,133,1,133,1,133,3,133,2417,8,133,1,133,
        1,133,3,133,2421,8,133,1,133,3,133,2424,8,133,3,133,2426,8,133,3,
        133,2428,8,133,1,134,3,134,2431,8,134,1,134,1,134,1,134,3,134,2436,
        8,134,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,1,135,3,135,
        2447,8,135,1,136,1,136,1,136,1,136,3,136,2453,8,136,1,137,1,137,
        1,137,3,137,2458,8,137,1,138,1,138,1,138,5,138,2463,8,138,10,138,
        12,138,2466,9,138,1,139,1,139,3,139,2470,8,139,1,139,1,139,3,139,
        2474,8,139,1,139,1,139,3,139,2478,8,139,1,140,1,140,1,140,3,140,
        2483,8,140,1,141,1,141,1,141,5,141,2488,8,141,10,141,12,141,2491,
        9,141,1,142,1,142,1,142,1,142,1,143,3,143,2498,8,143,1,143,3,143,
        2501,8,143,1,143,3,143,2504,8,143,1,144,1,144,1,144,1,144,1,145,
        1,145,1,145,1,145,1,146,1,146,1,146,1,147,1,147,1,147,1,147,1,147,
        1,147,3,147,2523,8,147,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,1,148,1,148,1,148,3,148,2537,8,148,1,149,1,149,1,149,
        1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,
        3,150,2553,8,150,1,150,3,150,2556,8,150,1,150,1,150,1,150,1,150,
        1,150,1,150,1,150,3,150,2565,8,150,1,150,1,150,3,150,2569,8,150,
        1,150,1,150,1,150,3,150,2574,8,150,1,150,1,150,1,150,3,150,2579,
        8,150,1,150,3,150,2582,8,150,3,150,2584,8,150,1,151,1,151,1,151,
        1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
        1,151,1,151,1,151,1,151,1,151,1,151,3,151,2606,8,151,1,151,3,151,
        2609,8,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
        3,151,2620,8,151,1,152,1,152,3,152,2624,8,152,1,152,3,152,2627,8,
        152,1,152,1,152,3,152,2631,8,152,1,152,1,152,3,152,2635,8,152,1,
        153,1,153,1,153,1,154,1,154,1,154,3,154,2643,8,154,1,154,1,154,3,
        154,2647,8,154,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,155,1,
        155,5,155,2658,8,155,10,155,12,155,2661,9,155,1,155,1,155,1,155,
        1,155,1,155,1,155,1,155,5,155,2670,8,155,10,155,12,155,2673,9,155,
        1,155,1,155,1,155,1,155,1,155,1,155,1,155,5,155,2682,8,155,10,155,
        12,155,2685,9,155,1,155,1,155,1,155,1,155,1,155,3,155,2692,8,155,
        1,155,1,155,3,155,2696,8,155,1,156,1,156,1,156,5,156,2701,8,156,
        10,156,12,156,2704,9,156,1,157,1,157,1,157,3,157,2709,8,157,1,157,
        1,157,1,157,1,157,1,157,1,157,3,157,2717,8,157,1,158,1,158,1,158,
        3,158,2722,8,158,1,158,1,158,1,158,1,158,1,158,4,158,2729,8,158,
        11,158,12,158,2730,1,158,1,158,3,158,2735,8,158,1,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,1,158,3,158,2766,8,158,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        3,158,2783,8,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,3,158,2795,8,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,3,158,2805,8,158,1,158,3,158,2808,8,158,1,158,1,158,
        3,158,2812,8,158,1,158,3,158,2815,8,158,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,3,158,2827,8,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,3,158,2844,8,158,1,158,1,158,3,158,2848,8,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,3,158,2865,8,158,1,158,3,158,2868,8,158,1,158,
        1,158,3,158,2872,8,158,1,158,3,158,2875,8,158,1,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,3,158,2886,8,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
        1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,3,158,2910,
        8,158,1,158,1,158,1,158,1,158,1,158,3,158,2917,8,158,5,158,2919,
        8,158,10,158,12,158,2922,9,158,1,159,1,159,1,159,5,159,2927,8,159,
        10,159,12,159,2930,9,159,1,160,1,160,3,160,2934,8,160,1,161,1,161,
        1,161,1,161,5,161,2940,8,161,10,161,12,161,2943,9,161,1,161,1,161,
        1,161,1,161,1,161,5,161,2950,8,161,10,161,12,161,2953,9,161,3,161,
        2955,8,161,1,161,1,161,1,161,1,162,1,162,1,162,3,162,2963,8,162,
        1,162,1,162,1,162,3,162,2968,8,162,1,163,1,163,1,163,1,163,1,163,
        1,163,1,163,3,163,2977,8,163,1,163,1,163,1,163,1,163,3,163,2983,
        8,163,5,163,2985,8,163,10,163,12,163,2988,9,163,1,164,1,164,1,164,
        3,164,2993,8,164,1,164,1,164,1,165,1,165,1,165,3,165,3000,8,165,
        1,165,1,165,1,166,1,166,1,166,5,166,3007,8,166,10,166,12,166,3010,
        9,166,1,167,1,167,1,167,3,167,3015,8,167,1,168,1,168,1,169,1,169,
        1,169,1,169,1,169,1,169,3,169,3025,8,169,3,169,3027,8,169,1,170,
        3,170,3030,8,170,1,170,1,170,1,170,1,170,1,170,1,170,3,170,3038,
        8,170,1,171,1,171,1,171,3,171,3043,8,171,1,172,1,172,1,173,1,173,
        1,174,1,174,1,175,1,175,3,175,3053,8,175,1,176,1,176,1,176,3,176,
        3058,8,176,1,177,1,177,3,177,3062,8,177,1,178,1,178,1,178,1,178,
        1,178,0,3,264,316,326,179,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,
        210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,
        242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,
        274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,
        306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,
        338,340,342,344,346,348,350,352,354,356,0,59,6,0,3,3,24,24,27,27,
        38,38,104,104,177,177,2,0,15,15,29,29,2,0,271,275,287,288,1,0,282,
        283,2,0,98,98,292,294,1,0,296,297,3,0,375,375,377,377,382,383,1,
        0,298,299,3,0,3,3,38,38,104,104,2,0,41,41,43,43,2,0,44,44,50,50,
        5,0,33,33,46,46,70,70,162,162,186,186,4,0,33,33,46,46,162,162,186,
        186,4,0,34,34,45,45,163,163,204,204,2,0,242,250,254,259,1,0,226,
        229,2,0,40,40,181,181,6,0,1,1,22,22,27,27,50,50,109,109,139,139,
        4,0,1,1,22,22,50,50,103,103,2,0,122,122,147,147,2,0,1,1,50,50,2,
        0,103,103,109,109,2,0,111,111,197,197,2,0,126,126,217,217,2,0,162,
        162,186,186,3,0,5,5,29,29,50,50,2,0,29,29,266,266,2,0,92,92,212,
        212,2,0,214,215,218,218,3,0,214,214,216,216,218,218,1,0,156,157,
        3,0,60,60,151,151,222,222,2,0,49,49,142,142,2,0,159,159,225,225,
        2,0,49,49,102,102,3,0,231,231,234,234,237,237,3,0,185,185,293,293,
        300,356,3,0,14,14,159,159,165,165,2,0,31,31,144,144,2,0,84,84,96,
        96,2,0,71,71,101,101,3,0,4,4,8,8,12,12,4,0,4,4,7,8,12,12,150,150,
        2,0,96,96,143,143,2,0,4,4,8,8,2,0,118,118,370,370,2,0,11,11,41,42,
        2,0,62,62,93,93,2,0,136,136,146,146,2,0,68,68,80,80,3,0,17,17,95,
        95,173,173,3,0,366,366,384,384,393,393,2,0,371,372,385,385,2,0,79,
        79,98,98,1,0,361,362,2,0,372,372,385,385,8,0,36,36,76,76,108,108,
        110,110,134,134,148,148,189,189,194,194,3,0,1,112,114,115,117,358,
        4,0,35,35,62,62,77,77,91,91,3547,0,359,1,0,0,0,2,371,1,0,0,0,4,389,
        1,0,0,0,6,414,1,0,0,0,8,416,1,0,0,0,10,425,1,0,0,0,12,434,1,0,0,
        0,14,445,1,0,0,0,16,673,1,0,0,0,18,675,1,0,0,0,20,683,1,0,0,0,22,
        687,1,0,0,0,24,694,1,0,0,0,26,696,1,0,0,0,28,702,1,0,0,0,30,708,
        1,0,0,0,32,724,1,0,0,0,34,751,1,0,0,0,36,776,1,0,0,0,38,794,1,0,
        0,0,40,824,1,0,0,0,42,851,1,0,0,0,44,874,1,0,0,0,46,876,1,0,0,0,
        48,908,1,0,0,0,50,922,1,0,0,0,52,924,1,0,0,0,54,932,1,0,0,0,56,934,
        1,0,0,0,58,952,1,0,0,0,60,954,1,0,0,0,62,985,1,0,0,0,64,987,1,0,
        0,0,66,996,1,0,0,0,68,1001,1,0,0,0,70,1051,1,0,0,0,72,1058,1,0,0,
        0,74,1060,1,0,0,0,76,1069,1,0,0,0,78,1076,1,0,0,0,80,1078,1,0,0,
        0,82,1125,1,0,0,0,84,1127,1,0,0,0,86,1138,1,0,0,0,88,1165,1,0,0,
        0,90,1192,1,0,0,0,92,1196,1,0,0,0,94,1205,1,0,0,0,96,1218,1,0,0,
        0,98,1233,1,0,0,0,100,1246,1,0,0,0,102,1262,1,0,0,0,104,1267,1,0,
        0,0,106,1273,1,0,0,0,108,1276,1,0,0,0,110,1279,1,0,0,0,112,1297,
        1,0,0,0,114,1299,1,0,0,0,116,1329,1,0,0,0,118,1333,1,0,0,0,120,1337,
        1,0,0,0,122,1341,1,0,0,0,124,1350,1,0,0,0,126,1372,1,0,0,0,128,1406,
        1,0,0,0,130,1408,1,0,0,0,132,1411,1,0,0,0,134,1418,1,0,0,0,136,1421,
        1,0,0,0,138,1433,1,0,0,0,140,1441,1,0,0,0,142,1451,1,0,0,0,144,1488,
        1,0,0,0,146,1503,1,0,0,0,148,1526,1,0,0,0,150,1566,1,0,0,0,152,1568,
        1,0,0,0,154,1576,1,0,0,0,156,1638,1,0,0,0,158,1643,1,0,0,0,160,1648,
        1,0,0,0,162,1665,1,0,0,0,164,1667,1,0,0,0,166,1675,1,0,0,0,168,1679,
        1,0,0,0,170,1681,1,0,0,0,172,1691,1,0,0,0,174,1693,1,0,0,0,176,1697,
        1,0,0,0,178,1712,1,0,0,0,180,1714,1,0,0,0,182,1718,1,0,0,0,184,1730,
        1,0,0,0,186,1732,1,0,0,0,188,1734,1,0,0,0,190,1832,1,0,0,0,192,1894,
        1,0,0,0,194,1986,1,0,0,0,196,2007,1,0,0,0,198,2034,1,0,0,0,200,2036,
        1,0,0,0,202,2062,1,0,0,0,204,2064,1,0,0,0,206,2075,1,0,0,0,208,2094,
        1,0,0,0,210,2096,1,0,0,0,212,2118,1,0,0,0,214,2122,1,0,0,0,216,2124,
        1,0,0,0,218,2137,1,0,0,0,220,2148,1,0,0,0,222,2159,1,0,0,0,224,2168,
        1,0,0,0,226,2183,1,0,0,0,228,2201,1,0,0,0,230,2215,1,0,0,0,232,2229,
        1,0,0,0,234,2232,1,0,0,0,236,2283,1,0,0,0,238,2286,1,0,0,0,240,2292,
        1,0,0,0,242,2296,1,0,0,0,244,2302,1,0,0,0,246,2309,1,0,0,0,248,2312,
        1,0,0,0,250,2315,1,0,0,0,252,2325,1,0,0,0,254,2328,1,0,0,0,256,2332,
        1,0,0,0,258,2336,1,0,0,0,260,2341,1,0,0,0,262,2347,1,0,0,0,264,2362,
        1,0,0,0,266,2427,1,0,0,0,268,2435,1,0,0,0,270,2446,1,0,0,0,272,2448,
        1,0,0,0,274,2454,1,0,0,0,276,2459,1,0,0,0,278,2467,1,0,0,0,280,2479,
        1,0,0,0,282,2484,1,0,0,0,284,2492,1,0,0,0,286,2497,1,0,0,0,288,2505,
        1,0,0,0,290,2509,1,0,0,0,292,2513,1,0,0,0,294,2522,1,0,0,0,296,2536,
        1,0,0,0,298,2538,1,0,0,0,300,2583,1,0,0,0,302,2619,1,0,0,0,304,2621,
        1,0,0,0,306,2636,1,0,0,0,308,2639,1,0,0,0,310,2695,1,0,0,0,312,2697,
        1,0,0,0,314,2716,1,0,0,0,316,2847,1,0,0,0,318,2923,1,0,0,0,320,2933,
        1,0,0,0,322,2954,1,0,0,0,324,2962,1,0,0,0,326,2976,1,0,0,0,328,2989,
        1,0,0,0,330,2999,1,0,0,0,332,3003,1,0,0,0,334,3014,1,0,0,0,336,3016,
        1,0,0,0,338,3026,1,0,0,0,340,3029,1,0,0,0,342,3042,1,0,0,0,344,3044,
        1,0,0,0,346,3046,1,0,0,0,348,3048,1,0,0,0,350,3052,1,0,0,0,352,3057,
        1,0,0,0,354,3061,1,0,0,0,356,3063,1,0,0,0,358,360,3,2,1,0,359,358,
        1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,362,5,0,0,1,362,1,1,
        0,0,0,363,365,3,4,2,0,364,366,5,392,0,0,365,364,1,0,0,0,365,366,
        1,0,0,0,366,372,1,0,0,0,367,368,3,4,2,0,368,369,5,392,0,0,369,370,
        3,2,1,0,370,372,1,0,0,0,371,363,1,0,0,0,371,367,1,0,0,0,372,3,1,
        0,0,0,373,377,3,6,3,0,374,375,5,87,0,0,375,376,5,124,0,0,376,378,
        5,364,0,0,377,374,1,0,0,0,377,378,1,0,0,0,378,381,1,0,0,0,379,380,
        5,66,0,0,380,382,3,354,177,0,381,379,1,0,0,0,381,382,1,0,0,0,382,
        384,1,0,0,0,383,385,5,392,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,
        390,1,0,0,0,386,390,3,200,100,0,387,390,3,156,78,0,388,390,3,150,
        75,0,389,373,1,0,0,0,389,386,1,0,0,0,389,387,1,0,0,0,389,388,1,0,
        0,0,390,5,1,0,0,0,391,415,3,14,7,0,392,415,3,26,13,0,393,415,3,28,
        14,0,394,415,3,82,41,0,395,415,3,142,71,0,396,415,3,30,15,0,397,
        415,3,144,72,0,398,415,3,146,73,0,399,415,3,148,74,0,400,415,3,222,
        111,0,401,415,3,224,112,0,402,415,3,226,113,0,403,415,3,230,115,
        0,404,415,3,298,149,0,405,415,3,300,150,0,406,415,3,302,151,0,407,
        415,3,304,152,0,408,415,3,306,153,0,409,415,3,308,154,0,410,412,
        3,8,4,0,411,410,1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,415,
        3,234,117,0,414,391,1,0,0,0,414,392,1,0,0,0,414,393,1,0,0,0,414,
        394,1,0,0,0,414,395,1,0,0,0,414,396,1,0,0,0,414,397,1,0,0,0,414,
        398,1,0,0,0,414,399,1,0,0,0,414,400,1,0,0,0,414,401,1,0,0,0,414,
        402,1,0,0,0,414,403,1,0,0,0,414,404,1,0,0,0,414,405,1,0,0,0,414,
        406,1,0,0,0,414,407,1,0,0,0,414,408,1,0,0,0,414,409,1,0,0,0,414,
        411,1,0,0,0,415,7,1,0,0,0,416,417,5,193,0,0,417,422,3,10,5,0,418,
        419,5,370,0,0,419,421,3,10,5,0,420,418,1,0,0,0,421,424,1,0,0,0,422,
        420,1,0,0,0,422,423,1,0,0,0,423,9,1,0,0,0,424,422,1,0,0,0,425,427,
        3,352,176,0,426,428,3,12,6,0,427,426,1,0,0,0,427,428,1,0,0,0,428,
        429,1,0,0,0,429,430,5,10,0,0,430,431,5,381,0,0,431,432,3,6,3,0,432,
        433,5,391,0,0,433,11,1,0,0,0,434,435,5,381,0,0,435,440,3,352,176,
        0,436,437,5,370,0,0,437,439,3,352,176,0,438,436,1,0,0,0,439,442,
        1,0,0,0,440,438,1,0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,440,
        1,0,0,0,443,444,5,391,0,0,444,13,1,0,0,0,445,446,5,5,0,0,446,447,
        5,162,0,0,447,449,3,330,165,0,448,450,3,104,52,0,449,448,1,0,0,0,
        449,450,1,0,0,0,450,451,1,0,0,0,451,456,3,16,8,0,452,453,5,370,0,
        0,453,455,3,16,8,0,454,452,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,
        0,456,457,1,0,0,0,457,15,1,0,0,0,458,456,1,0,0,0,459,460,5,1,0,0,
        460,464,5,26,0,0,461,462,5,78,0,0,462,463,5,115,0,0,463,465,5,56,
        0,0,464,461,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,469,3,128,
        64,0,467,468,5,2,0,0,468,470,3,324,162,0,469,467,1,0,0,0,469,470,
        1,0,0,0,470,674,1,0,0,0,471,472,5,1,0,0,472,476,5,81,0,0,473,474,
        5,78,0,0,474,475,5,115,0,0,475,477,5,56,0,0,476,473,1,0,0,0,476,
        477,1,0,0,0,477,478,1,0,0,0,478,481,3,132,66,0,479,480,5,2,0,0,480,
        482,3,324,162,0,481,479,1,0,0,0,481,482,1,0,0,0,482,674,1,0,0,0,
        483,484,5,1,0,0,484,488,5,133,0,0,485,486,5,78,0,0,486,487,5,115,
        0,0,487,489,5,56,0,0,488,485,1,0,0,0,488,489,1,0,0,0,489,490,1,0,
        0,0,490,493,3,134,67,0,491,492,5,2,0,0,492,494,3,324,162,0,493,491,
        1,0,0,0,493,494,1,0,0,0,494,674,1,0,0,0,495,496,5,15,0,0,496,499,
        3,24,12,0,497,498,5,68,0,0,498,500,3,330,165,0,499,497,1,0,0,0,499,
        500,1,0,0,0,500,674,1,0,0,0,501,502,5,22,0,0,502,505,5,26,0,0,503,
        504,5,78,0,0,504,506,5,56,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,
        507,1,0,0,0,507,510,3,324,162,0,508,509,5,80,0,0,509,511,3,24,12,
        0,510,508,1,0,0,0,510,511,1,0,0,0,511,674,1,0,0,0,512,513,5,22,0,
        0,513,516,5,81,0,0,514,515,5,78,0,0,515,517,5,56,0,0,516,514,1,0,
        0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,521,3,324,162,0,519,520,
        5,80,0,0,520,522,3,24,12,0,521,519,1,0,0,0,521,522,1,0,0,0,522,674,
        1,0,0,0,523,524,5,22,0,0,524,527,5,133,0,0,525,526,5,78,0,0,526,
        528,5,56,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,529,1,0,0,0,529,
        532,3,324,162,0,530,531,5,80,0,0,531,533,3,24,12,0,532,530,1,0,0,
        0,532,533,1,0,0,0,533,674,1,0,0,0,534,535,5,27,0,0,535,538,5,26,
        0,0,536,537,5,78,0,0,537,539,5,56,0,0,538,536,1,0,0,0,538,539,1,
        0,0,0,539,540,1,0,0,0,540,541,3,324,162,0,541,542,5,364,0,0,542,
        674,1,0,0,0,543,544,5,40,0,0,544,545,5,191,0,0,545,674,3,316,158,
        0,546,547,5,44,0,0,547,674,3,24,12,0,548,549,5,50,0,0,549,552,5,
        26,0,0,550,551,5,78,0,0,551,553,5,56,0,0,552,550,1,0,0,0,552,553,
        1,0,0,0,553,554,1,0,0,0,554,674,3,324,162,0,555,556,5,50,0,0,556,
        559,5,81,0,0,557,558,5,78,0,0,558,560,5,56,0,0,559,557,1,0,0,0,559,
        560,1,0,0,0,560,561,1,0,0,0,561,674,3,324,162,0,562,563,5,50,0,0,
        563,566,5,133,0,0,564,565,5,78,0,0,565,567,5,56,0,0,566,564,1,0,
        0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,674,3,324,162,0,569,570,
        5,50,0,0,570,674,3,24,12,0,571,573,5,67,0,0,572,574,3,24,12,0,573,
        572,1,0,0,0,573,574,1,0,0,0,574,674,1,0,0,0,575,576,5,103,0,0,576,
        579,5,81,0,0,577,578,5,78,0,0,578,580,5,56,0,0,579,577,1,0,0,0,579,
        580,1,0,0,0,580,581,1,0,0,0,581,584,3,324,162,0,582,583,5,80,0,0,
        583,585,3,24,12,0,584,582,1,0,0,0,584,585,1,0,0,0,585,674,1,0,0,
        0,586,587,5,103,0,0,587,590,5,133,0,0,588,589,5,78,0,0,589,591,5,
        56,0,0,590,588,1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,592,595,3,
        324,162,0,593,594,5,80,0,0,594,596,3,24,12,0,595,593,1,0,0,0,595,
        596,1,0,0,0,596,674,1,0,0,0,597,598,5,109,0,0,598,601,5,26,0,0,599,
        600,5,78,0,0,600,602,5,56,0,0,601,599,1,0,0,0,601,602,1,0,0,0,602,
        603,1,0,0,0,603,604,3,324,162,0,604,605,3,136,68,0,605,674,1,0,0,
        0,606,607,5,109,0,0,607,610,5,26,0,0,608,609,5,78,0,0,609,611,5,
        56,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,613,3,
        324,162,0,613,614,5,27,0,0,614,615,5,364,0,0,615,674,1,0,0,0,616,
        617,5,109,0,0,617,620,5,26,0,0,618,619,5,78,0,0,619,621,5,56,0,0,
        620,618,1,0,0,0,620,621,1,0,0,0,621,622,1,0,0,0,622,623,3,324,162,
        0,623,624,5,138,0,0,624,625,3,22,11,0,625,674,1,0,0,0,626,627,5,
        109,0,0,627,630,5,26,0,0,628,629,5,78,0,0,629,631,5,56,0,0,630,628,
        1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,674,3,128,64,0,633,634,
        5,109,0,0,634,635,5,122,0,0,635,636,5,18,0,0,636,674,3,316,158,0,
        637,638,5,109,0,0,638,674,3,122,61,0,639,640,5,111,0,0,640,650,3,
        24,12,0,641,642,5,170,0,0,642,643,5,47,0,0,643,651,5,364,0,0,644,
        645,5,170,0,0,645,646,5,187,0,0,646,651,5,364,0,0,647,648,5,170,
        0,0,648,649,5,162,0,0,649,651,3,330,165,0,650,641,1,0,0,0,650,644,
        1,0,0,0,650,647,1,0,0,0,651,674,1,0,0,0,652,653,5,138,0,0,653,674,
        5,177,0,0,654,655,5,139,0,0,655,658,5,26,0,0,656,657,5,78,0,0,657,
        659,5,56,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,
        661,3,324,162,0,661,662,5,170,0,0,662,663,3,324,162,0,663,674,1,
        0,0,0,664,665,5,140,0,0,665,666,3,24,12,0,666,667,5,68,0,0,667,668,
        3,330,165,0,668,674,1,0,0,0,669,670,5,181,0,0,670,671,3,18,9,0,671,
        672,3,248,124,0,672,674,1,0,0,0,673,459,1,0,0,0,673,471,1,0,0,0,
        673,483,1,0,0,0,673,495,1,0,0,0,673,501,1,0,0,0,673,512,1,0,0,0,
        673,523,1,0,0,0,673,534,1,0,0,0,673,543,1,0,0,0,673,546,1,0,0,0,
        673,548,1,0,0,0,673,555,1,0,0,0,673,562,1,0,0,0,673,569,1,0,0,0,
        673,571,1,0,0,0,673,575,1,0,0,0,673,586,1,0,0,0,673,597,1,0,0,0,
        673,606,1,0,0,0,673,616,1,0,0,0,673,626,1,0,0,0,673,633,1,0,0,0,
        673,637,1,0,0,0,673,639,1,0,0,0,673,652,1,0,0,0,673,654,1,0,0,0,
        673,664,1,0,0,0,673,669,1,0,0,0,674,17,1,0,0,0,675,680,3,20,10,0,
        676,677,5,370,0,0,677,679,3,20,10,0,678,676,1,0,0,0,679,682,1,0,
        0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,19,1,0,0,0,682,680,1,0,0,
        0,683,684,3,324,162,0,684,685,5,375,0,0,685,686,3,316,158,0,686,
        21,1,0,0,0,687,688,7,0,0,0,688,23,1,0,0,0,689,690,5,126,0,0,690,
        695,3,316,158,0,691,692,5,126,0,0,692,693,5,77,0,0,693,695,5,364,
        0,0,694,689,1,0,0,0,694,691,1,0,0,0,695,25,1,0,0,0,696,697,5,15,
        0,0,697,698,5,46,0,0,698,700,3,330,165,0,699,701,3,104,52,0,700,
        699,1,0,0,0,700,701,1,0,0,0,701,27,1,0,0,0,702,703,5,21,0,0,703,
        704,5,162,0,0,704,706,3,330,165,0,705,707,3,24,12,0,706,705,1,0,
        0,0,706,707,1,0,0,0,707,29,1,0,0,0,708,709,5,40,0,0,709,710,5,68,
        0,0,710,712,3,330,165,0,711,713,3,104,52,0,712,711,1,0,0,0,712,713,
        1,0,0,0,713,715,1,0,0,0,714,716,3,248,124,0,715,714,1,0,0,0,715,
        716,1,0,0,0,716,31,1,0,0,0,717,725,5,15,0,0,718,721,5,29,0,0,719,
        720,5,121,0,0,720,722,5,140,0,0,721,719,1,0,0,0,721,722,1,0,0,0,
        722,725,1,0,0,0,723,725,5,140,0,0,724,717,1,0,0,0,724,718,1,0,0,
        0,724,723,1,0,0,0,725,727,1,0,0,0,726,728,5,164,0,0,727,726,1,0,
        0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,733,5,162,0,0,730,731,5,
        78,0,0,731,732,5,115,0,0,732,734,5,56,0,0,733,730,1,0,0,0,733,734,
        1,0,0,0,734,735,1,0,0,0,735,737,3,330,165,0,736,738,3,106,53,0,737,
        736,1,0,0,0,737,738,1,0,0,0,738,740,1,0,0,0,739,741,3,104,52,0,740,
        739,1,0,0,0,740,741,1,0,0,0,741,743,1,0,0,0,742,744,3,112,56,0,743,
        742,1,0,0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,747,3,114,57,0,746,
        745,1,0,0,0,746,747,1,0,0,0,747,749,1,0,0,0,748,750,3,110,55,0,749,
        748,1,0,0,0,749,750,1,0,0,0,750,33,1,0,0,0,751,752,7,1,0,0,752,756,
        5,33,0,0,753,754,5,78,0,0,754,755,5,115,0,0,755,757,5,56,0,0,756,
        753,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,760,3,352,176,0,
        759,761,3,104,52,0,760,759,1,0,0,0,760,761,1,0,0,0,761,763,1,0,0,
        0,762,764,3,124,62,0,763,762,1,0,0,0,763,764,1,0,0,0,764,767,1,0,
        0,0,765,766,5,27,0,0,766,768,5,364,0,0,767,765,1,0,0,0,767,768,1,
        0,0,0,768,35,1,0,0,0,769,777,5,15,0,0,770,773,5,29,0,0,771,772,5,
        121,0,0,772,774,5,140,0,0,773,771,1,0,0,0,773,774,1,0,0,0,774,777,
        1,0,0,0,775,777,5,140,0,0,776,769,1,0,0,0,776,770,1,0,0,0,776,775,
        1,0,0,0,777,778,1,0,0,0,778,782,5,46,0,0,779,780,5,78,0,0,780,781,
        5,115,0,0,781,783,5,56,0,0,782,779,1,0,0,0,782,783,1,0,0,0,783,784,
        1,0,0,0,784,786,3,330,165,0,785,787,3,106,53,0,786,785,1,0,0,0,786,
        787,1,0,0,0,787,789,1,0,0,0,788,790,3,104,52,0,789,788,1,0,0,0,789,
        790,1,0,0,0,790,791,1,0,0,0,791,792,3,84,42,0,792,793,3,88,44,0,
        793,37,1,0,0,0,794,795,7,1,0,0,795,796,5,100,0,0,796,800,5,186,0,
        0,797,798,5,78,0,0,798,799,5,115,0,0,799,801,5,56,0,0,800,797,1,
        0,0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,804,3,330,165,0,803,805,
        3,106,53,0,804,803,1,0,0,0,804,805,1,0,0,0,805,807,1,0,0,0,806,808,
        3,104,52,0,807,806,1,0,0,0,807,808,1,0,0,0,808,814,1,0,0,0,809,810,
        5,193,0,0,810,812,5,168,0,0,811,813,5,362,0,0,812,811,1,0,0,0,812,
        813,1,0,0,0,813,815,1,0,0,0,814,809,1,0,0,0,814,815,1,0,0,0,815,
        817,1,0,0,0,816,818,3,108,54,0,817,816,1,0,0,0,817,818,1,0,0,0,818,
        820,1,0,0,0,819,821,3,112,56,0,820,819,1,0,0,0,820,821,1,0,0,0,821,
        822,1,0,0,0,822,823,3,110,55,0,823,39,1,0,0,0,824,825,7,1,0,0,825,
        826,5,104,0,0,826,830,5,186,0,0,827,828,5,78,0,0,828,829,5,115,0,
        0,829,831,5,56,0,0,830,827,1,0,0,0,830,831,1,0,0,0,831,832,1,0,0,
        0,832,834,3,330,165,0,833,835,3,106,53,0,834,833,1,0,0,0,834,835,
        1,0,0,0,835,837,1,0,0,0,836,838,3,104,52,0,837,836,1,0,0,0,837,838,
        1,0,0,0,838,840,1,0,0,0,839,841,3,112,56,0,840,839,1,0,0,0,840,841,
        1,0,0,0,841,847,1,0,0,0,842,848,3,108,54,0,843,845,3,114,57,0,844,
        846,5,129,0,0,845,844,1,0,0,0,845,846,1,0,0,0,846,848,1,0,0,0,847,
        842,1,0,0,0,847,843,1,0,0,0,848,849,1,0,0,0,849,850,3,110,55,0,850,
        41,1,0,0,0,851,854,7,1,0,0,852,853,5,121,0,0,853,855,5,140,0,0,854,
        852,1,0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,860,5,186,0,0,857,
        858,5,78,0,0,858,859,5,115,0,0,859,861,5,56,0,0,860,857,1,0,0,0,
        860,861,1,0,0,0,861,862,1,0,0,0,862,864,3,330,165,0,863,865,3,106,
        53,0,864,863,1,0,0,0,864,865,1,0,0,0,865,867,1,0,0,0,866,868,3,104,
        52,0,867,866,1,0,0,0,867,868,1,0,0,0,868,870,1,0,0,0,869,871,3,112,
        56,0,870,869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,873,3,110,
        55,0,873,43,1,0,0,0,874,875,7,2,0,0,875,45,1,0,0,0,876,877,5,91,
        0,0,877,878,5,364,0,0,878,879,5,178,0,0,879,880,5,364,0,0,880,47,
        1,0,0,0,881,909,5,276,0,0,882,883,5,277,0,0,883,884,5,278,0,0,884,
        909,5,364,0,0,885,886,5,279,0,0,886,887,5,280,0,0,887,909,5,364,
        0,0,888,889,5,281,0,0,889,890,7,3,0,0,890,909,5,364,0,0,891,892,
        5,284,0,0,892,893,5,18,0,0,893,898,3,46,23,0,894,895,5,370,0,0,895,
        897,3,46,23,0,896,894,1,0,0,0,897,900,1,0,0,0,898,896,1,0,0,0,898,
        899,1,0,0,0,899,909,1,0,0,0,900,898,1,0,0,0,901,902,5,285,0,0,902,
        903,5,278,0,0,903,906,5,364,0,0,904,905,5,286,0,0,905,907,5,364,
        0,0,906,904,1,0,0,0,906,907,1,0,0,0,907,909,1,0,0,0,908,881,1,0,
        0,0,908,882,1,0,0,0,908,885,1,0,0,0,908,888,1,0,0,0,908,891,1,0,
        0,0,908,901,1,0,0,0,909,49,1,0,0,0,910,911,5,115,0,0,911,923,5,270,
        0,0,912,915,5,270,0,0,913,914,5,193,0,0,914,916,3,44,22,0,915,913,
        1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,918,5,18,0,0,918,923,
        5,364,0,0,919,920,5,270,0,0,920,921,5,193,0,0,921,923,3,48,24,0,
        922,910,1,0,0,0,922,912,1,0,0,0,922,919,1,0,0,0,923,51,1,0,0,0,924,
        925,5,289,0,0,925,926,5,290,0,0,926,927,5,364,0,0,927,53,1,0,0,0,
        928,933,3,168,84,0,929,933,3,166,83,0,930,933,5,8,0,0,931,933,5,
        253,0,0,932,928,1,0,0,0,932,929,1,0,0,0,932,930,1,0,0,0,932,931,
        1,0,0,0,933,55,1,0,0,0,934,935,5,291,0,0,935,940,3,54,27,0,936,937,
        5,370,0,0,937,939,3,54,27,0,938,936,1,0,0,0,939,942,1,0,0,0,940,
        938,1,0,0,0,940,941,1,0,0,0,941,945,1,0,0,0,942,940,1,0,0,0,943,
        944,5,268,0,0,944,946,3,170,85,0,945,943,1,0,0,0,945,946,1,0,0,0,
        946,57,1,0,0,0,947,953,5,101,0,0,948,953,5,8,0,0,949,953,5,253,0,
        0,950,951,7,4,0,0,951,953,5,364,0,0,952,947,1,0,0,0,952,948,1,0,
        0,0,952,949,1,0,0,0,952,950,1,0,0,0,953,59,1,0,0,0,954,955,5,295,
        0,0,955,960,3,58,29,0,956,957,5,370,0,0,957,959,3,58,29,0,958,956,
        1,0,0,0,959,962,1,0,0,0,960,958,1,0,0,0,960,961,1,0,0,0,961,61,1,
        0,0,0,962,960,1,0,0,0,963,964,3,352,176,0,964,965,5,375,0,0,965,
        971,3,342,171,0,966,968,5,107,0,0,967,969,5,375,0,0,968,967,1,0,
        0,0,968,969,1,0,0,0,969,970,1,0,0,0,970,972,3,342,171,0,971,966,
        1,0,0,0,971,972,1,0,0,0,972,978,1,0,0,0,973,975,5,105,0,0,974,976,
        5,375,0,0,975,974,1,0,0,0,975,976,1,0,0,0,976,977,1,0,0,0,977,979,
        3,342,171,0,978,973,1,0,0,0,978,979,1,0,0,0,979,981,1,0,0,0,980,
        982,7,5,0,0,981,980,1,0,0,0,981,982,1,0,0,0,982,986,1,0,0,0,983,
        984,5,202,0,0,984,986,5,364,0,0,985,963,1,0,0,0,985,983,1,0,0,0,
        986,63,1,0,0,0,987,988,5,153,0,0,988,993,3,62,31,0,989,990,5,370,
        0,0,990,992,3,62,31,0,991,989,1,0,0,0,992,995,1,0,0,0,993,991,1,
        0,0,0,993,994,1,0,0,0,994,65,1,0,0,0,995,993,1,0,0,0,996,999,5,80,
        0,0,997,1000,3,352,176,0,998,1000,5,364,0,0,999,997,1,0,0,0,999,
        998,1,0,0,0,1000,67,1,0,0,0,1001,1002,5,29,0,0,1002,1004,5,196,0,
        0,1003,1005,3,70,35,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,1006,
        1,0,0,0,1006,1011,3,352,176,0,1007,1008,5,370,0,0,1008,1010,3,352,
        176,0,1009,1007,1,0,0,0,1010,1013,1,0,0,0,1011,1009,1,0,0,0,1011,
        1012,1,0,0,0,1012,1015,1,0,0,0,1013,1011,1,0,0,0,1014,1016,3,104,
        52,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,
        1019,3,50,25,0,1018,1020,3,60,30,0,1019,1018,1,0,0,0,1019,1020,1,
        0,0,0,1020,1022,1,0,0,0,1021,1023,3,52,26,0,1022,1021,1,0,0,0,1022,
        1023,1,0,0,0,1023,1025,1,0,0,0,1024,1026,3,66,33,0,1025,1024,1,0,
        0,0,1025,1026,1,0,0,0,1026,1030,1,0,0,0,1027,1028,5,38,0,0,1028,
        1029,5,201,0,0,1029,1031,3,154,77,0,1030,1027,1,0,0,0,1030,1031,
        1,0,0,0,1031,1038,1,0,0,0,1032,1033,5,38,0,0,1033,1036,5,33,0,0,
        1034,1037,3,336,168,0,1035,1037,5,253,0,0,1036,1034,1,0,0,0,1036,
        1035,1,0,0,0,1037,1039,1,0,0,0,1038,1032,1,0,0,0,1038,1039,1,0,0,
        0,1039,1041,1,0,0,0,1040,1042,3,56,28,0,1041,1040,1,0,0,0,1041,1042,
        1,0,0,0,1042,1044,1,0,0,0,1043,1045,3,64,32,0,1044,1043,1,0,0,0,
        1044,1045,1,0,0,0,1045,69,1,0,0,0,1046,1047,5,121,0,0,1047,1052,
        5,140,0,0,1048,1049,5,78,0,0,1049,1050,5,115,0,0,1050,1052,5,56,
        0,0,1051,1046,1,0,0,0,1051,1048,1,0,0,0,1052,71,1,0,0,0,1053,1059,
        3,330,165,0,1054,1055,3,352,176,0,1055,1056,5,373,0,0,1056,1057,
        5,366,0,0,1057,1059,1,0,0,0,1058,1053,1,0,0,0,1058,1054,1,0,0,0,
        1059,73,1,0,0,0,1060,1062,3,352,176,0,1061,1063,3,104,52,0,1062,
        1061,1,0,0,0,1062,1063,1,0,0,0,1063,1064,1,0,0,0,1064,1065,5,119,
        0,0,1065,1066,3,72,36,0,1066,75,1,0,0,0,1067,1070,3,352,176,0,1068,
        1070,3,342,171,0,1069,1067,1,0,0,0,1069,1068,1,0,0,0,1070,77,1,0,
        0,0,1071,1077,3,76,38,0,1072,1073,3,76,38,0,1073,1074,7,6,0,0,1074,
        1075,3,76,38,0,1075,1077,1,0,0,0,1076,1071,1,0,0,0,1076,1072,1,0,
        0,0,1077,79,1,0,0,0,1078,1080,5,29,0,0,1079,1081,5,145,0,0,1080,
        1079,1,0,0,0,1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,1084,5,199,
        0,0,1083,1085,3,70,35,0,1084,1083,1,0,0,0,1084,1085,1,0,0,0,1085,
        1086,1,0,0,0,1086,1091,3,74,37,0,1087,1088,5,370,0,0,1088,1090,3,
        74,37,0,1089,1087,1,0,0,0,1090,1093,1,0,0,0,1091,1089,1,0,0,0,1091,
        1092,1,0,0,0,1092,1095,1,0,0,0,1093,1091,1,0,0,0,1094,1096,3,66,
        33,0,1095,1094,1,0,0,0,1095,1096,1,0,0,0,1096,1099,1,0,0,0,1097,
        1098,5,65,0,0,1098,1100,5,149,0,0,1099,1097,1,0,0,0,1099,1100,1,
        0,0,0,1100,1101,1,0,0,0,1101,1102,5,183,0,0,1102,1105,3,78,39,0,
        1103,1104,5,10,0,0,1104,1106,7,7,0,0,1105,1103,1,0,0,0,1105,1106,
        1,0,0,0,1106,1115,1,0,0,0,1107,1113,5,170,0,0,1108,1114,3,154,77,
        0,1109,1114,5,4,0,0,1110,1111,5,4,0,0,1111,1112,5,268,0,0,1112,1114,
        3,154,77,0,1113,1108,1,0,0,0,1113,1109,1,0,0,0,1113,1110,1,0,0,0,
        1114,1116,1,0,0,0,1115,1107,1,0,0,0,1115,1116,1,0,0,0,1116,81,1,
        0,0,0,1117,1126,3,34,17,0,1118,1126,3,36,18,0,1119,1126,3,38,19,
        0,1120,1126,3,40,20,0,1121,1126,3,32,16,0,1122,1126,3,42,21,0,1123,
        1126,3,68,34,0,1124,1126,3,80,40,0,1125,1117,1,0,0,0,1125,1118,1,
        0,0,0,1125,1119,1,0,0,0,1125,1120,1,0,0,0,1125,1121,1,0,0,0,1125,
        1122,1,0,0,0,1125,1123,1,0,0,0,1125,1124,1,0,0,0,1126,83,1,0,0,0,
        1127,1128,5,381,0,0,1128,1133,3,86,43,0,1129,1130,5,370,0,0,1130,
        1132,3,86,43,0,1131,1129,1,0,0,0,1132,1135,1,0,0,0,1133,1131,1,0,
        0,0,1133,1134,1,0,0,0,1134,1136,1,0,0,0,1135,1133,1,0,0,0,1136,1137,
        5,391,0,0,1137,85,1,0,0,0,1138,1139,3,352,176,0,1139,1161,3,310,
        155,0,1140,1141,4,43,0,1,1141,1142,5,38,0,0,1142,1143,3,342,171,
        0,1143,1144,6,43,-1,0,1144,1160,1,0,0,0,1145,1146,4,43,1,1,1146,
        1147,5,58,0,0,1147,1148,3,316,158,0,1148,1149,6,43,-1,0,1149,1160,
        1,0,0,0,1150,1151,4,43,2,1,1151,1152,5,75,0,0,1152,1160,6,43,-1,
        0,1153,1154,4,43,3,1,1154,1155,5,83,0,0,1155,1160,6,43,-1,0,1156,
        1157,4,43,4,1,1157,1158,5,89,0,0,1158,1160,6,43,-1,0,1159,1140,1,
        0,0,0,1159,1145,1,0,0,0,1159,1150,1,0,0,0,1159,1153,1,0,0,0,1159,
        1156,1,0,0,0,1160,1163,1,0,0,0,1161,1159,1,0,0,0,1161,1162,1,0,0,
        0,1162,87,1,0,0,0,1163,1161,1,0,0,0,1164,1166,3,90,45,0,1165,1164,
        1,0,0,0,1165,1166,1,0,0,0,1166,1189,1,0,0,0,1167,1168,4,44,5,1,1168,
        1169,3,94,47,0,1169,1170,6,44,-1,0,1170,1188,1,0,0,0,1171,1172,4,
        44,6,1,1172,1173,3,96,48,0,1173,1174,6,44,-1,0,1174,1188,1,0,0,0,
        1175,1176,4,44,7,1,1176,1177,3,98,49,0,1177,1178,6,44,-1,0,1178,
        1188,1,0,0,0,1179,1180,4,44,8,1,1180,1181,3,100,50,0,1181,1182,6,
        44,-1,0,1182,1188,1,0,0,0,1183,1184,4,44,9,1,1184,1185,3,102,51,
        0,1185,1186,6,44,-1,0,1186,1188,1,0,0,0,1187,1167,1,0,0,0,1187,1171,
        1,0,0,0,1187,1175,1,0,0,0,1187,1179,1,0,0,0,1187,1183,1,0,0,0,1188,
        1191,1,0,0,0,1189,1187,1,0,0,0,1189,1190,1,0,0,0,1190,89,1,0,0,0,
        1191,1189,1,0,0,0,1192,1193,5,132,0,0,1193,1194,5,91,0,0,1194,1195,
        3,312,156,0,1195,91,1,0,0,0,1196,1203,3,352,176,0,1197,1200,3,352,
        176,0,1198,1199,5,381,0,0,1199,1201,5,391,0,0,1200,1198,1,0,0,0,
        1200,1201,1,0,0,0,1201,1204,1,0,0,0,1202,1204,3,342,171,0,1203,1197,
        1,0,0,0,1203,1202,1,0,0,0,1204,93,1,0,0,0,1205,1206,5,155,0,0,1206,
        1207,5,381,0,0,1207,1208,3,352,176,0,1208,1212,5,381,0,0,1209,1211,
        3,92,46,0,1210,1209,1,0,0,0,1211,1214,1,0,0,0,1212,1210,1,0,0,0,
        1212,1213,1,0,0,0,1213,1215,1,0,0,0,1214,1212,1,0,0,0,1215,1216,
        5,391,0,0,1216,1217,5,391,0,0,1217,95,1,0,0,0,1218,1219,5,97,0,0,
        1219,1229,5,381,0,0,1220,1230,5,362,0,0,1221,1222,5,107,0,0,1222,
        1223,5,362,0,0,1223,1224,5,105,0,0,1224,1230,5,362,0,0,1225,1226,
        5,105,0,0,1226,1227,5,362,0,0,1227,1228,5,107,0,0,1228,1230,5,362,
        0,0,1229,1220,1,0,0,0,1229,1221,1,0,0,0,1229,1225,1,0,0,0,1230,1231,
        1,0,0,0,1231,1232,5,391,0,0,1232,97,1,0,0,0,1233,1234,5,94,0,0,1234,
        1235,5,381,0,0,1235,1236,3,352,176,0,1236,1240,5,381,0,0,1237,1239,
        3,92,46,0,1238,1237,1,0,0,0,1239,1242,1,0,0,0,1240,1238,1,0,0,0,
        1240,1241,1,0,0,0,1241,1243,1,0,0,0,1242,1240,1,0,0,0,1243,1244,
        5,391,0,0,1244,1245,5,391,0,0,1245,99,1,0,0,0,1246,1247,5,136,0,
        0,1247,1258,5,381,0,0,1248,1249,5,107,0,0,1249,1250,3,352,176,0,
        1250,1251,5,105,0,0,1251,1252,3,352,176,0,1252,1259,1,0,0,0,1253,
        1254,5,105,0,0,1254,1255,3,352,176,0,1255,1256,5,107,0,0,1256,1257,
        3,352,176,0,1257,1259,1,0,0,0,1258,1248,1,0,0,0,1258,1253,1,0,0,
        0,1259,1260,1,0,0,0,1260,1261,5,391,0,0,1261,101,1,0,0,0,1262,1263,
        5,153,0,0,1263,1264,5,381,0,0,1264,1265,3,282,141,0,1265,1266,5,
        391,0,0,1266,103,1,0,0,0,1267,1268,5,119,0,0,1268,1271,5,23,0,0,
        1269,1272,3,352,176,0,1270,1272,5,364,0,0,1271,1269,1,0,0,0,1271,
        1270,1,0,0,0,1272,105,1,0,0,0,1273,1274,5,184,0,0,1274,1275,5,364,
        0,0,1275,107,1,0,0,0,1276,1277,5,170,0,0,1277,1278,3,330,165,0,1278,
        109,1,0,0,0,1279,1280,5,10,0,0,1280,1281,3,230,115,0,1281,111,1,
        0,0,0,1282,1283,5,381,0,0,1283,1288,3,126,63,0,1284,1285,5,370,0,
        0,1285,1287,3,126,63,0,1286,1284,1,0,0,0,1287,1290,1,0,0,0,1288,
        1286,1,0,0,0,1288,1289,1,0,0,0,1289,1291,1,0,0,0,1290,1288,1,0,0,
        0,1291,1292,5,391,0,0,1292,1298,1,0,0,0,1293,1294,5,10,0,0,1294,
        1298,3,330,165,0,1295,1296,5,10,0,0,1296,1298,3,328,164,0,1297,1282,
        1,0,0,0,1297,1293,1,0,0,0,1297,1295,1,0,0,0,1298,113,1,0,0,0,1299,
        1326,3,124,62,0,1300,1301,4,57,10,1,1301,1302,3,254,127,0,1302,1303,
        6,57,-1,0,1303,1325,1,0,0,0,1304,1305,4,57,11,1,1305,1306,3,116,
        58,0,1306,1307,6,57,-1,0,1307,1325,1,0,0,0,1308,1309,4,57,12,1,1309,
        1310,3,118,59,0,1310,1311,6,57,-1,0,1311,1325,1,0,0,0,1312,1313,
        4,57,13,1,1313,1314,3,120,60,0,1314,1315,6,57,-1,0,1315,1325,1,0,
        0,0,1316,1317,4,57,14,1,1317,1318,3,122,61,0,1318,1319,6,57,-1,0,
        1319,1325,1,0,0,0,1320,1321,4,57,15,1,1321,1322,3,262,131,0,1322,
        1323,6,57,-1,0,1323,1325,1,0,0,0,1324,1300,1,0,0,0,1324,1304,1,0,
        0,0,1324,1308,1,0,0,0,1324,1312,1,0,0,0,1324,1316,1,0,0,0,1324,1320,
        1,0,0,0,1325,1328,1,0,0,0,1326,1324,1,0,0,0,1326,1327,1,0,0,0,1327,
        115,1,0,0,0,1328,1326,1,0,0,0,1329,1330,5,126,0,0,1330,1331,5,18,
        0,0,1331,1332,3,316,158,0,1332,117,1,0,0,0,1333,1334,5,132,0,0,1334,
        1335,5,91,0,0,1335,1336,3,316,158,0,1336,119,1,0,0,0,1337,1338,5,
        147,0,0,1338,1339,5,18,0,0,1339,1340,3,316,158,0,1340,121,1,0,0,
        0,1341,1342,5,177,0,0,1342,1347,3,140,70,0,1343,1344,5,370,0,0,1344,
        1346,3,140,70,0,1345,1343,1,0,0,0,1346,1349,1,0,0,0,1347,1345,1,
        0,0,0,1347,1348,1,0,0,0,1348,123,1,0,0,0,1349,1347,1,0,0,0,1350,
        1352,5,53,0,0,1351,1353,5,375,0,0,1352,1351,1,0,0,0,1352,1353,1,
        0,0,0,1353,1354,1,0,0,0,1354,1360,3,354,177,0,1355,1357,5,381,0,
        0,1356,1358,3,312,156,0,1357,1356,1,0,0,0,1357,1358,1,0,0,0,1358,
        1359,1,0,0,0,1359,1361,5,391,0,0,1360,1355,1,0,0,0,1360,1361,1,0,
        0,0,1361,125,1,0,0,0,1362,1373,3,128,64,0,1363,1364,5,28,0,0,1364,
        1365,3,352,176,0,1365,1366,5,21,0,0,1366,1367,3,316,158,0,1367,1373,
        1,0,0,0,1368,1369,5,81,0,0,1369,1373,3,132,66,0,1370,1371,5,133,
        0,0,1371,1373,3,134,67,0,1372,1362,1,0,0,0,1372,1363,1,0,0,0,1372,
        1368,1,0,0,0,1372,1370,1,0,0,0,1373,127,1,0,0,0,1374,1375,3,324,
        162,0,1375,1377,3,310,155,0,1376,1378,3,130,65,0,1377,1376,1,0,0,
        0,1377,1378,1,0,0,0,1378,1381,1,0,0,0,1379,1380,5,27,0,0,1380,1382,
        5,364,0,0,1381,1379,1,0,0,0,1381,1382,1,0,0,0,1382,1384,1,0,0,0,
        1383,1385,3,136,68,0,1384,1383,1,0,0,0,1384,1385,1,0,0,0,1385,1388,
        1,0,0,0,1386,1387,5,177,0,0,1387,1389,3,316,158,0,1388,1386,1,0,
        0,0,1388,1389,1,0,0,0,1389,1407,1,0,0,0,1390,1392,3,324,162,0,1391,
        1393,3,310,155,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,1394,1,
        0,0,0,1394,1397,3,130,65,0,1395,1396,5,27,0,0,1396,1398,5,364,0,
        0,1397,1395,1,0,0,0,1397,1398,1,0,0,0,1398,1400,1,0,0,0,1399,1401,
        3,136,68,0,1400,1399,1,0,0,0,1400,1401,1,0,0,0,1401,1404,1,0,0,0,
        1402,1403,5,177,0,0,1403,1405,3,316,158,0,1404,1402,1,0,0,0,1404,
        1405,1,0,0,0,1405,1407,1,0,0,0,1406,1374,1,0,0,0,1406,1390,1,0,0,
        0,1407,129,1,0,0,0,1408,1409,7,8,0,0,1409,1410,3,316,158,0,1410,
        131,1,0,0,0,1411,1412,3,324,162,0,1412,1413,3,316,158,0,1413,1414,
        5,178,0,0,1414,1415,3,310,155,0,1415,1416,5,72,0,0,1416,1417,5,362,
        0,0,1417,133,1,0,0,0,1418,1419,3,324,162,0,1419,1420,3,228,114,0,
        1420,135,1,0,0,0,1421,1422,5,24,0,0,1422,1423,5,381,0,0,1423,1428,
        3,138,69,0,1424,1425,5,370,0,0,1425,1427,3,138,69,0,1426,1424,1,
        0,0,0,1427,1430,1,0,0,0,1428,1426,1,0,0,0,1428,1429,1,0,0,0,1429,
        1431,1,0,0,0,1430,1428,1,0,0,0,1431,1432,5,391,0,0,1432,137,1,0,
        0,0,1433,1439,3,352,176,0,1434,1436,5,381,0,0,1435,1437,3,312,156,
        0,1436,1435,1,0,0,0,1436,1437,1,0,0,0,1437,1438,1,0,0,0,1438,1440,
        5,391,0,0,1439,1434,1,0,0,0,1439,1440,1,0,0,0,1440,139,1,0,0,0,1441,
        1449,3,316,158,0,1442,1450,5,40,0,0,1443,1444,5,170,0,0,1444,1445,
        5,47,0,0,1445,1450,5,364,0,0,1446,1447,5,170,0,0,1447,1448,5,187,
        0,0,1448,1450,5,364,0,0,1449,1442,1,0,0,0,1449,1443,1,0,0,0,1449,
        1446,1,0,0,0,1449,1450,1,0,0,0,1450,141,1,0,0,0,1451,1453,7,9,0,
        0,1452,1454,5,162,0,0,1453,1452,1,0,0,0,1453,1454,1,0,0,0,1454,1455,
        1,0,0,0,1455,1456,3,326,163,0,1456,143,1,0,0,0,1457,1458,7,10,0,
        0,1458,1461,5,33,0,0,1459,1460,5,78,0,0,1460,1462,5,56,0,0,1461,
        1459,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,1465,3,336,
        168,0,1464,1466,3,104,52,0,1465,1464,1,0,0,0,1465,1466,1,0,0,0,1466,
        1489,1,0,0,0,1467,1474,7,10,0,0,1468,1475,5,46,0,0,1469,1471,5,164,
        0,0,1470,1469,1,0,0,0,1470,1471,1,0,0,0,1471,1472,1,0,0,0,1472,1475,
        5,162,0,0,1473,1475,5,186,0,0,1474,1468,1,0,0,0,1474,1470,1,0,0,
        0,1474,1473,1,0,0,0,1475,1478,1,0,0,0,1476,1477,5,78,0,0,1477,1479,
        5,56,0,0,1478,1476,1,0,0,0,1478,1479,1,0,0,0,1479,1480,1,0,0,0,1480,
        1482,3,330,165,0,1481,1483,3,104,52,0,1482,1481,1,0,0,0,1482,1483,
        1,0,0,0,1483,1486,1,0,0,0,1484,1485,5,114,0,0,1485,1487,5,39,0,0,
        1486,1484,1,0,0,0,1486,1487,1,0,0,0,1487,1489,1,0,0,0,1488,1457,
        1,0,0,0,1488,1467,1,0,0,0,1489,145,1,0,0,0,1490,1491,5,56,0,0,1491,
        1492,5,33,0,0,1492,1504,3,336,168,0,1493,1500,5,56,0,0,1494,1501,
        5,46,0,0,1495,1497,5,164,0,0,1496,1495,1,0,0,0,1496,1497,1,0,0,0,
        1497,1498,1,0,0,0,1498,1501,5,162,0,0,1499,1501,5,186,0,0,1500,1494,
        1,0,0,0,1500,1496,1,0,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,
        1502,1,0,0,0,1502,1504,3,330,165,0,1503,1490,1,0,0,0,1503,1493,1,
        0,0,0,1504,147,1,0,0,0,1505,1506,5,57,0,0,1506,1527,3,6,3,0,1507,
        1508,5,57,0,0,1508,1509,5,13,0,0,1509,1527,3,6,3,0,1510,1511,5,57,
        0,0,1511,1512,5,160,0,0,1512,1527,3,6,3,0,1513,1514,5,57,0,0,1514,
        1515,5,127,0,0,1515,1527,3,6,3,0,1516,1517,5,57,0,0,1517,1518,5,
        128,0,0,1518,1527,3,6,3,0,1519,1520,5,57,0,0,1520,1521,5,135,0,0,
        1521,1522,5,175,0,0,1522,1527,3,6,3,0,1523,1524,5,57,0,0,1524,1525,
        5,54,0,0,1525,1527,3,6,3,0,1526,1505,1,0,0,0,1526,1507,1,0,0,0,1526,
        1510,1,0,0,0,1526,1513,1,0,0,0,1526,1516,1,0,0,0,1526,1519,1,0,0,
        0,1526,1523,1,0,0,0,1527,149,1,0,0,0,1528,1530,5,269,0,0,1529,1531,
        3,104,52,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,1531,1535,1,0,0,0,
        1532,1533,5,195,0,0,1533,1534,5,252,0,0,1534,1536,5,65,0,0,1535,
        1532,1,0,0,0,1535,1536,1,0,0,0,1536,1537,1,0,0,0,1537,1538,3,164,
        82,0,1538,1539,5,119,0,0,1539,1540,3,162,81,0,1540,1546,5,68,0,0,
        1541,1547,3,152,76,0,1542,1547,5,4,0,0,1543,1544,5,4,0,0,1544,1545,
        5,268,0,0,1545,1547,3,152,76,0,1546,1541,1,0,0,0,1546,1542,1,0,0,
        0,1546,1543,1,0,0,0,1547,1567,1,0,0,0,1548,1550,5,269,0,0,1549,1551,
        3,104,52,0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,1551,1555,1,0,0,0,
        1552,1553,5,231,0,0,1553,1554,5,252,0,0,1554,1556,5,65,0,0,1555,
        1552,1,0,0,0,1555,1556,1,0,0,0,1556,1557,1,0,0,0,1557,1558,3,154,
        77,0,1558,1564,5,68,0,0,1559,1565,3,170,85,0,1560,1565,5,4,0,0,1561,
        1562,5,4,0,0,1562,1563,5,268,0,0,1563,1565,3,170,85,0,1564,1559,
        1,0,0,0,1564,1560,1,0,0,0,1564,1561,1,0,0,0,1565,1567,1,0,0,0,1566,
        1528,1,0,0,0,1566,1548,1,0,0,0,1567,151,1,0,0,0,1568,1573,3,168,
        84,0,1569,1570,5,370,0,0,1570,1572,3,168,84,0,1571,1569,1,0,0,0,
        1572,1575,1,0,0,0,1573,1571,1,0,0,0,1573,1574,1,0,0,0,1574,153,1,
        0,0,0,1575,1573,1,0,0,0,1576,1581,3,166,83,0,1577,1578,5,370,0,0,
        1578,1580,3,166,83,0,1579,1577,1,0,0,0,1580,1583,1,0,0,0,1581,1579,
        1,0,0,0,1581,1582,1,0,0,0,1582,155,1,0,0,0,1583,1581,1,0,0,0,1584,
        1586,5,195,0,0,1585,1587,3,104,52,0,1586,1585,1,0,0,0,1586,1587,
        1,0,0,0,1587,1588,1,0,0,0,1588,1589,3,164,82,0,1589,1590,5,119,0,
        0,1590,1591,3,162,81,0,1591,1599,1,0,0,0,1592,1593,5,370,0,0,1593,
        1594,3,164,82,0,1594,1595,5,119,0,0,1595,1596,3,162,81,0,1596,1598,
        1,0,0,0,1597,1592,1,0,0,0,1598,1601,1,0,0,0,1599,1597,1,0,0,0,1599,
        1600,1,0,0,0,1600,1602,1,0,0,0,1601,1599,1,0,0,0,1602,1603,5,170,
        0,0,1603,1604,3,170,85,0,1604,1605,3,158,79,0,1605,1639,1,0,0,0,
        1606,1608,5,195,0,0,1607,1609,3,104,52,0,1608,1607,1,0,0,0,1608,
        1609,1,0,0,0,1609,1610,1,0,0,0,1610,1611,3,154,77,0,1611,1612,5,
        170,0,0,1612,1616,3,170,85,0,1613,1614,5,193,0,0,1614,1615,5,231,
        0,0,1615,1617,5,252,0,0,1616,1613,1,0,0,0,1616,1617,1,0,0,0,1617,
        1619,1,0,0,0,1618,1620,3,160,80,0,1619,1618,1,0,0,0,1619,1620,1,
        0,0,0,1620,1639,1,0,0,0,1621,1622,5,195,0,0,1622,1623,5,32,0,0,1623,
        1632,5,267,0,0,1624,1625,5,381,0,0,1625,1626,3,164,82,0,1626,1627,
        5,119,0,0,1627,1628,3,162,81,0,1628,1629,5,391,0,0,1629,1633,1,0,
        0,0,1630,1631,5,119,0,0,1631,1633,3,162,81,0,1632,1624,1,0,0,0,1632,
        1630,1,0,0,0,1633,1634,1,0,0,0,1634,1635,5,170,0,0,1635,1636,3,170,
        85,0,1636,1637,3,158,79,0,1637,1639,1,0,0,0,1638,1584,1,0,0,0,1638,
        1606,1,0,0,0,1638,1621,1,0,0,0,1639,157,1,0,0,0,1640,1641,5,193,
        0,0,1641,1642,5,195,0,0,1642,1644,5,252,0,0,1643,1640,1,0,0,0,1643,
        1644,1,0,0,0,1644,1646,1,0,0,0,1645,1647,3,160,80,0,1646,1645,1,
        0,0,0,1646,1647,1,0,0,0,1647,159,1,0,0,0,1648,1649,5,193,0,0,1649,
        1650,5,140,0,0,1650,1651,5,252,0,0,1651,161,1,0,0,0,1652,1666,3,
        336,168,0,1653,1666,3,330,165,0,1654,1657,5,366,0,0,1655,1657,3,
        352,176,0,1656,1654,1,0,0,0,1656,1655,1,0,0,0,1657,1658,1,0,0,0,
        1658,1660,5,373,0,0,1659,1656,1,0,0,0,1659,1660,1,0,0,0,1660,1663,
        1,0,0,0,1661,1664,5,366,0,0,1662,1664,3,352,176,0,1663,1661,1,0,
        0,0,1663,1662,1,0,0,0,1664,1666,1,0,0,0,1665,1652,1,0,0,0,1665,1653,
        1,0,0,0,1665,1659,1,0,0,0,1666,163,1,0,0,0,1667,1672,3,198,99,0,
        1668,1669,5,370,0,0,1669,1671,3,198,99,0,1670,1668,1,0,0,0,1671,
        1674,1,0,0,0,1672,1670,1,0,0,0,1672,1673,1,0,0,0,1673,165,1,0,0,
        0,1674,1672,1,0,0,0,1675,1676,3,352,176,0,1676,167,1,0,0,0,1677,
        1680,5,205,0,0,1678,1680,3,352,176,0,1679,1677,1,0,0,0,1679,1678,
        1,0,0,0,1680,169,1,0,0,0,1681,1686,3,172,86,0,1682,1683,5,370,0,
        0,1683,1685,3,172,86,0,1684,1682,1,0,0,0,1685,1688,1,0,0,0,1686,
        1684,1,0,0,0,1686,1687,1,0,0,0,1687,171,1,0,0,0,1688,1686,1,0,0,
        0,1689,1692,3,168,84,0,1690,1692,3,166,83,0,1691,1689,1,0,0,0,1691,
        1690,1,0,0,0,1692,173,1,0,0,0,1693,1695,5,149,0,0,1694,1696,3,204,
        102,0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,175,1,0,0,0,1697,
        1699,5,85,0,0,1698,1700,3,204,102,0,1699,1698,1,0,0,0,1699,1700,
        1,0,0,0,1700,177,1,0,0,0,1701,1703,5,29,0,0,1702,1704,7,11,0,0,1703,
        1702,1,0,0,0,1703,1704,1,0,0,0,1704,1713,1,0,0,0,1705,1709,5,29,
        0,0,1706,1707,5,203,0,0,1707,1710,5,164,0,0,1708,1710,5,164,0,0,
        1709,1706,1,0,0,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,1711,
        1,0,0,0,1711,1713,5,162,0,0,1712,1701,1,0,0,0,1712,1705,1,0,0,0,
        1713,179,1,0,0,0,1714,1716,5,50,0,0,1715,1717,7,12,0,0,1716,1715,
        1,0,0,0,1716,1717,1,0,0,0,1717,181,1,0,0,0,1718,1720,5,154,0,0,1719,
        1721,7,13,0,0,1720,1719,1,0,0,0,1720,1721,1,0,0,0,1721,183,1,0,0,
        0,1722,1724,5,238,0,0,1723,1725,5,221,0,0,1724,1723,1,0,0,0,1724,
        1725,1,0,0,0,1725,1731,1,0,0,0,1726,1731,5,239,0,0,1727,1731,5,260,
        0,0,1728,1731,5,240,0,0,1729,1731,5,241,0,0,1730,1722,1,0,0,0,1730,
        1726,1,0,0,0,1730,1727,1,0,0,0,1730,1728,1,0,0,0,1730,1729,1,0,0,
        0,1731,185,1,0,0,0,1732,1733,7,14,0,0,1733,187,1,0,0,0,1734,1735,
        7,15,0,0,1735,189,1,0,0,0,1736,1738,5,5,0,0,1737,1739,7,16,0,0,1738,
        1737,1,0,0,0,1738,1739,1,0,0,0,1739,1741,1,0,0,0,1740,1742,3,204,
        102,0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,1833,1,0,0,0,1743,
        1745,7,16,0,0,1744,1746,3,204,102,0,1745,1744,1,0,0,0,1745,1746,
        1,0,0,0,1746,1833,1,0,0,0,1747,1748,5,5,0,0,1748,1833,5,162,0,0,
        1749,1751,5,5,0,0,1750,1752,7,17,0,0,1751,1750,1,0,0,0,1751,1752,
        1,0,0,0,1752,1753,1,0,0,0,1753,1755,5,26,0,0,1754,1756,3,204,102,
        0,1755,1754,1,0,0,0,1755,1756,1,0,0,0,1756,1833,1,0,0,0,1757,1758,
        7,17,0,0,1758,1760,5,26,0,0,1759,1761,3,204,102,0,1760,1759,1,0,
        0,0,1760,1761,1,0,0,0,1761,1833,1,0,0,0,1762,1764,5,5,0,0,1763,1765,
        7,18,0,0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,1765,1766,1,0,0,0,1766,
        1833,5,81,0,0,1767,1769,7,18,0,0,1768,1767,1,0,0,0,1768,1769,1,0,
        0,0,1769,1770,1,0,0,0,1770,1833,5,81,0,0,1771,1773,5,5,0,0,1772,
        1774,5,109,0,0,1773,1772,1,0,0,0,1773,1774,1,0,0,0,1774,1775,1,0,
        0,0,1775,1776,7,19,0,0,1776,1833,5,18,0,0,1777,1778,5,109,0,0,1778,
        1779,7,19,0,0,1779,1833,5,18,0,0,1780,1782,5,5,0,0,1781,1780,1,0,
        0,0,1781,1782,1,0,0,0,1782,1784,1,0,0,0,1783,1785,7,20,0,0,1784,
        1783,1,0,0,0,1784,1785,1,0,0,0,1785,1786,1,0,0,0,1786,1833,5,28,
        0,0,1787,1789,5,5,0,0,1788,1790,7,21,0,0,1789,1788,1,0,0,0,1789,
        1790,1,0,0,0,1790,1791,1,0,0,0,1791,1833,5,177,0,0,1792,1793,7,21,
        0,0,1793,1833,5,177,0,0,1794,1795,5,5,0,0,1795,1833,5,153,0,0,1796,
        1801,5,5,0,0,1797,1798,5,5,0,0,1798,1801,5,109,0,0,1799,1801,5,109,
        0,0,1800,1796,1,0,0,0,1800,1797,1,0,0,0,1800,1799,1,0,0,0,1801,1802,
        1,0,0,0,1802,1833,5,251,0,0,1803,1805,5,5,0,0,1804,1803,1,0,0,0,
        1804,1805,1,0,0,0,1805,1806,1,0,0,0,1806,1807,7,22,0,0,1807,1833,
        7,23,0,0,1808,1810,5,5,0,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,
        1811,1,0,0,0,1811,1812,5,67,0,0,1812,1833,5,126,0,0,1813,1814,5,
        5,0,0,1814,1816,5,186,0,0,1815,1817,5,198,0,0,1816,1815,1,0,0,0,
        1816,1817,1,0,0,0,1817,1833,1,0,0,0,1818,1819,5,5,0,0,1819,1820,
        5,100,0,0,1820,1821,5,186,0,0,1821,1833,5,198,0,0,1822,1823,5,198,
        0,0,1823,1833,5,186,0,0,1824,1825,5,5,0,0,1825,1826,7,24,0,0,1826,
        1830,5,109,0,0,1827,1831,5,135,0,0,1828,1829,5,261,0,0,1829,1831,
        5,262,0,0,1830,1827,1,0,0,0,1830,1828,1,0,0,0,1831,1833,1,0,0,0,
        1832,1736,1,0,0,0,1832,1743,1,0,0,0,1832,1747,1,0,0,0,1832,1749,
        1,0,0,0,1832,1757,1,0,0,0,1832,1762,1,0,0,0,1832,1768,1,0,0,0,1832,
        1771,1,0,0,0,1832,1777,1,0,0,0,1832,1781,1,0,0,0,1832,1787,1,0,0,
        0,1832,1792,1,0,0,0,1832,1794,1,0,0,0,1832,1800,1,0,0,0,1832,1804,
        1,0,0,0,1832,1809,1,0,0,0,1832,1813,1,0,0,0,1832,1818,1,0,0,0,1832,
        1822,1,0,0,0,1832,1824,1,0,0,0,1833,191,1,0,0,0,1834,1835,5,206,
        0,0,1835,1895,5,230,0,0,1836,1837,7,25,0,0,1837,1895,5,196,0,0,1838,
        1839,7,25,0,0,1839,1895,5,201,0,0,1840,1841,5,201,0,0,1841,1895,
        5,231,0,0,1842,1844,7,25,0,0,1843,1845,5,145,0,0,1844,1843,1,0,0,
        0,1844,1845,1,0,0,0,1845,1846,1,0,0,0,1846,1895,5,199,0,0,1847,1848,
        7,25,0,0,1848,1895,5,200,0,0,1849,1851,7,25,0,0,1850,1852,5,153,
        0,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,1853,1,0,0,0,1853,1895,
        5,202,0,0,1854,1855,5,154,0,0,1855,1895,5,206,0,0,1856,1895,5,207,
        0,0,1857,1858,5,154,0,0,1858,1859,5,29,0,0,1859,1895,5,196,0,0,1860,
        1895,5,208,0,0,1861,1862,5,154,0,0,1862,1863,5,29,0,0,1863,1895,
        5,201,0,0,1864,1895,5,209,0,0,1865,1866,5,154,0,0,1866,1895,5,264,
        0,0,1867,1868,5,154,0,0,1868,1870,5,29,0,0,1869,1871,5,145,0,0,1870,
        1869,1,0,0,0,1870,1871,1,0,0,0,1871,1872,1,0,0,0,1872,1895,5,199,
        0,0,1873,1895,5,210,0,0,1874,1875,5,154,0,0,1875,1876,5,29,0,0,1876,
        1895,5,200,0,0,1877,1895,5,211,0,0,1878,1879,5,154,0,0,1879,1895,
        5,265,0,0,1880,1881,5,154,0,0,1881,1883,5,29,0,0,1882,1884,5,153,
        0,0,1883,1882,1,0,0,0,1883,1884,1,0,0,0,1884,1885,1,0,0,0,1885,1895,
        5,202,0,0,1886,1888,7,26,0,0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,
        1888,1889,1,0,0,0,1889,1890,5,261,0,0,1890,1891,5,262,0,0,1891,1895,
        5,253,0,0,1892,1893,5,262,0,0,1893,1895,5,253,0,0,1894,1834,1,0,
        0,0,1894,1836,1,0,0,0,1894,1838,1,0,0,0,1894,1840,1,0,0,0,1894,1842,
        1,0,0,0,1894,1847,1,0,0,0,1894,1849,1,0,0,0,1894,1854,1,0,0,0,1894,
        1856,1,0,0,0,1894,1857,1,0,0,0,1894,1860,1,0,0,0,1894,1861,1,0,0,
        0,1894,1864,1,0,0,0,1894,1865,1,0,0,0,1894,1867,1,0,0,0,1894,1873,
        1,0,0,0,1894,1874,1,0,0,0,1894,1877,1,0,0,0,1894,1878,1,0,0,0,1894,
        1880,1,0,0,0,1894,1887,1,0,0,0,1894,1892,1,0,0,0,1895,193,1,0,0,
        0,1896,1898,5,161,0,0,1897,1899,7,27,0,0,1898,1897,1,0,0,0,1898,
        1899,1,0,0,0,1899,1987,1,0,0,0,1900,1987,5,212,0,0,1901,1903,5,161,
        0,0,1902,1901,1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,1905,
        5,50,0,0,1905,1987,5,213,0,0,1906,1907,5,161,0,0,1907,1908,5,50,
        0,0,1908,1910,7,28,0,0,1909,1911,5,213,0,0,1910,1909,1,0,0,0,1910,
        1911,1,0,0,0,1911,1987,1,0,0,0,1912,1913,5,50,0,0,1913,1914,7,28,
        0,0,1914,1987,5,213,0,0,1915,1916,5,50,0,0,1916,1987,7,29,0,0,1917,
        1918,5,161,0,0,1918,1925,5,137,0,0,1919,1926,5,219,0,0,1920,1926,
        5,46,0,0,1921,1923,5,220,0,0,1922,1921,1,0,0,0,1922,1923,1,0,0,0,
        1923,1924,1,0,0,0,1924,1926,5,45,0,0,1925,1919,1,0,0,0,1925,1920,
        1,0,0,0,1925,1922,1,0,0,0,1925,1926,1,0,0,0,1926,1987,1,0,0,0,1927,
        1934,5,137,0,0,1928,1935,5,219,0,0,1929,1935,5,46,0,0,1930,1932,
        5,220,0,0,1931,1930,1,0,0,0,1931,1932,1,0,0,0,1932,1933,1,0,0,0,
        1933,1935,5,45,0,0,1934,1928,1,0,0,0,1934,1929,1,0,0,0,1934,1931,
        1,0,0,0,1935,1987,1,0,0,0,1936,1938,5,161,0,0,1937,1939,7,30,0,0,
        1938,1937,1,0,0,0,1938,1939,1,0,0,0,1939,1941,1,0,0,0,1940,1942,
        5,177,0,0,1941,1940,1,0,0,0,1941,1942,1,0,0,0,1942,1943,1,0,0,0,
        1943,1987,5,106,0,0,1944,1946,7,30,0,0,1945,1947,5,177,0,0,1946,
        1945,1,0,0,0,1946,1947,1,0,0,0,1947,1948,1,0,0,0,1948,1987,5,106,
        0,0,1949,1951,5,161,0,0,1950,1952,7,30,0,0,1951,1950,1,0,0,0,1951,
        1952,1,0,0,0,1952,1953,1,0,0,0,1953,1987,7,31,0,0,1954,1955,7,30,
        0,0,1955,1987,7,31,0,0,1956,1958,5,161,0,0,1957,1959,7,30,0,0,1958,
        1957,1,0,0,0,1958,1959,1,0,0,0,1959,1960,1,0,0,0,1960,1961,7,32,
        0,0,1961,1987,5,151,0,0,1962,1963,7,30,0,0,1963,1964,7,32,0,0,1964,
        1987,5,151,0,0,1965,1967,5,161,0,0,1966,1968,7,30,0,0,1967,1966,
        1,0,0,0,1967,1968,1,0,0,0,1968,1969,1,0,0,0,1969,1970,5,223,0,0,
        1970,1987,5,224,0,0,1971,1972,7,30,0,0,1972,1973,5,223,0,0,1973,
        1987,5,224,0,0,1974,1976,5,161,0,0,1975,1974,1,0,0,0,1975,1976,1,
        0,0,0,1976,1977,1,0,0,0,1977,1978,7,33,0,0,1978,1987,5,141,0,0,1979,
        1980,5,161,0,0,1980,1982,5,63,0,0,1981,1983,7,34,0,0,1982,1981,1,
        0,0,0,1982,1983,1,0,0,0,1983,1987,1,0,0,0,1984,1985,5,63,0,0,1985,
        1987,7,34,0,0,1986,1896,1,0,0,0,1986,1900,1,0,0,0,1986,1902,1,0,
        0,0,1986,1906,1,0,0,0,1986,1912,1,0,0,0,1986,1915,1,0,0,0,1986,1917,
        1,0,0,0,1986,1927,1,0,0,0,1986,1936,1,0,0,0,1986,1944,1,0,0,0,1986,
        1949,1,0,0,0,1986,1954,1,0,0,0,1986,1956,1,0,0,0,1986,1962,1,0,0,
        0,1986,1965,1,0,0,0,1986,1971,1,0,0,0,1986,1975,1,0,0,0,1986,1979,
        1,0,0,0,1986,1984,1,0,0,0,1987,195,1,0,0,0,1988,1989,5,232,0,0,1989,
        1991,5,233,0,0,1990,1992,7,35,0,0,1991,1990,1,0,0,0,1991,1992,1,
        0,0,0,1992,2008,1,0,0,0,1993,1995,7,25,0,0,1994,1993,1,0,0,0,1994,
        1995,1,0,0,0,1995,1996,1,0,0,0,1996,1997,5,232,0,0,1997,2008,5,233,
        0,0,1998,1999,5,154,0,0,1999,2000,5,232,0,0,2000,2002,5,235,0,0,
        2001,2003,5,236,0,0,2002,2001,1,0,0,0,2002,2003,1,0,0,0,2003,2008,
        1,0,0,0,2004,2005,5,182,0,0,2005,2006,5,232,0,0,2006,2008,5,233,
        0,0,2007,1988,1,0,0,0,2007,1994,1,0,0,0,2007,1998,1,0,0,0,2007,2004,
        1,0,0,0,2008,197,1,0,0,0,2009,2035,3,174,87,0,2010,2035,3,176,88,
        0,2011,2035,3,178,89,0,2012,2035,3,180,90,0,2013,2035,5,176,0,0,
        2014,2015,5,92,0,0,2015,2035,5,135,0,0,2016,2035,5,120,0,0,2017,
        2035,3,182,91,0,2018,2035,3,184,92,0,2019,2035,3,186,93,0,2020,2035,
        3,188,94,0,2021,2035,3,190,95,0,2022,2035,5,4,0,0,2023,2035,5,253,
        0,0,2024,2035,5,120,0,0,2025,2035,5,263,0,0,2026,2035,3,192,96,0,
        2027,2035,3,194,97,0,2028,2035,3,196,98,0,2029,2030,5,162,0,0,2030,
        2035,5,53,0,0,2031,2032,5,231,0,0,2032,2035,5,252,0,0,2033,2035,
        5,237,0,0,2034,2009,1,0,0,0,2034,2010,1,0,0,0,2034,2011,1,0,0,0,
        2034,2012,1,0,0,0,2034,2013,1,0,0,0,2034,2014,1,0,0,0,2034,2016,
        1,0,0,0,2034,2017,1,0,0,0,2034,2018,1,0,0,0,2034,2019,1,0,0,0,2034,
        2020,1,0,0,0,2034,2021,1,0,0,0,2034,2022,1,0,0,0,2034,2023,1,0,0,
        0,2034,2024,1,0,0,0,2034,2025,1,0,0,0,2034,2026,1,0,0,0,2034,2027,
        1,0,0,0,2034,2028,1,0,0,0,2034,2029,1,0,0,0,2034,2031,1,0,0,0,2034,
        2033,1,0,0,0,2035,199,1,0,0,0,2036,2037,5,85,0,0,2037,2039,5,87,
        0,0,2038,2040,5,162,0,0,2039,2038,1,0,0,0,2039,2040,1,0,0,0,2040,
        2044,1,0,0,0,2041,2045,3,330,165,0,2042,2043,5,70,0,0,2043,2045,
        3,328,164,0,2044,2041,1,0,0,0,2044,2042,1,0,0,0,2045,2047,1,0,0,
        0,2046,2048,3,202,101,0,2047,2046,1,0,0,0,2047,2048,1,0,0,0,2048,
        2050,1,0,0,0,2049,2051,3,262,131,0,2050,2049,1,0,0,0,2050,2051,1,
        0,0,0,2051,2052,1,0,0,0,2052,2053,3,208,104,0,2053,201,1,0,0,0,2054,
        2063,3,204,102,0,2055,2056,5,381,0,0,2056,2059,5,366,0,0,2057,2058,
        5,268,0,0,2058,2060,3,204,102,0,2059,2057,1,0,0,0,2059,2060,1,0,
        0,0,2060,2061,1,0,0,0,2061,2063,5,391,0,0,2062,2054,1,0,0,0,2062,
        2055,1,0,0,0,2063,203,1,0,0,0,2064,2065,5,381,0,0,2065,2070,3,324,
        162,0,2066,2067,5,370,0,0,2067,2069,3,324,162,0,2068,2066,1,0,0,
        0,2069,2072,1,0,0,0,2070,2068,1,0,0,0,2070,2071,1,0,0,0,2071,2073,
        1,0,0,0,2072,2070,1,0,0,0,2073,2074,5,391,0,0,2074,205,1,0,0,0,2075,
        2076,7,36,0,0,2076,207,1,0,0,0,2077,2078,5,66,0,0,2078,2080,3,206,
        103,0,2079,2081,3,352,176,0,2080,2079,1,0,0,0,2081,2082,1,0,0,0,
        2082,2080,1,0,0,0,2082,2083,1,0,0,0,2083,2095,1,0,0,0,2084,2086,
        5,66,0,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2087,1,0,0,0,2087,
        2095,3,220,110,0,2088,2090,3,230,115,0,2089,2091,5,392,0,0,2090,
        2089,1,0,0,0,2090,2091,1,0,0,0,2091,2092,1,0,0,0,2092,2093,5,0,0,
        1,2093,2095,1,0,0,0,2094,2077,1,0,0,0,2094,2085,1,0,0,0,2094,2088,
        1,0,0,0,2095,209,1,0,0,0,2096,2101,3,342,171,0,2097,2098,5,370,0,
        0,2098,2100,3,342,171,0,2099,2097,1,0,0,0,2100,2103,1,0,0,0,2101,
        2099,1,0,0,0,2101,2102,1,0,0,0,2102,211,1,0,0,0,2103,2101,1,0,0,
        0,2104,2119,3,342,171,0,2105,2106,5,381,0,0,2106,2107,3,340,170,
        0,2107,2108,5,370,0,0,2108,2109,3,340,170,0,2109,2110,5,391,0,0,
        2110,2119,1,0,0,0,2111,2112,3,352,176,0,2112,2114,5,381,0,0,2113,
        2115,3,210,105,0,2114,2113,1,0,0,0,2114,2115,1,0,0,0,2115,2116,1,
        0,0,0,2116,2117,5,391,0,0,2117,2119,1,0,0,0,2118,2104,1,0,0,0,2118,
        2105,1,0,0,0,2118,2111,1,0,0,0,2119,213,1,0,0,0,2120,2123,3,212,
        106,0,2121,2123,3,216,108,0,2122,2120,1,0,0,0,2122,2121,1,0,0,0,
        2123,215,1,0,0,0,2124,2133,5,379,0,0,2125,2130,3,214,107,0,2126,
        2127,5,370,0,0,2127,2129,3,214,107,0,2128,2126,1,0,0,0,2129,2132,
        1,0,0,0,2130,2128,1,0,0,0,2130,2131,1,0,0,0,2131,2134,1,0,0,0,2132,
        2130,1,0,0,0,2133,2125,1,0,0,0,2133,2134,1,0,0,0,2134,2135,1,0,0,
        0,2135,2136,5,390,0,0,2136,217,1,0,0,0,2137,2138,5,381,0,0,2138,
        2143,3,214,107,0,2139,2140,5,370,0,0,2140,2142,3,214,107,0,2141,
        2139,1,0,0,0,2142,2145,1,0,0,0,2143,2141,1,0,0,0,2143,2144,1,0,0,
        0,2144,2146,1,0,0,0,2145,2143,1,0,0,0,2146,2147,5,391,0,0,2147,219,
        1,0,0,0,2148,2149,5,185,0,0,2149,2156,3,218,109,0,2150,2152,5,370,
        0,0,2151,2150,1,0,0,0,2151,2152,1,0,0,0,2152,2153,1,0,0,0,2153,2155,
        3,218,109,0,2154,2151,1,0,0,0,2155,2158,1,0,0,0,2156,2154,1,0,0,
        0,2156,2157,1,0,0,0,2157,221,1,0,0,0,2158,2156,1,0,0,0,2159,2160,
        5,92,0,0,2160,2162,5,112,0,0,2161,2163,3,104,52,0,2162,2161,1,0,
        0,0,2162,2163,1,0,0,0,2163,2164,1,0,0,0,2164,2166,3,248,124,0,2165,
        2167,7,37,0,0,2166,2165,1,0,0,0,2166,2167,1,0,0,0,2167,223,1,0,0,
        0,2168,2169,5,120,0,0,2169,2170,5,162,0,0,2170,2172,3,330,165,0,
        2171,2173,3,104,52,0,2172,2171,1,0,0,0,2172,2173,1,0,0,0,2173,2175,
        1,0,0,0,2174,2176,3,24,12,0,2175,2174,1,0,0,0,2175,2176,1,0,0,0,
        2176,2178,1,0,0,0,2177,2179,5,61,0,0,2178,2177,1,0,0,0,2178,2179,
        1,0,0,0,2179,2181,1,0,0,0,2180,2182,5,37,0,0,2181,2180,1,0,0,0,2181,
        2182,1,0,0,0,2182,225,1,0,0,0,2183,2184,5,139,0,0,2184,2185,5,162,
        0,0,2185,2186,3,330,165,0,2186,2187,5,170,0,0,2187,2195,3,330,165,
        0,2188,2189,5,370,0,0,2189,2190,3,330,165,0,2190,2191,5,170,0,0,
        2191,2192,3,330,165,0,2192,2194,1,0,0,0,2193,2188,1,0,0,0,2194,2197,
        1,0,0,0,2195,2193,1,0,0,0,2195,2196,1,0,0,0,2196,2199,1,0,0,0,2197,
        2195,1,0,0,0,2198,2200,3,104,52,0,2199,2198,1,0,0,0,2199,2200,1,
        0,0,0,2200,227,1,0,0,0,2201,2203,5,381,0,0,2202,2204,3,236,118,0,
        2203,2202,1,0,0,0,2203,2204,1,0,0,0,2204,2205,1,0,0,0,2205,2206,
        5,149,0,0,2206,2208,3,312,156,0,2207,2209,3,250,125,0,2208,2207,
        1,0,0,0,2208,2209,1,0,0,0,2209,2211,1,0,0,0,2210,2212,3,256,128,
        0,2211,2210,1,0,0,0,2211,2212,1,0,0,0,2212,2213,1,0,0,0,2213,2214,
        5,391,0,0,2214,229,1,0,0,0,2215,2221,3,232,116,0,2216,2217,5,180,
        0,0,2217,2218,5,4,0,0,2218,2220,3,232,116,0,2219,2216,1,0,0,0,2220,
        2223,1,0,0,0,2221,2219,1,0,0,0,2221,2222,1,0,0,0,2222,231,1,0,0,
        0,2223,2221,1,0,0,0,2224,2230,3,234,117,0,2225,2226,5,381,0,0,2226,
        2227,3,230,115,0,2227,2228,5,391,0,0,2228,2230,1,0,0,0,2229,2224,
        1,0,0,0,2229,2225,1,0,0,0,2230,233,1,0,0,0,2231,2233,3,236,118,0,
        2232,2231,1,0,0,0,2232,2233,1,0,0,0,2233,2234,1,0,0,0,2234,2236,
        5,149,0,0,2235,2237,5,48,0,0,2236,2235,1,0,0,0,2236,2237,1,0,0,0,
        2237,2239,1,0,0,0,2238,2240,3,238,119,0,2239,2238,1,0,0,0,2239,2240,
        1,0,0,0,2240,2241,1,0,0,0,2241,2243,3,312,156,0,2242,2244,3,240,
        120,0,2243,2242,1,0,0,0,2243,2244,1,0,0,0,2244,2246,1,0,0,0,2245,
        2247,3,242,121,0,2246,2245,1,0,0,0,2246,2247,1,0,0,0,2247,2249,1,
        0,0,0,2248,2250,3,244,122,0,2249,2248,1,0,0,0,2249,2250,1,0,0,0,
        2250,2252,1,0,0,0,2251,2253,3,246,123,0,2252,2251,1,0,0,0,2252,2253,
        1,0,0,0,2253,2255,1,0,0,0,2254,2256,3,248,124,0,2255,2254,1,0,0,
        0,2255,2256,1,0,0,0,2256,2258,1,0,0,0,2257,2259,3,250,125,0,2258,
        2257,1,0,0,0,2258,2259,1,0,0,0,2259,2262,1,0,0,0,2260,2261,5,193,
        0,0,2261,2263,7,38,0,0,2262,2260,1,0,0,0,2262,2263,1,0,0,0,2263,
        2266,1,0,0,0,2264,2265,5,193,0,0,2265,2267,5,172,0,0,2266,2264,1,
        0,0,0,2266,2267,1,0,0,0,2267,2269,1,0,0,0,2268,2270,3,252,126,0,
        2269,2268,1,0,0,0,2269,2270,1,0,0,0,2270,2272,1,0,0,0,2271,2273,
        3,254,127,0,2272,2271,1,0,0,0,2272,2273,1,0,0,0,2273,2275,1,0,0,
        0,2274,2276,3,258,129,0,2275,2274,1,0,0,0,2275,2276,1,0,0,0,2276,
        2278,1,0,0,0,2277,2279,3,260,130,0,2278,2277,1,0,0,0,2278,2279,1,
        0,0,0,2279,2281,1,0,0,0,2280,2282,3,262,131,0,2281,2280,1,0,0,0,
        2281,2282,1,0,0,0,2282,235,1,0,0,0,2283,2284,5,193,0,0,2284,2285,
        3,312,156,0,2285,237,1,0,0,0,2286,2287,5,171,0,0,2287,2290,5,362,
        0,0,2288,2289,5,193,0,0,2289,2291,5,167,0,0,2290,2288,1,0,0,0,2290,
        2291,1,0,0,0,2291,239,1,0,0,0,2292,2293,5,68,0,0,2293,2294,3,264,
        132,0,2294,241,1,0,0,0,2295,2297,7,39,0,0,2296,2295,1,0,0,0,2296,
        2297,1,0,0,0,2297,2298,1,0,0,0,2298,2299,5,9,0,0,2299,2300,5,90,
        0,0,2300,2301,3,312,156,0,2301,243,1,0,0,0,2302,2303,5,192,0,0,2303,
        2304,3,352,176,0,2304,2305,5,10,0,0,2305,2306,5,381,0,0,2306,2307,
        3,286,143,0,2307,2308,5,391,0,0,2308,245,1,0,0,0,2309,2310,5,131,
        0,0,2310,2311,3,316,158,0,2311,247,1,0,0,0,2312,2313,5,191,0,0,2313,
        2314,3,316,158,0,2314,249,1,0,0,0,2315,2316,5,73,0,0,2316,2323,5,
        18,0,0,2317,2318,7,38,0,0,2318,2319,5,381,0,0,2319,2320,3,312,156,
        0,2320,2321,5,391,0,0,2321,2324,1,0,0,0,2322,2324,3,312,156,0,2323,
        2317,1,0,0,0,2323,2322,1,0,0,0,2324,251,1,0,0,0,2325,2326,5,74,0,
        0,2326,2327,3,316,158,0,2327,253,1,0,0,0,2328,2329,5,122,0,0,2329,
        2330,5,18,0,0,2330,2331,3,276,138,0,2331,255,1,0,0,0,2332,2333,5,
        122,0,0,2333,2334,5,18,0,0,2334,2335,3,312,156,0,2335,257,1,0,0,
        0,2336,2337,5,99,0,0,2337,2338,3,274,137,0,2338,2339,5,18,0,0,2339,
        2340,3,312,156,0,2340,259,1,0,0,0,2341,2342,5,99,0,0,2342,2345,3,
        274,137,0,2343,2344,5,193,0,0,2344,2346,5,167,0,0,2345,2343,1,0,
        0,0,2345,2346,1,0,0,0,2346,261,1,0,0,0,2347,2348,5,153,0,0,2348,
        2349,3,282,141,0,2349,263,1,0,0,0,2350,2351,6,132,-1,0,2351,2353,
        3,326,163,0,2352,2354,5,61,0,0,2353,2352,1,0,0,0,2353,2354,1,0,0,
        0,2354,2356,1,0,0,0,2355,2357,3,272,136,0,2356,2355,1,0,0,0,2356,
        2357,1,0,0,0,2357,2363,1,0,0,0,2358,2359,5,381,0,0,2359,2360,3,264,
        132,0,2360,2361,5,391,0,0,2361,2363,1,0,0,0,2362,2350,1,0,0,0,2362,
        2358,1,0,0,0,2363,2381,1,0,0,0,2364,2365,10,3,0,0,2365,2366,3,268,
        134,0,2366,2367,3,264,132,4,2367,2380,1,0,0,0,2368,2370,10,4,0,0,
        2369,2371,7,40,0,0,2370,2369,1,0,0,0,2370,2371,1,0,0,0,2371,2373,
        1,0,0,0,2372,2374,3,266,133,0,2373,2372,1,0,0,0,2373,2374,1,0,0,
        0,2374,2375,1,0,0,0,2375,2376,5,90,0,0,2376,2377,3,264,132,0,2377,
        2378,3,270,135,0,2378,2380,1,0,0,0,2379,2364,1,0,0,0,2379,2368,1,
        0,0,0,2380,2383,1,0,0,0,2381,2379,1,0,0,0,2381,2382,1,0,0,0,2382,
        265,1,0,0,0,2383,2381,1,0,0,0,2384,2386,7,41,0,0,2385,2384,1,0,0,
        0,2385,2386,1,0,0,0,2386,2387,1,0,0,0,2387,2394,5,84,0,0,2388,2390,
        5,84,0,0,2389,2391,7,41,0,0,2390,2389,1,0,0,0,2390,2391,1,0,0,0,
        2391,2394,1,0,0,0,2392,2394,7,41,0,0,2393,2385,1,0,0,0,2393,2388,
        1,0,0,0,2393,2392,1,0,0,0,2394,2428,1,0,0,0,2395,2397,7,42,0,0,2396,
        2395,1,0,0,0,2396,2397,1,0,0,0,2397,2398,1,0,0,0,2398,2400,7,43,
        0,0,2399,2401,5,123,0,0,2400,2399,1,0,0,0,2400,2401,1,0,0,0,2401,
        2410,1,0,0,0,2402,2404,7,43,0,0,2403,2405,5,123,0,0,2404,2403,1,
        0,0,0,2404,2405,1,0,0,0,2405,2407,1,0,0,0,2406,2408,7,42,0,0,2407,
        2406,1,0,0,0,2407,2408,1,0,0,0,2408,2410,1,0,0,0,2409,2396,1,0,0,
        0,2409,2402,1,0,0,0,2410,2428,1,0,0,0,2411,2413,7,44,0,0,2412,2411,
        1,0,0,0,2412,2413,1,0,0,0,2413,2414,1,0,0,0,2414,2416,5,69,0,0,2415,
        2417,5,123,0,0,2416,2415,1,0,0,0,2416,2417,1,0,0,0,2417,2426,1,0,
        0,0,2418,2420,5,69,0,0,2419,2421,5,123,0,0,2420,2419,1,0,0,0,2420,
        2421,1,0,0,0,2421,2423,1,0,0,0,2422,2424,7,44,0,0,2423,2422,1,0,
        0,0,2423,2424,1,0,0,0,2424,2426,1,0,0,0,2425,2412,1,0,0,0,2425,2418,
        1,0,0,0,2426,2428,1,0,0,0,2427,2393,1,0,0,0,2427,2409,1,0,0,0,2427,
        2425,1,0,0,0,2428,267,1,0,0,0,2429,2431,7,40,0,0,2430,2429,1,0,0,
        0,2430,2431,1,0,0,0,2431,2432,1,0,0,0,2432,2433,5,30,0,0,2433,2436,
        5,90,0,0,2434,2436,5,370,0,0,2435,2430,1,0,0,0,2435,2434,1,0,0,0,
        2436,269,1,0,0,0,2437,2438,5,119,0,0,2438,2447,3,312,156,0,2439,
        2440,5,183,0,0,2440,2441,5,381,0,0,2441,2442,3,312,156,0,2442,2443,
        5,391,0,0,2443,2447,1,0,0,0,2444,2445,5,183,0,0,2445,2447,3,312,
        156,0,2446,2437,1,0,0,0,2446,2439,1,0,0,0,2446,2444,1,0,0,0,2447,
        271,1,0,0,0,2448,2449,5,147,0,0,2449,2452,3,280,140,0,2450,2451,
        5,118,0,0,2451,2453,3,280,140,0,2452,2450,1,0,0,0,2452,2453,1,0,
        0,0,2453,273,1,0,0,0,2454,2457,3,316,158,0,2455,2456,7,45,0,0,2456,
        2458,3,316,158,0,2457,2455,1,0,0,0,2457,2458,1,0,0,0,2458,275,1,
        0,0,0,2459,2464,3,278,139,0,2460,2461,5,370,0,0,2461,2463,3,278,
        139,0,2462,2460,1,0,0,0,2463,2466,1,0,0,0,2464,2462,1,0,0,0,2464,
        2465,1,0,0,0,2465,277,1,0,0,0,2466,2464,1,0,0,0,2467,2469,3,316,
        158,0,2468,2470,7,46,0,0,2469,2468,1,0,0,0,2469,2470,1,0,0,0,2470,
        2473,1,0,0,0,2471,2472,5,117,0,0,2472,2474,7,47,0,0,2473,2471,1,
        0,0,0,2473,2474,1,0,0,0,2474,2477,1,0,0,0,2475,2476,5,25,0,0,2476,
        2478,5,364,0,0,2477,2475,1,0,0,0,2477,2478,1,0,0,0,2478,279,1,0,
        0,0,2479,2482,3,340,170,0,2480,2481,5,393,0,0,2481,2483,3,340,170,
        0,2482,2480,1,0,0,0,2482,2483,1,0,0,0,2483,281,1,0,0,0,2484,2489,
        3,284,142,0,2485,2486,5,370,0,0,2486,2488,3,284,142,0,2487,2485,
        1,0,0,0,2488,2491,1,0,0,0,2489,2487,1,0,0,0,2489,2490,1,0,0,0,2490,
        283,1,0,0,0,2491,2489,1,0,0,0,2492,2493,3,352,176,0,2493,2494,5,
        375,0,0,2494,2495,3,342,171,0,2495,285,1,0,0,0,2496,2498,3,288,144,
        0,2497,2496,1,0,0,0,2497,2498,1,0,0,0,2498,2500,1,0,0,0,2499,2501,
        3,290,145,0,2500,2499,1,0,0,0,2500,2501,1,0,0,0,2501,2503,1,0,0,
        0,2502,2504,3,292,146,0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,
        287,1,0,0,0,2505,2506,5,126,0,0,2506,2507,5,18,0,0,2507,2508,3,312,
        156,0,2508,289,1,0,0,0,2509,2510,5,122,0,0,2510,2511,5,18,0,0,2511,
        2512,3,276,138,0,2512,291,1,0,0,0,2513,2514,7,48,0,0,2514,2515,3,
        294,147,0,2515,293,1,0,0,0,2516,2523,3,296,148,0,2517,2518,5,16,
        0,0,2518,2519,3,296,148,0,2519,2520,5,6,0,0,2520,2521,3,296,148,
        0,2521,2523,1,0,0,0,2522,2516,1,0,0,0,2522,2517,1,0,0,0,2523,295,
        1,0,0,0,2524,2525,5,32,0,0,2525,2537,5,145,0,0,2526,2527,5,179,0,
        0,2527,2537,5,130,0,0,2528,2529,5,179,0,0,2529,2537,5,64,0,0,2530,
        2531,3,340,170,0,2531,2532,5,130,0,0,2532,2537,1,0,0,0,2533,2534,
        3,340,170,0,2534,2535,5,64,0,0,2535,2537,1,0,0,0,2536,2524,1,0,0,
        0,2536,2526,1,0,0,0,2536,2528,1,0,0,0,2536,2530,1,0,0,0,2536,2533,
        1,0,0,0,2537,297,1,0,0,0,2538,2539,5,152,0,0,2539,2540,3,282,141,
        0,2540,299,1,0,0,0,2541,2542,5,154,0,0,2542,2543,5,29,0,0,2543,2544,
        5,33,0,0,2544,2584,3,336,168,0,2545,2546,5,154,0,0,2546,2547,5,29,
        0,0,2547,2548,5,46,0,0,2548,2584,3,330,165,0,2549,2550,5,154,0,0,
        2550,2552,5,29,0,0,2551,2553,5,164,0,0,2552,2551,1,0,0,0,2552,2553,
        1,0,0,0,2553,2555,1,0,0,0,2554,2556,5,162,0,0,2555,2554,1,0,0,0,
        2555,2556,1,0,0,0,2556,2557,1,0,0,0,2557,2584,3,330,165,0,2558,2559,
        5,154,0,0,2559,2584,5,34,0,0,2560,2561,5,154,0,0,2561,2564,5,45,
        0,0,2562,2563,5,68,0,0,2563,2565,3,336,168,0,2564,2562,1,0,0,0,2564,
        2565,1,0,0,0,2565,2584,1,0,0,0,2566,2568,5,154,0,0,2567,2569,5,164,
        0,0,2568,2567,1,0,0,0,2568,2569,1,0,0,0,2569,2570,1,0,0,0,2570,2573,
        5,163,0,0,2571,2572,7,49,0,0,2572,2574,3,336,168,0,2573,2571,1,0,
        0,0,2573,2574,1,0,0,0,2574,2578,1,0,0,0,2575,2576,5,98,0,0,2576,
        2579,5,364,0,0,2577,2579,3,248,124,0,2578,2575,1,0,0,0,2578,2577,
        1,0,0,0,2578,2579,1,0,0,0,2579,2581,1,0,0,0,2580,2582,3,260,130,
        0,2581,2580,1,0,0,0,2581,2582,1,0,0,0,2582,2584,1,0,0,0,2583,2541,
        1,0,0,0,2583,2545,1,0,0,0,2583,2549,1,0,0,0,2583,2558,1,0,0,0,2583,
        2560,1,0,0,0,2583,2566,1,0,0,0,2584,301,1,0,0,0,2585,2586,5,161,
        0,0,2586,2587,5,63,0,0,2587,2588,5,49,0,0,2588,2620,3,330,165,0,
        2589,2590,5,161,0,0,2590,2591,5,63,0,0,2591,2620,5,102,0,0,2592,
        2593,5,161,0,0,2593,2594,5,137,0,0,2594,2620,5,45,0,0,2595,2596,
        5,161,0,0,2596,2597,5,137,0,0,2597,2598,5,46,0,0,2598,2620,3,330,
        165,0,2599,2600,5,161,0,0,2600,2608,7,30,0,0,2601,2602,5,49,0,0,
        2602,2609,5,151,0,0,2603,2609,5,60,0,0,2604,2606,5,177,0,0,2605,
        2604,1,0,0,0,2605,2606,1,0,0,0,2606,2607,1,0,0,0,2607,2609,5,106,
        0,0,2608,2601,1,0,0,0,2608,2603,1,0,0,0,2608,2605,1,0,0,0,2609,2610,
        1,0,0,0,2610,2620,3,330,165,0,2611,2612,5,161,0,0,2612,2613,7,30,
        0,0,2613,2614,5,142,0,0,2614,2620,5,151,0,0,2615,2616,5,161,0,0,
        2616,2617,5,159,0,0,2617,2618,5,141,0,0,2618,2620,3,330,165,0,2619,
        2585,1,0,0,0,2619,2589,1,0,0,0,2619,2592,1,0,0,0,2619,2595,1,0,0,
        0,2619,2599,1,0,0,0,2619,2611,1,0,0,0,2619,2615,1,0,0,0,2620,303,
        1,0,0,0,2621,2623,5,176,0,0,2622,2624,5,164,0,0,2623,2622,1,0,0,
        0,2623,2624,1,0,0,0,2624,2626,1,0,0,0,2625,2627,5,162,0,0,2626,2625,
        1,0,0,0,2626,2627,1,0,0,0,2627,2630,1,0,0,0,2628,2629,5,78,0,0,2629,
        2631,5,56,0,0,2630,2628,1,0,0,0,2630,2631,1,0,0,0,2631,2632,1,0,
        0,0,2632,2634,3,330,165,0,2633,2635,3,104,52,0,2634,2633,1,0,0,0,
        2634,2635,1,0,0,0,2635,305,1,0,0,0,2636,2637,5,182,0,0,2637,2638,
        3,336,168,0,2638,307,1,0,0,0,2639,2640,5,188,0,0,2640,2642,3,330,
        165,0,2641,2643,5,55,0,0,2642,2641,1,0,0,0,2642,2643,1,0,0,0,2643,
        2646,1,0,0,0,2644,2645,5,99,0,0,2645,2647,5,362,0,0,2646,2644,1,
        0,0,0,2646,2647,1,0,0,0,2647,309,1,0,0,0,2648,2696,3,352,176,0,2649,
        2650,3,352,176,0,2650,2651,5,381,0,0,2651,2652,3,352,176,0,2652,
        2659,3,310,155,0,2653,2654,5,370,0,0,2654,2655,3,352,176,0,2655,
        2656,3,310,155,0,2656,2658,1,0,0,0,2657,2653,1,0,0,0,2658,2661,1,
        0,0,0,2659,2657,1,0,0,0,2659,2660,1,0,0,0,2660,2662,1,0,0,0,2661,
        2659,1,0,0,0,2662,2663,5,391,0,0,2663,2696,1,0,0,0,2664,2665,3,352,
        176,0,2665,2666,5,381,0,0,2666,2671,3,356,178,0,2667,2668,5,370,
        0,0,2668,2670,3,356,178,0,2669,2667,1,0,0,0,2670,2673,1,0,0,0,2671,
        2669,1,0,0,0,2671,2672,1,0,0,0,2672,2674,1,0,0,0,2673,2671,1,0,0,
        0,2674,2675,5,391,0,0,2675,2696,1,0,0,0,2676,2677,3,352,176,0,2677,
        2678,5,381,0,0,2678,2683,3,310,155,0,2679,2680,5,370,0,0,2680,2682,
        3,310,155,0,2681,2679,1,0,0,0,2682,2685,1,0,0,0,2683,2681,1,0,0,
        0,2683,2684,1,0,0,0,2684,2686,1,0,0,0,2685,2683,1,0,0,0,2686,2687,
        5,391,0,0,2687,2696,1,0,0,0,2688,2689,3,352,176,0,2689,2691,5,381,
        0,0,2690,2692,3,312,156,0,2691,2690,1,0,0,0,2691,2692,1,0,0,0,2692,
        2693,1,0,0,0,2693,2694,5,391,0,0,2694,2696,1,0,0,0,2695,2648,1,0,
        0,0,2695,2649,1,0,0,0,2695,2664,1,0,0,0,2695,2676,1,0,0,0,2695,2688,
        1,0,0,0,2696,311,1,0,0,0,2697,2702,3,314,157,0,2698,2699,5,370,0,
        0,2699,2701,3,314,157,0,2700,2698,1,0,0,0,2701,2704,1,0,0,0,2702,
        2700,1,0,0,0,2702,2703,1,0,0,0,2703,313,1,0,0,0,2704,2702,1,0,0,
        0,2705,2706,3,330,165,0,2706,2707,5,373,0,0,2707,2709,1,0,0,0,2708,
        2705,1,0,0,0,2708,2709,1,0,0,0,2709,2710,1,0,0,0,2710,2717,5,366,
        0,0,2711,2712,5,381,0,0,2712,2713,3,230,115,0,2713,2714,5,391,0,
        0,2714,2717,1,0,0,0,2715,2717,3,316,158,0,2716,2708,1,0,0,0,2716,
        2711,1,0,0,0,2716,2715,1,0,0,0,2717,315,1,0,0,0,2718,2719,6,158,
        -1,0,2719,2721,5,19,0,0,2720,2722,3,316,158,0,2721,2720,1,0,0,0,
        2721,2722,1,0,0,0,2722,2728,1,0,0,0,2723,2724,5,190,0,0,2724,2725,
        3,316,158,0,2725,2726,5,166,0,0,2726,2727,3,316,158,0,2727,2729,
        1,0,0,0,2728,2723,1,0,0,0,2729,2730,1,0,0,0,2730,2728,1,0,0,0,2730,
        2731,1,0,0,0,2731,2734,1,0,0,0,2732,2733,5,51,0,0,2733,2735,3,316,
        158,0,2734,2732,1,0,0,0,2734,2735,1,0,0,0,2735,2736,1,0,0,0,2736,
        2737,5,52,0,0,2737,2848,1,0,0,0,2738,2739,5,20,0,0,2739,2740,5,381,
        0,0,2740,2741,3,316,158,0,2741,2742,5,10,0,0,2742,2743,3,310,155,
        0,2743,2744,5,391,0,0,2744,2848,1,0,0,0,2745,2746,5,35,0,0,2746,
        2848,5,364,0,0,2747,2748,5,59,0,0,2748,2749,5,381,0,0,2749,2750,
        3,344,172,0,2750,2751,5,68,0,0,2751,2752,3,316,158,0,2752,2753,5,
        391,0,0,2753,2848,1,0,0,0,2754,2755,5,86,0,0,2755,2756,3,316,158,
        0,2756,2757,3,344,172,0,2757,2848,1,0,0,0,2758,2759,5,158,0,0,2759,
        2760,5,381,0,0,2760,2761,3,316,158,0,2761,2762,5,68,0,0,2762,2765,
        3,316,158,0,2763,2764,5,65,0,0,2764,2766,3,316,158,0,2765,2763,1,
        0,0,0,2765,2766,1,0,0,0,2766,2767,1,0,0,0,2767,2768,5,391,0,0,2768,
        2848,1,0,0,0,2769,2770,5,169,0,0,2770,2848,5,364,0,0,2771,2772,5,
        174,0,0,2772,2773,5,381,0,0,2773,2774,7,50,0,0,2774,2775,5,364,0,
        0,2775,2776,5,68,0,0,2776,2777,3,316,158,0,2777,2778,5,391,0,0,2778,
        2848,1,0,0,0,2779,2780,3,352,176,0,2780,2782,5,381,0,0,2781,2783,
        3,312,156,0,2782,2781,1,0,0,0,2782,2783,1,0,0,0,2783,2784,1,0,0,
        0,2784,2785,5,391,0,0,2785,2786,1,0,0,0,2786,2787,5,125,0,0,2787,
        2788,5,381,0,0,2788,2789,3,286,143,0,2789,2790,5,391,0,0,2790,2848,
        1,0,0,0,2791,2792,3,352,176,0,2792,2794,5,381,0,0,2793,2795,3,312,
        156,0,2794,2793,1,0,0,0,2794,2795,1,0,0,0,2795,2796,1,0,0,0,2796,
        2797,5,391,0,0,2797,2798,1,0,0,0,2798,2799,5,125,0,0,2799,2800,3,
        352,176,0,2800,2848,1,0,0,0,2801,2807,3,352,176,0,2802,2804,5,381,
        0,0,2803,2805,3,312,156,0,2804,2803,1,0,0,0,2804,2805,1,0,0,0,2805,
        2806,1,0,0,0,2806,2808,5,391,0,0,2807,2802,1,0,0,0,2807,2808,1,0,
        0,0,2808,2809,1,0,0,0,2809,2811,5,381,0,0,2810,2812,5,48,0,0,2811,
        2810,1,0,0,0,2811,2812,1,0,0,0,2812,2814,1,0,0,0,2813,2815,3,318,
        159,0,2814,2813,1,0,0,0,2814,2815,1,0,0,0,2815,2816,1,0,0,0,2816,
        2817,5,391,0,0,2817,2848,1,0,0,0,2818,2848,3,342,171,0,2819,2820,
        5,372,0,0,2820,2848,3,316,158,17,2821,2822,5,115,0,0,2822,2848,3,
        316,158,12,2823,2824,3,330,165,0,2824,2825,5,373,0,0,2825,2827,1,
        0,0,0,2826,2823,1,0,0,0,2826,2827,1,0,0,0,2827,2828,1,0,0,0,2828,
        2848,5,366,0,0,2829,2830,5,381,0,0,2830,2831,3,230,115,0,2831,2832,
        5,391,0,0,2832,2848,1,0,0,0,2833,2834,5,381,0,0,2834,2835,3,316,
        158,0,2835,2836,5,391,0,0,2836,2848,1,0,0,0,2837,2838,5,381,0,0,
        2838,2839,3,312,156,0,2839,2840,5,391,0,0,2840,2848,1,0,0,0,2841,
        2843,5,379,0,0,2842,2844,3,312,156,0,2843,2842,1,0,0,0,2843,2844,
        1,0,0,0,2844,2845,1,0,0,0,2845,2848,5,390,0,0,2846,2848,3,324,162,
        0,2847,2718,1,0,0,0,2847,2738,1,0,0,0,2847,2745,1,0,0,0,2847,2747,
        1,0,0,0,2847,2754,1,0,0,0,2847,2758,1,0,0,0,2847,2769,1,0,0,0,2847,
        2771,1,0,0,0,2847,2779,1,0,0,0,2847,2791,1,0,0,0,2847,2801,1,0,0,
        0,2847,2818,1,0,0,0,2847,2819,1,0,0,0,2847,2821,1,0,0,0,2847,2826,
        1,0,0,0,2847,2829,1,0,0,0,2847,2833,1,0,0,0,2847,2837,1,0,0,0,2847,
        2841,1,0,0,0,2847,2846,1,0,0,0,2848,2920,1,0,0,0,2849,2850,10,16,
        0,0,2850,2851,7,51,0,0,2851,2919,3,316,158,17,2852,2853,10,15,0,
        0,2853,2854,7,52,0,0,2854,2919,3,316,158,16,2855,2874,10,14,0,0,
        2856,2875,5,374,0,0,2857,2875,5,375,0,0,2858,2875,5,383,0,0,2859,
        2875,5,380,0,0,2860,2875,5,376,0,0,2861,2875,5,382,0,0,2862,2875,
        5,377,0,0,2863,2865,5,71,0,0,2864,2863,1,0,0,0,2864,2865,1,0,0,0,
        2865,2867,1,0,0,0,2866,2868,5,115,0,0,2867,2866,1,0,0,0,2867,2868,
        1,0,0,0,2868,2869,1,0,0,0,2869,2875,5,80,0,0,2870,2872,5,115,0,0,
        2871,2870,1,0,0,0,2871,2872,1,0,0,0,2872,2873,1,0,0,0,2873,2875,
        7,53,0,0,2874,2856,1,0,0,0,2874,2857,1,0,0,0,2874,2858,1,0,0,0,2874,
        2859,1,0,0,0,2874,2860,1,0,0,0,2874,2861,1,0,0,0,2874,2862,1,0,0,
        0,2874,2864,1,0,0,0,2874,2871,1,0,0,0,2875,2876,1,0,0,0,2876,2919,
        3,316,158,15,2877,2878,10,11,0,0,2878,2879,5,6,0,0,2879,2919,3,316,
        158,12,2880,2881,10,10,0,0,2881,2882,5,121,0,0,2882,2919,3,316,158,
        11,2883,2885,10,9,0,0,2884,2886,5,115,0,0,2885,2884,1,0,0,0,2885,
        2886,1,0,0,0,2886,2887,1,0,0,0,2887,2888,5,16,0,0,2888,2889,3,316,
        158,0,2889,2890,5,6,0,0,2890,2891,3,316,158,10,2891,2919,1,0,0,0,
        2892,2893,10,8,0,0,2893,2894,5,386,0,0,2894,2895,3,316,158,0,2895,
        2896,5,369,0,0,2896,2897,3,316,158,8,2897,2919,1,0,0,0,2898,2899,
        10,19,0,0,2899,2900,5,379,0,0,2900,2901,3,316,158,0,2901,2902,5,
        390,0,0,2902,2919,1,0,0,0,2903,2904,10,18,0,0,2904,2905,5,373,0,
        0,2905,2919,5,362,0,0,2906,2907,10,13,0,0,2907,2909,5,88,0,0,2908,
        2910,5,115,0,0,2909,2908,1,0,0,0,2909,2910,1,0,0,0,2910,2911,1,0,
        0,0,2911,2919,5,116,0,0,2912,2916,10,7,0,0,2913,2917,3,350,175,0,
        2914,2915,5,10,0,0,2915,2917,3,352,176,0,2916,2913,1,0,0,0,2916,
        2914,1,0,0,0,2917,2919,1,0,0,0,2918,2849,1,0,0,0,2918,2852,1,0,0,
        0,2918,2855,1,0,0,0,2918,2877,1,0,0,0,2918,2880,1,0,0,0,2918,2883,
        1,0,0,0,2918,2892,1,0,0,0,2918,2898,1,0,0,0,2918,2903,1,0,0,0,2918,
        2906,1,0,0,0,2918,2912,1,0,0,0,2919,2922,1,0,0,0,2920,2918,1,0,0,
        0,2920,2921,1,0,0,0,2921,317,1,0,0,0,2922,2920,1,0,0,0,2923,2928,
        3,320,160,0,2924,2925,5,370,0,0,2925,2927,3,320,160,0,2926,2924,
        1,0,0,0,2927,2930,1,0,0,0,2928,2926,1,0,0,0,2928,2929,1,0,0,0,2929,
        319,1,0,0,0,2930,2928,1,0,0,0,2931,2934,3,322,161,0,2932,2934,3,
        316,158,0,2933,2931,1,0,0,0,2933,2932,1,0,0,0,2934,321,1,0,0,0,2935,
        2936,5,381,0,0,2936,2941,3,352,176,0,2937,2938,5,370,0,0,2938,2940,
        3,352,176,0,2939,2937,1,0,0,0,2940,2943,1,0,0,0,2941,2939,1,0,0,
        0,2941,2942,1,0,0,0,2942,2944,1,0,0,0,2943,2941,1,0,0,0,2944,2945,
        5,391,0,0,2945,2955,1,0,0,0,2946,2951,3,352,176,0,2947,2948,5,370,
        0,0,2948,2950,3,352,176,0,2949,2947,1,0,0,0,2950,2953,1,0,0,0,2951,
        2949,1,0,0,0,2951,2952,1,0,0,0,2952,2955,1,0,0,0,2953,2951,1,0,0,
        0,2954,2935,1,0,0,0,2954,2946,1,0,0,0,2955,2956,1,0,0,0,2956,2957,
        5,365,0,0,2957,2958,3,316,158,0,2958,323,1,0,0,0,2959,2960,3,330,
        165,0,2960,2961,5,373,0,0,2961,2963,1,0,0,0,2962,2959,1,0,0,0,2962,
        2963,1,0,0,0,2963,2964,1,0,0,0,2964,2967,3,352,176,0,2965,2966,5,
        373,0,0,2966,2968,3,352,176,0,2967,2965,1,0,0,0,2967,2968,1,0,0,
        0,2968,325,1,0,0,0,2969,2970,6,163,-1,0,2970,2977,3,330,165,0,2971,
        2977,3,328,164,0,2972,2973,5,381,0,0,2973,2974,3,230,115,0,2974,
        2975,5,391,0,0,2975,2977,1,0,0,0,2976,2969,1,0,0,0,2976,2971,1,0,
        0,0,2976,2972,1,0,0,0,2977,2986,1,0,0,0,2978,2982,10,1,0,0,2979,
        2983,3,350,175,0,2980,2981,5,10,0,0,2981,2983,3,352,176,0,2982,2979,
        1,0,0,0,2982,2980,1,0,0,0,2983,2985,1,0,0,0,2984,2978,1,0,0,0,2985,
        2988,1,0,0,0,2986,2984,1,0,0,0,2986,2987,1,0,0,0,2987,327,1,0,0,
        0,2988,2986,1,0,0,0,2989,2990,3,352,176,0,2990,2992,5,381,0,0,2991,
        2993,3,332,166,0,2992,2991,1,0,0,0,2992,2993,1,0,0,0,2993,2994,1,
        0,0,0,2994,2995,5,391,0,0,2995,329,1,0,0,0,2996,2997,3,336,168,0,
        2997,2998,5,373,0,0,2998,3000,1,0,0,0,2999,2996,1,0,0,0,2999,3000,
        1,0,0,0,3000,3001,1,0,0,0,3001,3002,3,352,176,0,3002,331,1,0,0,0,
        3003,3008,3,334,167,0,3004,3005,5,370,0,0,3005,3007,3,334,167,0,
        3006,3004,1,0,0,0,3007,3010,1,0,0,0,3008,3006,1,0,0,0,3008,3009,
        1,0,0,0,3009,333,1,0,0,0,3010,3008,1,0,0,0,3011,3015,3,324,162,0,
        3012,3015,3,328,164,0,3013,3015,3,342,171,0,3014,3011,1,0,0,0,3014,
        3012,1,0,0,0,3014,3013,1,0,0,0,3015,335,1,0,0,0,3016,3017,3,352,
        176,0,3017,337,1,0,0,0,3018,3027,5,360,0,0,3019,3020,5,373,0,0,3020,
        3027,7,54,0,0,3021,3022,5,362,0,0,3022,3024,5,373,0,0,3023,3025,
        7,54,0,0,3024,3023,1,0,0,0,3024,3025,1,0,0,0,3025,3027,1,0,0,0,3026,
        3018,1,0,0,0,3026,3019,1,0,0,0,3026,3021,1,0,0,0,3027,339,1,0,0,
        0,3028,3030,7,55,0,0,3029,3028,1,0,0,0,3029,3030,1,0,0,0,3030,3037,
        1,0,0,0,3031,3038,3,338,169,0,3032,3038,5,361,0,0,3033,3038,5,362,
        0,0,3034,3038,5,363,0,0,3035,3038,5,82,0,0,3036,3038,5,113,0,0,3037,
        3031,1,0,0,0,3037,3032,1,0,0,0,3037,3033,1,0,0,0,3037,3034,1,0,0,
        0,3037,3035,1,0,0,0,3037,3036,1,0,0,0,3038,341,1,0,0,0,3039,3043,
        3,340,170,0,3040,3043,5,364,0,0,3041,3043,5,116,0,0,3042,3039,1,
        0,0,0,3042,3040,1,0,0,0,3042,3041,1,0,0,0,3043,343,1,0,0,0,3044,
        3045,7,56,0,0,3045,345,1,0,0,0,3046,3047,7,57,0,0,3047,347,1,0,0,
        0,3048,3049,7,58,0,0,3049,349,1,0,0,0,3050,3053,5,359,0,0,3051,3053,
        3,348,174,0,3052,3050,1,0,0,0,3052,3051,1,0,0,0,3053,351,1,0,0,0,
        3054,3058,5,359,0,0,3055,3058,3,344,172,0,3056,3058,3,346,173,0,
        3057,3054,1,0,0,0,3057,3055,1,0,0,0,3057,3056,1,0,0,0,3058,353,1,
        0,0,0,3059,3062,3,352,176,0,3060,3062,5,116,0,0,3061,3059,1,0,0,
        0,3061,3060,1,0,0,0,3062,355,1,0,0,0,3063,3064,5,364,0,0,3064,3065,
        5,375,0,0,3065,3066,3,340,170,0,3066,357,1,0,0,0,415,359,365,371,
        377,381,384,389,411,414,422,427,440,449,456,464,469,476,481,488,
        493,499,505,510,516,521,527,532,538,552,559,566,573,579,584,590,
        595,601,610,620,630,650,658,673,680,694,700,706,712,715,721,724,
        727,733,737,740,743,746,749,756,760,763,767,773,776,782,786,789,
        800,804,807,812,814,817,820,830,834,837,840,845,847,854,860,864,
        867,870,898,906,908,915,922,932,940,945,952,960,968,971,975,978,
        981,985,993,999,1004,1011,1015,1019,1022,1025,1030,1036,1038,1041,
        1044,1051,1058,1062,1069,1076,1080,1084,1091,1095,1099,1105,1113,
        1115,1125,1133,1159,1161,1165,1187,1189,1200,1203,1212,1229,1240,
        1258,1271,1288,1297,1324,1326,1347,1352,1357,1360,1372,1377,1381,
        1384,1388,1392,1397,1400,1404,1406,1428,1436,1439,1449,1453,1461,
        1465,1470,1474,1478,1482,1486,1488,1496,1500,1503,1526,1530,1535,
        1546,1550,1555,1564,1566,1573,1581,1586,1599,1608,1616,1619,1632,
        1638,1643,1646,1656,1659,1663,1665,1672,1679,1686,1691,1695,1699,
        1703,1709,1712,1716,1720,1724,1730,1738,1741,1745,1751,1755,1760,
        1764,1768,1773,1781,1784,1789,1800,1804,1809,1816,1830,1832,1844,
        1851,1870,1883,1887,1894,1898,1902,1910,1922,1925,1931,1934,1938,
        1941,1946,1951,1958,1967,1975,1982,1986,1991,1994,2002,2007,2034,
        2039,2044,2047,2050,2059,2062,2070,2082,2085,2090,2094,2101,2114,
        2118,2122,2130,2133,2143,2151,2156,2162,2166,2172,2175,2178,2181,
        2195,2199,2203,2208,2211,2221,2229,2232,2236,2239,2243,2246,2249,
        2252,2255,2258,2262,2266,2269,2272,2275,2278,2281,2290,2296,2323,
        2345,2353,2356,2362,2370,2373,2379,2381,2385,2390,2393,2396,2400,
        2404,2407,2409,2412,2416,2420,2423,2425,2427,2430,2435,2446,2452,
        2457,2464,2469,2473,2477,2482,2489,2497,2500,2503,2522,2536,2552,
        2555,2564,2568,2573,2578,2581,2583,2605,2608,2619,2623,2626,2630,
        2634,2642,2646,2659,2671,2683,2691,2695,2702,2708,2716,2721,2730,
        2734,2765,2782,2794,2804,2807,2811,2814,2826,2843,2847,2864,2867,
        2871,2874,2885,2909,2916,2918,2920,2928,2933,2941,2951,2954,2962,
        2967,2976,2982,2986,2992,2999,3008,3014,3024,3026,3029,3037,3042,
        3052,3057,3061
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!ClickHouseParser.__ATN) {
            ClickHouseParser.__ATN = new antlr.ATNDeserializer().deserialize(ClickHouseParser._serializedATN);
        }

        return ClickHouseParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(ClickHouseParser.literalNames, ClickHouseParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return ClickHouseParser.vocabulary;
    }

    private static readonly decisionsToDFA = ClickHouseParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EOF, 0)!;
    }
    public statements(): StatementsContext | null {
        return this.getRuleContext(0, StatementsContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_root;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRoot) {
            return visitor.visitRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public statements(): StatementsContext | null {
        return this.getRuleContext(0, StatementsContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_statements;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStatements) {
            return visitor.visitStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public notInsertStatement(): NotInsertStatementContext | null {
        return this.getRuleContext(0, NotInsertStatementContext);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTO, 0);
    }
    public OUTFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTFILE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORMAT, 0);
    }
    public identifierOrNull(): IdentifierOrNullContext | null {
        return this.getRuleContext(0, IdentifierOrNullContext);
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(0, InsertStatementContext);
    }
    public grantStatement(): GrantStatementContext | null {
        return this.getRuleContext(0, GrantStatementContext);
    }
    public revokeStatement(): RevokeStatementContext | null {
        return this.getRuleContext(0, RevokeStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_statement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotInsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterStatement(): AlterStatementContext | null {
        return this.getRuleContext(0, AlterStatementContext);
    }
    public attachStatement(): AttachStatementContext | null {
        return this.getRuleContext(0, AttachStatementContext);
    }
    public checkStatement(): CheckStatementContext | null {
        return this.getRuleContext(0, CheckStatementContext);
    }
    public createStatement(): CreateStatementContext | null {
        return this.getRuleContext(0, CreateStatementContext);
    }
    public describeStatement(): DescribeStatementContext | null {
        return this.getRuleContext(0, DescribeStatementContext);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(0, DeleteStatementContext);
    }
    public dropStatement(): DropStatementContext | null {
        return this.getRuleContext(0, DropStatementContext);
    }
    public existsStatement(): ExistsStatementContext | null {
        return this.getRuleContext(0, ExistsStatementContext);
    }
    public explainStatement(): ExplainStatementContext | null {
        return this.getRuleContext(0, ExplainStatementContext);
    }
    public killStatement(): KillStatementContext | null {
        return this.getRuleContext(0, KillStatementContext);
    }
    public optimizeStatement(): OptimizeStatementContext | null {
        return this.getRuleContext(0, OptimizeStatementContext);
    }
    public renameStatement(): RenameStatementContext | null {
        return this.getRuleContext(0, RenameStatementContext);
    }
    public selectUnionStatement(): SelectUnionStatementContext | null {
        return this.getRuleContext(0, SelectUnionStatementContext);
    }
    public setStatement(): SetStatementContext | null {
        return this.getRuleContext(0, SetStatementContext);
    }
    public showStatement(): ShowStatementContext | null {
        return this.getRuleContext(0, ShowStatementContext);
    }
    public systemStatement(): SystemStatementContext | null {
        return this.getRuleContext(0, SystemStatementContext);
    }
    public truncateStatement(): TruncateStatementContext | null {
        return this.getRuleContext(0, TruncateStatementContext);
    }
    public useStatement(): UseStatementContext | null {
        return this.getRuleContext(0, UseStatementContext);
    }
    public watchStatement(): WatchStatementContext | null {
        return this.getRuleContext(0, WatchStatementContext);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public commonTableExpressionStatement(): CommonTableExpressionStatementContext | null {
        return this.getRuleContext(0, CommonTableExpressionStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_notInsertStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNotInsertStatement) {
            return visitor.visitNotInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonTableExpressionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WITH, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_commonTableExpressionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCommonTableExpressionStatement) {
            return visitor.visitCommonTableExpressionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_namedQuery;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAliasesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnAliases;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnAliases) {
            return visitor.visitColumnAliases(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterStatement;
    }
    public override copyFrom(ctx: AlterStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterTableStatementContext extends AlterStatementContext {
    public constructor(ctx: AlterStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public alterTableClause(): AlterTableClauseContext[];
    public alterTableClause(i: number): AlterTableClauseContext | null;
    public alterTableClause(i?: number): AlterTableClauseContext[] | AlterTableClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterTableClauseContext);
        }

        return this.getRuleContext(i, AlterTableClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableStatement) {
            return visitor.visitAlterTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableClause;
    }
    public override copyFrom(ctx: AlterTableClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class AlterTableClauseReplaceContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REPLACE, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseReplace) {
            return visitor.visitAlterTableClauseReplace(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyOrderByContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyOrderBy) {
            return visitor.visitAlterTableClauseModifyOrderBy(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseUpdateContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.UPDATE, 0)!;
    }
    public assignmentExpressionList(): AssignmentExpressionListContext {
        return this.getRuleContext(0, AssignmentExpressionListContext)!;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(0, WhereClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseUpdate) {
            return visitor.visitAlterTableClauseUpdate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseClearProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLEAR, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseClearProjection) {
            return visitor.visitAlterTableClauseClearProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyRemoveContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public REMOVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REMOVE, 0)!;
    }
    public tableColumnPropertyType(): TableColumnPropertyTypeContext {
        return this.getRuleContext(0, TableColumnPropertyTypeContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyRemove) {
            return visitor.visitAlterTableClauseModifyRemove(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDeleteContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DELETE, 0)!;
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDelete) {
            return visitor.visitAlterTableClauseDelete(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseCommentContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COMMENT, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseComment) {
            return visitor.visitAlterTableClauseComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropColumnContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropColumn) {
            return visitor.visitAlterTableClauseDropColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDetachContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DETACH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DETACH, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDetach) {
            return visitor.visitAlterTableClauseDetach(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAddIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ADD, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public tableIndexDefinition(): TableIndexDefinitionContext {
        return this.getRuleContext(0, TableIndexDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAddIndex) {
            return visitor.visitAlterTableClauseAddIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropPartitionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropPartition) {
            return visitor.visitAlterTableClauseDropPartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseMaterializeIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MATERIALIZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseMaterializeIndex) {
            return visitor.visitAlterTableClauseMaterializeIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseMaterializeProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MATERIALIZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseMaterializeProjection) {
            return visitor.visitAlterTableClauseMaterializeProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseMovePartitionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MOVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MOVE, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseMovePartition) {
            return visitor.visitAlterTableClauseMovePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseRenameContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RENAME, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext[];
    public columnIdentifier(i: number): ColumnIdentifierContext | null;
    public columnIdentifier(i?: number): ColumnIdentifierContext[] | ColumnIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnIdentifierContext);
        }

        return this.getRuleContext(i, ColumnIdentifierContext);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseRename) {
            return visitor.visitAlterTableClauseRename(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseFreezePartitionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FREEZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FREEZE, 0)!;
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseFreezePartition) {
            return visitor.visitAlterTableClauseFreezePartition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseClearColumnContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLEAR, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseClearColumn) {
            return visitor.visitAlterTableClauseClearColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        return this.getRuleContext(0, TableColumnDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModify) {
            return visitor.visitAlterTableClauseModify(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseClearIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CLEAR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLEAR, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseClearIndex) {
            return visitor.visitAlterTableClauseClearIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseRemoveTTLContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public REMOVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REMOVE, 0)!;
    }
    public TTL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TTL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseRemoveTTL) {
            return visitor.visitAlterTableClauseRemoveTTL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyCodecContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public codecExpression(): CodecExpressionContext {
        return this.getRuleContext(0, CodecExpressionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyCodec) {
            return visitor.visitAlterTableClauseModifyCodec(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAttachContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ATTACH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ATTACH, 0)!;
    }
    public partitionClause(): PartitionClauseContext {
        return this.getRuleContext(0, PartitionClauseContext)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAttach) {
            return visitor.visitAlterTableClauseAttach(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropProjection) {
            return visitor.visitAlterTableClauseDropProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseDropIndexContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseDropIndex) {
            return visitor.visitAlterTableClauseDropIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyCommentContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public COMMENT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COMMENT, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyComment) {
            return visitor.visitAlterTableClauseModifyComment(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseModifyTTLContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public ttlClause(): TtlClauseContext {
        return this.getRuleContext(0, TtlClauseContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseModifyTTL) {
            return visitor.visitAlterTableClauseModifyTTL(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAddProjectionContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ADD, 0)!;
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext {
        return this.getRuleContext(0, TableProjectionDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAddProjection) {
            return visitor.visitAlterTableClauseAddProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class AlterTableClauseAddColumnContext extends AlterTableClauseContext {
    public constructor(ctx: AlterTableClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ADD(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ADD, 0)!;
    }
    public COLUMN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLUMN, 0)!;
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        return this.getRuleContext(0, TableColumnDefinitionContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClauseAddColumn) {
            return visitor.visitAlterTableClauseAddColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignmentExpression(): AssignmentExpressionContext[];
    public assignmentExpression(i: number): AssignmentExpressionContext | null;
    public assignmentExpression(i?: number): AssignmentExpressionContext[] | AssignmentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignmentExpressionContext);
        }

        return this.getRuleContext(i, AssignmentExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_assignmentExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentExpressionList) {
            return visitor.visitAssignmentExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_assignmentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentExpression) {
            return visitor.visitAssignmentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnPropertyTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public CODEC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CODEC, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnPropertyType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnPropertyType) {
            return visitor.visitTableColumnPropertyType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_partitionClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionClause) {
            return visitor.visitPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AttachStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_attachStatement;
    }
    public override copyFrom(ctx: AttachStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class AttachDictionaryStatementContext extends AttachStatementContext {
    public constructor(ctx: AttachStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ATTACH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ATTACH, 0)!;
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAttachDictionaryStatement) {
            return visitor.visitAttachDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CHECK, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_checkStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCheckStatement) {
            return visitor.visitCheckStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_deleteStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteStatement) {
            return visitor.visitDeleteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public engineClause(): EngineClauseContext | null {
        return this.getRuleContext(0, EngineClauseContext);
    }
    public subqueryClause(): SubqueryClauseContext | null {
        return this.getRuleContext(0, SubqueryClauseContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createTableStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableStatement) {
            return visitor.visitCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public engineExpression(): EngineExpressionContext | null {
        return this.getRuleContext(0, EngineExpressionContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createDatabaseStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabaseStatement) {
            return visitor.visitCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDictionaryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public dictionarySchemaClause(): DictionarySchemaClauseContext {
        return this.getRuleContext(0, DictionarySchemaClauseContext)!;
    }
    public dictionaryEngineClause(): DictionaryEngineClauseContext {
        return this.getRuleContext(0, DictionaryEngineClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createDictionaryStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDictionaryStatement) {
            return visitor.visitCreateDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateLiveViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIVE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIMEOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMEOUT, 0);
    }
    public destinationClause(): DestinationClauseContext | null {
        return this.getRuleContext(0, DestinationClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createLiveViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateLiveViewStatement) {
            return visitor.visitCreateLiveViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMaterializedViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public destinationClause(): DestinationClauseContext | null {
        return this.getRuleContext(0, DestinationClauseContext);
    }
    public engineClause(): EngineClauseContext | null {
        return this.getRuleContext(0, EngineClauseContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public POPULATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POPULATE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createMaterializedViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedViewStatement) {
            return visitor.visitCreateMaterializedViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateViewStatement) {
            return visitor.visitCreateViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringIdentificationTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLAINTEXT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLAINTEXT_PASSWORD, 0);
    }
    public SHA256_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_PASSWORD, 0);
    }
    public SHA256_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_HASH, 0);
    }
    public DOUBLE_SHA1_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_PASSWORD, 0);
    }
    public DOUBLE_SHA1_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_HASH, 0);
    }
    public BCRYPT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_PASSWORD, 0);
    }
    public BCRYPT_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_HASH, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_stringIdentificationType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStringIdentificationType) {
            return visitor.visitStringIdentificationType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyTypeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEY, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.STRING_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.STRING_LITERAL, i);
    	}
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TYPE, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_keyTypeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKeyTypeClause) {
            return visitor.visitKeyTypeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OtherIdentificationTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NO_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO_PASSWORD, 0);
    }
    public LDAP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LDAP, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SERVER, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.STRING_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.STRING_LITERAL, i);
    	}
    }
    public KERBEROS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KERBEROS, 0);
    }
    public REALM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REALM, 0);
    }
    public SSL_CERTIFICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSL_CERTIFICATE, 0);
    }
    public SAN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAN, 0);
    }
    public CN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CN, 0);
    }
    public SSH_KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSH_KEY, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public keyTypeClause(): KeyTypeClauseContext[];
    public keyTypeClause(i: number): KeyTypeClauseContext | null;
    public keyTypeClause(i?: number): KeyTypeClauseContext[] | KeyTypeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyTypeClauseContext);
        }

        return this.getRuleContext(i, KeyTypeClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public HTTP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HTTP, 0);
    }
    public SCHEME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SCHEME, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_otherIdentificationType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOtherIdentificationType) {
            return visitor.visitOtherIdentificationType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserIdentificationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public IDENTIFIED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.IDENTIFIED, 0)!;
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public stringIdentificationType(): StringIdentificationTypeContext | null {
        return this.getRuleContext(0, StringIdentificationTypeContext);
    }
    public otherIdentificationType(): OtherIdentificationTypeContext | null {
        return this.getRuleContext(0, OtherIdentificationTypeContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userIdentificationClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserIdentificationClause) {
            return visitor.visitUserIdentificationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValidUntilClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALID(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VALID, 0)!;
    }
    public UNTIL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.UNTIL, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_validUntilClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValidUntilClause) {
            return visitor.visitValidUntilClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantsProviderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifier(): UserIdentifierContext | null {
        return this.getRuleContext(0, UserIdentifierContext);
    }
    public roleIdentifier(): RoleIdentifierContext | null {
        return this.getRuleContext(0, RoleIdentifierContext);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_grantsProvider;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGrantsProvider) {
            return visitor.visitGrantsProvider(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GranteesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANTEES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GRANTEES, 0)!;
    }
    public grantsProvider(): GrantsProviderContext[];
    public grantsProvider(i: number): GrantsProviderContext | null;
    public grantsProvider(i?: number): GrantsProviderContext[] | GrantsProviderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GrantsProviderContext);
        }

        return this.getRuleContext(i, GrantsProviderContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext | null {
        return this.getRuleContext(0, UserOrRoleExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_granteesClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGranteesClause) {
            return visitor.visitGranteesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HostTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAME, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REGEXP, 0);
    }
    public IP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IP, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_hostType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitHostType) {
            return visitor.visitHostType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HostClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOST(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.HOST, 0)!;
    }
    public hostType(): HostTypeContext[];
    public hostType(i: number): HostTypeContext | null;
    public hostType(i?: number): HostTypeContext[] | HostTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HostTypeContext);
        }

        return this.getRuleContext(i, HostTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_hostClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitHostClause) {
            return visitor.visitHostClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserSettingExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public EQ_SINGLE(): antlr.TerminalNode[];
    public EQ_SINGLE(i: number): antlr.TerminalNode | null;
    public EQ_SINGLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.EQ_SINGLE);
    	} else {
    		return this.getToken(ClickHouseParser.EQ_SINGLE, i);
    	}
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public READONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READONLY, 0);
    }
    public WRITABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WRITABLE, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createUserSettingExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUserSettingExpression) {
            return visitor.visitCreateUserSettingExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserSettingsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public createUserSettingExpression(): CreateUserSettingExpressionContext[];
    public createUserSettingExpression(i: number): CreateUserSettingExpressionContext | null;
    public createUserSettingExpression(i?: number): CreateUserSettingExpressionContext[] | CreateUserSettingExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreateUserSettingExpressionContext);
        }

        return this.getRuleContext(i, CreateUserSettingExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createUserSettingsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUserSettingsClause) {
            return visitor.visitCreateUserSettingsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InAccessStorageClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.IN, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_inAccessStorageClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInAccessStorageClause) {
            return visitor.visitInAccessStorageClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.USER, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public userIdentificationClause(): UserIdentificationClauseContext {
        return this.getRuleContext(0, UserIdentificationClauseContext)!;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public hostClause(): HostClauseContext | null {
        return this.getRuleContext(0, HostClauseContext);
    }
    public validUntilClause(): ValidUntilClauseContext | null {
        return this.getRuleContext(0, ValidUntilClauseContext);
    }
    public inAccessStorageClause(): InAccessStorageClauseContext | null {
        return this.getRuleContext(0, InAccessStorageClauseContext);
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DEFAULT);
    	} else {
    		return this.getToken(ClickHouseParser.DEFAULT, i);
    	}
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLE, 0);
    }
    public roleExpressionList(): RoleExpressionListContext | null {
        return this.getRuleContext(0, RoleExpressionListContext);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public granteesClause(): GranteesClauseContext | null {
        return this.getRuleContext(0, GranteesClauseContext);
    }
    public createUserSettingsClause(): CreateUserSettingsClauseContext | null {
        return this.getRuleContext(0, CreateUserSettingsClauseContext);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createUserStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUserStatement) {
            return visitor.visitCreateUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceOrIfNotExistsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_replaceOrIfNotExistsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceOrIfNotExistsClause) {
            return visitor.visitReplaceOrIfNotExistsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PolicyAssignmentSubjectContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASTERISK, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_policyAssignmentSubject;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPolicyAssignmentSubject) {
            return visitor.visitPolicyAssignmentSubject(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PolicyExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ON, 0)!;
    }
    public policyAssignmentSubject(): PolicyAssignmentSubjectContext {
        return this.getRuleContext(0, PolicyAssignmentSubjectContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_policyExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPolicyExpression) {
            return visitor.visitPolicyExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierOrLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifierOrLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierOrLiteral) {
            return visitor.visitIdentifierOrLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConditionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierOrLiteral(): IdentifierOrLiteralContext[];
    public identifierOrLiteral(i: number): IdentifierOrLiteralContext | null;
    public identifierOrLiteral(i?: number): IdentifierOrLiteralContext[] | IdentifierOrLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierOrLiteralContext);
        }

        return this.getRuleContext(i, IdentifierOrLiteralContext);
    }
    public EQ_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
    }
    public NOT_EQ(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT_EQ, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GT, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_conditionClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitConditionClause) {
            return visitor.visitConditionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRowPolicyStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.POLICY, 0)!;
    }
    public policyExpression(): PolicyExpressionContext[];
    public policyExpression(i: number): PolicyExpressionContext | null;
    public policyExpression(i?: number): PolicyExpressionContext[] | PolicyExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PolicyExpressionContext);
        }

        return this.getRuleContext(i, PolicyExpressionContext);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.USING, 0)!;
    }
    public conditionClause(): ConditionClauseContext {
        return this.getRuleContext(0, ConditionClauseContext)!;
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public inAccessStorageClause(): InAccessStorageClauseContext | null {
        return this.getRuleContext(0, InAccessStorageClauseContext);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SELECT, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public PERMISSIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PERMISSIVE, 0);
    }
    public RESTRICTIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTRICTIVE, 0);
    }
    public roleExpressionList(): RoleExpressionListContext | null {
        return this.getRuleContext(0, RoleExpressionListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createRowPolicyStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRowPolicyStatement) {
            return visitor.visitCreateRowPolicyStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext | null {
        return this.getRuleContext(0, CreateDatabaseStatementContext);
    }
    public createDictionaryStatement(): CreateDictionaryStatementContext | null {
        return this.getRuleContext(0, CreateDictionaryStatementContext);
    }
    public createLiveViewStatement(): CreateLiveViewStatementContext | null {
        return this.getRuleContext(0, CreateLiveViewStatementContext);
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext | null {
        return this.getRuleContext(0, CreateMaterializedViewStatementContext);
    }
    public createTableStatement(): CreateTableStatementContext | null {
        return this.getRuleContext(0, CreateTableStatementContext);
    }
    public createViewStatement(): CreateViewStatementContext | null {
        return this.getRuleContext(0, CreateViewStatementContext);
    }
    public createUserStatement(): CreateUserStatementContext | null {
        return this.getRuleContext(0, CreateUserStatementContext);
    }
    public createRowPolicyStatement(): CreateRowPolicyStatementContext | null {
        return this.getRuleContext(0, CreateRowPolicyStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateStatement) {
            return visitor.visitCreateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionarySchemaClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public dictionaryAttributeDefinition(): DictionaryAttributeDefinitionContext[];
    public dictionaryAttributeDefinition(i: number): DictionaryAttributeDefinitionContext | null;
    public dictionaryAttributeDefinition(i?: number): DictionaryAttributeDefinitionContext[] | DictionaryAttributeDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryAttributeDefinitionContext);
        }

        return this.getRuleContext(i, DictionaryAttributeDefinitionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionarySchemaClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionarySchemaClause) {
            return visitor.visitDictionarySchemaClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryAttributeDefinitionContext extends antlr.ParserRuleContext {
    public attrs: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DEFAULT);
    	} else {
    		return this.getToken(ClickHouseParser.DEFAULT, i);
    	}
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public EXPRESSION(): antlr.TerminalNode[];
    public EXPRESSION(i: number): antlr.TerminalNode | null;
    public EXPRESSION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.EXPRESSION);
    	} else {
    		return this.getToken(ClickHouseParser.EXPRESSION, i);
    	}
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public HIERARCHICAL(): antlr.TerminalNode[];
    public HIERARCHICAL(i: number): antlr.TerminalNode | null;
    public HIERARCHICAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.HIERARCHICAL);
    	} else {
    		return this.getToken(ClickHouseParser.HIERARCHICAL, i);
    	}
    }
    public INJECTIVE(): antlr.TerminalNode[];
    public INJECTIVE(i: number): antlr.TerminalNode | null;
    public INJECTIVE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.INJECTIVE);
    	} else {
    		return this.getToken(ClickHouseParser.INJECTIVE, i);
    	}
    }
    public IS_OBJECT_ID(): antlr.TerminalNode[];
    public IS_OBJECT_ID(i: number): antlr.TerminalNode | null;
    public IS_OBJECT_ID(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.IS_OBJECT_ID);
    	} else {
    		return this.getToken(ClickHouseParser.IS_OBJECT_ID, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryAttributeDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryAttributeDefinition) {
            return visitor.visitDictionaryAttributeDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryEngineClauseContext extends antlr.ParserRuleContext {
    public clauses: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dictionaryPrimaryKeyClause(): DictionaryPrimaryKeyClauseContext | null {
        return this.getRuleContext(0, DictionaryPrimaryKeyClauseContext);
    }
    public sourceClause(): SourceClauseContext[];
    public sourceClause(i: number): SourceClauseContext | null;
    public sourceClause(i?: number): SourceClauseContext[] | SourceClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SourceClauseContext);
        }

        return this.getRuleContext(i, SourceClauseContext);
    }
    public lifetimeClause(): LifetimeClauseContext[];
    public lifetimeClause(i: number): LifetimeClauseContext | null;
    public lifetimeClause(i?: number): LifetimeClauseContext[] | LifetimeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LifetimeClauseContext);
        }

        return this.getRuleContext(i, LifetimeClauseContext);
    }
    public layoutClause(): LayoutClauseContext[];
    public layoutClause(i: number): LayoutClauseContext | null;
    public layoutClause(i?: number): LayoutClauseContext[] | LayoutClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LayoutClauseContext);
        }

        return this.getRuleContext(i, LayoutClauseContext);
    }
    public rangeClause(): RangeClauseContext[];
    public rangeClause(i: number): RangeClauseContext | null;
    public rangeClause(i?: number): RangeClauseContext[] | RangeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RangeClauseContext);
        }

        return this.getRuleContext(i, RangeClauseContext);
    }
    public dictionarySettingsClause(): DictionarySettingsClauseContext[];
    public dictionarySettingsClause(i: number): DictionarySettingsClauseContext | null;
    public dictionarySettingsClause(i?: number): DictionarySettingsClauseContext[] | DictionarySettingsClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionarySettingsClauseContext);
        }

        return this.getRuleContext(i, DictionarySettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryEngineClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryEngineClause) {
            return visitor.visitDictionaryEngineClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryPrimaryKeyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PRIMARY, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryPrimaryKeyClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryPrimaryKeyClause) {
            return visitor.visitDictionaryPrimaryKeyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryArgumentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryArgumentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryArgumentExpression) {
            return visitor.visitDictionaryArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SOURCE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext[];
    public dictionaryArgumentExpression(i: number): DictionaryArgumentExpressionContext | null;
    public dictionaryArgumentExpression(i?: number): DictionaryArgumentExpressionContext[] | DictionaryArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryArgumentExpressionContext);
        }

        return this.getRuleContext(i, DictionaryArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sourceClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSourceClause) {
            return visitor.visitSourceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LifetimeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIFETIME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIFETIME, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode[];
    public DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
    	}
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_lifetimeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLifetimeClause) {
            return visitor.visitLifetimeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LayoutClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LAYOUT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LAYOUT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext[];
    public dictionaryArgumentExpression(i: number): DictionaryArgumentExpressionContext | null;
    public dictionaryArgumentExpression(i?: number): DictionaryArgumentExpressionContext[] | DictionaryArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryArgumentExpressionContext);
        }

        return this.getRuleContext(i, DictionaryArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_layoutClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLayoutClause) {
            return visitor.visitLayoutClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANGE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RANGE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_rangeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRangeClause) {
            return visitor.visitRangeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionarySettingsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionarySettingsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionarySettingsClause) {
            return visitor.visitDictionarySettingsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ON, 0)!;
    }
    public CLUSTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLUSTER, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_clusterClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitClusterClause) {
            return visitor.visitClusterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UuidClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UUID(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.UUID, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_uuidClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUuidClause) {
            return visitor.visitUuidClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DestinationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_destinationClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDestinationClause) {
            return visitor.visitDestinationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubqueryClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_subqueryClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryClause) {
            return visitor.visitSubqueryClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSchemaClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableSchemaClause;
    }
    public override copyFrom(ctx: TableSchemaClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class SchemaAsTableClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaAsTableClause) {
            return visitor.visitSchemaAsTableClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SchemaAsFunctionClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        return this.getRuleContext(0, TableFunctionExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaAsFunctionClause) {
            return visitor.visitSchemaAsFunctionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SchemaDescriptionClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public tableElementExpression(): TableElementExpressionContext[];
    public tableElementExpression(i: number): TableElementExpressionContext | null;
    public tableElementExpression(i?: number): TableElementExpressionContext[] | TableElementExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableElementExpressionContext);
        }

        return this.getRuleContext(i, TableElementExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaDescriptionClause) {
            return visitor.visitSchemaDescriptionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineClauseContext extends antlr.ParserRuleContext {
    public clauses: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public engineExpression(): EngineExpressionContext {
        return this.getRuleContext(0, EngineExpressionContext)!;
    }
    public orderByClause(): OrderByClauseContext[];
    public orderByClause(i: number): OrderByClauseContext | null;
    public orderByClause(i?: number): OrderByClauseContext[] | OrderByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderByClauseContext);
        }

        return this.getRuleContext(i, OrderByClauseContext);
    }
    public partitionByClause(): PartitionByClauseContext[];
    public partitionByClause(i: number): PartitionByClauseContext | null;
    public partitionByClause(i?: number): PartitionByClauseContext[] | PartitionByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionByClauseContext);
        }

        return this.getRuleContext(i, PartitionByClauseContext);
    }
    public primaryKeyClause(): PrimaryKeyClauseContext[];
    public primaryKeyClause(i: number): PrimaryKeyClauseContext | null;
    public primaryKeyClause(i?: number): PrimaryKeyClauseContext[] | PrimaryKeyClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryKeyClauseContext);
        }

        return this.getRuleContext(i, PrimaryKeyClauseContext);
    }
    public sampleByClause(): SampleByClauseContext[];
    public sampleByClause(i: number): SampleByClauseContext | null;
    public sampleByClause(i?: number): SampleByClauseContext[] | SampleByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SampleByClauseContext);
        }

        return this.getRuleContext(i, SampleByClauseContext);
    }
    public ttlClause(): TtlClauseContext[];
    public ttlClause(i: number): TtlClauseContext | null;
    public ttlClause(i?: number): TtlClauseContext[] | TtlClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TtlClauseContext);
        }

        return this.getRuleContext(i, TtlClauseContext);
    }
    public settingsClause(): SettingsClauseContext[];
    public settingsClause(i: number): SettingsClauseContext | null;
    public settingsClause(i?: number): SettingsClauseContext[] | SettingsClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SettingsClauseContext);
        }

        return this.getRuleContext(i, SettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_engineClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEngineClause) {
            return visitor.visitEngineClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_partitionByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionByClause) {
            return visitor.visitPartitionByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryKeyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PRIMARY, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_primaryKeyClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryKeyClause) {
            return visitor.visitPrimaryKeyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAMPLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SAMPLE, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sampleByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSampleByClause) {
            return visitor.visitSampleByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TtlClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TTL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TTL, 0)!;
    }
    public ttlExpression(): TtlExpressionContext[];
    public ttlExpression(i: number): TtlExpressionContext | null;
    public ttlExpression(i?: number): TtlExpressionContext[] | TtlExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TtlExpressionContext);
        }

        return this.getRuleContext(i, TtlExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ttlClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTtlClause) {
            return visitor.visitTtlClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ENGINE, 0)!;
    }
    public identifierOrNull(): IdentifierOrNullContext {
        return this.getRuleContext(0, IdentifierOrNullContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_engineExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEngineExpression) {
            return visitor.visitEngineExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableElementExpression;
    }
    public override copyFrom(ctx: TableElementExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class TableElementExpressionColumnContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        return this.getRuleContext(0, TableColumnDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionColumn) {
            return visitor.visitTableElementExpressionColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionConstraintContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CHECK, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionConstraint) {
            return visitor.visitTableElementExpressionConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionIndexContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public tableIndexDefinition(): TableIndexDefinitionContext {
        return this.getRuleContext(0, TableIndexDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionIndex) {
            return visitor.visitTableElementExpressionIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionProjectionContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext {
        return this.getRuleContext(0, TableProjectionDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionProjection) {
            return visitor.visitTableElementExpressionProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext | null {
        return this.getRuleContext(0, ColumnTypeExpressionContext);
    }
    public tableColumnPropertyExpression(): TableColumnPropertyExpressionContext | null {
        return this.getRuleContext(0, TableColumnPropertyExpressionContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public codecExpression(): CodecExpressionContext | null {
        return this.getRuleContext(0, CodecExpressionContext);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnDefinition) {
            return visitor.visitTableColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnPropertyExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnPropertyExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnPropertyExpression) {
            return visitor.visitTableColumnPropertyExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIndexDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TYPE, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public GRANULARITY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GRANULARITY, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableIndexDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableIndexDefinition) {
            return visitor.visitTableIndexDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableProjectionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public projectionSelectStatement(): ProjectionSelectStatementContext {
        return this.getRuleContext(0, ProjectionSelectStatementContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableProjectionDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableProjectionDefinition) {
            return visitor.visitTableProjectionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CodecExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CODEC(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CODEC, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public codecArgExpression(): CodecArgExpressionContext[];
    public codecArgExpression(i: number): CodecArgExpressionContext | null;
    public codecArgExpression(i?: number): CodecArgExpressionContext[] | CodecArgExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CodecArgExpressionContext);
        }

        return this.getRuleContext(i, CodecArgExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_codecExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCodecExpression) {
            return visitor.visitCodecExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CodecArgExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_codecArgExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCodecArgExpression) {
            return visitor.visitCodecArgExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TtlExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ttlExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTtlExpression) {
            return visitor.visitTtlExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_describeStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeStatement) {
            return visitor.visitDescribeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dropStatement;
    }
    public override copyFrom(ctx: DropStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class DropDatabaseStatementContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropDatabaseStatement) {
            return visitor.visitDropDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableStatementContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO, 0);
    }
    public DELAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELAY, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropTableStatement) {
            return visitor.visitDropTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExistsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_existsStatement;
    }
    public override copyFrom(ctx: ExistsStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExistsDatabaseStatementContext extends ExistsStatementContext {
    public constructor(ctx: ExistsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXISTS, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExistsDatabaseStatement) {
            return visitor.visitExistsDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsTableStatementContext extends ExistsStatementContext {
    public constructor(ctx: ExistsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXISTS, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExistsTableStatement) {
            return visitor.visitExistsTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_explainStatement;
    }
    public override copyFrom(ctx: ExplainStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainASTStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public AST(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AST, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainASTStatement) {
            return visitor.visitExplainASTStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainQueryTreeStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public QUERY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.QUERY, 0)!;
    }
    public TREE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TREE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainQueryTreeStatement) {
            return visitor.visitExplainQueryTreeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainPlanStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public PLAN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PLAN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainPlanStatement) {
            return visitor.visitExplainPlanStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainDefaultStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainDefaultStatement) {
            return visitor.visitExplainDefaultStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainEstimateStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public ESTIMATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ESTIMATE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainEstimateStatement) {
            return visitor.visitExplainEstimateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainSyntaxStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public SYNTAX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SYNTAX, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainSyntaxStatement) {
            return visitor.visitExplainSyntaxStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainPipelineStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public PIPELINE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PIPELINE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainPipelineStatement) {
            return visitor.visitExplainPipelineStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REVOKE, 0)!;
    }
    public privilegeList(): PrivilegeListContext | null {
        return this.getRuleContext(0, PrivilegeListContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ON, 0);
    }
    public accessSubjectIdentifier(): AccessSubjectIdentifierContext | null {
        return this.getRuleContext(0, AccessSubjectIdentifierContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public userExpressionList(): UserExpressionListContext | null {
        return this.getRuleContext(0, UserExpressionListContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public roleExpressionList(): RoleExpressionListContext | null {
        return this.getRuleContext(0, RoleExpressionListContext);
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext | null {
        return this.getRuleContext(0, UserOrRoleExpressionListContext);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_revokeStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRevokeStatement) {
            return visitor.visitRevokeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifier(): UserIdentifierContext[];
    public userIdentifier(i: number): UserIdentifierContext | null;
    public userIdentifier(i?: number): UserIdentifierContext[] | UserIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserIdentifierContext);
        }

        return this.getRuleContext(i, UserIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserExpressionList) {
            return visitor.visitUserExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifier(): RoleIdentifierContext[];
    public roleIdentifier(i: number): RoleIdentifierContext | null;
    public roleIdentifier(i?: number): RoleIdentifierContext[] | RoleIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleIdentifierContext);
        }

        return this.getRuleContext(i, RoleIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_roleExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRoleExpressionList) {
            return visitor.visitRoleExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GRANT, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext {
        return this.getRuleContext(0, UserOrRoleExpressionListContext)!;
    }
    public withGrantOrReplaceOption(): WithGrantOrReplaceOptionContext | null {
        return this.getRuleContext(0, WithGrantOrReplaceOptionContext);
    }
    public privilegeList(): PrivilegeListContext[];
    public privilegeList(i: number): PrivilegeListContext | null;
    public privilegeList(i?: number): PrivilegeListContext[] | PrivilegeListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeListContext);
        }

        return this.getRuleContext(i, PrivilegeListContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ON);
    	} else {
    		return this.getToken(ClickHouseParser.ON, i);
    	}
    }
    public accessSubjectIdentifier(): AccessSubjectIdentifierContext[];
    public accessSubjectIdentifier(i: number): AccessSubjectIdentifierContext | null;
    public accessSubjectIdentifier(i?: number): AccessSubjectIdentifierContext[] | AccessSubjectIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AccessSubjectIdentifierContext);
        }

        return this.getRuleContext(i, AccessSubjectIdentifierContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public roleExpressionList(): RoleExpressionListContext | null {
        return this.getRuleContext(0, RoleExpressionListContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public withReplaceOption(): WithReplaceOptionContext | null {
        return this.getRuleContext(0, WithReplaceOptionContext);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT, 0);
    }
    public GRANTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANTS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_grantStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGrantStatement) {
            return visitor.visitGrantStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithGrantOrReplaceOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public withReplaceOption(): WithReplaceOptionContext | null {
        return this.getRuleContext(0, WithReplaceOptionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_withGrantOrReplaceOption;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWithGrantOrReplaceOption) {
            return visitor.visitWithGrantOrReplaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithReplaceOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WITH, 0)!;
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REPLACE, 0)!;
    }
    public OPTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_withReplaceOption;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWithReplaceOption) {
            return visitor.visitWithReplaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AccessSubjectIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public ASTERISK(): antlr.TerminalNode[];
    public ASTERISK(i: number): antlr.TerminalNode | null;
    public ASTERISK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ASTERISK);
    	} else {
    		return this.getToken(ClickHouseParser.ASTERISK, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_accessSubjectIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAccessSubjectIdentifier) {
            return visitor.visitAccessSubjectIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_privilegeList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeList) {
            return visitor.visitPrivilegeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_roleIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRoleIdentifier) {
            return visitor.visitRoleIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT_USER, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserIdentifier) {
            return visitor.visitUserIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserOrRoleExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userOrRoleIdentifier(): UserOrRoleIdentifierContext[];
    public userOrRoleIdentifier(i: number): UserOrRoleIdentifierContext | null;
    public userOrRoleIdentifier(i?: number): UserOrRoleIdentifierContext[] | UserOrRoleIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserOrRoleIdentifierContext);
        }

        return this.getRuleContext(i, UserOrRoleIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userOrRoleExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserOrRoleExpressionList) {
            return visitor.visitUserOrRoleExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserOrRoleIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifier(): UserIdentifierContext | null {
        return this.getRuleContext(0, UserIdentifierContext);
    }
    public roleIdentifier(): RoleIdentifierContext | null {
        return this.getRuleContext(0, RoleIdentifierContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userOrRoleIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserOrRoleIdentifier) {
            return visitor.visitUserOrRoleIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectPrivilege) {
            return visitor.visitSelectPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INSERT, 0)!;
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_insertPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInsertPrivilege) {
            return visitor.visitInsertPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatePrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public ARBITRARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARBITRARY, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreatePrivilege) {
            return visitor.visitCreatePrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dropPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropPrivilege) {
            return visitor.visitDropPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DATABASES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASES, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLES, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMNS, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_showPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowPrivilege) {
            return visitor.visitShowPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntrospectionPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTROSPECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTROSPECTION, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTIONS, 0);
    }
    public ADDRESSTOLINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINE, 0);
    }
    public ADDRESSTOLINEWITHINLINES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINEWITHINLINES, 0);
    }
    public ADDRESSTOSYMBOL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOSYMBOL, 0);
    }
    public DEMANGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEMANGLE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_introspectionPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIntrospectionPrivilege) {
            return visitor.visitIntrospectionPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourcePrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SOURCES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCES, 0);
    }
    public AZURE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AZURE, 0);
    }
    public FILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FILE, 0);
    }
    public HDFS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HDFS, 0);
    }
    public HIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HIVE, 0);
    }
    public JDBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JDBC, 0);
    }
    public MONGO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONGO, 0);
    }
    public MYSQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQL, 0);
    }
    public ODBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ODBC, 0);
    }
    public POSTGRES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POSTGRES, 0);
    }
    public REDIS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REDIS, 0);
    }
    public REMOTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOTE, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.S3, 0);
    }
    public SQLITE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQLITE, 0);
    }
    public URL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.URL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sourcePrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSourcePrivilege) {
            return visitor.visitSourcePrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DICTGET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGET, 0);
    }
    public DICTHAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTHAS, 0);
    }
    public DICTGETHIERARCHY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGETHIERARCHY, 0);
    }
    public DICTISIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTISIN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictPrivilege) {
            return visitor.visitDictPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UPDATE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADD, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MODIFY, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public CLEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLEAR, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RENAME, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public MATERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORDER, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAMPLE, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SETTING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTING, 0);
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVE, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCH, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARTITION, 0);
    }
    public PART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PART, 0);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FREEZE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REFRESH, 0);
    }
    public LIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIVE, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECURITY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterPrivilege) {
            return visitor.visitAlterPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AccessManagementPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ACCESS, 0);
    }
    public MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MANAGEMENT, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLE, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICY, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public QUOTA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUOTA, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILE, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW, 0);
    }
    public SHOW_USERS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_USERS, 0);
    }
    public SHOW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROLES, 0);
    }
    public SHOW_ROW_POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROW_POLICIES, 0);
    }
    public POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICIES, 0);
    }
    public SHOW_QUOTAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_QUOTAS, 0);
    }
    public SHOW_SETTINGS_PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_SETTINGS_PROFILES, 0);
    }
    public PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILES, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECURITY, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public ALLOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALLOW, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_accessManagementPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAccessManagementPrivilege) {
            return visitor.visitAccessManagementPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SystemPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYSTEM, 0);
    }
    public SHUTDOWN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHUTDOWN, 0);
    }
    public KILL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KILL, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CACHE, 0);
    }
    public DNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DNS, 0);
    }
    public MARK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARK, 0);
    }
    public UNCOMPRESSED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNCOMPRESSED, 0);
    }
    public MARKS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARKS, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RELOAD, 0);
    }
    public CONFIG(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONFIG, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public EMBEDDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EMBEDDED, 0);
    }
    public MERGES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MERGES, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STOP, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.START, 0);
    }
    public FETCHES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCHES, 0);
    }
    public MOVES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVES, 0);
    }
    public SENDS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SENDS, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
    }
    public REPLICATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATED, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATION, 0);
    }
    public QUEUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUEUES, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICA, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTART, 0);
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLUSH, 0);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOGS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_systemPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSystemPrivilege) {
            return visitor.visitSystemPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedCollectionAdminPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NAMED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NAMED, 0)!;
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTION, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public CONTROL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONTROL, 0);
    }
    public USAGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USAGE, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW, 0);
    }
    public COLLECTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTIONS, 0);
    }
    public SECRETS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECRETS, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_namedCollectionAdminPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNamedCollectionAdminPrivilege) {
            return visitor.visitNamedCollectionAdminPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectPrivilege(): SelectPrivilegeContext | null {
        return this.getRuleContext(0, SelectPrivilegeContext);
    }
    public insertPrivilege(): InsertPrivilegeContext | null {
        return this.getRuleContext(0, InsertPrivilegeContext);
    }
    public createPrivilege(): CreatePrivilegeContext | null {
        return this.getRuleContext(0, CreatePrivilegeContext);
    }
    public dropPrivilege(): DropPrivilegeContext | null {
        return this.getRuleContext(0, DropPrivilegeContext);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRUNCATE, 0);
    }
    public KILL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KILL, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY, 0);
    }
    public OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0);
    }
    public showPrivilege(): ShowPrivilegeContext | null {
        return this.getRuleContext(0, ShowPrivilegeContext);
    }
    public introspectionPrivilege(): IntrospectionPrivilegeContext | null {
        return this.getRuleContext(0, IntrospectionPrivilegeContext);
    }
    public sourcePrivilege(): SourcePrivilegeContext | null {
        return this.getRuleContext(0, SourcePrivilegeContext);
    }
    public dictPrivilege(): DictPrivilegeContext | null {
        return this.getRuleContext(0, DictPrivilegeContext);
    }
    public alterPrivilege(): AlterPrivilegeContext | null {
        return this.getRuleContext(0, AlterPrivilegeContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public DISPLAYSECRETSINSHOWANDSELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT, 0);
    }
    public accessManagementPrivilege(): AccessManagementPrivilegeContext | null {
        return this.getRuleContext(0, AccessManagementPrivilegeContext);
    }
    public systemPrivilege(): SystemPrivilegeContext | null {
        return this.getRuleContext(0, SystemPrivilegeContext);
    }
    public namedCollectionAdminPrivilege(): NamedCollectionAdminPrivilegeContext | null {
        return this.getRuleContext(0, NamedCollectionAdminPrivilegeContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ENGINE, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public USAGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USAGE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_privilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INSERT, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INTO, 0)!;
    }
    public dataClause(): DataClauseContext {
        return this.getRuleContext(0, DataClauseContext)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext | null {
        return this.getRuleContext(0, TableFunctionExpressionContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public columnsOrExceptClause(): ColumnsOrExceptClauseContext | null {
        return this.getRuleContext(0, ColumnsOrExceptClauseContext);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_insertStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsOrExceptClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASTERISK, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnsOrExceptClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsOrExceptClause) {
            return visitor.visitColumnsOrExceptClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext[];
    public columnIdentifier(i: number): ColumnIdentifierContext | null;
    public columnIdentifier(i?: number): ColumnIdentifierContext[] | ColumnIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnIdentifierContext);
        }

        return this.getRuleContext(i, ColumnIdentifierContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsClause) {
            return visitor.visitColumnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertFormatTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATED, 0);
    }
    public TABSEPARATEDRAW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAW, 0);
    }
    public TABSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMES, 0);
    }
    public TABSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public TABSEPARATEDRAWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMES, 0);
    }
    public TABSEPARATEDRAWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATE, 0);
    }
    public TEMPLATEIGNORESPACES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATEIGNORESPACES, 0);
    }
    public CSV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSV, 0);
    }
    public CSVWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMES, 0);
    }
    public CSVWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMESANDTYPES, 0);
    }
    public CUSTOMSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATED, 0);
    }
    public CUSTOMSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMES, 0);
    }
    public CUSTOMSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VALUES, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON, 0);
    }
    public JSONASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASSTRING, 0);
    }
    public JSONASOBJECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASOBJECT, 0);
    }
    public JSONSTRINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGS, 0);
    }
    public JSONCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNS, 0);
    }
    public JSONCOLUMNSWITHMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNSWITHMETADATA, 0);
    }
    public JSONCOMPACT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACT, 0);
    }
    public JSONCOMPACTCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTCOLUMNS, 0);
    }
    public JSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONEACHROW, 0);
    }
    public JSONSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROW, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONOBJECTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONOBJECTEACHROW, 0);
    }
    public BSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BSONEACHROW, 0);
    }
    public TSKV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TSKV, 0);
    }
    public PROTOBUF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUF, 0);
    }
    public PROTOBUFSINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFSINGLE, 0);
    }
    public PROTOBUFLIST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFLIST, 0);
    }
    public AVRO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVRO, 0);
    }
    public AVROCONFLUENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVROCONFLUENT, 0);
    }
    public PARQUET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUET, 0);
    }
    public PARQUETMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUETMETADATA, 0);
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROW, 0);
    }
    public ARROWSTREAM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROWSTREAM, 0);
    }
    public ORC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORC, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ONE, 0);
    }
    public NPY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NPY, 0);
    }
    public ROWBINARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARY, 0);
    }
    public ROWBINARYWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMES, 0);
    }
    public ROWBINARYWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMESANDTYPES, 0);
    }
    public ROWBINARYWITHDEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHDEFAULTS, 0);
    }
    public NATIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NATIVE, 0);
    }
    public CAPNPROTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CAPNPROTO, 0);
    }
    public LINEASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LINEASSTRING, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REGEXP, 0);
    }
    public RAWBLOB(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RAWBLOB, 0);
    }
    public MSGPACK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MSGPACK, 0);
    }
    public MYSQLDUMP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQLDUMP, 0);
    }
    public DWARF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DWARF, 0);
    }
    public FORM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORM, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_insertFormatType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInsertFormatType) {
            return visitor.visitInsertFormatType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dataClause;
    }
    public override copyFrom(ctx: DataClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class DataClauseValuesContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valuesStatement(): ValuesStatementContext {
        return this.getRuleContext(0, ValuesStatementContext)!;
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORMAT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseValues) {
            return visitor.visitDataClauseValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DataClauseFormatContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FORMAT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FORMAT, 0)!;
    }
    public insertFormatType(): InsertFormatTypeContext {
        return this.getRuleContext(0, InsertFormatTypeContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseFormat) {
            return visitor.visitDataClauseFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DataClauseSelectContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseSelect) {
            return visitor.visitDataClauseSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_literalList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLiteralList) {
            return visitor.visitLiteralList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public numberLiteral(): NumberLiteralContext[];
    public numberLiteral(i: number): NumberLiteralContext | null;
    public numberLiteral(i?: number): NumberLiteralContext[] | NumberLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumberLiteralContext);
        }

        return this.getRuleContext(i, NumberLiteralContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public literalList(): LiteralListContext | null {
        return this.getRuleContext(0, LiteralListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valueIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValueIdentifier) {
            return visitor.visitValueIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueOrArrayIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueIdentifier(): ValueIdentifierContext | null {
        return this.getRuleContext(0, ValueIdentifierContext);
    }
    public arrayIdentifier(): ArrayIdentifierContext | null {
        return this.getRuleContext(0, ArrayIdentifierContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valueOrArrayIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValueOrArrayIdentifier) {
            return visitor.visitValueOrArrayIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LBRACKET, 0)!;
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RBRACKET, 0)!;
    }
    public valueOrArrayIdentifier(): ValueOrArrayIdentifierContext[];
    public valueOrArrayIdentifier(i: number): ValueOrArrayIdentifierContext | null;
    public valueOrArrayIdentifier(i?: number): ValueOrArrayIdentifierContext[] | ValueOrArrayIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueOrArrayIdentifierContext);
        }

        return this.getRuleContext(i, ValueOrArrayIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_arrayIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitArrayIdentifier) {
            return visitor.visitArrayIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public valueOrArrayIdentifier(): ValueOrArrayIdentifierContext[];
    public valueOrArrayIdentifier(i: number): ValueOrArrayIdentifierContext | null;
    public valueOrArrayIdentifier(i?: number): ValueOrArrayIdentifierContext[] | ValueOrArrayIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueOrArrayIdentifierContext);
        }

        return this.getRuleContext(i, ValueOrArrayIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valuesClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValuesClause) {
            return visitor.visitValuesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VALUES, 0)!;
    }
    public valuesClause(): ValuesClauseContext[];
    public valuesClause(i: number): ValuesClauseContext | null;
    public valuesClause(i?: number): ValuesClauseContext[] | ValuesClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValuesClauseContext);
        }

        return this.getRuleContext(i, ValuesClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valuesStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValuesStatement) {
            return visitor.visitValuesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KillStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_killStatement;
    }
    public override copyFrom(ctx: KillStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class KillMutationStatementContext extends KillStatementContext {
    public constructor(ctx: KillStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KILL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KILL, 0)!;
    }
    public MUTATION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MUTATION, 0)!;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(0, WhereClauseContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASYNC, 0);
    }
    public TEST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEST, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKillMutationStatement) {
            return visitor.visitKillMutationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptimizeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIMIZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public DEDUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_optimizeStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOptimizeStatement) {
            return visitor.visitOptimizeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RENAME, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext[];
    public tableIdentifier(i: number): TableIdentifierContext | null;
    public tableIdentifier(i?: number): TableIdentifierContext[] | TableIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableIdentifierContext);
        }

        return this.getRuleContext(i, TableIdentifierContext);
    }
    public TO(): antlr.TerminalNode[];
    public TO(i: number): antlr.TerminalNode | null;
    public TO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.TO);
    	} else {
    		return this.getToken(ClickHouseParser.TO, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_renameStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRenameStatement) {
            return visitor.visitRenameStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProjectionSelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public projectionOrderByClause(): ProjectionOrderByClauseContext | null {
        return this.getRuleContext(0, ProjectionOrderByClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_projectionSelectStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitProjectionSelectStatement) {
            return visitor.visitProjectionSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectUnionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatementWithParentheses(): SelectStatementWithParenthesesContext[];
    public selectStatementWithParentheses(i: number): SelectStatementWithParenthesesContext | null;
    public selectStatementWithParentheses(i?: number): SelectStatementWithParenthesesContext[] | SelectStatementWithParenthesesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectStatementWithParenthesesContext);
        }

        return this.getRuleContext(i, SelectStatementWithParenthesesContext);
    }
    public UNION(): antlr.TerminalNode[];
    public UNION(i: number): antlr.TerminalNode | null;
    public UNION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.UNION);
    	} else {
    		return this.getToken(ClickHouseParser.UNION, i);
    	}
    }
    public ALL(): antlr.TerminalNode[];
    public ALL(i: number): antlr.TerminalNode | null;
    public ALL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ALL);
    	} else {
    		return this.getToken(ClickHouseParser.ALL, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectUnionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectUnionStatement) {
            return visitor.visitSelectUnionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementWithParenthesesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public selectUnionStatement(): SelectUnionStatementContext | null {
        return this.getRuleContext(0, SelectUnionStatementContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectStatementWithParentheses;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatementWithParentheses) {
            return visitor.visitSelectStatementWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public topClause(): TopClauseContext | null {
        return this.getRuleContext(0, TopClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public arrayJoinClause(): ArrayJoinClauseContext | null {
        return this.getRuleContext(0, ArrayJoinClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public prewhereClause(): PrewhereClauseContext | null {
        return this.getRuleContext(0, PrewhereClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.WITH);
    	} else {
    		return this.getToken(ClickHouseParser.WITH, i);
    	}
    }
    public TOTALS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOTALS, 0);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitByClause(): LimitByClauseContext | null {
        return this.getRuleContext(0, LimitByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WITH, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_withClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TopClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TOP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TOP, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_topClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTopClause) {
            return visitor.visitTopClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public joinExpression(): JoinExpressionContext {
        return this.getRuleContext(0, JoinExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_fromClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayJoinClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARRAY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ARRAY, 0)!;
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.JOIN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_arrayJoinClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitArrayJoinClause) {
            return visitor.visitArrayJoinClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WINDOW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public windowExpression(): WindowExpressionContext {
        return this.getRuleContext(0, WindowExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrewhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PREWHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PREWHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_prewhereClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrewhereClause) {
            return visitor.visitPrewhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_whereClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GROUP, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_groupByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HAVING(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.HAVING, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_havingClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public orderExpressionList(): OrderExpressionListContext {
        return this.getRuleContext(0, OrderExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderByClause) {
            return visitor.visitOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProjectionOrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_projectionOrderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitProjectionOrderByClause) {
            return visitor.visitProjectionOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIMIT, 0)!;
    }
    public limitExpression(): LimitExpressionContext {
        return this.getRuleContext(0, LimitExpressionContext)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitByClause) {
            return visitor.visitLimitByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIMIT, 0)!;
    }
    public limitExpression(): LimitExpressionContext {
        return this.getRuleContext(0, LimitExpressionContext)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingsClause) {
            return visitor.visitSettingsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinExpression;
    }
    public override copyFrom(ctx: JoinExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class JoinExpressionParensContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public joinExpression(): JoinExpressionContext {
        return this.getRuleContext(0, JoinExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionParens) {
            return visitor.visitJoinExpressionParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionTableContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public sampleClause(): SampleClauseContext | null {
        return this.getRuleContext(0, SampleClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionTable) {
            return visitor.visitJoinExpressionTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionCrossOpContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public joinExpression(): JoinExpressionContext[];
    public joinExpression(i: number): JoinExpressionContext | null;
    public joinExpression(i?: number): JoinExpressionContext[] | JoinExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinExpressionContext);
        }

        return this.getRuleContext(i, JoinExpressionContext);
    }
    public joinOperatorCross(): JoinOperatorCrossContext {
        return this.getRuleContext(0, JoinOperatorCrossContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionCrossOp) {
            return visitor.visitJoinExpressionCrossOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionOpContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public joinExpression(): JoinExpressionContext[];
    public joinExpression(i: number): JoinExpressionContext | null;
    public joinExpression(i?: number): JoinExpressionContext[] | JoinExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinExpressionContext);
        }

        return this.getRuleContext(i, JoinExpressionContext);
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.JOIN, 0)!;
    }
    public joinConstraintClause(): JoinConstraintClauseContext {
        return this.getRuleContext(0, JoinConstraintClauseContext)!;
    }
    public joinOperator(): JoinOperatorContext | null {
        return this.getRuleContext(0, JoinOperatorContext);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionOp) {
            return visitor.visitJoinExpressionOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinOperator;
    }
    public override copyFrom(ctx: JoinOperatorContext): void {
        super.copyFrom(ctx);
    }
}
export class JoinOpFullContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FULL, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpFull) {
            return visitor.visitJoinOpFull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinOpInnerContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpInner) {
            return visitor.visitJoinOpInner(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinOpLeftRightContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RIGHT, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMI, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANTI, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpLeftRight) {
            return visitor.visitJoinOpLeftRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinOperatorCrossContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CROSS, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JOIN, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinOperatorCross;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOperatorCross) {
            return visitor.visitJoinOperatorCross(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinConstraintClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ON, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USING, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinConstraintClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinConstraintClause) {
            return visitor.visitJoinConstraintClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAMPLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SAMPLE, 0)!;
    }
    public ratioExpression(): RatioExpressionContext[];
    public ratioExpression(i: number): RatioExpressionContext | null;
    public ratioExpression(i?: number): RatioExpressionContext[] | RatioExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RatioExpressionContext);
        }

        return this.getRuleContext(i, RatioExpressionContext);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sampleClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSampleClause) {
            return visitor.visitSampleClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitExpression) {
            return visitor.visitLimitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public orderExpression(): OrderExpressionContext[];
    public orderExpression(i: number): OrderExpressionContext | null;
    public orderExpression(i?: number): OrderExpressionContext[] | OrderExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderExpressionContext);
        }

        return this.getRuleContext(i, OrderExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderExpressionList) {
            return visitor.visitOrderExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULLS, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLATE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public ASCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASCENDING, 0);
    }
    public DESCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCENDING, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAST, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderExpression) {
            return visitor.visitOrderExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RatioExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numberLiteral(): NumberLiteralContext[];
    public numberLiteral(i: number): NumberLiteralContext | null;
    public numberLiteral(i?: number): NumberLiteralContext[] | NumberLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumberLiteralContext);
        }

        return this.getRuleContext(i, NumberLiteralContext);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SLASH, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ratioExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRatioExpression) {
            return visitor.visitRatioExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public settingExpression(): SettingExpressionContext[];
    public settingExpression(i: number): SettingExpressionContext | null;
    public settingExpression(i?: number): SettingExpressionContext[] | SettingExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SettingExpressionContext);
        }

        return this.getRuleContext(i, SettingExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingExpressionList) {
            return visitor.visitSettingExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public literal(): LiteralContext {
        return this.getRuleContext(0, LiteralContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingExpression) {
            return visitor.visitSettingExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowPartitionByClause(): WindowPartitionByClauseContext | null {
        return this.getRuleContext(0, WindowPartitionByClauseContext);
    }
    public windowOrderByClause(): WindowOrderByClauseContext | null {
        return this.getRuleContext(0, WindowOrderByClauseContext);
    }
    public windowFrameClause(): WindowFrameClauseContext | null {
        return this.getRuleContext(0, WindowFrameClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowExpression) {
            return visitor.visitWindowExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowPartitionByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowPartitionByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowPartitionByClause) {
            return visitor.visitWindowPartitionByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowOrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public orderExpressionList(): OrderExpressionListContext {
        return this.getRuleContext(0, OrderExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowOrderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowOrderByClause) {
            return visitor.visitWindowOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameExtend(): WindowFrameExtendContext {
        return this.getRuleContext(0, WindowFrameExtendContext)!;
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANGE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrameClause) {
            return visitor.visitWindowFrameClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameExtendContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameExtend;
    }
    public override copyFrom(ctx: WindowFrameExtendContext): void {
        super.copyFrom(ctx);
    }
}
export class FrameStartContext extends WindowFrameExtendContext {
    public constructor(ctx: WindowFrameExtendContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public windowFrameBound(): WindowFrameBoundContext {
        return this.getRuleContext(0, WindowFrameBoundContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFrameStart) {
            return visitor.visitFrameStart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FrameBetweenContext extends WindowFrameExtendContext {
    public constructor(ctx: WindowFrameExtendContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BETWEEN, 0)!;
    }
    public windowFrameBound(): WindowFrameBoundContext[];
    public windowFrameBound(i: number): WindowFrameBoundContext | null;
    public windowFrameBound(i?: number): WindowFrameBoundContext[] | WindowFrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowFrameBoundContext);
        }

        return this.getRuleContext(i, WindowFrameBoundContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFrameBetween) {
            return visitor.visitFrameBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNBOUNDED, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOLLOWING, 0);
    }
    public numberLiteral(): NumberLiteralContext | null {
        return this.getRuleContext(0, NumberLiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameBound;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrameBound) {
            return visitor.visitWindowFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SET, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_setStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSetStatement) {
            return visitor.visitSetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_showStatement;
    }
    public override copyFrom(ctx: ShowStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowCreateTableStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTableStatement) {
            return visitor.visitShowCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateDictionaryStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateDictionaryStatement) {
            return visitor.visitShowCreateDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLES, 0)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowTablesStatement) {
            return visitor.visitShowTablesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDictionariesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DICTIONARIES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowDictionariesStatement) {
            return visitor.visitShowDictionariesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateDatabaseStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateDatabaseStatement) {
            return visitor.visitShowCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDatabasesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DATABASES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASES, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowDatabasesStatement) {
            return visitor.visitShowDatabasesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SystemStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SYSTEM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SYSTEM, 0)!;
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLUSH, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOGS, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RELOAD, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.START, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STOP, 0);
    }
    public SENDS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SENDS, 0);
    }
    public FETCHES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCHES, 0);
    }
    public MERGES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MERGES, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public REPLICATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATED, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICA, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_systemStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSystemStatement) {
            return visitor.visitSystemStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUNCATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TRUNCATE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_truncateStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateStatement) {
            return visitor.visitTruncateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.USE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_useStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUseStatement) {
            return visitor.visitUseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WatchStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WATCH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WATCH, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public EVENTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EVENTS, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMIT, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_watchStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWatchStatement) {
            return visitor.visitWatchStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnTypeExpression;
    }
    public override copyFrom(ctx: ColumnTypeExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnTypeExpressionComplexContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext[];
    public columnTypeExpression(i: number): ColumnTypeExpressionContext | null;
    public columnTypeExpression(i?: number): ColumnTypeExpressionContext[] | ColumnTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeExpressionContext);
        }

        return this.getRuleContext(i, ColumnTypeExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionComplex) {
            return visitor.visitColumnTypeExpressionComplex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionEnumContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public enumValue(): EnumValueContext[];
    public enumValue(i: number): EnumValueContext | null;
    public enumValue(i?: number): EnumValueContext[] | EnumValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(EnumValueContext);
        }

        return this.getRuleContext(i, EnumValueContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionEnum) {
            return visitor.visitColumnTypeExpressionEnum(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionNestedContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext[];
    public columnTypeExpression(i: number): ColumnTypeExpressionContext | null;
    public columnTypeExpression(i?: number): ColumnTypeExpressionContext[] | ColumnTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeExpressionContext);
        }

        return this.getRuleContext(i, ColumnTypeExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionNested) {
            return visitor.visitColumnTypeExpressionNested(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionParamContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionParam) {
            return visitor.visitColumnTypeExpressionParam(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionSimpleContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionSimple) {
            return visitor.visitColumnTypeExpressionSimple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnsExpression(): ColumnsExpressionContext[];
    public columnsExpression(i: number): ColumnsExpressionContext | null;
    public columnsExpression(i?: number): ColumnsExpressionContext[] | ColumnsExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnsExpressionContext);
        }

        return this.getRuleContext(i, ColumnsExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionList) {
            return visitor.visitColumnExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnsExpression;
    }
    public override copyFrom(ctx: ColumnsExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnsExpressionAsteriskContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ASTERISK, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionAsterisk) {
            return visitor.visitColumnsExpressionAsterisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnsExpressionSubqueryContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionSubquery) {
            return visitor.visitColumnsExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnsExpressionColumnContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionColumn) {
            return visitor.visitColumnsExpressionColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnExpression;
    }
    public override copyFrom(ctx: ColumnExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnExpressionIsNullContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.IS, 0)!;
    }
    public NULL_SQL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NULL_SQL, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionIsNull) {
            return visitor.visitColumnExpressionIsNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTupleContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTuple) {
            return visitor.visitColumnExpressionTuple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAndContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAnd) {
            return visitor.visitColumnExpressionAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionDateContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionDate) {
            return visitor.visitColumnExpressionDate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionBetweenContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BETWEEN, 0)!;
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionBetween) {
            return visitor.visitColumnExpressionBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTrimContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRIM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TRIM, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BOTH, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEADING, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRAILING, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTrim) {
            return visitor.visitColumnExpressionTrim(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionNotContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NOT, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionNot) {
            return visitor.visitColumnExpressionNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionSubstringContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SUBSTRING(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SUBSTRING, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionSubstring) {
            return visitor.visitColumnExpressionSubstring(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionCaseContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.END, 0)!;
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public WHEN(): antlr.TerminalNode[];
    public WHEN(i: number): antlr.TerminalNode | null;
    public WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.WHEN);
    	} else {
    		return this.getToken(ClickHouseParser.WHEN, i);
    	}
    }
    public THEN(): antlr.TerminalNode[];
    public THEN(i: number): antlr.TerminalNode | null;
    public THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.THEN);
    	} else {
    		return this.getToken(ClickHouseParser.THEN, i);
    	}
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ELSE, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionCase) {
            return visitor.visitColumnExpressionCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionIdentifierContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionIdentifier) {
            return visitor.visitColumnExpressionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionArrayAccessContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LBRACKET, 0)!;
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RBRACKET, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionArrayAccess) {
            return visitor.visitColumnExpressionArrayAccess(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionFunctionContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public columnArgumentList(): ColumnArgumentListContext | null {
        return this.getRuleContext(0, ColumnArgumentListContext);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionFunction) {
            return visitor.visitColumnExpressionFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAsteriskContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ASTERISK, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAsterisk) {
            return visitor.visitColumnExpressionAsterisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionLiteralContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public literal(): LiteralContext {
        return this.getRuleContext(0, LiteralContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionLiteral) {
            return visitor.visitColumnExpressionLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionWinFunctionContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OVER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public windowExpression(): WindowExpressionContext {
        return this.getRuleContext(0, WindowExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionWinFunction) {
            return visitor.visitColumnExpressionWinFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTernaryOpContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public QUESTIONMARK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.QUESTIONMARK, 0)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLON, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTernaryOp) {
            return visitor.visitColumnExpressionTernaryOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionArrayContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LBRACKET, 0)!;
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RBRACKET, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionArray) {
            return visitor.visitColumnExpressionArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTupleAccessContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DOT, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTupleAccess) {
            return visitor.visitColumnExpressionTupleAccess(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionParensContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionParens) {
            return visitor.visitColumnExpressionParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionWinFunctionTargetContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OVER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionWinFunctionTarget) {
            return visitor.visitColumnExpressionWinFunctionTarget(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAliasContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public alias(): AliasContext | null {
        return this.getRuleContext(0, AliasContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAlias) {
            return visitor.visitColumnExpressionAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence3Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public EQ_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_DOUBLE, 0);
    }
    public EQ_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
    }
    public NOT_EQ(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT_EQ, 0);
    }
    public LE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LE, 0);
    }
    public GE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GE, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GT, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ILIKE, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence3) {
            return visitor.visitColumnExpressionPrecedence3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTimestampContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIMESTAMP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TIMESTAMP, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTimestamp) {
            return visitor.visitColumnExpressionTimestamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence2Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLUS, 0);
    }
    public DASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DASH, 0);
    }
    public CONCAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONCAT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence2) {
            return visitor.visitColumnExpressionPrecedence2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence1Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PERCENT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence1) {
            return visitor.visitColumnExpressionPrecedence1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionIntervalContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INTERVAL, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionInterval) {
            return visitor.visitColumnExpressionInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionSubqueryContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionSubquery) {
            return visitor.visitColumnExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionNegateContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DASH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DASH, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionNegate) {
            return visitor.visitColumnExpressionNegate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionExtractContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXTRACT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXTRACT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionExtract) {
            return visitor.visitColumnExpressionExtract(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionCastContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionCast) {
            return visitor.visitColumnExpressionCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionOrContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public OR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OR, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionOr) {
            return visitor.visitColumnExpressionOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnArgumentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnArgumentExpression(): ColumnArgumentExpressionContext[];
    public columnArgumentExpression(i: number): ColumnArgumentExpressionContext | null;
    public columnArgumentExpression(i?: number): ColumnArgumentExpressionContext[] | ColumnArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnArgumentExpressionContext);
        }

        return this.getRuleContext(i, ColumnArgumentExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnArgumentList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnArgumentList) {
            return visitor.visitColumnArgumentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnArgumentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnLambdaExpression(): ColumnLambdaExpressionContext | null {
        return this.getRuleContext(0, ColumnLambdaExpressionContext);
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnArgumentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnArgumentExpression) {
            return visitor.visitColumnArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnLambdaExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARROW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ARROW_SYMBOL, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnLambdaExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnLambdaExpression) {
            return visitor.visitColumnLambdaExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DOT);
    	} else {
    		return this.getToken(ClickHouseParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnIdentifier) {
            return visitor.visitColumnIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableExpression;
    }
    public override copyFrom(ctx: TableExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class TableExpressionFunctionContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        return this.getRuleContext(0, TableFunctionExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionFunction) {
            return visitor.visitTableExpressionFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionIdentifierContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionIdentifier) {
            return visitor.visitTableExpressionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionAliasContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public alias(): AliasContext | null {
        return this.getRuleContext(0, AliasContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionAlias) {
            return visitor.visitTableExpressionAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionSubqueryContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionSubquery) {
            return visitor.visitTableExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public tableArgList(): TableArgListContext | null {
        return this.getRuleContext(0, TableArgListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableFunctionExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionExpression) {
            return visitor.visitTableFunctionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdentifier) {
            return visitor.visitTableIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgExpression(): TableArgExpressionContext[];
    public tableArgExpression(i: number): TableArgExpressionContext | null;
    public tableArgExpression(i?: number): TableArgExpressionContext[] | TableArgExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableArgExpressionContext);
        }

        return this.getRuleContext(i, TableArgExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableArgList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgList) {
            return visitor.visitTableArgList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext | null {
        return this.getRuleContext(0, TableFunctionExpressionContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableArgExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgExpression) {
            return visitor.visitTableArgExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_databaseIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseIdentifier) {
            return visitor.visitDatabaseIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloatingLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLOATING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLOATING_LITERAL, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode[];
    public DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
    	}
    }
    public OCTAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_floatingLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFloatingLiteral) {
            return visitor.visitFloatingLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public floatingLiteral(): FloatingLiteralContext | null {
        return this.getRuleContext(0, FloatingLiteralContext);
    }
    public OCTAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public HEXADECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HEXADECIMAL_LITERAL, 0);
    }
    public INF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INF, 0);
    }
    public NAN_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAN_SQL, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLUS, 0);
    }
    public DASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DASH, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_numberLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNumberLiteral) {
            return visitor.visitNumberLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numberLiteral(): NumberLiteralContext | null {
        return this.getRuleContext(0, NumberLiteralContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public NULL_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULL_SQL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_literal;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECOND, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MINUTE, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HOUR, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DAY, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WEEK, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONTH, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUARTER, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.YEAR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_interval;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AND, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANTI, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARRAY, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public ASCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASCENDING, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public AST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AST, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASYNC, 0);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BETWEEN, 0);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BOTH, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public CASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CASE, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CAST, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CHECK, 0);
    }
    public CLEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLEAR, 0);
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLUSTER, 0);
    }
    public CODEC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CODEC, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLATE, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CROSS, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public DATABASES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASES, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATE, 0);
    }
    public DEDUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public DELAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELAY, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public DESCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCENDING, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ELSE, 0);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.END, 0);
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ENGINE, 0);
    }
    public EVENTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EVENTS, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXPLAIN, 0);
    }
    public EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXPRESSION, 0);
    }
    public EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXTRACT, 0);
    }
    public FETCHES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCHES, 0);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLUSH, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOLLOWING, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORMAT, 0);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FREEZE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FULL, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public GRANULARITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANULARITY, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GROUP, 0);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HAVING, 0);
    }
    public HIERARCHICAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HIERARCHICAL, 0);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ILIKE, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public INJECTIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INJECTIVE, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INSERT, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTERVAL, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTO, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IS, 0);
    }
    public IS_OBJECT_ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IS_OBJECT_ID, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JOIN, 0);
    }
    public JSON_FALSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON_FALSE, 0);
    }
    public JSON_TRUE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON_TRUE, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEY, 0);
    }
    public KILL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KILL, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAST, 0);
    }
    public LAYOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAYOUT, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEADING, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public LIFETIME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIFETIME, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMIT, 0);
    }
    public LIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIVE, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOGS, 0);
    }
    public MATERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public MERGES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MERGES, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MODIFY, 0);
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVE, 0);
    }
    public MUTATION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MUTATION, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULLS, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ON, 0);
    }
    public OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORDER, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public OUTFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTFILE, 0);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OVER, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARTITION, 0);
    }
    public POPULATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POPULATE, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRECEDING, 0);
    }
    public PREWHERE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PREWHERE, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRIMARY, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANGE, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RELOAD, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOVE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RENAME, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICA, 0);
    }
    public REPLICATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATED, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RIGHT, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWS, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAMPLE, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SELECT, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMI, 0);
    }
    public SENDS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SENDS, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SET, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCE, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.START, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STOP, 0);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SUBSTRING, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public SYNTAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNTAX, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYSTEM, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLES, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TEST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEST, 0);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.THEN, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public TIMEOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMEOUT, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMESTAMP, 0);
    }
    public TOTALS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOTALS, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRAILING, 0);
    }
    public TRIM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRIM, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRUNCATE, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public TOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOP, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TYPE, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNBOUNDED, 0);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNION, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UPDATE, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USE, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USING, 0);
    }
    public UUID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UUID, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VALUES, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public WATCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WATCH, 0);
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WHEN, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WHERE, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WINDOW, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANT, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCH, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REFRESH, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICY, 0);
    }
    public QUOTA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUOTA, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLE, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILE, 0);
    }
    public ARBITRARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARBITRARY, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMNS, 0);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT_USER, 0);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ACCESS, 0);
    }
    public SHOW_USERS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_USERS, 0);
    }
    public SHOW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROLES, 0);
    }
    public SHOW_ROW_POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROW_POLICIES, 0);
    }
    public SHOW_QUOTAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_QUOTAS, 0);
    }
    public SHOW_SETTINGS_PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_SETTINGS_PROFILES, 0);
    }
    public SHUTDOWN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHUTDOWN, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CACHE, 0);
    }
    public DNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DNS, 0);
    }
    public MARK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARK, 0);
    }
    public PART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PART, 0);
    }
    public UNCOMPRESSED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNCOMPRESSED, 0);
    }
    public CONFIG(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONFIG, 0);
    }
    public EMBEDDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EMBEDDED, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTIONS, 0);
    }
    public MOVES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVES, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATION, 0);
    }
    public QUEUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUEUES, 0);
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTART, 0);
    }
    public DICTGET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGET, 0);
    }
    public DICTGETHIERARCHY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGETHIERARCHY, 0);
    }
    public DICTHAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTHAS, 0);
    }
    public DICTISIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTISIN, 0);
    }
    public MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MANAGEMENT, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public INTROSPECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTROSPECTION, 0);
    }
    public ADDRESSTOLINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINE, 0);
    }
    public ADDRESSTOSYMBOL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOSYMBOL, 0);
    }
    public DEMANGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEMANGLE, 0);
    }
    public SOURCES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCES, 0);
    }
    public FILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FILE, 0);
    }
    public URL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.URL, 0);
    }
    public REMOTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOTE, 0);
    }
    public MYSQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQL, 0);
    }
    public ODBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ODBC, 0);
    }
    public JDBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JDBC, 0);
    }
    public HDFS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HDFS, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.S3, 0);
    }
    public SETTING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTING, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADD, 0);
    }
    public ADDRESSTOLINEWITHINLINES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINEWITHINLINES, 0);
    }
    public ALLOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALLOW, 0);
    }
    public AZURE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AZURE, 0);
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTION, 0);
    }
    public COLLECTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTIONS, 0);
    }
    public CONTROL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONTROL, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DAY, 0);
    }
    public DISPLAYSECRETSINSHOWANDSELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT, 0);
    }
    public ESTIMATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ESTIMATE, 0);
    }
    public HIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HIVE, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HOUR, 0);
    }
    public INF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INF, 0);
    }
    public MARKS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARKS, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MINUTE, 0);
    }
    public MONGO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONGO, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONTH, 0);
    }
    public NAMED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAMED, 0);
    }
    public PIPELINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PIPELINE, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLAN, 0);
    }
    public POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICIES, 0);
    }
    public POSTGRES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POSTGRES, 0);
    }
    public PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILES, 0);
    }
    public PROJECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROJECTION, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUARTER, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY, 0);
    }
    public REDIS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REDIS, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECOND, 0);
    }
    public SECRETS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECRETS, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECURITY, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQL, 0);
    }
    public SQLITE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQLITE, 0);
    }
    public TREE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TREE, 0);
    }
    public USAGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USAGE, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WEEK, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.YEAR, 0);
    }
    public GRANTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANTS, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REVOKE, 0);
    }
    public IDENTIFIED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IDENTIFIED, 0);
    }
    public PLAINTEXT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLAINTEXT_PASSWORD, 0);
    }
    public SHA256_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_PASSWORD, 0);
    }
    public SHA256_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_HASH, 0);
    }
    public DOUBLE_SHA1_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_PASSWORD, 0);
    }
    public DOUBLE_SHA1_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_HASH, 0);
    }
    public NO_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO_PASSWORD, 0);
    }
    public LDAP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LDAP, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SERVER, 0);
    }
    public KERBEROS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KERBEROS, 0);
    }
    public REALM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REALM, 0);
    }
    public SSL_CERTIFICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSL_CERTIFICATE, 0);
    }
    public SAN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAN, 0);
    }
    public CN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CN, 0);
    }
    public SSH_KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSH_KEY, 0);
    }
    public HTTP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HTTP, 0);
    }
    public SCHEME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SCHEME, 0);
    }
    public BCRYPT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_PASSWORD, 0);
    }
    public BCRYPT_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_HASH, 0);
    }
    public VALID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VALID, 0);
    }
    public UNTIL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNTIL, 0);
    }
    public GRANTEES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANTEES, 0);
    }
    public NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAME, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REGEXP, 0);
    }
    public IP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IP, 0);
    }
    public HOST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HOST, 0);
    }
    public READONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READONLY, 0);
    }
    public WRITABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WRITABLE, 0);
    }
    public PERMISSIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PERMISSIVE, 0);
    }
    public RESTRICTIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTRICTIVE, 0);
    }
    public TABSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATED, 0);
    }
    public TABSEPARATEDRAW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAW, 0);
    }
    public TABSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMES, 0);
    }
    public TABSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public TABSEPARATEDRAWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMES, 0);
    }
    public TABSEPARATEDRAWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATE, 0);
    }
    public TEMPLATEIGNORESPACES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATEIGNORESPACES, 0);
    }
    public CSV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSV, 0);
    }
    public CSVWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMES, 0);
    }
    public CSVWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMESANDTYPES, 0);
    }
    public CUSTOMSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATED, 0);
    }
    public CUSTOMSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMES, 0);
    }
    public CUSTOMSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON, 0);
    }
    public JSONASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASSTRING, 0);
    }
    public JSONASOBJECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASOBJECT, 0);
    }
    public JSONSTRINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGS, 0);
    }
    public JSONCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNS, 0);
    }
    public JSONCOLUMNSWITHMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNSWITHMETADATA, 0);
    }
    public JSONCOMPACT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACT, 0);
    }
    public JSONCOMPACTCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTCOLUMNS, 0);
    }
    public JSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONEACHROW, 0);
    }
    public JSONSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROW, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONOBJECTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONOBJECTEACHROW, 0);
    }
    public BSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BSONEACHROW, 0);
    }
    public TSKV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TSKV, 0);
    }
    public PROTOBUF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUF, 0);
    }
    public PROTOBUFSINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFSINGLE, 0);
    }
    public PROTOBUFLIST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFLIST, 0);
    }
    public AVRO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVRO, 0);
    }
    public AVROCONFLUENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVROCONFLUENT, 0);
    }
    public PARQUET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUET, 0);
    }
    public PARQUETMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUETMETADATA, 0);
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROW, 0);
    }
    public ARROWSTREAM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROWSTREAM, 0);
    }
    public ORC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORC, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ONE, 0);
    }
    public NPY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NPY, 0);
    }
    public ROWBINARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARY, 0);
    }
    public ROWBINARYWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMES, 0);
    }
    public ROWBINARYWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMESANDTYPES, 0);
    }
    public ROWBINARYWITHDEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHDEFAULTS, 0);
    }
    public NATIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NATIVE, 0);
    }
    public CAPNPROTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CAPNPROTO, 0);
    }
    public LINEASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LINEASSTRING, 0);
    }
    public RAWBLOB(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RAWBLOB, 0);
    }
    public MSGPACK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MSGPACK, 0);
    }
    public MYSQLDUMP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQLDUMP, 0);
    }
    public DWARF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DWARF, 0);
    }
    public FORM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORM, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_keyword;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKeyword) {
            return visitor.visitKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordForAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATE, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_keywordForAlias;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKeywordForAlias) {
            return visitor.visitKeywordForAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IDENTIFIER, 0);
    }
    public keywordForAlias(): KeywordForAliasContext | null {
        return this.getRuleContext(0, KeywordForAliasContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alias;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlias) {
            return visitor.visitAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IDENTIFIER, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public keyword(): KeywordContext | null {
        return this.getRuleContext(0, KeywordContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierOrNullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public NULL_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULL_SQL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifierOrNull;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierOrNull) {
            return visitor.visitIdentifierOrNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnumValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public numberLiteral(): NumberLiteralContext {
        return this.getRuleContext(0, NumberLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_enumValue;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEnumValue) {
            return visitor.visitEnumValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
