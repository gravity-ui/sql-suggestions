////////////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T EDIT IT MANUALLY //
////////////////////////////////////////////////////////

// We don't really want to check types in generated code
// @ts-nocheck



// Generated from src/autocomplete/databases/clickhouse/grammar/ClickHouseParser.g4 by ANTLR 4.13.1

import * as antlr from "antlr4ng";
import { Token } from "antlr4ng";

import { ClickHouseParserVisitor } from "./ClickHouseParserVisitor.js";

// for running tests with parameters, TODO: discuss strategy for typed parameters in CI
// eslint-disable-next-line no-unused-vars
type int = number;


export class ClickHouseParser extends antlr.Parser {
    public static readonly ADD = 1;
    public static readonly AFTER = 2;
    public static readonly ALIAS = 3;
    public static readonly ALL = 4;
    public static readonly ALTER = 5;
    public static readonly AND = 6;
    public static readonly ANTI = 7;
    public static readonly ANY = 8;
    public static readonly ARRAY = 9;
    public static readonly AS = 10;
    public static readonly ASC = 11;
    public static readonly ASCENDING = 12;
    public static readonly ASOF = 13;
    public static readonly AST = 14;
    public static readonly ASYNC = 15;
    public static readonly ATTACH = 16;
    public static readonly BETWEEN = 17;
    public static readonly BOTH = 18;
    public static readonly BY = 19;
    public static readonly CASE = 20;
    public static readonly CAST = 21;
    public static readonly CHECK = 22;
    public static readonly CLEAR = 23;
    public static readonly CLUSTER = 24;
    public static readonly CODEC = 25;
    public static readonly COLLATE = 26;
    public static readonly COLUMN = 27;
    public static readonly COMMENT = 28;
    public static readonly CONSTRAINT = 29;
    public static readonly CREATE = 30;
    public static readonly CROSS = 31;
    public static readonly CUBE = 32;
    public static readonly CURRENT = 33;
    public static readonly DATABASE = 34;
    public static readonly DATABASES = 35;
    public static readonly DATE = 36;
    public static readonly DAY = 37;
    public static readonly DEDUPLICATE = 38;
    public static readonly DEFAULT = 39;
    public static readonly DELAY = 40;
    public static readonly DELETE = 41;
    public static readonly DESC = 42;
    public static readonly DESCENDING = 43;
    public static readonly DESCRIBE = 44;
    public static readonly DETACH = 45;
    public static readonly DICTIONARIES = 46;
    public static readonly DICTIONARY = 47;
    public static readonly DISK = 48;
    public static readonly DISTINCT = 49;
    public static readonly DISTRIBUTED = 50;
    public static readonly DROP = 51;
    public static readonly ELSE = 52;
    public static readonly END = 53;
    public static readonly ENGINE = 54;
    public static readonly ESTIMATE = 55;
    public static readonly EVENTS = 56;
    public static readonly EXISTS = 57;
    public static readonly EXPLAIN = 58;
    public static readonly EXPRESSION = 59;
    public static readonly EXTRACT = 60;
    public static readonly FETCHES = 61;
    public static readonly FINAL = 62;
    public static readonly FIRST = 63;
    public static readonly FLUSH = 64;
    public static readonly FOLLOWING = 65;
    public static readonly FOR = 66;
    public static readonly FORMAT = 67;
    public static readonly FREEZE = 68;
    public static readonly FROM = 69;
    public static readonly FULL = 70;
    public static readonly FUNCTION = 71;
    public static readonly GLOBAL = 72;
    public static readonly GRANULARITY = 73;
    public static readonly GROUP = 74;
    public static readonly HAVING = 75;
    public static readonly HIERARCHICAL = 76;
    public static readonly HOUR = 77;
    public static readonly ID = 78;
    public static readonly IF = 79;
    public static readonly ILIKE = 80;
    public static readonly IN = 81;
    public static readonly INDEX = 82;
    public static readonly INF = 83;
    public static readonly INJECTIVE = 84;
    public static readonly INNER = 85;
    public static readonly INSERT = 86;
    public static readonly INTERVAL = 87;
    public static readonly INTO = 88;
    public static readonly IS = 89;
    public static readonly IS_OBJECT_ID = 90;
    public static readonly JOIN = 91;
    public static readonly KEY = 92;
    public static readonly KILL = 93;
    public static readonly LAST = 94;
    public static readonly LAYOUT = 95;
    public static readonly LEADING = 96;
    public static readonly LEFT = 97;
    public static readonly LIFETIME = 98;
    public static readonly LIKE = 99;
    public static readonly LIMIT = 100;
    public static readonly LIVE = 101;
    public static readonly LOCAL = 102;
    public static readonly LOGS = 103;
    public static readonly MATERIALIZE = 104;
    public static readonly MATERIALIZED = 105;
    public static readonly MAX = 106;
    public static readonly MERGES = 107;
    public static readonly MIN = 108;
    public static readonly MINUTE = 109;
    public static readonly MODIFY = 110;
    public static readonly MONTH = 111;
    public static readonly MOVE = 112;
    public static readonly MUTATION = 113;
    public static readonly NAN_SQL = 114;
    public static readonly NO = 115;
    public static readonly NOT = 116;
    public static readonly NULL_SQL = 117;
    public static readonly NULLS = 118;
    public static readonly OFFSET = 119;
    public static readonly ON = 120;
    public static readonly OPTIMIZE = 121;
    public static readonly OR = 122;
    public static readonly ORDER = 123;
    public static readonly OUTER = 124;
    public static readonly OUTFILE = 125;
    public static readonly OVER = 126;
    public static readonly PARTITION = 127;
    public static readonly PIPELINE = 128;
    public static readonly PLAN = 129;
    public static readonly POPULATE = 130;
    public static readonly PRECEDING = 131;
    public static readonly PREWHERE = 132;
    public static readonly PRIMARY = 133;
    public static readonly PROJECTION = 134;
    public static readonly QUARTER = 135;
    public static readonly QUERY = 136;
    public static readonly RANGE = 137;
    public static readonly RELOAD = 138;
    public static readonly REMOVE = 139;
    public static readonly RENAME = 140;
    public static readonly REPLACE = 141;
    public static readonly REPLICA = 142;
    public static readonly REPLICATED = 143;
    public static readonly RIGHT = 144;
    public static readonly ROLLUP = 145;
    public static readonly ROW = 146;
    public static readonly ROWS = 147;
    public static readonly SAMPLE = 148;
    public static readonly SECOND = 149;
    public static readonly SELECT = 150;
    public static readonly SEMI = 151;
    public static readonly SENDS = 152;
    public static readonly SET = 153;
    public static readonly SETTINGS = 154;
    public static readonly SHOW = 155;
    public static readonly SOURCE = 156;
    public static readonly START = 157;
    public static readonly STOP = 158;
    public static readonly SUBSTRING = 159;
    public static readonly SYNC = 160;
    public static readonly SYNTAX = 161;
    public static readonly SYSTEM = 162;
    public static readonly TABLE = 163;
    public static readonly TABLES = 164;
    public static readonly TEMPORARY = 165;
    public static readonly TEST = 166;
    public static readonly THEN = 167;
    public static readonly TIES = 168;
    public static readonly TIMEOUT = 169;
    public static readonly TIMESTAMP = 170;
    public static readonly TO = 171;
    public static readonly TOP = 172;
    public static readonly TOTALS = 173;
    public static readonly TRAILING = 174;
    public static readonly TRIM = 175;
    public static readonly TREE = 176;
    public static readonly TRUNCATE = 177;
    public static readonly TTL = 178;
    public static readonly TYPE = 179;
    public static readonly UNBOUNDED = 180;
    public static readonly UNION = 181;
    public static readonly UPDATE = 182;
    public static readonly USE = 183;
    public static readonly USING = 184;
    public static readonly UUID = 185;
    public static readonly VALUES = 186;
    public static readonly VIEW = 187;
    public static readonly VOLUME = 188;
    public static readonly WATCH = 189;
    public static readonly WEEK = 190;
    public static readonly WHEN = 191;
    public static readonly WHERE = 192;
    public static readonly WINDOW = 193;
    public static readonly WITH = 194;
    public static readonly YEAR = 195;
    public static readonly GRANT = 196;
    public static readonly USER = 197;
    public static readonly FETCH = 198;
    public static readonly REFRESH = 199;
    public static readonly POLICY = 200;
    public static readonly QUOTA = 201;
    public static readonly ROLE = 202;
    public static readonly PROFILE = 203;
    public static readonly ARBITRARY = 204;
    public static readonly COLUMNS = 205;
    public static readonly CURRENT_USER = 206;
    public static readonly ACCESS = 207;
    public static readonly SHOW_USERS = 208;
    public static readonly SHOW_ROLES = 209;
    public static readonly SHOW_ROW_POLICIES = 210;
    public static readonly SHOW_QUOTAS = 211;
    public static readonly SHOW_SETTINGS_PROFILES = 212;
    public static readonly SHUTDOWN = 213;
    public static readonly CACHE = 214;
    public static readonly DNS = 215;
    public static readonly MARK = 216;
    public static readonly MARKS = 217;
    public static readonly PART = 218;
    public static readonly UNCOMPRESSED = 219;
    public static readonly CONFIG = 220;
    public static readonly EMBEDDED = 221;
    public static readonly FUNCTIONS = 222;
    public static readonly MOVES = 223;
    public static readonly REPLICATION = 224;
    public static readonly QUEUES = 225;
    public static readonly RESTART = 226;
    public static readonly DICTGET = 227;
    public static readonly DICTGETHIERARCHY = 228;
    public static readonly DICTHAS = 229;
    public static readonly DICTISIN = 230;
    public static readonly MANAGEMENT = 231;
    public static readonly ADMIN = 232;
    public static readonly NAMED = 233;
    public static readonly COLLECTION = 234;
    public static readonly CONTROL = 235;
    public static readonly COLLECTIONS = 236;
    public static readonly SECRETS = 237;
    public static readonly USAGE = 238;
    public static readonly INTROSPECTION = 239;
    public static readonly ADDRESSTOLINE = 240;
    public static readonly ADDRESSTOSYMBOL = 241;
    public static readonly DEMANGLE = 242;
    public static readonly SOURCES = 243;
    public static readonly FILE = 244;
    public static readonly URL = 245;
    public static readonly REMOTE = 246;
    public static readonly MYSQL = 247;
    public static readonly ODBC = 248;
    public static readonly JDBC = 249;
    public static readonly HDFS = 250;
    public static readonly S3 = 251;
    public static readonly SETTING = 252;
    public static readonly OPTION = 253;
    public static readonly NONE = 254;
    public static readonly AZURE = 255;
    public static readonly HIVE = 256;
    public static readonly MONGO = 257;
    public static readonly POSTGRES = 258;
    public static readonly REDIS = 259;
    public static readonly SQLITE = 260;
    public static readonly ADDRESSTOLINEWITHINLINES = 261;
    public static readonly SQL = 262;
    public static readonly SECURITY = 263;
    public static readonly DISPLAYSECRETSINSHOWANDSELECT = 264;
    public static readonly POLICIES = 265;
    public static readonly PROFILES = 266;
    public static readonly ALLOW = 267;
    public static readonly GRANTS = 268;
    public static readonly EXCEPT = 269;
    public static readonly REVOKE = 270;
    public static readonly IDENTIFIED = 271;
    public static readonly PLAINTEXT_PASSWORD = 272;
    public static readonly SHA256_PASSWORD = 273;
    public static readonly SHA256_HASH = 274;
    public static readonly DOUBLE_SHA1_PASSWORD = 275;
    public static readonly DOUBLE_SHA1_HASH = 276;
    public static readonly NO_PASSWORD = 277;
    public static readonly LDAP = 278;
    public static readonly SERVER = 279;
    public static readonly KERBEROS = 280;
    public static readonly REALM = 281;
    public static readonly SSL_CERTIFICATE = 282;
    public static readonly SAN = 283;
    public static readonly CN = 284;
    public static readonly SSH_KEY = 285;
    public static readonly HTTP = 286;
    public static readonly SCHEME = 287;
    public static readonly BCRYPT_PASSWORD = 288;
    public static readonly BCRYPT_HASH = 289;
    public static readonly VALID = 290;
    public static readonly UNTIL = 291;
    public static readonly GRANTEES = 292;
    public static readonly NAME = 293;
    public static readonly REGEXP = 294;
    public static readonly IP = 295;
    public static readonly HOST = 296;
    public static readonly READONLY = 297;
    public static readonly WRITABLE = 298;
    public static readonly PERMISSIVE = 299;
    public static readonly RESTRICTIVE = 300;
    public static readonly TABSEPARATED = 301;
    public static readonly TABSEPARATEDRAW = 302;
    public static readonly TABSEPARATEDWITHNAMES = 303;
    public static readonly TABSEPARATEDWITHNAMESANDTYPES = 304;
    public static readonly TABSEPARATEDRAWWITHNAMES = 305;
    public static readonly TABSEPARATEDRAWWITHNAMESANDTYPES = 306;
    public static readonly TEMPLATE = 307;
    public static readonly TEMPLATEIGNORESPACES = 308;
    public static readonly CSV = 309;
    public static readonly CSVWITHNAMES = 310;
    public static readonly CSVWITHNAMESANDTYPES = 311;
    public static readonly CUSTOMSEPARATED = 312;
    public static readonly CUSTOMSEPARATEDWITHNAMES = 313;
    public static readonly CUSTOMSEPARATEDWITHNAMESANDTYPES = 314;
    public static readonly JSON = 315;
    public static readonly JSONASSTRING = 316;
    public static readonly JSONASOBJECT = 317;
    public static readonly JSONSTRINGS = 318;
    public static readonly JSONCOLUMNS = 319;
    public static readonly JSONCOLUMNSWITHMETADATA = 320;
    public static readonly JSONCOMPACT = 321;
    public static readonly JSONCOMPACTCOLUMNS = 322;
    public static readonly JSONEACHROW = 323;
    public static readonly JSONSTRINGSEACHROW = 324;
    public static readonly JSONCOMPACTEACHROW = 325;
    public static readonly JSONCOMPACTEACHROWWITHNAMES = 326;
    public static readonly JSONCOMPACTEACHROWWITHNAMESANDTYPES = 327;
    public static readonly JSONCOMPACTSTRINGSEACHROW = 328;
    public static readonly JSONCOMPACTSTRINGSEACHROWWITHNAMES = 329;
    public static readonly JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES = 330;
    public static readonly JSONOBJECTEACHROW = 331;
    public static readonly BSONEACHROW = 332;
    public static readonly TSKV = 333;
    public static readonly PROTOBUF = 334;
    public static readonly PROTOBUFSINGLE = 335;
    public static readonly PROTOBUFLIST = 336;
    public static readonly AVRO = 337;
    public static readonly AVROCONFLUENT = 338;
    public static readonly PARQUET = 339;
    public static readonly PARQUETMETADATA = 340;
    public static readonly ARROW = 341;
    public static readonly ARROWSTREAM = 342;
    public static readonly ORC = 343;
    public static readonly ONE = 344;
    public static readonly NPY = 345;
    public static readonly ROWBINARY = 346;
    public static readonly ROWBINARYWITHNAMES = 347;
    public static readonly ROWBINARYWITHNAMESANDTYPES = 348;
    public static readonly ROWBINARYWITHDEFAULTS = 349;
    public static readonly NATIVE = 350;
    public static readonly CAPNPROTO = 351;
    public static readonly LINEASSTRING = 352;
    public static readonly RAWBLOB = 353;
    public static readonly MSGPACK = 354;
    public static readonly MYSQLDUMP = 355;
    public static readonly DWARF = 356;
    public static readonly FORM = 357;
    public static readonly KEYED = 358;
    public static readonly RANDOMIZED = 359;
    public static readonly USER_NAME = 360;
    public static readonly IP_ADDRESS = 361;
    public static readonly FORWARDED_IP_ADDRESS = 362;
    public static readonly CLIENT_KEY = 363;
    public static readonly CLIENT_KEY_OR_USER_NAME = 364;
    public static readonly CLIENT_KEY_OR_IP_ADDRESS = 365;
    public static readonly QUERIES = 366;
    public static readonly QUERY_SELECTS = 367;
    public static readonly QUERY_INSERTS = 368;
    public static readonly ERRORS = 369;
    public static readonly RESULT_ROWS = 370;
    public static readonly RESULT_BYTES = 371;
    public static readonly READ_ROWS = 372;
    public static readonly READ_BYTES = 373;
    public static readonly EXECUTION_TIME = 374;
    public static readonly FAILED_SEQUENTIAL_AUTHENTICATIONS = 375;
    public static readonly LIMITS = 376;
    public static readonly TRACKING = 377;
    public static readonly ONLY = 378;
    public static readonly CONST = 379;
    public static readonly CHANGEABLE_IN_READONLY = 380;
    public static readonly OVERRIDABLE = 381;
    public static readonly INHERIT = 382;
    public static readonly RESET = 383;
    public static readonly DETACHED = 384;
    public static readonly FORGET = 385;
    public static readonly STATISTICS = 386;
    public static readonly UNFREEZE = 387;
    public static readonly JSON_FALSE = 388;
    public static readonly JSON_TRUE = 389;
    public static readonly IDENTIFIER = 390;
    public static readonly FLOATING_LITERAL = 391;
    public static readonly OCTAL_LITERAL = 392;
    public static readonly DECIMAL_LITERAL = 393;
    public static readonly HEXADECIMAL_LITERAL = 394;
    public static readonly STRING_LITERAL = 395;
    public static readonly ARROW_SYMBOL = 396;
    public static readonly ASTERISK = 397;
    public static readonly BACKQUOTE = 398;
    public static readonly BACKSLASH = 399;
    public static readonly COLON = 400;
    public static readonly COMMA = 401;
    public static readonly CONCAT = 402;
    public static readonly DASH = 403;
    public static readonly DOT = 404;
    public static readonly EQ_DOUBLE = 405;
    public static readonly EQ_SINGLE = 406;
    public static readonly GE = 407;
    public static readonly GT = 408;
    public static readonly LBRACE = 409;
    public static readonly LBRACKET = 410;
    public static readonly LE = 411;
    public static readonly LPAREN = 412;
    public static readonly LT = 413;
    public static readonly NOT_EQ = 414;
    public static readonly PERCENT = 415;
    public static readonly PLUS = 416;
    public static readonly QUESTIONMARK = 417;
    public static readonly QUOTE_DOUBLE = 418;
    public static readonly QUOTE_SINGLE = 419;
    public static readonly RBRACE = 420;
    public static readonly RBRACKET = 421;
    public static readonly RPAREN = 422;
    public static readonly SEMICOLON = 423;
    public static readonly SLASH = 424;
    public static readonly UNDERSCORE = 425;
    public static readonly MULTI_LINE_COMMENT = 426;
    public static readonly SINGLE_LINE_COMMENT = 427;
    public static readonly WHITESPACE = 428;
    public static readonly RULE_root = 0;
    public static readonly RULE_statements = 1;
    public static readonly RULE_statement = 2;
    public static readonly RULE_notInsertStatement = 3;
    public static readonly RULE_commonTableExpressionStatement = 4;
    public static readonly RULE_namedQuery = 5;
    public static readonly RULE_columnAliases = 6;
    public static readonly RULE_alterStatement = 7;
    public static readonly RULE_alterSettingsProfileStatement = 8;
    public static readonly RULE_alterNamedCollectionStatement = 9;
    public static readonly RULE_alterRoleStatement = 10;
    public static readonly RULE_alterPolicyExpression = 11;
    public static readonly RULE_alterRowPolicyStatement = 12;
    public static readonly RULE_alterQuotaStatement = 13;
    public static readonly RULE_alterUserStatement = 14;
    public static readonly RULE_renameClause = 15;
    public static readonly RULE_alterTableStatement = 16;
    public static readonly RULE_alterTableClause = 17;
    public static readonly RULE_alterTableDeleteClause = 18;
    public static readonly RULE_alterTableMaterializeClause = 19;
    public static readonly RULE_alterTableDropClause = 20;
    public static readonly RULE_alterTableClearClause = 21;
    public static readonly RULE_alterTableAddClause = 22;
    public static readonly RULE_alterTableModifyClause = 23;
    public static readonly RULE_alterTableUpdateClause = 24;
    public static readonly RULE_filterByNumberExpression = 25;
    public static readonly RULE_identifierEqualNumber = 26;
    public static readonly RULE_columnEqualExpression = 27;
    public static readonly RULE_assignmentExpressionList = 28;
    public static readonly RULE_assignmentExpression = 29;
    public static readonly RULE_tableColumnPropertyType = 30;
    public static readonly RULE_partitionExpression = 31;
    public static readonly RULE_partitionClause = 32;
    public static readonly RULE_partitionOrPartClause = 33;
    public static readonly RULE_attachStatement = 34;
    public static readonly RULE_checkStatement = 35;
    public static readonly RULE_deleteStatement = 36;
    public static readonly RULE_createTableStatement = 37;
    public static readonly RULE_createDatabaseStatement = 38;
    public static readonly RULE_createDictionaryStatement = 39;
    public static readonly RULE_createLiveViewStatement = 40;
    public static readonly RULE_createMaterializedViewStatement = 41;
    public static readonly RULE_createViewStatement = 42;
    public static readonly RULE_stringIdentificationType = 43;
    public static readonly RULE_keyTypeClause = 44;
    public static readonly RULE_otherIdentificationType = 45;
    public static readonly RULE_userIdentificationClause = 46;
    public static readonly RULE_validUntilClause = 47;
    public static readonly RULE_grantsProvider = 48;
    public static readonly RULE_granteesClause = 49;
    public static readonly RULE_hostType = 50;
    public static readonly RULE_hostClause = 51;
    public static readonly RULE_extendedSettingExpression = 52;
    public static readonly RULE_extendedSettingExpressionWithProfileClause = 53;
    public static readonly RULE_extendedSettingsWithProfileClause = 54;
    public static readonly RULE_inClause = 55;
    public static readonly RULE_defaultRoleClause = 56;
    public static readonly RULE_createUserStatement = 57;
    public static readonly RULE_replaceOrIfNotExistsClause = 58;
    public static readonly RULE_tableIdentifierOrAnyTable = 59;
    public static readonly RULE_createPolicyExpression = 60;
    public static readonly RULE_identifierOrLiteralOrFunction = 61;
    public static readonly RULE_functionExpression = 62;
    public static readonly RULE_conditionExpression = 63;
    public static readonly RULE_conditionClause = 64;
    public static readonly RULE_subjectOrAllOrExcept = 65;
    public static readonly RULE_subjectExpression = 66;
    public static readonly RULE_asPermissiveOrRestrictive = 67;
    public static readonly RULE_usingClause = 68;
    public static readonly RULE_createRowPolicyStatement = 69;
    public static readonly RULE_quotaKeyType = 70;
    public static readonly RULE_quotaKeyClause = 71;
    public static readonly RULE_quotaRestrictionType = 72;
    public static readonly RULE_stringOrNumberLiteral = 73;
    public static readonly RULE_quotaRestrictionExpression = 74;
    public static readonly RULE_quotaRestrictionClause = 75;
    public static readonly RULE_quotaForClause = 76;
    public static readonly RULE_intervalOperand = 77;
    public static readonly RULE_quotaForList = 78;
    public static readonly RULE_createQuotaStatement = 79;
    public static readonly RULE_identifierList = 80;
    public static readonly RULE_createRoleStatement = 81;
    public static readonly RULE_extendedSettingExpressionWithProfileOrInheritClause = 82;
    public static readonly RULE_extendedSettingsWithInheritClause = 83;
    public static readonly RULE_createSettingsProfileStatement = 84;
    public static readonly RULE_namedCollectionExpression = 85;
    public static readonly RULE_namedCollectionExpressionList = 86;
    public static readonly RULE_createNamedCollectionStatement = 87;
    public static readonly RULE_expressionOperand = 88;
    public static readonly RULE_expression = 89;
    public static readonly RULE_createFunctionStatement = 90;
    public static readonly RULE_orderType = 91;
    public static readonly RULE_createIndexStatement = 92;
    public static readonly RULE_createStatement = 93;
    public static readonly RULE_dictionarySchemaClause = 94;
    public static readonly RULE_dictionaryAttributeDefinition = 95;
    public static readonly RULE_dictionaryEngineClause = 96;
    public static readonly RULE_dictionaryPrimaryKeyClause = 97;
    public static readonly RULE_dictionaryArgumentExpression = 98;
    public static readonly RULE_sourceClause = 99;
    public static readonly RULE_lifetimeClause = 100;
    public static readonly RULE_layoutClause = 101;
    public static readonly RULE_rangeClause = 102;
    public static readonly RULE_dictionarySettingsClause = 103;
    public static readonly RULE_clusterClause = 104;
    public static readonly RULE_uuidClause = 105;
    public static readonly RULE_destinationClause = 106;
    public static readonly RULE_subqueryClause = 107;
    public static readonly RULE_tableSchemaClause = 108;
    public static readonly RULE_engineClause = 109;
    public static readonly RULE_partitionByClause = 110;
    public static readonly RULE_primaryKeyClause = 111;
    public static readonly RULE_sampleByClause = 112;
    public static readonly RULE_ttlClause = 113;
    public static readonly RULE_engineExpression = 114;
    public static readonly RULE_tableElementExpression = 115;
    public static readonly RULE_tableColumnDefinition = 116;
    public static readonly RULE_tableColumnPropertyExpression = 117;
    public static readonly RULE_tableIndexDefinition = 118;
    public static readonly RULE_tableProjectionDefinition = 119;
    public static readonly RULE_codecExpression = 120;
    public static readonly RULE_codecArgExpression = 121;
    public static readonly RULE_ttlExpression = 122;
    public static readonly RULE_describeStatement = 123;
    public static readonly RULE_dropStatement = 124;
    public static readonly RULE_existsStatement = 125;
    public static readonly RULE_explainStatement = 126;
    public static readonly RULE_revokeStatement = 127;
    public static readonly RULE_subjectExpressionList = 128;
    public static readonly RULE_userExpressionList = 129;
    public static readonly RULE_roleExpressionList = 130;
    public static readonly RULE_grantStatement = 131;
    public static readonly RULE_withGrantOrReplaceOption = 132;
    public static readonly RULE_withReplaceOption = 133;
    public static readonly RULE_accessSubjectIdentifier = 134;
    public static readonly RULE_privilegeList = 135;
    public static readonly RULE_roleIdentifier = 136;
    public static readonly RULE_userIdentifier = 137;
    public static readonly RULE_userOrRoleExpressionList = 138;
    public static readonly RULE_userOrRoleIdentifier = 139;
    public static readonly RULE_selectPrivilege = 140;
    public static readonly RULE_insertPrivilege = 141;
    public static readonly RULE_createPrivilege = 142;
    public static readonly RULE_dropPrivilege = 143;
    public static readonly RULE_showPrivilege = 144;
    public static readonly RULE_introspectionPrivilege = 145;
    public static readonly RULE_sourcePrivilege = 146;
    public static readonly RULE_dictPrivilege = 147;
    public static readonly RULE_alterPrivilege = 148;
    public static readonly RULE_accessManagementPrivilege = 149;
    public static readonly RULE_systemPrivilege = 150;
    public static readonly RULE_namedCollectionAdminPrivilege = 151;
    public static readonly RULE_privilege = 152;
    public static readonly RULE_insertStatement = 153;
    public static readonly RULE_columnsOrExceptClause = 154;
    public static readonly RULE_columnsClause = 155;
    public static readonly RULE_insertFormatType = 156;
    public static readonly RULE_dataClause = 157;
    public static readonly RULE_literalList = 158;
    public static readonly RULE_valueIdentifier = 159;
    public static readonly RULE_valueOrArrayIdentifier = 160;
    public static readonly RULE_arrayIdentifier = 161;
    public static readonly RULE_valuesClause = 162;
    public static readonly RULE_valuesStatement = 163;
    public static readonly RULE_killStatement = 164;
    public static readonly RULE_optimizeStatement = 165;
    public static readonly RULE_renameStatement = 166;
    public static readonly RULE_projectionSelectStatement = 167;
    public static readonly RULE_selectUnionStatement = 168;
    public static readonly RULE_selectStatementWithParentheses = 169;
    public static readonly RULE_selectStatement = 170;
    public static readonly RULE_withClause = 171;
    public static readonly RULE_topClause = 172;
    public static readonly RULE_fromClause = 173;
    public static readonly RULE_arrayJoinClause = 174;
    public static readonly RULE_windowClause = 175;
    public static readonly RULE_prewhereClause = 176;
    public static readonly RULE_whereClause = 177;
    public static readonly RULE_groupByClause = 178;
    public static readonly RULE_havingClause = 179;
    public static readonly RULE_orderByClause = 180;
    public static readonly RULE_projectionOrderByClause = 181;
    public static readonly RULE_limitByClause = 182;
    public static readonly RULE_limitClause = 183;
    public static readonly RULE_settingsClause = 184;
    public static readonly RULE_joinExpression = 185;
    public static readonly RULE_joinOperator = 186;
    public static readonly RULE_joinOperatorCross = 187;
    public static readonly RULE_joinConstraintClause = 188;
    public static readonly RULE_sampleClause = 189;
    public static readonly RULE_limitExpression = 190;
    public static readonly RULE_orderExpressionList = 191;
    public static readonly RULE_orderExpression = 192;
    public static readonly RULE_ratioExpression = 193;
    public static readonly RULE_settingExpressionList = 194;
    public static readonly RULE_settingExpression = 195;
    public static readonly RULE_windowExpression = 196;
    public static readonly RULE_windowPartitionByClause = 197;
    public static readonly RULE_windowOrderByClause = 198;
    public static readonly RULE_windowFrameClause = 199;
    public static readonly RULE_windowFrameExtend = 200;
    public static readonly RULE_windowFrameBound = 201;
    public static readonly RULE_setStatement = 202;
    public static readonly RULE_showStatement = 203;
    public static readonly RULE_systemStatement = 204;
    public static readonly RULE_truncateStatement = 205;
    public static readonly RULE_useStatement = 206;
    public static readonly RULE_watchStatement = 207;
    public static readonly RULE_columnTypeExpression = 208;
    public static readonly RULE_columnExpressionList = 209;
    public static readonly RULE_columnsExpression = 210;
    public static readonly RULE_columnExpression = 211;
    public static readonly RULE_columnArgumentList = 212;
    public static readonly RULE_columnArgumentExpression = 213;
    public static readonly RULE_columnLambdaExpression = 214;
    public static readonly RULE_columnIdentifier = 215;
    public static readonly RULE_tableExpression = 216;
    public static readonly RULE_tableFunctionExpression = 217;
    public static readonly RULE_tableIdentifier = 218;
    public static readonly RULE_tableArgList = 219;
    public static readonly RULE_tableArgExpression = 220;
    public static readonly RULE_databaseIdentifier = 221;
    public static readonly RULE_floatingLiteral = 222;
    public static readonly RULE_numberLiteral = 223;
    public static readonly RULE_literal = 224;
    public static readonly RULE_interval = 225;
    public static readonly RULE_keyword = 226;
    public static readonly RULE_keywordForAlias = 227;
    public static readonly RULE_alias = 228;
    public static readonly RULE_identifier = 229;
    public static readonly RULE_identifierOrNull = 230;
    public static readonly RULE_enumValue = 231;

    public static readonly literalNames = [
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        null, null, null, null, "'query_selects'", "'query_inserts'", null, 
        "'result_rows'", "'result_bytes'", "'read_rows'", "'read_bytes'", 
        "'execution_time'", "'failed_sequential_authentications'", null, 
        null, null, null, null, null, null, null, null, null, null, null, 
        "'false'", "'true'", null, null, null, null, null, null, "'->'", 
        "'*'", "'`'", "'\'", "':'", "','", "'||'", "'-'", "'.'", "'=='", 
        "'='", "'>='", "'>'", "'{'", "'['", "'<='", "'('", "'<'", null, 
        "'%'", "'+'", "'?'", "'\"'", "'''", "'}'", "']'", "')'", "';'", 
        "'/'", "'_'"
    ];

    public static readonly symbolicNames = [
        null, "ADD", "AFTER", "ALIAS", "ALL", "ALTER", "AND", "ANTI", "ANY", 
        "ARRAY", "AS", "ASC", "ASCENDING", "ASOF", "AST", "ASYNC", "ATTACH", 
        "BETWEEN", "BOTH", "BY", "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", 
        "CODEC", "COLLATE", "COLUMN", "COMMENT", "CONSTRAINT", "CREATE", 
        "CROSS", "CUBE", "CURRENT", "DATABASE", "DATABASES", "DATE", "DAY", 
        "DEDUPLICATE", "DEFAULT", "DELAY", "DELETE", "DESC", "DESCENDING", 
        "DESCRIBE", "DETACH", "DICTIONARIES", "DICTIONARY", "DISK", "DISTINCT", 
        "DISTRIBUTED", "DROP", "ELSE", "END", "ENGINE", "ESTIMATE", "EVENTS", 
        "EXISTS", "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES", "FINAL", 
        "FIRST", "FLUSH", "FOLLOWING", "FOR", "FORMAT", "FREEZE", "FROM", 
        "FULL", "FUNCTION", "GLOBAL", "GRANULARITY", "GROUP", "HAVING", 
        "HIERARCHICAL", "HOUR", "ID", "IF", "ILIKE", "IN", "INDEX", "INF", 
        "INJECTIVE", "INNER", "INSERT", "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", 
        "JOIN", "KEY", "KILL", "LAST", "LAYOUT", "LEADING", "LEFT", "LIFETIME", 
        "LIKE", "LIMIT", "LIVE", "LOCAL", "LOGS", "MATERIALIZE", "MATERIALIZED", 
        "MAX", "MERGES", "MIN", "MINUTE", "MODIFY", "MONTH", "MOVE", "MUTATION", 
        "NAN_SQL", "NO", "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", "OPTIMIZE", 
        "OR", "ORDER", "OUTER", "OUTFILE", "OVER", "PARTITION", "PIPELINE", 
        "PLAN", "POPULATE", "PRECEDING", "PREWHERE", "PRIMARY", "PROJECTION", 
        "QUARTER", "QUERY", "RANGE", "RELOAD", "REMOVE", "RENAME", "REPLACE", 
        "REPLICA", "REPLICATED", "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", 
        "SECOND", "SELECT", "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", 
        "SOURCE", "START", "STOP", "SUBSTRING", "SYNC", "SYNTAX", "SYSTEM", 
        "TABLE", "TABLES", "TEMPORARY", "TEST", "THEN", "TIES", "TIMEOUT", 
        "TIMESTAMP", "TO", "TOP", "TOTALS", "TRAILING", "TRIM", "TREE", 
        "TRUNCATE", "TTL", "TYPE", "UNBOUNDED", "UNION", "UPDATE", "USE", 
        "USING", "UUID", "VALUES", "VIEW", "VOLUME", "WATCH", "WEEK", "WHEN", 
        "WHERE", "WINDOW", "WITH", "YEAR", "GRANT", "USER", "FETCH", "REFRESH", 
        "POLICY", "QUOTA", "ROLE", "PROFILE", "ARBITRARY", "COLUMNS", "CURRENT_USER", 
        "ACCESS", "SHOW_USERS", "SHOW_ROLES", "SHOW_ROW_POLICIES", "SHOW_QUOTAS", 
        "SHOW_SETTINGS_PROFILES", "SHUTDOWN", "CACHE", "DNS", "MARK", "MARKS", 
        "PART", "UNCOMPRESSED", "CONFIG", "EMBEDDED", "FUNCTIONS", "MOVES", 
        "REPLICATION", "QUEUES", "RESTART", "DICTGET", "DICTGETHIERARCHY", 
        "DICTHAS", "DICTISIN", "MANAGEMENT", "ADMIN", "NAMED", "COLLECTION", 
        "CONTROL", "COLLECTIONS", "SECRETS", "USAGE", "INTROSPECTION", "ADDRESSTOLINE", 
        "ADDRESSTOSYMBOL", "DEMANGLE", "SOURCES", "FILE", "URL", "REMOTE", 
        "MYSQL", "ODBC", "JDBC", "HDFS", "S3", "SETTING", "OPTION", "NONE", 
        "AZURE", "HIVE", "MONGO", "POSTGRES", "REDIS", "SQLITE", "ADDRESSTOLINEWITHINLINES", 
        "SQL", "SECURITY", "DISPLAYSECRETSINSHOWANDSELECT", "POLICIES", 
        "PROFILES", "ALLOW", "GRANTS", "EXCEPT", "REVOKE", "IDENTIFIED", 
        "PLAINTEXT_PASSWORD", "SHA256_PASSWORD", "SHA256_HASH", "DOUBLE_SHA1_PASSWORD", 
        "DOUBLE_SHA1_HASH", "NO_PASSWORD", "LDAP", "SERVER", "KERBEROS", 
        "REALM", "SSL_CERTIFICATE", "SAN", "CN", "SSH_KEY", "HTTP", "SCHEME", 
        "BCRYPT_PASSWORD", "BCRYPT_HASH", "VALID", "UNTIL", "GRANTEES", 
        "NAME", "REGEXP", "IP", "HOST", "READONLY", "WRITABLE", "PERMISSIVE", 
        "RESTRICTIVE", "TABSEPARATED", "TABSEPARATEDRAW", "TABSEPARATEDWITHNAMES", 
        "TABSEPARATEDWITHNAMESANDTYPES", "TABSEPARATEDRAWWITHNAMES", "TABSEPARATEDRAWWITHNAMESANDTYPES", 
        "TEMPLATE", "TEMPLATEIGNORESPACES", "CSV", "CSVWITHNAMES", "CSVWITHNAMESANDTYPES", 
        "CUSTOMSEPARATED", "CUSTOMSEPARATEDWITHNAMES", "CUSTOMSEPARATEDWITHNAMESANDTYPES", 
        "JSON", "JSONASSTRING", "JSONASOBJECT", "JSONSTRINGS", "JSONCOLUMNS", 
        "JSONCOLUMNSWITHMETADATA", "JSONCOMPACT", "JSONCOMPACTCOLUMNS", 
        "JSONEACHROW", "JSONSTRINGSEACHROW", "JSONCOMPACTEACHROW", "JSONCOMPACTEACHROWWITHNAMES", 
        "JSONCOMPACTEACHROWWITHNAMESANDTYPES", "JSONCOMPACTSTRINGSEACHROW", 
        "JSONCOMPACTSTRINGSEACHROWWITHNAMES", "JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES", 
        "JSONOBJECTEACHROW", "BSONEACHROW", "TSKV", "PROTOBUF", "PROTOBUFSINGLE", 
        "PROTOBUFLIST", "AVRO", "AVROCONFLUENT", "PARQUET", "PARQUETMETADATA", 
        "ARROW", "ARROWSTREAM", "ORC", "ONE", "NPY", "ROWBINARY", "ROWBINARYWITHNAMES", 
        "ROWBINARYWITHNAMESANDTYPES", "ROWBINARYWITHDEFAULTS", "NATIVE", 
        "CAPNPROTO", "LINEASSTRING", "RAWBLOB", "MSGPACK", "MYSQLDUMP", 
        "DWARF", "FORM", "KEYED", "RANDOMIZED", "USER_NAME", "IP_ADDRESS", 
        "FORWARDED_IP_ADDRESS", "CLIENT_KEY", "CLIENT_KEY_OR_USER_NAME", 
        "CLIENT_KEY_OR_IP_ADDRESS", "QUERIES", "QUERY_SELECTS", "QUERY_INSERTS", 
        "ERRORS", "RESULT_ROWS", "RESULT_BYTES", "READ_ROWS", "READ_BYTES", 
        "EXECUTION_TIME", "FAILED_SEQUENTIAL_AUTHENTICATIONS", "LIMITS", 
        "TRACKING", "ONLY", "CONST", "CHANGEABLE_IN_READONLY", "OVERRIDABLE", 
        "INHERIT", "RESET", "DETACHED", "FORGET", "STATISTICS", "UNFREEZE", 
        "JSON_FALSE", "JSON_TRUE", "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
        "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", "ARROW_SYMBOL", 
        "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", "COMMA", "CONCAT", 
        "DASH", "DOT", "EQ_DOUBLE", "EQ_SINGLE", "GE", "GT", "LBRACE", "LBRACKET", 
        "LE", "LPAREN", "LT", "NOT_EQ", "PERCENT", "PLUS", "QUESTIONMARK", 
        "QUOTE_DOUBLE", "QUOTE_SINGLE", "RBRACE", "RBRACKET", "RPAREN", 
        "SEMICOLON", "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
        "WHITESPACE"
    ];
    public static readonly ruleNames = [
        "root", "statements", "statement", "notInsertStatement", "commonTableExpressionStatement", 
        "namedQuery", "columnAliases", "alterStatement", "alterSettingsProfileStatement", 
        "alterNamedCollectionStatement", "alterRoleStatement", "alterPolicyExpression", 
        "alterRowPolicyStatement", "alterQuotaStatement", "alterUserStatement", 
        "renameClause", "alterTableStatement", "alterTableClause", "alterTableDeleteClause", 
        "alterTableMaterializeClause", "alterTableDropClause", "alterTableClearClause", 
        "alterTableAddClause", "alterTableModifyClause", "alterTableUpdateClause", 
        "filterByNumberExpression", "identifierEqualNumber", "columnEqualExpression", 
        "assignmentExpressionList", "assignmentExpression", "tableColumnPropertyType", 
        "partitionExpression", "partitionClause", "partitionOrPartClause", 
        "attachStatement", "checkStatement", "deleteStatement", "createTableStatement", 
        "createDatabaseStatement", "createDictionaryStatement", "createLiveViewStatement", 
        "createMaterializedViewStatement", "createViewStatement", "stringIdentificationType", 
        "keyTypeClause", "otherIdentificationType", "userIdentificationClause", 
        "validUntilClause", "grantsProvider", "granteesClause", "hostType", 
        "hostClause", "extendedSettingExpression", "extendedSettingExpressionWithProfileClause", 
        "extendedSettingsWithProfileClause", "inClause", "defaultRoleClause", 
        "createUserStatement", "replaceOrIfNotExistsClause", "tableIdentifierOrAnyTable", 
        "createPolicyExpression", "identifierOrLiteralOrFunction", "functionExpression", 
        "conditionExpression", "conditionClause", "subjectOrAllOrExcept", 
        "subjectExpression", "asPermissiveOrRestrictive", "usingClause", 
        "createRowPolicyStatement", "quotaKeyType", "quotaKeyClause", "quotaRestrictionType", 
        "stringOrNumberLiteral", "quotaRestrictionExpression", "quotaRestrictionClause", 
        "quotaForClause", "intervalOperand", "quotaForList", "createQuotaStatement", 
        "identifierList", "createRoleStatement", "extendedSettingExpressionWithProfileOrInheritClause", 
        "extendedSettingsWithInheritClause", "createSettingsProfileStatement", 
        "namedCollectionExpression", "namedCollectionExpressionList", "createNamedCollectionStatement", 
        "expressionOperand", "expression", "createFunctionStatement", "orderType", 
        "createIndexStatement", "createStatement", "dictionarySchemaClause", 
        "dictionaryAttributeDefinition", "dictionaryEngineClause", "dictionaryPrimaryKeyClause", 
        "dictionaryArgumentExpression", "sourceClause", "lifetimeClause", 
        "layoutClause", "rangeClause", "dictionarySettingsClause", "clusterClause", 
        "uuidClause", "destinationClause", "subqueryClause", "tableSchemaClause", 
        "engineClause", "partitionByClause", "primaryKeyClause", "sampleByClause", 
        "ttlClause", "engineExpression", "tableElementExpression", "tableColumnDefinition", 
        "tableColumnPropertyExpression", "tableIndexDefinition", "tableProjectionDefinition", 
        "codecExpression", "codecArgExpression", "ttlExpression", "describeStatement", 
        "dropStatement", "existsStatement", "explainStatement", "revokeStatement", 
        "subjectExpressionList", "userExpressionList", "roleExpressionList", 
        "grantStatement", "withGrantOrReplaceOption", "withReplaceOption", 
        "accessSubjectIdentifier", "privilegeList", "roleIdentifier", "userIdentifier", 
        "userOrRoleExpressionList", "userOrRoleIdentifier", "selectPrivilege", 
        "insertPrivilege", "createPrivilege", "dropPrivilege", "showPrivilege", 
        "introspectionPrivilege", "sourcePrivilege", "dictPrivilege", "alterPrivilege", 
        "accessManagementPrivilege", "systemPrivilege", "namedCollectionAdminPrivilege", 
        "privilege", "insertStatement", "columnsOrExceptClause", "columnsClause", 
        "insertFormatType", "dataClause", "literalList", "valueIdentifier", 
        "valueOrArrayIdentifier", "arrayIdentifier", "valuesClause", "valuesStatement", 
        "killStatement", "optimizeStatement", "renameStatement", "projectionSelectStatement", 
        "selectUnionStatement", "selectStatementWithParentheses", "selectStatement", 
        "withClause", "topClause", "fromClause", "arrayJoinClause", "windowClause", 
        "prewhereClause", "whereClause", "groupByClause", "havingClause", 
        "orderByClause", "projectionOrderByClause", "limitByClause", "limitClause", 
        "settingsClause", "joinExpression", "joinOperator", "joinOperatorCross", 
        "joinConstraintClause", "sampleClause", "limitExpression", "orderExpressionList", 
        "orderExpression", "ratioExpression", "settingExpressionList", "settingExpression", 
        "windowExpression", "windowPartitionByClause", "windowOrderByClause", 
        "windowFrameClause", "windowFrameExtend", "windowFrameBound", "setStatement", 
        "showStatement", "systemStatement", "truncateStatement", "useStatement", 
        "watchStatement", "columnTypeExpression", "columnExpressionList", 
        "columnsExpression", "columnExpression", "columnArgumentList", "columnArgumentExpression", 
        "columnLambdaExpression", "columnIdentifier", "tableExpression", 
        "tableFunctionExpression", "tableIdentifier", "tableArgList", "tableArgExpression", 
        "databaseIdentifier", "floatingLiteral", "numberLiteral", "literal", 
        "interval", "keyword", "keywordForAlias", "alias", "identifier", 
        "identifierOrNull", "enumValue",
    ];

    public get grammarFileName(): string { return "ClickHouseParser.g4"; }
    public get literalNames(): (string | null)[] { return ClickHouseParser.literalNames; }
    public get symbolicNames(): (string | null)[] { return ClickHouseParser.symbolicNames; }
    public get ruleNames(): string[] { return ClickHouseParser.ruleNames; }
    public get serializedATN(): number[] { return ClickHouseParser._serializedATN; }

    protected createFailedPredicateException(predicate?: string, message?: string): antlr.FailedPredicateException {
        return new antlr.FailedPredicateException(this, predicate, message);
    }

    public constructor(input: antlr.TokenStream) {
        super(input);
        this.interpreter = new antlr.ParserATNSimulator(this, ClickHouseParser._ATN, ClickHouseParser.decisionsToDFA, new antlr.PredictionContextCache());
    }
    public root(): RootContext {
        let localContext = new RootContext(this.context, this.state);
        this.enterRule(localContext, 0, ClickHouseParser.RULE_root);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 465;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 1078001696) !== 0) || ((((_la - 41)) & ~0x1F) === 0 && ((1 << (_la - 41)) & 197659) !== 0) || _la === 86 || _la === 93 || ((((_la - 121)) & ~0x1F) === 0 && ((1 << (_la - 121)) & 538443777) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & 1090519557) !== 0) || ((((_la - 189)) & ~0x1F) === 0 && ((1 << (_la - 189)) & 161) !== 0) || _la === 270 || _la === 412) {
                {
                this.state = 464;
                this.statements();
                }
            }

            this.state = 467;
            this.match(ClickHouseParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statements(): StatementsContext {
        let localContext = new StatementsContext(this.context, this.state);
        this.enterRule(localContext, 2, ClickHouseParser.RULE_statements);
        let _la: number;
        try {
            this.state = 477;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 2, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 469;
                this.statement();
                this.state = 471;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 423) {
                    {
                    this.state = 470;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 473;
                this.statement();
                this.state = 474;
                this.match(ClickHouseParser.SEMICOLON);
                this.state = 475;
                this.statements();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public statement(): StatementContext {
        let localContext = new StatementContext(this.context, this.state);
        this.enterRule(localContext, 4, ClickHouseParser.RULE_statement);
        let _la: number;
        try {
            this.state = 495;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ALTER:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DROP:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.KILL:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SET:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WITH:
            case ClickHouseParser.LPAREN:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 479;
                this.notInsertStatement();
                this.state = 483;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 88) {
                    {
                    this.state = 480;
                    this.match(ClickHouseParser.INTO);
                    this.state = 481;
                    this.match(ClickHouseParser.OUTFILE);
                    this.state = 482;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 487;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 485;
                    this.match(ClickHouseParser.FORMAT);
                    this.state = 486;
                    this.identifierOrNull();
                    }
                }

                this.state = 490;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 5, this.context) ) {
                case 1:
                    {
                    this.state = 489;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                    break;
                }
                }
                break;
            case ClickHouseParser.INSERT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 492;
                this.insertStatement();
                }
                break;
            case ClickHouseParser.GRANT:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 493;
                this.grantStatement();
                }
                break;
            case ClickHouseParser.REVOKE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 494;
                this.revokeStatement();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public notInsertStatement(): NotInsertStatementContext {
        let localContext = new NotInsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 6, ClickHouseParser.RULE_notInsertStatement);
        try {
            this.state = 520;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 8, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 497;
                this.alterStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 498;
                this.attachStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 499;
                this.checkStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 500;
                this.createStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 501;
                this.describeStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 502;
                this.deleteStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 503;
                this.dropStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 504;
                this.existsStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 505;
                this.explainStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 506;
                this.killStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 507;
                this.optimizeStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 508;
                this.renameStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 509;
                this.selectUnionStatement();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 510;
                this.setStatement();
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 511;
                this.showStatement();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 512;
                this.systemStatement();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 513;
                this.truncateStatement();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 514;
                this.useStatement();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 515;
                this.watchStatement();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 517;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 7, this.context) ) {
                case 1:
                    {
                    this.state = 516;
                    this.commonTableExpressionStatement();
                    }
                    break;
                }
                this.state = 519;
                this.selectStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public commonTableExpressionStatement(): CommonTableExpressionStatementContext {
        let localContext = new CommonTableExpressionStatementContext(this.context, this.state);
        this.enterRule(localContext, 8, ClickHouseParser.RULE_commonTableExpressionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 522;
            this.match(ClickHouseParser.WITH);
            this.state = 523;
            this.namedQuery();
            this.state = 528;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 524;
                this.match(ClickHouseParser.COMMA);
                this.state = 525;
                this.namedQuery();
                }
                }
                this.state = 530;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedQuery(): NamedQueryContext {
        let localContext = new NamedQueryContext(this.context, this.state);
        this.enterRule(localContext, 10, ClickHouseParser.RULE_namedQuery);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 531;
            localContext._name = this.identifier();
            this.state = 533;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 412) {
                {
                this.state = 532;
                this.columnAliases();
                }
            }

            this.state = 535;
            this.match(ClickHouseParser.AS);
            this.state = 536;
            this.match(ClickHouseParser.LPAREN);
            this.state = 537;
            this.notInsertStatement();
            this.state = 538;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnAliases(): ColumnAliasesContext {
        let localContext = new ColumnAliasesContext(this.context, this.state);
        this.enterRule(localContext, 12, ClickHouseParser.RULE_columnAliases);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 540;
            this.match(ClickHouseParser.LPAREN);
            this.state = 541;
            this.identifierList();
            this.state = 542;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterStatement(): AlterStatementContext {
        let localContext = new AlterStatementContext(this.context, this.state);
        this.enterRule(localContext, 14, ClickHouseParser.RULE_alterStatement);
        try {
            this.state = 551;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 11, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 544;
                this.alterTableStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 545;
                this.alterUserStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 546;
                this.alterQuotaStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 547;
                this.alterRowPolicyStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 548;
                this.alterRoleStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 549;
                this.alterNamedCollectionStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 550;
                this.alterSettingsProfileStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterSettingsProfileStatement(): AlterSettingsProfileStatementContext {
        let localContext = new AlterSettingsProfileStatementContext(this.context, this.state);
        this.enterRule(localContext, 16, ClickHouseParser.RULE_alterSettingsProfileStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 553;
            this.match(ClickHouseParser.ALTER);
            this.state = 554;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 555;
            this.match(ClickHouseParser.PROFILE);
            this.state = 558;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 12, this.context) ) {
            case 1:
                {
                this.state = 556;
                this.match(ClickHouseParser.IF);
                this.state = 557;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 560;
            this.identifier();
            this.state = 564;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.RENAME:
                {
                this.state = 561;
                this.renameClause();
                }
                break;
            case ClickHouseParser.COMMA:
                {
                this.state = 562;
                this.match(ClickHouseParser.COMMA);
                this.state = 563;
                this.identifierList();
                }
                break;
            case ClickHouseParser.EOF:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.INTO:
            case ClickHouseParser.ON:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.TO:
            case ClickHouseParser.RPAREN:
            case ClickHouseParser.SEMICOLON:
                break;
            default:
                break;
            }
            this.state = 567;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 566;
                this.clusterClause();
                }
            }

            this.state = 570;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 569;
                this.extendedSettingsWithInheritClause();
                }
            }

            this.state = 574;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 171) {
                {
                this.state = 572;
                this.match(ClickHouseParser.TO);
                this.state = 573;
                this.subjectExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterNamedCollectionStatement(): AlterNamedCollectionStatementContext {
        let localContext = new AlterNamedCollectionStatementContext(this.context, this.state);
        this.enterRule(localContext, 18, ClickHouseParser.RULE_alterNamedCollectionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 576;
            this.match(ClickHouseParser.ALTER);
            this.state = 577;
            this.match(ClickHouseParser.NAMED);
            this.state = 578;
            this.match(ClickHouseParser.COLLECTION);
            this.state = 581;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 17, this.context) ) {
            case 1:
                {
                this.state = 579;
                this.match(ClickHouseParser.IF);
                this.state = 580;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 583;
            this.identifier();
            this.state = 585;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 584;
                this.clusterClause();
                }
            }

            this.state = 591;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.SET:
                {
                {
                this.state = 587;
                this.match(ClickHouseParser.SET);
                this.state = 588;
                this.namedCollectionExpressionList();
                }
                }
                break;
            case ClickHouseParser.DELETE:
                {
                {
                this.state = 589;
                this.match(ClickHouseParser.DELETE);
                this.state = 590;
                this.identifierList();
                }
                }
                break;
            case ClickHouseParser.EOF:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.INTO:
            case ClickHouseParser.RPAREN:
            case ClickHouseParser.SEMICOLON:
                break;
            default:
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterRoleStatement(): AlterRoleStatementContext {
        let localContext = new AlterRoleStatementContext(this.context, this.state);
        this.enterRule(localContext, 20, ClickHouseParser.RULE_alterRoleStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 593;
            this.match(ClickHouseParser.ALTER);
            this.state = 594;
            this.match(ClickHouseParser.ROLE);
            this.state = 597;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 20, this.context) ) {
            case 1:
                {
                this.state = 595;
                this.match(ClickHouseParser.IF);
                this.state = 596;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 599;
            this.identifier();
            this.state = 603;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.RENAME:
                {
                this.state = 600;
                this.renameClause();
                }
                break;
            case ClickHouseParser.COMMA:
                {
                this.state = 601;
                this.match(ClickHouseParser.COMMA);
                this.state = 602;
                this.identifierList();
                }
                break;
            case ClickHouseParser.EOF:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.INTO:
            case ClickHouseParser.ON:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.RPAREN:
            case ClickHouseParser.SEMICOLON:
                break;
            default:
                break;
            }
            this.state = 606;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 605;
                this.clusterClause();
                }
            }

            this.state = 609;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 608;
                this.extendedSettingsWithProfileClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterPolicyExpression(): AlterPolicyExpressionContext {
        let localContext = new AlterPolicyExpressionContext(this.context, this.state);
        this.enterRule(localContext, 22, ClickHouseParser.RULE_alterPolicyExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 611;
            this.identifier();
            this.state = 613;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 24, this.context) ) {
            case 1:
                {
                this.state = 612;
                this.clusterClause();
                }
                break;
            }
            this.state = 615;
            this.match(ClickHouseParser.ON);
            this.state = 616;
            this.tableIdentifier();
            this.state = 618;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 140) {
                {
                this.state = 617;
                this.renameClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterRowPolicyStatement(): AlterRowPolicyStatementContext {
        let localContext = new AlterRowPolicyStatementContext(this.context, this.state);
        this.enterRule(localContext, 24, ClickHouseParser.RULE_alterRowPolicyStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 620;
            this.match(ClickHouseParser.ALTER);
            this.state = 622;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 621;
                this.match(ClickHouseParser.ROW);
                }
            }

            this.state = 624;
            this.match(ClickHouseParser.POLICY);
            this.state = 627;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 27, this.context) ) {
            case 1:
                {
                this.state = 625;
                this.match(ClickHouseParser.IF);
                this.state = 626;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 629;
            this.alterPolicyExpression();
            this.state = 634;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 630;
                this.match(ClickHouseParser.COMMA);
                this.state = 631;
                this.alterPolicyExpression();
                }
                }
                this.state = 636;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 639;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 66) {
                {
                this.state = 637;
                this.match(ClickHouseParser.FOR);
                this.state = 638;
                this.match(ClickHouseParser.SELECT);
                }
            }

            this.state = 642;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 641;
                this.usingClause();
                }
            }

            this.state = 645;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 644;
                this.asPermissiveOrRestrictive();
                }
            }

            this.state = 649;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 171) {
                {
                this.state = 647;
                this.match(ClickHouseParser.TO);
                this.state = 648;
                this.subjectExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterQuotaStatement(): AlterQuotaStatementContext {
        let localContext = new AlterQuotaStatementContext(this.context, this.state);
        this.enterRule(localContext, 26, ClickHouseParser.RULE_alterQuotaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 651;
            this.match(ClickHouseParser.ALTER);
            this.state = 652;
            this.match(ClickHouseParser.QUOTA);
            this.state = 655;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 33, this.context) ) {
            case 1:
                {
                this.state = 653;
                this.match(ClickHouseParser.IF);
                this.state = 654;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 657;
            this.identifier();
            this.state = 659;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 658;
                this.clusterClause();
                }
            }

            this.state = 662;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 140) {
                {
                this.state = 661;
                this.renameClause();
                }
            }

            this.state = 665;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92 || _la === 116 || _la === 358) {
                {
                this.state = 664;
                this.quotaKeyClause();
                }
            }

            this.state = 668;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 66) {
                {
                this.state = 667;
                this.quotaForList();
                }
            }

            this.state = 672;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 171) {
                {
                this.state = 670;
                this.match(ClickHouseParser.TO);
                this.state = 671;
                this.subjectExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterUserStatement(): AlterUserStatementContext {
        let localContext = new AlterUserStatementContext(this.context, this.state);
        this.enterRule(localContext, 28, ClickHouseParser.RULE_alterUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 674;
            this.match(ClickHouseParser.ALTER);
            this.state = 675;
            this.match(ClickHouseParser.USER);
            this.state = 678;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 39, this.context) ) {
            case 1:
                {
                this.state = 676;
                this.match(ClickHouseParser.IF);
                this.state = 677;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 680;
            this.identifier();
            this.state = 684;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.RENAME:
                {
                this.state = 681;
                this.renameClause();
                }
                break;
            case ClickHouseParser.COMMA:
                {
                this.state = 682;
                this.match(ClickHouseParser.COMMA);
                this.state = 683;
                this.identifierList();
                }
                break;
            case ClickHouseParser.EOF:
            case ClickHouseParser.ADD:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DROP:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.INTO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.ON:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.VALID:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.HOST:
            case ClickHouseParser.RPAREN:
            case ClickHouseParser.SEMICOLON:
                break;
            default:
                break;
            }
            this.state = 687;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 686;
                this.clusterClause();
                }
            }

            this.state = 690;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 116 || _la === 271) {
                {
                this.state = 689;
                this.userIdentificationClause();
                }
            }

            this.state = 696;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 1 || _la === 51 || _la === 296) {
                {
                this.state = 693;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 51) {
                    {
                    this.state = 692;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 51)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 695;
                this.hostClause();
                }
            }

            this.state = 699;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 290) {
                {
                this.state = 698;
                this.validUntilClause();
                }
            }

            this.state = 702;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 39) {
                {
                this.state = 701;
                this.defaultRoleClause();
                }
            }

            this.state = 705;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 292) {
                {
                this.state = 704;
                this.granteesClause();
                }
            }

            this.state = 708;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 707;
                this.extendedSettingsWithProfileClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameClause(): RenameClauseContext {
        let localContext = new RenameClauseContext(this.context, this.state);
        this.enterRule(localContext, 30, ClickHouseParser.RULE_renameClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 710;
            this.match(ClickHouseParser.RENAME);
            this.state = 711;
            this.match(ClickHouseParser.TO);
            this.state = 712;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableStatement(): AlterTableStatementContext {
        let localContext = new AlterTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 32, ClickHouseParser.RULE_alterTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 714;
            this.match(ClickHouseParser.ALTER);
            this.state = 715;
            this.match(ClickHouseParser.TABLE);
            this.state = 716;
            this.tableIdentifier();
            this.state = 718;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 717;
                this.clusterClause();
                }
            }

            this.state = 720;
            this.alterTableClause();
            this.state = 725;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 721;
                this.match(ClickHouseParser.COMMA);
                this.state = 722;
                this.alterTableClause();
                }
                }
                this.state = 727;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableClause(): AlterTableClauseContext {
        let localContext = new AlterTableClauseContext(this.context, this.state);
        this.enterRule(localContext, 34, ClickHouseParser.RULE_alterTableClause);
        let _la: number;
        try {
            this.state = 823;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 62, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 728;
                this.alterTableAddClause();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 729;
                this.alterTableClearClause();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 730;
                this.match(ClickHouseParser.COMMENT);
                this.state = 731;
                this.match(ClickHouseParser.COLUMN);
                this.state = 734;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 51, this.context) ) {
                case 1:
                    {
                    this.state = 732;
                    this.match(ClickHouseParser.IF);
                    this.state = 733;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 736;
                this.columnIdentifier();
                this.state = 737;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 739;
                this.match(ClickHouseParser.DETACH);
                this.state = 740;
                this.partitionOrPartClause();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 741;
                this.alterTableDropClause();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 742;
                this.match(ClickHouseParser.FREEZE);
                this.state = 744;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 127) {
                    {
                    this.state = 743;
                    this.partitionClause();
                    }
                }

                this.state = 749;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 746;
                    this.match(ClickHouseParser.WITH);
                    this.state = 747;
                    this.match(ClickHouseParser.NAME);
                    this.state = 748;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 751;
                this.match(ClickHouseParser.UNFREEZE);
                this.state = 753;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 127) {
                    {
                    this.state = 752;
                    this.partitionClause();
                    }
                }

                this.state = 755;
                this.match(ClickHouseParser.WITH);
                this.state = 756;
                this.match(ClickHouseParser.NAME);
                this.state = 757;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 758;
                this.alterTableMaterializeClause();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 759;
                this.alterTableModifyClause();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 760;
                this.match(ClickHouseParser.MOVE);
                this.state = 761;
                this.partitionClause();
                this.state = 771;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 55, this.context) ) {
                case 1:
                    {
                    this.state = 762;
                    this.match(ClickHouseParser.TO);
                    this.state = 763;
                    this.match(ClickHouseParser.DISK);
                    this.state = 764;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case 2:
                    {
                    this.state = 765;
                    this.match(ClickHouseParser.TO);
                    this.state = 766;
                    this.match(ClickHouseParser.VOLUME);
                    this.state = 767;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case 3:
                    {
                    this.state = 768;
                    this.match(ClickHouseParser.TO);
                    this.state = 769;
                    this.match(ClickHouseParser.TABLE);
                    this.state = 770;
                    this.tableIdentifier();
                    }
                    break;
                }
                this.state = 774;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 773;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 776;
                this.match(ClickHouseParser.REMOVE);
                this.state = 777;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 778;
                this.match(ClickHouseParser.RENAME);
                this.state = 779;
                this.match(ClickHouseParser.COLUMN);
                this.state = 782;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 57, this.context) ) {
                case 1:
                    {
                    this.state = 780;
                    this.match(ClickHouseParser.IF);
                    this.state = 781;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 784;
                this.columnIdentifier();
                this.state = 785;
                this.match(ClickHouseParser.TO);
                this.state = 786;
                this.columnIdentifier();
                this.state = 788;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 787;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 790;
                this.match(ClickHouseParser.REPLACE);
                this.state = 791;
                this.partitionClause();
                this.state = 792;
                this.match(ClickHouseParser.FROM);
                this.state = 793;
                this.tableIdentifier();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 795;
                this.match(ClickHouseParser.UPDATE);
                this.state = 796;
                this.assignmentExpressionList();
                this.state = 797;
                this.whereClause();
                this.state = 799;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 798;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 801;
                this.match(ClickHouseParser.RESET);
                this.state = 802;
                this.match(ClickHouseParser.SETTING);
                this.state = 803;
                this.identifierList();
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 804;
                this.match(ClickHouseParser.FORGET);
                this.state = 805;
                this.match(ClickHouseParser.PARTITION);
                this.state = 806;
                this.partitionExpression();
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 807;
                _la = this.tokenStream.LA(1);
                if(!(_la === 23 || _la === 51 || _la === 104)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 808;
                this.match(ClickHouseParser.STATISTICS);
                this.state = 811;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 60, this.context) ) {
                case 1:
                    {
                    this.state = 809;
                    this.match(ClickHouseParser.IF);
                    this.state = 810;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 813;
                this.columnExpressionList();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 814;
                this.match(ClickHouseParser.FETCH);
                this.state = 815;
                this.partitionOrPartClause();
                this.state = 816;
                this.match(ClickHouseParser.FROM);
                this.state = 817;
                this.match(ClickHouseParser.STRING_LITERAL);
                this.state = 819;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 818;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 821;
                this.alterTableUpdateClause();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 822;
                this.alterTableDeleteClause();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableDeleteClause(): AlterTableDeleteClauseContext {
        let localContext = new AlterTableDeleteClauseContext(this.context, this.state);
        this.enterRule(localContext, 36, ClickHouseParser.RULE_alterTableDeleteClause);
        let _la: number;
        try {
            this.state = 838;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 65, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 825;
                this.match(ClickHouseParser.DELETE);
                this.state = 826;
                this.match(ClickHouseParser.WHERE);
                this.state = 827;
                this.columnExpression(0);
                this.state = 829;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 828;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 831;
                this.match(ClickHouseParser.DELETE);
                this.state = 834;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 832;
                    this.match(ClickHouseParser.IN);
                    this.state = 833;
                    this.partitionClause();
                    }
                }

                this.state = 836;
                this.match(ClickHouseParser.WHERE);
                this.state = 837;
                this.filterByNumberExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableMaterializeClause(): AlterTableMaterializeClauseContext {
        let localContext = new AlterTableMaterializeClauseContext(this.context, this.state);
        this.enterRule(localContext, 38, ClickHouseParser.RULE_alterTableMaterializeClause);
        let _la: number;
        try {
            this.state = 868;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 72, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 840;
                this.match(ClickHouseParser.MATERIALIZE);
                this.state = 841;
                this.match(ClickHouseParser.INDEX);
                this.state = 844;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 66, this.context) ) {
                case 1:
                    {
                    this.state = 842;
                    this.match(ClickHouseParser.IF);
                    this.state = 843;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 846;
                this.columnIdentifier();
                this.state = 849;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 847;
                    this.match(ClickHouseParser.IN);
                    this.state = 848;
                    this.partitionClause();
                    }
                }

                this.state = 852;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 851;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 854;
                this.match(ClickHouseParser.MATERIALIZE);
                this.state = 855;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 858;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 69, this.context) ) {
                case 1:
                    {
                    this.state = 856;
                    this.match(ClickHouseParser.IF);
                    this.state = 857;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 860;
                this.columnIdentifier();
                this.state = 863;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 861;
                    this.match(ClickHouseParser.IN);
                    this.state = 862;
                    this.partitionClause();
                    }
                }

                this.state = 866;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 865;
                    this.settingsClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableDropClause(): AlterTableDropClauseContext {
        let localContext = new AlterTableDropClauseContext(this.context, this.state);
        this.enterRule(localContext, 40, ClickHouseParser.RULE_alterTableDropClause);
        let _la: number;
        try {
            this.state = 912;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 81, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 870;
                this.match(ClickHouseParser.DROP);
                this.state = 871;
                this.match(ClickHouseParser.COLUMN);
                this.state = 874;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 73, this.context) ) {
                case 1:
                    {
                    this.state = 872;
                    this.match(ClickHouseParser.IF);
                    this.state = 873;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 876;
                this.columnIdentifier();
                this.state = 878;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 877;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 880;
                this.match(ClickHouseParser.DROP);
                this.state = 881;
                this.match(ClickHouseParser.INDEX);
                this.state = 884;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 75, this.context) ) {
                case 1:
                    {
                    this.state = 882;
                    this.match(ClickHouseParser.IF);
                    this.state = 883;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 886;
                this.columnIdentifier();
                this.state = 888;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 887;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 890;
                this.match(ClickHouseParser.DROP);
                this.state = 891;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 894;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 77, this.context) ) {
                case 1:
                    {
                    this.state = 892;
                    this.match(ClickHouseParser.IF);
                    this.state = 893;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 896;
                this.columnIdentifier();
                this.state = 898;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 897;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 900;
                this.match(ClickHouseParser.DROP);
                this.state = 901;
                this.partitionOrPartClause();
                this.state = 903;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 902;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 905;
                this.match(ClickHouseParser.DROP);
                this.state = 906;
                this.match(ClickHouseParser.DETACHED);
                this.state = 907;
                _la = this.tokenStream.LA(1);
                if(!(_la === 127 || _la === 218)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 908;
                _la = this.tokenStream.LA(1);
                if(!(_la === 4 || _la === 395)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 910;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 909;
                    this.settingsClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableClearClause(): AlterTableClearClauseContext {
        let localContext = new AlterTableClearClauseContext(this.context, this.state);
        this.enterRule(localContext, 42, ClickHouseParser.RULE_alterTableClearClause);
        let _la: number;
        try {
            this.state = 947;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 88, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 914;
                this.match(ClickHouseParser.CLEAR);
                this.state = 915;
                this.match(ClickHouseParser.COLUMN);
                this.state = 918;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 82, this.context) ) {
                case 1:
                    {
                    this.state = 916;
                    this.match(ClickHouseParser.IF);
                    this.state = 917;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 920;
                this.columnIdentifier();
                this.state = 923;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 921;
                    this.match(ClickHouseParser.IN);
                    this.state = 922;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 925;
                this.match(ClickHouseParser.CLEAR);
                this.state = 926;
                this.match(ClickHouseParser.INDEX);
                this.state = 929;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 84, this.context) ) {
                case 1:
                    {
                    this.state = 927;
                    this.match(ClickHouseParser.IF);
                    this.state = 928;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 931;
                this.columnIdentifier();
                this.state = 934;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 932;
                    this.match(ClickHouseParser.IN);
                    this.state = 933;
                    this.partitionClause();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 936;
                this.match(ClickHouseParser.CLEAR);
                this.state = 937;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 940;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 86, this.context) ) {
                case 1:
                    {
                    this.state = 938;
                    this.match(ClickHouseParser.IF);
                    this.state = 939;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 942;
                this.columnIdentifier();
                this.state = 945;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 81) {
                    {
                    this.state = 943;
                    this.match(ClickHouseParser.IN);
                    this.state = 944;
                    this.partitionClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableAddClause(): AlterTableAddClauseContext {
        let localContext = new AlterTableAddClauseContext(this.context, this.state);
        this.enterRule(localContext, 44, ClickHouseParser.RULE_alterTableAddClause);
        let _la: number;
        try {
            this.state = 1011;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 100, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 949;
                this.match(ClickHouseParser.ADD);
                this.state = 950;
                this.match(ClickHouseParser.COLUMN);
                this.state = 954;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 89, this.context) ) {
                case 1:
                    {
                    this.state = 951;
                    this.match(ClickHouseParser.IF);
                    this.state = 952;
                    this.match(ClickHouseParser.NOT);
                    this.state = 953;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 956;
                this.tableColumnDefinition();
                this.state = 959;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 957;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 958;
                    this.columnIdentifier();
                    }
                }

                this.state = 962;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 961;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 964;
                this.match(ClickHouseParser.ADD);
                this.state = 965;
                this.match(ClickHouseParser.INDEX);
                this.state = 969;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 92, this.context) ) {
                case 1:
                    {
                    this.state = 966;
                    this.match(ClickHouseParser.IF);
                    this.state = 967;
                    this.match(ClickHouseParser.NOT);
                    this.state = 968;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 971;
                this.tableIndexDefinition();
                this.state = 974;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 972;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 973;
                    this.columnIdentifier();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 976;
                this.match(ClickHouseParser.ADD);
                this.state = 977;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 981;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 94, this.context) ) {
                case 1:
                    {
                    this.state = 978;
                    this.match(ClickHouseParser.IF);
                    this.state = 979;
                    this.match(ClickHouseParser.NOT);
                    this.state = 980;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 983;
                this.tableProjectionDefinition();
                this.state = 986;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 2) {
                    {
                    this.state = 984;
                    this.match(ClickHouseParser.AFTER);
                    this.state = 985;
                    this.columnIdentifier();
                    }
                }

                this.state = 989;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 988;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 991;
                this.match(ClickHouseParser.ATTACH);
                this.state = 992;
                this.partitionClause();
                this.state = 995;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 69) {
                    {
                    this.state = 993;
                    this.match(ClickHouseParser.FROM);
                    this.state = 994;
                    this.tableIdentifier();
                    }
                }

                this.state = 998;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 997;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1000;
                this.match(ClickHouseParser.ADD);
                this.state = 1001;
                this.match(ClickHouseParser.STATISTICS);
                this.state = 1005;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 99, this.context) ) {
                case 1:
                    {
                    this.state = 1002;
                    this.match(ClickHouseParser.IF);
                    this.state = 1003;
                    this.match(ClickHouseParser.NOT);
                    this.state = 1004;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 1007;
                this.columnExpressionList();
                this.state = 1008;
                this.match(ClickHouseParser.TYPE);
                this.state = 1009;
                this.identifierList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableModifyClause(): AlterTableModifyClauseContext {
        let localContext = new AlterTableModifyClauseContext(this.context, this.state);
        this.enterRule(localContext, 46, ClickHouseParser.RULE_alterTableModifyClause);
        let _la: number;
        try {
            this.state = 1079;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 111, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1013;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1014;
                this.match(ClickHouseParser.COLUMN);
                this.state = 1017;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 101, this.context) ) {
                case 1:
                    {
                    this.state = 1015;
                    this.match(ClickHouseParser.IF);
                    this.state = 1016;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 1019;
                this.columnIdentifier();
                this.state = 1020;
                this.codecExpression();
                this.state = 1022;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1021;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1024;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1025;
                this.match(ClickHouseParser.COLUMN);
                this.state = 1028;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 103, this.context) ) {
                case 1:
                    {
                    this.state = 1026;
                    this.match(ClickHouseParser.IF);
                    this.state = 1027;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 1030;
                this.columnIdentifier();
                this.state = 1031;
                this.match(ClickHouseParser.COMMENT);
                this.state = 1032;
                this.match(ClickHouseParser.STRING_LITERAL);
                this.state = 1034;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1033;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1036;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1037;
                this.match(ClickHouseParser.COLUMN);
                this.state = 1040;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 105, this.context) ) {
                case 1:
                    {
                    this.state = 1038;
                    this.match(ClickHouseParser.IF);
                    this.state = 1039;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 1042;
                this.columnIdentifier();
                this.state = 1043;
                this.match(ClickHouseParser.REMOVE);
                this.state = 1044;
                this.tableColumnPropertyType();
                this.state = 1046;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1045;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1048;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1049;
                this.match(ClickHouseParser.COLUMN);
                this.state = 1052;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 107, this.context) ) {
                case 1:
                    {
                    this.state = 1050;
                    this.match(ClickHouseParser.IF);
                    this.state = 1051;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 1054;
                this.tableColumnDefinition();
                this.state = 1056;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1055;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1058;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1059;
                this.match(ClickHouseParser.STATISTICS);
                this.state = 1060;
                this.columnExpressionList();
                this.state = 1061;
                this.match(ClickHouseParser.TYPE);
                this.state = 1062;
                this.identifierList();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1064;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1065;
                this.match(ClickHouseParser.SETTING);
                this.state = 1066;
                this.settingExpressionList();
                this.state = 1068;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1067;
                    this.settingsClause();
                    }
                }

                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1070;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1071;
                this.match(ClickHouseParser.ORDER);
                this.state = 1072;
                this.match(ClickHouseParser.BY);
                this.state = 1073;
                this.columnExpression(0);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1074;
                this.match(ClickHouseParser.MODIFY);
                this.state = 1075;
                this.ttlClause();
                this.state = 1077;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 1076;
                    this.settingsClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterTableUpdateClause(): AlterTableUpdateClauseContext {
        let localContext = new AlterTableUpdateClauseContext(this.context, this.state);
        this.enterRule(localContext, 48, ClickHouseParser.RULE_alterTableUpdateClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1081;
            this.match(ClickHouseParser.UPDATE);
            this.state = 1082;
            this.columnEqualExpression();
            this.state = 1087;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 1083;
                this.match(ClickHouseParser.COMMA);
                this.state = 1084;
                this.columnEqualExpression();
                }
                }
                this.state = 1089;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1092;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 1090;
                this.match(ClickHouseParser.IN);
                this.state = 1091;
                this.partitionClause();
                }
            }

            this.state = 1094;
            this.match(ClickHouseParser.WHERE);
            this.state = 1095;
            this.filterByNumberExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public filterByNumberExpression(): FilterByNumberExpressionContext {
        let localContext = new FilterByNumberExpressionContext(this.context, this.state);
        this.enterRule(localContext, 50, ClickHouseParser.RULE_filterByNumberExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1097;
            this.identifierEqualNumber();
            {
            this.state = 1098;
            this.match(ClickHouseParser.COMMA);
            this.state = 1099;
            this.identifierEqualNumber();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierEqualNumber(): IdentifierEqualNumberContext {
        let localContext = new IdentifierEqualNumberContext(this.context, this.state);
        this.enterRule(localContext, 52, ClickHouseParser.RULE_identifierEqualNumber);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1101;
            this.identifier();
            this.state = 1102;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 1103;
            this.numberLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnEqualExpression(): ColumnEqualExpressionContext {
        let localContext = new ColumnEqualExpressionContext(this.context, this.state);
        this.enterRule(localContext, 54, ClickHouseParser.RULE_columnEqualExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1105;
            this.columnExpression(0);
            this.state = 1106;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 1107;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentExpressionList(): AssignmentExpressionListContext {
        let localContext = new AssignmentExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 56, ClickHouseParser.RULE_assignmentExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1109;
            this.assignmentExpression();
            this.state = 1114;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 1110;
                this.match(ClickHouseParser.COMMA);
                this.state = 1111;
                this.assignmentExpression();
                }
                }
                this.state = 1116;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public assignmentExpression(): AssignmentExpressionContext {
        let localContext = new AssignmentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 58, ClickHouseParser.RULE_assignmentExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1117;
            this.columnIdentifier();
            this.state = 1118;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 1119;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnPropertyType(): TableColumnPropertyTypeContext {
        let localContext = new TableColumnPropertyTypeContext(this.context, this.state);
        this.enterRule(localContext, 60, ClickHouseParser.RULE_tableColumnPropertyType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1121;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 301989896) !== 0) || _la === 39 || _la === 105 || _la === 178)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionExpression(): PartitionExpressionContext {
        let localContext = new PartitionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 62, ClickHouseParser.RULE_partitionExpression);
        try {
            this.state = 1128;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 115, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1123;
                this.functionExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1124;
                this.literal();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1125;
                this.match(ClickHouseParser.ID);
                this.state = 1126;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1127;
                this.match(ClickHouseParser.ALL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionClause(): PartitionClauseContext {
        let localContext = new PartitionClauseContext(this.context, this.state);
        this.enterRule(localContext, 64, ClickHouseParser.RULE_partitionClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1130;
            this.match(ClickHouseParser.PARTITION);
            this.state = 1131;
            this.partitionExpression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionOrPartClause(): PartitionOrPartClauseContext {
        let localContext = new PartitionOrPartClauseContext(this.context, this.state);
        this.enterRule(localContext, 66, ClickHouseParser.RULE_partitionOrPartClause);
        try {
            this.state = 1136;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.PARTITION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1133;
                this.partitionClause();
                }
                break;
            case ClickHouseParser.PART:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1134;
                this.match(ClickHouseParser.PART);
                this.state = 1135;
                this.partitionExpression();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public attachStatement(): AttachStatementContext {
        let localContext = new AttachStatementContext(this.context, this.state);
        this.enterRule(localContext, 68, ClickHouseParser.RULE_attachStatement);
        let _la: number;
        try {
            localContext = new AttachDictionaryStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1138;
            this.match(ClickHouseParser.ATTACH);
            this.state = 1139;
            this.match(ClickHouseParser.DICTIONARY);
            this.state = 1140;
            this.tableIdentifier();
            this.state = 1142;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1141;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public checkStatement(): CheckStatementContext {
        let localContext = new CheckStatementContext(this.context, this.state);
        this.enterRule(localContext, 70, ClickHouseParser.RULE_checkStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1144;
            this.match(ClickHouseParser.CHECK);
            this.state = 1145;
            this.match(ClickHouseParser.TABLE);
            this.state = 1146;
            this.tableIdentifier();
            this.state = 1148;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127) {
                {
                this.state = 1147;
                this.partitionClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public deleteStatement(): DeleteStatementContext {
        let localContext = new DeleteStatementContext(this.context, this.state);
        this.enterRule(localContext, 72, ClickHouseParser.RULE_deleteStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1150;
            this.match(ClickHouseParser.DELETE);
            this.state = 1151;
            this.match(ClickHouseParser.FROM);
            this.state = 1152;
            this.tableIdentifier();
            this.state = 1154;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1153;
                this.clusterClause();
                }
            }

            this.state = 1157;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 192) {
                {
                this.state = 1156;
                this.whereClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createTableStatement(): CreateTableStatementContext {
        let localContext = new CreateTableStatementContext(this.context, this.state);
        this.enterRule(localContext, 74, ClickHouseParser.RULE_createTableStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1166;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ATTACH:
                {
                this.state = 1159;
                this.match(ClickHouseParser.ATTACH);
                }
                break;
            case ClickHouseParser.CREATE:
                {
                this.state = 1160;
                this.match(ClickHouseParser.CREATE);
                this.state = 1163;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 1161;
                    this.match(ClickHouseParser.OR);
                    this.state = 1162;
                    this.match(ClickHouseParser.REPLACE);
                    }
                }

                }
                break;
            case ClickHouseParser.REPLACE:
                {
                this.state = 1165;
                this.match(ClickHouseParser.REPLACE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1169;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 165) {
                {
                this.state = 1168;
                this.match(ClickHouseParser.TEMPORARY);
                }
            }

            this.state = 1171;
            this.match(ClickHouseParser.TABLE);
            this.state = 1175;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 124, this.context) ) {
            case 1:
                {
                this.state = 1172;
                this.match(ClickHouseParser.IF);
                this.state = 1173;
                this.match(ClickHouseParser.NOT);
                this.state = 1174;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 1177;
            this.tableIdentifier();
            this.state = 1179;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 185) {
                {
                this.state = 1178;
                this.uuidClause();
                }
            }

            this.state = 1182;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1181;
                this.clusterClause();
                }
            }

            this.state = 1185;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 127, this.context) ) {
            case 1:
                {
                this.state = 1184;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 1188;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 1187;
                this.engineClause();
                }
            }

            this.state = 1191;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 1190;
                this.subqueryClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext {
        let localContext = new CreateDatabaseStatementContext(this.context, this.state);
        this.enterRule(localContext, 76, ClickHouseParser.RULE_createDatabaseStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1193;
            _la = this.tokenStream.LA(1);
            if(!(_la === 16 || _la === 30)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1194;
            this.match(ClickHouseParser.DATABASE);
            this.state = 1198;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 130, this.context) ) {
            case 1:
                {
                this.state = 1195;
                this.match(ClickHouseParser.IF);
                this.state = 1196;
                this.match(ClickHouseParser.NOT);
                this.state = 1197;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 1200;
            this.identifier();
            this.state = 1202;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1201;
                this.clusterClause();
                }
            }

            this.state = 1205;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 54) {
                {
                this.state = 1204;
                this.engineExpression();
                }
            }

            this.state = 1209;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 28) {
                {
                this.state = 1207;
                this.match(ClickHouseParser.COMMENT);
                this.state = 1208;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createDictionaryStatement(): CreateDictionaryStatementContext {
        let localContext = new CreateDictionaryStatementContext(this.context, this.state);
        this.enterRule(localContext, 78, ClickHouseParser.RULE_createDictionaryStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1218;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ATTACH:
                {
                this.state = 1211;
                this.match(ClickHouseParser.ATTACH);
                }
                break;
            case ClickHouseParser.CREATE:
                {
                this.state = 1212;
                this.match(ClickHouseParser.CREATE);
                this.state = 1215;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 122) {
                    {
                    this.state = 1213;
                    this.match(ClickHouseParser.OR);
                    this.state = 1214;
                    this.match(ClickHouseParser.REPLACE);
                    }
                }

                }
                break;
            case ClickHouseParser.REPLACE:
                {
                this.state = 1217;
                this.match(ClickHouseParser.REPLACE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1220;
            this.match(ClickHouseParser.DICTIONARY);
            this.state = 1224;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 136, this.context) ) {
            case 1:
                {
                this.state = 1221;
                this.match(ClickHouseParser.IF);
                this.state = 1222;
                this.match(ClickHouseParser.NOT);
                this.state = 1223;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 1226;
            this.tableIdentifier();
            this.state = 1228;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 185) {
                {
                this.state = 1227;
                this.uuidClause();
                }
            }

            this.state = 1231;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1230;
                this.clusterClause();
                }
            }

            this.state = 1233;
            this.dictionarySchemaClause();
            this.state = 1234;
            this.dictionaryEngineClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createLiveViewStatement(): CreateLiveViewStatementContext {
        let localContext = new CreateLiveViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 80, ClickHouseParser.RULE_createLiveViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1236;
            _la = this.tokenStream.LA(1);
            if(!(_la === 16 || _la === 30)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1237;
            this.match(ClickHouseParser.LIVE);
            this.state = 1238;
            this.match(ClickHouseParser.VIEW);
            this.state = 1242;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 139, this.context) ) {
            case 1:
                {
                this.state = 1239;
                this.match(ClickHouseParser.IF);
                this.state = 1240;
                this.match(ClickHouseParser.NOT);
                this.state = 1241;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 1244;
            this.tableIdentifier();
            this.state = 1246;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 185) {
                {
                this.state = 1245;
                this.uuidClause();
                }
            }

            this.state = 1249;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1248;
                this.clusterClause();
                }
            }

            this.state = 1256;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 194) {
                {
                this.state = 1251;
                this.match(ClickHouseParser.WITH);
                this.state = 1252;
                this.match(ClickHouseParser.TIMEOUT);
                this.state = 1254;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 393) {
                    {
                    this.state = 1253;
                    this.match(ClickHouseParser.DECIMAL_LITERAL);
                    }
                }

                }
            }

            this.state = 1259;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 171) {
                {
                this.state = 1258;
                this.destinationClause();
                }
            }

            this.state = 1262;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 145, this.context) ) {
            case 1:
                {
                this.state = 1261;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 1264;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext {
        let localContext = new CreateMaterializedViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 82, ClickHouseParser.RULE_createMaterializedViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1266;
            _la = this.tokenStream.LA(1);
            if(!(_la === 16 || _la === 30)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1267;
            this.match(ClickHouseParser.MATERIALIZED);
            this.state = 1268;
            this.match(ClickHouseParser.VIEW);
            this.state = 1272;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 146, this.context) ) {
            case 1:
                {
                this.state = 1269;
                this.match(ClickHouseParser.IF);
                this.state = 1270;
                this.match(ClickHouseParser.NOT);
                this.state = 1271;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 1274;
            this.tableIdentifier();
            this.state = 1276;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 185) {
                {
                this.state = 1275;
                this.uuidClause();
                }
            }

            this.state = 1279;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1278;
                this.clusterClause();
                }
            }

            this.state = 1282;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10 || _la === 412) {
                {
                this.state = 1281;
                this.tableSchemaClause();
                }
            }

            this.state = 1289;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.TO:
                {
                this.state = 1284;
                this.destinationClause();
                }
                break;
            case ClickHouseParser.ENGINE:
                {
                this.state = 1285;
                this.engineClause();
                this.state = 1287;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 130) {
                    {
                    this.state = 1286;
                    this.match(ClickHouseParser.POPULATE);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1291;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createViewStatement(): CreateViewStatementContext {
        let localContext = new CreateViewStatementContext(this.context, this.state);
        this.enterRule(localContext, 84, ClickHouseParser.RULE_createViewStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1293;
            _la = this.tokenStream.LA(1);
            if(!(_la === 16 || _la === 30)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1296;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 122) {
                {
                this.state = 1294;
                this.match(ClickHouseParser.OR);
                this.state = 1295;
                this.match(ClickHouseParser.REPLACE);
                }
            }

            this.state = 1298;
            this.match(ClickHouseParser.VIEW);
            this.state = 1302;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 153, this.context) ) {
            case 1:
                {
                this.state = 1299;
                this.match(ClickHouseParser.IF);
                this.state = 1300;
                this.match(ClickHouseParser.NOT);
                this.state = 1301;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 1304;
            this.tableIdentifier();
            this.state = 1306;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 185) {
                {
                this.state = 1305;
                this.uuidClause();
                }
            }

            this.state = 1309;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1308;
                this.clusterClause();
                }
            }

            this.state = 1312;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 156, this.context) ) {
            case 1:
                {
                this.state = 1311;
                this.tableSchemaClause();
                }
                break;
            }
            this.state = 1314;
            this.subqueryClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringIdentificationType(): StringIdentificationTypeContext {
        let localContext = new StringIdentificationTypeContext(this.context, this.state);
        this.enterRule(localContext, 86, ClickHouseParser.RULE_stringIdentificationType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1316;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & 196639) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyTypeClause(): KeyTypeClauseContext {
        let localContext = new KeyTypeClauseContext(this.context, this.state);
        this.enterRule(localContext, 88, ClickHouseParser.RULE_keyTypeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1318;
            this.match(ClickHouseParser.KEY);
            this.state = 1319;
            this.match(ClickHouseParser.STRING_LITERAL);
            this.state = 1320;
            this.match(ClickHouseParser.TYPE);
            this.state = 1321;
            this.match(ClickHouseParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public otherIdentificationType(): OtherIdentificationTypeContext {
        let localContext = new OtherIdentificationTypeContext(this.context, this.state);
        this.enterRule(localContext, 90, ClickHouseParser.RULE_otherIdentificationType);
        let _la: number;
        try {
            this.state = 1350;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.NO_PASSWORD:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1323;
                this.match(ClickHouseParser.NO_PASSWORD);
                }
                break;
            case ClickHouseParser.LDAP:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1324;
                this.match(ClickHouseParser.LDAP);
                this.state = 1325;
                this.match(ClickHouseParser.SERVER);
                this.state = 1326;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.KERBEROS:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1327;
                this.match(ClickHouseParser.KERBEROS);
                {
                this.state = 1328;
                this.match(ClickHouseParser.REALM);
                this.state = 1329;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                }
                break;
            case ClickHouseParser.SSL_CERTIFICATE:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1330;
                this.match(ClickHouseParser.SSL_CERTIFICATE);
                this.state = 1331;
                _la = this.tokenStream.LA(1);
                if(!(_la === 283 || _la === 284)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1332;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.SSH_KEY:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1333;
                this.match(ClickHouseParser.SSH_KEY);
                this.state = 1334;
                this.match(ClickHouseParser.BY);
                this.state = 1335;
                this.keyTypeClause();
                this.state = 1340;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 401) {
                    {
                    {
                    this.state = 1336;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1337;
                    this.keyTypeClause();
                    }
                    }
                    this.state = 1342;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case ClickHouseParser.HTTP:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1343;
                this.match(ClickHouseParser.HTTP);
                this.state = 1344;
                this.match(ClickHouseParser.SERVER);
                this.state = 1345;
                this.match(ClickHouseParser.STRING_LITERAL);
                this.state = 1348;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 287) {
                    {
                    this.state = 1346;
                    this.match(ClickHouseParser.SCHEME);
                    this.state = 1347;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userIdentificationClause(): UserIdentificationClauseContext {
        let localContext = new UserIdentificationClauseContext(this.context, this.state);
        this.enterRule(localContext, 92, ClickHouseParser.RULE_userIdentificationClause);
        let _la: number;
        try {
            this.state = 1364;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 161, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1352;
                this.match(ClickHouseParser.NOT);
                this.state = 1353;
                this.match(ClickHouseParser.IDENTIFIED);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1354;
                this.match(ClickHouseParser.IDENTIFIED);
                this.state = 1357;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 1355;
                    this.match(ClickHouseParser.WITH);
                    this.state = 1356;
                    this.stringIdentificationType();
                    }
                }

                this.state = 1359;
                this.match(ClickHouseParser.BY);
                this.state = 1360;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1361;
                this.match(ClickHouseParser.IDENTIFIED);
                this.state = 1362;
                this.match(ClickHouseParser.WITH);
                this.state = 1363;
                this.otherIdentificationType();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public validUntilClause(): ValidUntilClauseContext {
        let localContext = new ValidUntilClauseContext(this.context, this.state);
        this.enterRule(localContext, 94, ClickHouseParser.RULE_validUntilClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1366;
            this.match(ClickHouseParser.VALID);
            this.state = 1367;
            this.match(ClickHouseParser.UNTIL);
            this.state = 1368;
            this.match(ClickHouseParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantsProvider(): GrantsProviderContext {
        let localContext = new GrantsProviderContext(this.context, this.state);
        this.enterRule(localContext, 96, ClickHouseParser.RULE_grantsProvider);
        try {
            this.state = 1374;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 162, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1370;
                this.userIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1371;
                this.roleIdentifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1372;
                this.match(ClickHouseParser.ANY);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1373;
                this.match(ClickHouseParser.NONE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public granteesClause(): GranteesClauseContext {
        let localContext = new GranteesClauseContext(this.context, this.state);
        this.enterRule(localContext, 98, ClickHouseParser.RULE_granteesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1376;
            this.match(ClickHouseParser.GRANTEES);
            this.state = 1377;
            this.grantsProvider();
            this.state = 1382;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 1378;
                this.match(ClickHouseParser.COMMA);
                this.state = 1379;
                this.grantsProvider();
                }
                }
                this.state = 1384;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1387;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 269) {
                {
                this.state = 1385;
                this.match(ClickHouseParser.EXCEPT);
                this.state = 1386;
                this.userOrRoleExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hostType(): HostTypeContext {
        let localContext = new HostTypeContext(this.context, this.state);
        this.enterRule(localContext, 100, ClickHouseParser.RULE_hostType);
        let _la: number;
        try {
            this.state = 1394;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1389;
                this.match(ClickHouseParser.LOCAL);
                }
                break;
            case ClickHouseParser.ANY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1390;
                this.match(ClickHouseParser.ANY);
                }
                break;
            case ClickHouseParser.NONE:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1391;
                this.match(ClickHouseParser.NONE);
                }
                break;
            case ClickHouseParser.LIKE:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1392;
                _la = this.tokenStream.LA(1);
                if(!(_la === 99 || ((((_la - 293)) & ~0x1F) === 0 && ((1 << (_la - 293)) & 7) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1393;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public hostClause(): HostClauseContext {
        let localContext = new HostClauseContext(this.context, this.state);
        this.enterRule(localContext, 102, ClickHouseParser.RULE_hostClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1396;
            this.match(ClickHouseParser.HOST);
            this.state = 1397;
            this.hostType();
            this.state = 1402;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 1398;
                this.match(ClickHouseParser.COMMA);
                this.state = 1399;
                this.hostType();
                }
                }
                this.state = 1404;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extendedSettingExpression(): ExtendedSettingExpressionContext {
        let localContext = new ExtendedSettingExpressionContext(this.context, this.state);
        this.enterRule(localContext, 104, ClickHouseParser.RULE_extendedSettingExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1405;
            this.identifier();
            this.state = 1406;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 1407;
            this.literal();
            this.state = 1413;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 108) {
                {
                this.state = 1408;
                this.match(ClickHouseParser.MIN);
                this.state = 1410;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 406) {
                    {
                    this.state = 1409;
                    this.match(ClickHouseParser.EQ_SINGLE);
                    }
                }

                this.state = 1412;
                this.literal();
                }
            }

            this.state = 1420;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 106) {
                {
                this.state = 1415;
                this.match(ClickHouseParser.MAX);
                this.state = 1417;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 406) {
                    {
                    this.state = 1416;
                    this.match(ClickHouseParser.EQ_SINGLE);
                    }
                }

                this.state = 1419;
                this.literal();
                }
            }

            this.state = 1423;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 297 || _la === 298 || _la === 379 || _la === 380) {
                {
                this.state = 1422;
                _la = this.tokenStream.LA(1);
                if(!(_la === 297 || _la === 298 || _la === 379 || _la === 380)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extendedSettingExpressionWithProfileClause(): ExtendedSettingExpressionWithProfileClauseContext {
        let localContext = new ExtendedSettingExpressionWithProfileClauseContext(this.context, this.state);
        this.enterRule(localContext, 106, ClickHouseParser.RULE_extendedSettingExpressionWithProfileClause);
        try {
            this.state = 1428;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 172, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1425;
                this.extendedSettingExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1426;
                this.match(ClickHouseParser.PROFILE);
                this.state = 1427;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extendedSettingsWithProfileClause(): ExtendedSettingsWithProfileClauseContext {
        let localContext = new ExtendedSettingsWithProfileClauseContext(this.context, this.state);
        this.enterRule(localContext, 108, ClickHouseParser.RULE_extendedSettingsWithProfileClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1430;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 1431;
            this.extendedSettingExpressionWithProfileClause();
            this.state = 1436;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 1432;
                this.match(ClickHouseParser.COMMA);
                this.state = 1433;
                this.extendedSettingExpressionWithProfileClause();
                }
                }
                this.state = 1438;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public inClause(): InClauseContext {
        let localContext = new InClauseContext(this.context, this.state);
        this.enterRule(localContext, 110, ClickHouseParser.RULE_inClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1439;
            this.match(ClickHouseParser.IN);
            this.state = 1442;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASC:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.KEYED:
            case ClickHouseParser.RANDOMIZED:
            case ClickHouseParser.USER_NAME:
            case ClickHouseParser.IP_ADDRESS:
            case ClickHouseParser.FORWARDED_IP_ADDRESS:
            case ClickHouseParser.CLIENT_KEY:
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
            case ClickHouseParser.QUERIES:
            case ClickHouseParser.QUERY_SELECTS:
            case ClickHouseParser.QUERY_INSERTS:
            case ClickHouseParser.ERRORS:
            case ClickHouseParser.RESULT_ROWS:
            case ClickHouseParser.RESULT_BYTES:
            case ClickHouseParser.READ_ROWS:
            case ClickHouseParser.READ_BYTES:
            case ClickHouseParser.EXECUTION_TIME:
            case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
            case ClickHouseParser.LIMITS:
            case ClickHouseParser.TRACKING:
            case ClickHouseParser.ONLY:
            case ClickHouseParser.CONST:
            case ClickHouseParser.CHANGEABLE_IN_READONLY:
            case ClickHouseParser.OVERRIDABLE:
            case ClickHouseParser.INHERIT:
            case ClickHouseParser.RESET:
            case ClickHouseParser.DETACHED:
            case ClickHouseParser.FORGET:
            case ClickHouseParser.STATISTICS:
            case ClickHouseParser.UNFREEZE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 1440;
                this.identifier();
                }
                break;
            case ClickHouseParser.STRING_LITERAL:
                {
                this.state = 1441;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public defaultRoleClause(): DefaultRoleClauseContext {
        let localContext = new DefaultRoleClauseContext(this.context, this.state);
        this.enterRule(localContext, 112, ClickHouseParser.RULE_defaultRoleClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1444;
            this.match(ClickHouseParser.DEFAULT);
            this.state = 1445;
            this.match(ClickHouseParser.ROLE);
            this.state = 1446;
            this.roleExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createUserStatement(): CreateUserStatementContext {
        let localContext = new CreateUserStatementContext(this.context, this.state);
        this.enterRule(localContext, 114, ClickHouseParser.RULE_createUserStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1448;
            this.match(ClickHouseParser.CREATE);
            this.state = 1449;
            this.match(ClickHouseParser.USER);
            this.state = 1451;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 175, this.context) ) {
            case 1:
                {
                this.state = 1450;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1453;
            this.identifierList();
            this.state = 1455;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1454;
                this.clusterClause();
                }
            }

            this.state = 1458;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 116 || _la === 271) {
                {
                this.state = 1457;
                this.userIdentificationClause();
                }
            }

            this.state = 1461;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 296) {
                {
                this.state = 1460;
                this.hostClause();
                }
            }

            this.state = 1464;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 290) {
                {
                this.state = 1463;
                this.validUntilClause();
                }
            }

            this.state = 1467;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 1466;
                this.inClause();
                }
            }

            this.state = 1470;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 181, this.context) ) {
            case 1:
                {
                this.state = 1469;
                this.defaultRoleClause();
                }
                break;
            }
            this.state = 1478;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 39) {
                {
                this.state = 1472;
                this.match(ClickHouseParser.DEFAULT);
                this.state = 1473;
                this.match(ClickHouseParser.DATABASE);
                this.state = 1476;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 182, this.context) ) {
                case 1:
                    {
                    this.state = 1474;
                    this.databaseIdentifier();
                    }
                    break;
                case 2:
                    {
                    this.state = 1475;
                    this.match(ClickHouseParser.NONE);
                    }
                    break;
                }
                }
            }

            this.state = 1481;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 292) {
                {
                this.state = 1480;
                this.granteesClause();
                }
            }

            this.state = 1484;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 1483;
                this.extendedSettingsWithProfileClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext {
        let localContext = new ReplaceOrIfNotExistsClauseContext(this.context, this.state);
        this.enterRule(localContext, 116, ClickHouseParser.RULE_replaceOrIfNotExistsClause);
        try {
            this.state = 1491;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.OR:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1486;
                this.match(ClickHouseParser.OR);
                this.state = 1487;
                this.match(ClickHouseParser.REPLACE);
                }
                break;
            case ClickHouseParser.IF:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1488;
                this.match(ClickHouseParser.IF);
                this.state = 1489;
                this.match(ClickHouseParser.NOT);
                this.state = 1490;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIdentifierOrAnyTable(): TableIdentifierOrAnyTableContext {
        let localContext = new TableIdentifierOrAnyTableContext(this.context, this.state);
        this.enterRule(localContext, 118, ClickHouseParser.RULE_tableIdentifierOrAnyTable);
        try {
            this.state = 1498;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 187, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1493;
                this.tableIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1494;
                this.identifier();
                this.state = 1495;
                this.match(ClickHouseParser.DOT);
                this.state = 1496;
                this.match(ClickHouseParser.ASTERISK);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createPolicyExpression(): CreatePolicyExpressionContext {
        let localContext = new CreatePolicyExpressionContext(this.context, this.state);
        this.enterRule(localContext, 120, ClickHouseParser.RULE_createPolicyExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1500;
            this.identifier();
            this.state = 1502;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 188, this.context) ) {
            case 1:
                {
                this.state = 1501;
                this.clusterClause();
                }
                break;
            }
            this.state = 1504;
            this.match(ClickHouseParser.ON);
            this.state = 1505;
            this.tableIdentifierOrAnyTable();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierOrLiteralOrFunction(): IdentifierOrLiteralOrFunctionContext {
        let localContext = new IdentifierOrLiteralOrFunctionContext(this.context, this.state);
        this.enterRule(localContext, 122, ClickHouseParser.RULE_identifierOrLiteralOrFunction);
        try {
            this.state = 1510;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 189, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1507;
                this.identifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1508;
                this.literal();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1509;
                this.functionExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public functionExpression(): FunctionExpressionContext {
        let localContext = new FunctionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 124, ClickHouseParser.RULE_functionExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1512;
            this.identifier();
            this.state = 1513;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1527;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 193, this.context) ) {
            case 1:
                {
                this.state = 1516;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 190, this.context) ) {
                case 1:
                    {
                    this.state = 1514;
                    this.literal();
                    }
                    break;
                case 2:
                    {
                    this.state = 1515;
                    this.identifier();
                    }
                    break;
                }
                this.state = 1523;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4292607999) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 131199) !== 0)) {
                    {
                    this.state = 1521;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case ClickHouseParser.COMMA:
                        {
                        this.state = 1518;
                        this.match(ClickHouseParser.COMMA);
                        this.state = 1519;
                        this.literal();
                        }
                        break;
                    case ClickHouseParser.ADD:
                    case ClickHouseParser.AFTER:
                    case ClickHouseParser.ALIAS:
                    case ClickHouseParser.ALL:
                    case ClickHouseParser.ALTER:
                    case ClickHouseParser.AND:
                    case ClickHouseParser.ANTI:
                    case ClickHouseParser.ANY:
                    case ClickHouseParser.ARRAY:
                    case ClickHouseParser.AS:
                    case ClickHouseParser.ASC:
                    case ClickHouseParser.ASCENDING:
                    case ClickHouseParser.ASOF:
                    case ClickHouseParser.AST:
                    case ClickHouseParser.ASYNC:
                    case ClickHouseParser.ATTACH:
                    case ClickHouseParser.BETWEEN:
                    case ClickHouseParser.BOTH:
                    case ClickHouseParser.BY:
                    case ClickHouseParser.CASE:
                    case ClickHouseParser.CAST:
                    case ClickHouseParser.CHECK:
                    case ClickHouseParser.CLEAR:
                    case ClickHouseParser.CLUSTER:
                    case ClickHouseParser.CODEC:
                    case ClickHouseParser.COLLATE:
                    case ClickHouseParser.COLUMN:
                    case ClickHouseParser.COMMENT:
                    case ClickHouseParser.CONSTRAINT:
                    case ClickHouseParser.CREATE:
                    case ClickHouseParser.CROSS:
                    case ClickHouseParser.CUBE:
                    case ClickHouseParser.CURRENT:
                    case ClickHouseParser.DATABASE:
                    case ClickHouseParser.DATABASES:
                    case ClickHouseParser.DATE:
                    case ClickHouseParser.DAY:
                    case ClickHouseParser.DEDUPLICATE:
                    case ClickHouseParser.DEFAULT:
                    case ClickHouseParser.DELAY:
                    case ClickHouseParser.DELETE:
                    case ClickHouseParser.DESC:
                    case ClickHouseParser.DESCENDING:
                    case ClickHouseParser.DESCRIBE:
                    case ClickHouseParser.DETACH:
                    case ClickHouseParser.DICTIONARIES:
                    case ClickHouseParser.DICTIONARY:
                    case ClickHouseParser.DISK:
                    case ClickHouseParser.DISTINCT:
                    case ClickHouseParser.DISTRIBUTED:
                    case ClickHouseParser.DROP:
                    case ClickHouseParser.ELSE:
                    case ClickHouseParser.END:
                    case ClickHouseParser.ENGINE:
                    case ClickHouseParser.ESTIMATE:
                    case ClickHouseParser.EVENTS:
                    case ClickHouseParser.EXISTS:
                    case ClickHouseParser.EXPLAIN:
                    case ClickHouseParser.EXPRESSION:
                    case ClickHouseParser.EXTRACT:
                    case ClickHouseParser.FETCHES:
                    case ClickHouseParser.FINAL:
                    case ClickHouseParser.FIRST:
                    case ClickHouseParser.FLUSH:
                    case ClickHouseParser.FOLLOWING:
                    case ClickHouseParser.FOR:
                    case ClickHouseParser.FORMAT:
                    case ClickHouseParser.FREEZE:
                    case ClickHouseParser.FROM:
                    case ClickHouseParser.FULL:
                    case ClickHouseParser.FUNCTION:
                    case ClickHouseParser.GLOBAL:
                    case ClickHouseParser.GRANULARITY:
                    case ClickHouseParser.GROUP:
                    case ClickHouseParser.HAVING:
                    case ClickHouseParser.HIERARCHICAL:
                    case ClickHouseParser.HOUR:
                    case ClickHouseParser.ID:
                    case ClickHouseParser.IF:
                    case ClickHouseParser.ILIKE:
                    case ClickHouseParser.IN:
                    case ClickHouseParser.INDEX:
                    case ClickHouseParser.INF:
                    case ClickHouseParser.INJECTIVE:
                    case ClickHouseParser.INNER:
                    case ClickHouseParser.INSERT:
                    case ClickHouseParser.INTERVAL:
                    case ClickHouseParser.INTO:
                    case ClickHouseParser.IS:
                    case ClickHouseParser.IS_OBJECT_ID:
                    case ClickHouseParser.JOIN:
                    case ClickHouseParser.KEY:
                    case ClickHouseParser.KILL:
                    case ClickHouseParser.LAST:
                    case ClickHouseParser.LAYOUT:
                    case ClickHouseParser.LEADING:
                    case ClickHouseParser.LEFT:
                    case ClickHouseParser.LIFETIME:
                    case ClickHouseParser.LIKE:
                    case ClickHouseParser.LIMIT:
                    case ClickHouseParser.LIVE:
                    case ClickHouseParser.LOCAL:
                    case ClickHouseParser.LOGS:
                    case ClickHouseParser.MATERIALIZE:
                    case ClickHouseParser.MATERIALIZED:
                    case ClickHouseParser.MAX:
                    case ClickHouseParser.MERGES:
                    case ClickHouseParser.MIN:
                    case ClickHouseParser.MINUTE:
                    case ClickHouseParser.MODIFY:
                    case ClickHouseParser.MONTH:
                    case ClickHouseParser.MOVE:
                    case ClickHouseParser.MUTATION:
                    case ClickHouseParser.NO:
                    case ClickHouseParser.NOT:
                    case ClickHouseParser.NULLS:
                    case ClickHouseParser.OFFSET:
                    case ClickHouseParser.ON:
                    case ClickHouseParser.OPTIMIZE:
                    case ClickHouseParser.OR:
                    case ClickHouseParser.ORDER:
                    case ClickHouseParser.OUTER:
                    case ClickHouseParser.OUTFILE:
                    case ClickHouseParser.OVER:
                    case ClickHouseParser.PARTITION:
                    case ClickHouseParser.PIPELINE:
                    case ClickHouseParser.PLAN:
                    case ClickHouseParser.POPULATE:
                    case ClickHouseParser.PRECEDING:
                    case ClickHouseParser.PREWHERE:
                    case ClickHouseParser.PRIMARY:
                    case ClickHouseParser.PROJECTION:
                    case ClickHouseParser.QUARTER:
                    case ClickHouseParser.QUERY:
                    case ClickHouseParser.RANGE:
                    case ClickHouseParser.RELOAD:
                    case ClickHouseParser.REMOVE:
                    case ClickHouseParser.RENAME:
                    case ClickHouseParser.REPLACE:
                    case ClickHouseParser.REPLICA:
                    case ClickHouseParser.REPLICATED:
                    case ClickHouseParser.RIGHT:
                    case ClickHouseParser.ROLLUP:
                    case ClickHouseParser.ROW:
                    case ClickHouseParser.ROWS:
                    case ClickHouseParser.SAMPLE:
                    case ClickHouseParser.SECOND:
                    case ClickHouseParser.SELECT:
                    case ClickHouseParser.SEMI:
                    case ClickHouseParser.SENDS:
                    case ClickHouseParser.SET:
                    case ClickHouseParser.SETTINGS:
                    case ClickHouseParser.SHOW:
                    case ClickHouseParser.SOURCE:
                    case ClickHouseParser.START:
                    case ClickHouseParser.STOP:
                    case ClickHouseParser.SUBSTRING:
                    case ClickHouseParser.SYNC:
                    case ClickHouseParser.SYNTAX:
                    case ClickHouseParser.SYSTEM:
                    case ClickHouseParser.TABLE:
                    case ClickHouseParser.TABLES:
                    case ClickHouseParser.TEMPORARY:
                    case ClickHouseParser.TEST:
                    case ClickHouseParser.THEN:
                    case ClickHouseParser.TIES:
                    case ClickHouseParser.TIMEOUT:
                    case ClickHouseParser.TIMESTAMP:
                    case ClickHouseParser.TO:
                    case ClickHouseParser.TOP:
                    case ClickHouseParser.TOTALS:
                    case ClickHouseParser.TRAILING:
                    case ClickHouseParser.TRIM:
                    case ClickHouseParser.TREE:
                    case ClickHouseParser.TRUNCATE:
                    case ClickHouseParser.TTL:
                    case ClickHouseParser.TYPE:
                    case ClickHouseParser.UNBOUNDED:
                    case ClickHouseParser.UNION:
                    case ClickHouseParser.UPDATE:
                    case ClickHouseParser.USE:
                    case ClickHouseParser.USING:
                    case ClickHouseParser.UUID:
                    case ClickHouseParser.VALUES:
                    case ClickHouseParser.VIEW:
                    case ClickHouseParser.VOLUME:
                    case ClickHouseParser.WATCH:
                    case ClickHouseParser.WEEK:
                    case ClickHouseParser.WHEN:
                    case ClickHouseParser.WHERE:
                    case ClickHouseParser.WINDOW:
                    case ClickHouseParser.WITH:
                    case ClickHouseParser.YEAR:
                    case ClickHouseParser.GRANT:
                    case ClickHouseParser.USER:
                    case ClickHouseParser.FETCH:
                    case ClickHouseParser.REFRESH:
                    case ClickHouseParser.POLICY:
                    case ClickHouseParser.QUOTA:
                    case ClickHouseParser.ROLE:
                    case ClickHouseParser.PROFILE:
                    case ClickHouseParser.ARBITRARY:
                    case ClickHouseParser.COLUMNS:
                    case ClickHouseParser.CURRENT_USER:
                    case ClickHouseParser.ACCESS:
                    case ClickHouseParser.SHOW_USERS:
                    case ClickHouseParser.SHOW_ROLES:
                    case ClickHouseParser.SHOW_ROW_POLICIES:
                    case ClickHouseParser.SHOW_QUOTAS:
                    case ClickHouseParser.SHOW_SETTINGS_PROFILES:
                    case ClickHouseParser.SHUTDOWN:
                    case ClickHouseParser.CACHE:
                    case ClickHouseParser.DNS:
                    case ClickHouseParser.MARK:
                    case ClickHouseParser.MARKS:
                    case ClickHouseParser.PART:
                    case ClickHouseParser.UNCOMPRESSED:
                    case ClickHouseParser.CONFIG:
                    case ClickHouseParser.EMBEDDED:
                    case ClickHouseParser.FUNCTIONS:
                    case ClickHouseParser.MOVES:
                    case ClickHouseParser.REPLICATION:
                    case ClickHouseParser.QUEUES:
                    case ClickHouseParser.RESTART:
                    case ClickHouseParser.DICTGET:
                    case ClickHouseParser.DICTGETHIERARCHY:
                    case ClickHouseParser.DICTHAS:
                    case ClickHouseParser.DICTISIN:
                    case ClickHouseParser.MANAGEMENT:
                    case ClickHouseParser.ADMIN:
                    case ClickHouseParser.NAMED:
                    case ClickHouseParser.COLLECTION:
                    case ClickHouseParser.CONTROL:
                    case ClickHouseParser.COLLECTIONS:
                    case ClickHouseParser.SECRETS:
                    case ClickHouseParser.USAGE:
                    case ClickHouseParser.INTROSPECTION:
                    case ClickHouseParser.ADDRESSTOLINE:
                    case ClickHouseParser.ADDRESSTOSYMBOL:
                    case ClickHouseParser.DEMANGLE:
                    case ClickHouseParser.SOURCES:
                    case ClickHouseParser.FILE:
                    case ClickHouseParser.URL:
                    case ClickHouseParser.REMOTE:
                    case ClickHouseParser.MYSQL:
                    case ClickHouseParser.ODBC:
                    case ClickHouseParser.JDBC:
                    case ClickHouseParser.HDFS:
                    case ClickHouseParser.S3:
                    case ClickHouseParser.SETTING:
                    case ClickHouseParser.OPTION:
                    case ClickHouseParser.NONE:
                    case ClickHouseParser.AZURE:
                    case ClickHouseParser.HIVE:
                    case ClickHouseParser.MONGO:
                    case ClickHouseParser.POSTGRES:
                    case ClickHouseParser.REDIS:
                    case ClickHouseParser.SQLITE:
                    case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
                    case ClickHouseParser.SQL:
                    case ClickHouseParser.SECURITY:
                    case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
                    case ClickHouseParser.POLICIES:
                    case ClickHouseParser.PROFILES:
                    case ClickHouseParser.ALLOW:
                    case ClickHouseParser.GRANTS:
                    case ClickHouseParser.EXCEPT:
                    case ClickHouseParser.REVOKE:
                    case ClickHouseParser.IDENTIFIED:
                    case ClickHouseParser.PLAINTEXT_PASSWORD:
                    case ClickHouseParser.SHA256_PASSWORD:
                    case ClickHouseParser.SHA256_HASH:
                    case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
                    case ClickHouseParser.DOUBLE_SHA1_HASH:
                    case ClickHouseParser.NO_PASSWORD:
                    case ClickHouseParser.LDAP:
                    case ClickHouseParser.SERVER:
                    case ClickHouseParser.KERBEROS:
                    case ClickHouseParser.REALM:
                    case ClickHouseParser.SSL_CERTIFICATE:
                    case ClickHouseParser.SAN:
                    case ClickHouseParser.CN:
                    case ClickHouseParser.SSH_KEY:
                    case ClickHouseParser.HTTP:
                    case ClickHouseParser.SCHEME:
                    case ClickHouseParser.BCRYPT_PASSWORD:
                    case ClickHouseParser.BCRYPT_HASH:
                    case ClickHouseParser.VALID:
                    case ClickHouseParser.UNTIL:
                    case ClickHouseParser.GRANTEES:
                    case ClickHouseParser.NAME:
                    case ClickHouseParser.REGEXP:
                    case ClickHouseParser.IP:
                    case ClickHouseParser.HOST:
                    case ClickHouseParser.READONLY:
                    case ClickHouseParser.WRITABLE:
                    case ClickHouseParser.PERMISSIVE:
                    case ClickHouseParser.RESTRICTIVE:
                    case ClickHouseParser.TABSEPARATED:
                    case ClickHouseParser.TABSEPARATEDRAW:
                    case ClickHouseParser.TABSEPARATEDWITHNAMES:
                    case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
                    case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
                    case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
                    case ClickHouseParser.TEMPLATE:
                    case ClickHouseParser.TEMPLATEIGNORESPACES:
                    case ClickHouseParser.CSV:
                    case ClickHouseParser.CSVWITHNAMES:
                    case ClickHouseParser.CSVWITHNAMESANDTYPES:
                    case ClickHouseParser.CUSTOMSEPARATED:
                    case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
                    case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
                    case ClickHouseParser.JSON:
                    case ClickHouseParser.JSONASSTRING:
                    case ClickHouseParser.JSONASOBJECT:
                    case ClickHouseParser.JSONSTRINGS:
                    case ClickHouseParser.JSONCOLUMNS:
                    case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
                    case ClickHouseParser.JSONCOMPACT:
                    case ClickHouseParser.JSONCOMPACTCOLUMNS:
                    case ClickHouseParser.JSONEACHROW:
                    case ClickHouseParser.JSONSTRINGSEACHROW:
                    case ClickHouseParser.JSONCOMPACTEACHROW:
                    case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
                    case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
                    case ClickHouseParser.JSONOBJECTEACHROW:
                    case ClickHouseParser.BSONEACHROW:
                    case ClickHouseParser.TSKV:
                    case ClickHouseParser.PROTOBUF:
                    case ClickHouseParser.PROTOBUFSINGLE:
                    case ClickHouseParser.PROTOBUFLIST:
                    case ClickHouseParser.AVRO:
                    case ClickHouseParser.AVROCONFLUENT:
                    case ClickHouseParser.PARQUET:
                    case ClickHouseParser.PARQUETMETADATA:
                    case ClickHouseParser.ARROW:
                    case ClickHouseParser.ARROWSTREAM:
                    case ClickHouseParser.ORC:
                    case ClickHouseParser.ONE:
                    case ClickHouseParser.NPY:
                    case ClickHouseParser.ROWBINARY:
                    case ClickHouseParser.ROWBINARYWITHNAMES:
                    case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
                    case ClickHouseParser.ROWBINARYWITHDEFAULTS:
                    case ClickHouseParser.NATIVE:
                    case ClickHouseParser.CAPNPROTO:
                    case ClickHouseParser.LINEASSTRING:
                    case ClickHouseParser.RAWBLOB:
                    case ClickHouseParser.MSGPACK:
                    case ClickHouseParser.MYSQLDUMP:
                    case ClickHouseParser.DWARF:
                    case ClickHouseParser.FORM:
                    case ClickHouseParser.KEYED:
                    case ClickHouseParser.RANDOMIZED:
                    case ClickHouseParser.USER_NAME:
                    case ClickHouseParser.IP_ADDRESS:
                    case ClickHouseParser.FORWARDED_IP_ADDRESS:
                    case ClickHouseParser.CLIENT_KEY:
                    case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
                    case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
                    case ClickHouseParser.QUERIES:
                    case ClickHouseParser.QUERY_SELECTS:
                    case ClickHouseParser.QUERY_INSERTS:
                    case ClickHouseParser.ERRORS:
                    case ClickHouseParser.RESULT_ROWS:
                    case ClickHouseParser.RESULT_BYTES:
                    case ClickHouseParser.READ_ROWS:
                    case ClickHouseParser.READ_BYTES:
                    case ClickHouseParser.EXECUTION_TIME:
                    case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
                    case ClickHouseParser.LIMITS:
                    case ClickHouseParser.TRACKING:
                    case ClickHouseParser.ONLY:
                    case ClickHouseParser.CONST:
                    case ClickHouseParser.CHANGEABLE_IN_READONLY:
                    case ClickHouseParser.OVERRIDABLE:
                    case ClickHouseParser.INHERIT:
                    case ClickHouseParser.RESET:
                    case ClickHouseParser.DETACHED:
                    case ClickHouseParser.FORGET:
                    case ClickHouseParser.STATISTICS:
                    case ClickHouseParser.UNFREEZE:
                    case ClickHouseParser.JSON_FALSE:
                    case ClickHouseParser.JSON_TRUE:
                    case ClickHouseParser.IDENTIFIER:
                        {
                        this.state = 1520;
                        this.identifier();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    this.state = 1525;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
                break;
            case 2:
                {
                this.state = 1526;
                this.functionExpression();
                }
                break;
            }
            this.state = 1529;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public conditionExpression(): ConditionExpressionContext {
        let localContext = new ConditionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 126, ClickHouseParser.RULE_conditionExpression);
        let _la: number;
        try {
            this.state = 1536;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 194, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1531;
                this.identifierOrLiteralOrFunction();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1532;
                this.identifierOrLiteralOrFunction();
                this.state = 1533;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 405)) & ~0x1F) === 0 && ((1 << (_la - 405)) & 847) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1534;
                this.identifierOrLiteralOrFunction();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public conditionClause(): ConditionClauseContext {
        let localContext = new ConditionClauseContext(this.context, this.state);
        this.enterRule(localContext, 128, ClickHouseParser.RULE_conditionClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1538;
            this.conditionExpression();
            this.state = 1543;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 6) {
                {
                {
                this.state = 1539;
                this.match(ClickHouseParser.AND);
                this.state = 1540;
                this.conditionExpression();
                }
                }
                this.state = 1545;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subjectOrAllOrExcept(): SubjectOrAllOrExceptContext {
        let localContext = new SubjectOrAllOrExceptContext(this.context, this.state);
        this.enterRule(localContext, 130, ClickHouseParser.RULE_subjectOrAllOrExcept);
        try {
            this.state = 1551;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 196, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1546;
                this.userOrRoleIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1547;
                this.match(ClickHouseParser.ALL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1548;
                this.match(ClickHouseParser.ALL);
                this.state = 1549;
                this.match(ClickHouseParser.EXCEPT);
                this.state = 1550;
                this.userOrRoleExpressionList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subjectExpression(): SubjectExpressionContext {
        let localContext = new SubjectExpressionContext(this.context, this.state);
        this.enterRule(localContext, 132, ClickHouseParser.RULE_subjectExpression);
        try {
            this.state = 1558;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 197, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1553;
                this.userOrRoleIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1554;
                this.match(ClickHouseParser.ALL);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1555;
                this.match(ClickHouseParser.ALL);
                this.state = 1556;
                this.match(ClickHouseParser.EXCEPT);
                this.state = 1557;
                this.userOrRoleExpressionList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public asPermissiveOrRestrictive(): AsPermissiveOrRestrictiveContext {
        let localContext = new AsPermissiveOrRestrictiveContext(this.context, this.state);
        this.enterRule(localContext, 134, ClickHouseParser.RULE_asPermissiveOrRestrictive);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1560;
            this.match(ClickHouseParser.AS);
            this.state = 1561;
            _la = this.tokenStream.LA(1);
            if(!(_la === 299 || _la === 300)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public usingClause(): UsingClauseContext {
        let localContext = new UsingClauseContext(this.context, this.state);
        this.enterRule(localContext, 136, ClickHouseParser.RULE_usingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1563;
            this.match(ClickHouseParser.USING);
            this.state = 1566;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 198, this.context) ) {
            case 1:
                {
                this.state = 1564;
                this.conditionClause();
                }
                break;
            case 2:
                {
                this.state = 1565;
                this.match(ClickHouseParser.NONE);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRowPolicyStatement(): CreateRowPolicyStatementContext {
        let localContext = new CreateRowPolicyStatementContext(this.context, this.state);
        this.enterRule(localContext, 138, ClickHouseParser.RULE_createRowPolicyStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1568;
            this.match(ClickHouseParser.CREATE);
            this.state = 1570;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 146) {
                {
                this.state = 1569;
                this.match(ClickHouseParser.ROW);
                }
            }

            this.state = 1572;
            this.match(ClickHouseParser.POLICY);
            this.state = 1574;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 200, this.context) ) {
            case 1:
                {
                this.state = 1573;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1576;
            this.createPolicyExpression();
            this.state = 1581;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 1577;
                this.match(ClickHouseParser.COMMA);
                this.state = 1578;
                this.createPolicyExpression();
                }
                }
                this.state = 1583;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1585;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 1584;
                this.inClause();
                }
            }

            this.state = 1589;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 66) {
                {
                this.state = 1587;
                this.match(ClickHouseParser.FOR);
                this.state = 1588;
                this.match(ClickHouseParser.SELECT);
                }
            }

            this.state = 1592;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 184) {
                {
                this.state = 1591;
                this.usingClause();
                }
            }

            this.state = 1595;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 10) {
                {
                this.state = 1594;
                this.asPermissiveOrRestrictive();
                }
            }

            this.state = 1599;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 171) {
                {
                this.state = 1597;
                this.match(ClickHouseParser.TO);
                this.state = 1598;
                this.subjectExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaKeyType(): QuotaKeyTypeContext {
        let localContext = new QuotaKeyTypeContext(this.context, this.state);
        this.enterRule(localContext, 140, ClickHouseParser.RULE_quotaKeyType);
        let _la: number;
        try {
            this.state = 1610;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.USER_NAME:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1601;
                this.match(ClickHouseParser.USER_NAME);
                }
                break;
            case ClickHouseParser.IP_ADDRESS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1602;
                this.match(ClickHouseParser.IP_ADDRESS);
                }
                break;
            case ClickHouseParser.CLIENT_KEY:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1603;
                this.match(ClickHouseParser.CLIENT_KEY);
                this.state = 1606;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 401) {
                    {
                    this.state = 1604;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1605;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 360 || _la === 361)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1608;
                this.match(ClickHouseParser.CLIENT_KEY_OR_USER_NAME);
                }
                break;
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1609;
                this.match(ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaKeyClause(): QuotaKeyClauseContext {
        let localContext = new QuotaKeyClauseContext(this.context, this.state);
        this.enterRule(localContext, 142, ClickHouseParser.RULE_quotaKeyClause);
        let _la: number;
        try {
            this.state = 1617;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.KEY:
            case ClickHouseParser.KEYED:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1612;
                _la = this.tokenStream.LA(1);
                if(!(_la === 92 || _la === 358)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1613;
                this.match(ClickHouseParser.BY);
                this.state = 1614;
                this.quotaKeyType();
                }
                break;
            case ClickHouseParser.NOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1615;
                this.match(ClickHouseParser.NOT);
                this.state = 1616;
                this.match(ClickHouseParser.KEYED);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaRestrictionType(): QuotaRestrictionTypeContext {
        let localContext = new QuotaRestrictionTypeContext(this.context, this.state);
        this.enterRule(localContext, 144, ClickHouseParser.RULE_quotaRestrictionType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1619;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & 1023) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public stringOrNumberLiteral(): StringOrNumberLiteralContext {
        let localContext = new StringOrNumberLiteralContext(this.context, this.state);
        this.enterRule(localContext, 146, ClickHouseParser.RULE_stringOrNumberLiteral);
        try {
            this.state = 1623;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1621;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.INF:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.PLUS:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1622;
                this.numberLiteral();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaRestrictionExpression(): QuotaRestrictionExpressionContext {
        let localContext = new QuotaRestrictionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 148, ClickHouseParser.RULE_quotaRestrictionExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1625;
            this.match(ClickHouseParser.MAX);
            this.state = 1626;
            this.quotaRestrictionType();
            this.state = 1627;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 1628;
            this.stringOrNumberLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaRestrictionClause(): QuotaRestrictionClauseContext {
        let localContext = new QuotaRestrictionClauseContext(this.context, this.state);
        this.enterRule(localContext, 150, ClickHouseParser.RULE_quotaRestrictionClause);
        try {
            let alternative: number;
            this.state = 1642;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.MAX:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1630;
                this.quotaRestrictionExpression();
                this.state = 1635;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 211, this.context);
                while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                    if (alternative === 1) {
                        {
                        {
                        this.state = 1631;
                        this.match(ClickHouseParser.COMMA);
                        this.state = 1632;
                        this.quotaRestrictionExpression();
                        }
                        }
                    }
                    this.state = 1637;
                    this.errorHandler.sync(this);
                    alternative = this.interpreter.adaptivePredict(this.tokenStream, 211, this.context);
                }
                }
                break;
            case ClickHouseParser.NO:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1638;
                this.match(ClickHouseParser.NO);
                this.state = 1639;
                this.match(ClickHouseParser.LIMITS);
                }
                break;
            case ClickHouseParser.TRACKING:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1640;
                this.match(ClickHouseParser.TRACKING);
                this.state = 1641;
                this.match(ClickHouseParser.ONLY);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaForClause(): QuotaForClauseContext {
        let localContext = new QuotaForClauseContext(this.context, this.state);
        this.enterRule(localContext, 152, ClickHouseParser.RULE_quotaForClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1644;
            this.match(ClickHouseParser.FOR);
            this.state = 1646;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 359) {
                {
                this.state = 1645;
                this.match(ClickHouseParser.RANDOMIZED);
                }
            }

            this.state = 1648;
            this.intervalOperand();
            this.state = 1649;
            this.quotaRestrictionClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public intervalOperand(): IntervalOperandContext {
        let localContext = new IntervalOperandContext(this.context, this.state);
        this.enterRule(localContext, 154, ClickHouseParser.RULE_intervalOperand);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1651;
            this.match(ClickHouseParser.INTERVAL);
            this.state = 1652;
            this.numberLiteral();
            this.state = 1653;
            this.interval();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public quotaForList(): QuotaForListContext {
        let localContext = new QuotaForListContext(this.context, this.state);
        this.enterRule(localContext, 156, ClickHouseParser.RULE_quotaForList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1655;
            this.quotaForClause();
            this.state = 1662;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 66 || _la === 401) {
                {
                {
                this.state = 1657;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 401) {
                    {
                    this.state = 1656;
                    this.match(ClickHouseParser.COMMA);
                    }
                }

                this.state = 1659;
                this.quotaForClause();
                }
                }
                this.state = 1664;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createQuotaStatement(): CreateQuotaStatementContext {
        let localContext = new CreateQuotaStatementContext(this.context, this.state);
        this.enterRule(localContext, 158, ClickHouseParser.RULE_createQuotaStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1665;
            this.match(ClickHouseParser.CREATE);
            this.state = 1666;
            this.match(ClickHouseParser.QUOTA);
            this.state = 1668;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 216, this.context) ) {
            case 1:
                {
                this.state = 1667;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1670;
            this.identifierList();
            this.state = 1672;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1671;
                this.clusterClause();
                }
            }

            this.state = 1675;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 1674;
                this.inClause();
                }
            }

            this.state = 1678;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 92 || _la === 116 || _la === 358) {
                {
                this.state = 1677;
                this.quotaKeyClause();
                }
            }

            this.state = 1681;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 66) {
                {
                this.state = 1680;
                this.quotaForList();
                }
            }

            this.state = 1685;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 171) {
                {
                this.state = 1683;
                this.match(ClickHouseParser.TO);
                this.state = 1684;
                this.subjectExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierList(): IdentifierListContext {
        let localContext = new IdentifierListContext(this.context, this.state);
        this.enterRule(localContext, 160, ClickHouseParser.RULE_identifierList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1687;
            this.identifier();
            this.state = 1692;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 222, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 1688;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 1689;
                    this.identifier();
                    }
                    }
                }
                this.state = 1694;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 222, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createRoleStatement(): CreateRoleStatementContext {
        let localContext = new CreateRoleStatementContext(this.context, this.state);
        this.enterRule(localContext, 162, ClickHouseParser.RULE_createRoleStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1695;
            this.match(ClickHouseParser.CREATE);
            this.state = 1696;
            this.match(ClickHouseParser.ROLE);
            this.state = 1698;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 223, this.context) ) {
            case 1:
                {
                this.state = 1697;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1700;
            this.identifierList();
            this.state = 1702;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1701;
                this.clusterClause();
                }
            }

            this.state = 1705;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 1704;
                this.inClause();
                }
            }

            this.state = 1708;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 1707;
                this.extendedSettingsWithProfileClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extendedSettingExpressionWithProfileOrInheritClause(): ExtendedSettingExpressionWithProfileOrInheritClauseContext {
        let localContext = new ExtendedSettingExpressionWithProfileOrInheritClauseContext(this.context, this.state);
        this.enterRule(localContext, 164, ClickHouseParser.RULE_extendedSettingExpressionWithProfileOrInheritClause);
        try {
            this.state = 1713;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 227, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1710;
                this.extendedSettingExpressionWithProfileClause();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1711;
                this.match(ClickHouseParser.INHERIT);
                this.state = 1712;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public extendedSettingsWithInheritClause(): ExtendedSettingsWithInheritClauseContext {
        let localContext = new ExtendedSettingsWithInheritClauseContext(this.context, this.state);
        this.enterRule(localContext, 166, ClickHouseParser.RULE_extendedSettingsWithInheritClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1715;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 1716;
            this.extendedSettingExpressionWithProfileOrInheritClause();
            this.state = 1721;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 1717;
                this.match(ClickHouseParser.COMMA);
                this.state = 1718;
                this.extendedSettingExpressionWithProfileOrInheritClause();
                }
                }
                this.state = 1723;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createSettingsProfileStatement(): CreateSettingsProfileStatementContext {
        let localContext = new CreateSettingsProfileStatementContext(this.context, this.state);
        this.enterRule(localContext, 168, ClickHouseParser.RULE_createSettingsProfileStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1724;
            this.match(ClickHouseParser.CREATE);
            this.state = 1725;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 1726;
            this.match(ClickHouseParser.PROFILE);
            this.state = 1728;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 229, this.context) ) {
            case 1:
                {
                this.state = 1727;
                this.replaceOrIfNotExistsClause();
                }
                break;
            }
            this.state = 1730;
            this.identifierList();
            this.state = 1732;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1731;
                this.clusterClause();
                }
            }

            this.state = 1735;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 81) {
                {
                this.state = 1734;
                this.inClause();
                }
            }

            this.state = 1738;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 1737;
                this.extendedSettingsWithInheritClause();
                }
            }

            this.state = 1742;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 171) {
                {
                this.state = 1740;
                this.match(ClickHouseParser.TO);
                this.state = 1741;
                this.subjectExpressionList();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedCollectionExpression(): NamedCollectionExpressionContext {
        let localContext = new NamedCollectionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 170, ClickHouseParser.RULE_namedCollectionExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1744;
            this.identifier();
            this.state = 1745;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 1746;
            this.stringOrNumberLiteral();
            this.state = 1751;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 116 || _la === 381) {
                {
                this.state = 1748;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 116) {
                    {
                    this.state = 1747;
                    this.match(ClickHouseParser.NOT);
                    }
                }

                this.state = 1750;
                this.match(ClickHouseParser.OVERRIDABLE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedCollectionExpressionList(): NamedCollectionExpressionListContext {
        let localContext = new NamedCollectionExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 172, ClickHouseParser.RULE_namedCollectionExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1753;
            this.namedCollectionExpression();
            this.state = 1758;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 1754;
                this.match(ClickHouseParser.COMMA);
                this.state = 1755;
                this.namedCollectionExpression();
                }
                }
                this.state = 1760;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createNamedCollectionStatement(): CreateNamedCollectionStatementContext {
        let localContext = new CreateNamedCollectionStatementContext(this.context, this.state);
        this.enterRule(localContext, 174, ClickHouseParser.RULE_createNamedCollectionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1761;
            this.match(ClickHouseParser.CREATE);
            this.state = 1762;
            this.match(ClickHouseParser.NAMED);
            this.state = 1763;
            this.match(ClickHouseParser.COLLECTION);
            this.state = 1767;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 237, this.context) ) {
            case 1:
                {
                this.state = 1764;
                this.match(ClickHouseParser.IF);
                this.state = 1765;
                this.match(ClickHouseParser.NOT);
                this.state = 1766;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 1769;
            this.identifier();
            this.state = 1771;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1770;
                this.clusterClause();
                }
            }

            this.state = 1773;
            this.match(ClickHouseParser.AS);
            this.state = 1774;
            this.namedCollectionExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expressionOperand(): ExpressionOperandContext {
        let localContext = new ExpressionOperandContext(this.context, this.state);
        this.enterRule(localContext, 176, ClickHouseParser.RULE_expressionOperand);
        try {
            this.state = 1780;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 239, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1776;
                this.functionExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1777;
                this.identifier();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1778;
                this.literal();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1779;
                this.intervalOperand();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public expression(): ExpressionContext {
        let localContext = new ExpressionContext(this.context, this.state);
        this.enterRule(localContext, 178, ClickHouseParser.RULE_expression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1782;
            this.expressionOperand();
            this.state = 1787;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (((((_la - 397)) & ~0x1F) === 0 && ((1 << (_la - 397)) & 786529) !== 0)) {
                {
                {
                this.state = 1783;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 397)) & ~0x1F) === 0 && ((1 << (_la - 397)) & 786529) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1784;
                this.expressionOperand();
                }
                }
                this.state = 1789;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createFunctionStatement(): CreateFunctionStatementContext {
        let localContext = new CreateFunctionStatementContext(this.context, this.state);
        this.enterRule(localContext, 180, ClickHouseParser.RULE_createFunctionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1790;
            this.match(ClickHouseParser.CREATE);
            this.state = 1791;
            this.match(ClickHouseParser.FUNCTION);
            this.state = 1795;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 241, this.context) ) {
            case 1:
                {
                this.state = 1792;
                this.match(ClickHouseParser.IF);
                this.state = 1793;
                this.match(ClickHouseParser.NOT);
                this.state = 1794;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 1797;
            this.identifier();
            this.state = 1799;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 1798;
                this.clusterClause();
                }
            }

            this.state = 1801;
            this.match(ClickHouseParser.AS);
            this.state = 1808;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.LPAREN:
                {
                this.state = 1802;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1804;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4292607999) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 127) !== 0)) {
                    {
                    this.state = 1803;
                    this.identifierList();
                    }
                }

                this.state = 1806;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASC:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.KEYED:
            case ClickHouseParser.RANDOMIZED:
            case ClickHouseParser.USER_NAME:
            case ClickHouseParser.IP_ADDRESS:
            case ClickHouseParser.FORWARDED_IP_ADDRESS:
            case ClickHouseParser.CLIENT_KEY:
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
            case ClickHouseParser.QUERIES:
            case ClickHouseParser.QUERY_SELECTS:
            case ClickHouseParser.QUERY_INSERTS:
            case ClickHouseParser.ERRORS:
            case ClickHouseParser.RESULT_ROWS:
            case ClickHouseParser.RESULT_BYTES:
            case ClickHouseParser.READ_ROWS:
            case ClickHouseParser.READ_BYTES:
            case ClickHouseParser.EXECUTION_TIME:
            case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
            case ClickHouseParser.LIMITS:
            case ClickHouseParser.TRACKING:
            case ClickHouseParser.ONLY:
            case ClickHouseParser.CONST:
            case ClickHouseParser.CHANGEABLE_IN_READONLY:
            case ClickHouseParser.OVERRIDABLE:
            case ClickHouseParser.INHERIT:
            case ClickHouseParser.RESET:
            case ClickHouseParser.DETACHED:
            case ClickHouseParser.FORGET:
            case ClickHouseParser.STATISTICS:
            case ClickHouseParser.UNFREEZE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 1807;
                this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1810;
            this.match(ClickHouseParser.ARROW_SYMBOL);
            this.state = 1811;
            this.expression();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderType(): OrderTypeContext {
        let localContext = new OrderTypeContext(this.context, this.state);
        this.enterRule(localContext, 182, ClickHouseParser.RULE_orderType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1813;
            _la = this.tokenStream.LA(1);
            if(!(_la === 11 || _la === 12 || _la === 42 || _la === 43)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createIndexStatement(): CreateIndexStatementContext {
        let localContext = new CreateIndexStatementContext(this.context, this.state);
        this.enterRule(localContext, 184, ClickHouseParser.RULE_createIndexStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1815;
            this.match(ClickHouseParser.CREATE);
            this.state = 1816;
            this.match(ClickHouseParser.INDEX);
            this.state = 1820;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 245, this.context) ) {
            case 1:
                {
                this.state = 1817;
                this.match(ClickHouseParser.IF);
                this.state = 1818;
                this.match(ClickHouseParser.NOT);
                this.state = 1819;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 1822;
            this.identifier();
            this.state = 1823;
            this.match(ClickHouseParser.ON);
            this.state = 1824;
            this.tableIdentifier();
            this.state = 1825;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1826;
            this.identifier();
            this.state = 1828;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 11 || _la === 12 || _la === 42 || _la === 43) {
                {
                this.state = 1827;
                this.orderType();
                }
            }

            this.state = 1837;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 1830;
                this.match(ClickHouseParser.COMMA);
                this.state = 1831;
                this.identifier();
                this.state = 1833;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 11 || _la === 12 || _la === 42 || _la === 43) {
                    {
                    this.state = 1832;
                    this.orderType();
                    }
                }

                }
                }
                this.state = 1839;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1840;
            this.match(ClickHouseParser.RPAREN);
            this.state = 1843;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 179) {
                {
                this.state = 1841;
                this.match(ClickHouseParser.TYPE);
                this.state = 1842;
                this.identifier();
                }
            }

            this.state = 1847;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 73) {
                {
                this.state = 1845;
                this.match(ClickHouseParser.GRANULARITY);
                this.state = 1846;
                this.numberLiteral();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createStatement(): CreateStatementContext {
        let localContext = new CreateStatementContext(this.context, this.state);
        this.enterRule(localContext, 186, ClickHouseParser.RULE_createStatement);
        try {
            this.state = 1863;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 251, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 1849;
                this.createDatabaseStatement();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 1850;
                this.createDictionaryStatement();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 1851;
                this.createLiveViewStatement();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 1852;
                this.createMaterializedViewStatement();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 1853;
                this.createTableStatement();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 1854;
                this.createViewStatement();
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 1855;
                this.createUserStatement();
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 1856;
                this.createRowPolicyStatement();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 1857;
                this.createQuotaStatement();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 1858;
                this.createRoleStatement();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 1859;
                this.createSettingsProfileStatement();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 1860;
                this.createNamedCollectionStatement();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 1861;
                this.createFunctionStatement();
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 1862;
                this.createIndexStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionarySchemaClause(): DictionarySchemaClauseContext {
        let localContext = new DictionarySchemaClauseContext(this.context, this.state);
        this.enterRule(localContext, 188, ClickHouseParser.RULE_dictionarySchemaClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1865;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1866;
            this.dictionaryAttributeDefinition();
            this.state = 1871;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 1867;
                this.match(ClickHouseParser.COMMA);
                this.state = 1868;
                this.dictionaryAttributeDefinition();
                }
                }
                this.state = 1873;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1874;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryAttributeDefinition(): DictionaryAttributeDefinitionContext {
        let localContext = new DictionaryAttributeDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 190, ClickHouseParser.RULE_dictionaryAttributeDefinition);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1876;
            this.identifier();
            this.state = 1877;
            this.columnTypeExpression();
            this.state = 1899;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 254, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1897;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 253, this.context) ) {
                    case 1:
                        {
                        this.state = 1878;
                        if (!(!localContext.attrs.has("default"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"default\")");
                        }
                        this.state = 1879;
                        this.match(ClickHouseParser.DEFAULT);
                        this.state = 1880;
                        this.literal();
                        localContext.attrs.add("default");
                        }
                        break;
                    case 2:
                        {
                        this.state = 1883;
                        if (!(!localContext.attrs.has("expression"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"expression\")");
                        }
                        this.state = 1884;
                        this.match(ClickHouseParser.EXPRESSION);
                        this.state = 1885;
                        this.columnExpression(0);
                        localContext.attrs.add("expression");
                        }
                        break;
                    case 3:
                        {
                        this.state = 1888;
                        if (!(!localContext.attrs.has("hierarchical"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"hierarchical\")");
                        }
                        this.state = 1889;
                        this.match(ClickHouseParser.HIERARCHICAL);
                        localContext.attrs.add("hierarchical");
                        }
                        break;
                    case 4:
                        {
                        this.state = 1891;
                        if (!(!localContext.attrs.has("injective"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"injective\")");
                        }
                        this.state = 1892;
                        this.match(ClickHouseParser.INJECTIVE);
                        localContext.attrs.add("injective");
                        }
                        break;
                    case 5:
                        {
                        this.state = 1894;
                        if (!(!localContext.attrs.has("is_object_id"))) {
                            throw this.createFailedPredicateException("!$attrs.has(\"is_object_id\")");
                        }
                        this.state = 1895;
                        this.match(ClickHouseParser.IS_OBJECT_ID);
                        localContext.attrs.add("is_object_id");
                        }
                        break;
                    }
                    }
                }
                this.state = 1901;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 254, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryEngineClause(): DictionaryEngineClauseContext {
        let localContext = new DictionaryEngineClauseContext(this.context, this.state);
        this.enterRule(localContext, 192, ClickHouseParser.RULE_dictionaryEngineClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1903;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 255, this.context) ) {
            case 1:
                {
                this.state = 1902;
                this.dictionaryPrimaryKeyClause();
                }
                break;
            }
            this.state = 1927;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 257, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 1925;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 256, this.context) ) {
                    case 1:
                        {
                        this.state = 1905;
                        if (!(!localContext.clauses.has("source"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"source\")");
                        }
                        this.state = 1906;
                        this.sourceClause();
                        localContext.clauses.add("source");
                        }
                        break;
                    case 2:
                        {
                        this.state = 1909;
                        if (!(!localContext.clauses.has("lifetime"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"lifetime\")");
                        }
                        this.state = 1910;
                        this.lifetimeClause();
                        localContext.clauses.add("lifetime");
                        }
                        break;
                    case 3:
                        {
                        this.state = 1913;
                        if (!(!localContext.clauses.has("layout"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"layout\")");
                        }
                        this.state = 1914;
                        this.layoutClause();
                        localContext.clauses.add("layout");
                        }
                        break;
                    case 4:
                        {
                        this.state = 1917;
                        if (!(!localContext.clauses.has("range"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"range\")");
                        }
                        this.state = 1918;
                        this.rangeClause();
                        localContext.clauses.add("range");
                        }
                        break;
                    case 5:
                        {
                        this.state = 1921;
                        if (!(!localContext.clauses.has("settings"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"settings\")");
                        }
                        this.state = 1922;
                        this.dictionarySettingsClause();
                        localContext.clauses.add("settings");
                        }
                        break;
                    }
                    }
                }
                this.state = 1929;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 257, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryPrimaryKeyClause(): DictionaryPrimaryKeyClauseContext {
        let localContext = new DictionaryPrimaryKeyClauseContext(this.context, this.state);
        this.enterRule(localContext, 194, ClickHouseParser.RULE_dictionaryPrimaryKeyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1930;
            this.match(ClickHouseParser.PRIMARY);
            this.state = 1931;
            this.match(ClickHouseParser.KEY);
            this.state = 1932;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext {
        let localContext = new DictionaryArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 196, ClickHouseParser.RULE_dictionaryArgumentExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1934;
            this.identifier();
            this.state = 1941;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 259, this.context) ) {
            case 1:
                {
                this.state = 1935;
                this.identifier();
                this.state = 1938;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 412) {
                    {
                    this.state = 1936;
                    this.match(ClickHouseParser.LPAREN);
                    this.state = 1937;
                    this.match(ClickHouseParser.RPAREN);
                    }
                }

                }
                break;
            case 2:
                {
                this.state = 1940;
                this.literal();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourceClause(): SourceClauseContext {
        let localContext = new SourceClauseContext(this.context, this.state);
        this.enterRule(localContext, 198, ClickHouseParser.RULE_sourceClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1943;
            this.match(ClickHouseParser.SOURCE);
            this.state = 1944;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1945;
            this.identifier();
            this.state = 1946;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1950;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4292607999) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 127) !== 0)) {
                {
                {
                this.state = 1947;
                this.dictionaryArgumentExpression();
                }
                }
                this.state = 1952;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1953;
            this.match(ClickHouseParser.RPAREN);
            this.state = 1954;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public lifetimeClause(): LifetimeClauseContext {
        let localContext = new LifetimeClauseContext(this.context, this.state);
        this.enterRule(localContext, 200, ClickHouseParser.RULE_lifetimeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1956;
            this.match(ClickHouseParser.LIFETIME);
            this.state = 1957;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1967;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.DECIMAL_LITERAL:
                {
                this.state = 1958;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case ClickHouseParser.MIN:
                {
                this.state = 1959;
                this.match(ClickHouseParser.MIN);
                this.state = 1960;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 1961;
                this.match(ClickHouseParser.MAX);
                this.state = 1962;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case ClickHouseParser.MAX:
                {
                this.state = 1963;
                this.match(ClickHouseParser.MAX);
                this.state = 1964;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 1965;
                this.match(ClickHouseParser.MIN);
                this.state = 1966;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1969;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public layoutClause(): LayoutClauseContext {
        let localContext = new LayoutClauseContext(this.context, this.state);
        this.enterRule(localContext, 202, ClickHouseParser.RULE_layoutClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1971;
            this.match(ClickHouseParser.LAYOUT);
            this.state = 1972;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1973;
            this.identifier();
            this.state = 1974;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1978;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4292607999) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 127) !== 0)) {
                {
                {
                this.state = 1975;
                this.dictionaryArgumentExpression();
                }
                }
                this.state = 1980;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 1981;
            this.match(ClickHouseParser.RPAREN);
            this.state = 1982;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public rangeClause(): RangeClauseContext {
        let localContext = new RangeClauseContext(this.context, this.state);
        this.enterRule(localContext, 204, ClickHouseParser.RULE_rangeClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 1984;
            this.match(ClickHouseParser.RANGE);
            this.state = 1985;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1996;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.MIN:
                {
                this.state = 1986;
                this.match(ClickHouseParser.MIN);
                this.state = 1987;
                this.identifier();
                this.state = 1988;
                this.match(ClickHouseParser.MAX);
                this.state = 1989;
                this.identifier();
                }
                break;
            case ClickHouseParser.MAX:
                {
                this.state = 1991;
                this.match(ClickHouseParser.MAX);
                this.state = 1992;
                this.identifier();
                this.state = 1993;
                this.match(ClickHouseParser.MIN);
                this.state = 1994;
                this.identifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 1998;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictionarySettingsClause(): DictionarySettingsClauseContext {
        let localContext = new DictionarySettingsClauseContext(this.context, this.state);
        this.enterRule(localContext, 206, ClickHouseParser.RULE_dictionarySettingsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2000;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 2001;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2002;
            this.settingExpressionList();
            this.state = 2003;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public clusterClause(): ClusterClauseContext {
        let localContext = new ClusterClauseContext(this.context, this.state);
        this.enterRule(localContext, 208, ClickHouseParser.RULE_clusterClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2005;
            this.match(ClickHouseParser.ON);
            this.state = 2006;
            this.match(ClickHouseParser.CLUSTER);
            this.state = 2009;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASC:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.KEYED:
            case ClickHouseParser.RANDOMIZED:
            case ClickHouseParser.USER_NAME:
            case ClickHouseParser.IP_ADDRESS:
            case ClickHouseParser.FORWARDED_IP_ADDRESS:
            case ClickHouseParser.CLIENT_KEY:
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
            case ClickHouseParser.QUERIES:
            case ClickHouseParser.QUERY_SELECTS:
            case ClickHouseParser.QUERY_INSERTS:
            case ClickHouseParser.ERRORS:
            case ClickHouseParser.RESULT_ROWS:
            case ClickHouseParser.RESULT_BYTES:
            case ClickHouseParser.READ_ROWS:
            case ClickHouseParser.READ_BYTES:
            case ClickHouseParser.EXECUTION_TIME:
            case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
            case ClickHouseParser.LIMITS:
            case ClickHouseParser.TRACKING:
            case ClickHouseParser.ONLY:
            case ClickHouseParser.CONST:
            case ClickHouseParser.CHANGEABLE_IN_READONLY:
            case ClickHouseParser.OVERRIDABLE:
            case ClickHouseParser.INHERIT:
            case ClickHouseParser.RESET:
            case ClickHouseParser.DETACHED:
            case ClickHouseParser.FORGET:
            case ClickHouseParser.STATISTICS:
            case ClickHouseParser.UNFREEZE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 2007;
                this.identifier();
                }
                break;
            case ClickHouseParser.STRING_LITERAL:
                {
                this.state = 2008;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public uuidClause(): UuidClauseContext {
        let localContext = new UuidClauseContext(this.context, this.state);
        this.enterRule(localContext, 210, ClickHouseParser.RULE_uuidClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2011;
            this.match(ClickHouseParser.UUID);
            this.state = 2012;
            this.match(ClickHouseParser.STRING_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public destinationClause(): DestinationClauseContext {
        let localContext = new DestinationClauseContext(this.context, this.state);
        this.enterRule(localContext, 212, ClickHouseParser.RULE_destinationClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2014;
            this.match(ClickHouseParser.TO);
            this.state = 2015;
            this.tableIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subqueryClause(): SubqueryClauseContext {
        let localContext = new SubqueryClauseContext(this.context, this.state);
        this.enterRule(localContext, 214, ClickHouseParser.RULE_subqueryClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2017;
            this.match(ClickHouseParser.AS);
            this.state = 2018;
            this.selectUnionStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableSchemaClause(): TableSchemaClauseContext {
        let localContext = new TableSchemaClauseContext(this.context, this.state);
        this.enterRule(localContext, 216, ClickHouseParser.RULE_tableSchemaClause);
        let _la: number;
        try {
            this.state = 2035;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 266, this.context) ) {
            case 1:
                localContext = new SchemaDescriptionClauseContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2020;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2021;
                this.tableElementExpression();
                this.state = 2026;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 401) {
                    {
                    {
                    this.state = 2022;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2023;
                    this.tableElementExpression();
                    }
                    }
                    this.state = 2028;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2029;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 2:
                localContext = new SchemaAsTableClauseContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2031;
                this.match(ClickHouseParser.AS);
                this.state = 2032;
                this.tableIdentifier();
                }
                break;
            case 3:
                localContext = new SchemaAsFunctionClauseContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2033;
                this.match(ClickHouseParser.AS);
                this.state = 2034;
                this.tableFunctionExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineClause(): EngineClauseContext {
        let localContext = new EngineClauseContext(this.context, this.state);
        this.enterRule(localContext, 218, ClickHouseParser.RULE_engineClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2037;
            this.engineExpression();
            this.state = 2064;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 268, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    this.state = 2062;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 267, this.context) ) {
                    case 1:
                        {
                        this.state = 2038;
                        if (!(!localContext.clauses.has("orderByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"orderByClause\")");
                        }
                        this.state = 2039;
                        this.orderByClause();
                        localContext.clauses.add("orderByClause");
                        }
                        break;
                    case 2:
                        {
                        this.state = 2042;
                        if (!(!localContext.clauses.has("partitionByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"partitionByClause\")");
                        }
                        this.state = 2043;
                        this.partitionByClause();
                        localContext.clauses.add("partitionByClause");
                        			
                        }
                        break;
                    case 3:
                        {
                        this.state = 2046;
                        if (!(!localContext.clauses.has("primaryKeyClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"primaryKeyClause\")");
                        }
                        this.state = 2047;
                        this.primaryKeyClause();
                        localContext.clauses.add("primaryKeyClause");
                        			
                        }
                        break;
                    case 4:
                        {
                        this.state = 2050;
                        if (!(!localContext.clauses.has("sampleByClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"sampleByClause\")");
                        }
                        this.state = 2051;
                        this.sampleByClause();
                        localContext.clauses.add("sampleByClause");
                        }
                        break;
                    case 5:
                        {
                        this.state = 2054;
                        if (!(!localContext.clauses.has("ttlClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"ttlClause\")");
                        }
                        this.state = 2055;
                        this.ttlClause();
                        localContext.clauses.add("ttlClause");
                        }
                        break;
                    case 6:
                        {
                        this.state = 2058;
                        if (!(!localContext.clauses.has("settingsClause"))) {
                            throw this.createFailedPredicateException("!$clauses.has(\"settingsClause\")");
                        }
                        this.state = 2059;
                        this.settingsClause();
                        localContext.clauses.add("settingsClause");
                        }
                        break;
                    }
                    }
                }
                this.state = 2066;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 268, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public partitionByClause(): PartitionByClauseContext {
        let localContext = new PartitionByClauseContext(this.context, this.state);
        this.enterRule(localContext, 220, ClickHouseParser.RULE_partitionByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2067;
            this.match(ClickHouseParser.PARTITION);
            this.state = 2068;
            this.match(ClickHouseParser.BY);
            this.state = 2069;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public primaryKeyClause(): PrimaryKeyClauseContext {
        let localContext = new PrimaryKeyClauseContext(this.context, this.state);
        this.enterRule(localContext, 222, ClickHouseParser.RULE_primaryKeyClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2071;
            this.match(ClickHouseParser.PRIMARY);
            this.state = 2072;
            this.match(ClickHouseParser.KEY);
            this.state = 2073;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleByClause(): SampleByClauseContext {
        let localContext = new SampleByClauseContext(this.context, this.state);
        this.enterRule(localContext, 224, ClickHouseParser.RULE_sampleByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2075;
            this.match(ClickHouseParser.SAMPLE);
            this.state = 2076;
            this.match(ClickHouseParser.BY);
            this.state = 2077;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ttlClause(): TtlClauseContext {
        let localContext = new TtlClauseContext(this.context, this.state);
        this.enterRule(localContext, 226, ClickHouseParser.RULE_ttlClause);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2079;
            this.match(ClickHouseParser.TTL);
            this.state = 2080;
            this.ttlExpression();
            this.state = 2085;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 269, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2081;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2082;
                    this.ttlExpression();
                    }
                    }
                }
                this.state = 2087;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 269, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public engineExpression(): EngineExpressionContext {
        let localContext = new EngineExpressionContext(this.context, this.state);
        this.enterRule(localContext, 228, ClickHouseParser.RULE_engineExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2088;
            this.match(ClickHouseParser.ENGINE);
            this.state = 2090;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 406) {
                {
                this.state = 2089;
                this.match(ClickHouseParser.EQ_SINGLE);
                }
            }

            this.state = 2092;
            this.identifierOrNull();
            this.state = 2098;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 272, this.context) ) {
            case 1:
                {
                this.state = 2093;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2095;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967295) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294967295) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 4294967295) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 4294967295) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & 4294967295) !== 0) || ((((_la - 385)) & ~0x1F) === 0 && ((1 << (_la - 385)) & 2316048383) !== 0)) {
                    {
                    this.state = 2094;
                    this.columnExpressionList();
                    }
                }

                this.state = 2097;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableElementExpression(): TableElementExpressionContext {
        let localContext = new TableElementExpressionContext(this.context, this.state);
        this.enterRule(localContext, 230, ClickHouseParser.RULE_tableElementExpression);
        try {
            this.state = 2110;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 273, this.context) ) {
            case 1:
                localContext = new TableElementExpressionColumnContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2100;
                this.tableColumnDefinition();
                }
                break;
            case 2:
                localContext = new TableElementExpressionConstraintContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2101;
                this.match(ClickHouseParser.CONSTRAINT);
                this.state = 2102;
                this.identifier();
                this.state = 2103;
                this.match(ClickHouseParser.CHECK);
                this.state = 2104;
                this.columnExpression(0);
                }
                break;
            case 3:
                localContext = new TableElementExpressionIndexContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2106;
                this.match(ClickHouseParser.INDEX);
                this.state = 2107;
                this.tableIndexDefinition();
                }
                break;
            case 4:
                localContext = new TableElementExpressionProjectionContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2108;
                this.match(ClickHouseParser.PROJECTION);
                this.state = 2109;
                this.tableProjectionDefinition();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        let localContext = new TableColumnDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 232, ClickHouseParser.RULE_tableColumnDefinition);
        let _la: number;
        try {
            this.state = 2144;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 282, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2112;
                this.columnIdentifier();
                this.state = 2113;
                this.columnTypeExpression();
                this.state = 2115;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 3 || _la === 39 || _la === 105) {
                    {
                    this.state = 2114;
                    this.tableColumnPropertyExpression();
                    }
                }

                this.state = 2119;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2117;
                    this.match(ClickHouseParser.COMMENT);
                    this.state = 2118;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 2122;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2121;
                    this.codecExpression();
                    }
                }

                this.state = 2126;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178) {
                    {
                    this.state = 2124;
                    this.match(ClickHouseParser.TTL);
                    this.state = 2125;
                    this.columnExpression(0);
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2128;
                this.columnIdentifier();
                this.state = 2130;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 278, this.context) ) {
                case 1:
                    {
                    this.state = 2129;
                    this.columnTypeExpression();
                    }
                    break;
                }
                this.state = 2132;
                this.tableColumnPropertyExpression();
                this.state = 2135;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 28) {
                    {
                    this.state = 2133;
                    this.match(ClickHouseParser.COMMENT);
                    this.state = 2134;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                }

                this.state = 2138;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 25) {
                    {
                    this.state = 2137;
                    this.codecExpression();
                    }
                }

                this.state = 2142;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178) {
                    {
                    this.state = 2140;
                    this.match(ClickHouseParser.TTL);
                    this.state = 2141;
                    this.columnExpression(0);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableColumnPropertyExpression(): TableColumnPropertyExpressionContext {
        let localContext = new TableColumnPropertyExpressionContext(this.context, this.state);
        this.enterRule(localContext, 234, ClickHouseParser.RULE_tableColumnPropertyExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2146;
            _la = this.tokenStream.LA(1);
            if(!(_la === 3 || _la === 39 || _la === 105)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2147;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIndexDefinition(): TableIndexDefinitionContext {
        let localContext = new TableIndexDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 236, ClickHouseParser.RULE_tableIndexDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2149;
            this.columnIdentifier();
            this.state = 2150;
            this.columnExpression(0);
            this.state = 2151;
            this.match(ClickHouseParser.TYPE);
            this.state = 2152;
            this.columnTypeExpression();
            this.state = 2153;
            this.match(ClickHouseParser.GRANULARITY);
            this.state = 2154;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext {
        let localContext = new TableProjectionDefinitionContext(this.context, this.state);
        this.enterRule(localContext, 238, ClickHouseParser.RULE_tableProjectionDefinition);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2156;
            this.columnIdentifier();
            this.state = 2157;
            this.projectionSelectStatement();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public codecExpression(): CodecExpressionContext {
        let localContext = new CodecExpressionContext(this.context, this.state);
        this.enterRule(localContext, 240, ClickHouseParser.RULE_codecExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2159;
            this.match(ClickHouseParser.CODEC);
            this.state = 2160;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2161;
            this.codecArgExpression();
            this.state = 2166;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 2162;
                this.match(ClickHouseParser.COMMA);
                this.state = 2163;
                this.codecArgExpression();
                }
                }
                this.state = 2168;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2169;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public codecArgExpression(): CodecArgExpressionContext {
        let localContext = new CodecArgExpressionContext(this.context, this.state);
        this.enterRule(localContext, 242, ClickHouseParser.RULE_codecArgExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2171;
            this.identifier();
            this.state = 2177;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 412) {
                {
                this.state = 2172;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2174;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967295) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294967295) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 4294967295) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 4294967295) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & 4294967295) !== 0) || ((((_la - 385)) & ~0x1F) === 0 && ((1 << (_la - 385)) & 2316048383) !== 0)) {
                    {
                    this.state = 2173;
                    this.columnExpressionList();
                    }
                }

                this.state = 2176;
                this.match(ClickHouseParser.RPAREN);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ttlExpression(): TtlExpressionContext {
        let localContext = new TtlExpressionContext(this.context, this.state);
        this.enterRule(localContext, 244, ClickHouseParser.RULE_ttlExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2179;
            this.columnExpression(0);
            this.state = 2187;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 286, this.context) ) {
            case 1:
                {
                this.state = 2180;
                this.match(ClickHouseParser.DELETE);
                }
                break;
            case 2:
                {
                this.state = 2181;
                this.match(ClickHouseParser.TO);
                this.state = 2182;
                this.match(ClickHouseParser.DISK);
                this.state = 2183;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 3:
                {
                this.state = 2184;
                this.match(ClickHouseParser.TO);
                this.state = 2185;
                this.match(ClickHouseParser.VOLUME);
                this.state = 2186;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public describeStatement(): DescribeStatementContext {
        let localContext = new DescribeStatementContext(this.context, this.state);
        this.enterRule(localContext, 246, ClickHouseParser.RULE_describeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2189;
            _la = this.tokenStream.LA(1);
            if(!(_la === 42 || _la === 44)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2191;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 287, this.context) ) {
            case 1:
                {
                this.state = 2190;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 2193;
            this.tableExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropStatement(): DropStatementContext {
        let localContext = new DropStatementContext(this.context, this.state);
        this.enterRule(localContext, 248, ClickHouseParser.RULE_dropStatement);
        let _la: number;
        try {
            this.state = 2226;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 295, this.context) ) {
            case 1:
                localContext = new DropDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2195;
                _la = this.tokenStream.LA(1);
                if(!(_la === 45 || _la === 51)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2196;
                this.match(ClickHouseParser.DATABASE);
                this.state = 2199;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 288, this.context) ) {
                case 1:
                    {
                    this.state = 2197;
                    this.match(ClickHouseParser.IF);
                    this.state = 2198;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 2201;
                this.databaseIdentifier();
                this.state = 2203;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 120) {
                    {
                    this.state = 2202;
                    this.clusterClause();
                    }
                }

                }
                break;
            case 2:
                localContext = new DropTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2205;
                _la = this.tokenStream.LA(1);
                if(!(_la === 45 || _la === 51)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2212;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.DICTIONARY:
                    {
                    this.state = 2206;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case ClickHouseParser.TABLE:
                case ClickHouseParser.TEMPORARY:
                    {
                    this.state = 2208;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 165) {
                        {
                        this.state = 2207;
                        this.match(ClickHouseParser.TEMPORARY);
                        }
                    }

                    this.state = 2210;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                case ClickHouseParser.VIEW:
                    {
                    this.state = 2211;
                    this.match(ClickHouseParser.VIEW);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2216;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 292, this.context) ) {
                case 1:
                    {
                    this.state = 2214;
                    this.match(ClickHouseParser.IF);
                    this.state = 2215;
                    this.match(ClickHouseParser.EXISTS);
                    }
                    break;
                }
                this.state = 2218;
                this.tableIdentifier();
                this.state = 2220;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 120) {
                    {
                    this.state = 2219;
                    this.clusterClause();
                    }
                }

                this.state = 2224;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 115) {
                    {
                    this.state = 2222;
                    this.match(ClickHouseParser.NO);
                    this.state = 2223;
                    this.match(ClickHouseParser.DELAY);
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public existsStatement(): ExistsStatementContext {
        let localContext = new ExistsStatementContext(this.context, this.state);
        this.enterRule(localContext, 250, ClickHouseParser.RULE_existsStatement);
        let _la: number;
        try {
            this.state = 2241;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 298, this.context) ) {
            case 1:
                localContext = new ExistsDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2228;
                this.match(ClickHouseParser.EXISTS);
                this.state = 2229;
                this.match(ClickHouseParser.DATABASE);
                this.state = 2230;
                this.databaseIdentifier();
                }
                break;
            case 2:
                localContext = new ExistsTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2231;
                this.match(ClickHouseParser.EXISTS);
                this.state = 2238;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 297, this.context) ) {
                case 1:
                    {
                    this.state = 2232;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case 2:
                    {
                    this.state = 2234;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 165) {
                        {
                        this.state = 2233;
                        this.match(ClickHouseParser.TEMPORARY);
                        }
                    }

                    this.state = 2236;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                case 3:
                    {
                    this.state = 2237;
                    this.match(ClickHouseParser.VIEW);
                    }
                    break;
                }
                this.state = 2240;
                this.tableIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public explainStatement(): ExplainStatementContext {
        let localContext = new ExplainStatementContext(this.context, this.state);
        this.enterRule(localContext, 252, ClickHouseParser.RULE_explainStatement);
        try {
            this.state = 2264;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 299, this.context) ) {
            case 1:
                localContext = new ExplainDefaultStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2243;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 2244;
                this.notInsertStatement();
                }
                break;
            case 2:
                localContext = new ExplainASTStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2245;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 2246;
                this.match(ClickHouseParser.AST);
                this.state = 2247;
                this.notInsertStatement();
                }
                break;
            case 3:
                localContext = new ExplainSyntaxStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2248;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 2249;
                this.match(ClickHouseParser.SYNTAX);
                this.state = 2250;
                this.notInsertStatement();
                }
                break;
            case 4:
                localContext = new ExplainPipelineStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2251;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 2252;
                this.match(ClickHouseParser.PIPELINE);
                this.state = 2253;
                this.notInsertStatement();
                }
                break;
            case 5:
                localContext = new ExplainPlanStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2254;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 2255;
                this.match(ClickHouseParser.PLAN);
                this.state = 2256;
                this.notInsertStatement();
                }
                break;
            case 6:
                localContext = new ExplainQueryTreeStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2257;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 2258;
                this.match(ClickHouseParser.QUERY);
                this.state = 2259;
                this.match(ClickHouseParser.TREE);
                this.state = 2260;
                this.notInsertStatement();
                }
                break;
            case 7:
                localContext = new ExplainEstimateStatementContext(localContext);
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2261;
                this.match(ClickHouseParser.EXPLAIN);
                this.state = 2262;
                this.match(ClickHouseParser.ESTIMATE);
                this.state = 2263;
                this.notInsertStatement();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public revokeStatement(): RevokeStatementContext {
        let localContext = new RevokeStatementContext(this.context, this.state);
        this.enterRule(localContext, 254, ClickHouseParser.RULE_revokeStatement);
        let _la: number;
        try {
            this.state = 2294;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 304, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2266;
                this.match(ClickHouseParser.REVOKE);
                this.state = 2268;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 120) {
                    {
                    this.state = 2267;
                    this.clusterClause();
                    }
                }

                this.state = 2273;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 196) {
                    {
                    this.state = 2270;
                    this.match(ClickHouseParser.GRANT);
                    this.state = 2271;
                    this.match(ClickHouseParser.OPTION);
                    this.state = 2272;
                    this.match(ClickHouseParser.FOR);
                    }
                }

                this.state = 2275;
                this.privilegeList();
                this.state = 2276;
                this.match(ClickHouseParser.ON);
                this.state = 2277;
                this.accessSubjectIdentifier();
                this.state = 2278;
                this.match(ClickHouseParser.FROM);
                this.state = 2279;
                this.subjectExpressionList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2281;
                this.match(ClickHouseParser.REVOKE);
                this.state = 2283;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 302, this.context) ) {
                case 1:
                    {
                    this.state = 2282;
                    this.clusterClause();
                    }
                    break;
                }
                this.state = 2288;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 303, this.context) ) {
                case 1:
                    {
                    this.state = 2285;
                    this.match(ClickHouseParser.ADMIN);
                    this.state = 2286;
                    this.match(ClickHouseParser.OPTION);
                    this.state = 2287;
                    this.match(ClickHouseParser.FOR);
                    }
                    break;
                }
                this.state = 2290;
                this.roleExpressionList();
                this.state = 2291;
                this.match(ClickHouseParser.FROM);
                this.state = 2292;
                this.subjectExpressionList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public subjectExpressionList(): SubjectExpressionListContext {
        let localContext = new SubjectExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 256, ClickHouseParser.RULE_subjectExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2296;
            this.subjectExpression();
            this.state = 2301;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 2297;
                this.match(ClickHouseParser.COMMA);
                this.state = 2298;
                this.subjectExpression();
                }
                }
                this.state = 2303;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userExpressionList(): UserExpressionListContext {
        let localContext = new UserExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 258, ClickHouseParser.RULE_userExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2304;
            this.userIdentifier();
            this.state = 2309;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 2305;
                this.match(ClickHouseParser.COMMA);
                this.state = 2306;
                this.userIdentifier();
                }
                }
                this.state = 2311;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleExpressionList(): RoleExpressionListContext {
        let localContext = new RoleExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 260, ClickHouseParser.RULE_roleExpressionList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2312;
            this.roleIdentifier();
            this.state = 2317;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 2313;
                this.match(ClickHouseParser.COMMA);
                this.state = 2314;
                this.roleIdentifier();
                }
                }
                this.state = 2319;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public grantStatement(): GrantStatementContext {
        let localContext = new GrantStatementContext(this.context, this.state);
        this.enterRule(localContext, 262, ClickHouseParser.RULE_grantStatement);
        let _la: number;
        try {
            this.state = 2374;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 314, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2320;
                this.match(ClickHouseParser.GRANT);
                this.state = 2322;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 120) {
                    {
                    this.state = 2321;
                    this.clusterClause();
                    }
                }

                {
                this.state = 2324;
                this.privilegeList();
                this.state = 2325;
                this.match(ClickHouseParser.ON);
                this.state = 2326;
                this.accessSubjectIdentifier();
                }
                this.state = 2335;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 401) {
                    {
                    {
                    this.state = 2328;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2329;
                    this.privilegeList();
                    this.state = 2330;
                    this.match(ClickHouseParser.ON);
                    this.state = 2331;
                    this.accessSubjectIdentifier();
                    }
                    }
                    this.state = 2337;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 2338;
                this.match(ClickHouseParser.TO);
                this.state = 2339;
                this.userOrRoleExpressionList();
                this.state = 2340;
                this.withGrantOrReplaceOption();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2342;
                this.match(ClickHouseParser.GRANT);
                this.state = 2344;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 310, this.context) ) {
                case 1:
                    {
                    this.state = 2343;
                    this.clusterClause();
                    }
                    break;
                }
                this.state = 2346;
                this.roleExpressionList();
                this.state = 2347;
                this.match(ClickHouseParser.TO);
                this.state = 2348;
                this.userOrRoleExpressionList();
                this.state = 2352;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 311, this.context) ) {
                case 1:
                    {
                    this.state = 2349;
                    this.match(ClickHouseParser.WITH);
                    this.state = 2350;
                    this.match(ClickHouseParser.ADMIN);
                    this.state = 2351;
                    this.match(ClickHouseParser.OPTION);
                    }
                    break;
                }
                this.state = 2355;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 194) {
                    {
                    this.state = 2354;
                    this.withReplaceOption();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2357;
                this.match(ClickHouseParser.GRANT);
                this.state = 2358;
                this.match(ClickHouseParser.CURRENT);
                this.state = 2359;
                this.match(ClickHouseParser.GRANTS);
                this.state = 2368;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.LPAREN:
                    {
                    {
                    this.state = 2360;
                    this.match(ClickHouseParser.LPAREN);
                    this.state = 2361;
                    this.privilegeList();
                    this.state = 2362;
                    this.match(ClickHouseParser.ON);
                    this.state = 2363;
                    this.accessSubjectIdentifier();
                    this.state = 2364;
                    this.match(ClickHouseParser.RPAREN);
                    }
                    }
                    break;
                case ClickHouseParser.ON:
                    {
                    this.state = 2366;
                    this.match(ClickHouseParser.ON);
                    this.state = 2367;
                    this.accessSubjectIdentifier();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 2370;
                this.match(ClickHouseParser.TO);
                this.state = 2371;
                this.userOrRoleExpressionList();
                this.state = 2372;
                this.withGrantOrReplaceOption();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withGrantOrReplaceOption(): WithGrantOrReplaceOptionContext {
        let localContext = new WithGrantOrReplaceOptionContext(this.context, this.state);
        this.enterRule(localContext, 264, ClickHouseParser.RULE_withGrantOrReplaceOption);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2379;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 315, this.context) ) {
            case 1:
                {
                this.state = 2376;
                this.match(ClickHouseParser.WITH);
                this.state = 2377;
                this.match(ClickHouseParser.GRANT);
                this.state = 2378;
                this.match(ClickHouseParser.OPTION);
                }
                break;
            }
            this.state = 2382;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 194) {
                {
                this.state = 2381;
                this.withReplaceOption();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withReplaceOption(): WithReplaceOptionContext {
        let localContext = new WithReplaceOptionContext(this.context, this.state);
        this.enterRule(localContext, 266, ClickHouseParser.RULE_withReplaceOption);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2384;
            this.match(ClickHouseParser.WITH);
            this.state = 2385;
            this.match(ClickHouseParser.REPLACE);
            this.state = 2386;
            this.match(ClickHouseParser.OPTION);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public accessSubjectIdentifier(): AccessSubjectIdentifierContext {
        let localContext = new AccessSubjectIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 268, ClickHouseParser.RULE_accessSubjectIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2401;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 320, this.context) ) {
            case 1:
                {
                this.state = 2388;
                this.databaseIdentifier();
                }
                break;
            case 2:
                {
                this.state = 2389;
                this.tableIdentifier();
                }
                break;
            case 3:
                {
                this.state = 2395;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 318, this.context) ) {
                case 1:
                    {
                    this.state = 2392;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case ClickHouseParser.ASTERISK:
                        {
                        this.state = 2390;
                        this.match(ClickHouseParser.ASTERISK);
                        }
                        break;
                    case ClickHouseParser.ADD:
                    case ClickHouseParser.AFTER:
                    case ClickHouseParser.ALIAS:
                    case ClickHouseParser.ALL:
                    case ClickHouseParser.ALTER:
                    case ClickHouseParser.AND:
                    case ClickHouseParser.ANTI:
                    case ClickHouseParser.ANY:
                    case ClickHouseParser.ARRAY:
                    case ClickHouseParser.AS:
                    case ClickHouseParser.ASC:
                    case ClickHouseParser.ASCENDING:
                    case ClickHouseParser.ASOF:
                    case ClickHouseParser.AST:
                    case ClickHouseParser.ASYNC:
                    case ClickHouseParser.ATTACH:
                    case ClickHouseParser.BETWEEN:
                    case ClickHouseParser.BOTH:
                    case ClickHouseParser.BY:
                    case ClickHouseParser.CASE:
                    case ClickHouseParser.CAST:
                    case ClickHouseParser.CHECK:
                    case ClickHouseParser.CLEAR:
                    case ClickHouseParser.CLUSTER:
                    case ClickHouseParser.CODEC:
                    case ClickHouseParser.COLLATE:
                    case ClickHouseParser.COLUMN:
                    case ClickHouseParser.COMMENT:
                    case ClickHouseParser.CONSTRAINT:
                    case ClickHouseParser.CREATE:
                    case ClickHouseParser.CROSS:
                    case ClickHouseParser.CUBE:
                    case ClickHouseParser.CURRENT:
                    case ClickHouseParser.DATABASE:
                    case ClickHouseParser.DATABASES:
                    case ClickHouseParser.DATE:
                    case ClickHouseParser.DAY:
                    case ClickHouseParser.DEDUPLICATE:
                    case ClickHouseParser.DEFAULT:
                    case ClickHouseParser.DELAY:
                    case ClickHouseParser.DELETE:
                    case ClickHouseParser.DESC:
                    case ClickHouseParser.DESCENDING:
                    case ClickHouseParser.DESCRIBE:
                    case ClickHouseParser.DETACH:
                    case ClickHouseParser.DICTIONARIES:
                    case ClickHouseParser.DICTIONARY:
                    case ClickHouseParser.DISK:
                    case ClickHouseParser.DISTINCT:
                    case ClickHouseParser.DISTRIBUTED:
                    case ClickHouseParser.DROP:
                    case ClickHouseParser.ELSE:
                    case ClickHouseParser.END:
                    case ClickHouseParser.ENGINE:
                    case ClickHouseParser.ESTIMATE:
                    case ClickHouseParser.EVENTS:
                    case ClickHouseParser.EXISTS:
                    case ClickHouseParser.EXPLAIN:
                    case ClickHouseParser.EXPRESSION:
                    case ClickHouseParser.EXTRACT:
                    case ClickHouseParser.FETCHES:
                    case ClickHouseParser.FINAL:
                    case ClickHouseParser.FIRST:
                    case ClickHouseParser.FLUSH:
                    case ClickHouseParser.FOLLOWING:
                    case ClickHouseParser.FOR:
                    case ClickHouseParser.FORMAT:
                    case ClickHouseParser.FREEZE:
                    case ClickHouseParser.FROM:
                    case ClickHouseParser.FULL:
                    case ClickHouseParser.FUNCTION:
                    case ClickHouseParser.GLOBAL:
                    case ClickHouseParser.GRANULARITY:
                    case ClickHouseParser.GROUP:
                    case ClickHouseParser.HAVING:
                    case ClickHouseParser.HIERARCHICAL:
                    case ClickHouseParser.HOUR:
                    case ClickHouseParser.ID:
                    case ClickHouseParser.IF:
                    case ClickHouseParser.ILIKE:
                    case ClickHouseParser.IN:
                    case ClickHouseParser.INDEX:
                    case ClickHouseParser.INF:
                    case ClickHouseParser.INJECTIVE:
                    case ClickHouseParser.INNER:
                    case ClickHouseParser.INSERT:
                    case ClickHouseParser.INTERVAL:
                    case ClickHouseParser.INTO:
                    case ClickHouseParser.IS:
                    case ClickHouseParser.IS_OBJECT_ID:
                    case ClickHouseParser.JOIN:
                    case ClickHouseParser.KEY:
                    case ClickHouseParser.KILL:
                    case ClickHouseParser.LAST:
                    case ClickHouseParser.LAYOUT:
                    case ClickHouseParser.LEADING:
                    case ClickHouseParser.LEFT:
                    case ClickHouseParser.LIFETIME:
                    case ClickHouseParser.LIKE:
                    case ClickHouseParser.LIMIT:
                    case ClickHouseParser.LIVE:
                    case ClickHouseParser.LOCAL:
                    case ClickHouseParser.LOGS:
                    case ClickHouseParser.MATERIALIZE:
                    case ClickHouseParser.MATERIALIZED:
                    case ClickHouseParser.MAX:
                    case ClickHouseParser.MERGES:
                    case ClickHouseParser.MIN:
                    case ClickHouseParser.MINUTE:
                    case ClickHouseParser.MODIFY:
                    case ClickHouseParser.MONTH:
                    case ClickHouseParser.MOVE:
                    case ClickHouseParser.MUTATION:
                    case ClickHouseParser.NO:
                    case ClickHouseParser.NOT:
                    case ClickHouseParser.NULLS:
                    case ClickHouseParser.OFFSET:
                    case ClickHouseParser.ON:
                    case ClickHouseParser.OPTIMIZE:
                    case ClickHouseParser.OR:
                    case ClickHouseParser.ORDER:
                    case ClickHouseParser.OUTER:
                    case ClickHouseParser.OUTFILE:
                    case ClickHouseParser.OVER:
                    case ClickHouseParser.PARTITION:
                    case ClickHouseParser.PIPELINE:
                    case ClickHouseParser.PLAN:
                    case ClickHouseParser.POPULATE:
                    case ClickHouseParser.PRECEDING:
                    case ClickHouseParser.PREWHERE:
                    case ClickHouseParser.PRIMARY:
                    case ClickHouseParser.PROJECTION:
                    case ClickHouseParser.QUARTER:
                    case ClickHouseParser.QUERY:
                    case ClickHouseParser.RANGE:
                    case ClickHouseParser.RELOAD:
                    case ClickHouseParser.REMOVE:
                    case ClickHouseParser.RENAME:
                    case ClickHouseParser.REPLACE:
                    case ClickHouseParser.REPLICA:
                    case ClickHouseParser.REPLICATED:
                    case ClickHouseParser.RIGHT:
                    case ClickHouseParser.ROLLUP:
                    case ClickHouseParser.ROW:
                    case ClickHouseParser.ROWS:
                    case ClickHouseParser.SAMPLE:
                    case ClickHouseParser.SECOND:
                    case ClickHouseParser.SELECT:
                    case ClickHouseParser.SEMI:
                    case ClickHouseParser.SENDS:
                    case ClickHouseParser.SET:
                    case ClickHouseParser.SETTINGS:
                    case ClickHouseParser.SHOW:
                    case ClickHouseParser.SOURCE:
                    case ClickHouseParser.START:
                    case ClickHouseParser.STOP:
                    case ClickHouseParser.SUBSTRING:
                    case ClickHouseParser.SYNC:
                    case ClickHouseParser.SYNTAX:
                    case ClickHouseParser.SYSTEM:
                    case ClickHouseParser.TABLE:
                    case ClickHouseParser.TABLES:
                    case ClickHouseParser.TEMPORARY:
                    case ClickHouseParser.TEST:
                    case ClickHouseParser.THEN:
                    case ClickHouseParser.TIES:
                    case ClickHouseParser.TIMEOUT:
                    case ClickHouseParser.TIMESTAMP:
                    case ClickHouseParser.TO:
                    case ClickHouseParser.TOP:
                    case ClickHouseParser.TOTALS:
                    case ClickHouseParser.TRAILING:
                    case ClickHouseParser.TRIM:
                    case ClickHouseParser.TREE:
                    case ClickHouseParser.TRUNCATE:
                    case ClickHouseParser.TTL:
                    case ClickHouseParser.TYPE:
                    case ClickHouseParser.UNBOUNDED:
                    case ClickHouseParser.UNION:
                    case ClickHouseParser.UPDATE:
                    case ClickHouseParser.USE:
                    case ClickHouseParser.USING:
                    case ClickHouseParser.UUID:
                    case ClickHouseParser.VALUES:
                    case ClickHouseParser.VIEW:
                    case ClickHouseParser.VOLUME:
                    case ClickHouseParser.WATCH:
                    case ClickHouseParser.WEEK:
                    case ClickHouseParser.WHEN:
                    case ClickHouseParser.WHERE:
                    case ClickHouseParser.WINDOW:
                    case ClickHouseParser.WITH:
                    case ClickHouseParser.YEAR:
                    case ClickHouseParser.GRANT:
                    case ClickHouseParser.USER:
                    case ClickHouseParser.FETCH:
                    case ClickHouseParser.REFRESH:
                    case ClickHouseParser.POLICY:
                    case ClickHouseParser.QUOTA:
                    case ClickHouseParser.ROLE:
                    case ClickHouseParser.PROFILE:
                    case ClickHouseParser.ARBITRARY:
                    case ClickHouseParser.COLUMNS:
                    case ClickHouseParser.CURRENT_USER:
                    case ClickHouseParser.ACCESS:
                    case ClickHouseParser.SHOW_USERS:
                    case ClickHouseParser.SHOW_ROLES:
                    case ClickHouseParser.SHOW_ROW_POLICIES:
                    case ClickHouseParser.SHOW_QUOTAS:
                    case ClickHouseParser.SHOW_SETTINGS_PROFILES:
                    case ClickHouseParser.SHUTDOWN:
                    case ClickHouseParser.CACHE:
                    case ClickHouseParser.DNS:
                    case ClickHouseParser.MARK:
                    case ClickHouseParser.MARKS:
                    case ClickHouseParser.PART:
                    case ClickHouseParser.UNCOMPRESSED:
                    case ClickHouseParser.CONFIG:
                    case ClickHouseParser.EMBEDDED:
                    case ClickHouseParser.FUNCTIONS:
                    case ClickHouseParser.MOVES:
                    case ClickHouseParser.REPLICATION:
                    case ClickHouseParser.QUEUES:
                    case ClickHouseParser.RESTART:
                    case ClickHouseParser.DICTGET:
                    case ClickHouseParser.DICTGETHIERARCHY:
                    case ClickHouseParser.DICTHAS:
                    case ClickHouseParser.DICTISIN:
                    case ClickHouseParser.MANAGEMENT:
                    case ClickHouseParser.ADMIN:
                    case ClickHouseParser.NAMED:
                    case ClickHouseParser.COLLECTION:
                    case ClickHouseParser.CONTROL:
                    case ClickHouseParser.COLLECTIONS:
                    case ClickHouseParser.SECRETS:
                    case ClickHouseParser.USAGE:
                    case ClickHouseParser.INTROSPECTION:
                    case ClickHouseParser.ADDRESSTOLINE:
                    case ClickHouseParser.ADDRESSTOSYMBOL:
                    case ClickHouseParser.DEMANGLE:
                    case ClickHouseParser.SOURCES:
                    case ClickHouseParser.FILE:
                    case ClickHouseParser.URL:
                    case ClickHouseParser.REMOTE:
                    case ClickHouseParser.MYSQL:
                    case ClickHouseParser.ODBC:
                    case ClickHouseParser.JDBC:
                    case ClickHouseParser.HDFS:
                    case ClickHouseParser.S3:
                    case ClickHouseParser.SETTING:
                    case ClickHouseParser.OPTION:
                    case ClickHouseParser.NONE:
                    case ClickHouseParser.AZURE:
                    case ClickHouseParser.HIVE:
                    case ClickHouseParser.MONGO:
                    case ClickHouseParser.POSTGRES:
                    case ClickHouseParser.REDIS:
                    case ClickHouseParser.SQLITE:
                    case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
                    case ClickHouseParser.SQL:
                    case ClickHouseParser.SECURITY:
                    case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
                    case ClickHouseParser.POLICIES:
                    case ClickHouseParser.PROFILES:
                    case ClickHouseParser.ALLOW:
                    case ClickHouseParser.GRANTS:
                    case ClickHouseParser.EXCEPT:
                    case ClickHouseParser.REVOKE:
                    case ClickHouseParser.IDENTIFIED:
                    case ClickHouseParser.PLAINTEXT_PASSWORD:
                    case ClickHouseParser.SHA256_PASSWORD:
                    case ClickHouseParser.SHA256_HASH:
                    case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
                    case ClickHouseParser.DOUBLE_SHA1_HASH:
                    case ClickHouseParser.NO_PASSWORD:
                    case ClickHouseParser.LDAP:
                    case ClickHouseParser.SERVER:
                    case ClickHouseParser.KERBEROS:
                    case ClickHouseParser.REALM:
                    case ClickHouseParser.SSL_CERTIFICATE:
                    case ClickHouseParser.SAN:
                    case ClickHouseParser.CN:
                    case ClickHouseParser.SSH_KEY:
                    case ClickHouseParser.HTTP:
                    case ClickHouseParser.SCHEME:
                    case ClickHouseParser.BCRYPT_PASSWORD:
                    case ClickHouseParser.BCRYPT_HASH:
                    case ClickHouseParser.VALID:
                    case ClickHouseParser.UNTIL:
                    case ClickHouseParser.GRANTEES:
                    case ClickHouseParser.NAME:
                    case ClickHouseParser.REGEXP:
                    case ClickHouseParser.IP:
                    case ClickHouseParser.HOST:
                    case ClickHouseParser.READONLY:
                    case ClickHouseParser.WRITABLE:
                    case ClickHouseParser.PERMISSIVE:
                    case ClickHouseParser.RESTRICTIVE:
                    case ClickHouseParser.TABSEPARATED:
                    case ClickHouseParser.TABSEPARATEDRAW:
                    case ClickHouseParser.TABSEPARATEDWITHNAMES:
                    case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
                    case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
                    case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
                    case ClickHouseParser.TEMPLATE:
                    case ClickHouseParser.TEMPLATEIGNORESPACES:
                    case ClickHouseParser.CSV:
                    case ClickHouseParser.CSVWITHNAMES:
                    case ClickHouseParser.CSVWITHNAMESANDTYPES:
                    case ClickHouseParser.CUSTOMSEPARATED:
                    case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
                    case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
                    case ClickHouseParser.JSON:
                    case ClickHouseParser.JSONASSTRING:
                    case ClickHouseParser.JSONASOBJECT:
                    case ClickHouseParser.JSONSTRINGS:
                    case ClickHouseParser.JSONCOLUMNS:
                    case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
                    case ClickHouseParser.JSONCOMPACT:
                    case ClickHouseParser.JSONCOMPACTCOLUMNS:
                    case ClickHouseParser.JSONEACHROW:
                    case ClickHouseParser.JSONSTRINGSEACHROW:
                    case ClickHouseParser.JSONCOMPACTEACHROW:
                    case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
                    case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
                    case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
                    case ClickHouseParser.JSONOBJECTEACHROW:
                    case ClickHouseParser.BSONEACHROW:
                    case ClickHouseParser.TSKV:
                    case ClickHouseParser.PROTOBUF:
                    case ClickHouseParser.PROTOBUFSINGLE:
                    case ClickHouseParser.PROTOBUFLIST:
                    case ClickHouseParser.AVRO:
                    case ClickHouseParser.AVROCONFLUENT:
                    case ClickHouseParser.PARQUET:
                    case ClickHouseParser.PARQUETMETADATA:
                    case ClickHouseParser.ARROW:
                    case ClickHouseParser.ARROWSTREAM:
                    case ClickHouseParser.ORC:
                    case ClickHouseParser.ONE:
                    case ClickHouseParser.NPY:
                    case ClickHouseParser.ROWBINARY:
                    case ClickHouseParser.ROWBINARYWITHNAMES:
                    case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
                    case ClickHouseParser.ROWBINARYWITHDEFAULTS:
                    case ClickHouseParser.NATIVE:
                    case ClickHouseParser.CAPNPROTO:
                    case ClickHouseParser.LINEASSTRING:
                    case ClickHouseParser.RAWBLOB:
                    case ClickHouseParser.MSGPACK:
                    case ClickHouseParser.MYSQLDUMP:
                    case ClickHouseParser.DWARF:
                    case ClickHouseParser.FORM:
                    case ClickHouseParser.KEYED:
                    case ClickHouseParser.RANDOMIZED:
                    case ClickHouseParser.USER_NAME:
                    case ClickHouseParser.IP_ADDRESS:
                    case ClickHouseParser.FORWARDED_IP_ADDRESS:
                    case ClickHouseParser.CLIENT_KEY:
                    case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
                    case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
                    case ClickHouseParser.QUERIES:
                    case ClickHouseParser.QUERY_SELECTS:
                    case ClickHouseParser.QUERY_INSERTS:
                    case ClickHouseParser.ERRORS:
                    case ClickHouseParser.RESULT_ROWS:
                    case ClickHouseParser.RESULT_BYTES:
                    case ClickHouseParser.READ_ROWS:
                    case ClickHouseParser.READ_BYTES:
                    case ClickHouseParser.EXECUTION_TIME:
                    case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
                    case ClickHouseParser.LIMITS:
                    case ClickHouseParser.TRACKING:
                    case ClickHouseParser.ONLY:
                    case ClickHouseParser.CONST:
                    case ClickHouseParser.CHANGEABLE_IN_READONLY:
                    case ClickHouseParser.OVERRIDABLE:
                    case ClickHouseParser.INHERIT:
                    case ClickHouseParser.RESET:
                    case ClickHouseParser.DETACHED:
                    case ClickHouseParser.FORGET:
                    case ClickHouseParser.STATISTICS:
                    case ClickHouseParser.UNFREEZE:
                    case ClickHouseParser.JSON_FALSE:
                    case ClickHouseParser.JSON_TRUE:
                    case ClickHouseParser.IDENTIFIER:
                        {
                        this.state = 2391;
                        this.identifier();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    this.state = 2394;
                    this.match(ClickHouseParser.DOT);
                    }
                    break;
                }
                this.state = 2399;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.ASTERISK:
                    {
                    this.state = 2397;
                    this.match(ClickHouseParser.ASTERISK);
                    }
                    break;
                case ClickHouseParser.ADD:
                case ClickHouseParser.AFTER:
                case ClickHouseParser.ALIAS:
                case ClickHouseParser.ALL:
                case ClickHouseParser.ALTER:
                case ClickHouseParser.AND:
                case ClickHouseParser.ANTI:
                case ClickHouseParser.ANY:
                case ClickHouseParser.ARRAY:
                case ClickHouseParser.AS:
                case ClickHouseParser.ASC:
                case ClickHouseParser.ASCENDING:
                case ClickHouseParser.ASOF:
                case ClickHouseParser.AST:
                case ClickHouseParser.ASYNC:
                case ClickHouseParser.ATTACH:
                case ClickHouseParser.BETWEEN:
                case ClickHouseParser.BOTH:
                case ClickHouseParser.BY:
                case ClickHouseParser.CASE:
                case ClickHouseParser.CAST:
                case ClickHouseParser.CHECK:
                case ClickHouseParser.CLEAR:
                case ClickHouseParser.CLUSTER:
                case ClickHouseParser.CODEC:
                case ClickHouseParser.COLLATE:
                case ClickHouseParser.COLUMN:
                case ClickHouseParser.COMMENT:
                case ClickHouseParser.CONSTRAINT:
                case ClickHouseParser.CREATE:
                case ClickHouseParser.CROSS:
                case ClickHouseParser.CUBE:
                case ClickHouseParser.CURRENT:
                case ClickHouseParser.DATABASE:
                case ClickHouseParser.DATABASES:
                case ClickHouseParser.DATE:
                case ClickHouseParser.DAY:
                case ClickHouseParser.DEDUPLICATE:
                case ClickHouseParser.DEFAULT:
                case ClickHouseParser.DELAY:
                case ClickHouseParser.DELETE:
                case ClickHouseParser.DESC:
                case ClickHouseParser.DESCENDING:
                case ClickHouseParser.DESCRIBE:
                case ClickHouseParser.DETACH:
                case ClickHouseParser.DICTIONARIES:
                case ClickHouseParser.DICTIONARY:
                case ClickHouseParser.DISK:
                case ClickHouseParser.DISTINCT:
                case ClickHouseParser.DISTRIBUTED:
                case ClickHouseParser.DROP:
                case ClickHouseParser.ELSE:
                case ClickHouseParser.END:
                case ClickHouseParser.ENGINE:
                case ClickHouseParser.ESTIMATE:
                case ClickHouseParser.EVENTS:
                case ClickHouseParser.EXISTS:
                case ClickHouseParser.EXPLAIN:
                case ClickHouseParser.EXPRESSION:
                case ClickHouseParser.EXTRACT:
                case ClickHouseParser.FETCHES:
                case ClickHouseParser.FINAL:
                case ClickHouseParser.FIRST:
                case ClickHouseParser.FLUSH:
                case ClickHouseParser.FOLLOWING:
                case ClickHouseParser.FOR:
                case ClickHouseParser.FORMAT:
                case ClickHouseParser.FREEZE:
                case ClickHouseParser.FROM:
                case ClickHouseParser.FULL:
                case ClickHouseParser.FUNCTION:
                case ClickHouseParser.GLOBAL:
                case ClickHouseParser.GRANULARITY:
                case ClickHouseParser.GROUP:
                case ClickHouseParser.HAVING:
                case ClickHouseParser.HIERARCHICAL:
                case ClickHouseParser.HOUR:
                case ClickHouseParser.ID:
                case ClickHouseParser.IF:
                case ClickHouseParser.ILIKE:
                case ClickHouseParser.IN:
                case ClickHouseParser.INDEX:
                case ClickHouseParser.INF:
                case ClickHouseParser.INJECTIVE:
                case ClickHouseParser.INNER:
                case ClickHouseParser.INSERT:
                case ClickHouseParser.INTERVAL:
                case ClickHouseParser.INTO:
                case ClickHouseParser.IS:
                case ClickHouseParser.IS_OBJECT_ID:
                case ClickHouseParser.JOIN:
                case ClickHouseParser.KEY:
                case ClickHouseParser.KILL:
                case ClickHouseParser.LAST:
                case ClickHouseParser.LAYOUT:
                case ClickHouseParser.LEADING:
                case ClickHouseParser.LEFT:
                case ClickHouseParser.LIFETIME:
                case ClickHouseParser.LIKE:
                case ClickHouseParser.LIMIT:
                case ClickHouseParser.LIVE:
                case ClickHouseParser.LOCAL:
                case ClickHouseParser.LOGS:
                case ClickHouseParser.MATERIALIZE:
                case ClickHouseParser.MATERIALIZED:
                case ClickHouseParser.MAX:
                case ClickHouseParser.MERGES:
                case ClickHouseParser.MIN:
                case ClickHouseParser.MINUTE:
                case ClickHouseParser.MODIFY:
                case ClickHouseParser.MONTH:
                case ClickHouseParser.MOVE:
                case ClickHouseParser.MUTATION:
                case ClickHouseParser.NO:
                case ClickHouseParser.NOT:
                case ClickHouseParser.NULLS:
                case ClickHouseParser.OFFSET:
                case ClickHouseParser.ON:
                case ClickHouseParser.OPTIMIZE:
                case ClickHouseParser.OR:
                case ClickHouseParser.ORDER:
                case ClickHouseParser.OUTER:
                case ClickHouseParser.OUTFILE:
                case ClickHouseParser.OVER:
                case ClickHouseParser.PARTITION:
                case ClickHouseParser.PIPELINE:
                case ClickHouseParser.PLAN:
                case ClickHouseParser.POPULATE:
                case ClickHouseParser.PRECEDING:
                case ClickHouseParser.PREWHERE:
                case ClickHouseParser.PRIMARY:
                case ClickHouseParser.PROJECTION:
                case ClickHouseParser.QUARTER:
                case ClickHouseParser.QUERY:
                case ClickHouseParser.RANGE:
                case ClickHouseParser.RELOAD:
                case ClickHouseParser.REMOVE:
                case ClickHouseParser.RENAME:
                case ClickHouseParser.REPLACE:
                case ClickHouseParser.REPLICA:
                case ClickHouseParser.REPLICATED:
                case ClickHouseParser.RIGHT:
                case ClickHouseParser.ROLLUP:
                case ClickHouseParser.ROW:
                case ClickHouseParser.ROWS:
                case ClickHouseParser.SAMPLE:
                case ClickHouseParser.SECOND:
                case ClickHouseParser.SELECT:
                case ClickHouseParser.SEMI:
                case ClickHouseParser.SENDS:
                case ClickHouseParser.SET:
                case ClickHouseParser.SETTINGS:
                case ClickHouseParser.SHOW:
                case ClickHouseParser.SOURCE:
                case ClickHouseParser.START:
                case ClickHouseParser.STOP:
                case ClickHouseParser.SUBSTRING:
                case ClickHouseParser.SYNC:
                case ClickHouseParser.SYNTAX:
                case ClickHouseParser.SYSTEM:
                case ClickHouseParser.TABLE:
                case ClickHouseParser.TABLES:
                case ClickHouseParser.TEMPORARY:
                case ClickHouseParser.TEST:
                case ClickHouseParser.THEN:
                case ClickHouseParser.TIES:
                case ClickHouseParser.TIMEOUT:
                case ClickHouseParser.TIMESTAMP:
                case ClickHouseParser.TO:
                case ClickHouseParser.TOP:
                case ClickHouseParser.TOTALS:
                case ClickHouseParser.TRAILING:
                case ClickHouseParser.TRIM:
                case ClickHouseParser.TREE:
                case ClickHouseParser.TRUNCATE:
                case ClickHouseParser.TTL:
                case ClickHouseParser.TYPE:
                case ClickHouseParser.UNBOUNDED:
                case ClickHouseParser.UNION:
                case ClickHouseParser.UPDATE:
                case ClickHouseParser.USE:
                case ClickHouseParser.USING:
                case ClickHouseParser.UUID:
                case ClickHouseParser.VALUES:
                case ClickHouseParser.VIEW:
                case ClickHouseParser.VOLUME:
                case ClickHouseParser.WATCH:
                case ClickHouseParser.WEEK:
                case ClickHouseParser.WHEN:
                case ClickHouseParser.WHERE:
                case ClickHouseParser.WINDOW:
                case ClickHouseParser.WITH:
                case ClickHouseParser.YEAR:
                case ClickHouseParser.GRANT:
                case ClickHouseParser.USER:
                case ClickHouseParser.FETCH:
                case ClickHouseParser.REFRESH:
                case ClickHouseParser.POLICY:
                case ClickHouseParser.QUOTA:
                case ClickHouseParser.ROLE:
                case ClickHouseParser.PROFILE:
                case ClickHouseParser.ARBITRARY:
                case ClickHouseParser.COLUMNS:
                case ClickHouseParser.CURRENT_USER:
                case ClickHouseParser.ACCESS:
                case ClickHouseParser.SHOW_USERS:
                case ClickHouseParser.SHOW_ROLES:
                case ClickHouseParser.SHOW_ROW_POLICIES:
                case ClickHouseParser.SHOW_QUOTAS:
                case ClickHouseParser.SHOW_SETTINGS_PROFILES:
                case ClickHouseParser.SHUTDOWN:
                case ClickHouseParser.CACHE:
                case ClickHouseParser.DNS:
                case ClickHouseParser.MARK:
                case ClickHouseParser.MARKS:
                case ClickHouseParser.PART:
                case ClickHouseParser.UNCOMPRESSED:
                case ClickHouseParser.CONFIG:
                case ClickHouseParser.EMBEDDED:
                case ClickHouseParser.FUNCTIONS:
                case ClickHouseParser.MOVES:
                case ClickHouseParser.REPLICATION:
                case ClickHouseParser.QUEUES:
                case ClickHouseParser.RESTART:
                case ClickHouseParser.DICTGET:
                case ClickHouseParser.DICTGETHIERARCHY:
                case ClickHouseParser.DICTHAS:
                case ClickHouseParser.DICTISIN:
                case ClickHouseParser.MANAGEMENT:
                case ClickHouseParser.ADMIN:
                case ClickHouseParser.NAMED:
                case ClickHouseParser.COLLECTION:
                case ClickHouseParser.CONTROL:
                case ClickHouseParser.COLLECTIONS:
                case ClickHouseParser.SECRETS:
                case ClickHouseParser.USAGE:
                case ClickHouseParser.INTROSPECTION:
                case ClickHouseParser.ADDRESSTOLINE:
                case ClickHouseParser.ADDRESSTOSYMBOL:
                case ClickHouseParser.DEMANGLE:
                case ClickHouseParser.SOURCES:
                case ClickHouseParser.FILE:
                case ClickHouseParser.URL:
                case ClickHouseParser.REMOTE:
                case ClickHouseParser.MYSQL:
                case ClickHouseParser.ODBC:
                case ClickHouseParser.JDBC:
                case ClickHouseParser.HDFS:
                case ClickHouseParser.S3:
                case ClickHouseParser.SETTING:
                case ClickHouseParser.OPTION:
                case ClickHouseParser.NONE:
                case ClickHouseParser.AZURE:
                case ClickHouseParser.HIVE:
                case ClickHouseParser.MONGO:
                case ClickHouseParser.POSTGRES:
                case ClickHouseParser.REDIS:
                case ClickHouseParser.SQLITE:
                case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
                case ClickHouseParser.SQL:
                case ClickHouseParser.SECURITY:
                case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
                case ClickHouseParser.POLICIES:
                case ClickHouseParser.PROFILES:
                case ClickHouseParser.ALLOW:
                case ClickHouseParser.GRANTS:
                case ClickHouseParser.EXCEPT:
                case ClickHouseParser.REVOKE:
                case ClickHouseParser.IDENTIFIED:
                case ClickHouseParser.PLAINTEXT_PASSWORD:
                case ClickHouseParser.SHA256_PASSWORD:
                case ClickHouseParser.SHA256_HASH:
                case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
                case ClickHouseParser.DOUBLE_SHA1_HASH:
                case ClickHouseParser.NO_PASSWORD:
                case ClickHouseParser.LDAP:
                case ClickHouseParser.SERVER:
                case ClickHouseParser.KERBEROS:
                case ClickHouseParser.REALM:
                case ClickHouseParser.SSL_CERTIFICATE:
                case ClickHouseParser.SAN:
                case ClickHouseParser.CN:
                case ClickHouseParser.SSH_KEY:
                case ClickHouseParser.HTTP:
                case ClickHouseParser.SCHEME:
                case ClickHouseParser.BCRYPT_PASSWORD:
                case ClickHouseParser.BCRYPT_HASH:
                case ClickHouseParser.VALID:
                case ClickHouseParser.UNTIL:
                case ClickHouseParser.GRANTEES:
                case ClickHouseParser.NAME:
                case ClickHouseParser.REGEXP:
                case ClickHouseParser.IP:
                case ClickHouseParser.HOST:
                case ClickHouseParser.READONLY:
                case ClickHouseParser.WRITABLE:
                case ClickHouseParser.PERMISSIVE:
                case ClickHouseParser.RESTRICTIVE:
                case ClickHouseParser.TABSEPARATED:
                case ClickHouseParser.TABSEPARATEDRAW:
                case ClickHouseParser.TABSEPARATEDWITHNAMES:
                case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
                case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
                case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
                case ClickHouseParser.TEMPLATE:
                case ClickHouseParser.TEMPLATEIGNORESPACES:
                case ClickHouseParser.CSV:
                case ClickHouseParser.CSVWITHNAMES:
                case ClickHouseParser.CSVWITHNAMESANDTYPES:
                case ClickHouseParser.CUSTOMSEPARATED:
                case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
                case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
                case ClickHouseParser.JSON:
                case ClickHouseParser.JSONASSTRING:
                case ClickHouseParser.JSONASOBJECT:
                case ClickHouseParser.JSONSTRINGS:
                case ClickHouseParser.JSONCOLUMNS:
                case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
                case ClickHouseParser.JSONCOMPACT:
                case ClickHouseParser.JSONCOMPACTCOLUMNS:
                case ClickHouseParser.JSONEACHROW:
                case ClickHouseParser.JSONSTRINGSEACHROW:
                case ClickHouseParser.JSONCOMPACTEACHROW:
                case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
                case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
                case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
                case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
                case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
                case ClickHouseParser.JSONOBJECTEACHROW:
                case ClickHouseParser.BSONEACHROW:
                case ClickHouseParser.TSKV:
                case ClickHouseParser.PROTOBUF:
                case ClickHouseParser.PROTOBUFSINGLE:
                case ClickHouseParser.PROTOBUFLIST:
                case ClickHouseParser.AVRO:
                case ClickHouseParser.AVROCONFLUENT:
                case ClickHouseParser.PARQUET:
                case ClickHouseParser.PARQUETMETADATA:
                case ClickHouseParser.ARROW:
                case ClickHouseParser.ARROWSTREAM:
                case ClickHouseParser.ORC:
                case ClickHouseParser.ONE:
                case ClickHouseParser.NPY:
                case ClickHouseParser.ROWBINARY:
                case ClickHouseParser.ROWBINARYWITHNAMES:
                case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
                case ClickHouseParser.ROWBINARYWITHDEFAULTS:
                case ClickHouseParser.NATIVE:
                case ClickHouseParser.CAPNPROTO:
                case ClickHouseParser.LINEASSTRING:
                case ClickHouseParser.RAWBLOB:
                case ClickHouseParser.MSGPACK:
                case ClickHouseParser.MYSQLDUMP:
                case ClickHouseParser.DWARF:
                case ClickHouseParser.FORM:
                case ClickHouseParser.KEYED:
                case ClickHouseParser.RANDOMIZED:
                case ClickHouseParser.USER_NAME:
                case ClickHouseParser.IP_ADDRESS:
                case ClickHouseParser.FORWARDED_IP_ADDRESS:
                case ClickHouseParser.CLIENT_KEY:
                case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
                case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
                case ClickHouseParser.QUERIES:
                case ClickHouseParser.QUERY_SELECTS:
                case ClickHouseParser.QUERY_INSERTS:
                case ClickHouseParser.ERRORS:
                case ClickHouseParser.RESULT_ROWS:
                case ClickHouseParser.RESULT_BYTES:
                case ClickHouseParser.READ_ROWS:
                case ClickHouseParser.READ_BYTES:
                case ClickHouseParser.EXECUTION_TIME:
                case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
                case ClickHouseParser.LIMITS:
                case ClickHouseParser.TRACKING:
                case ClickHouseParser.ONLY:
                case ClickHouseParser.CONST:
                case ClickHouseParser.CHANGEABLE_IN_READONLY:
                case ClickHouseParser.OVERRIDABLE:
                case ClickHouseParser.INHERIT:
                case ClickHouseParser.RESET:
                case ClickHouseParser.DETACHED:
                case ClickHouseParser.FORGET:
                case ClickHouseParser.STATISTICS:
                case ClickHouseParser.UNFREEZE:
                case ClickHouseParser.JSON_FALSE:
                case ClickHouseParser.JSON_TRUE:
                case ClickHouseParser.IDENTIFIER:
                    {
                    this.state = 2398;
                    this.identifier();
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilegeList(): PrivilegeListContext {
        let localContext = new PrivilegeListContext(this.context, this.state);
        this.enterRule(localContext, 270, ClickHouseParser.RULE_privilegeList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2403;
            this.privilege();
            this.state = 2408;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 2404;
                this.match(ClickHouseParser.COMMA);
                this.state = 2405;
                this.privilege();
                }
                }
                this.state = 2410;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public roleIdentifier(): RoleIdentifierContext {
        let localContext = new RoleIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 272, ClickHouseParser.RULE_roleIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2411;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userIdentifier(): UserIdentifierContext {
        let localContext = new UserIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 274, ClickHouseParser.RULE_userIdentifier);
        try {
            this.state = 2415;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 322, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2413;
                this.match(ClickHouseParser.CURRENT_USER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2414;
                this.identifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext {
        let localContext = new UserOrRoleExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 276, ClickHouseParser.RULE_userOrRoleExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2417;
            this.userOrRoleIdentifier();
            this.state = 2422;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 323, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 2418;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2419;
                    this.userOrRoleIdentifier();
                    }
                    }
                }
                this.state = 2424;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 323, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public userOrRoleIdentifier(): UserOrRoleIdentifierContext {
        let localContext = new UserOrRoleIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 278, ClickHouseParser.RULE_userOrRoleIdentifier);
        try {
            this.state = 2427;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 324, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2425;
                this.userIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2426;
                this.roleIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectPrivilege(): SelectPrivilegeContext {
        let localContext = new SelectPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 280, ClickHouseParser.RULE_selectPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2429;
            this.match(ClickHouseParser.SELECT);
            this.state = 2431;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 412) {
                {
                this.state = 2430;
                this.columnsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertPrivilege(): InsertPrivilegeContext {
        let localContext = new InsertPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 282, ClickHouseParser.RULE_insertPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2433;
            this.match(ClickHouseParser.INSERT);
            this.state = 2435;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 412) {
                {
                this.state = 2434;
                this.columnsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public createPrivilege(): CreatePrivilegeContext {
        let localContext = new CreatePrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 284, ClickHouseParser.RULE_createPrivilege);
        let _la: number;
        try {
            this.state = 2448;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 329, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2437;
                this.match(ClickHouseParser.CREATE);
                this.state = 2439;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 34 || _la === 47 || _la === 71 || _la === 163 || _la === 187) {
                    {
                    this.state = 2438;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 34 || _la === 47 || _la === 71 || _la === 163 || _la === 187)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2441;
                this.match(ClickHouseParser.CREATE);
                this.state = 2445;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.ARBITRARY:
                    {
                    this.state = 2442;
                    this.match(ClickHouseParser.ARBITRARY);
                    this.state = 2443;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                case ClickHouseParser.TEMPORARY:
                    {
                    this.state = 2444;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                case ClickHouseParser.TABLE:
                    break;
                default:
                    break;
                }
                this.state = 2447;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dropPrivilege(): DropPrivilegeContext {
        let localContext = new DropPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 286, ClickHouseParser.RULE_dropPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2450;
            this.match(ClickHouseParser.DROP);
            this.state = 2452;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 34 || _la === 47 || _la === 163 || _la === 187) {
                {
                this.state = 2451;
                _la = this.tokenStream.LA(1);
                if(!(_la === 34 || _la === 47 || _la === 163 || _la === 187)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showPrivilege(): ShowPrivilegeContext {
        let localContext = new ShowPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 288, ClickHouseParser.RULE_showPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2454;
            this.match(ClickHouseParser.SHOW);
            this.state = 2456;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 35 || _la === 46 || _la === 164 || _la === 205) {
                {
                this.state = 2455;
                _la = this.tokenStream.LA(1);
                if(!(_la === 35 || _la === 46 || _la === 164 || _la === 205)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public introspectionPrivilege(): IntrospectionPrivilegeContext {
        let localContext = new IntrospectionPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 290, ClickHouseParser.RULE_introspectionPrivilege);
        let _la: number;
        try {
            this.state = 2466;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.INTROSPECTION:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2458;
                this.match(ClickHouseParser.INTROSPECTION);
                this.state = 2460;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 222) {
                    {
                    this.state = 2459;
                    this.match(ClickHouseParser.FUNCTIONS);
                    }
                }

                }
                break;
            case ClickHouseParser.ADDRESSTOLINE:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2462;
                this.match(ClickHouseParser.ADDRESSTOLINE);
                }
                break;
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2463;
                this.match(ClickHouseParser.ADDRESSTOLINEWITHINLINES);
                }
                break;
            case ClickHouseParser.ADDRESSTOSYMBOL:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2464;
                this.match(ClickHouseParser.ADDRESSTOSYMBOL);
                }
                break;
            case ClickHouseParser.DEMANGLE:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2465;
                this.match(ClickHouseParser.DEMANGLE);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sourcePrivilege(): SourcePrivilegeContext {
        let localContext = new SourcePrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 292, ClickHouseParser.RULE_sourcePrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2468;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 243)) & ~0x1F) === 0 && ((1 << (_la - 243)) & 258559) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dictPrivilege(): DictPrivilegeContext {
        let localContext = new DictPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 294, ClickHouseParser.RULE_dictPrivilege);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2470;
            _la = this.tokenStream.LA(1);
            if(!(((((_la - 227)) & ~0x1F) === 0 && ((1 << (_la - 227)) & 15) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alterPrivilege(): AlterPrivilegeContext {
        let localContext = new AlterPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 296, ClickHouseParser.RULE_alterPrivilege);
        let _la: number;
        try {
            this.state = 2568;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 351, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2472;
                this.match(ClickHouseParser.ALTER);
                this.state = 2474;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 41 || _la === 182) {
                    {
                    this.state = 2473;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 41 || _la === 182)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2477;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 412) {
                    {
                    this.state = 2476;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2479;
                _la = this.tokenStream.LA(1);
                if(!(_la === 41 || _la === 182)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2481;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 412) {
                    {
                    this.state = 2480;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2483;
                this.match(ClickHouseParser.ALTER);
                this.state = 2484;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2485;
                this.match(ClickHouseParser.ALTER);
                this.state = 2487;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 276824066) !== 0) || _la === 51 || _la === 110 || _la === 140) {
                    {
                    this.state = 2486;
                    _la = this.tokenStream.LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 276824066) !== 0) || _la === 51 || _la === 110 || _la === 140)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2489;
                this.match(ClickHouseParser.COLUMN);
                this.state = 2491;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 412) {
                    {
                    this.state = 2490;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2493;
                _la = this.tokenStream.LA(1);
                if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 276824066) !== 0) || _la === 51 || _la === 110 || _la === 140)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2494;
                this.match(ClickHouseParser.COLUMN);
                this.state = 2496;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 412) {
                    {
                    this.state = 2495;
                    this.columnsClause();
                    }
                }

                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2498;
                this.match(ClickHouseParser.ALTER);
                this.state = 2500;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 23 || _la === 51 || _la === 104) {
                    {
                    this.state = 2499;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 23 || _la === 51 || _la === 104)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2502;
                this.match(ClickHouseParser.INDEX);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2504;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 23 || _la === 51 || _la === 104) {
                    {
                    this.state = 2503;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 23 || _la === 51 || _la === 104)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2506;
                this.match(ClickHouseParser.INDEX);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2507;
                this.match(ClickHouseParser.ALTER);
                this.state = 2509;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 110) {
                    {
                    this.state = 2508;
                    this.match(ClickHouseParser.MODIFY);
                    }
                }

                this.state = 2511;
                _la = this.tokenStream.LA(1);
                if(!(_la === 123 || _la === 148)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2512;
                this.match(ClickHouseParser.BY);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2513;
                this.match(ClickHouseParser.MODIFY);
                this.state = 2514;
                _la = this.tokenStream.LA(1);
                if(!(_la === 123 || _la === 148)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2515;
                this.match(ClickHouseParser.BY);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2517;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 2516;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 2520;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 1 || _la === 51) {
                    {
                    this.state = 2519;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 1 || _la === 51)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2522;
                this.match(ClickHouseParser.CONSTRAINT);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2523;
                this.match(ClickHouseParser.ALTER);
                this.state = 2525;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 104 || _la === 110) {
                    {
                    this.state = 2524;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 104 || _la === 110)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2527;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2528;
                _la = this.tokenStream.LA(1);
                if(!(_la === 104 || _la === 110)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2529;
                this.match(ClickHouseParser.TTL);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2530;
                this.match(ClickHouseParser.ALTER);
                this.state = 2531;
                this.match(ClickHouseParser.SETTINGS);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2536;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 346, this.context) ) {
                case 1:
                    {
                    this.state = 2532;
                    this.match(ClickHouseParser.ALTER);
                    }
                    break;
                case 2:
                    {
                    this.state = 2533;
                    this.match(ClickHouseParser.ALTER);
                    this.state = 2534;
                    this.match(ClickHouseParser.MODIFY);
                    }
                    break;
                case 3:
                    {
                    this.state = 2535;
                    this.match(ClickHouseParser.MODIFY);
                    }
                    break;
                }
                this.state = 2538;
                this.match(ClickHouseParser.SETTING);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2540;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 2539;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 2542;
                _la = this.tokenStream.LA(1);
                if(!(_la === 112 || _la === 198)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2543;
                _la = this.tokenStream.LA(1);
                if(!(_la === 127 || _la === 218)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2545;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5) {
                    {
                    this.state = 2544;
                    this.match(ClickHouseParser.ALTER);
                    }
                }

                this.state = 2547;
                this.match(ClickHouseParser.FREEZE);
                this.state = 2548;
                this.match(ClickHouseParser.PARTITION);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2549;
                this.match(ClickHouseParser.ALTER);
                this.state = 2550;
                this.match(ClickHouseParser.VIEW);
                this.state = 2552;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 199) {
                    {
                    this.state = 2551;
                    this.match(ClickHouseParser.REFRESH);
                    }
                }

                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2554;
                this.match(ClickHouseParser.ALTER);
                this.state = 2555;
                this.match(ClickHouseParser.LIVE);
                this.state = 2556;
                this.match(ClickHouseParser.VIEW);
                this.state = 2557;
                this.match(ClickHouseParser.REFRESH);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2558;
                this.match(ClickHouseParser.REFRESH);
                this.state = 2559;
                this.match(ClickHouseParser.VIEW);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 2560;
                this.match(ClickHouseParser.ALTER);
                this.state = 2561;
                _la = this.tokenStream.LA(1);
                if(!(_la === 163 || _la === 187)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2562;
                this.match(ClickHouseParser.MODIFY);
                this.state = 2566;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.QUERY:
                    {
                    this.state = 2563;
                    this.match(ClickHouseParser.QUERY);
                    }
                    break;
                case ClickHouseParser.SQL:
                    {
                    this.state = 2564;
                    this.match(ClickHouseParser.SQL);
                    this.state = 2565;
                    this.match(ClickHouseParser.SECURITY);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public accessManagementPrivilege(): AccessManagementPrivilegeContext {
        let localContext = new AccessManagementPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 298, ClickHouseParser.RULE_accessManagementPrivilege);
        let _la: number;
        try {
            this.state = 2630;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 357, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2570;
                this.match(ClickHouseParser.ACCESS);
                this.state = 2571;
                this.match(ClickHouseParser.MANAGEMENT);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2572;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 30 || _la === 51)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2573;
                this.match(ClickHouseParser.USER);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2574;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 30 || _la === 51)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2575;
                this.match(ClickHouseParser.ROLE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2576;
                this.match(ClickHouseParser.ROLE);
                this.state = 2577;
                this.match(ClickHouseParser.ADMIN);
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2578;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 30 || _la === 51)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2580;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 2579;
                    this.match(ClickHouseParser.ROW);
                    }
                }

                this.state = 2582;
                this.match(ClickHouseParser.POLICY);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2583;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 30 || _la === 51)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2584;
                this.match(ClickHouseParser.QUOTA);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2585;
                _la = this.tokenStream.LA(1);
                if(!(_la === 5 || _la === 30 || _la === 51)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2587;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 2586;
                    this.match(ClickHouseParser.SETTINGS);
                    }
                }

                this.state = 2589;
                this.match(ClickHouseParser.PROFILE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2590;
                this.match(ClickHouseParser.SHOW);
                this.state = 2591;
                this.match(ClickHouseParser.ACCESS);
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2592;
                this.match(ClickHouseParser.SHOW_USERS);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2593;
                this.match(ClickHouseParser.SHOW);
                this.state = 2594;
                this.match(ClickHouseParser.CREATE);
                this.state = 2595;
                this.match(ClickHouseParser.USER);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2596;
                this.match(ClickHouseParser.SHOW_ROLES);
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2597;
                this.match(ClickHouseParser.SHOW);
                this.state = 2598;
                this.match(ClickHouseParser.CREATE);
                this.state = 2599;
                this.match(ClickHouseParser.ROLE);
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2600;
                this.match(ClickHouseParser.SHOW_ROW_POLICIES);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2601;
                this.match(ClickHouseParser.SHOW);
                this.state = 2602;
                this.match(ClickHouseParser.POLICIES);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2603;
                this.match(ClickHouseParser.SHOW);
                this.state = 2604;
                this.match(ClickHouseParser.CREATE);
                this.state = 2606;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 146) {
                    {
                    this.state = 2605;
                    this.match(ClickHouseParser.ROW);
                    }
                }

                this.state = 2608;
                this.match(ClickHouseParser.POLICY);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2609;
                this.match(ClickHouseParser.SHOW_QUOTAS);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2610;
                this.match(ClickHouseParser.SHOW);
                this.state = 2611;
                this.match(ClickHouseParser.CREATE);
                this.state = 2612;
                this.match(ClickHouseParser.QUOTA);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2613;
                this.match(ClickHouseParser.SHOW_SETTINGS_PROFILES);
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2614;
                this.match(ClickHouseParser.SHOW);
                this.state = 2615;
                this.match(ClickHouseParser.PROFILES);
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 2616;
                this.match(ClickHouseParser.SHOW);
                this.state = 2617;
                this.match(ClickHouseParser.CREATE);
                this.state = 2619;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 154) {
                    {
                    this.state = 2618;
                    this.match(ClickHouseParser.SETTINGS);
                    }
                }

                this.state = 2621;
                this.match(ClickHouseParser.PROFILE);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 2623;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 30 || _la === 267) {
                    {
                    this.state = 2622;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 30 || _la === 267)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2625;
                this.match(ClickHouseParser.SQL);
                this.state = 2626;
                this.match(ClickHouseParser.SECURITY);
                this.state = 2627;
                this.match(ClickHouseParser.NONE);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 2628;
                this.match(ClickHouseParser.SECURITY);
                this.state = 2629;
                this.match(ClickHouseParser.NONE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public systemPrivilege(): SystemPrivilegeContext {
        let localContext = new SystemPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 300, ClickHouseParser.RULE_systemPrivilege);
        let _la: number;
        try {
            this.state = 2722;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 373, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2632;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2634;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 93 || _la === 213) {
                    {
                    this.state = 2633;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 93 || _la === 213)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2636;
                this.match(ClickHouseParser.SHUTDOWN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2638;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 162) {
                    {
                    this.state = 2637;
                    this.match(ClickHouseParser.SYSTEM);
                    }
                }

                this.state = 2640;
                this.match(ClickHouseParser.DROP);
                this.state = 2641;
                this.match(ClickHouseParser.CACHE);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2642;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2643;
                this.match(ClickHouseParser.DROP);
                this.state = 2644;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 215)) & ~0x1F) === 0 && ((1 << (_la - 215)) & 19) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2646;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 214) {
                    {
                    this.state = 2645;
                    this.match(ClickHouseParser.CACHE);
                    }
                }

                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2648;
                this.match(ClickHouseParser.DROP);
                this.state = 2649;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 215)) & ~0x1F) === 0 && ((1 << (_la - 215)) & 19) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2650;
                this.match(ClickHouseParser.CACHE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2651;
                this.match(ClickHouseParser.DROP);
                this.state = 2652;
                _la = this.tokenStream.LA(1);
                if(!(((((_la - 215)) & ~0x1F) === 0 && ((1 << (_la - 215)) & 21) !== 0))) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2653;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2654;
                this.match(ClickHouseParser.RELOAD);
                this.state = 2661;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.CONFIG:
                    {
                    this.state = 2655;
                    this.match(ClickHouseParser.CONFIG);
                    }
                    break;
                case ClickHouseParser.DICTIONARY:
                    {
                    this.state = 2656;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case ClickHouseParser.DICTIONARIES:
                case ClickHouseParser.EMBEDDED:
                    {
                    this.state = 2658;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 221) {
                        {
                        this.state = 2657;
                        this.match(ClickHouseParser.EMBEDDED);
                        }
                    }

                    this.state = 2660;
                    this.match(ClickHouseParser.DICTIONARIES);
                    }
                    break;
                case ClickHouseParser.ON:
                case ClickHouseParser.COMMA:
                    break;
                default:
                    break;
                }
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2663;
                this.match(ClickHouseParser.RELOAD);
                this.state = 2670;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.CONFIG:
                    {
                    this.state = 2664;
                    this.match(ClickHouseParser.CONFIG);
                    }
                    break;
                case ClickHouseParser.DICTIONARY:
                    {
                    this.state = 2665;
                    this.match(ClickHouseParser.DICTIONARY);
                    }
                    break;
                case ClickHouseParser.DICTIONARIES:
                case ClickHouseParser.EMBEDDED:
                    {
                    this.state = 2667;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 221) {
                        {
                        this.state = 2666;
                        this.match(ClickHouseParser.EMBEDDED);
                        }
                    }

                    this.state = 2669;
                    this.match(ClickHouseParser.DICTIONARIES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2672;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2674;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 157 || _la === 158) {
                    {
                    this.state = 2673;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 157 || _la === 158)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2677;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178) {
                    {
                    this.state = 2676;
                    this.match(ClickHouseParser.TTL);
                    }
                }

                this.state = 2679;
                this.match(ClickHouseParser.MERGES);
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2680;
                _la = this.tokenStream.LA(1);
                if(!(_la === 157 || _la === 158)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2682;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 178) {
                    {
                    this.state = 2681;
                    this.match(ClickHouseParser.TTL);
                    }
                }

                this.state = 2684;
                this.match(ClickHouseParser.MERGES);
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2685;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2687;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 157 || _la === 158) {
                    {
                    this.state = 2686;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 157 || _la === 158)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2689;
                _la = this.tokenStream.LA(1);
                if(!(_la === 61 || _la === 152 || _la === 223)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2690;
                _la = this.tokenStream.LA(1);
                if(!(_la === 157 || _la === 158)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2691;
                _la = this.tokenStream.LA(1);
                if(!(_la === 61 || _la === 152 || _la === 223)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2692;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2694;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 157 || _la === 158) {
                    {
                    this.state = 2693;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 157 || _la === 158)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2696;
                _la = this.tokenStream.LA(1);
                if(!(_la === 50 || _la === 143)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2697;
                this.match(ClickHouseParser.SENDS);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2698;
                _la = this.tokenStream.LA(1);
                if(!(_la === 157 || _la === 158)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2699;
                _la = this.tokenStream.LA(1);
                if(!(_la === 50 || _la === 143)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2700;
                this.match(ClickHouseParser.SENDS);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2701;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2703;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 157 || _la === 158) {
                    {
                    this.state = 2702;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 157 || _la === 158)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2705;
                this.match(ClickHouseParser.REPLICATION);
                this.state = 2706;
                this.match(ClickHouseParser.QUEUES);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2707;
                _la = this.tokenStream.LA(1);
                if(!(_la === 157 || _la === 158)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2708;
                this.match(ClickHouseParser.REPLICATION);
                this.state = 2709;
                this.match(ClickHouseParser.QUEUES);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2711;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 162) {
                    {
                    this.state = 2710;
                    this.match(ClickHouseParser.SYSTEM);
                    }
                }

                this.state = 2713;
                _la = this.tokenStream.LA(1);
                if(!(_la === 160 || _la === 226)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 2714;
                this.match(ClickHouseParser.REPLICA);
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2715;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 2716;
                this.match(ClickHouseParser.FLUSH);
                this.state = 2718;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 50 || _la === 103) {
                    {
                    this.state = 2717;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 50 || _la === 103)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2720;
                this.match(ClickHouseParser.FLUSH);
                this.state = 2721;
                _la = this.tokenStream.LA(1);
                if(!(_la === 50 || _la === 103)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public namedCollectionAdminPrivilege(): NamedCollectionAdminPrivilegeContext {
        let localContext = new NamedCollectionAdminPrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 302, ClickHouseParser.RULE_namedCollectionAdminPrivilege);
        let _la: number;
        try {
            this.state = 2743;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 377, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2724;
                this.match(ClickHouseParser.NAMED);
                this.state = 2725;
                this.match(ClickHouseParser.COLLECTION);
                this.state = 2727;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 73) !== 0)) {
                    {
                    this.state = 2726;
                    _la = this.tokenStream.LA(1);
                    if(!(((((_la - 232)) & ~0x1F) === 0 && ((1 << (_la - 232)) & 73) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2730;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 5 || _la === 30 || _la === 51) {
                    {
                    this.state = 2729;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 5 || _la === 30 || _la === 51)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 2732;
                this.match(ClickHouseParser.NAMED);
                this.state = 2733;
                this.match(ClickHouseParser.COLLECTION);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2734;
                this.match(ClickHouseParser.SHOW);
                this.state = 2735;
                this.match(ClickHouseParser.NAMED);
                this.state = 2736;
                this.match(ClickHouseParser.COLLECTIONS);
                this.state = 2738;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 237) {
                    {
                    this.state = 2737;
                    this.match(ClickHouseParser.SECRETS);
                    }
                }

                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2740;
                this.match(ClickHouseParser.USE);
                this.state = 2741;
                this.match(ClickHouseParser.NAMED);
                this.state = 2742;
                this.match(ClickHouseParser.COLLECTION);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public privilege(): PrivilegeContext {
        let localContext = new PrivilegeContext(this.context, this.state);
        this.enterRule(localContext, 304, ClickHouseParser.RULE_privilege);
        try {
            this.state = 2770;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 378, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2745;
                this.selectPrivilege();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2746;
                this.insertPrivilege();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2747;
                this.createPrivilege();
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 2748;
                this.dropPrivilege();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 2749;
                this.match(ClickHouseParser.TRUNCATE);
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 2750;
                this.match(ClickHouseParser.KILL);
                this.state = 2751;
                this.match(ClickHouseParser.QUERY);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 2752;
                this.match(ClickHouseParser.OPTIMIZE);
                }
                break;
            case 8:
                this.enterOuterAlt(localContext, 8);
                {
                this.state = 2753;
                this.showPrivilege();
                }
                break;
            case 9:
                this.enterOuterAlt(localContext, 9);
                {
                this.state = 2754;
                this.introspectionPrivilege();
                }
                break;
            case 10:
                this.enterOuterAlt(localContext, 10);
                {
                this.state = 2755;
                this.sourcePrivilege();
                }
                break;
            case 11:
                this.enterOuterAlt(localContext, 11);
                {
                this.state = 2756;
                this.dictPrivilege();
                }
                break;
            case 12:
                this.enterOuterAlt(localContext, 12);
                {
                this.state = 2757;
                this.alterPrivilege();
                }
                break;
            case 13:
                this.enterOuterAlt(localContext, 13);
                {
                this.state = 2758;
                this.match(ClickHouseParser.ALL);
                }
                break;
            case 14:
                this.enterOuterAlt(localContext, 14);
                {
                this.state = 2759;
                this.match(ClickHouseParser.NONE);
                }
                break;
            case 15:
                this.enterOuterAlt(localContext, 15);
                {
                this.state = 2760;
                this.match(ClickHouseParser.OPTIMIZE);
                }
                break;
            case 16:
                this.enterOuterAlt(localContext, 16);
                {
                this.state = 2761;
                this.match(ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT);
                }
                break;
            case 17:
                this.enterOuterAlt(localContext, 17);
                {
                this.state = 2762;
                this.accessManagementPrivilege();
                }
                break;
            case 18:
                this.enterOuterAlt(localContext, 18);
                {
                this.state = 2763;
                this.systemPrivilege();
                }
                break;
            case 19:
                this.enterOuterAlt(localContext, 19);
                {
                this.state = 2764;
                this.namedCollectionAdminPrivilege();
                }
                break;
            case 20:
                this.enterOuterAlt(localContext, 20);
                {
                this.state = 2765;
                this.match(ClickHouseParser.TABLE);
                this.state = 2766;
                this.match(ClickHouseParser.ENGINE);
                }
                break;
            case 21:
                this.enterOuterAlt(localContext, 21);
                {
                this.state = 2767;
                this.match(ClickHouseParser.ADMIN);
                this.state = 2768;
                this.match(ClickHouseParser.OPTION);
                }
                break;
            case 22:
                this.enterOuterAlt(localContext, 22);
                {
                this.state = 2769;
                this.match(ClickHouseParser.USAGE);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertStatement(): InsertStatementContext {
        let localContext = new InsertStatementContext(this.context, this.state);
        this.enterRule(localContext, 306, ClickHouseParser.RULE_insertStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2772;
            this.match(ClickHouseParser.INSERT);
            this.state = 2773;
            this.match(ClickHouseParser.INTO);
            this.state = 2775;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 379, this.context) ) {
            case 1:
                {
                this.state = 2774;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 2780;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 380, this.context) ) {
            case 1:
                {
                this.state = 2777;
                this.tableIdentifier();
                }
                break;
            case 2:
                {
                this.state = 2778;
                this.match(ClickHouseParser.FUNCTION);
                this.state = 2779;
                this.tableFunctionExpression();
                }
                break;
            }
            this.state = 2783;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 381, this.context) ) {
            case 1:
                {
                this.state = 2782;
                this.columnsOrExceptClause();
                }
                break;
            }
            this.state = 2786;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 2785;
                this.settingsClause();
                }
            }

            this.state = 2788;
            this.dataClause();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsOrExceptClause(): ColumnsOrExceptClauseContext {
        let localContext = new ColumnsOrExceptClauseContext(this.context, this.state);
        this.enterRule(localContext, 308, ClickHouseParser.RULE_columnsOrExceptClause);
        let _la: number;
        try {
            this.state = 2798;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 384, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2790;
                this.columnsClause();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2791;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2792;
                this.match(ClickHouseParser.ASTERISK);
                this.state = 2795;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 269) {
                    {
                    this.state = 2793;
                    this.match(ClickHouseParser.EXCEPT);
                    this.state = 2794;
                    this.columnsClause();
                    }
                }

                this.state = 2797;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsClause(): ColumnsClauseContext {
        let localContext = new ColumnsClauseContext(this.context, this.state);
        this.enterRule(localContext, 310, ClickHouseParser.RULE_columnsClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2800;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2801;
            this.columnIdentifier();
            this.state = 2806;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 2802;
                this.match(ClickHouseParser.COMMA);
                this.state = 2803;
                this.columnIdentifier();
                }
                }
                this.state = 2808;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2809;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public insertFormatType(): InsertFormatTypeContext {
        let localContext = new InsertFormatTypeContext(this.context, this.state);
        this.enterRule(localContext, 312, ClickHouseParser.RULE_insertFormatType);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2811;
            _la = this.tokenStream.LA(1);
            if(!(_la === 186 || ((((_la - 294)) & ~0x1F) === 0 && ((1 << (_la - 294)) & 4294967169) !== 0) || ((((_la - 326)) & ~0x1F) === 0 && ((1 << (_la - 326)) & 4294967295) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public dataClause(): DataClauseContext {
        let localContext = new DataClauseContext(this.context, this.state);
        this.enterRule(localContext, 314, ClickHouseParser.RULE_dataClause);
        let _la: number;
        try {
            this.state = 2830;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 389, this.context) ) {
            case 1:
                localContext = new DataClauseFormatContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2813;
                this.match(ClickHouseParser.FORMAT);
                this.state = 2814;
                this.insertFormatType();
                this.state = 2816;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 2815;
                    this.identifier();
                    }
                    }
                    this.state = 2818;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4292607999) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 127) !== 0));
                }
                break;
            case 2:
                localContext = new DataClauseValuesContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2821;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 67) {
                    {
                    this.state = 2820;
                    this.match(ClickHouseParser.FORMAT);
                    }
                }

                this.state = 2823;
                this.valuesStatement();
                }
                break;
            case 3:
                localContext = new DataClauseSelectContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2824;
                this.selectUnionStatement();
                this.state = 2826;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 423) {
                    {
                    this.state = 2825;
                    this.match(ClickHouseParser.SEMICOLON);
                    }
                }

                this.state = 2828;
                this.match(ClickHouseParser.EOF);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literalList(): LiteralListContext {
        let localContext = new LiteralListContext(this.context, this.state);
        this.enterRule(localContext, 316, ClickHouseParser.RULE_literalList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2832;
            this.literal();
            this.state = 2837;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 2833;
                this.match(ClickHouseParser.COMMA);
                this.state = 2834;
                this.literal();
                }
                }
                this.state = 2839;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueIdentifier(): ValueIdentifierContext {
        let localContext = new ValueIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 318, ClickHouseParser.RULE_valueIdentifier);
        try {
            this.state = 2848;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 391, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2840;
                this.literal();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2841;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2842;
                this.numberLiteral();
                this.state = 2843;
                this.match(ClickHouseParser.COMMA);
                this.state = 2844;
                this.numberLiteral();
                this.state = 2845;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 2847;
                this.functionExpression();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valueOrArrayIdentifier(): ValueOrArrayIdentifierContext {
        let localContext = new ValueOrArrayIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 320, ClickHouseParser.RULE_valueOrArrayIdentifier);
        try {
            this.state = 2852;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASC:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULL_SQL:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.KEYED:
            case ClickHouseParser.RANDOMIZED:
            case ClickHouseParser.USER_NAME:
            case ClickHouseParser.IP_ADDRESS:
            case ClickHouseParser.FORWARDED_IP_ADDRESS:
            case ClickHouseParser.CLIENT_KEY:
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
            case ClickHouseParser.QUERIES:
            case ClickHouseParser.QUERY_SELECTS:
            case ClickHouseParser.QUERY_INSERTS:
            case ClickHouseParser.ERRORS:
            case ClickHouseParser.RESULT_ROWS:
            case ClickHouseParser.RESULT_BYTES:
            case ClickHouseParser.READ_ROWS:
            case ClickHouseParser.READ_BYTES:
            case ClickHouseParser.EXECUTION_TIME:
            case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
            case ClickHouseParser.LIMITS:
            case ClickHouseParser.TRACKING:
            case ClickHouseParser.ONLY:
            case ClickHouseParser.CONST:
            case ClickHouseParser.CHANGEABLE_IN_READONLY:
            case ClickHouseParser.OVERRIDABLE:
            case ClickHouseParser.INHERIT:
            case ClickHouseParser.RESET:
            case ClickHouseParser.DETACHED:
            case ClickHouseParser.FORGET:
            case ClickHouseParser.STATISTICS:
            case ClickHouseParser.UNFREEZE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.STRING_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.LPAREN:
            case ClickHouseParser.PLUS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2850;
                this.valueIdentifier();
                }
                break;
            case ClickHouseParser.LBRACKET:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2851;
                this.arrayIdentifier();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arrayIdentifier(): ArrayIdentifierContext {
        let localContext = new ArrayIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 322, ClickHouseParser.RULE_arrayIdentifier);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2854;
            this.match(ClickHouseParser.LBRACKET);
            this.state = 2863;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967295) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294967295) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 4294967295) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 4294967295) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & 4294967295) !== 0) || ((((_la - 385)) & ~0x1F) === 0 && ((1 << (_la - 385)) & 2316044287) !== 0)) {
                {
                this.state = 2855;
                this.valueOrArrayIdentifier();
                this.state = 2860;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 401) {
                    {
                    {
                    this.state = 2856;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 2857;
                    this.valueOrArrayIdentifier();
                    }
                    }
                    this.state = 2862;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                }
            }

            this.state = 2865;
            this.match(ClickHouseParser.RBRACKET);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesClause(): ValuesClauseContext {
        let localContext = new ValuesClauseContext(this.context, this.state);
        this.enterRule(localContext, 324, ClickHouseParser.RULE_valuesClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2867;
            this.match(ClickHouseParser.LPAREN);
            {
            this.state = 2868;
            this.valueOrArrayIdentifier();
            this.state = 2873;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 2869;
                this.match(ClickHouseParser.COMMA);
                this.state = 2870;
                this.valueOrArrayIdentifier();
                }
                }
                this.state = 2875;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
            this.state = 2876;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public valuesStatement(): ValuesStatementContext {
        let localContext = new ValuesStatementContext(this.context, this.state);
        this.enterRule(localContext, 326, ClickHouseParser.RULE_valuesStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2878;
            this.match(ClickHouseParser.VALUES);
            this.state = 2879;
            this.valuesClause();
            this.state = 2886;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401 || _la === 412) {
                {
                {
                this.state = 2881;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 401) {
                    {
                    this.state = 2880;
                    this.match(ClickHouseParser.COMMA);
                    }
                }

                this.state = 2883;
                this.valuesClause();
                }
                }
                this.state = 2888;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public killStatement(): KillStatementContext {
        let localContext = new KillStatementContext(this.context, this.state);
        this.enterRule(localContext, 328, ClickHouseParser.RULE_killStatement);
        let _la: number;
        try {
            localContext = new KillMutationStatementContext(localContext);
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2889;
            this.match(ClickHouseParser.KILL);
            this.state = 2890;
            this.match(ClickHouseParser.MUTATION);
            this.state = 2892;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 2891;
                this.clusterClause();
                }
            }

            this.state = 2894;
            this.whereClause();
            this.state = 2896;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 15 || _la === 160 || _la === 166) {
                {
                this.state = 2895;
                _la = this.tokenStream.LA(1);
                if(!(_la === 15 || _la === 160 || _la === 166)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public optimizeStatement(): OptimizeStatementContext {
        let localContext = new OptimizeStatementContext(this.context, this.state);
        this.enterRule(localContext, 330, ClickHouseParser.RULE_optimizeStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2898;
            this.match(ClickHouseParser.OPTIMIZE);
            this.state = 2899;
            this.match(ClickHouseParser.TABLE);
            this.state = 2900;
            this.tableIdentifier();
            this.state = 2902;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 2901;
                this.clusterClause();
                }
            }

            this.state = 2905;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127) {
                {
                this.state = 2904;
                this.partitionClause();
                }
            }

            this.state = 2908;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 62) {
                {
                this.state = 2907;
                this.match(ClickHouseParser.FINAL);
                }
            }

            this.state = 2911;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 38) {
                {
                this.state = 2910;
                this.match(ClickHouseParser.DEDUPLICATE);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public renameStatement(): RenameStatementContext {
        let localContext = new RenameStatementContext(this.context, this.state);
        this.enterRule(localContext, 332, ClickHouseParser.RULE_renameStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2913;
            this.match(ClickHouseParser.RENAME);
            this.state = 2914;
            this.match(ClickHouseParser.TABLE);
            this.state = 2915;
            this.tableIdentifier();
            this.state = 2916;
            this.match(ClickHouseParser.TO);
            this.state = 2917;
            this.tableIdentifier();
            this.state = 2925;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 2918;
                this.match(ClickHouseParser.COMMA);
                this.state = 2919;
                this.tableIdentifier();
                this.state = 2920;
                this.match(ClickHouseParser.TO);
                this.state = 2921;
                this.tableIdentifier();
                }
                }
                this.state = 2927;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            this.state = 2929;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 2928;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public projectionSelectStatement(): ProjectionSelectStatementContext {
        let localContext = new ProjectionSelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 334, ClickHouseParser.RULE_projectionSelectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2931;
            this.match(ClickHouseParser.LPAREN);
            this.state = 2933;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 194) {
                {
                this.state = 2932;
                this.withClause();
                }
            }

            this.state = 2935;
            this.match(ClickHouseParser.SELECT);
            this.state = 2936;
            this.columnExpressionList();
            this.state = 2938;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 2937;
                this.groupByClause();
                }
            }

            this.state = 2941;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123) {
                {
                this.state = 2940;
                this.projectionOrderByClause();
                }
            }

            this.state = 2943;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        let localContext = new SelectUnionStatementContext(this.context, this.state);
        this.enterRule(localContext, 336, ClickHouseParser.RULE_selectUnionStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2945;
            this.selectStatementWithParentheses();
            this.state = 2951;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 181) {
                {
                {
                this.state = 2946;
                this.match(ClickHouseParser.UNION);
                this.state = 2947;
                this.match(ClickHouseParser.ALL);
                this.state = 2948;
                this.selectStatementWithParentheses();
                }
                }
                this.state = 2953;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatementWithParentheses(): SelectStatementWithParenthesesContext {
        let localContext = new SelectStatementWithParenthesesContext(this.context, this.state);
        this.enterRule(localContext, 338, ClickHouseParser.RULE_selectStatementWithParentheses);
        try {
            this.state = 2959;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.SELECT:
            case ClickHouseParser.WITH:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 2954;
                this.selectStatement();
                }
                break;
            case ClickHouseParser.LPAREN:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 2955;
                this.match(ClickHouseParser.LPAREN);
                this.state = 2956;
                this.selectUnionStatement();
                this.state = 2957;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public selectStatement(): SelectStatementContext {
        let localContext = new SelectStatementContext(this.context, this.state);
        this.enterRule(localContext, 340, ClickHouseParser.RULE_selectStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 2962;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 194) {
                {
                this.state = 2961;
                this.withClause();
                }
            }

            this.state = 2964;
            this.match(ClickHouseParser.SELECT);
            this.state = 2966;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 412, this.context) ) {
            case 1:
                {
                this.state = 2965;
                this.match(ClickHouseParser.DISTINCT);
                }
                break;
            }
            this.state = 2969;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 413, this.context) ) {
            case 1:
                {
                this.state = 2968;
                this.topClause();
                }
                break;
            }
            this.state = 2971;
            this.columnExpressionList();
            this.state = 2973;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 69) {
                {
                this.state = 2972;
                this.fromClause();
                }
            }

            this.state = 2976;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 9 || _la === 85 || _la === 97) {
                {
                this.state = 2975;
                this.arrayJoinClause();
                }
            }

            this.state = 2979;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 193) {
                {
                this.state = 2978;
                this.windowClause();
                }
            }

            this.state = 2982;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 132) {
                {
                this.state = 2981;
                this.prewhereClause();
                }
            }

            this.state = 2985;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 192) {
                {
                this.state = 2984;
                this.whereClause();
                }
            }

            this.state = 2988;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 74) {
                {
                this.state = 2987;
                this.groupByClause();
                }
            }

            this.state = 2992;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 420, this.context) ) {
            case 1:
                {
                this.state = 2990;
                this.match(ClickHouseParser.WITH);
                this.state = 2991;
                _la = this.tokenStream.LA(1);
                if(!(_la === 32 || _la === 145)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 2996;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 194) {
                {
                this.state = 2994;
                this.match(ClickHouseParser.WITH);
                this.state = 2995;
                this.match(ClickHouseParser.TOTALS);
                }
            }

            this.state = 2999;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 75) {
                {
                this.state = 2998;
                this.havingClause();
                }
            }

            this.state = 3002;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123) {
                {
                this.state = 3001;
                this.orderByClause();
                }
            }

            this.state = 3005;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 424, this.context) ) {
            case 1:
                {
                this.state = 3004;
                this.limitByClause();
                }
                break;
            }
            this.state = 3008;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 3007;
                this.limitClause();
                }
            }

            this.state = 3011;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 154) {
                {
                this.state = 3010;
                this.settingsClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public withClause(): WithClauseContext {
        let localContext = new WithClauseContext(this.context, this.state);
        this.enterRule(localContext, 342, ClickHouseParser.RULE_withClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3013;
            this.match(ClickHouseParser.WITH);
            this.state = 3014;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public topClause(): TopClauseContext {
        let localContext = new TopClauseContext(this.context, this.state);
        this.enterRule(localContext, 344, ClickHouseParser.RULE_topClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3016;
            this.match(ClickHouseParser.TOP);
            this.state = 3017;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            this.state = 3020;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 427, this.context) ) {
            case 1:
                {
                this.state = 3018;
                this.match(ClickHouseParser.WITH);
                this.state = 3019;
                this.match(ClickHouseParser.TIES);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public fromClause(): FromClauseContext {
        let localContext = new FromClauseContext(this.context, this.state);
        this.enterRule(localContext, 346, ClickHouseParser.RULE_fromClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3022;
            this.match(ClickHouseParser.FROM);
            this.state = 3023;
            this.joinExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public arrayJoinClause(): ArrayJoinClauseContext {
        let localContext = new ArrayJoinClauseContext(this.context, this.state);
        this.enterRule(localContext, 348, ClickHouseParser.RULE_arrayJoinClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3026;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 85 || _la === 97) {
                {
                this.state = 3025;
                _la = this.tokenStream.LA(1);
                if(!(_la === 85 || _la === 97)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3028;
            this.match(ClickHouseParser.ARRAY);
            this.state = 3029;
            this.match(ClickHouseParser.JOIN);
            this.state = 3030;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowClause(): WindowClauseContext {
        let localContext = new WindowClauseContext(this.context, this.state);
        this.enterRule(localContext, 350, ClickHouseParser.RULE_windowClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3032;
            this.match(ClickHouseParser.WINDOW);
            this.state = 3033;
            this.identifier();
            this.state = 3034;
            this.match(ClickHouseParser.AS);
            this.state = 3035;
            this.match(ClickHouseParser.LPAREN);
            this.state = 3036;
            this.windowExpression();
            this.state = 3037;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public prewhereClause(): PrewhereClauseContext {
        let localContext = new PrewhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 352, ClickHouseParser.RULE_prewhereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3039;
            this.match(ClickHouseParser.PREWHERE);
            this.state = 3040;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public whereClause(): WhereClauseContext {
        let localContext = new WhereClauseContext(this.context, this.state);
        this.enterRule(localContext, 354, ClickHouseParser.RULE_whereClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3042;
            this.match(ClickHouseParser.WHERE);
            this.state = 3043;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public groupByClause(): GroupByClauseContext {
        let localContext = new GroupByClauseContext(this.context, this.state);
        this.enterRule(localContext, 356, ClickHouseParser.RULE_groupByClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3045;
            this.match(ClickHouseParser.GROUP);
            this.state = 3046;
            this.match(ClickHouseParser.BY);
            this.state = 3053;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 429, this.context) ) {
            case 1:
                {
                this.state = 3047;
                _la = this.tokenStream.LA(1);
                if(!(_la === 32 || _la === 145)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3048;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3049;
                this.columnExpressionList();
                this.state = 3050;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 2:
                {
                this.state = 3052;
                this.columnExpressionList();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public havingClause(): HavingClauseContext {
        let localContext = new HavingClauseContext(this.context, this.state);
        this.enterRule(localContext, 358, ClickHouseParser.RULE_havingClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3055;
            this.match(ClickHouseParser.HAVING);
            this.state = 3056;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderByClause(): OrderByClauseContext {
        let localContext = new OrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 360, ClickHouseParser.RULE_orderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3058;
            this.match(ClickHouseParser.ORDER);
            this.state = 3059;
            this.match(ClickHouseParser.BY);
            this.state = 3060;
            this.orderExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public projectionOrderByClause(): ProjectionOrderByClauseContext {
        let localContext = new ProjectionOrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 362, ClickHouseParser.RULE_projectionOrderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3062;
            this.match(ClickHouseParser.ORDER);
            this.state = 3063;
            this.match(ClickHouseParser.BY);
            this.state = 3064;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitByClause(): LimitByClauseContext {
        let localContext = new LimitByClauseContext(this.context, this.state);
        this.enterRule(localContext, 364, ClickHouseParser.RULE_limitByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3066;
            this.match(ClickHouseParser.LIMIT);
            this.state = 3067;
            this.limitExpression();
            this.state = 3068;
            this.match(ClickHouseParser.BY);
            this.state = 3069;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitClause(): LimitClauseContext {
        let localContext = new LimitClauseContext(this.context, this.state);
        this.enterRule(localContext, 366, ClickHouseParser.RULE_limitClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3071;
            this.match(ClickHouseParser.LIMIT);
            this.state = 3072;
            this.limitExpression();
            this.state = 3075;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 194) {
                {
                this.state = 3073;
                this.match(ClickHouseParser.WITH);
                this.state = 3074;
                this.match(ClickHouseParser.TIES);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingsClause(): SettingsClauseContext {
        let localContext = new SettingsClauseContext(this.context, this.state);
        this.enterRule(localContext, 368, ClickHouseParser.RULE_settingsClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3077;
            this.match(ClickHouseParser.SETTINGS);
            this.state = 3078;
            this.settingExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public joinExpression(): JoinExpressionContext;
    public joinExpression(_p: number): JoinExpressionContext;
    public joinExpression(_p?: number): JoinExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new JoinExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 370;
        this.enterRecursionRule(localContext, 370, ClickHouseParser.RULE_joinExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3092;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 433, this.context) ) {
            case 1:
                {
                localContext = new JoinExpressionTableContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 3081;
                this.tableExpression(0);
                this.state = 3083;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 431, this.context) ) {
                case 1:
                    {
                    this.state = 3082;
                    this.match(ClickHouseParser.FINAL);
                    }
                    break;
                }
                this.state = 3086;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 432, this.context) ) {
                case 1:
                    {
                    this.state = 3085;
                    this.sampleClause();
                    }
                    break;
                }
                }
                break;
            case 2:
                {
                localContext = new JoinExpressionParensContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3088;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3089;
                this.joinExpression(0);
                this.state = 3090;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3111;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 437, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3109;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 436, this.context) ) {
                    case 1:
                        {
                        localContext = new JoinExpressionCrossOpContext(new JoinExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_joinExpression);
                        this.state = 3094;
                        if (!(this.precpred(this.context, 3))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 3)");
                        }
                        this.state = 3095;
                        this.joinOperatorCross();
                        this.state = 3096;
                        this.joinExpression(4);
                        }
                        break;
                    case 2:
                        {
                        localContext = new JoinExpressionOpContext(new JoinExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_joinExpression);
                        this.state = 3098;
                        if (!(this.precpred(this.context, 4))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 4)");
                        }
                        this.state = 3100;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 72 || _la === 102) {
                            {
                            this.state = 3099;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 72 || _la === 102)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                        }

                        this.state = 3103;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 8592) !== 0) || ((((_la - 70)) & ~0x1F) === 0 && ((1 << (_la - 70)) & 134250497) !== 0) || _la === 144 || _la === 151) {
                            {
                            this.state = 3102;
                            this.joinOperator();
                            }
                        }

                        this.state = 3105;
                        this.match(ClickHouseParser.JOIN);
                        this.state = 3106;
                        this.joinExpression(0);
                        this.state = 3107;
                        this.joinConstraintClause();
                        }
                        break;
                    }
                    }
                }
                this.state = 3113;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 437, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public joinOperator(): JoinOperatorContext {
        let localContext = new JoinOperatorContext(this.context, this.state);
        this.enterRule(localContext, 372, ClickHouseParser.RULE_joinOperator);
        let _la: number;
        try {
            this.state = 3157;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 451, this.context) ) {
            case 1:
                localContext = new JoinOpInnerContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3123;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 440, this.context) ) {
                case 1:
                    {
                    this.state = 3115;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 8464) !== 0)) {
                        {
                        this.state = 3114;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 8464) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 3117;
                    this.match(ClickHouseParser.INNER);
                    }
                    break;
                case 2:
                    {
                    this.state = 3118;
                    this.match(ClickHouseParser.INNER);
                    this.state = 3120;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 8464) !== 0)) {
                        {
                        this.state = 3119;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 8464) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                case 3:
                    {
                    this.state = 3122;
                    _la = this.tokenStream.LA(1);
                    if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 8464) !== 0))) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            case 2:
                localContext = new JoinOpLeftRightContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3139;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 445, this.context) ) {
                case 1:
                    {
                    this.state = 3126;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 8592) !== 0) || _la === 151) {
                        {
                        this.state = 3125;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 8592) !== 0) || _la === 151)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 3128;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 97 || _la === 144)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3130;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 124) {
                        {
                        this.state = 3129;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 3132;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 97 || _la === 144)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3134;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 124) {
                        {
                        this.state = 3133;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    this.state = 3137;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 8592) !== 0) || _la === 151) {
                        {
                        this.state = 3136;
                        _la = this.tokenStream.LA(1);
                        if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 8592) !== 0) || _la === 151)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                }
                }
                break;
            case 3:
                localContext = new JoinOpFullContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3155;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 450, this.context) ) {
                case 1:
                    {
                    this.state = 3142;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 4 || _la === 8) {
                        {
                        this.state = 3141;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 4 || _la === 8)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    this.state = 3144;
                    this.match(ClickHouseParser.FULL);
                    this.state = 3146;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 124) {
                        {
                        this.state = 3145;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    }
                    break;
                case 2:
                    {
                    this.state = 3148;
                    this.match(ClickHouseParser.FULL);
                    this.state = 3150;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 124) {
                        {
                        this.state = 3149;
                        this.match(ClickHouseParser.OUTER);
                        }
                    }

                    this.state = 3153;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 4 || _la === 8) {
                        {
                        this.state = 3152;
                        _la = this.tokenStream.LA(1);
                        if(!(_la === 4 || _la === 8)) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        }
                    }

                    }
                    break;
                }
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinOperatorCross(): JoinOperatorCrossContext {
        let localContext = new JoinOperatorCrossContext(this.context, this.state);
        this.enterRule(localContext, 374, ClickHouseParser.RULE_joinOperatorCross);
        let _la: number;
        try {
            this.state = 3165;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.CROSS:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.LOCAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3160;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 72 || _la === 102) {
                    {
                    this.state = 3159;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 72 || _la === 102)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                }

                this.state = 3162;
                this.match(ClickHouseParser.CROSS);
                this.state = 3163;
                this.match(ClickHouseParser.JOIN);
                }
                break;
            case ClickHouseParser.COMMA:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3164;
                this.match(ClickHouseParser.COMMA);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public joinConstraintClause(): JoinConstraintClauseContext {
        let localContext = new JoinConstraintClauseContext(this.context, this.state);
        this.enterRule(localContext, 376, ClickHouseParser.RULE_joinConstraintClause);
        try {
            this.state = 3176;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 454, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3167;
                this.match(ClickHouseParser.ON);
                this.state = 3168;
                this.columnExpressionList();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3169;
                this.match(ClickHouseParser.USING);
                this.state = 3170;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3171;
                this.columnExpressionList();
                this.state = 3172;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3174;
                this.match(ClickHouseParser.USING);
                this.state = 3175;
                this.columnExpressionList();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public sampleClause(): SampleClauseContext {
        let localContext = new SampleClauseContext(this.context, this.state);
        this.enterRule(localContext, 378, ClickHouseParser.RULE_sampleClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3178;
            this.match(ClickHouseParser.SAMPLE);
            this.state = 3179;
            this.ratioExpression();
            this.state = 3182;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 455, this.context) ) {
            case 1:
                {
                this.state = 3180;
                this.match(ClickHouseParser.OFFSET);
                this.state = 3181;
                this.ratioExpression();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public limitExpression(): LimitExpressionContext {
        let localContext = new LimitExpressionContext(this.context, this.state);
        this.enterRule(localContext, 380, ClickHouseParser.RULE_limitExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3184;
            this.columnExpression(0);
            this.state = 3187;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 119 || _la === 401) {
                {
                this.state = 3185;
                _la = this.tokenStream.LA(1);
                if(!(_la === 119 || _la === 401)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3186;
                this.columnExpression(0);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderExpressionList(): OrderExpressionListContext {
        let localContext = new OrderExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 382, ClickHouseParser.RULE_orderExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3189;
            this.orderExpression();
            this.state = 3194;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 457, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3190;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 3191;
                    this.orderExpression();
                    }
                    }
                }
                this.state = 3196;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 457, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public orderExpression(): OrderExpressionContext {
        let localContext = new OrderExpressionContext(this.context, this.state);
        this.enterRule(localContext, 384, ClickHouseParser.RULE_orderExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3197;
            this.columnExpression(0);
            this.state = 3199;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 458, this.context) ) {
            case 1:
                {
                this.state = 3198;
                _la = this.tokenStream.LA(1);
                if(!(_la === 11 || _la === 12 || _la === 42 || _la === 43)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 3203;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 459, this.context) ) {
            case 1:
                {
                this.state = 3201;
                this.match(ClickHouseParser.NULLS);
                this.state = 3202;
                _la = this.tokenStream.LA(1);
                if(!(_la === 63 || _la === 94)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            }
            this.state = 3207;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 460, this.context) ) {
            case 1:
                {
                this.state = 3205;
                this.match(ClickHouseParser.COLLATE);
                this.state = 3206;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public ratioExpression(): RatioExpressionContext {
        let localContext = new RatioExpressionContext(this.context, this.state);
        this.enterRule(localContext, 386, ClickHouseParser.RULE_ratioExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3209;
            this.numberLiteral();
            this.state = 3212;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 461, this.context) ) {
            case 1:
                {
                this.state = 3210;
                this.match(ClickHouseParser.SLASH);
                this.state = 3211;
                this.numberLiteral();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingExpressionList(): SettingExpressionListContext {
        let localContext = new SettingExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 388, ClickHouseParser.RULE_settingExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3214;
            this.settingExpression();
            this.state = 3219;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 462, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3215;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 3216;
                    this.settingExpression();
                    }
                    }
                }
                this.state = 3221;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 462, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public settingExpression(): SettingExpressionContext {
        let localContext = new SettingExpressionContext(this.context, this.state);
        this.enterRule(localContext, 390, ClickHouseParser.RULE_settingExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3222;
            this.identifier();
            this.state = 3223;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 3224;
            this.literal();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowExpression(): WindowExpressionContext {
        let localContext = new WindowExpressionContext(this.context, this.state);
        this.enterRule(localContext, 392, ClickHouseParser.RULE_windowExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3227;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 127) {
                {
                this.state = 3226;
                this.windowPartitionByClause();
                }
            }

            this.state = 3230;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 123) {
                {
                this.state = 3229;
                this.windowOrderByClause();
                }
            }

            this.state = 3233;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 137 || _la === 147) {
                {
                this.state = 3232;
                this.windowFrameClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowPartitionByClause(): WindowPartitionByClauseContext {
        let localContext = new WindowPartitionByClauseContext(this.context, this.state);
        this.enterRule(localContext, 394, ClickHouseParser.RULE_windowPartitionByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3235;
            this.match(ClickHouseParser.PARTITION);
            this.state = 3236;
            this.match(ClickHouseParser.BY);
            this.state = 3237;
            this.columnExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowOrderByClause(): WindowOrderByClauseContext {
        let localContext = new WindowOrderByClauseContext(this.context, this.state);
        this.enterRule(localContext, 396, ClickHouseParser.RULE_windowOrderByClause);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3239;
            this.match(ClickHouseParser.ORDER);
            this.state = 3240;
            this.match(ClickHouseParser.BY);
            this.state = 3241;
            this.orderExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameClause(): WindowFrameClauseContext {
        let localContext = new WindowFrameClauseContext(this.context, this.state);
        this.enterRule(localContext, 398, ClickHouseParser.RULE_windowFrameClause);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3243;
            _la = this.tokenStream.LA(1);
            if(!(_la === 137 || _la === 147)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3244;
            this.windowFrameExtend();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameExtend(): WindowFrameExtendContext {
        let localContext = new WindowFrameExtendContext(this.context, this.state);
        this.enterRule(localContext, 400, ClickHouseParser.RULE_windowFrameExtend);
        try {
            this.state = 3252;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.INF:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.PLUS:
                localContext = new FrameStartContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3246;
                this.windowFrameBound();
                }
                break;
            case ClickHouseParser.BETWEEN:
                localContext = new FrameBetweenContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3247;
                this.match(ClickHouseParser.BETWEEN);
                this.state = 3248;
                this.windowFrameBound();
                this.state = 3249;
                this.match(ClickHouseParser.AND);
                this.state = 3250;
                this.windowFrameBound();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public windowFrameBound(): WindowFrameBoundContext {
        let localContext = new WindowFrameBoundContext(this.context, this.state);
        this.enterRule(localContext, 402, ClickHouseParser.RULE_windowFrameBound);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3266;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 467, this.context) ) {
            case 1:
                {
                this.state = 3254;
                this.match(ClickHouseParser.CURRENT);
                this.state = 3255;
                this.match(ClickHouseParser.ROW);
                }
                break;
            case 2:
                {
                this.state = 3256;
                this.match(ClickHouseParser.UNBOUNDED);
                this.state = 3257;
                this.match(ClickHouseParser.PRECEDING);
                }
                break;
            case 3:
                {
                this.state = 3258;
                this.match(ClickHouseParser.UNBOUNDED);
                this.state = 3259;
                this.match(ClickHouseParser.FOLLOWING);
                }
                break;
            case 4:
                {
                this.state = 3260;
                this.numberLiteral();
                this.state = 3261;
                this.match(ClickHouseParser.PRECEDING);
                }
                break;
            case 5:
                {
                this.state = 3263;
                this.numberLiteral();
                this.state = 3264;
                this.match(ClickHouseParser.FOLLOWING);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public setStatement(): SetStatementContext {
        let localContext = new SetStatementContext(this.context, this.state);
        this.enterRule(localContext, 404, ClickHouseParser.RULE_setStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3268;
            this.match(ClickHouseParser.SET);
            this.state = 3269;
            this.settingExpressionList();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public showStatement(): ShowStatementContext {
        let localContext = new ShowStatementContext(this.context, this.state);
        this.enterRule(localContext, 406, ClickHouseParser.RULE_showStatement);
        let _la: number;
        try {
            this.state = 3313;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 475, this.context) ) {
            case 1:
                localContext = new ShowCreateDatabaseStatementContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3271;
                this.match(ClickHouseParser.SHOW);
                this.state = 3272;
                this.match(ClickHouseParser.CREATE);
                this.state = 3273;
                this.match(ClickHouseParser.DATABASE);
                this.state = 3274;
                this.databaseIdentifier();
                }
                break;
            case 2:
                localContext = new ShowCreateDictionaryStatementContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3275;
                this.match(ClickHouseParser.SHOW);
                this.state = 3276;
                this.match(ClickHouseParser.CREATE);
                this.state = 3277;
                this.match(ClickHouseParser.DICTIONARY);
                this.state = 3278;
                this.tableIdentifier();
                }
                break;
            case 3:
                localContext = new ShowCreateTableStatementContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3279;
                this.match(ClickHouseParser.SHOW);
                this.state = 3280;
                this.match(ClickHouseParser.CREATE);
                this.state = 3282;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 468, this.context) ) {
                case 1:
                    {
                    this.state = 3281;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                    break;
                }
                this.state = 3285;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 469, this.context) ) {
                case 1:
                    {
                    this.state = 3284;
                    this.match(ClickHouseParser.TABLE);
                    }
                    break;
                }
                this.state = 3287;
                this.tableIdentifier();
                }
                break;
            case 4:
                localContext = new ShowDatabasesStatementContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3288;
                this.match(ClickHouseParser.SHOW);
                this.state = 3289;
                this.match(ClickHouseParser.DATABASES);
                }
                break;
            case 5:
                localContext = new ShowDictionariesStatementContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3290;
                this.match(ClickHouseParser.SHOW);
                this.state = 3291;
                this.match(ClickHouseParser.DICTIONARIES);
                this.state = 3294;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 69) {
                    {
                    this.state = 3292;
                    this.match(ClickHouseParser.FROM);
                    this.state = 3293;
                    this.databaseIdentifier();
                    }
                }

                }
                break;
            case 6:
                localContext = new ShowTablesStatementContext(localContext);
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3296;
                this.match(ClickHouseParser.SHOW);
                this.state = 3298;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 165) {
                    {
                    this.state = 3297;
                    this.match(ClickHouseParser.TEMPORARY);
                    }
                }

                this.state = 3300;
                this.match(ClickHouseParser.TABLES);
                this.state = 3303;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 69 || _la === 81) {
                    {
                    this.state = 3301;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 69 || _la === 81)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 3302;
                    this.databaseIdentifier();
                    }
                }

                this.state = 3308;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.LIKE:
                    {
                    this.state = 3305;
                    this.match(ClickHouseParser.LIKE);
                    this.state = 3306;
                    this.match(ClickHouseParser.STRING_LITERAL);
                    }
                    break;
                case ClickHouseParser.WHERE:
                    {
                    this.state = 3307;
                    this.whereClause();
                    }
                    break;
                case ClickHouseParser.EOF:
                case ClickHouseParser.FORMAT:
                case ClickHouseParser.INTO:
                case ClickHouseParser.LIMIT:
                case ClickHouseParser.RPAREN:
                case ClickHouseParser.SEMICOLON:
                    break;
                default:
                    break;
                }
                this.state = 3311;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 100) {
                    {
                    this.state = 3310;
                    this.limitClause();
                    }
                }

                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public systemStatement(): SystemStatementContext {
        let localContext = new SystemStatementContext(this.context, this.state);
        this.enterRule(localContext, 408, ClickHouseParser.RULE_systemStatement);
        let _la: number;
        try {
            this.state = 3349;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 478, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3315;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 3316;
                this.match(ClickHouseParser.FLUSH);
                this.state = 3317;
                this.match(ClickHouseParser.DISTRIBUTED);
                this.state = 3318;
                this.tableIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3319;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 3320;
                this.match(ClickHouseParser.FLUSH);
                this.state = 3321;
                this.match(ClickHouseParser.LOGS);
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3322;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 3323;
                this.match(ClickHouseParser.RELOAD);
                this.state = 3324;
                this.match(ClickHouseParser.DICTIONARIES);
                }
                break;
            case 4:
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3325;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 3326;
                this.match(ClickHouseParser.RELOAD);
                this.state = 3327;
                this.match(ClickHouseParser.DICTIONARY);
                this.state = 3328;
                this.tableIdentifier();
                }
                break;
            case 5:
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3329;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 3330;
                _la = this.tokenStream.LA(1);
                if(!(_la === 157 || _la === 158)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3338;
                this.errorHandler.sync(this);
                switch (this.tokenStream.LA(1)) {
                case ClickHouseParser.DISTRIBUTED:
                    {
                    this.state = 3331;
                    this.match(ClickHouseParser.DISTRIBUTED);
                    this.state = 3332;
                    this.match(ClickHouseParser.SENDS);
                    }
                    break;
                case ClickHouseParser.FETCHES:
                    {
                    this.state = 3333;
                    this.match(ClickHouseParser.FETCHES);
                    }
                    break;
                case ClickHouseParser.MERGES:
                case ClickHouseParser.TTL:
                    {
                    this.state = 3335;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (_la === 178) {
                        {
                        this.state = 3334;
                        this.match(ClickHouseParser.TTL);
                        }
                    }

                    this.state = 3337;
                    this.match(ClickHouseParser.MERGES);
                    }
                    break;
                default:
                    throw new antlr.NoViableAltException(this);
                }
                this.state = 3340;
                this.tableIdentifier();
                }
                break;
            case 6:
                this.enterOuterAlt(localContext, 6);
                {
                this.state = 3341;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 3342;
                _la = this.tokenStream.LA(1);
                if(!(_la === 157 || _la === 158)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3343;
                this.match(ClickHouseParser.REPLICATED);
                this.state = 3344;
                this.match(ClickHouseParser.SENDS);
                }
                break;
            case 7:
                this.enterOuterAlt(localContext, 7);
                {
                this.state = 3345;
                this.match(ClickHouseParser.SYSTEM);
                this.state = 3346;
                this.match(ClickHouseParser.SYNC);
                this.state = 3347;
                this.match(ClickHouseParser.REPLICA);
                this.state = 3348;
                this.tableIdentifier();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public truncateStatement(): TruncateStatementContext {
        let localContext = new TruncateStatementContext(this.context, this.state);
        this.enterRule(localContext, 410, ClickHouseParser.RULE_truncateStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3351;
            this.match(ClickHouseParser.TRUNCATE);
            this.state = 3353;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 479, this.context) ) {
            case 1:
                {
                this.state = 3352;
                this.match(ClickHouseParser.TEMPORARY);
                }
                break;
            }
            this.state = 3356;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 480, this.context) ) {
            case 1:
                {
                this.state = 3355;
                this.match(ClickHouseParser.TABLE);
                }
                break;
            }
            this.state = 3360;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 481, this.context) ) {
            case 1:
                {
                this.state = 3358;
                this.match(ClickHouseParser.IF);
                this.state = 3359;
                this.match(ClickHouseParser.EXISTS);
                }
                break;
            }
            this.state = 3362;
            this.tableIdentifier();
            this.state = 3364;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 120) {
                {
                this.state = 3363;
                this.clusterClause();
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public useStatement(): UseStatementContext {
        let localContext = new UseStatementContext(this.context, this.state);
        this.enterRule(localContext, 412, ClickHouseParser.RULE_useStatement);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3366;
            this.match(ClickHouseParser.USE);
            this.state = 3367;
            this.databaseIdentifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public watchStatement(): WatchStatementContext {
        let localContext = new WatchStatementContext(this.context, this.state);
        this.enterRule(localContext, 414, ClickHouseParser.RULE_watchStatement);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3369;
            this.match(ClickHouseParser.WATCH);
            this.state = 3370;
            this.tableIdentifier();
            this.state = 3372;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 56) {
                {
                this.state = 3371;
                this.match(ClickHouseParser.EVENTS);
                }
            }

            this.state = 3376;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 100) {
                {
                this.state = 3374;
                this.match(ClickHouseParser.LIMIT);
                this.state = 3375;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
            }

            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        let localContext = new ColumnTypeExpressionContext(this.context, this.state);
        this.enterRule(localContext, 416, ClickHouseParser.RULE_columnTypeExpression);
        let _la: number;
        try {
            this.state = 3425;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 489, this.context) ) {
            case 1:
                localContext = new ColumnTypeExpressionSimpleContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3378;
                this.identifier();
                }
                break;
            case 2:
                localContext = new ColumnTypeExpressionNestedContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3379;
                this.identifier();
                this.state = 3380;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3381;
                this.identifier();
                this.state = 3382;
                this.columnTypeExpression();
                this.state = 3389;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 401) {
                    {
                    {
                    this.state = 3383;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 3384;
                    this.identifier();
                    this.state = 3385;
                    this.columnTypeExpression();
                    }
                    }
                    this.state = 3391;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3392;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                localContext = new ColumnTypeExpressionEnumContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3394;
                this.identifier();
                this.state = 3395;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3396;
                this.enumValue();
                this.state = 3401;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 401) {
                    {
                    {
                    this.state = 3397;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 3398;
                    this.enumValue();
                    }
                    }
                    this.state = 3403;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3404;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 4:
                localContext = new ColumnTypeExpressionComplexContext(localContext);
                this.enterOuterAlt(localContext, 4);
                {
                this.state = 3406;
                this.identifier();
                this.state = 3407;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3408;
                this.columnTypeExpression();
                this.state = 3413;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                while (_la === 401) {
                    {
                    {
                    this.state = 3409;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 3410;
                    this.columnTypeExpression();
                    }
                    }
                    this.state = 3415;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                }
                this.state = 3416;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 5:
                localContext = new ColumnTypeExpressionParamContext(localContext);
                this.enterOuterAlt(localContext, 5);
                {
                this.state = 3418;
                this.identifier();
                this.state = 3419;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3421;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967295) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294967295) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 4294967295) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 4294967295) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & 4294967295) !== 0) || ((((_la - 385)) & ~0x1F) === 0 && ((1 << (_la - 385)) & 2316048383) !== 0)) {
                    {
                    this.state = 3420;
                    this.columnExpressionList();
                    }
                }

                this.state = 3423;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        let localContext = new ColumnExpressionListContext(this.context, this.state);
        this.enterRule(localContext, 418, ClickHouseParser.RULE_columnExpressionList);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3427;
            this.columnsExpression();
            this.state = 3432;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 490, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    {
                    {
                    this.state = 3428;
                    this.match(ClickHouseParser.COMMA);
                    this.state = 3429;
                    this.columnsExpression();
                    }
                    }
                }
                this.state = 3434;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 490, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnsExpression(): ColumnsExpressionContext {
        let localContext = new ColumnsExpressionContext(this.context, this.state);
        this.enterRule(localContext, 420, ClickHouseParser.RULE_columnsExpression);
        let _la: number;
        try {
            this.state = 3446;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 492, this.context) ) {
            case 1:
                localContext = new ColumnsExpressionAsteriskContext(localContext);
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3438;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4292607999) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 127) !== 0)) {
                    {
                    this.state = 3435;
                    this.tableIdentifier();
                    this.state = 3436;
                    this.match(ClickHouseParser.DOT);
                    }
                }

                this.state = 3440;
                this.match(ClickHouseParser.ASTERISK);
                }
                break;
            case 2:
                localContext = new ColumnsExpressionSubqueryContext(localContext);
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3441;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3442;
                this.selectUnionStatement();
                this.state = 3443;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                localContext = new ColumnsExpressionColumnContext(localContext);
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3445;
                this.columnExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public columnExpression(): ColumnExpressionContext;
    public columnExpression(_p: number): ColumnExpressionContext;
    public columnExpression(_p?: number): ColumnExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new ColumnExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 422;
        this.enterRecursionRule(localContext, 422, ClickHouseParser.RULE_columnExpression, _p);
        let _la: number;
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3577;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 505, this.context) ) {
            case 1:
                {
                localContext = new ColumnExpressionCaseContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 3449;
                this.match(ClickHouseParser.CASE);
                this.state = 3451;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 493, this.context) ) {
                case 1:
                    {
                    this.state = 3450;
                    this.columnExpression(0);
                    }
                    break;
                }
                this.state = 3458;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                do {
                    {
                    {
                    this.state = 3453;
                    this.match(ClickHouseParser.WHEN);
                    this.state = 3454;
                    this.columnExpression(0);
                    this.state = 3455;
                    this.match(ClickHouseParser.THEN);
                    this.state = 3456;
                    this.columnExpression(0);
                    }
                    }
                    this.state = 3460;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                } while (_la === 191);
                this.state = 3464;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 52) {
                    {
                    this.state = 3462;
                    this.match(ClickHouseParser.ELSE);
                    this.state = 3463;
                    this.columnExpression(0);
                    }
                }

                this.state = 3466;
                this.match(ClickHouseParser.END);
                }
                break;
            case 2:
                {
                localContext = new ColumnExpressionCastContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3468;
                this.match(ClickHouseParser.CAST);
                this.state = 3469;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3470;
                this.columnExpression(0);
                this.state = 3471;
                this.match(ClickHouseParser.AS);
                this.state = 3472;
                this.columnTypeExpression();
                this.state = 3473;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 3:
                {
                localContext = new ColumnExpressionDateContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3475;
                this.match(ClickHouseParser.DATE);
                this.state = 3476;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 4:
                {
                localContext = new ColumnExpressionExtractContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3477;
                this.match(ClickHouseParser.EXTRACT);
                this.state = 3478;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3479;
                this.interval();
                this.state = 3480;
                this.match(ClickHouseParser.FROM);
                this.state = 3481;
                this.columnExpression(0);
                this.state = 3482;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 5:
                {
                localContext = new ColumnExpressionIntervalContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3484;
                this.match(ClickHouseParser.INTERVAL);
                this.state = 3485;
                this.columnExpression(0);
                this.state = 3486;
                this.interval();
                }
                break;
            case 6:
                {
                localContext = new ColumnExpressionSubstringContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3488;
                this.match(ClickHouseParser.SUBSTRING);
                this.state = 3489;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3490;
                this.columnExpression(0);
                this.state = 3491;
                this.match(ClickHouseParser.FROM);
                this.state = 3492;
                this.columnExpression(0);
                this.state = 3495;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (_la === 66) {
                    {
                    this.state = 3493;
                    this.match(ClickHouseParser.FOR);
                    this.state = 3494;
                    this.columnExpression(0);
                    }
                }

                this.state = 3497;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 7:
                {
                localContext = new ColumnExpressionTimestampContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3499;
                this.match(ClickHouseParser.TIMESTAMP);
                this.state = 3500;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case 8:
                {
                localContext = new ColumnExpressionTrimContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3501;
                this.match(ClickHouseParser.TRIM);
                this.state = 3502;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3503;
                _la = this.tokenStream.LA(1);
                if(!(_la === 18 || _la === 96 || _la === 174)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3504;
                this.match(ClickHouseParser.STRING_LITERAL);
                this.state = 3505;
                this.match(ClickHouseParser.FROM);
                this.state = 3506;
                this.columnExpression(0);
                this.state = 3507;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 9:
                {
                localContext = new ColumnExpressionWinFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3509;
                this.identifier();
                {
                this.state = 3510;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3512;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967295) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294967295) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 4294967295) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 4294967295) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & 4294967295) !== 0) || ((((_la - 385)) & ~0x1F) === 0 && ((1 << (_la - 385)) & 2316048383) !== 0)) {
                    {
                    this.state = 3511;
                    this.columnExpressionList();
                    }
                }

                this.state = 3514;
                this.match(ClickHouseParser.RPAREN);
                }
                this.state = 3516;
                this.match(ClickHouseParser.OVER);
                this.state = 3517;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3518;
                this.windowExpression();
                this.state = 3519;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 10:
                {
                localContext = new ColumnExpressionWinFunctionTargetContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3521;
                this.identifier();
                {
                this.state = 3522;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3524;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967295) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294967295) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 4294967295) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 4294967295) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & 4294967295) !== 0) || ((((_la - 385)) & ~0x1F) === 0 && ((1 << (_la - 385)) & 2316048383) !== 0)) {
                    {
                    this.state = 3523;
                    this.columnExpressionList();
                    }
                }

                this.state = 3526;
                this.match(ClickHouseParser.RPAREN);
                }
                this.state = 3528;
                this.match(ClickHouseParser.OVER);
                this.state = 3529;
                this.identifier();
                }
                break;
            case 11:
                {
                localContext = new ColumnExpressionFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3531;
                this.identifier();
                this.state = 3537;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 500, this.context) ) {
                case 1:
                    {
                    this.state = 3532;
                    this.match(ClickHouseParser.LPAREN);
                    this.state = 3534;
                    this.errorHandler.sync(this);
                    _la = this.tokenStream.LA(1);
                    if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967295) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294967295) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 4294967295) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 4294967295) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & 4294967295) !== 0) || ((((_la - 385)) & ~0x1F) === 0 && ((1 << (_la - 385)) & 2316048383) !== 0)) {
                        {
                        this.state = 3533;
                        this.columnExpressionList();
                        }
                    }

                    this.state = 3536;
                    this.match(ClickHouseParser.RPAREN);
                    }
                    break;
                }
                this.state = 3539;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3541;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 501, this.context) ) {
                case 1:
                    {
                    this.state = 3540;
                    this.match(ClickHouseParser.DISTINCT);
                    }
                    break;
                }
                this.state = 3544;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967295) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294967295) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 4294967295) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 4294967295) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & 4294967295) !== 0) || ((((_la - 385)) & ~0x1F) === 0 && ((1 << (_la - 385)) & 2316048383) !== 0)) {
                    {
                    this.state = 3543;
                    this.columnArgumentList();
                    }
                }

                this.state = 3546;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 12:
                {
                localContext = new ColumnExpressionLiteralContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3548;
                this.literal();
                }
                break;
            case 13:
                {
                localContext = new ColumnExpressionNegateContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3549;
                this.match(ClickHouseParser.DASH);
                this.state = 3550;
                this.columnExpression(17);
                }
                break;
            case 14:
                {
                localContext = new ColumnExpressionNotContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3551;
                this.match(ClickHouseParser.NOT);
                this.state = 3552;
                this.columnExpression(12);
                }
                break;
            case 15:
                {
                localContext = new ColumnExpressionAsteriskContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3556;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if ((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4292607999) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 127) !== 0)) {
                    {
                    this.state = 3553;
                    this.tableIdentifier();
                    this.state = 3554;
                    this.match(ClickHouseParser.DOT);
                    }
                }

                this.state = 3558;
                this.match(ClickHouseParser.ASTERISK);
                }
                break;
            case 16:
                {
                localContext = new ColumnExpressionSubqueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3559;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3560;
                this.selectUnionStatement();
                this.state = 3561;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 17:
                {
                localContext = new ColumnExpressionParensContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3563;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3564;
                this.columnExpression(0);
                this.state = 3565;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 18:
                {
                localContext = new ColumnExpressionTupleContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3567;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3568;
                this.columnExpressionList();
                this.state = 3569;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case 19:
                {
                localContext = new ColumnExpressionArrayContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3571;
                this.match(ClickHouseParser.LBRACKET);
                this.state = 3573;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
                if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967295) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294967295) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 4294967295) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 4294967295) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & 4294967295) !== 0) || ((((_la - 385)) & ~0x1F) === 0 && ((1 << (_la - 385)) & 2316048383) !== 0)) {
                    {
                    this.state = 3572;
                    this.columnExpressionList();
                    }
                }

                this.state = 3575;
                this.match(ClickHouseParser.RBRACKET);
                }
                break;
            case 20:
                {
                localContext = new ColumnExpressionIdentifierContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3576;
                this.columnIdentifier();
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3650;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 514, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    this.state = 3648;
                    this.errorHandler.sync(this);
                    switch (this.interpreter.adaptivePredict(this.tokenStream, 513, this.context) ) {
                    case 1:
                        {
                        localContext = new ColumnExpressionPrecedence1Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3579;
                        if (!(this.precpred(this.context, 16))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 16)");
                        }
                        this.state = 3580;
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 397)) & ~0x1F) === 0 && ((1 << (_la - 397)) & 134479873) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3581;
                        this.columnExpression(17);
                        }
                        break;
                    case 2:
                        {
                        localContext = new ColumnExpressionPrecedence2Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3582;
                        if (!(this.precpred(this.context, 15))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 15)");
                        }
                        this.state = 3583;
                        _la = this.tokenStream.LA(1);
                        if(!(((((_la - 402)) & ~0x1F) === 0 && ((1 << (_la - 402)) & 16387) !== 0))) {
                        this.errorHandler.recoverInline(this);
                        }
                        else {
                            this.errorHandler.reportMatch(this);
                            this.consume();
                        }
                        this.state = 3584;
                        this.columnExpression(16);
                        }
                        break;
                    case 3:
                        {
                        localContext = new ColumnExpressionPrecedence3Context(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3585;
                        if (!(this.precpred(this.context, 14))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 14)");
                        }
                        this.state = 3604;
                        this.errorHandler.sync(this);
                        switch (this.interpreter.adaptivePredict(this.tokenStream, 509, this.context) ) {
                        case 1:
                            {
                            this.state = 3586;
                            this.match(ClickHouseParser.EQ_DOUBLE);
                            }
                            break;
                        case 2:
                            {
                            this.state = 3587;
                            this.match(ClickHouseParser.EQ_SINGLE);
                            }
                            break;
                        case 3:
                            {
                            this.state = 3588;
                            this.match(ClickHouseParser.NOT_EQ);
                            }
                            break;
                        case 4:
                            {
                            this.state = 3589;
                            this.match(ClickHouseParser.LE);
                            }
                            break;
                        case 5:
                            {
                            this.state = 3590;
                            this.match(ClickHouseParser.GE);
                            }
                            break;
                        case 6:
                            {
                            this.state = 3591;
                            this.match(ClickHouseParser.LT);
                            }
                            break;
                        case 7:
                            {
                            this.state = 3592;
                            this.match(ClickHouseParser.GT);
                            }
                            break;
                        case 8:
                            {
                            this.state = 3594;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 72) {
                                {
                                this.state = 3593;
                                this.match(ClickHouseParser.GLOBAL);
                                }
                            }

                            this.state = 3597;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 116) {
                                {
                                this.state = 3596;
                                this.match(ClickHouseParser.NOT);
                                }
                            }

                            this.state = 3599;
                            this.match(ClickHouseParser.IN);
                            }
                            break;
                        case 9:
                            {
                            this.state = 3601;
                            this.errorHandler.sync(this);
                            _la = this.tokenStream.LA(1);
                            if (_la === 116) {
                                {
                                this.state = 3600;
                                this.match(ClickHouseParser.NOT);
                                }
                            }

                            this.state = 3603;
                            _la = this.tokenStream.LA(1);
                            if(!(_la === 80 || _la === 99)) {
                            this.errorHandler.recoverInline(this);
                            }
                            else {
                                this.errorHandler.reportMatch(this);
                                this.consume();
                            }
                            }
                            break;
                        }
                        this.state = 3606;
                        this.columnExpression(15);
                        }
                        break;
                    case 4:
                        {
                        localContext = new ColumnExpressionAndContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3607;
                        if (!(this.precpred(this.context, 11))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 11)");
                        }
                        this.state = 3608;
                        this.match(ClickHouseParser.AND);
                        this.state = 3609;
                        this.columnExpression(12);
                        }
                        break;
                    case 5:
                        {
                        localContext = new ColumnExpressionOrContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3610;
                        if (!(this.precpred(this.context, 10))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 10)");
                        }
                        this.state = 3611;
                        this.match(ClickHouseParser.OR);
                        this.state = 3612;
                        this.columnExpression(11);
                        }
                        break;
                    case 6:
                        {
                        localContext = new ColumnExpressionBetweenContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3613;
                        if (!(this.precpred(this.context, 9))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 9)");
                        }
                        this.state = 3615;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 116) {
                            {
                            this.state = 3614;
                            this.match(ClickHouseParser.NOT);
                            }
                        }

                        this.state = 3617;
                        this.match(ClickHouseParser.BETWEEN);
                        this.state = 3618;
                        this.columnExpression(0);
                        this.state = 3619;
                        this.match(ClickHouseParser.AND);
                        this.state = 3620;
                        this.columnExpression(10);
                        }
                        break;
                    case 7:
                        {
                        localContext = new ColumnExpressionTernaryOpContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3622;
                        if (!(this.precpred(this.context, 8))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 8)");
                        }
                        this.state = 3623;
                        this.match(ClickHouseParser.QUESTIONMARK);
                        this.state = 3624;
                        this.columnExpression(0);
                        this.state = 3625;
                        this.match(ClickHouseParser.COLON);
                        this.state = 3626;
                        this.columnExpression(8);
                        }
                        break;
                    case 8:
                        {
                        localContext = new ColumnExpressionArrayAccessContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3628;
                        if (!(this.precpred(this.context, 19))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 19)");
                        }
                        this.state = 3629;
                        this.match(ClickHouseParser.LBRACKET);
                        this.state = 3630;
                        this.columnExpression(0);
                        this.state = 3631;
                        this.match(ClickHouseParser.RBRACKET);
                        }
                        break;
                    case 9:
                        {
                        localContext = new ColumnExpressionTupleAccessContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3633;
                        if (!(this.precpred(this.context, 18))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 18)");
                        }
                        this.state = 3634;
                        this.match(ClickHouseParser.DOT);
                        this.state = 3635;
                        this.match(ClickHouseParser.DECIMAL_LITERAL);
                        }
                        break;
                    case 10:
                        {
                        localContext = new ColumnExpressionIsNullContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3636;
                        if (!(this.precpred(this.context, 13))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 13)");
                        }
                        this.state = 3637;
                        this.match(ClickHouseParser.IS);
                        this.state = 3639;
                        this.errorHandler.sync(this);
                        _la = this.tokenStream.LA(1);
                        if (_la === 116) {
                            {
                            this.state = 3638;
                            this.match(ClickHouseParser.NOT);
                            }
                        }

                        this.state = 3641;
                        this.match(ClickHouseParser.NULL_SQL);
                        }
                        break;
                    case 11:
                        {
                        localContext = new ColumnExpressionAliasContext(new ColumnExpressionContext(parentContext, parentState));
                        this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_columnExpression);
                        this.state = 3642;
                        if (!(this.precpred(this.context, 7))) {
                            throw this.createFailedPredicateException("this.precpred(this.context, 7)");
                        }
                        this.state = 3646;
                        this.errorHandler.sync(this);
                        switch (this.tokenStream.LA(1)) {
                        case ClickHouseParser.DATE:
                        case ClickHouseParser.FIRST:
                        case ClickHouseParser.ID:
                        case ClickHouseParser.KEY:
                        case ClickHouseParser.IDENTIFIER:
                            {
                            this.state = 3643;
                            this.alias();
                            }
                            break;
                        case ClickHouseParser.AS:
                            {
                            this.state = 3644;
                            this.match(ClickHouseParser.AS);
                            this.state = 3645;
                            this.identifier();
                            }
                            break;
                        default:
                            throw new antlr.NoViableAltException(this);
                        }
                        }
                        break;
                    }
                    }
                }
                this.state = 3652;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 514, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public columnArgumentList(): ColumnArgumentListContext {
        let localContext = new ColumnArgumentListContext(this.context, this.state);
        this.enterRule(localContext, 424, ClickHouseParser.RULE_columnArgumentList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3653;
            this.columnArgumentExpression();
            this.state = 3658;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 3654;
                this.match(ClickHouseParser.COMMA);
                this.state = 3655;
                this.columnArgumentExpression();
                }
                }
                this.state = 3660;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnArgumentExpression(): ColumnArgumentExpressionContext {
        let localContext = new ColumnArgumentExpressionContext(this.context, this.state);
        this.enterRule(localContext, 426, ClickHouseParser.RULE_columnArgumentExpression);
        try {
            this.state = 3663;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 516, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3661;
                this.columnLambdaExpression();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3662;
                this.columnExpression(0);
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnLambdaExpression(): ColumnLambdaExpressionContext {
        let localContext = new ColumnLambdaExpressionContext(this.context, this.state);
        this.enterRule(localContext, 428, ClickHouseParser.RULE_columnLambdaExpression);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3670;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.LPAREN:
                {
                this.state = 3665;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3666;
                this.identifierList();
                this.state = 3667;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASC:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.KEYED:
            case ClickHouseParser.RANDOMIZED:
            case ClickHouseParser.USER_NAME:
            case ClickHouseParser.IP_ADDRESS:
            case ClickHouseParser.FORWARDED_IP_ADDRESS:
            case ClickHouseParser.CLIENT_KEY:
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
            case ClickHouseParser.QUERIES:
            case ClickHouseParser.QUERY_SELECTS:
            case ClickHouseParser.QUERY_INSERTS:
            case ClickHouseParser.ERRORS:
            case ClickHouseParser.RESULT_ROWS:
            case ClickHouseParser.RESULT_BYTES:
            case ClickHouseParser.READ_ROWS:
            case ClickHouseParser.READ_BYTES:
            case ClickHouseParser.EXECUTION_TIME:
            case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
            case ClickHouseParser.LIMITS:
            case ClickHouseParser.TRACKING:
            case ClickHouseParser.ONLY:
            case ClickHouseParser.CONST:
            case ClickHouseParser.CHANGEABLE_IN_READONLY:
            case ClickHouseParser.OVERRIDABLE:
            case ClickHouseParser.INHERIT:
            case ClickHouseParser.RESET:
            case ClickHouseParser.DETACHED:
            case ClickHouseParser.FORGET:
            case ClickHouseParser.STATISTICS:
            case ClickHouseParser.UNFREEZE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                {
                this.state = 3669;
                this.identifierList();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
            this.state = 3672;
            this.match(ClickHouseParser.ARROW_SYMBOL);
            this.state = 3673;
            this.columnExpression(0);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public columnIdentifier(): ColumnIdentifierContext {
        let localContext = new ColumnIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 430, ClickHouseParser.RULE_columnIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3678;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 518, this.context) ) {
            case 1:
                {
                this.state = 3675;
                this.tableIdentifier();
                this.state = 3676;
                this.match(ClickHouseParser.DOT);
                }
                break;
            }
            this.state = 3680;
            this.identifier();
            this.state = 3683;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 519, this.context) ) {
            case 1:
                {
                this.state = 3681;
                this.match(ClickHouseParser.DOT);
                this.state = 3682;
                this.identifier();
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public tableExpression(): TableExpressionContext;
    public tableExpression(_p: number): TableExpressionContext;
    public tableExpression(_p?: number): TableExpressionContext {
        if (_p === undefined) {
            _p = 0;
        }

        let parentContext = this.context;
        let parentState = this.state;
        let localContext = new TableExpressionContext(this.context, parentState);
        let previousContext = localContext;
        let _startState = 432;
        this.enterRecursionRule(localContext, 432, ClickHouseParser.RULE_tableExpression, _p);
        try {
            let alternative: number;
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3692;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 520, this.context) ) {
            case 1:
                {
                localContext = new TableExpressionIdentifierContext(localContext);
                this.context = localContext;
                previousContext = localContext;

                this.state = 3686;
                this.tableIdentifier();
                }
                break;
            case 2:
                {
                localContext = new TableExpressionFunctionContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3687;
                this.tableFunctionExpression();
                }
                break;
            case 3:
                {
                localContext = new TableExpressionSubqueryContext(localContext);
                this.context = localContext;
                previousContext = localContext;
                this.state = 3688;
                this.match(ClickHouseParser.LPAREN);
                this.state = 3689;
                this.selectUnionStatement();
                this.state = 3690;
                this.match(ClickHouseParser.RPAREN);
                }
                break;
            }
            this.context!.stop = this.tokenStream.LT(-1);
            this.state = 3702;
            this.errorHandler.sync(this);
            alternative = this.interpreter.adaptivePredict(this.tokenStream, 522, this.context);
            while (alternative !== 2 && alternative !== antlr.ATN.INVALID_ALT_NUMBER) {
                if (alternative === 1) {
                    if (this.parseListeners != null) {
                        this.triggerExitRuleEvent();
                    }
                    previousContext = localContext;
                    {
                    {
                    localContext = new TableExpressionAliasContext(new TableExpressionContext(parentContext, parentState));
                    this.pushNewRecursionContext(localContext, _startState, ClickHouseParser.RULE_tableExpression);
                    this.state = 3694;
                    if (!(this.precpred(this.context, 1))) {
                        throw this.createFailedPredicateException("this.precpred(this.context, 1)");
                    }
                    this.state = 3698;
                    this.errorHandler.sync(this);
                    switch (this.tokenStream.LA(1)) {
                    case ClickHouseParser.DATE:
                    case ClickHouseParser.FIRST:
                    case ClickHouseParser.ID:
                    case ClickHouseParser.KEY:
                    case ClickHouseParser.IDENTIFIER:
                        {
                        this.state = 3695;
                        this.alias();
                        }
                        break;
                    case ClickHouseParser.AS:
                        {
                        this.state = 3696;
                        this.match(ClickHouseParser.AS);
                        this.state = 3697;
                        this.identifier();
                        }
                        break;
                    default:
                        throw new antlr.NoViableAltException(this);
                    }
                    }
                    }
                }
                this.state = 3704;
                this.errorHandler.sync(this);
                alternative = this.interpreter.adaptivePredict(this.tokenStream, 522, this.context);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.unrollRecursionContexts(parentContext);
        }
        return localContext;
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        let localContext = new TableFunctionExpressionContext(this.context, this.state);
        this.enterRule(localContext, 434, ClickHouseParser.RULE_tableFunctionExpression);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3705;
            this.identifier();
            this.state = 3706;
            this.match(ClickHouseParser.LPAREN);
            this.state = 3708;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (((((_la - 1)) & ~0x1F) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & 4294967295) !== 0) || ((((_la - 97)) & ~0x1F) === 0 && ((1 << (_la - 97)) & 4294967295) !== 0) || ((((_la - 129)) & ~0x1F) === 0 && ((1 << (_la - 129)) & 4294967295) !== 0) || ((((_la - 161)) & ~0x1F) === 0 && ((1 << (_la - 161)) & 4294967295) !== 0) || ((((_la - 193)) & ~0x1F) === 0 && ((1 << (_la - 193)) & 4294967295) !== 0) || ((((_la - 225)) & ~0x1F) === 0 && ((1 << (_la - 225)) & 4294967295) !== 0) || ((((_la - 257)) & ~0x1F) === 0 && ((1 << (_la - 257)) & 4294967295) !== 0) || ((((_la - 289)) & ~0x1F) === 0 && ((1 << (_la - 289)) & 4294967295) !== 0) || ((((_la - 321)) & ~0x1F) === 0 && ((1 << (_la - 321)) & 4294967295) !== 0) || ((((_la - 353)) & ~0x1F) === 0 && ((1 << (_la - 353)) & 4294967295) !== 0) || ((((_la - 385)) & ~0x1F) === 0 && ((1 << (_la - 385)) & 2148272127) !== 0)) {
                {
                this.state = 3707;
                this.tableArgList();
                }
            }

            this.state = 3710;
            this.match(ClickHouseParser.RPAREN);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableIdentifier(): TableIdentifierContext {
        let localContext = new TableIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 436, ClickHouseParser.RULE_tableIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3715;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 524, this.context) ) {
            case 1:
                {
                this.state = 3712;
                this.databaseIdentifier();
                this.state = 3713;
                this.match(ClickHouseParser.DOT);
                }
                break;
            }
            this.state = 3717;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgList(): TableArgListContext {
        let localContext = new TableArgListContext(this.context, this.state);
        this.enterRule(localContext, 438, ClickHouseParser.RULE_tableArgList);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3719;
            this.tableArgExpression();
            this.state = 3724;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            while (_la === 401) {
                {
                {
                this.state = 3720;
                this.match(ClickHouseParser.COMMA);
                this.state = 3721;
                this.tableArgExpression();
                }
                }
                this.state = 3726;
                this.errorHandler.sync(this);
                _la = this.tokenStream.LA(1);
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public tableArgExpression(): TableArgExpressionContext {
        let localContext = new TableArgExpressionContext(this.context, this.state);
        this.enterRule(localContext, 440, ClickHouseParser.RULE_tableArgExpression);
        try {
            this.state = 3730;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 526, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3727;
                this.columnIdentifier();
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3728;
                this.tableFunctionExpression();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3729;
                this.literal();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        let localContext = new DatabaseIdentifierContext(this.context, this.state);
        this.enterRule(localContext, 442, ClickHouseParser.RULE_databaseIdentifier);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3732;
            this.identifier();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public floatingLiteral(): FloatingLiteralContext {
        let localContext = new FloatingLiteralContext(this.context, this.state);
        this.enterRule(localContext, 444, ClickHouseParser.RULE_floatingLiteral);
        let _la: number;
        try {
            this.state = 3742;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.FLOATING_LITERAL:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3734;
                this.match(ClickHouseParser.FLOATING_LITERAL);
                }
                break;
            case ClickHouseParser.DOT:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3735;
                this.match(ClickHouseParser.DOT);
                this.state = 3736;
                _la = this.tokenStream.LA(1);
                if(!(_la === 392 || _la === 393)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
                break;
            case ClickHouseParser.DECIMAL_LITERAL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3737;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                this.state = 3738;
                this.match(ClickHouseParser.DOT);
                this.state = 3740;
                this.errorHandler.sync(this);
                switch (this.interpreter.adaptivePredict(this.tokenStream, 527, this.context) ) {
                case 1:
                    {
                    this.state = 3739;
                    _la = this.tokenStream.LA(1);
                    if(!(_la === 392 || _la === 393)) {
                    this.errorHandler.recoverInline(this);
                    }
                    else {
                        this.errorHandler.reportMatch(this);
                        this.consume();
                    }
                    }
                    break;
                }
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public numberLiteral(): NumberLiteralContext {
        let localContext = new NumberLiteralContext(this.context, this.state);
        this.enterRule(localContext, 446, ClickHouseParser.RULE_numberLiteral);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3745;
            this.errorHandler.sync(this);
            _la = this.tokenStream.LA(1);
            if (_la === 403 || _la === 416) {
                {
                this.state = 3744;
                _la = this.tokenStream.LA(1);
                if(!(_la === 403 || _la === 416)) {
                this.errorHandler.recoverInline(this);
                }
                else {
                    this.errorHandler.reportMatch(this);
                    this.consume();
                }
                }
            }

            this.state = 3753;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 530, this.context) ) {
            case 1:
                {
                this.state = 3747;
                this.floatingLiteral();
                }
                break;
            case 2:
                {
                this.state = 3748;
                this.match(ClickHouseParser.OCTAL_LITERAL);
                }
                break;
            case 3:
                {
                this.state = 3749;
                this.match(ClickHouseParser.DECIMAL_LITERAL);
                }
                break;
            case 4:
                {
                this.state = 3750;
                this.match(ClickHouseParser.HEXADECIMAL_LITERAL);
                }
                break;
            case 5:
                {
                this.state = 3751;
                this.match(ClickHouseParser.INF);
                }
                break;
            case 6:
                {
                this.state = 3752;
                this.match(ClickHouseParser.NAN_SQL);
                }
                break;
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public literal(): LiteralContext {
        let localContext = new LiteralContext(this.context, this.state);
        this.enterRule(localContext, 448, ClickHouseParser.RULE_literal);
        try {
            this.state = 3758;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.INF:
            case ClickHouseParser.NAN_SQL:
            case ClickHouseParser.FLOATING_LITERAL:
            case ClickHouseParser.OCTAL_LITERAL:
            case ClickHouseParser.DECIMAL_LITERAL:
            case ClickHouseParser.HEXADECIMAL_LITERAL:
            case ClickHouseParser.DASH:
            case ClickHouseParser.DOT:
            case ClickHouseParser.PLUS:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3755;
                this.numberLiteral();
                }
                break;
            case ClickHouseParser.STRING_LITERAL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3756;
                this.match(ClickHouseParser.STRING_LITERAL);
                }
                break;
            case ClickHouseParser.NULL_SQL:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3757;
                this.match(ClickHouseParser.NULL_SQL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public interval(): IntervalContext {
        let localContext = new IntervalContext(this.context, this.state);
        this.enterRule(localContext, 450, ClickHouseParser.RULE_interval);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3760;
            _la = this.tokenStream.LA(1);
            if(!(_la === 37 || _la === 77 || ((((_la - 109)) & ~0x1F) === 0 && ((1 << (_la - 109)) & 67108869) !== 0) || _la === 149 || _la === 190 || _la === 195)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keyword(): KeywordContext {
        let localContext = new KeywordContext(this.context, this.state);
        this.enterRule(localContext, 452, ClickHouseParser.RULE_keyword);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3762;
            _la = this.tokenStream.LA(1);
            if(!((((_la) & ~0x1F) === 0 && ((1 << _la) & 4294967294) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1F) === 0 && ((1 << (_la - 64)) & 4294967295) !== 0) || ((((_la - 96)) & ~0x1F) === 0 && ((1 << (_la - 96)) & 4292607999) !== 0) || ((((_la - 128)) & ~0x1F) === 0 && ((1 << (_la - 128)) & 4294967295) !== 0) || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & 4294967295) !== 0) || ((((_la - 192)) & ~0x1F) === 0 && ((1 << (_la - 192)) & 4294967295) !== 0) || ((((_la - 224)) & ~0x1F) === 0 && ((1 << (_la - 224)) & 4294967295) !== 0) || ((((_la - 256)) & ~0x1F) === 0 && ((1 << (_la - 256)) & 4294967295) !== 0) || ((((_la - 288)) & ~0x1F) === 0 && ((1 << (_la - 288)) & 4294967295) !== 0) || ((((_la - 320)) & ~0x1F) === 0 && ((1 << (_la - 320)) & 4294967295) !== 0) || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & 4294967295) !== 0) || ((((_la - 384)) & ~0x1F) === 0 && ((1 << (_la - 384)) & 63) !== 0))) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public keywordForAlias(): KeywordForAliasContext {
        let localContext = new KeywordForAliasContext(this.context, this.state);
        this.enterRule(localContext, 454, ClickHouseParser.RULE_keywordForAlias);
        let _la: number;
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3764;
            _la = this.tokenStream.LA(1);
            if(!(_la === 36 || _la === 63 || _la === 78 || _la === 92)) {
            this.errorHandler.recoverInline(this);
            }
            else {
                this.errorHandler.reportMatch(this);
                this.consume();
            }
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public alias(): AliasContext {
        let localContext = new AliasContext(this.context, this.state);
        this.enterRule(localContext, 456, ClickHouseParser.RULE_alias);
        try {
            this.state = 3768;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3766;
                this.match(ClickHouseParser.IDENTIFIER);
                }
                break;
            case ClickHouseParser.DATE:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.ID:
            case ClickHouseParser.KEY:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3767;
                this.keywordForAlias();
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifier(): IdentifierContext {
        let localContext = new IdentifierContext(this.context, this.state);
        this.enterRule(localContext, 458, ClickHouseParser.RULE_identifier);
        try {
            this.state = 3773;
            this.errorHandler.sync(this);
            switch (this.interpreter.adaptivePredict(this.tokenStream, 533, this.context) ) {
            case 1:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3770;
                this.match(ClickHouseParser.IDENTIFIER);
                }
                break;
            case 2:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3771;
                this.interval();
                }
                break;
            case 3:
                this.enterOuterAlt(localContext, 3);
                {
                this.state = 3772;
                this.keyword();
                }
                break;
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public identifierOrNull(): IdentifierOrNullContext {
        let localContext = new IdentifierOrNullContext(this.context, this.state);
        this.enterRule(localContext, 460, ClickHouseParser.RULE_identifierOrNull);
        try {
            this.state = 3777;
            this.errorHandler.sync(this);
            switch (this.tokenStream.LA(1)) {
            case ClickHouseParser.ADD:
            case ClickHouseParser.AFTER:
            case ClickHouseParser.ALIAS:
            case ClickHouseParser.ALL:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.AND:
            case ClickHouseParser.ANTI:
            case ClickHouseParser.ANY:
            case ClickHouseParser.ARRAY:
            case ClickHouseParser.AS:
            case ClickHouseParser.ASC:
            case ClickHouseParser.ASCENDING:
            case ClickHouseParser.ASOF:
            case ClickHouseParser.AST:
            case ClickHouseParser.ASYNC:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.BETWEEN:
            case ClickHouseParser.BOTH:
            case ClickHouseParser.BY:
            case ClickHouseParser.CASE:
            case ClickHouseParser.CAST:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CLEAR:
            case ClickHouseParser.CLUSTER:
            case ClickHouseParser.CODEC:
            case ClickHouseParser.COLLATE:
            case ClickHouseParser.COLUMN:
            case ClickHouseParser.COMMENT:
            case ClickHouseParser.CONSTRAINT:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.CROSS:
            case ClickHouseParser.CUBE:
            case ClickHouseParser.CURRENT:
            case ClickHouseParser.DATABASE:
            case ClickHouseParser.DATABASES:
            case ClickHouseParser.DATE:
            case ClickHouseParser.DAY:
            case ClickHouseParser.DEDUPLICATE:
            case ClickHouseParser.DEFAULT:
            case ClickHouseParser.DELAY:
            case ClickHouseParser.DELETE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCENDING:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DICTIONARIES:
            case ClickHouseParser.DICTIONARY:
            case ClickHouseParser.DISK:
            case ClickHouseParser.DISTINCT:
            case ClickHouseParser.DISTRIBUTED:
            case ClickHouseParser.DROP:
            case ClickHouseParser.ELSE:
            case ClickHouseParser.END:
            case ClickHouseParser.ENGINE:
            case ClickHouseParser.ESTIMATE:
            case ClickHouseParser.EVENTS:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.EXPRESSION:
            case ClickHouseParser.EXTRACT:
            case ClickHouseParser.FETCHES:
            case ClickHouseParser.FINAL:
            case ClickHouseParser.FIRST:
            case ClickHouseParser.FLUSH:
            case ClickHouseParser.FOLLOWING:
            case ClickHouseParser.FOR:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.FREEZE:
            case ClickHouseParser.FROM:
            case ClickHouseParser.FULL:
            case ClickHouseParser.FUNCTION:
            case ClickHouseParser.GLOBAL:
            case ClickHouseParser.GRANULARITY:
            case ClickHouseParser.GROUP:
            case ClickHouseParser.HAVING:
            case ClickHouseParser.HIERARCHICAL:
            case ClickHouseParser.HOUR:
            case ClickHouseParser.ID:
            case ClickHouseParser.IF:
            case ClickHouseParser.ILIKE:
            case ClickHouseParser.IN:
            case ClickHouseParser.INDEX:
            case ClickHouseParser.INF:
            case ClickHouseParser.INJECTIVE:
            case ClickHouseParser.INNER:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTERVAL:
            case ClickHouseParser.INTO:
            case ClickHouseParser.IS:
            case ClickHouseParser.IS_OBJECT_ID:
            case ClickHouseParser.JOIN:
            case ClickHouseParser.KEY:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LAST:
            case ClickHouseParser.LAYOUT:
            case ClickHouseParser.LEADING:
            case ClickHouseParser.LEFT:
            case ClickHouseParser.LIFETIME:
            case ClickHouseParser.LIKE:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.LIVE:
            case ClickHouseParser.LOCAL:
            case ClickHouseParser.LOGS:
            case ClickHouseParser.MATERIALIZE:
            case ClickHouseParser.MATERIALIZED:
            case ClickHouseParser.MAX:
            case ClickHouseParser.MERGES:
            case ClickHouseParser.MIN:
            case ClickHouseParser.MINUTE:
            case ClickHouseParser.MODIFY:
            case ClickHouseParser.MONTH:
            case ClickHouseParser.MOVE:
            case ClickHouseParser.MUTATION:
            case ClickHouseParser.NO:
            case ClickHouseParser.NOT:
            case ClickHouseParser.NULLS:
            case ClickHouseParser.OFFSET:
            case ClickHouseParser.ON:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.OR:
            case ClickHouseParser.ORDER:
            case ClickHouseParser.OUTER:
            case ClickHouseParser.OUTFILE:
            case ClickHouseParser.OVER:
            case ClickHouseParser.PARTITION:
            case ClickHouseParser.PIPELINE:
            case ClickHouseParser.PLAN:
            case ClickHouseParser.POPULATE:
            case ClickHouseParser.PRECEDING:
            case ClickHouseParser.PREWHERE:
            case ClickHouseParser.PRIMARY:
            case ClickHouseParser.PROJECTION:
            case ClickHouseParser.QUARTER:
            case ClickHouseParser.QUERY:
            case ClickHouseParser.RANGE:
            case ClickHouseParser.RELOAD:
            case ClickHouseParser.REMOVE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.REPLICA:
            case ClickHouseParser.REPLICATED:
            case ClickHouseParser.RIGHT:
            case ClickHouseParser.ROLLUP:
            case ClickHouseParser.ROW:
            case ClickHouseParser.ROWS:
            case ClickHouseParser.SAMPLE:
            case ClickHouseParser.SECOND:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SEMI:
            case ClickHouseParser.SENDS:
            case ClickHouseParser.SET:
            case ClickHouseParser.SETTINGS:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SOURCE:
            case ClickHouseParser.START:
            case ClickHouseParser.STOP:
            case ClickHouseParser.SUBSTRING:
            case ClickHouseParser.SYNC:
            case ClickHouseParser.SYNTAX:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TABLES:
            case ClickHouseParser.TEMPORARY:
            case ClickHouseParser.TEST:
            case ClickHouseParser.THEN:
            case ClickHouseParser.TIES:
            case ClickHouseParser.TIMEOUT:
            case ClickHouseParser.TIMESTAMP:
            case ClickHouseParser.TO:
            case ClickHouseParser.TOP:
            case ClickHouseParser.TOTALS:
            case ClickHouseParser.TRAILING:
            case ClickHouseParser.TRIM:
            case ClickHouseParser.TREE:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.TTL:
            case ClickHouseParser.TYPE:
            case ClickHouseParser.UNBOUNDED:
            case ClickHouseParser.UNION:
            case ClickHouseParser.UPDATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.USING:
            case ClickHouseParser.UUID:
            case ClickHouseParser.VALUES:
            case ClickHouseParser.VIEW:
            case ClickHouseParser.VOLUME:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WEEK:
            case ClickHouseParser.WHEN:
            case ClickHouseParser.WHERE:
            case ClickHouseParser.WINDOW:
            case ClickHouseParser.WITH:
            case ClickHouseParser.YEAR:
            case ClickHouseParser.GRANT:
            case ClickHouseParser.USER:
            case ClickHouseParser.FETCH:
            case ClickHouseParser.REFRESH:
            case ClickHouseParser.POLICY:
            case ClickHouseParser.QUOTA:
            case ClickHouseParser.ROLE:
            case ClickHouseParser.PROFILE:
            case ClickHouseParser.ARBITRARY:
            case ClickHouseParser.COLUMNS:
            case ClickHouseParser.CURRENT_USER:
            case ClickHouseParser.ACCESS:
            case ClickHouseParser.SHOW_USERS:
            case ClickHouseParser.SHOW_ROLES:
            case ClickHouseParser.SHOW_ROW_POLICIES:
            case ClickHouseParser.SHOW_QUOTAS:
            case ClickHouseParser.SHOW_SETTINGS_PROFILES:
            case ClickHouseParser.SHUTDOWN:
            case ClickHouseParser.CACHE:
            case ClickHouseParser.DNS:
            case ClickHouseParser.MARK:
            case ClickHouseParser.MARKS:
            case ClickHouseParser.PART:
            case ClickHouseParser.UNCOMPRESSED:
            case ClickHouseParser.CONFIG:
            case ClickHouseParser.EMBEDDED:
            case ClickHouseParser.FUNCTIONS:
            case ClickHouseParser.MOVES:
            case ClickHouseParser.REPLICATION:
            case ClickHouseParser.QUEUES:
            case ClickHouseParser.RESTART:
            case ClickHouseParser.DICTGET:
            case ClickHouseParser.DICTGETHIERARCHY:
            case ClickHouseParser.DICTHAS:
            case ClickHouseParser.DICTISIN:
            case ClickHouseParser.MANAGEMENT:
            case ClickHouseParser.ADMIN:
            case ClickHouseParser.NAMED:
            case ClickHouseParser.COLLECTION:
            case ClickHouseParser.CONTROL:
            case ClickHouseParser.COLLECTIONS:
            case ClickHouseParser.SECRETS:
            case ClickHouseParser.USAGE:
            case ClickHouseParser.INTROSPECTION:
            case ClickHouseParser.ADDRESSTOLINE:
            case ClickHouseParser.ADDRESSTOSYMBOL:
            case ClickHouseParser.DEMANGLE:
            case ClickHouseParser.SOURCES:
            case ClickHouseParser.FILE:
            case ClickHouseParser.URL:
            case ClickHouseParser.REMOTE:
            case ClickHouseParser.MYSQL:
            case ClickHouseParser.ODBC:
            case ClickHouseParser.JDBC:
            case ClickHouseParser.HDFS:
            case ClickHouseParser.S3:
            case ClickHouseParser.SETTING:
            case ClickHouseParser.OPTION:
            case ClickHouseParser.NONE:
            case ClickHouseParser.AZURE:
            case ClickHouseParser.HIVE:
            case ClickHouseParser.MONGO:
            case ClickHouseParser.POSTGRES:
            case ClickHouseParser.REDIS:
            case ClickHouseParser.SQLITE:
            case ClickHouseParser.ADDRESSTOLINEWITHINLINES:
            case ClickHouseParser.SQL:
            case ClickHouseParser.SECURITY:
            case ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT:
            case ClickHouseParser.POLICIES:
            case ClickHouseParser.PROFILES:
            case ClickHouseParser.ALLOW:
            case ClickHouseParser.GRANTS:
            case ClickHouseParser.EXCEPT:
            case ClickHouseParser.REVOKE:
            case ClickHouseParser.IDENTIFIED:
            case ClickHouseParser.PLAINTEXT_PASSWORD:
            case ClickHouseParser.SHA256_PASSWORD:
            case ClickHouseParser.SHA256_HASH:
            case ClickHouseParser.DOUBLE_SHA1_PASSWORD:
            case ClickHouseParser.DOUBLE_SHA1_HASH:
            case ClickHouseParser.NO_PASSWORD:
            case ClickHouseParser.LDAP:
            case ClickHouseParser.SERVER:
            case ClickHouseParser.KERBEROS:
            case ClickHouseParser.REALM:
            case ClickHouseParser.SSL_CERTIFICATE:
            case ClickHouseParser.SAN:
            case ClickHouseParser.CN:
            case ClickHouseParser.SSH_KEY:
            case ClickHouseParser.HTTP:
            case ClickHouseParser.SCHEME:
            case ClickHouseParser.BCRYPT_PASSWORD:
            case ClickHouseParser.BCRYPT_HASH:
            case ClickHouseParser.VALID:
            case ClickHouseParser.UNTIL:
            case ClickHouseParser.GRANTEES:
            case ClickHouseParser.NAME:
            case ClickHouseParser.REGEXP:
            case ClickHouseParser.IP:
            case ClickHouseParser.HOST:
            case ClickHouseParser.READONLY:
            case ClickHouseParser.WRITABLE:
            case ClickHouseParser.PERMISSIVE:
            case ClickHouseParser.RESTRICTIVE:
            case ClickHouseParser.TABSEPARATED:
            case ClickHouseParser.TABSEPARATEDRAW:
            case ClickHouseParser.TABSEPARATEDWITHNAMES:
            case ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMES:
            case ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES:
            case ClickHouseParser.TEMPLATE:
            case ClickHouseParser.TEMPLATEIGNORESPACES:
            case ClickHouseParser.CSV:
            case ClickHouseParser.CSVWITHNAMES:
            case ClickHouseParser.CSVWITHNAMESANDTYPES:
            case ClickHouseParser.CUSTOMSEPARATED:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMES:
            case ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES:
            case ClickHouseParser.JSON:
            case ClickHouseParser.JSONASSTRING:
            case ClickHouseParser.JSONASOBJECT:
            case ClickHouseParser.JSONSTRINGS:
            case ClickHouseParser.JSONCOLUMNS:
            case ClickHouseParser.JSONCOLUMNSWITHMETADATA:
            case ClickHouseParser.JSONCOMPACT:
            case ClickHouseParser.JSONCOMPACTCOLUMNS:
            case ClickHouseParser.JSONEACHROW:
            case ClickHouseParser.JSONSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROW:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROW:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES:
            case ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES:
            case ClickHouseParser.JSONOBJECTEACHROW:
            case ClickHouseParser.BSONEACHROW:
            case ClickHouseParser.TSKV:
            case ClickHouseParser.PROTOBUF:
            case ClickHouseParser.PROTOBUFSINGLE:
            case ClickHouseParser.PROTOBUFLIST:
            case ClickHouseParser.AVRO:
            case ClickHouseParser.AVROCONFLUENT:
            case ClickHouseParser.PARQUET:
            case ClickHouseParser.PARQUETMETADATA:
            case ClickHouseParser.ARROW:
            case ClickHouseParser.ARROWSTREAM:
            case ClickHouseParser.ORC:
            case ClickHouseParser.ONE:
            case ClickHouseParser.NPY:
            case ClickHouseParser.ROWBINARY:
            case ClickHouseParser.ROWBINARYWITHNAMES:
            case ClickHouseParser.ROWBINARYWITHNAMESANDTYPES:
            case ClickHouseParser.ROWBINARYWITHDEFAULTS:
            case ClickHouseParser.NATIVE:
            case ClickHouseParser.CAPNPROTO:
            case ClickHouseParser.LINEASSTRING:
            case ClickHouseParser.RAWBLOB:
            case ClickHouseParser.MSGPACK:
            case ClickHouseParser.MYSQLDUMP:
            case ClickHouseParser.DWARF:
            case ClickHouseParser.FORM:
            case ClickHouseParser.KEYED:
            case ClickHouseParser.RANDOMIZED:
            case ClickHouseParser.USER_NAME:
            case ClickHouseParser.IP_ADDRESS:
            case ClickHouseParser.FORWARDED_IP_ADDRESS:
            case ClickHouseParser.CLIENT_KEY:
            case ClickHouseParser.CLIENT_KEY_OR_USER_NAME:
            case ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS:
            case ClickHouseParser.QUERIES:
            case ClickHouseParser.QUERY_SELECTS:
            case ClickHouseParser.QUERY_INSERTS:
            case ClickHouseParser.ERRORS:
            case ClickHouseParser.RESULT_ROWS:
            case ClickHouseParser.RESULT_BYTES:
            case ClickHouseParser.READ_ROWS:
            case ClickHouseParser.READ_BYTES:
            case ClickHouseParser.EXECUTION_TIME:
            case ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS:
            case ClickHouseParser.LIMITS:
            case ClickHouseParser.TRACKING:
            case ClickHouseParser.ONLY:
            case ClickHouseParser.CONST:
            case ClickHouseParser.CHANGEABLE_IN_READONLY:
            case ClickHouseParser.OVERRIDABLE:
            case ClickHouseParser.INHERIT:
            case ClickHouseParser.RESET:
            case ClickHouseParser.DETACHED:
            case ClickHouseParser.FORGET:
            case ClickHouseParser.STATISTICS:
            case ClickHouseParser.UNFREEZE:
            case ClickHouseParser.JSON_FALSE:
            case ClickHouseParser.JSON_TRUE:
            case ClickHouseParser.IDENTIFIER:
                this.enterOuterAlt(localContext, 1);
                {
                this.state = 3775;
                this.identifier();
                }
                break;
            case ClickHouseParser.NULL_SQL:
                this.enterOuterAlt(localContext, 2);
                {
                this.state = 3776;
                this.match(ClickHouseParser.NULL_SQL);
                }
                break;
            default:
                throw new antlr.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }
    public enumValue(): EnumValueContext {
        let localContext = new EnumValueContext(this.context, this.state);
        this.enterRule(localContext, 462, ClickHouseParser.RULE_enumValue);
        try {
            this.enterOuterAlt(localContext, 1);
            {
            this.state = 3779;
            this.match(ClickHouseParser.STRING_LITERAL);
            this.state = 3780;
            this.match(ClickHouseParser.EQ_SINGLE);
            this.state = 3781;
            this.numberLiteral();
            }
        }
        catch (re) {
            if (re instanceof antlr.RecognitionException) {
                this.errorHandler.reportError(this, re);
                this.errorHandler.recover(this, re);
            } else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localContext;
    }

    public override sempred(localContext: antlr.ParserRuleContext | null, ruleIndex: number, predIndex: number): boolean {
        switch (ruleIndex) {
        case 95:
            return this.dictionaryAttributeDefinition_sempred(localContext as DictionaryAttributeDefinitionContext, predIndex);
        case 96:
            return this.dictionaryEngineClause_sempred(localContext as DictionaryEngineClauseContext, predIndex);
        case 109:
            return this.engineClause_sempred(localContext as EngineClauseContext, predIndex);
        case 185:
            return this.joinExpression_sempred(localContext as JoinExpressionContext, predIndex);
        case 211:
            return this.columnExpression_sempred(localContext as ColumnExpressionContext, predIndex);
        case 216:
            return this.tableExpression_sempred(localContext as TableExpressionContext, predIndex);
        }
        return true;
    }
    private dictionaryAttributeDefinition_sempred(localContext: DictionaryAttributeDefinitionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 0:
            return !localContext.attrs.has("default");
        case 1:
            return !localContext.attrs.has("expression");
        case 2:
            return !localContext.attrs.has("hierarchical");
        case 3:
            return !localContext.attrs.has("injective");
        case 4:
            return !localContext.attrs.has("is_object_id");
        }
        return true;
    }
    private dictionaryEngineClause_sempred(localContext: DictionaryEngineClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 5:
            return !localContext.clauses.has("source");
        case 6:
            return !localContext.clauses.has("lifetime");
        case 7:
            return !localContext.clauses.has("layout");
        case 8:
            return !localContext.clauses.has("range");
        case 9:
            return !localContext.clauses.has("settings");
        }
        return true;
    }
    private engineClause_sempred(localContext: EngineClauseContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 10:
            return !localContext.clauses.has("orderByClause");
        case 11:
            return !localContext.clauses.has("partitionByClause");
        case 12:
            return !localContext.clauses.has("primaryKeyClause");
        case 13:
            return !localContext.clauses.has("sampleByClause");
        case 14:
            return !localContext.clauses.has("ttlClause");
        case 15:
            return !localContext.clauses.has("settingsClause");
        }
        return true;
    }
    private joinExpression_sempred(localContext: JoinExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 16:
            return this.precpred(this.context, 3);
        case 17:
            return this.precpred(this.context, 4);
        }
        return true;
    }
    private columnExpression_sempred(localContext: ColumnExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 18:
            return this.precpred(this.context, 16);
        case 19:
            return this.precpred(this.context, 15);
        case 20:
            return this.precpred(this.context, 14);
        case 21:
            return this.precpred(this.context, 11);
        case 22:
            return this.precpred(this.context, 10);
        case 23:
            return this.precpred(this.context, 9);
        case 24:
            return this.precpred(this.context, 8);
        case 25:
            return this.precpred(this.context, 19);
        case 26:
            return this.precpred(this.context, 18);
        case 27:
            return this.precpred(this.context, 13);
        case 28:
            return this.precpred(this.context, 7);
        }
        return true;
    }
    private tableExpression_sempred(localContext: TableExpressionContext | null, predIndex: number): boolean {
        switch (predIndex) {
        case 29:
            return this.precpred(this.context, 1);
        }
        return true;
    }

    public static readonly _serializedATN: number[] = [
        4,1,428,3784,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,1,0,3,0,466,8,0,1,0,1,0,1,1,1,1,3,1,472,8,1,1,
        1,1,1,1,1,1,1,3,1,478,8,1,1,2,1,2,1,2,1,2,3,2,484,8,2,1,2,1,2,3,
        2,488,8,2,1,2,3,2,491,8,2,1,2,1,2,1,2,3,2,496,8,2,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,3,3,518,8,3,1,3,3,3,521,8,3,1,4,1,4,1,4,1,4,5,4,527,8,4,10,4,12,
        4,530,9,4,1,5,1,5,3,5,534,8,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,552,8,7,1,8,1,8,1,8,1,8,1,8,3,
        8,559,8,8,1,8,1,8,1,8,1,8,3,8,565,8,8,1,8,3,8,568,8,8,1,8,3,8,571,
        8,8,1,8,1,8,3,8,575,8,8,1,9,1,9,1,9,1,9,1,9,3,9,582,8,9,1,9,1,9,
        3,9,586,8,9,1,9,1,9,1,9,1,9,3,9,592,8,9,1,10,1,10,1,10,1,10,3,10,
        598,8,10,1,10,1,10,1,10,1,10,3,10,604,8,10,1,10,3,10,607,8,10,1,
        10,3,10,610,8,10,1,11,1,11,3,11,614,8,11,1,11,1,11,1,11,3,11,619,
        8,11,1,12,1,12,3,12,623,8,12,1,12,1,12,1,12,3,12,628,8,12,1,12,1,
        12,1,12,5,12,633,8,12,10,12,12,12,636,9,12,1,12,1,12,3,12,640,8,
        12,1,12,3,12,643,8,12,1,12,3,12,646,8,12,1,12,1,12,3,12,650,8,12,
        1,13,1,13,1,13,1,13,3,13,656,8,13,1,13,1,13,3,13,660,8,13,1,13,3,
        13,663,8,13,1,13,3,13,666,8,13,1,13,3,13,669,8,13,1,13,1,13,3,13,
        673,8,13,1,14,1,14,1,14,1,14,3,14,679,8,14,1,14,1,14,1,14,1,14,3,
        14,685,8,14,1,14,3,14,688,8,14,1,14,3,14,691,8,14,1,14,3,14,694,
        8,14,1,14,3,14,697,8,14,1,14,3,14,700,8,14,1,14,3,14,703,8,14,1,
        14,3,14,706,8,14,1,14,3,14,709,8,14,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,3,16,719,8,16,1,16,1,16,1,16,5,16,724,8,16,10,16,12,16,
        727,9,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,735,8,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,3,17,745,8,17,1,17,1,17,1,17,3,17,750,
        8,17,1,17,1,17,3,17,754,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,772,8,17,1,17,
        3,17,775,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,783,8,17,1,17,1,
        17,1,17,1,17,3,17,789,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,3,17,800,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,3,17,812,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,820,8,17,
        1,17,1,17,3,17,824,8,17,1,18,1,18,1,18,1,18,3,18,830,8,18,1,18,1,
        18,1,18,3,18,835,8,18,1,18,1,18,3,18,839,8,18,1,19,1,19,1,19,1,19,
        3,19,845,8,19,1,19,1,19,1,19,3,19,850,8,19,1,19,3,19,853,8,19,1,
        19,1,19,1,19,1,19,3,19,859,8,19,1,19,1,19,1,19,3,19,864,8,19,1,19,
        3,19,867,8,19,3,19,869,8,19,1,20,1,20,1,20,1,20,3,20,875,8,20,1,
        20,1,20,3,20,879,8,20,1,20,1,20,1,20,1,20,3,20,885,8,20,1,20,1,20,
        3,20,889,8,20,1,20,1,20,1,20,1,20,3,20,895,8,20,1,20,1,20,3,20,899,
        8,20,1,20,1,20,1,20,3,20,904,8,20,1,20,1,20,1,20,1,20,1,20,3,20,
        911,8,20,3,20,913,8,20,1,21,1,21,1,21,1,21,3,21,919,8,21,1,21,1,
        21,1,21,3,21,924,8,21,1,21,1,21,1,21,1,21,3,21,930,8,21,1,21,1,21,
        1,21,3,21,935,8,21,1,21,1,21,1,21,1,21,3,21,941,8,21,1,21,1,21,1,
        21,3,21,946,8,21,3,21,948,8,21,1,22,1,22,1,22,1,22,1,22,3,22,955,
        8,22,1,22,1,22,1,22,3,22,960,8,22,1,22,3,22,963,8,22,1,22,1,22,1,
        22,1,22,1,22,3,22,970,8,22,1,22,1,22,1,22,3,22,975,8,22,1,22,1,22,
        1,22,1,22,1,22,3,22,982,8,22,1,22,1,22,1,22,3,22,987,8,22,1,22,3,
        22,990,8,22,1,22,1,22,1,22,1,22,3,22,996,8,22,1,22,3,22,999,8,22,
        1,22,1,22,1,22,1,22,1,22,3,22,1006,8,22,1,22,1,22,1,22,1,22,3,22,
        1012,8,22,1,23,1,23,1,23,1,23,3,23,1018,8,23,1,23,1,23,1,23,3,23,
        1023,8,23,1,23,1,23,1,23,1,23,3,23,1029,8,23,1,23,1,23,1,23,1,23,
        3,23,1035,8,23,1,23,1,23,1,23,1,23,3,23,1041,8,23,1,23,1,23,1,23,
        1,23,3,23,1047,8,23,1,23,1,23,1,23,1,23,3,23,1053,8,23,1,23,1,23,
        3,23,1057,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        3,23,1069,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,1078,8,23,
        3,23,1080,8,23,1,24,1,24,1,24,1,24,5,24,1086,8,24,10,24,12,24,1089,
        9,24,1,24,1,24,3,24,1093,8,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
        1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,5,28,1113,
        8,28,10,28,12,28,1116,9,28,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,
        31,1,31,1,31,1,31,3,31,1129,8,31,1,32,1,32,1,32,1,33,1,33,1,33,3,
        33,1137,8,33,1,34,1,34,1,34,1,34,3,34,1143,8,34,1,35,1,35,1,35,1,
        35,3,35,1149,8,35,1,36,1,36,1,36,1,36,3,36,1155,8,36,1,36,3,36,1158,
        8,36,1,37,1,37,1,37,1,37,3,37,1164,8,37,1,37,3,37,1167,8,37,1,37,
        3,37,1170,8,37,1,37,1,37,1,37,1,37,3,37,1176,8,37,1,37,1,37,3,37,
        1180,8,37,1,37,3,37,1183,8,37,1,37,3,37,1186,8,37,1,37,3,37,1189,
        8,37,1,37,3,37,1192,8,37,1,38,1,38,1,38,1,38,1,38,3,38,1199,8,38,
        1,38,1,38,3,38,1203,8,38,1,38,3,38,1206,8,38,1,38,1,38,3,38,1210,
        8,38,1,39,1,39,1,39,1,39,3,39,1216,8,39,1,39,3,39,1219,8,39,1,39,
        1,39,1,39,1,39,3,39,1225,8,39,1,39,1,39,3,39,1229,8,39,1,39,3,39,
        1232,8,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,3,40,1243,
        8,40,1,40,1,40,3,40,1247,8,40,1,40,3,40,1250,8,40,1,40,1,40,1,40,
        3,40,1255,8,40,3,40,1257,8,40,1,40,3,40,1260,8,40,1,40,3,40,1263,
        8,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1273,8,41,1,41,
        1,41,3,41,1277,8,41,1,41,3,41,1280,8,41,1,41,3,41,1283,8,41,1,41,
        1,41,1,41,3,41,1288,8,41,3,41,1290,8,41,1,41,1,41,1,42,1,42,1,42,
        3,42,1297,8,42,1,42,1,42,1,42,1,42,3,42,1303,8,42,1,42,1,42,3,42,
        1307,8,42,1,42,3,42,1310,8,42,1,42,3,42,1313,8,42,1,42,1,42,1,43,
        1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,5,45,1339,8,45,10,45,12,
        45,1342,9,45,1,45,1,45,1,45,1,45,1,45,3,45,1349,8,45,3,45,1351,8,
        45,1,46,1,46,1,46,1,46,1,46,3,46,1358,8,46,1,46,1,46,1,46,1,46,1,
        46,3,46,1365,8,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,1375,
        8,48,1,49,1,49,1,49,1,49,5,49,1381,8,49,10,49,12,49,1384,9,49,1,
        49,1,49,3,49,1388,8,49,1,50,1,50,1,50,1,50,1,50,3,50,1395,8,50,1,
        51,1,51,1,51,1,51,5,51,1401,8,51,10,51,12,51,1404,9,51,1,52,1,52,
        1,52,1,52,1,52,3,52,1411,8,52,1,52,3,52,1414,8,52,1,52,1,52,3,52,
        1418,8,52,1,52,3,52,1421,8,52,1,52,3,52,1424,8,52,1,53,1,53,1,53,
        3,53,1429,8,53,1,54,1,54,1,54,1,54,5,54,1435,8,54,10,54,12,54,1438,
        9,54,1,55,1,55,1,55,3,55,1443,8,55,1,56,1,56,1,56,1,56,1,57,1,57,
        1,57,3,57,1452,8,57,1,57,1,57,3,57,1456,8,57,1,57,3,57,1459,8,57,
        1,57,3,57,1462,8,57,1,57,3,57,1465,8,57,1,57,3,57,1468,8,57,1,57,
        3,57,1471,8,57,1,57,1,57,1,57,1,57,3,57,1477,8,57,3,57,1479,8,57,
        1,57,3,57,1482,8,57,1,57,3,57,1485,8,57,1,58,1,58,1,58,1,58,1,58,
        3,58,1492,8,58,1,59,1,59,1,59,1,59,1,59,3,59,1499,8,59,1,60,1,60,
        3,60,1503,8,60,1,60,1,60,1,60,1,61,1,61,1,61,3,61,1511,8,61,1,62,
        1,62,1,62,1,62,3,62,1517,8,62,1,62,1,62,1,62,5,62,1522,8,62,10,62,
        12,62,1525,9,62,1,62,3,62,1528,8,62,1,62,1,62,1,63,1,63,1,63,1,63,
        1,63,3,63,1537,8,63,1,64,1,64,1,64,5,64,1542,8,64,10,64,12,64,1545,
        9,64,1,65,1,65,1,65,1,65,1,65,3,65,1552,8,65,1,66,1,66,1,66,1,66,
        1,66,3,66,1559,8,66,1,67,1,67,1,67,1,68,1,68,1,68,3,68,1567,8,68,
        1,69,1,69,3,69,1571,8,69,1,69,1,69,3,69,1575,8,69,1,69,1,69,1,69,
        5,69,1580,8,69,10,69,12,69,1583,9,69,1,69,3,69,1586,8,69,1,69,1,
        69,3,69,1590,8,69,1,69,3,69,1593,8,69,1,69,3,69,1596,8,69,1,69,1,
        69,3,69,1600,8,69,1,70,1,70,1,70,1,70,1,70,3,70,1607,8,70,1,70,1,
        70,3,70,1611,8,70,1,71,1,71,1,71,1,71,1,71,3,71,1618,8,71,1,72,1,
        72,1,73,1,73,3,73,1624,8,73,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,
        75,5,75,1634,8,75,10,75,12,75,1637,9,75,1,75,1,75,1,75,1,75,3,75,
        1643,8,75,1,76,1,76,3,76,1647,8,76,1,76,1,76,1,76,1,77,1,77,1,77,
        1,77,1,78,1,78,3,78,1658,8,78,1,78,5,78,1661,8,78,10,78,12,78,1664,
        9,78,1,79,1,79,1,79,3,79,1669,8,79,1,79,1,79,3,79,1673,8,79,1,79,
        3,79,1676,8,79,1,79,3,79,1679,8,79,1,79,3,79,1682,8,79,1,79,1,79,
        3,79,1686,8,79,1,80,1,80,1,80,5,80,1691,8,80,10,80,12,80,1694,9,
        80,1,81,1,81,1,81,3,81,1699,8,81,1,81,1,81,3,81,1703,8,81,1,81,3,
        81,1706,8,81,1,81,3,81,1709,8,81,1,82,1,82,1,82,3,82,1714,8,82,1,
        83,1,83,1,83,1,83,5,83,1720,8,83,10,83,12,83,1723,9,83,1,84,1,84,
        1,84,1,84,3,84,1729,8,84,1,84,1,84,3,84,1733,8,84,1,84,3,84,1736,
        8,84,1,84,3,84,1739,8,84,1,84,1,84,3,84,1743,8,84,1,85,1,85,1,85,
        1,85,3,85,1749,8,85,1,85,3,85,1752,8,85,1,86,1,86,1,86,5,86,1757,
        8,86,10,86,12,86,1760,9,86,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1768,
        8,87,1,87,1,87,3,87,1772,8,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,
        3,88,1781,8,88,1,89,1,89,1,89,5,89,1786,8,89,10,89,12,89,1789,9,
        89,1,90,1,90,1,90,1,90,1,90,3,90,1796,8,90,1,90,1,90,3,90,1800,8,
        90,1,90,1,90,1,90,3,90,1805,8,90,1,90,1,90,3,90,1809,8,90,1,90,1,
        90,1,90,1,91,1,91,1,92,1,92,1,92,1,92,1,92,3,92,1821,8,92,1,92,1,
        92,1,92,1,92,1,92,1,92,3,92,1829,8,92,1,92,1,92,1,92,3,92,1834,8,
        92,5,92,1836,8,92,10,92,12,92,1839,9,92,1,92,1,92,1,92,3,92,1844,
        8,92,1,92,1,92,3,92,1848,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1864,8,93,1,94,1,94,1,94,
        1,94,5,94,1870,8,94,10,94,12,94,1873,9,94,1,94,1,94,1,95,1,95,1,
        95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
        95,1,95,1,95,1,95,1,95,1,95,5,95,1898,8,95,10,95,12,95,1901,9,95,
        1,96,3,96,1904,8,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
        1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,1926,
        8,96,10,96,12,96,1929,9,96,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,
        98,3,98,1939,8,98,1,98,3,98,1942,8,98,1,99,1,99,1,99,1,99,1,99,5,
        99,1949,8,99,10,99,12,99,1952,9,99,1,99,1,99,1,99,1,100,1,100,1,
        100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1968,8,
        100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,5,101,1977,8,101,10,
        101,12,101,1980,9,101,1,101,1,101,1,101,1,102,1,102,1,102,1,102,
        1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1997,8,102,
        1,102,1,102,1,103,1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,
        3,104,2010,8,104,1,105,1,105,1,105,1,106,1,106,1,106,1,107,1,107,
        1,107,1,108,1,108,1,108,1,108,5,108,2025,8,108,10,108,12,108,2028,
        9,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,2036,8,108,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,5,109,2063,8,109,10,109,12,109,2066,9,109,1,110,1,110,
        1,110,1,110,1,111,1,111,1,111,1,111,1,112,1,112,1,112,1,112,1,113,
        1,113,1,113,1,113,5,113,2084,8,113,10,113,12,113,2087,9,113,1,114,
        1,114,3,114,2091,8,114,1,114,1,114,1,114,3,114,2096,8,114,1,114,
        3,114,2099,8,114,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,3,115,2111,8,115,1,116,1,116,1,116,3,116,2116,8,116,
        1,116,1,116,3,116,2120,8,116,1,116,3,116,2123,8,116,1,116,1,116,
        3,116,2127,8,116,1,116,1,116,3,116,2131,8,116,1,116,1,116,1,116,
        3,116,2136,8,116,1,116,3,116,2139,8,116,1,116,1,116,3,116,2143,8,
        116,3,116,2145,8,116,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,
        118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,1,120,1,120,1,120,
        5,120,2165,8,120,10,120,12,120,2168,9,120,1,120,1,120,1,121,1,121,
        1,121,3,121,2175,8,121,1,121,3,121,2178,8,121,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,3,122,2188,8,122,1,123,1,123,3,123,
        2192,8,123,1,123,1,123,1,124,1,124,1,124,1,124,3,124,2200,8,124,
        1,124,1,124,3,124,2204,8,124,1,124,1,124,1,124,3,124,2209,8,124,
        1,124,1,124,3,124,2213,8,124,1,124,1,124,3,124,2217,8,124,1,124,
        1,124,3,124,2221,8,124,1,124,1,124,3,124,2225,8,124,3,124,2227,8,
        124,1,125,1,125,1,125,1,125,1,125,1,125,3,125,2235,8,125,1,125,1,
        125,3,125,2239,8,125,1,125,3,125,2242,8,125,1,126,1,126,1,126,1,
        126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
        1,126,1,126,1,126,1,126,1,126,1,126,1,126,3,126,2265,8,126,1,127,
        1,127,3,127,2269,8,127,1,127,1,127,1,127,3,127,2274,8,127,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,2284,8,127,1,127,
        1,127,1,127,3,127,2289,8,127,1,127,1,127,1,127,1,127,3,127,2295,
        8,127,1,128,1,128,1,128,5,128,2300,8,128,10,128,12,128,2303,9,128,
        1,129,1,129,1,129,5,129,2308,8,129,10,129,12,129,2311,9,129,1,130,
        1,130,1,130,5,130,2316,8,130,10,130,12,130,2319,9,130,1,131,1,131,
        3,131,2323,8,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,
        1,131,5,131,2334,8,131,10,131,12,131,2337,9,131,1,131,1,131,1,131,
        1,131,1,131,1,131,3,131,2345,8,131,1,131,1,131,1,131,1,131,1,131,
        1,131,3,131,2353,8,131,1,131,3,131,2356,8,131,1,131,1,131,1,131,
        1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,2369,8,131,
        1,131,1,131,1,131,1,131,3,131,2375,8,131,1,132,1,132,1,132,3,132,
        2380,8,132,1,132,3,132,2383,8,132,1,133,1,133,1,133,1,133,1,134,
        1,134,1,134,1,134,3,134,2393,8,134,1,134,3,134,2396,8,134,1,134,
        1,134,3,134,2400,8,134,3,134,2402,8,134,1,135,1,135,1,135,5,135,
        2407,8,135,10,135,12,135,2410,9,135,1,136,1,136,1,137,1,137,3,137,
        2416,8,137,1,138,1,138,1,138,5,138,2421,8,138,10,138,12,138,2424,
        9,138,1,139,1,139,3,139,2428,8,139,1,140,1,140,3,140,2432,8,140,
        1,141,1,141,3,141,2436,8,141,1,142,1,142,3,142,2440,8,142,1,142,
        1,142,1,142,1,142,3,142,2446,8,142,1,142,3,142,2449,8,142,1,143,
        1,143,3,143,2453,8,143,1,144,1,144,3,144,2457,8,144,1,145,1,145,
        3,145,2461,8,145,1,145,1,145,1,145,1,145,3,145,2467,8,145,1,146,
        1,146,1,147,1,147,1,148,1,148,3,148,2475,8,148,1,148,3,148,2478,
        8,148,1,148,1,148,3,148,2482,8,148,1,148,1,148,1,148,1,148,3,148,
        2488,8,148,1,148,1,148,3,148,2492,8,148,1,148,1,148,1,148,3,148,
        2497,8,148,1,148,1,148,3,148,2501,8,148,1,148,1,148,3,148,2505,8,
        148,1,148,1,148,1,148,3,148,2510,8,148,1,148,1,148,1,148,1,148,1,
        148,1,148,3,148,2518,8,148,1,148,3,148,2521,8,148,1,148,1,148,1,
        148,3,148,2526,8,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,
        148,1,148,3,148,2537,8,148,1,148,1,148,3,148,2541,8,148,1,148,1,
        148,1,148,3,148,2546,8,148,1,148,1,148,1,148,1,148,1,148,3,148,2553,
        8,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,3,148,2567,8,148,3,148,2569,8,148,1,149,1,149,1,149,
        1,149,1,149,1,149,1,149,1,149,1,149,1,149,3,149,2581,8,149,1,149,
        1,149,1,149,1,149,1,149,3,149,2588,8,149,1,149,1,149,1,149,1,149,
        1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,1,149,
        1,149,1,149,3,149,2607,8,149,1,149,1,149,1,149,1,149,1,149,1,149,
        1,149,1,149,1,149,1,149,1,149,3,149,2620,8,149,1,149,1,149,3,149,
        2624,8,149,1,149,1,149,1,149,1,149,1,149,3,149,2631,8,149,1,150,
        1,150,3,150,2635,8,150,1,150,1,150,3,150,2639,8,150,1,150,1,150,
        1,150,1,150,1,150,1,150,3,150,2647,8,150,1,150,1,150,1,150,1,150,
        1,150,1,150,1,150,1,150,1,150,1,150,3,150,2659,8,150,1,150,3,150,
        2662,8,150,1,150,1,150,1,150,1,150,3,150,2668,8,150,1,150,3,150,
        2671,8,150,1,150,1,150,3,150,2675,8,150,1,150,3,150,2678,8,150,1,
        150,1,150,1,150,3,150,2683,8,150,1,150,1,150,1,150,3,150,2688,8,
        150,1,150,1,150,1,150,1,150,1,150,3,150,2695,8,150,1,150,1,150,1,
        150,1,150,1,150,1,150,1,150,3,150,2704,8,150,1,150,1,150,1,150,1,
        150,1,150,1,150,3,150,2712,8,150,1,150,1,150,1,150,1,150,1,150,3,
        150,2719,8,150,1,150,1,150,3,150,2723,8,150,1,151,1,151,1,151,3,
        151,2728,8,151,1,151,3,151,2731,8,151,1,151,1,151,1,151,1,151,1,
        151,1,151,3,151,2739,8,151,1,151,1,151,1,151,3,151,2744,8,151,1,
        152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,
        1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,
        1,152,1,152,1,152,3,152,2771,8,152,1,153,1,153,1,153,3,153,2776,
        8,153,1,153,1,153,1,153,3,153,2781,8,153,1,153,3,153,2784,8,153,
        1,153,3,153,2787,8,153,1,153,1,153,1,154,1,154,1,154,1,154,1,154,
        3,154,2796,8,154,1,154,3,154,2799,8,154,1,155,1,155,1,155,1,155,
        5,155,2805,8,155,10,155,12,155,2808,9,155,1,155,1,155,1,156,1,156,
        1,157,1,157,1,157,4,157,2817,8,157,11,157,12,157,2818,1,157,3,157,
        2822,8,157,1,157,1,157,1,157,3,157,2827,8,157,1,157,1,157,3,157,
        2831,8,157,1,158,1,158,1,158,5,158,2836,8,158,10,158,12,158,2839,
        9,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,2849,
        8,159,1,160,1,160,3,160,2853,8,160,1,161,1,161,1,161,1,161,5,161,
        2859,8,161,10,161,12,161,2862,9,161,3,161,2864,8,161,1,161,1,161,
        1,162,1,162,1,162,1,162,5,162,2872,8,162,10,162,12,162,2875,9,162,
        1,162,1,162,1,163,1,163,1,163,3,163,2882,8,163,1,163,5,163,2885,
        8,163,10,163,12,163,2888,9,163,1,164,1,164,1,164,3,164,2893,8,164,
        1,164,1,164,3,164,2897,8,164,1,165,1,165,1,165,1,165,3,165,2903,
        8,165,1,165,3,165,2906,8,165,1,165,3,165,2909,8,165,1,165,3,165,
        2912,8,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,
        1,166,5,166,2924,8,166,10,166,12,166,2927,9,166,1,166,3,166,2930,
        8,166,1,167,1,167,3,167,2934,8,167,1,167,1,167,1,167,3,167,2939,
        8,167,1,167,3,167,2942,8,167,1,167,1,167,1,168,1,168,1,168,1,168,
        5,168,2950,8,168,10,168,12,168,2953,9,168,1,169,1,169,1,169,1,169,
        1,169,3,169,2960,8,169,1,170,3,170,2963,8,170,1,170,1,170,3,170,
        2967,8,170,1,170,3,170,2970,8,170,1,170,1,170,3,170,2974,8,170,1,
        170,3,170,2977,8,170,1,170,3,170,2980,8,170,1,170,3,170,2983,8,170,
        1,170,3,170,2986,8,170,1,170,3,170,2989,8,170,1,170,1,170,3,170,
        2993,8,170,1,170,1,170,3,170,2997,8,170,1,170,3,170,3000,8,170,1,
        170,3,170,3003,8,170,1,170,3,170,3006,8,170,1,170,3,170,3009,8,170,
        1,170,3,170,3012,8,170,1,171,1,171,1,171,1,172,1,172,1,172,1,172,
        3,172,3021,8,172,1,173,1,173,1,173,1,174,3,174,3027,8,174,1,174,
        1,174,1,174,1,174,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,176,
        1,176,1,176,1,177,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,178,
        1,178,1,178,3,178,3054,8,178,1,179,1,179,1,179,1,180,1,180,1,180,
        1,180,1,181,1,181,1,181,1,181,1,182,1,182,1,182,1,182,1,182,1,183,
        1,183,1,183,1,183,3,183,3076,8,183,1,184,1,184,1,184,1,185,1,185,
        1,185,3,185,3084,8,185,1,185,3,185,3087,8,185,1,185,1,185,1,185,
        1,185,3,185,3093,8,185,1,185,1,185,1,185,1,185,1,185,1,185,3,185,
        3101,8,185,1,185,3,185,3104,8,185,1,185,1,185,1,185,1,185,5,185,
        3110,8,185,10,185,12,185,3113,9,185,1,186,3,186,3116,8,186,1,186,
        1,186,1,186,3,186,3121,8,186,1,186,3,186,3124,8,186,1,186,3,186,
        3127,8,186,1,186,1,186,3,186,3131,8,186,1,186,1,186,3,186,3135,8,
        186,1,186,3,186,3138,8,186,3,186,3140,8,186,1,186,3,186,3143,8,186,
        1,186,1,186,3,186,3147,8,186,1,186,1,186,3,186,3151,8,186,1,186,
        3,186,3154,8,186,3,186,3156,8,186,3,186,3158,8,186,1,187,3,187,3161,
        8,187,1,187,1,187,1,187,3,187,3166,8,187,1,188,1,188,1,188,1,188,
        1,188,1,188,1,188,1,188,1,188,3,188,3177,8,188,1,189,1,189,1,189,
        1,189,3,189,3183,8,189,1,190,1,190,1,190,3,190,3188,8,190,1,191,
        1,191,1,191,5,191,3193,8,191,10,191,12,191,3196,9,191,1,192,1,192,
        3,192,3200,8,192,1,192,1,192,3,192,3204,8,192,1,192,1,192,3,192,
        3208,8,192,1,193,1,193,1,193,3,193,3213,8,193,1,194,1,194,1,194,
        5,194,3218,8,194,10,194,12,194,3221,9,194,1,195,1,195,1,195,1,195,
        1,196,3,196,3228,8,196,1,196,3,196,3231,8,196,1,196,3,196,3234,8,
        196,1,197,1,197,1,197,1,197,1,198,1,198,1,198,1,198,1,199,1,199,
        1,199,1,200,1,200,1,200,1,200,1,200,1,200,3,200,3253,8,200,1,201,
        1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,1,201,
        3,201,3267,8,201,1,202,1,202,1,202,1,203,1,203,1,203,1,203,1,203,
        1,203,1,203,1,203,1,203,1,203,1,203,3,203,3283,8,203,1,203,3,203,
        3286,8,203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,3295,
        8,203,1,203,1,203,3,203,3299,8,203,1,203,1,203,1,203,3,203,3304,
        8,203,1,203,1,203,1,203,3,203,3309,8,203,1,203,3,203,3312,8,203,
        3,203,3314,8,203,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
        1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,1,204,
        1,204,3,204,3336,8,204,1,204,3,204,3339,8,204,1,204,1,204,1,204,
        1,204,1,204,1,204,1,204,1,204,1,204,3,204,3350,8,204,1,205,1,205,
        3,205,3354,8,205,1,205,3,205,3357,8,205,1,205,1,205,3,205,3361,8,
        205,1,205,1,205,3,205,3365,8,205,1,206,1,206,1,206,1,207,1,207,1,
        207,3,207,3373,8,207,1,207,1,207,3,207,3377,8,207,1,208,1,208,1,
        208,1,208,1,208,1,208,1,208,1,208,1,208,5,208,3388,8,208,10,208,
        12,208,3391,9,208,1,208,1,208,1,208,1,208,1,208,1,208,1,208,5,208,
        3400,8,208,10,208,12,208,3403,9,208,1,208,1,208,1,208,1,208,1,208,
        1,208,1,208,5,208,3412,8,208,10,208,12,208,3415,9,208,1,208,1,208,
        1,208,1,208,1,208,3,208,3422,8,208,1,208,1,208,3,208,3426,8,208,
        1,209,1,209,1,209,5,209,3431,8,209,10,209,12,209,3434,9,209,1,210,
        1,210,1,210,3,210,3439,8,210,1,210,1,210,1,210,1,210,1,210,1,210,
        3,210,3447,8,210,1,211,1,211,1,211,3,211,3452,8,211,1,211,1,211,
        1,211,1,211,1,211,4,211,3459,8,211,11,211,12,211,3460,1,211,1,211,
        3,211,3465,8,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,
        3496,8,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,3,211,3513,8,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,3525,8,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,3535,8,211,
        1,211,3,211,3538,8,211,1,211,1,211,3,211,3542,8,211,1,211,3,211,
        3545,8,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,3,211,3557,8,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,3574,8,211,
        1,211,1,211,3,211,3578,8,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,3,211,3595,
        8,211,1,211,3,211,3598,8,211,1,211,1,211,3,211,3602,8,211,1,211,
        3,211,3605,8,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,3,211,3616,8,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,1,211,
        1,211,1,211,1,211,1,211,3,211,3640,8,211,1,211,1,211,1,211,1,211,
        1,211,3,211,3647,8,211,5,211,3649,8,211,10,211,12,211,3652,9,211,
        1,212,1,212,1,212,5,212,3657,8,212,10,212,12,212,3660,9,212,1,213,
        1,213,3,213,3664,8,213,1,214,1,214,1,214,1,214,1,214,3,214,3671,
        8,214,1,214,1,214,1,214,1,215,1,215,1,215,3,215,3679,8,215,1,215,
        1,215,1,215,3,215,3684,8,215,1,216,1,216,1,216,1,216,1,216,1,216,
        1,216,3,216,3693,8,216,1,216,1,216,1,216,1,216,3,216,3699,8,216,
        5,216,3701,8,216,10,216,12,216,3704,9,216,1,217,1,217,1,217,3,217,
        3709,8,217,1,217,1,217,1,218,1,218,1,218,3,218,3716,8,218,1,218,
        1,218,1,219,1,219,1,219,5,219,3723,8,219,10,219,12,219,3726,9,219,
        1,220,1,220,1,220,3,220,3731,8,220,1,221,1,221,1,222,1,222,1,222,
        1,222,1,222,1,222,3,222,3741,8,222,3,222,3743,8,222,1,223,3,223,
        3746,8,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,3754,8,223,
        1,224,1,224,1,224,3,224,3759,8,224,1,225,1,225,1,226,1,226,1,227,
        1,227,1,228,1,228,3,228,3769,8,228,1,229,1,229,1,229,3,229,3774,
        8,229,1,230,1,230,3,230,3778,8,230,1,231,1,231,1,231,1,231,1,231,
        0,3,370,422,432,232,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
        212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
        244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
        276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
        308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
        340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
        372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,
        404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,
        436,438,440,442,444,446,448,450,452,454,456,458,460,462,0,65,2,0,
        1,1,51,51,3,0,23,23,51,51,104,104,2,0,127,127,218,218,2,0,4,4,395,
        395,6,0,3,3,25,25,28,28,39,39,105,105,178,178,2,0,16,16,30,30,2,
        0,272,276,288,289,1,0,283,284,2,0,99,99,293,295,2,0,297,298,379,
        380,3,0,405,408,411,411,413,414,1,0,299,300,1,0,360,361,2,0,92,92,
        358,358,1,0,366,375,3,0,397,397,402,403,415,416,2,0,11,12,42,43,
        3,0,3,3,39,39,105,105,2,0,42,42,44,44,2,0,45,45,51,51,5,0,34,34,
        47,47,71,71,163,163,187,187,4,0,34,34,47,47,163,163,187,187,4,0,
        35,35,46,46,164,164,205,205,2,0,243,251,255,260,1,0,227,230,2,0,
        41,41,182,182,6,0,1,1,23,23,28,28,51,51,110,110,140,140,4,0,1,1,
        23,23,51,51,104,104,2,0,123,123,148,148,2,0,104,104,110,110,2,0,
        112,112,198,198,2,0,163,163,187,187,3,0,5,5,30,30,51,51,2,0,30,30,
        267,267,2,0,93,93,213,213,2,0,215,216,219,219,3,0,215,215,217,217,
        219,219,1,0,157,158,3,0,61,61,152,152,223,223,2,0,50,50,143,143,
        2,0,160,160,226,226,2,0,50,50,103,103,3,0,232,232,235,235,238,238,
        3,0,186,186,294,294,301,357,3,0,15,15,160,160,166,166,2,0,32,32,
        145,145,2,0,85,85,97,97,2,0,72,72,102,102,3,0,4,4,8,8,13,13,4,0,
        4,4,7,8,13,13,151,151,2,0,97,97,144,144,2,0,4,4,8,8,2,0,119,119,
        401,401,2,0,63,63,94,94,2,0,137,137,147,147,2,0,69,69,81,81,3,0,
        18,18,96,96,174,174,3,0,397,397,415,415,424,424,2,0,402,403,416,
        416,2,0,80,80,99,99,1,0,392,393,2,0,403,403,416,416,8,0,37,37,77,
        77,109,109,111,111,135,135,149,149,190,190,195,195,3,0,1,113,115,
        116,118,389,4,0,36,36,63,63,78,78,92,92,4359,0,465,1,0,0,0,2,477,
        1,0,0,0,4,495,1,0,0,0,6,520,1,0,0,0,8,522,1,0,0,0,10,531,1,0,0,0,
        12,540,1,0,0,0,14,551,1,0,0,0,16,553,1,0,0,0,18,576,1,0,0,0,20,593,
        1,0,0,0,22,611,1,0,0,0,24,620,1,0,0,0,26,651,1,0,0,0,28,674,1,0,
        0,0,30,710,1,0,0,0,32,714,1,0,0,0,34,823,1,0,0,0,36,838,1,0,0,0,
        38,868,1,0,0,0,40,912,1,0,0,0,42,947,1,0,0,0,44,1011,1,0,0,0,46,
        1079,1,0,0,0,48,1081,1,0,0,0,50,1097,1,0,0,0,52,1101,1,0,0,0,54,
        1105,1,0,0,0,56,1109,1,0,0,0,58,1117,1,0,0,0,60,1121,1,0,0,0,62,
        1128,1,0,0,0,64,1130,1,0,0,0,66,1136,1,0,0,0,68,1138,1,0,0,0,70,
        1144,1,0,0,0,72,1150,1,0,0,0,74,1166,1,0,0,0,76,1193,1,0,0,0,78,
        1218,1,0,0,0,80,1236,1,0,0,0,82,1266,1,0,0,0,84,1293,1,0,0,0,86,
        1316,1,0,0,0,88,1318,1,0,0,0,90,1350,1,0,0,0,92,1364,1,0,0,0,94,
        1366,1,0,0,0,96,1374,1,0,0,0,98,1376,1,0,0,0,100,1394,1,0,0,0,102,
        1396,1,0,0,0,104,1405,1,0,0,0,106,1428,1,0,0,0,108,1430,1,0,0,0,
        110,1439,1,0,0,0,112,1444,1,0,0,0,114,1448,1,0,0,0,116,1491,1,0,
        0,0,118,1498,1,0,0,0,120,1500,1,0,0,0,122,1510,1,0,0,0,124,1512,
        1,0,0,0,126,1536,1,0,0,0,128,1538,1,0,0,0,130,1551,1,0,0,0,132,1558,
        1,0,0,0,134,1560,1,0,0,0,136,1563,1,0,0,0,138,1568,1,0,0,0,140,1610,
        1,0,0,0,142,1617,1,0,0,0,144,1619,1,0,0,0,146,1623,1,0,0,0,148,1625,
        1,0,0,0,150,1642,1,0,0,0,152,1644,1,0,0,0,154,1651,1,0,0,0,156,1655,
        1,0,0,0,158,1665,1,0,0,0,160,1687,1,0,0,0,162,1695,1,0,0,0,164,1713,
        1,0,0,0,166,1715,1,0,0,0,168,1724,1,0,0,0,170,1744,1,0,0,0,172,1753,
        1,0,0,0,174,1761,1,0,0,0,176,1780,1,0,0,0,178,1782,1,0,0,0,180,1790,
        1,0,0,0,182,1813,1,0,0,0,184,1815,1,0,0,0,186,1863,1,0,0,0,188,1865,
        1,0,0,0,190,1876,1,0,0,0,192,1903,1,0,0,0,194,1930,1,0,0,0,196,1934,
        1,0,0,0,198,1943,1,0,0,0,200,1956,1,0,0,0,202,1971,1,0,0,0,204,1984,
        1,0,0,0,206,2000,1,0,0,0,208,2005,1,0,0,0,210,2011,1,0,0,0,212,2014,
        1,0,0,0,214,2017,1,0,0,0,216,2035,1,0,0,0,218,2037,1,0,0,0,220,2067,
        1,0,0,0,222,2071,1,0,0,0,224,2075,1,0,0,0,226,2079,1,0,0,0,228,2088,
        1,0,0,0,230,2110,1,0,0,0,232,2144,1,0,0,0,234,2146,1,0,0,0,236,2149,
        1,0,0,0,238,2156,1,0,0,0,240,2159,1,0,0,0,242,2171,1,0,0,0,244,2179,
        1,0,0,0,246,2189,1,0,0,0,248,2226,1,0,0,0,250,2241,1,0,0,0,252,2264,
        1,0,0,0,254,2294,1,0,0,0,256,2296,1,0,0,0,258,2304,1,0,0,0,260,2312,
        1,0,0,0,262,2374,1,0,0,0,264,2379,1,0,0,0,266,2384,1,0,0,0,268,2401,
        1,0,0,0,270,2403,1,0,0,0,272,2411,1,0,0,0,274,2415,1,0,0,0,276,2417,
        1,0,0,0,278,2427,1,0,0,0,280,2429,1,0,0,0,282,2433,1,0,0,0,284,2448,
        1,0,0,0,286,2450,1,0,0,0,288,2454,1,0,0,0,290,2466,1,0,0,0,292,2468,
        1,0,0,0,294,2470,1,0,0,0,296,2568,1,0,0,0,298,2630,1,0,0,0,300,2722,
        1,0,0,0,302,2743,1,0,0,0,304,2770,1,0,0,0,306,2772,1,0,0,0,308,2798,
        1,0,0,0,310,2800,1,0,0,0,312,2811,1,0,0,0,314,2830,1,0,0,0,316,2832,
        1,0,0,0,318,2848,1,0,0,0,320,2852,1,0,0,0,322,2854,1,0,0,0,324,2867,
        1,0,0,0,326,2878,1,0,0,0,328,2889,1,0,0,0,330,2898,1,0,0,0,332,2913,
        1,0,0,0,334,2931,1,0,0,0,336,2945,1,0,0,0,338,2959,1,0,0,0,340,2962,
        1,0,0,0,342,3013,1,0,0,0,344,3016,1,0,0,0,346,3022,1,0,0,0,348,3026,
        1,0,0,0,350,3032,1,0,0,0,352,3039,1,0,0,0,354,3042,1,0,0,0,356,3045,
        1,0,0,0,358,3055,1,0,0,0,360,3058,1,0,0,0,362,3062,1,0,0,0,364,3066,
        1,0,0,0,366,3071,1,0,0,0,368,3077,1,0,0,0,370,3092,1,0,0,0,372,3157,
        1,0,0,0,374,3165,1,0,0,0,376,3176,1,0,0,0,378,3178,1,0,0,0,380,3184,
        1,0,0,0,382,3189,1,0,0,0,384,3197,1,0,0,0,386,3209,1,0,0,0,388,3214,
        1,0,0,0,390,3222,1,0,0,0,392,3227,1,0,0,0,394,3235,1,0,0,0,396,3239,
        1,0,0,0,398,3243,1,0,0,0,400,3252,1,0,0,0,402,3266,1,0,0,0,404,3268,
        1,0,0,0,406,3313,1,0,0,0,408,3349,1,0,0,0,410,3351,1,0,0,0,412,3366,
        1,0,0,0,414,3369,1,0,0,0,416,3425,1,0,0,0,418,3427,1,0,0,0,420,3446,
        1,0,0,0,422,3577,1,0,0,0,424,3653,1,0,0,0,426,3663,1,0,0,0,428,3670,
        1,0,0,0,430,3678,1,0,0,0,432,3692,1,0,0,0,434,3705,1,0,0,0,436,3715,
        1,0,0,0,438,3719,1,0,0,0,440,3730,1,0,0,0,442,3732,1,0,0,0,444,3742,
        1,0,0,0,446,3745,1,0,0,0,448,3758,1,0,0,0,450,3760,1,0,0,0,452,3762,
        1,0,0,0,454,3764,1,0,0,0,456,3768,1,0,0,0,458,3773,1,0,0,0,460,3777,
        1,0,0,0,462,3779,1,0,0,0,464,466,3,2,1,0,465,464,1,0,0,0,465,466,
        1,0,0,0,466,467,1,0,0,0,467,468,5,0,0,1,468,1,1,0,0,0,469,471,3,
        4,2,0,470,472,5,423,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,478,
        1,0,0,0,473,474,3,4,2,0,474,475,5,423,0,0,475,476,3,2,1,0,476,478,
        1,0,0,0,477,469,1,0,0,0,477,473,1,0,0,0,478,3,1,0,0,0,479,483,3,
        6,3,0,480,481,5,88,0,0,481,482,5,125,0,0,482,484,5,395,0,0,483,480,
        1,0,0,0,483,484,1,0,0,0,484,487,1,0,0,0,485,486,5,67,0,0,486,488,
        3,460,230,0,487,485,1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,
        491,5,423,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,496,1,0,0,0,492,
        496,3,306,153,0,493,496,3,262,131,0,494,496,3,254,127,0,495,479,
        1,0,0,0,495,492,1,0,0,0,495,493,1,0,0,0,495,494,1,0,0,0,496,5,1,
        0,0,0,497,521,3,14,7,0,498,521,3,68,34,0,499,521,3,70,35,0,500,521,
        3,186,93,0,501,521,3,246,123,0,502,521,3,72,36,0,503,521,3,248,124,
        0,504,521,3,250,125,0,505,521,3,252,126,0,506,521,3,328,164,0,507,
        521,3,330,165,0,508,521,3,332,166,0,509,521,3,336,168,0,510,521,
        3,404,202,0,511,521,3,406,203,0,512,521,3,408,204,0,513,521,3,410,
        205,0,514,521,3,412,206,0,515,521,3,414,207,0,516,518,3,8,4,0,517,
        516,1,0,0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,521,3,340,170,0,
        520,497,1,0,0,0,520,498,1,0,0,0,520,499,1,0,0,0,520,500,1,0,0,0,
        520,501,1,0,0,0,520,502,1,0,0,0,520,503,1,0,0,0,520,504,1,0,0,0,
        520,505,1,0,0,0,520,506,1,0,0,0,520,507,1,0,0,0,520,508,1,0,0,0,
        520,509,1,0,0,0,520,510,1,0,0,0,520,511,1,0,0,0,520,512,1,0,0,0,
        520,513,1,0,0,0,520,514,1,0,0,0,520,515,1,0,0,0,520,517,1,0,0,0,
        521,7,1,0,0,0,522,523,5,194,0,0,523,528,3,10,5,0,524,525,5,401,0,
        0,525,527,3,10,5,0,526,524,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,
        0,528,529,1,0,0,0,529,9,1,0,0,0,530,528,1,0,0,0,531,533,3,458,229,
        0,532,534,3,12,6,0,533,532,1,0,0,0,533,534,1,0,0,0,534,535,1,0,0,
        0,535,536,5,10,0,0,536,537,5,412,0,0,537,538,3,6,3,0,538,539,5,422,
        0,0,539,11,1,0,0,0,540,541,5,412,0,0,541,542,3,160,80,0,542,543,
        5,422,0,0,543,13,1,0,0,0,544,552,3,32,16,0,545,552,3,28,14,0,546,
        552,3,26,13,0,547,552,3,24,12,0,548,552,3,20,10,0,549,552,3,18,9,
        0,550,552,3,16,8,0,551,544,1,0,0,0,551,545,1,0,0,0,551,546,1,0,0,
        0,551,547,1,0,0,0,551,548,1,0,0,0,551,549,1,0,0,0,551,550,1,0,0,
        0,552,15,1,0,0,0,553,554,5,5,0,0,554,555,5,154,0,0,555,558,5,203,
        0,0,556,557,5,79,0,0,557,559,5,57,0,0,558,556,1,0,0,0,558,559,1,
        0,0,0,559,560,1,0,0,0,560,564,3,458,229,0,561,565,3,30,15,0,562,
        563,5,401,0,0,563,565,3,160,80,0,564,561,1,0,0,0,564,562,1,0,0,0,
        564,565,1,0,0,0,565,567,1,0,0,0,566,568,3,208,104,0,567,566,1,0,
        0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,571,3,166,83,0,570,569,1,
        0,0,0,570,571,1,0,0,0,571,574,1,0,0,0,572,573,5,171,0,0,573,575,
        3,256,128,0,574,572,1,0,0,0,574,575,1,0,0,0,575,17,1,0,0,0,576,577,
        5,5,0,0,577,578,5,233,0,0,578,581,5,234,0,0,579,580,5,79,0,0,580,
        582,5,57,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,
        585,3,458,229,0,584,586,3,208,104,0,585,584,1,0,0,0,585,586,1,0,
        0,0,586,591,1,0,0,0,587,588,5,153,0,0,588,592,3,172,86,0,589,590,
        5,41,0,0,590,592,3,160,80,0,591,587,1,0,0,0,591,589,1,0,0,0,591,
        592,1,0,0,0,592,19,1,0,0,0,593,594,5,5,0,0,594,597,5,202,0,0,595,
        596,5,79,0,0,596,598,5,57,0,0,597,595,1,0,0,0,597,598,1,0,0,0,598,
        599,1,0,0,0,599,603,3,458,229,0,600,604,3,30,15,0,601,602,5,401,
        0,0,602,604,3,160,80,0,603,600,1,0,0,0,603,601,1,0,0,0,603,604,1,
        0,0,0,604,606,1,0,0,0,605,607,3,208,104,0,606,605,1,0,0,0,606,607,
        1,0,0,0,607,609,1,0,0,0,608,610,3,108,54,0,609,608,1,0,0,0,609,610,
        1,0,0,0,610,21,1,0,0,0,611,613,3,458,229,0,612,614,3,208,104,0,613,
        612,1,0,0,0,613,614,1,0,0,0,614,615,1,0,0,0,615,616,5,120,0,0,616,
        618,3,436,218,0,617,619,3,30,15,0,618,617,1,0,0,0,618,619,1,0,0,
        0,619,23,1,0,0,0,620,622,5,5,0,0,621,623,5,146,0,0,622,621,1,0,0,
        0,622,623,1,0,0,0,623,624,1,0,0,0,624,627,5,200,0,0,625,626,5,79,
        0,0,626,628,5,57,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,629,1,0,
        0,0,629,634,3,22,11,0,630,631,5,401,0,0,631,633,3,22,11,0,632,630,
        1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,639,
        1,0,0,0,636,634,1,0,0,0,637,638,5,66,0,0,638,640,5,150,0,0,639,637,
        1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,0,641,643,3,136,68,0,642,641,
        1,0,0,0,642,643,1,0,0,0,643,645,1,0,0,0,644,646,3,134,67,0,645,644,
        1,0,0,0,645,646,1,0,0,0,646,649,1,0,0,0,647,648,5,171,0,0,648,650,
        3,256,128,0,649,647,1,0,0,0,649,650,1,0,0,0,650,25,1,0,0,0,651,652,
        5,5,0,0,652,655,5,201,0,0,653,654,5,79,0,0,654,656,5,57,0,0,655,
        653,1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,659,3,458,229,0,
        658,660,3,208,104,0,659,658,1,0,0,0,659,660,1,0,0,0,660,662,1,0,
        0,0,661,663,3,30,15,0,662,661,1,0,0,0,662,663,1,0,0,0,663,665,1,
        0,0,0,664,666,3,142,71,0,665,664,1,0,0,0,665,666,1,0,0,0,666,668,
        1,0,0,0,667,669,3,156,78,0,668,667,1,0,0,0,668,669,1,0,0,0,669,672,
        1,0,0,0,670,671,5,171,0,0,671,673,3,256,128,0,672,670,1,0,0,0,672,
        673,1,0,0,0,673,27,1,0,0,0,674,675,5,5,0,0,675,678,5,197,0,0,676,
        677,5,79,0,0,677,679,5,57,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,
        680,1,0,0,0,680,684,3,458,229,0,681,685,3,30,15,0,682,683,5,401,
        0,0,683,685,3,160,80,0,684,681,1,0,0,0,684,682,1,0,0,0,684,685,1,
        0,0,0,685,687,1,0,0,0,686,688,3,208,104,0,687,686,1,0,0,0,687,688,
        1,0,0,0,688,690,1,0,0,0,689,691,3,92,46,0,690,689,1,0,0,0,690,691,
        1,0,0,0,691,696,1,0,0,0,692,694,7,0,0,0,693,692,1,0,0,0,693,694,
        1,0,0,0,694,695,1,0,0,0,695,697,3,102,51,0,696,693,1,0,0,0,696,697,
        1,0,0,0,697,699,1,0,0,0,698,700,3,94,47,0,699,698,1,0,0,0,699,700,
        1,0,0,0,700,702,1,0,0,0,701,703,3,112,56,0,702,701,1,0,0,0,702,703,
        1,0,0,0,703,705,1,0,0,0,704,706,3,98,49,0,705,704,1,0,0,0,705,706,
        1,0,0,0,706,708,1,0,0,0,707,709,3,108,54,0,708,707,1,0,0,0,708,709,
        1,0,0,0,709,29,1,0,0,0,710,711,5,140,0,0,711,712,5,171,0,0,712,713,
        3,458,229,0,713,31,1,0,0,0,714,715,5,5,0,0,715,716,5,163,0,0,716,
        718,3,436,218,0,717,719,3,208,104,0,718,717,1,0,0,0,718,719,1,0,
        0,0,719,720,1,0,0,0,720,725,3,34,17,0,721,722,5,401,0,0,722,724,
        3,34,17,0,723,721,1,0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,725,726,
        1,0,0,0,726,33,1,0,0,0,727,725,1,0,0,0,728,824,3,44,22,0,729,824,
        3,42,21,0,730,731,5,28,0,0,731,734,5,27,0,0,732,733,5,79,0,0,733,
        735,5,57,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,736,1,0,0,0,736,
        737,3,430,215,0,737,738,5,395,0,0,738,824,1,0,0,0,739,740,5,45,0,
        0,740,824,3,66,33,0,741,824,3,40,20,0,742,744,5,68,0,0,743,745,3,
        64,32,0,744,743,1,0,0,0,744,745,1,0,0,0,745,749,1,0,0,0,746,747,
        5,194,0,0,747,748,5,293,0,0,748,750,5,395,0,0,749,746,1,0,0,0,749,
        750,1,0,0,0,750,824,1,0,0,0,751,753,5,387,0,0,752,754,3,64,32,0,
        753,752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,756,5,194,0,
        0,756,757,5,293,0,0,757,824,5,395,0,0,758,824,3,38,19,0,759,824,
        3,46,23,0,760,761,5,112,0,0,761,771,3,64,32,0,762,763,5,171,0,0,
        763,764,5,48,0,0,764,772,5,395,0,0,765,766,5,171,0,0,766,767,5,188,
        0,0,767,772,5,395,0,0,768,769,5,171,0,0,769,770,5,163,0,0,770,772,
        3,436,218,0,771,762,1,0,0,0,771,765,1,0,0,0,771,768,1,0,0,0,772,
        774,1,0,0,0,773,775,3,368,184,0,774,773,1,0,0,0,774,775,1,0,0,0,
        775,824,1,0,0,0,776,777,5,139,0,0,777,824,5,178,0,0,778,779,5,140,
        0,0,779,782,5,27,0,0,780,781,5,79,0,0,781,783,5,57,0,0,782,780,1,
        0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,785,3,430,215,0,785,786,
        5,171,0,0,786,788,3,430,215,0,787,789,3,368,184,0,788,787,1,0,0,
        0,788,789,1,0,0,0,789,824,1,0,0,0,790,791,5,141,0,0,791,792,3,64,
        32,0,792,793,5,69,0,0,793,794,3,436,218,0,794,824,1,0,0,0,795,796,
        5,182,0,0,796,797,3,56,28,0,797,799,3,354,177,0,798,800,3,368,184,
        0,799,798,1,0,0,0,799,800,1,0,0,0,800,824,1,0,0,0,801,802,5,383,
        0,0,802,803,5,252,0,0,803,824,3,160,80,0,804,805,5,385,0,0,805,806,
        5,127,0,0,806,824,3,62,31,0,807,808,7,1,0,0,808,811,5,386,0,0,809,
        810,5,79,0,0,810,812,5,57,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,
        813,1,0,0,0,813,824,3,418,209,0,814,815,5,198,0,0,815,816,3,66,33,
        0,816,817,5,69,0,0,817,819,5,395,0,0,818,820,3,368,184,0,819,818,
        1,0,0,0,819,820,1,0,0,0,820,824,1,0,0,0,821,824,3,48,24,0,822,824,
        3,36,18,0,823,728,1,0,0,0,823,729,1,0,0,0,823,730,1,0,0,0,823,739,
        1,0,0,0,823,741,1,0,0,0,823,742,1,0,0,0,823,751,1,0,0,0,823,758,
        1,0,0,0,823,759,1,0,0,0,823,760,1,0,0,0,823,776,1,0,0,0,823,778,
        1,0,0,0,823,790,1,0,0,0,823,795,1,0,0,0,823,801,1,0,0,0,823,804,
        1,0,0,0,823,807,1,0,0,0,823,814,1,0,0,0,823,821,1,0,0,0,823,822,
        1,0,0,0,824,35,1,0,0,0,825,826,5,41,0,0,826,827,5,192,0,0,827,829,
        3,422,211,0,828,830,3,368,184,0,829,828,1,0,0,0,829,830,1,0,0,0,
        830,839,1,0,0,0,831,834,5,41,0,0,832,833,5,81,0,0,833,835,3,64,32,
        0,834,832,1,0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,837,5,192,
        0,0,837,839,3,50,25,0,838,825,1,0,0,0,838,831,1,0,0,0,839,37,1,0,
        0,0,840,841,5,104,0,0,841,844,5,82,0,0,842,843,5,79,0,0,843,845,
        5,57,0,0,844,842,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,849,
        3,430,215,0,847,848,5,81,0,0,848,850,3,64,32,0,849,847,1,0,0,0,849,
        850,1,0,0,0,850,852,1,0,0,0,851,853,3,368,184,0,852,851,1,0,0,0,
        852,853,1,0,0,0,853,869,1,0,0,0,854,855,5,104,0,0,855,858,5,134,
        0,0,856,857,5,79,0,0,857,859,5,57,0,0,858,856,1,0,0,0,858,859,1,
        0,0,0,859,860,1,0,0,0,860,863,3,430,215,0,861,862,5,81,0,0,862,864,
        3,64,32,0,863,861,1,0,0,0,863,864,1,0,0,0,864,866,1,0,0,0,865,867,
        3,368,184,0,866,865,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,
        840,1,0,0,0,868,854,1,0,0,0,869,39,1,0,0,0,870,871,5,51,0,0,871,
        874,5,27,0,0,872,873,5,79,0,0,873,875,5,57,0,0,874,872,1,0,0,0,874,
        875,1,0,0,0,875,876,1,0,0,0,876,878,3,430,215,0,877,879,3,368,184,
        0,878,877,1,0,0,0,878,879,1,0,0,0,879,913,1,0,0,0,880,881,5,51,0,
        0,881,884,5,82,0,0,882,883,5,79,0,0,883,885,5,57,0,0,884,882,1,0,
        0,0,884,885,1,0,0,0,885,886,1,0,0,0,886,888,3,430,215,0,887,889,
        3,368,184,0,888,887,1,0,0,0,888,889,1,0,0,0,889,913,1,0,0,0,890,
        891,5,51,0,0,891,894,5,134,0,0,892,893,5,79,0,0,893,895,5,57,0,0,
        894,892,1,0,0,0,894,895,1,0,0,0,895,896,1,0,0,0,896,898,3,430,215,
        0,897,899,3,368,184,0,898,897,1,0,0,0,898,899,1,0,0,0,899,913,1,
        0,0,0,900,901,5,51,0,0,901,903,3,66,33,0,902,904,3,368,184,0,903,
        902,1,0,0,0,903,904,1,0,0,0,904,913,1,0,0,0,905,906,5,51,0,0,906,
        907,5,384,0,0,907,908,7,2,0,0,908,910,7,3,0,0,909,911,3,368,184,
        0,910,909,1,0,0,0,910,911,1,0,0,0,911,913,1,0,0,0,912,870,1,0,0,
        0,912,880,1,0,0,0,912,890,1,0,0,0,912,900,1,0,0,0,912,905,1,0,0,
        0,913,41,1,0,0,0,914,915,5,23,0,0,915,918,5,27,0,0,916,917,5,79,
        0,0,917,919,5,57,0,0,918,916,1,0,0,0,918,919,1,0,0,0,919,920,1,0,
        0,0,920,923,3,430,215,0,921,922,5,81,0,0,922,924,3,64,32,0,923,921,
        1,0,0,0,923,924,1,0,0,0,924,948,1,0,0,0,925,926,5,23,0,0,926,929,
        5,82,0,0,927,928,5,79,0,0,928,930,5,57,0,0,929,927,1,0,0,0,929,930,
        1,0,0,0,930,931,1,0,0,0,931,934,3,430,215,0,932,933,5,81,0,0,933,
        935,3,64,32,0,934,932,1,0,0,0,934,935,1,0,0,0,935,948,1,0,0,0,936,
        937,5,23,0,0,937,940,5,134,0,0,938,939,5,79,0,0,939,941,5,57,0,0,
        940,938,1,0,0,0,940,941,1,0,0,0,941,942,1,0,0,0,942,945,3,430,215,
        0,943,944,5,81,0,0,944,946,3,64,32,0,945,943,1,0,0,0,945,946,1,0,
        0,0,946,948,1,0,0,0,947,914,1,0,0,0,947,925,1,0,0,0,947,936,1,0,
        0,0,948,43,1,0,0,0,949,950,5,1,0,0,950,954,5,27,0,0,951,952,5,79,
        0,0,952,953,5,116,0,0,953,955,5,57,0,0,954,951,1,0,0,0,954,955,1,
        0,0,0,955,956,1,0,0,0,956,959,3,232,116,0,957,958,5,2,0,0,958,960,
        3,430,215,0,959,957,1,0,0,0,959,960,1,0,0,0,960,962,1,0,0,0,961,
        963,3,368,184,0,962,961,1,0,0,0,962,963,1,0,0,0,963,1012,1,0,0,0,
        964,965,5,1,0,0,965,969,5,82,0,0,966,967,5,79,0,0,967,968,5,116,
        0,0,968,970,5,57,0,0,969,966,1,0,0,0,969,970,1,0,0,0,970,971,1,0,
        0,0,971,974,3,236,118,0,972,973,5,2,0,0,973,975,3,430,215,0,974,
        972,1,0,0,0,974,975,1,0,0,0,975,1012,1,0,0,0,976,977,5,1,0,0,977,
        981,5,134,0,0,978,979,5,79,0,0,979,980,5,116,0,0,980,982,5,57,0,
        0,981,978,1,0,0,0,981,982,1,0,0,0,982,983,1,0,0,0,983,986,3,238,
        119,0,984,985,5,2,0,0,985,987,3,430,215,0,986,984,1,0,0,0,986,987,
        1,0,0,0,987,989,1,0,0,0,988,990,3,368,184,0,989,988,1,0,0,0,989,
        990,1,0,0,0,990,1012,1,0,0,0,991,992,5,16,0,0,992,995,3,64,32,0,
        993,994,5,69,0,0,994,996,3,436,218,0,995,993,1,0,0,0,995,996,1,0,
        0,0,996,998,1,0,0,0,997,999,3,368,184,0,998,997,1,0,0,0,998,999,
        1,0,0,0,999,1012,1,0,0,0,1000,1001,5,1,0,0,1001,1005,5,386,0,0,1002,
        1003,5,79,0,0,1003,1004,5,116,0,0,1004,1006,5,57,0,0,1005,1002,1,
        0,0,0,1005,1006,1,0,0,0,1006,1007,1,0,0,0,1007,1008,3,418,209,0,
        1008,1009,5,179,0,0,1009,1010,3,160,80,0,1010,1012,1,0,0,0,1011,
        949,1,0,0,0,1011,964,1,0,0,0,1011,976,1,0,0,0,1011,991,1,0,0,0,1011,
        1000,1,0,0,0,1012,45,1,0,0,0,1013,1014,5,110,0,0,1014,1017,5,27,
        0,0,1015,1016,5,79,0,0,1016,1018,5,57,0,0,1017,1015,1,0,0,0,1017,
        1018,1,0,0,0,1018,1019,1,0,0,0,1019,1020,3,430,215,0,1020,1022,3,
        240,120,0,1021,1023,3,368,184,0,1022,1021,1,0,0,0,1022,1023,1,0,
        0,0,1023,1080,1,0,0,0,1024,1025,5,110,0,0,1025,1028,5,27,0,0,1026,
        1027,5,79,0,0,1027,1029,5,57,0,0,1028,1026,1,0,0,0,1028,1029,1,0,
        0,0,1029,1030,1,0,0,0,1030,1031,3,430,215,0,1031,1032,5,28,0,0,1032,
        1034,5,395,0,0,1033,1035,3,368,184,0,1034,1033,1,0,0,0,1034,1035,
        1,0,0,0,1035,1080,1,0,0,0,1036,1037,5,110,0,0,1037,1040,5,27,0,0,
        1038,1039,5,79,0,0,1039,1041,5,57,0,0,1040,1038,1,0,0,0,1040,1041,
        1,0,0,0,1041,1042,1,0,0,0,1042,1043,3,430,215,0,1043,1044,5,139,
        0,0,1044,1046,3,60,30,0,1045,1047,3,368,184,0,1046,1045,1,0,0,0,
        1046,1047,1,0,0,0,1047,1080,1,0,0,0,1048,1049,5,110,0,0,1049,1052,
        5,27,0,0,1050,1051,5,79,0,0,1051,1053,5,57,0,0,1052,1050,1,0,0,0,
        1052,1053,1,0,0,0,1053,1054,1,0,0,0,1054,1056,3,232,116,0,1055,1057,
        3,368,184,0,1056,1055,1,0,0,0,1056,1057,1,0,0,0,1057,1080,1,0,0,
        0,1058,1059,5,110,0,0,1059,1060,5,386,0,0,1060,1061,3,418,209,0,
        1061,1062,5,179,0,0,1062,1063,3,160,80,0,1063,1080,1,0,0,0,1064,
        1065,5,110,0,0,1065,1066,5,252,0,0,1066,1068,3,388,194,0,1067,1069,
        3,368,184,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,1080,1,0,0,
        0,1070,1071,5,110,0,0,1071,1072,5,123,0,0,1072,1073,5,19,0,0,1073,
        1080,3,422,211,0,1074,1075,5,110,0,0,1075,1077,3,226,113,0,1076,
        1078,3,368,184,0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,1080,1,
        0,0,0,1079,1013,1,0,0,0,1079,1024,1,0,0,0,1079,1036,1,0,0,0,1079,
        1048,1,0,0,0,1079,1058,1,0,0,0,1079,1064,1,0,0,0,1079,1070,1,0,0,
        0,1079,1074,1,0,0,0,1080,47,1,0,0,0,1081,1082,5,182,0,0,1082,1087,
        3,54,27,0,1083,1084,5,401,0,0,1084,1086,3,54,27,0,1085,1083,1,0,
        0,0,1086,1089,1,0,0,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1092,
        1,0,0,0,1089,1087,1,0,0,0,1090,1091,5,81,0,0,1091,1093,3,64,32,0,
        1092,1090,1,0,0,0,1092,1093,1,0,0,0,1093,1094,1,0,0,0,1094,1095,
        5,192,0,0,1095,1096,3,50,25,0,1096,49,1,0,0,0,1097,1098,3,52,26,
        0,1098,1099,5,401,0,0,1099,1100,3,52,26,0,1100,51,1,0,0,0,1101,1102,
        3,458,229,0,1102,1103,5,406,0,0,1103,1104,3,446,223,0,1104,53,1,
        0,0,0,1105,1106,3,422,211,0,1106,1107,5,406,0,0,1107,1108,3,178,
        89,0,1108,55,1,0,0,0,1109,1114,3,58,29,0,1110,1111,5,401,0,0,1111,
        1113,3,58,29,0,1112,1110,1,0,0,0,1113,1116,1,0,0,0,1114,1112,1,0,
        0,0,1114,1115,1,0,0,0,1115,57,1,0,0,0,1116,1114,1,0,0,0,1117,1118,
        3,430,215,0,1118,1119,5,406,0,0,1119,1120,3,422,211,0,1120,59,1,
        0,0,0,1121,1122,7,4,0,0,1122,61,1,0,0,0,1123,1129,3,124,62,0,1124,
        1129,3,448,224,0,1125,1126,5,78,0,0,1126,1129,5,395,0,0,1127,1129,
        5,4,0,0,1128,1123,1,0,0,0,1128,1124,1,0,0,0,1128,1125,1,0,0,0,1128,
        1127,1,0,0,0,1129,63,1,0,0,0,1130,1131,5,127,0,0,1131,1132,3,62,
        31,0,1132,65,1,0,0,0,1133,1137,3,64,32,0,1134,1135,5,218,0,0,1135,
        1137,3,62,31,0,1136,1133,1,0,0,0,1136,1134,1,0,0,0,1137,67,1,0,0,
        0,1138,1139,5,16,0,0,1139,1140,5,47,0,0,1140,1142,3,436,218,0,1141,
        1143,3,208,104,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,69,1,0,
        0,0,1144,1145,5,22,0,0,1145,1146,5,163,0,0,1146,1148,3,436,218,0,
        1147,1149,3,64,32,0,1148,1147,1,0,0,0,1148,1149,1,0,0,0,1149,71,
        1,0,0,0,1150,1151,5,41,0,0,1151,1152,5,69,0,0,1152,1154,3,436,218,
        0,1153,1155,3,208,104,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,
        1157,1,0,0,0,1156,1158,3,354,177,0,1157,1156,1,0,0,0,1157,1158,1,
        0,0,0,1158,73,1,0,0,0,1159,1167,5,16,0,0,1160,1163,5,30,0,0,1161,
        1162,5,122,0,0,1162,1164,5,141,0,0,1163,1161,1,0,0,0,1163,1164,1,
        0,0,0,1164,1167,1,0,0,0,1165,1167,5,141,0,0,1166,1159,1,0,0,0,1166,
        1160,1,0,0,0,1166,1165,1,0,0,0,1167,1169,1,0,0,0,1168,1170,5,165,
        0,0,1169,1168,1,0,0,0,1169,1170,1,0,0,0,1170,1171,1,0,0,0,1171,1175,
        5,163,0,0,1172,1173,5,79,0,0,1173,1174,5,116,0,0,1174,1176,5,57,
        0,0,1175,1172,1,0,0,0,1175,1176,1,0,0,0,1176,1177,1,0,0,0,1177,1179,
        3,436,218,0,1178,1180,3,210,105,0,1179,1178,1,0,0,0,1179,1180,1,
        0,0,0,1180,1182,1,0,0,0,1181,1183,3,208,104,0,1182,1181,1,0,0,0,
        1182,1183,1,0,0,0,1183,1185,1,0,0,0,1184,1186,3,216,108,0,1185,1184,
        1,0,0,0,1185,1186,1,0,0,0,1186,1188,1,0,0,0,1187,1189,3,218,109,
        0,1188,1187,1,0,0,0,1188,1189,1,0,0,0,1189,1191,1,0,0,0,1190,1192,
        3,214,107,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,75,1,0,0,0,
        1193,1194,7,5,0,0,1194,1198,5,34,0,0,1195,1196,5,79,0,0,1196,1197,
        5,116,0,0,1197,1199,5,57,0,0,1198,1195,1,0,0,0,1198,1199,1,0,0,0,
        1199,1200,1,0,0,0,1200,1202,3,458,229,0,1201,1203,3,208,104,0,1202,
        1201,1,0,0,0,1202,1203,1,0,0,0,1203,1205,1,0,0,0,1204,1206,3,228,
        114,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1209,1,0,0,0,1207,
        1208,5,28,0,0,1208,1210,5,395,0,0,1209,1207,1,0,0,0,1209,1210,1,
        0,0,0,1210,77,1,0,0,0,1211,1219,5,16,0,0,1212,1215,5,30,0,0,1213,
        1214,5,122,0,0,1214,1216,5,141,0,0,1215,1213,1,0,0,0,1215,1216,1,
        0,0,0,1216,1219,1,0,0,0,1217,1219,5,141,0,0,1218,1211,1,0,0,0,1218,
        1212,1,0,0,0,1218,1217,1,0,0,0,1219,1220,1,0,0,0,1220,1224,5,47,
        0,0,1221,1222,5,79,0,0,1222,1223,5,116,0,0,1223,1225,5,57,0,0,1224,
        1221,1,0,0,0,1224,1225,1,0,0,0,1225,1226,1,0,0,0,1226,1228,3,436,
        218,0,1227,1229,3,210,105,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,
        1229,1231,1,0,0,0,1230,1232,3,208,104,0,1231,1230,1,0,0,0,1231,1232,
        1,0,0,0,1232,1233,1,0,0,0,1233,1234,3,188,94,0,1234,1235,3,192,96,
        0,1235,79,1,0,0,0,1236,1237,7,5,0,0,1237,1238,5,101,0,0,1238,1242,
        5,187,0,0,1239,1240,5,79,0,0,1240,1241,5,116,0,0,1241,1243,5,57,
        0,0,1242,1239,1,0,0,0,1242,1243,1,0,0,0,1243,1244,1,0,0,0,1244,1246,
        3,436,218,0,1245,1247,3,210,105,0,1246,1245,1,0,0,0,1246,1247,1,
        0,0,0,1247,1249,1,0,0,0,1248,1250,3,208,104,0,1249,1248,1,0,0,0,
        1249,1250,1,0,0,0,1250,1256,1,0,0,0,1251,1252,5,194,0,0,1252,1254,
        5,169,0,0,1253,1255,5,393,0,0,1254,1253,1,0,0,0,1254,1255,1,0,0,
        0,1255,1257,1,0,0,0,1256,1251,1,0,0,0,1256,1257,1,0,0,0,1257,1259,
        1,0,0,0,1258,1260,3,212,106,0,1259,1258,1,0,0,0,1259,1260,1,0,0,
        0,1260,1262,1,0,0,0,1261,1263,3,216,108,0,1262,1261,1,0,0,0,1262,
        1263,1,0,0,0,1263,1264,1,0,0,0,1264,1265,3,214,107,0,1265,81,1,0,
        0,0,1266,1267,7,5,0,0,1267,1268,5,105,0,0,1268,1272,5,187,0,0,1269,
        1270,5,79,0,0,1270,1271,5,116,0,0,1271,1273,5,57,0,0,1272,1269,1,
        0,0,0,1272,1273,1,0,0,0,1273,1274,1,0,0,0,1274,1276,3,436,218,0,
        1275,1277,3,210,105,0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1279,
        1,0,0,0,1278,1280,3,208,104,0,1279,1278,1,0,0,0,1279,1280,1,0,0,
        0,1280,1282,1,0,0,0,1281,1283,3,216,108,0,1282,1281,1,0,0,0,1282,
        1283,1,0,0,0,1283,1289,1,0,0,0,1284,1290,3,212,106,0,1285,1287,3,
        218,109,0,1286,1288,5,130,0,0,1287,1286,1,0,0,0,1287,1288,1,0,0,
        0,1288,1290,1,0,0,0,1289,1284,1,0,0,0,1289,1285,1,0,0,0,1290,1291,
        1,0,0,0,1291,1292,3,214,107,0,1292,83,1,0,0,0,1293,1296,7,5,0,0,
        1294,1295,5,122,0,0,1295,1297,5,141,0,0,1296,1294,1,0,0,0,1296,1297,
        1,0,0,0,1297,1298,1,0,0,0,1298,1302,5,187,0,0,1299,1300,5,79,0,0,
        1300,1301,5,116,0,0,1301,1303,5,57,0,0,1302,1299,1,0,0,0,1302,1303,
        1,0,0,0,1303,1304,1,0,0,0,1304,1306,3,436,218,0,1305,1307,3,210,
        105,0,1306,1305,1,0,0,0,1306,1307,1,0,0,0,1307,1309,1,0,0,0,1308,
        1310,3,208,104,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,1312,1,
        0,0,0,1311,1313,3,216,108,0,1312,1311,1,0,0,0,1312,1313,1,0,0,0,
        1313,1314,1,0,0,0,1314,1315,3,214,107,0,1315,85,1,0,0,0,1316,1317,
        7,6,0,0,1317,87,1,0,0,0,1318,1319,5,92,0,0,1319,1320,5,395,0,0,1320,
        1321,5,179,0,0,1321,1322,5,395,0,0,1322,89,1,0,0,0,1323,1351,5,277,
        0,0,1324,1325,5,278,0,0,1325,1326,5,279,0,0,1326,1351,5,395,0,0,
        1327,1328,5,280,0,0,1328,1329,5,281,0,0,1329,1351,5,395,0,0,1330,
        1331,5,282,0,0,1331,1332,7,7,0,0,1332,1351,5,395,0,0,1333,1334,5,
        285,0,0,1334,1335,5,19,0,0,1335,1340,3,88,44,0,1336,1337,5,401,0,
        0,1337,1339,3,88,44,0,1338,1336,1,0,0,0,1339,1342,1,0,0,0,1340,1338,
        1,0,0,0,1340,1341,1,0,0,0,1341,1351,1,0,0,0,1342,1340,1,0,0,0,1343,
        1344,5,286,0,0,1344,1345,5,279,0,0,1345,1348,5,395,0,0,1346,1347,
        5,287,0,0,1347,1349,5,395,0,0,1348,1346,1,0,0,0,1348,1349,1,0,0,
        0,1349,1351,1,0,0,0,1350,1323,1,0,0,0,1350,1324,1,0,0,0,1350,1327,
        1,0,0,0,1350,1330,1,0,0,0,1350,1333,1,0,0,0,1350,1343,1,0,0,0,1351,
        91,1,0,0,0,1352,1353,5,116,0,0,1353,1365,5,271,0,0,1354,1357,5,271,
        0,0,1355,1356,5,194,0,0,1356,1358,3,86,43,0,1357,1355,1,0,0,0,1357,
        1358,1,0,0,0,1358,1359,1,0,0,0,1359,1360,5,19,0,0,1360,1365,5,395,
        0,0,1361,1362,5,271,0,0,1362,1363,5,194,0,0,1363,1365,3,90,45,0,
        1364,1352,1,0,0,0,1364,1354,1,0,0,0,1364,1361,1,0,0,0,1365,93,1,
        0,0,0,1366,1367,5,290,0,0,1367,1368,5,291,0,0,1368,1369,5,395,0,
        0,1369,95,1,0,0,0,1370,1375,3,274,137,0,1371,1375,3,272,136,0,1372,
        1375,5,8,0,0,1373,1375,5,254,0,0,1374,1370,1,0,0,0,1374,1371,1,0,
        0,0,1374,1372,1,0,0,0,1374,1373,1,0,0,0,1375,97,1,0,0,0,1376,1377,
        5,292,0,0,1377,1382,3,96,48,0,1378,1379,5,401,0,0,1379,1381,3,96,
        48,0,1380,1378,1,0,0,0,1381,1384,1,0,0,0,1382,1380,1,0,0,0,1382,
        1383,1,0,0,0,1383,1387,1,0,0,0,1384,1382,1,0,0,0,1385,1386,5,269,
        0,0,1386,1388,3,276,138,0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,
        99,1,0,0,0,1389,1395,5,102,0,0,1390,1395,5,8,0,0,1391,1395,5,254,
        0,0,1392,1393,7,8,0,0,1393,1395,5,395,0,0,1394,1389,1,0,0,0,1394,
        1390,1,0,0,0,1394,1391,1,0,0,0,1394,1392,1,0,0,0,1395,101,1,0,0,
        0,1396,1397,5,296,0,0,1397,1402,3,100,50,0,1398,1399,5,401,0,0,1399,
        1401,3,100,50,0,1400,1398,1,0,0,0,1401,1404,1,0,0,0,1402,1400,1,
        0,0,0,1402,1403,1,0,0,0,1403,103,1,0,0,0,1404,1402,1,0,0,0,1405,
        1406,3,458,229,0,1406,1407,5,406,0,0,1407,1413,3,448,224,0,1408,
        1410,5,108,0,0,1409,1411,5,406,0,0,1410,1409,1,0,0,0,1410,1411,1,
        0,0,0,1411,1412,1,0,0,0,1412,1414,3,448,224,0,1413,1408,1,0,0,0,
        1413,1414,1,0,0,0,1414,1420,1,0,0,0,1415,1417,5,106,0,0,1416,1418,
        5,406,0,0,1417,1416,1,0,0,0,1417,1418,1,0,0,0,1418,1419,1,0,0,0,
        1419,1421,3,448,224,0,1420,1415,1,0,0,0,1420,1421,1,0,0,0,1421,1423,
        1,0,0,0,1422,1424,7,9,0,0,1423,1422,1,0,0,0,1423,1424,1,0,0,0,1424,
        105,1,0,0,0,1425,1429,3,104,52,0,1426,1427,5,203,0,0,1427,1429,5,
        395,0,0,1428,1425,1,0,0,0,1428,1426,1,0,0,0,1429,107,1,0,0,0,1430,
        1431,5,154,0,0,1431,1436,3,106,53,0,1432,1433,5,401,0,0,1433,1435,
        3,106,53,0,1434,1432,1,0,0,0,1435,1438,1,0,0,0,1436,1434,1,0,0,0,
        1436,1437,1,0,0,0,1437,109,1,0,0,0,1438,1436,1,0,0,0,1439,1442,5,
        81,0,0,1440,1443,3,458,229,0,1441,1443,5,395,0,0,1442,1440,1,0,0,
        0,1442,1441,1,0,0,0,1443,111,1,0,0,0,1444,1445,5,39,0,0,1445,1446,
        5,202,0,0,1446,1447,3,260,130,0,1447,113,1,0,0,0,1448,1449,5,30,
        0,0,1449,1451,5,197,0,0,1450,1452,3,116,58,0,1451,1450,1,0,0,0,1451,
        1452,1,0,0,0,1452,1453,1,0,0,0,1453,1455,3,160,80,0,1454,1456,3,
        208,104,0,1455,1454,1,0,0,0,1455,1456,1,0,0,0,1456,1458,1,0,0,0,
        1457,1459,3,92,46,0,1458,1457,1,0,0,0,1458,1459,1,0,0,0,1459,1461,
        1,0,0,0,1460,1462,3,102,51,0,1461,1460,1,0,0,0,1461,1462,1,0,0,0,
        1462,1464,1,0,0,0,1463,1465,3,94,47,0,1464,1463,1,0,0,0,1464,1465,
        1,0,0,0,1465,1467,1,0,0,0,1466,1468,3,110,55,0,1467,1466,1,0,0,0,
        1467,1468,1,0,0,0,1468,1470,1,0,0,0,1469,1471,3,112,56,0,1470,1469,
        1,0,0,0,1470,1471,1,0,0,0,1471,1478,1,0,0,0,1472,1473,5,39,0,0,1473,
        1476,5,34,0,0,1474,1477,3,442,221,0,1475,1477,5,254,0,0,1476,1474,
        1,0,0,0,1476,1475,1,0,0,0,1477,1479,1,0,0,0,1478,1472,1,0,0,0,1478,
        1479,1,0,0,0,1479,1481,1,0,0,0,1480,1482,3,98,49,0,1481,1480,1,0,
        0,0,1481,1482,1,0,0,0,1482,1484,1,0,0,0,1483,1485,3,108,54,0,1484,
        1483,1,0,0,0,1484,1485,1,0,0,0,1485,115,1,0,0,0,1486,1487,5,122,
        0,0,1487,1492,5,141,0,0,1488,1489,5,79,0,0,1489,1490,5,116,0,0,1490,
        1492,5,57,0,0,1491,1486,1,0,0,0,1491,1488,1,0,0,0,1492,117,1,0,0,
        0,1493,1499,3,436,218,0,1494,1495,3,458,229,0,1495,1496,5,404,0,
        0,1496,1497,5,397,0,0,1497,1499,1,0,0,0,1498,1493,1,0,0,0,1498,1494,
        1,0,0,0,1499,119,1,0,0,0,1500,1502,3,458,229,0,1501,1503,3,208,104,
        0,1502,1501,1,0,0,0,1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,1505,
        5,120,0,0,1505,1506,3,118,59,0,1506,121,1,0,0,0,1507,1511,3,458,
        229,0,1508,1511,3,448,224,0,1509,1511,3,124,62,0,1510,1507,1,0,0,
        0,1510,1508,1,0,0,0,1510,1509,1,0,0,0,1511,123,1,0,0,0,1512,1513,
        3,458,229,0,1513,1527,5,412,0,0,1514,1517,3,448,224,0,1515,1517,
        3,458,229,0,1516,1514,1,0,0,0,1516,1515,1,0,0,0,1517,1523,1,0,0,
        0,1518,1519,5,401,0,0,1519,1522,3,448,224,0,1520,1522,3,458,229,
        0,1521,1518,1,0,0,0,1521,1520,1,0,0,0,1522,1525,1,0,0,0,1523,1521,
        1,0,0,0,1523,1524,1,0,0,0,1524,1528,1,0,0,0,1525,1523,1,0,0,0,1526,
        1528,3,124,62,0,1527,1516,1,0,0,0,1527,1526,1,0,0,0,1527,1528,1,
        0,0,0,1528,1529,1,0,0,0,1529,1530,5,422,0,0,1530,125,1,0,0,0,1531,
        1537,3,122,61,0,1532,1533,3,122,61,0,1533,1534,7,10,0,0,1534,1535,
        3,122,61,0,1535,1537,1,0,0,0,1536,1531,1,0,0,0,1536,1532,1,0,0,0,
        1537,127,1,0,0,0,1538,1543,3,126,63,0,1539,1540,5,6,0,0,1540,1542,
        3,126,63,0,1541,1539,1,0,0,0,1542,1545,1,0,0,0,1543,1541,1,0,0,0,
        1543,1544,1,0,0,0,1544,129,1,0,0,0,1545,1543,1,0,0,0,1546,1552,3,
        278,139,0,1547,1552,5,4,0,0,1548,1549,5,4,0,0,1549,1550,5,269,0,
        0,1550,1552,3,276,138,0,1551,1546,1,0,0,0,1551,1547,1,0,0,0,1551,
        1548,1,0,0,0,1552,131,1,0,0,0,1553,1559,3,278,139,0,1554,1559,5,
        4,0,0,1555,1556,5,4,0,0,1556,1557,5,269,0,0,1557,1559,3,276,138,
        0,1558,1553,1,0,0,0,1558,1554,1,0,0,0,1558,1555,1,0,0,0,1559,133,
        1,0,0,0,1560,1561,5,10,0,0,1561,1562,7,11,0,0,1562,135,1,0,0,0,1563,
        1566,5,184,0,0,1564,1567,3,128,64,0,1565,1567,5,254,0,0,1566,1564,
        1,0,0,0,1566,1565,1,0,0,0,1567,137,1,0,0,0,1568,1570,5,30,0,0,1569,
        1571,5,146,0,0,1570,1569,1,0,0,0,1570,1571,1,0,0,0,1571,1572,1,0,
        0,0,1572,1574,5,200,0,0,1573,1575,3,116,58,0,1574,1573,1,0,0,0,1574,
        1575,1,0,0,0,1575,1576,1,0,0,0,1576,1581,3,120,60,0,1577,1578,5,
        401,0,0,1578,1580,3,120,60,0,1579,1577,1,0,0,0,1580,1583,1,0,0,0,
        1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,1585,1,0,0,0,1583,1581,
        1,0,0,0,1584,1586,3,110,55,0,1585,1584,1,0,0,0,1585,1586,1,0,0,0,
        1586,1589,1,0,0,0,1587,1588,5,66,0,0,1588,1590,5,150,0,0,1589,1587,
        1,0,0,0,1589,1590,1,0,0,0,1590,1592,1,0,0,0,1591,1593,3,136,68,0,
        1592,1591,1,0,0,0,1592,1593,1,0,0,0,1593,1595,1,0,0,0,1594,1596,
        3,134,67,0,1595,1594,1,0,0,0,1595,1596,1,0,0,0,1596,1599,1,0,0,0,
        1597,1598,5,171,0,0,1598,1600,3,256,128,0,1599,1597,1,0,0,0,1599,
        1600,1,0,0,0,1600,139,1,0,0,0,1601,1611,5,360,0,0,1602,1611,5,361,
        0,0,1603,1606,5,363,0,0,1604,1605,5,401,0,0,1605,1607,7,12,0,0,1606,
        1604,1,0,0,0,1606,1607,1,0,0,0,1607,1611,1,0,0,0,1608,1611,5,364,
        0,0,1609,1611,5,365,0,0,1610,1601,1,0,0,0,1610,1602,1,0,0,0,1610,
        1603,1,0,0,0,1610,1608,1,0,0,0,1610,1609,1,0,0,0,1611,141,1,0,0,
        0,1612,1613,7,13,0,0,1613,1614,5,19,0,0,1614,1618,3,140,70,0,1615,
        1616,5,116,0,0,1616,1618,5,358,0,0,1617,1612,1,0,0,0,1617,1615,1,
        0,0,0,1618,143,1,0,0,0,1619,1620,7,14,0,0,1620,145,1,0,0,0,1621,
        1624,5,395,0,0,1622,1624,3,446,223,0,1623,1621,1,0,0,0,1623,1622,
        1,0,0,0,1624,147,1,0,0,0,1625,1626,5,106,0,0,1626,1627,3,144,72,
        0,1627,1628,5,406,0,0,1628,1629,3,146,73,0,1629,149,1,0,0,0,1630,
        1635,3,148,74,0,1631,1632,5,401,0,0,1632,1634,3,148,74,0,1633,1631,
        1,0,0,0,1634,1637,1,0,0,0,1635,1633,1,0,0,0,1635,1636,1,0,0,0,1636,
        1643,1,0,0,0,1637,1635,1,0,0,0,1638,1639,5,115,0,0,1639,1643,5,376,
        0,0,1640,1641,5,377,0,0,1641,1643,5,378,0,0,1642,1630,1,0,0,0,1642,
        1638,1,0,0,0,1642,1640,1,0,0,0,1643,151,1,0,0,0,1644,1646,5,66,0,
        0,1645,1647,5,359,0,0,1646,1645,1,0,0,0,1646,1647,1,0,0,0,1647,1648,
        1,0,0,0,1648,1649,3,154,77,0,1649,1650,3,150,75,0,1650,153,1,0,0,
        0,1651,1652,5,87,0,0,1652,1653,3,446,223,0,1653,1654,3,450,225,0,
        1654,155,1,0,0,0,1655,1662,3,152,76,0,1656,1658,5,401,0,0,1657,1656,
        1,0,0,0,1657,1658,1,0,0,0,1658,1659,1,0,0,0,1659,1661,3,152,76,0,
        1660,1657,1,0,0,0,1661,1664,1,0,0,0,1662,1660,1,0,0,0,1662,1663,
        1,0,0,0,1663,157,1,0,0,0,1664,1662,1,0,0,0,1665,1666,5,30,0,0,1666,
        1668,5,201,0,0,1667,1669,3,116,58,0,1668,1667,1,0,0,0,1668,1669,
        1,0,0,0,1669,1670,1,0,0,0,1670,1672,3,160,80,0,1671,1673,3,208,104,
        0,1672,1671,1,0,0,0,1672,1673,1,0,0,0,1673,1675,1,0,0,0,1674,1676,
        3,110,55,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,1678,1,0,0,0,
        1677,1679,3,142,71,0,1678,1677,1,0,0,0,1678,1679,1,0,0,0,1679,1681,
        1,0,0,0,1680,1682,3,156,78,0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,
        1682,1685,1,0,0,0,1683,1684,5,171,0,0,1684,1686,3,256,128,0,1685,
        1683,1,0,0,0,1685,1686,1,0,0,0,1686,159,1,0,0,0,1687,1692,3,458,
        229,0,1688,1689,5,401,0,0,1689,1691,3,458,229,0,1690,1688,1,0,0,
        0,1691,1694,1,0,0,0,1692,1690,1,0,0,0,1692,1693,1,0,0,0,1693,161,
        1,0,0,0,1694,1692,1,0,0,0,1695,1696,5,30,0,0,1696,1698,5,202,0,0,
        1697,1699,3,116,58,0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1700,
        1,0,0,0,1700,1702,3,160,80,0,1701,1703,3,208,104,0,1702,1701,1,0,
        0,0,1702,1703,1,0,0,0,1703,1705,1,0,0,0,1704,1706,3,110,55,0,1705,
        1704,1,0,0,0,1705,1706,1,0,0,0,1706,1708,1,0,0,0,1707,1709,3,108,
        54,0,1708,1707,1,0,0,0,1708,1709,1,0,0,0,1709,163,1,0,0,0,1710,1714,
        3,106,53,0,1711,1712,5,382,0,0,1712,1714,5,395,0,0,1713,1710,1,0,
        0,0,1713,1711,1,0,0,0,1714,165,1,0,0,0,1715,1716,5,154,0,0,1716,
        1721,3,164,82,0,1717,1718,5,401,0,0,1718,1720,3,164,82,0,1719,1717,
        1,0,0,0,1720,1723,1,0,0,0,1721,1719,1,0,0,0,1721,1722,1,0,0,0,1722,
        167,1,0,0,0,1723,1721,1,0,0,0,1724,1725,5,30,0,0,1725,1726,5,154,
        0,0,1726,1728,5,203,0,0,1727,1729,3,116,58,0,1728,1727,1,0,0,0,1728,
        1729,1,0,0,0,1729,1730,1,0,0,0,1730,1732,3,160,80,0,1731,1733,3,
        208,104,0,1732,1731,1,0,0,0,1732,1733,1,0,0,0,1733,1735,1,0,0,0,
        1734,1736,3,110,55,0,1735,1734,1,0,0,0,1735,1736,1,0,0,0,1736,1738,
        1,0,0,0,1737,1739,3,166,83,0,1738,1737,1,0,0,0,1738,1739,1,0,0,0,
        1739,1742,1,0,0,0,1740,1741,5,171,0,0,1741,1743,3,256,128,0,1742,
        1740,1,0,0,0,1742,1743,1,0,0,0,1743,169,1,0,0,0,1744,1745,3,458,
        229,0,1745,1746,5,406,0,0,1746,1751,3,146,73,0,1747,1749,5,116,0,
        0,1748,1747,1,0,0,0,1748,1749,1,0,0,0,1749,1750,1,0,0,0,1750,1752,
        5,381,0,0,1751,1748,1,0,0,0,1751,1752,1,0,0,0,1752,171,1,0,0,0,1753,
        1758,3,170,85,0,1754,1755,5,401,0,0,1755,1757,3,170,85,0,1756,1754,
        1,0,0,0,1757,1760,1,0,0,0,1758,1756,1,0,0,0,1758,1759,1,0,0,0,1759,
        173,1,0,0,0,1760,1758,1,0,0,0,1761,1762,5,30,0,0,1762,1763,5,233,
        0,0,1763,1767,5,234,0,0,1764,1765,5,79,0,0,1765,1766,5,116,0,0,1766,
        1768,5,57,0,0,1767,1764,1,0,0,0,1767,1768,1,0,0,0,1768,1769,1,0,
        0,0,1769,1771,3,458,229,0,1770,1772,3,208,104,0,1771,1770,1,0,0,
        0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,1774,5,10,0,0,1774,1775,
        3,172,86,0,1775,175,1,0,0,0,1776,1781,3,124,62,0,1777,1781,3,458,
        229,0,1778,1781,3,448,224,0,1779,1781,3,154,77,0,1780,1776,1,0,0,
        0,1780,1777,1,0,0,0,1780,1778,1,0,0,0,1780,1779,1,0,0,0,1781,177,
        1,0,0,0,1782,1787,3,176,88,0,1783,1784,7,15,0,0,1784,1786,3,176,
        88,0,1785,1783,1,0,0,0,1786,1789,1,0,0,0,1787,1785,1,0,0,0,1787,
        1788,1,0,0,0,1788,179,1,0,0,0,1789,1787,1,0,0,0,1790,1791,5,30,0,
        0,1791,1795,5,71,0,0,1792,1793,5,79,0,0,1793,1794,5,116,0,0,1794,
        1796,5,57,0,0,1795,1792,1,0,0,0,1795,1796,1,0,0,0,1796,1797,1,0,
        0,0,1797,1799,3,458,229,0,1798,1800,3,208,104,0,1799,1798,1,0,0,
        0,1799,1800,1,0,0,0,1800,1801,1,0,0,0,1801,1808,5,10,0,0,1802,1804,
        5,412,0,0,1803,1805,3,160,80,0,1804,1803,1,0,0,0,1804,1805,1,0,0,
        0,1805,1806,1,0,0,0,1806,1809,5,422,0,0,1807,1809,3,458,229,0,1808,
        1802,1,0,0,0,1808,1807,1,0,0,0,1809,1810,1,0,0,0,1810,1811,5,396,
        0,0,1811,1812,3,178,89,0,1812,181,1,0,0,0,1813,1814,7,16,0,0,1814,
        183,1,0,0,0,1815,1816,5,30,0,0,1816,1820,5,82,0,0,1817,1818,5,79,
        0,0,1818,1819,5,116,0,0,1819,1821,5,57,0,0,1820,1817,1,0,0,0,1820,
        1821,1,0,0,0,1821,1822,1,0,0,0,1822,1823,3,458,229,0,1823,1824,5,
        120,0,0,1824,1825,3,436,218,0,1825,1826,5,412,0,0,1826,1828,3,458,
        229,0,1827,1829,3,182,91,0,1828,1827,1,0,0,0,1828,1829,1,0,0,0,1829,
        1837,1,0,0,0,1830,1831,5,401,0,0,1831,1833,3,458,229,0,1832,1834,
        3,182,91,0,1833,1832,1,0,0,0,1833,1834,1,0,0,0,1834,1836,1,0,0,0,
        1835,1830,1,0,0,0,1836,1839,1,0,0,0,1837,1835,1,0,0,0,1837,1838,
        1,0,0,0,1838,1840,1,0,0,0,1839,1837,1,0,0,0,1840,1843,5,422,0,0,
        1841,1842,5,179,0,0,1842,1844,3,458,229,0,1843,1841,1,0,0,0,1843,
        1844,1,0,0,0,1844,1847,1,0,0,0,1845,1846,5,73,0,0,1846,1848,3,446,
        223,0,1847,1845,1,0,0,0,1847,1848,1,0,0,0,1848,185,1,0,0,0,1849,
        1864,3,76,38,0,1850,1864,3,78,39,0,1851,1864,3,80,40,0,1852,1864,
        3,82,41,0,1853,1864,3,74,37,0,1854,1864,3,84,42,0,1855,1864,3,114,
        57,0,1856,1864,3,138,69,0,1857,1864,3,158,79,0,1858,1864,3,162,81,
        0,1859,1864,3,168,84,0,1860,1864,3,174,87,0,1861,1864,3,180,90,0,
        1862,1864,3,184,92,0,1863,1849,1,0,0,0,1863,1850,1,0,0,0,1863,1851,
        1,0,0,0,1863,1852,1,0,0,0,1863,1853,1,0,0,0,1863,1854,1,0,0,0,1863,
        1855,1,0,0,0,1863,1856,1,0,0,0,1863,1857,1,0,0,0,1863,1858,1,0,0,
        0,1863,1859,1,0,0,0,1863,1860,1,0,0,0,1863,1861,1,0,0,0,1863,1862,
        1,0,0,0,1864,187,1,0,0,0,1865,1866,5,412,0,0,1866,1871,3,190,95,
        0,1867,1868,5,401,0,0,1868,1870,3,190,95,0,1869,1867,1,0,0,0,1870,
        1873,1,0,0,0,1871,1869,1,0,0,0,1871,1872,1,0,0,0,1872,1874,1,0,0,
        0,1873,1871,1,0,0,0,1874,1875,5,422,0,0,1875,189,1,0,0,0,1876,1877,
        3,458,229,0,1877,1899,3,416,208,0,1878,1879,4,95,0,1,1879,1880,5,
        39,0,0,1880,1881,3,448,224,0,1881,1882,6,95,-1,0,1882,1898,1,0,0,
        0,1883,1884,4,95,1,1,1884,1885,5,59,0,0,1885,1886,3,422,211,0,1886,
        1887,6,95,-1,0,1887,1898,1,0,0,0,1888,1889,4,95,2,1,1889,1890,5,
        76,0,0,1890,1898,6,95,-1,0,1891,1892,4,95,3,1,1892,1893,5,84,0,0,
        1893,1898,6,95,-1,0,1894,1895,4,95,4,1,1895,1896,5,90,0,0,1896,1898,
        6,95,-1,0,1897,1878,1,0,0,0,1897,1883,1,0,0,0,1897,1888,1,0,0,0,
        1897,1891,1,0,0,0,1897,1894,1,0,0,0,1898,1901,1,0,0,0,1899,1897,
        1,0,0,0,1899,1900,1,0,0,0,1900,191,1,0,0,0,1901,1899,1,0,0,0,1902,
        1904,3,194,97,0,1903,1902,1,0,0,0,1903,1904,1,0,0,0,1904,1927,1,
        0,0,0,1905,1906,4,96,5,1,1906,1907,3,198,99,0,1907,1908,6,96,-1,
        0,1908,1926,1,0,0,0,1909,1910,4,96,6,1,1910,1911,3,200,100,0,1911,
        1912,6,96,-1,0,1912,1926,1,0,0,0,1913,1914,4,96,7,1,1914,1915,3,
        202,101,0,1915,1916,6,96,-1,0,1916,1926,1,0,0,0,1917,1918,4,96,8,
        1,1918,1919,3,204,102,0,1919,1920,6,96,-1,0,1920,1926,1,0,0,0,1921,
        1922,4,96,9,1,1922,1923,3,206,103,0,1923,1924,6,96,-1,0,1924,1926,
        1,0,0,0,1925,1905,1,0,0,0,1925,1909,1,0,0,0,1925,1913,1,0,0,0,1925,
        1917,1,0,0,0,1925,1921,1,0,0,0,1926,1929,1,0,0,0,1927,1925,1,0,0,
        0,1927,1928,1,0,0,0,1928,193,1,0,0,0,1929,1927,1,0,0,0,1930,1931,
        5,133,0,0,1931,1932,5,92,0,0,1932,1933,3,418,209,0,1933,195,1,0,
        0,0,1934,1941,3,458,229,0,1935,1938,3,458,229,0,1936,1937,5,412,
        0,0,1937,1939,5,422,0,0,1938,1936,1,0,0,0,1938,1939,1,0,0,0,1939,
        1942,1,0,0,0,1940,1942,3,448,224,0,1941,1935,1,0,0,0,1941,1940,1,
        0,0,0,1942,197,1,0,0,0,1943,1944,5,156,0,0,1944,1945,5,412,0,0,1945,
        1946,3,458,229,0,1946,1950,5,412,0,0,1947,1949,3,196,98,0,1948,1947,
        1,0,0,0,1949,1952,1,0,0,0,1950,1948,1,0,0,0,1950,1951,1,0,0,0,1951,
        1953,1,0,0,0,1952,1950,1,0,0,0,1953,1954,5,422,0,0,1954,1955,5,422,
        0,0,1955,199,1,0,0,0,1956,1957,5,98,0,0,1957,1967,5,412,0,0,1958,
        1968,5,393,0,0,1959,1960,5,108,0,0,1960,1961,5,393,0,0,1961,1962,
        5,106,0,0,1962,1968,5,393,0,0,1963,1964,5,106,0,0,1964,1965,5,393,
        0,0,1965,1966,5,108,0,0,1966,1968,5,393,0,0,1967,1958,1,0,0,0,1967,
        1959,1,0,0,0,1967,1963,1,0,0,0,1968,1969,1,0,0,0,1969,1970,5,422,
        0,0,1970,201,1,0,0,0,1971,1972,5,95,0,0,1972,1973,5,412,0,0,1973,
        1974,3,458,229,0,1974,1978,5,412,0,0,1975,1977,3,196,98,0,1976,1975,
        1,0,0,0,1977,1980,1,0,0,0,1978,1976,1,0,0,0,1978,1979,1,0,0,0,1979,
        1981,1,0,0,0,1980,1978,1,0,0,0,1981,1982,5,422,0,0,1982,1983,5,422,
        0,0,1983,203,1,0,0,0,1984,1985,5,137,0,0,1985,1996,5,412,0,0,1986,
        1987,5,108,0,0,1987,1988,3,458,229,0,1988,1989,5,106,0,0,1989,1990,
        3,458,229,0,1990,1997,1,0,0,0,1991,1992,5,106,0,0,1992,1993,3,458,
        229,0,1993,1994,5,108,0,0,1994,1995,3,458,229,0,1995,1997,1,0,0,
        0,1996,1986,1,0,0,0,1996,1991,1,0,0,0,1997,1998,1,0,0,0,1998,1999,
        5,422,0,0,1999,205,1,0,0,0,2000,2001,5,154,0,0,2001,2002,5,412,0,
        0,2002,2003,3,388,194,0,2003,2004,5,422,0,0,2004,207,1,0,0,0,2005,
        2006,5,120,0,0,2006,2009,5,24,0,0,2007,2010,3,458,229,0,2008,2010,
        5,395,0,0,2009,2007,1,0,0,0,2009,2008,1,0,0,0,2010,209,1,0,0,0,2011,
        2012,5,185,0,0,2012,2013,5,395,0,0,2013,211,1,0,0,0,2014,2015,5,
        171,0,0,2015,2016,3,436,218,0,2016,213,1,0,0,0,2017,2018,5,10,0,
        0,2018,2019,3,336,168,0,2019,215,1,0,0,0,2020,2021,5,412,0,0,2021,
        2026,3,230,115,0,2022,2023,5,401,0,0,2023,2025,3,230,115,0,2024,
        2022,1,0,0,0,2025,2028,1,0,0,0,2026,2024,1,0,0,0,2026,2027,1,0,0,
        0,2027,2029,1,0,0,0,2028,2026,1,0,0,0,2029,2030,5,422,0,0,2030,2036,
        1,0,0,0,2031,2032,5,10,0,0,2032,2036,3,436,218,0,2033,2034,5,10,
        0,0,2034,2036,3,434,217,0,2035,2020,1,0,0,0,2035,2031,1,0,0,0,2035,
        2033,1,0,0,0,2036,217,1,0,0,0,2037,2064,3,228,114,0,2038,2039,4,
        109,10,1,2039,2040,3,360,180,0,2040,2041,6,109,-1,0,2041,2063,1,
        0,0,0,2042,2043,4,109,11,1,2043,2044,3,220,110,0,2044,2045,6,109,
        -1,0,2045,2063,1,0,0,0,2046,2047,4,109,12,1,2047,2048,3,222,111,
        0,2048,2049,6,109,-1,0,2049,2063,1,0,0,0,2050,2051,4,109,13,1,2051,
        2052,3,224,112,0,2052,2053,6,109,-1,0,2053,2063,1,0,0,0,2054,2055,
        4,109,14,1,2055,2056,3,226,113,0,2056,2057,6,109,-1,0,2057,2063,
        1,0,0,0,2058,2059,4,109,15,1,2059,2060,3,368,184,0,2060,2061,6,109,
        -1,0,2061,2063,1,0,0,0,2062,2038,1,0,0,0,2062,2042,1,0,0,0,2062,
        2046,1,0,0,0,2062,2050,1,0,0,0,2062,2054,1,0,0,0,2062,2058,1,0,0,
        0,2063,2066,1,0,0,0,2064,2062,1,0,0,0,2064,2065,1,0,0,0,2065,219,
        1,0,0,0,2066,2064,1,0,0,0,2067,2068,5,127,0,0,2068,2069,5,19,0,0,
        2069,2070,3,422,211,0,2070,221,1,0,0,0,2071,2072,5,133,0,0,2072,
        2073,5,92,0,0,2073,2074,3,422,211,0,2074,223,1,0,0,0,2075,2076,5,
        148,0,0,2076,2077,5,19,0,0,2077,2078,3,422,211,0,2078,225,1,0,0,
        0,2079,2080,5,178,0,0,2080,2085,3,244,122,0,2081,2082,5,401,0,0,
        2082,2084,3,244,122,0,2083,2081,1,0,0,0,2084,2087,1,0,0,0,2085,2083,
        1,0,0,0,2085,2086,1,0,0,0,2086,227,1,0,0,0,2087,2085,1,0,0,0,2088,
        2090,5,54,0,0,2089,2091,5,406,0,0,2090,2089,1,0,0,0,2090,2091,1,
        0,0,0,2091,2092,1,0,0,0,2092,2098,3,460,230,0,2093,2095,5,412,0,
        0,2094,2096,3,418,209,0,2095,2094,1,0,0,0,2095,2096,1,0,0,0,2096,
        2097,1,0,0,0,2097,2099,5,422,0,0,2098,2093,1,0,0,0,2098,2099,1,0,
        0,0,2099,229,1,0,0,0,2100,2111,3,232,116,0,2101,2102,5,29,0,0,2102,
        2103,3,458,229,0,2103,2104,5,22,0,0,2104,2105,3,422,211,0,2105,2111,
        1,0,0,0,2106,2107,5,82,0,0,2107,2111,3,236,118,0,2108,2109,5,134,
        0,0,2109,2111,3,238,119,0,2110,2100,1,0,0,0,2110,2101,1,0,0,0,2110,
        2106,1,0,0,0,2110,2108,1,0,0,0,2111,231,1,0,0,0,2112,2113,3,430,
        215,0,2113,2115,3,416,208,0,2114,2116,3,234,117,0,2115,2114,1,0,
        0,0,2115,2116,1,0,0,0,2116,2119,1,0,0,0,2117,2118,5,28,0,0,2118,
        2120,5,395,0,0,2119,2117,1,0,0,0,2119,2120,1,0,0,0,2120,2122,1,0,
        0,0,2121,2123,3,240,120,0,2122,2121,1,0,0,0,2122,2123,1,0,0,0,2123,
        2126,1,0,0,0,2124,2125,5,178,0,0,2125,2127,3,422,211,0,2126,2124,
        1,0,0,0,2126,2127,1,0,0,0,2127,2145,1,0,0,0,2128,2130,3,430,215,
        0,2129,2131,3,416,208,0,2130,2129,1,0,0,0,2130,2131,1,0,0,0,2131,
        2132,1,0,0,0,2132,2135,3,234,117,0,2133,2134,5,28,0,0,2134,2136,
        5,395,0,0,2135,2133,1,0,0,0,2135,2136,1,0,0,0,2136,2138,1,0,0,0,
        2137,2139,3,240,120,0,2138,2137,1,0,0,0,2138,2139,1,0,0,0,2139,2142,
        1,0,0,0,2140,2141,5,178,0,0,2141,2143,3,422,211,0,2142,2140,1,0,
        0,0,2142,2143,1,0,0,0,2143,2145,1,0,0,0,2144,2112,1,0,0,0,2144,2128,
        1,0,0,0,2145,233,1,0,0,0,2146,2147,7,17,0,0,2147,2148,3,422,211,
        0,2148,235,1,0,0,0,2149,2150,3,430,215,0,2150,2151,3,422,211,0,2151,
        2152,5,179,0,0,2152,2153,3,416,208,0,2153,2154,5,73,0,0,2154,2155,
        5,393,0,0,2155,237,1,0,0,0,2156,2157,3,430,215,0,2157,2158,3,334,
        167,0,2158,239,1,0,0,0,2159,2160,5,25,0,0,2160,2161,5,412,0,0,2161,
        2166,3,242,121,0,2162,2163,5,401,0,0,2163,2165,3,242,121,0,2164,
        2162,1,0,0,0,2165,2168,1,0,0,0,2166,2164,1,0,0,0,2166,2167,1,0,0,
        0,2167,2169,1,0,0,0,2168,2166,1,0,0,0,2169,2170,5,422,0,0,2170,241,
        1,0,0,0,2171,2177,3,458,229,0,2172,2174,5,412,0,0,2173,2175,3,418,
        209,0,2174,2173,1,0,0,0,2174,2175,1,0,0,0,2175,2176,1,0,0,0,2176,
        2178,5,422,0,0,2177,2172,1,0,0,0,2177,2178,1,0,0,0,2178,243,1,0,
        0,0,2179,2187,3,422,211,0,2180,2188,5,41,0,0,2181,2182,5,171,0,0,
        2182,2183,5,48,0,0,2183,2188,5,395,0,0,2184,2185,5,171,0,0,2185,
        2186,5,188,0,0,2186,2188,5,395,0,0,2187,2180,1,0,0,0,2187,2181,1,
        0,0,0,2187,2184,1,0,0,0,2187,2188,1,0,0,0,2188,245,1,0,0,0,2189,
        2191,7,18,0,0,2190,2192,5,163,0,0,2191,2190,1,0,0,0,2191,2192,1,
        0,0,0,2192,2193,1,0,0,0,2193,2194,3,432,216,0,2194,247,1,0,0,0,2195,
        2196,7,19,0,0,2196,2199,5,34,0,0,2197,2198,5,79,0,0,2198,2200,5,
        57,0,0,2199,2197,1,0,0,0,2199,2200,1,0,0,0,2200,2201,1,0,0,0,2201,
        2203,3,442,221,0,2202,2204,3,208,104,0,2203,2202,1,0,0,0,2203,2204,
        1,0,0,0,2204,2227,1,0,0,0,2205,2212,7,19,0,0,2206,2213,5,47,0,0,
        2207,2209,5,165,0,0,2208,2207,1,0,0,0,2208,2209,1,0,0,0,2209,2210,
        1,0,0,0,2210,2213,5,163,0,0,2211,2213,5,187,0,0,2212,2206,1,0,0,
        0,2212,2208,1,0,0,0,2212,2211,1,0,0,0,2213,2216,1,0,0,0,2214,2215,
        5,79,0,0,2215,2217,5,57,0,0,2216,2214,1,0,0,0,2216,2217,1,0,0,0,
        2217,2218,1,0,0,0,2218,2220,3,436,218,0,2219,2221,3,208,104,0,2220,
        2219,1,0,0,0,2220,2221,1,0,0,0,2221,2224,1,0,0,0,2222,2223,5,115,
        0,0,2223,2225,5,40,0,0,2224,2222,1,0,0,0,2224,2225,1,0,0,0,2225,
        2227,1,0,0,0,2226,2195,1,0,0,0,2226,2205,1,0,0,0,2227,249,1,0,0,
        0,2228,2229,5,57,0,0,2229,2230,5,34,0,0,2230,2242,3,442,221,0,2231,
        2238,5,57,0,0,2232,2239,5,47,0,0,2233,2235,5,165,0,0,2234,2233,1,
        0,0,0,2234,2235,1,0,0,0,2235,2236,1,0,0,0,2236,2239,5,163,0,0,2237,
        2239,5,187,0,0,2238,2232,1,0,0,0,2238,2234,1,0,0,0,2238,2237,1,0,
        0,0,2238,2239,1,0,0,0,2239,2240,1,0,0,0,2240,2242,3,436,218,0,2241,
        2228,1,0,0,0,2241,2231,1,0,0,0,2242,251,1,0,0,0,2243,2244,5,58,0,
        0,2244,2265,3,6,3,0,2245,2246,5,58,0,0,2246,2247,5,14,0,0,2247,2265,
        3,6,3,0,2248,2249,5,58,0,0,2249,2250,5,161,0,0,2250,2265,3,6,3,0,
        2251,2252,5,58,0,0,2252,2253,5,128,0,0,2253,2265,3,6,3,0,2254,2255,
        5,58,0,0,2255,2256,5,129,0,0,2256,2265,3,6,3,0,2257,2258,5,58,0,
        0,2258,2259,5,136,0,0,2259,2260,5,176,0,0,2260,2265,3,6,3,0,2261,
        2262,5,58,0,0,2262,2263,5,55,0,0,2263,2265,3,6,3,0,2264,2243,1,0,
        0,0,2264,2245,1,0,0,0,2264,2248,1,0,0,0,2264,2251,1,0,0,0,2264,2254,
        1,0,0,0,2264,2257,1,0,0,0,2264,2261,1,0,0,0,2265,253,1,0,0,0,2266,
        2268,5,270,0,0,2267,2269,3,208,104,0,2268,2267,1,0,0,0,2268,2269,
        1,0,0,0,2269,2273,1,0,0,0,2270,2271,5,196,0,0,2271,2272,5,253,0,
        0,2272,2274,5,66,0,0,2273,2270,1,0,0,0,2273,2274,1,0,0,0,2274,2275,
        1,0,0,0,2275,2276,3,270,135,0,2276,2277,5,120,0,0,2277,2278,3,268,
        134,0,2278,2279,5,69,0,0,2279,2280,3,256,128,0,2280,2295,1,0,0,0,
        2281,2283,5,270,0,0,2282,2284,3,208,104,0,2283,2282,1,0,0,0,2283,
        2284,1,0,0,0,2284,2288,1,0,0,0,2285,2286,5,232,0,0,2286,2287,5,253,
        0,0,2287,2289,5,66,0,0,2288,2285,1,0,0,0,2288,2289,1,0,0,0,2289,
        2290,1,0,0,0,2290,2291,3,260,130,0,2291,2292,5,69,0,0,2292,2293,
        3,256,128,0,2293,2295,1,0,0,0,2294,2266,1,0,0,0,2294,2281,1,0,0,
        0,2295,255,1,0,0,0,2296,2301,3,132,66,0,2297,2298,5,401,0,0,2298,
        2300,3,132,66,0,2299,2297,1,0,0,0,2300,2303,1,0,0,0,2301,2299,1,
        0,0,0,2301,2302,1,0,0,0,2302,257,1,0,0,0,2303,2301,1,0,0,0,2304,
        2309,3,274,137,0,2305,2306,5,401,0,0,2306,2308,3,274,137,0,2307,
        2305,1,0,0,0,2308,2311,1,0,0,0,2309,2307,1,0,0,0,2309,2310,1,0,0,
        0,2310,259,1,0,0,0,2311,2309,1,0,0,0,2312,2317,3,272,136,0,2313,
        2314,5,401,0,0,2314,2316,3,272,136,0,2315,2313,1,0,0,0,2316,2319,
        1,0,0,0,2317,2315,1,0,0,0,2317,2318,1,0,0,0,2318,261,1,0,0,0,2319,
        2317,1,0,0,0,2320,2322,5,196,0,0,2321,2323,3,208,104,0,2322,2321,
        1,0,0,0,2322,2323,1,0,0,0,2323,2324,1,0,0,0,2324,2325,3,270,135,
        0,2325,2326,5,120,0,0,2326,2327,3,268,134,0,2327,2335,1,0,0,0,2328,
        2329,5,401,0,0,2329,2330,3,270,135,0,2330,2331,5,120,0,0,2331,2332,
        3,268,134,0,2332,2334,1,0,0,0,2333,2328,1,0,0,0,2334,2337,1,0,0,
        0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,2338,1,0,0,0,2337,2335,
        1,0,0,0,2338,2339,5,171,0,0,2339,2340,3,276,138,0,2340,2341,3,264,
        132,0,2341,2375,1,0,0,0,2342,2344,5,196,0,0,2343,2345,3,208,104,
        0,2344,2343,1,0,0,0,2344,2345,1,0,0,0,2345,2346,1,0,0,0,2346,2347,
        3,260,130,0,2347,2348,5,171,0,0,2348,2352,3,276,138,0,2349,2350,
        5,194,0,0,2350,2351,5,232,0,0,2351,2353,5,253,0,0,2352,2349,1,0,
        0,0,2352,2353,1,0,0,0,2353,2355,1,0,0,0,2354,2356,3,266,133,0,2355,
        2354,1,0,0,0,2355,2356,1,0,0,0,2356,2375,1,0,0,0,2357,2358,5,196,
        0,0,2358,2359,5,33,0,0,2359,2368,5,268,0,0,2360,2361,5,412,0,0,2361,
        2362,3,270,135,0,2362,2363,5,120,0,0,2363,2364,3,268,134,0,2364,
        2365,5,422,0,0,2365,2369,1,0,0,0,2366,2367,5,120,0,0,2367,2369,3,
        268,134,0,2368,2360,1,0,0,0,2368,2366,1,0,0,0,2369,2370,1,0,0,0,
        2370,2371,5,171,0,0,2371,2372,3,276,138,0,2372,2373,3,264,132,0,
        2373,2375,1,0,0,0,2374,2320,1,0,0,0,2374,2342,1,0,0,0,2374,2357,
        1,0,0,0,2375,263,1,0,0,0,2376,2377,5,194,0,0,2377,2378,5,196,0,0,
        2378,2380,5,253,0,0,2379,2376,1,0,0,0,2379,2380,1,0,0,0,2380,2382,
        1,0,0,0,2381,2383,3,266,133,0,2382,2381,1,0,0,0,2382,2383,1,0,0,
        0,2383,265,1,0,0,0,2384,2385,5,194,0,0,2385,2386,5,141,0,0,2386,
        2387,5,253,0,0,2387,267,1,0,0,0,2388,2402,3,442,221,0,2389,2402,
        3,436,218,0,2390,2393,5,397,0,0,2391,2393,3,458,229,0,2392,2390,
        1,0,0,0,2392,2391,1,0,0,0,2393,2394,1,0,0,0,2394,2396,5,404,0,0,
        2395,2392,1,0,0,0,2395,2396,1,0,0,0,2396,2399,1,0,0,0,2397,2400,
        5,397,0,0,2398,2400,3,458,229,0,2399,2397,1,0,0,0,2399,2398,1,0,
        0,0,2400,2402,1,0,0,0,2401,2388,1,0,0,0,2401,2389,1,0,0,0,2401,2395,
        1,0,0,0,2402,269,1,0,0,0,2403,2408,3,304,152,0,2404,2405,5,401,0,
        0,2405,2407,3,304,152,0,2406,2404,1,0,0,0,2407,2410,1,0,0,0,2408,
        2406,1,0,0,0,2408,2409,1,0,0,0,2409,271,1,0,0,0,2410,2408,1,0,0,
        0,2411,2412,3,458,229,0,2412,273,1,0,0,0,2413,2416,5,206,0,0,2414,
        2416,3,458,229,0,2415,2413,1,0,0,0,2415,2414,1,0,0,0,2416,275,1,
        0,0,0,2417,2422,3,278,139,0,2418,2419,5,401,0,0,2419,2421,3,278,
        139,0,2420,2418,1,0,0,0,2421,2424,1,0,0,0,2422,2420,1,0,0,0,2422,
        2423,1,0,0,0,2423,277,1,0,0,0,2424,2422,1,0,0,0,2425,2428,3,274,
        137,0,2426,2428,3,272,136,0,2427,2425,1,0,0,0,2427,2426,1,0,0,0,
        2428,279,1,0,0,0,2429,2431,5,150,0,0,2430,2432,3,310,155,0,2431,
        2430,1,0,0,0,2431,2432,1,0,0,0,2432,281,1,0,0,0,2433,2435,5,86,0,
        0,2434,2436,3,310,155,0,2435,2434,1,0,0,0,2435,2436,1,0,0,0,2436,
        283,1,0,0,0,2437,2439,5,30,0,0,2438,2440,7,20,0,0,2439,2438,1,0,
        0,0,2439,2440,1,0,0,0,2440,2449,1,0,0,0,2441,2445,5,30,0,0,2442,
        2443,5,204,0,0,2443,2446,5,165,0,0,2444,2446,5,165,0,0,2445,2442,
        1,0,0,0,2445,2444,1,0,0,0,2445,2446,1,0,0,0,2446,2447,1,0,0,0,2447,
        2449,5,163,0,0,2448,2437,1,0,0,0,2448,2441,1,0,0,0,2449,285,1,0,
        0,0,2450,2452,5,51,0,0,2451,2453,7,21,0,0,2452,2451,1,0,0,0,2452,
        2453,1,0,0,0,2453,287,1,0,0,0,2454,2456,5,155,0,0,2455,2457,7,22,
        0,0,2456,2455,1,0,0,0,2456,2457,1,0,0,0,2457,289,1,0,0,0,2458,2460,
        5,239,0,0,2459,2461,5,222,0,0,2460,2459,1,0,0,0,2460,2461,1,0,0,
        0,2461,2467,1,0,0,0,2462,2467,5,240,0,0,2463,2467,5,261,0,0,2464,
        2467,5,241,0,0,2465,2467,5,242,0,0,2466,2458,1,0,0,0,2466,2462,1,
        0,0,0,2466,2463,1,0,0,0,2466,2464,1,0,0,0,2466,2465,1,0,0,0,2467,
        291,1,0,0,0,2468,2469,7,23,0,0,2469,293,1,0,0,0,2470,2471,7,24,0,
        0,2471,295,1,0,0,0,2472,2474,5,5,0,0,2473,2475,7,25,0,0,2474,2473,
        1,0,0,0,2474,2475,1,0,0,0,2475,2477,1,0,0,0,2476,2478,3,310,155,
        0,2477,2476,1,0,0,0,2477,2478,1,0,0,0,2478,2569,1,0,0,0,2479,2481,
        7,25,0,0,2480,2482,3,310,155,0,2481,2480,1,0,0,0,2481,2482,1,0,0,
        0,2482,2569,1,0,0,0,2483,2484,5,5,0,0,2484,2569,5,163,0,0,2485,2487,
        5,5,0,0,2486,2488,7,26,0,0,2487,2486,1,0,0,0,2487,2488,1,0,0,0,2488,
        2489,1,0,0,0,2489,2491,5,27,0,0,2490,2492,3,310,155,0,2491,2490,
        1,0,0,0,2491,2492,1,0,0,0,2492,2569,1,0,0,0,2493,2494,7,26,0,0,2494,
        2496,5,27,0,0,2495,2497,3,310,155,0,2496,2495,1,0,0,0,2496,2497,
        1,0,0,0,2497,2569,1,0,0,0,2498,2500,5,5,0,0,2499,2501,7,27,0,0,2500,
        2499,1,0,0,0,2500,2501,1,0,0,0,2501,2502,1,0,0,0,2502,2569,5,82,
        0,0,2503,2505,7,27,0,0,2504,2503,1,0,0,0,2504,2505,1,0,0,0,2505,
        2506,1,0,0,0,2506,2569,5,82,0,0,2507,2509,5,5,0,0,2508,2510,5,110,
        0,0,2509,2508,1,0,0,0,2509,2510,1,0,0,0,2510,2511,1,0,0,0,2511,2512,
        7,28,0,0,2512,2569,5,19,0,0,2513,2514,5,110,0,0,2514,2515,7,28,0,
        0,2515,2569,5,19,0,0,2516,2518,5,5,0,0,2517,2516,1,0,0,0,2517,2518,
        1,0,0,0,2518,2520,1,0,0,0,2519,2521,7,0,0,0,2520,2519,1,0,0,0,2520,
        2521,1,0,0,0,2521,2522,1,0,0,0,2522,2569,5,29,0,0,2523,2525,5,5,
        0,0,2524,2526,7,29,0,0,2525,2524,1,0,0,0,2525,2526,1,0,0,0,2526,
        2527,1,0,0,0,2527,2569,5,178,0,0,2528,2529,7,29,0,0,2529,2569,5,
        178,0,0,2530,2531,5,5,0,0,2531,2569,5,154,0,0,2532,2537,5,5,0,0,
        2533,2534,5,5,0,0,2534,2537,5,110,0,0,2535,2537,5,110,0,0,2536,2532,
        1,0,0,0,2536,2533,1,0,0,0,2536,2535,1,0,0,0,2537,2538,1,0,0,0,2538,
        2569,5,252,0,0,2539,2541,5,5,0,0,2540,2539,1,0,0,0,2540,2541,1,0,
        0,0,2541,2542,1,0,0,0,2542,2543,7,30,0,0,2543,2569,7,2,0,0,2544,
        2546,5,5,0,0,2545,2544,1,0,0,0,2545,2546,1,0,0,0,2546,2547,1,0,0,
        0,2547,2548,5,68,0,0,2548,2569,5,127,0,0,2549,2550,5,5,0,0,2550,
        2552,5,187,0,0,2551,2553,5,199,0,0,2552,2551,1,0,0,0,2552,2553,1,
        0,0,0,2553,2569,1,0,0,0,2554,2555,5,5,0,0,2555,2556,5,101,0,0,2556,
        2557,5,187,0,0,2557,2569,5,199,0,0,2558,2559,5,199,0,0,2559,2569,
        5,187,0,0,2560,2561,5,5,0,0,2561,2562,7,31,0,0,2562,2566,5,110,0,
        0,2563,2567,5,136,0,0,2564,2565,5,262,0,0,2565,2567,5,263,0,0,2566,
        2563,1,0,0,0,2566,2564,1,0,0,0,2567,2569,1,0,0,0,2568,2472,1,0,0,
        0,2568,2479,1,0,0,0,2568,2483,1,0,0,0,2568,2485,1,0,0,0,2568,2493,
        1,0,0,0,2568,2498,1,0,0,0,2568,2504,1,0,0,0,2568,2507,1,0,0,0,2568,
        2513,1,0,0,0,2568,2517,1,0,0,0,2568,2523,1,0,0,0,2568,2528,1,0,0,
        0,2568,2530,1,0,0,0,2568,2536,1,0,0,0,2568,2540,1,0,0,0,2568,2545,
        1,0,0,0,2568,2549,1,0,0,0,2568,2554,1,0,0,0,2568,2558,1,0,0,0,2568,
        2560,1,0,0,0,2569,297,1,0,0,0,2570,2571,5,207,0,0,2571,2631,5,231,
        0,0,2572,2573,7,32,0,0,2573,2631,5,197,0,0,2574,2575,7,32,0,0,2575,
        2631,5,202,0,0,2576,2577,5,202,0,0,2577,2631,5,232,0,0,2578,2580,
        7,32,0,0,2579,2581,5,146,0,0,2580,2579,1,0,0,0,2580,2581,1,0,0,0,
        2581,2582,1,0,0,0,2582,2631,5,200,0,0,2583,2584,7,32,0,0,2584,2631,
        5,201,0,0,2585,2587,7,32,0,0,2586,2588,5,154,0,0,2587,2586,1,0,0,
        0,2587,2588,1,0,0,0,2588,2589,1,0,0,0,2589,2631,5,203,0,0,2590,2591,
        5,155,0,0,2591,2631,5,207,0,0,2592,2631,5,208,0,0,2593,2594,5,155,
        0,0,2594,2595,5,30,0,0,2595,2631,5,197,0,0,2596,2631,5,209,0,0,2597,
        2598,5,155,0,0,2598,2599,5,30,0,0,2599,2631,5,202,0,0,2600,2631,
        5,210,0,0,2601,2602,5,155,0,0,2602,2631,5,265,0,0,2603,2604,5,155,
        0,0,2604,2606,5,30,0,0,2605,2607,5,146,0,0,2606,2605,1,0,0,0,2606,
        2607,1,0,0,0,2607,2608,1,0,0,0,2608,2631,5,200,0,0,2609,2631,5,211,
        0,0,2610,2611,5,155,0,0,2611,2612,5,30,0,0,2612,2631,5,201,0,0,2613,
        2631,5,212,0,0,2614,2615,5,155,0,0,2615,2631,5,266,0,0,2616,2617,
        5,155,0,0,2617,2619,5,30,0,0,2618,2620,5,154,0,0,2619,2618,1,0,0,
        0,2619,2620,1,0,0,0,2620,2621,1,0,0,0,2621,2631,5,203,0,0,2622,2624,
        7,33,0,0,2623,2622,1,0,0,0,2623,2624,1,0,0,0,2624,2625,1,0,0,0,2625,
        2626,5,262,0,0,2626,2627,5,263,0,0,2627,2631,5,254,0,0,2628,2629,
        5,263,0,0,2629,2631,5,254,0,0,2630,2570,1,0,0,0,2630,2572,1,0,0,
        0,2630,2574,1,0,0,0,2630,2576,1,0,0,0,2630,2578,1,0,0,0,2630,2583,
        1,0,0,0,2630,2585,1,0,0,0,2630,2590,1,0,0,0,2630,2592,1,0,0,0,2630,
        2593,1,0,0,0,2630,2596,1,0,0,0,2630,2597,1,0,0,0,2630,2600,1,0,0,
        0,2630,2601,1,0,0,0,2630,2603,1,0,0,0,2630,2609,1,0,0,0,2630,2610,
        1,0,0,0,2630,2613,1,0,0,0,2630,2614,1,0,0,0,2630,2616,1,0,0,0,2630,
        2623,1,0,0,0,2630,2628,1,0,0,0,2631,299,1,0,0,0,2632,2634,5,162,
        0,0,2633,2635,7,34,0,0,2634,2633,1,0,0,0,2634,2635,1,0,0,0,2635,
        2723,1,0,0,0,2636,2723,5,213,0,0,2637,2639,5,162,0,0,2638,2637,1,
        0,0,0,2638,2639,1,0,0,0,2639,2640,1,0,0,0,2640,2641,5,51,0,0,2641,
        2723,5,214,0,0,2642,2643,5,162,0,0,2643,2644,5,51,0,0,2644,2646,
        7,35,0,0,2645,2647,5,214,0,0,2646,2645,1,0,0,0,2646,2647,1,0,0,0,
        2647,2723,1,0,0,0,2648,2649,5,51,0,0,2649,2650,7,35,0,0,2650,2723,
        5,214,0,0,2651,2652,5,51,0,0,2652,2723,7,36,0,0,2653,2654,5,162,
        0,0,2654,2661,5,138,0,0,2655,2662,5,220,0,0,2656,2662,5,47,0,0,2657,
        2659,5,221,0,0,2658,2657,1,0,0,0,2658,2659,1,0,0,0,2659,2660,1,0,
        0,0,2660,2662,5,46,0,0,2661,2655,1,0,0,0,2661,2656,1,0,0,0,2661,
        2658,1,0,0,0,2661,2662,1,0,0,0,2662,2723,1,0,0,0,2663,2670,5,138,
        0,0,2664,2671,5,220,0,0,2665,2671,5,47,0,0,2666,2668,5,221,0,0,2667,
        2666,1,0,0,0,2667,2668,1,0,0,0,2668,2669,1,0,0,0,2669,2671,5,46,
        0,0,2670,2664,1,0,0,0,2670,2665,1,0,0,0,2670,2667,1,0,0,0,2671,2723,
        1,0,0,0,2672,2674,5,162,0,0,2673,2675,7,37,0,0,2674,2673,1,0,0,0,
        2674,2675,1,0,0,0,2675,2677,1,0,0,0,2676,2678,5,178,0,0,2677,2676,
        1,0,0,0,2677,2678,1,0,0,0,2678,2679,1,0,0,0,2679,2723,5,107,0,0,
        2680,2682,7,37,0,0,2681,2683,5,178,0,0,2682,2681,1,0,0,0,2682,2683,
        1,0,0,0,2683,2684,1,0,0,0,2684,2723,5,107,0,0,2685,2687,5,162,0,
        0,2686,2688,7,37,0,0,2687,2686,1,0,0,0,2687,2688,1,0,0,0,2688,2689,
        1,0,0,0,2689,2723,7,38,0,0,2690,2691,7,37,0,0,2691,2723,7,38,0,0,
        2692,2694,5,162,0,0,2693,2695,7,37,0,0,2694,2693,1,0,0,0,2694,2695,
        1,0,0,0,2695,2696,1,0,0,0,2696,2697,7,39,0,0,2697,2723,5,152,0,0,
        2698,2699,7,37,0,0,2699,2700,7,39,0,0,2700,2723,5,152,0,0,2701,2703,
        5,162,0,0,2702,2704,7,37,0,0,2703,2702,1,0,0,0,2703,2704,1,0,0,0,
        2704,2705,1,0,0,0,2705,2706,5,224,0,0,2706,2723,5,225,0,0,2707,2708,
        7,37,0,0,2708,2709,5,224,0,0,2709,2723,5,225,0,0,2710,2712,5,162,
        0,0,2711,2710,1,0,0,0,2711,2712,1,0,0,0,2712,2713,1,0,0,0,2713,2714,
        7,40,0,0,2714,2723,5,142,0,0,2715,2716,5,162,0,0,2716,2718,5,64,
        0,0,2717,2719,7,41,0,0,2718,2717,1,0,0,0,2718,2719,1,0,0,0,2719,
        2723,1,0,0,0,2720,2721,5,64,0,0,2721,2723,7,41,0,0,2722,2632,1,0,
        0,0,2722,2636,1,0,0,0,2722,2638,1,0,0,0,2722,2642,1,0,0,0,2722,2648,
        1,0,0,0,2722,2651,1,0,0,0,2722,2653,1,0,0,0,2722,2663,1,0,0,0,2722,
        2672,1,0,0,0,2722,2680,1,0,0,0,2722,2685,1,0,0,0,2722,2690,1,0,0,
        0,2722,2692,1,0,0,0,2722,2698,1,0,0,0,2722,2701,1,0,0,0,2722,2707,
        1,0,0,0,2722,2711,1,0,0,0,2722,2715,1,0,0,0,2722,2720,1,0,0,0,2723,
        301,1,0,0,0,2724,2725,5,233,0,0,2725,2727,5,234,0,0,2726,2728,7,
        42,0,0,2727,2726,1,0,0,0,2727,2728,1,0,0,0,2728,2744,1,0,0,0,2729,
        2731,7,32,0,0,2730,2729,1,0,0,0,2730,2731,1,0,0,0,2731,2732,1,0,
        0,0,2732,2733,5,233,0,0,2733,2744,5,234,0,0,2734,2735,5,155,0,0,
        2735,2736,5,233,0,0,2736,2738,5,236,0,0,2737,2739,5,237,0,0,2738,
        2737,1,0,0,0,2738,2739,1,0,0,0,2739,2744,1,0,0,0,2740,2741,5,183,
        0,0,2741,2742,5,233,0,0,2742,2744,5,234,0,0,2743,2724,1,0,0,0,2743,
        2730,1,0,0,0,2743,2734,1,0,0,0,2743,2740,1,0,0,0,2744,303,1,0,0,
        0,2745,2771,3,280,140,0,2746,2771,3,282,141,0,2747,2771,3,284,142,
        0,2748,2771,3,286,143,0,2749,2771,5,177,0,0,2750,2751,5,93,0,0,2751,
        2771,5,136,0,0,2752,2771,5,121,0,0,2753,2771,3,288,144,0,2754,2771,
        3,290,145,0,2755,2771,3,292,146,0,2756,2771,3,294,147,0,2757,2771,
        3,296,148,0,2758,2771,5,4,0,0,2759,2771,5,254,0,0,2760,2771,5,121,
        0,0,2761,2771,5,264,0,0,2762,2771,3,298,149,0,2763,2771,3,300,150,
        0,2764,2771,3,302,151,0,2765,2766,5,163,0,0,2766,2771,5,54,0,0,2767,
        2768,5,232,0,0,2768,2771,5,253,0,0,2769,2771,5,238,0,0,2770,2745,
        1,0,0,0,2770,2746,1,0,0,0,2770,2747,1,0,0,0,2770,2748,1,0,0,0,2770,
        2749,1,0,0,0,2770,2750,1,0,0,0,2770,2752,1,0,0,0,2770,2753,1,0,0,
        0,2770,2754,1,0,0,0,2770,2755,1,0,0,0,2770,2756,1,0,0,0,2770,2757,
        1,0,0,0,2770,2758,1,0,0,0,2770,2759,1,0,0,0,2770,2760,1,0,0,0,2770,
        2761,1,0,0,0,2770,2762,1,0,0,0,2770,2763,1,0,0,0,2770,2764,1,0,0,
        0,2770,2765,1,0,0,0,2770,2767,1,0,0,0,2770,2769,1,0,0,0,2771,305,
        1,0,0,0,2772,2773,5,86,0,0,2773,2775,5,88,0,0,2774,2776,5,163,0,
        0,2775,2774,1,0,0,0,2775,2776,1,0,0,0,2776,2780,1,0,0,0,2777,2781,
        3,436,218,0,2778,2779,5,71,0,0,2779,2781,3,434,217,0,2780,2777,1,
        0,0,0,2780,2778,1,0,0,0,2781,2783,1,0,0,0,2782,2784,3,308,154,0,
        2783,2782,1,0,0,0,2783,2784,1,0,0,0,2784,2786,1,0,0,0,2785,2787,
        3,368,184,0,2786,2785,1,0,0,0,2786,2787,1,0,0,0,2787,2788,1,0,0,
        0,2788,2789,3,314,157,0,2789,307,1,0,0,0,2790,2799,3,310,155,0,2791,
        2792,5,412,0,0,2792,2795,5,397,0,0,2793,2794,5,269,0,0,2794,2796,
        3,310,155,0,2795,2793,1,0,0,0,2795,2796,1,0,0,0,2796,2797,1,0,0,
        0,2797,2799,5,422,0,0,2798,2790,1,0,0,0,2798,2791,1,0,0,0,2799,309,
        1,0,0,0,2800,2801,5,412,0,0,2801,2806,3,430,215,0,2802,2803,5,401,
        0,0,2803,2805,3,430,215,0,2804,2802,1,0,0,0,2805,2808,1,0,0,0,2806,
        2804,1,0,0,0,2806,2807,1,0,0,0,2807,2809,1,0,0,0,2808,2806,1,0,0,
        0,2809,2810,5,422,0,0,2810,311,1,0,0,0,2811,2812,7,43,0,0,2812,313,
        1,0,0,0,2813,2814,5,67,0,0,2814,2816,3,312,156,0,2815,2817,3,458,
        229,0,2816,2815,1,0,0,0,2817,2818,1,0,0,0,2818,2816,1,0,0,0,2818,
        2819,1,0,0,0,2819,2831,1,0,0,0,2820,2822,5,67,0,0,2821,2820,1,0,
        0,0,2821,2822,1,0,0,0,2822,2823,1,0,0,0,2823,2831,3,326,163,0,2824,
        2826,3,336,168,0,2825,2827,5,423,0,0,2826,2825,1,0,0,0,2826,2827,
        1,0,0,0,2827,2828,1,0,0,0,2828,2829,5,0,0,1,2829,2831,1,0,0,0,2830,
        2813,1,0,0,0,2830,2821,1,0,0,0,2830,2824,1,0,0,0,2831,315,1,0,0,
        0,2832,2837,3,448,224,0,2833,2834,5,401,0,0,2834,2836,3,448,224,
        0,2835,2833,1,0,0,0,2836,2839,1,0,0,0,2837,2835,1,0,0,0,2837,2838,
        1,0,0,0,2838,317,1,0,0,0,2839,2837,1,0,0,0,2840,2849,3,448,224,0,
        2841,2842,5,412,0,0,2842,2843,3,446,223,0,2843,2844,5,401,0,0,2844,
        2845,3,446,223,0,2845,2846,5,422,0,0,2846,2849,1,0,0,0,2847,2849,
        3,124,62,0,2848,2840,1,0,0,0,2848,2841,1,0,0,0,2848,2847,1,0,0,0,
        2849,319,1,0,0,0,2850,2853,3,318,159,0,2851,2853,3,322,161,0,2852,
        2850,1,0,0,0,2852,2851,1,0,0,0,2853,321,1,0,0,0,2854,2863,5,410,
        0,0,2855,2860,3,320,160,0,2856,2857,5,401,0,0,2857,2859,3,320,160,
        0,2858,2856,1,0,0,0,2859,2862,1,0,0,0,2860,2858,1,0,0,0,2860,2861,
        1,0,0,0,2861,2864,1,0,0,0,2862,2860,1,0,0,0,2863,2855,1,0,0,0,2863,
        2864,1,0,0,0,2864,2865,1,0,0,0,2865,2866,5,421,0,0,2866,323,1,0,
        0,0,2867,2868,5,412,0,0,2868,2873,3,320,160,0,2869,2870,5,401,0,
        0,2870,2872,3,320,160,0,2871,2869,1,0,0,0,2872,2875,1,0,0,0,2873,
        2871,1,0,0,0,2873,2874,1,0,0,0,2874,2876,1,0,0,0,2875,2873,1,0,0,
        0,2876,2877,5,422,0,0,2877,325,1,0,0,0,2878,2879,5,186,0,0,2879,
        2886,3,324,162,0,2880,2882,5,401,0,0,2881,2880,1,0,0,0,2881,2882,
        1,0,0,0,2882,2883,1,0,0,0,2883,2885,3,324,162,0,2884,2881,1,0,0,
        0,2885,2888,1,0,0,0,2886,2884,1,0,0,0,2886,2887,1,0,0,0,2887,327,
        1,0,0,0,2888,2886,1,0,0,0,2889,2890,5,93,0,0,2890,2892,5,113,0,0,
        2891,2893,3,208,104,0,2892,2891,1,0,0,0,2892,2893,1,0,0,0,2893,2894,
        1,0,0,0,2894,2896,3,354,177,0,2895,2897,7,44,0,0,2896,2895,1,0,0,
        0,2896,2897,1,0,0,0,2897,329,1,0,0,0,2898,2899,5,121,0,0,2899,2900,
        5,163,0,0,2900,2902,3,436,218,0,2901,2903,3,208,104,0,2902,2901,
        1,0,0,0,2902,2903,1,0,0,0,2903,2905,1,0,0,0,2904,2906,3,64,32,0,
        2905,2904,1,0,0,0,2905,2906,1,0,0,0,2906,2908,1,0,0,0,2907,2909,
        5,62,0,0,2908,2907,1,0,0,0,2908,2909,1,0,0,0,2909,2911,1,0,0,0,2910,
        2912,5,38,0,0,2911,2910,1,0,0,0,2911,2912,1,0,0,0,2912,331,1,0,0,
        0,2913,2914,5,140,0,0,2914,2915,5,163,0,0,2915,2916,3,436,218,0,
        2916,2917,5,171,0,0,2917,2925,3,436,218,0,2918,2919,5,401,0,0,2919,
        2920,3,436,218,0,2920,2921,5,171,0,0,2921,2922,3,436,218,0,2922,
        2924,1,0,0,0,2923,2918,1,0,0,0,2924,2927,1,0,0,0,2925,2923,1,0,0,
        0,2925,2926,1,0,0,0,2926,2929,1,0,0,0,2927,2925,1,0,0,0,2928,2930,
        3,208,104,0,2929,2928,1,0,0,0,2929,2930,1,0,0,0,2930,333,1,0,0,0,
        2931,2933,5,412,0,0,2932,2934,3,342,171,0,2933,2932,1,0,0,0,2933,
        2934,1,0,0,0,2934,2935,1,0,0,0,2935,2936,5,150,0,0,2936,2938,3,418,
        209,0,2937,2939,3,356,178,0,2938,2937,1,0,0,0,2938,2939,1,0,0,0,
        2939,2941,1,0,0,0,2940,2942,3,362,181,0,2941,2940,1,0,0,0,2941,2942,
        1,0,0,0,2942,2943,1,0,0,0,2943,2944,5,422,0,0,2944,335,1,0,0,0,2945,
        2951,3,338,169,0,2946,2947,5,181,0,0,2947,2948,5,4,0,0,2948,2950,
        3,338,169,0,2949,2946,1,0,0,0,2950,2953,1,0,0,0,2951,2949,1,0,0,
        0,2951,2952,1,0,0,0,2952,337,1,0,0,0,2953,2951,1,0,0,0,2954,2960,
        3,340,170,0,2955,2956,5,412,0,0,2956,2957,3,336,168,0,2957,2958,
        5,422,0,0,2958,2960,1,0,0,0,2959,2954,1,0,0,0,2959,2955,1,0,0,0,
        2960,339,1,0,0,0,2961,2963,3,342,171,0,2962,2961,1,0,0,0,2962,2963,
        1,0,0,0,2963,2964,1,0,0,0,2964,2966,5,150,0,0,2965,2967,5,49,0,0,
        2966,2965,1,0,0,0,2966,2967,1,0,0,0,2967,2969,1,0,0,0,2968,2970,
        3,344,172,0,2969,2968,1,0,0,0,2969,2970,1,0,0,0,2970,2971,1,0,0,
        0,2971,2973,3,418,209,0,2972,2974,3,346,173,0,2973,2972,1,0,0,0,
        2973,2974,1,0,0,0,2974,2976,1,0,0,0,2975,2977,3,348,174,0,2976,2975,
        1,0,0,0,2976,2977,1,0,0,0,2977,2979,1,0,0,0,2978,2980,3,350,175,
        0,2979,2978,1,0,0,0,2979,2980,1,0,0,0,2980,2982,1,0,0,0,2981,2983,
        3,352,176,0,2982,2981,1,0,0,0,2982,2983,1,0,0,0,2983,2985,1,0,0,
        0,2984,2986,3,354,177,0,2985,2984,1,0,0,0,2985,2986,1,0,0,0,2986,
        2988,1,0,0,0,2987,2989,3,356,178,0,2988,2987,1,0,0,0,2988,2989,1,
        0,0,0,2989,2992,1,0,0,0,2990,2991,5,194,0,0,2991,2993,7,45,0,0,2992,
        2990,1,0,0,0,2992,2993,1,0,0,0,2993,2996,1,0,0,0,2994,2995,5,194,
        0,0,2995,2997,5,173,0,0,2996,2994,1,0,0,0,2996,2997,1,0,0,0,2997,
        2999,1,0,0,0,2998,3000,3,358,179,0,2999,2998,1,0,0,0,2999,3000,1,
        0,0,0,3000,3002,1,0,0,0,3001,3003,3,360,180,0,3002,3001,1,0,0,0,
        3002,3003,1,0,0,0,3003,3005,1,0,0,0,3004,3006,3,364,182,0,3005,3004,
        1,0,0,0,3005,3006,1,0,0,0,3006,3008,1,0,0,0,3007,3009,3,366,183,
        0,3008,3007,1,0,0,0,3008,3009,1,0,0,0,3009,3011,1,0,0,0,3010,3012,
        3,368,184,0,3011,3010,1,0,0,0,3011,3012,1,0,0,0,3012,341,1,0,0,0,
        3013,3014,5,194,0,0,3014,3015,3,418,209,0,3015,343,1,0,0,0,3016,
        3017,5,172,0,0,3017,3020,5,393,0,0,3018,3019,5,194,0,0,3019,3021,
        5,168,0,0,3020,3018,1,0,0,0,3020,3021,1,0,0,0,3021,345,1,0,0,0,3022,
        3023,5,69,0,0,3023,3024,3,370,185,0,3024,347,1,0,0,0,3025,3027,7,
        46,0,0,3026,3025,1,0,0,0,3026,3027,1,0,0,0,3027,3028,1,0,0,0,3028,
        3029,5,9,0,0,3029,3030,5,91,0,0,3030,3031,3,418,209,0,3031,349,1,
        0,0,0,3032,3033,5,193,0,0,3033,3034,3,458,229,0,3034,3035,5,10,0,
        0,3035,3036,5,412,0,0,3036,3037,3,392,196,0,3037,3038,5,422,0,0,
        3038,351,1,0,0,0,3039,3040,5,132,0,0,3040,3041,3,422,211,0,3041,
        353,1,0,0,0,3042,3043,5,192,0,0,3043,3044,3,422,211,0,3044,355,1,
        0,0,0,3045,3046,5,74,0,0,3046,3053,5,19,0,0,3047,3048,7,45,0,0,3048,
        3049,5,412,0,0,3049,3050,3,418,209,0,3050,3051,5,422,0,0,3051,3054,
        1,0,0,0,3052,3054,3,418,209,0,3053,3047,1,0,0,0,3053,3052,1,0,0,
        0,3054,357,1,0,0,0,3055,3056,5,75,0,0,3056,3057,3,422,211,0,3057,
        359,1,0,0,0,3058,3059,5,123,0,0,3059,3060,5,19,0,0,3060,3061,3,382,
        191,0,3061,361,1,0,0,0,3062,3063,5,123,0,0,3063,3064,5,19,0,0,3064,
        3065,3,418,209,0,3065,363,1,0,0,0,3066,3067,5,100,0,0,3067,3068,
        3,380,190,0,3068,3069,5,19,0,0,3069,3070,3,418,209,0,3070,365,1,
        0,0,0,3071,3072,5,100,0,0,3072,3075,3,380,190,0,3073,3074,5,194,
        0,0,3074,3076,5,168,0,0,3075,3073,1,0,0,0,3075,3076,1,0,0,0,3076,
        367,1,0,0,0,3077,3078,5,154,0,0,3078,3079,3,388,194,0,3079,369,1,
        0,0,0,3080,3081,6,185,-1,0,3081,3083,3,432,216,0,3082,3084,5,62,
        0,0,3083,3082,1,0,0,0,3083,3084,1,0,0,0,3084,3086,1,0,0,0,3085,3087,
        3,378,189,0,3086,3085,1,0,0,0,3086,3087,1,0,0,0,3087,3093,1,0,0,
        0,3088,3089,5,412,0,0,3089,3090,3,370,185,0,3090,3091,5,422,0,0,
        3091,3093,1,0,0,0,3092,3080,1,0,0,0,3092,3088,1,0,0,0,3093,3111,
        1,0,0,0,3094,3095,10,3,0,0,3095,3096,3,374,187,0,3096,3097,3,370,
        185,4,3097,3110,1,0,0,0,3098,3100,10,4,0,0,3099,3101,7,47,0,0,3100,
        3099,1,0,0,0,3100,3101,1,0,0,0,3101,3103,1,0,0,0,3102,3104,3,372,
        186,0,3103,3102,1,0,0,0,3103,3104,1,0,0,0,3104,3105,1,0,0,0,3105,
        3106,5,91,0,0,3106,3107,3,370,185,0,3107,3108,3,376,188,0,3108,3110,
        1,0,0,0,3109,3094,1,0,0,0,3109,3098,1,0,0,0,3110,3113,1,0,0,0,3111,
        3109,1,0,0,0,3111,3112,1,0,0,0,3112,371,1,0,0,0,3113,3111,1,0,0,
        0,3114,3116,7,48,0,0,3115,3114,1,0,0,0,3115,3116,1,0,0,0,3116,3117,
        1,0,0,0,3117,3124,5,85,0,0,3118,3120,5,85,0,0,3119,3121,7,48,0,0,
        3120,3119,1,0,0,0,3120,3121,1,0,0,0,3121,3124,1,0,0,0,3122,3124,
        7,48,0,0,3123,3115,1,0,0,0,3123,3118,1,0,0,0,3123,3122,1,0,0,0,3124,
        3158,1,0,0,0,3125,3127,7,49,0,0,3126,3125,1,0,0,0,3126,3127,1,0,
        0,0,3127,3128,1,0,0,0,3128,3130,7,50,0,0,3129,3131,5,124,0,0,3130,
        3129,1,0,0,0,3130,3131,1,0,0,0,3131,3140,1,0,0,0,3132,3134,7,50,
        0,0,3133,3135,5,124,0,0,3134,3133,1,0,0,0,3134,3135,1,0,0,0,3135,
        3137,1,0,0,0,3136,3138,7,49,0,0,3137,3136,1,0,0,0,3137,3138,1,0,
        0,0,3138,3140,1,0,0,0,3139,3126,1,0,0,0,3139,3132,1,0,0,0,3140,3158,
        1,0,0,0,3141,3143,7,51,0,0,3142,3141,1,0,0,0,3142,3143,1,0,0,0,3143,
        3144,1,0,0,0,3144,3146,5,70,0,0,3145,3147,5,124,0,0,3146,3145,1,
        0,0,0,3146,3147,1,0,0,0,3147,3156,1,0,0,0,3148,3150,5,70,0,0,3149,
        3151,5,124,0,0,3150,3149,1,0,0,0,3150,3151,1,0,0,0,3151,3153,1,0,
        0,0,3152,3154,7,51,0,0,3153,3152,1,0,0,0,3153,3154,1,0,0,0,3154,
        3156,1,0,0,0,3155,3142,1,0,0,0,3155,3148,1,0,0,0,3156,3158,1,0,0,
        0,3157,3123,1,0,0,0,3157,3139,1,0,0,0,3157,3155,1,0,0,0,3158,373,
        1,0,0,0,3159,3161,7,47,0,0,3160,3159,1,0,0,0,3160,3161,1,0,0,0,3161,
        3162,1,0,0,0,3162,3163,5,31,0,0,3163,3166,5,91,0,0,3164,3166,5,401,
        0,0,3165,3160,1,0,0,0,3165,3164,1,0,0,0,3166,375,1,0,0,0,3167,3168,
        5,120,0,0,3168,3177,3,418,209,0,3169,3170,5,184,0,0,3170,3171,5,
        412,0,0,3171,3172,3,418,209,0,3172,3173,5,422,0,0,3173,3177,1,0,
        0,0,3174,3175,5,184,0,0,3175,3177,3,418,209,0,3176,3167,1,0,0,0,
        3176,3169,1,0,0,0,3176,3174,1,0,0,0,3177,377,1,0,0,0,3178,3179,5,
        148,0,0,3179,3182,3,386,193,0,3180,3181,5,119,0,0,3181,3183,3,386,
        193,0,3182,3180,1,0,0,0,3182,3183,1,0,0,0,3183,379,1,0,0,0,3184,
        3187,3,422,211,0,3185,3186,7,52,0,0,3186,3188,3,422,211,0,3187,3185,
        1,0,0,0,3187,3188,1,0,0,0,3188,381,1,0,0,0,3189,3194,3,384,192,0,
        3190,3191,5,401,0,0,3191,3193,3,384,192,0,3192,3190,1,0,0,0,3193,
        3196,1,0,0,0,3194,3192,1,0,0,0,3194,3195,1,0,0,0,3195,383,1,0,0,
        0,3196,3194,1,0,0,0,3197,3199,3,422,211,0,3198,3200,7,16,0,0,3199,
        3198,1,0,0,0,3199,3200,1,0,0,0,3200,3203,1,0,0,0,3201,3202,5,118,
        0,0,3202,3204,7,53,0,0,3203,3201,1,0,0,0,3203,3204,1,0,0,0,3204,
        3207,1,0,0,0,3205,3206,5,26,0,0,3206,3208,5,395,0,0,3207,3205,1,
        0,0,0,3207,3208,1,0,0,0,3208,385,1,0,0,0,3209,3212,3,446,223,0,3210,
        3211,5,424,0,0,3211,3213,3,446,223,0,3212,3210,1,0,0,0,3212,3213,
        1,0,0,0,3213,387,1,0,0,0,3214,3219,3,390,195,0,3215,3216,5,401,0,
        0,3216,3218,3,390,195,0,3217,3215,1,0,0,0,3218,3221,1,0,0,0,3219,
        3217,1,0,0,0,3219,3220,1,0,0,0,3220,389,1,0,0,0,3221,3219,1,0,0,
        0,3222,3223,3,458,229,0,3223,3224,5,406,0,0,3224,3225,3,448,224,
        0,3225,391,1,0,0,0,3226,3228,3,394,197,0,3227,3226,1,0,0,0,3227,
        3228,1,0,0,0,3228,3230,1,0,0,0,3229,3231,3,396,198,0,3230,3229,1,
        0,0,0,3230,3231,1,0,0,0,3231,3233,1,0,0,0,3232,3234,3,398,199,0,
        3233,3232,1,0,0,0,3233,3234,1,0,0,0,3234,393,1,0,0,0,3235,3236,5,
        127,0,0,3236,3237,5,19,0,0,3237,3238,3,418,209,0,3238,395,1,0,0,
        0,3239,3240,5,123,0,0,3240,3241,5,19,0,0,3241,3242,3,382,191,0,3242,
        397,1,0,0,0,3243,3244,7,54,0,0,3244,3245,3,400,200,0,3245,399,1,
        0,0,0,3246,3253,3,402,201,0,3247,3248,5,17,0,0,3248,3249,3,402,201,
        0,3249,3250,5,6,0,0,3250,3251,3,402,201,0,3251,3253,1,0,0,0,3252,
        3246,1,0,0,0,3252,3247,1,0,0,0,3253,401,1,0,0,0,3254,3255,5,33,0,
        0,3255,3267,5,146,0,0,3256,3257,5,180,0,0,3257,3267,5,131,0,0,3258,
        3259,5,180,0,0,3259,3267,5,65,0,0,3260,3261,3,446,223,0,3261,3262,
        5,131,0,0,3262,3267,1,0,0,0,3263,3264,3,446,223,0,3264,3265,5,65,
        0,0,3265,3267,1,0,0,0,3266,3254,1,0,0,0,3266,3256,1,0,0,0,3266,3258,
        1,0,0,0,3266,3260,1,0,0,0,3266,3263,1,0,0,0,3267,403,1,0,0,0,3268,
        3269,5,153,0,0,3269,3270,3,388,194,0,3270,405,1,0,0,0,3271,3272,
        5,155,0,0,3272,3273,5,30,0,0,3273,3274,5,34,0,0,3274,3314,3,442,
        221,0,3275,3276,5,155,0,0,3276,3277,5,30,0,0,3277,3278,5,47,0,0,
        3278,3314,3,436,218,0,3279,3280,5,155,0,0,3280,3282,5,30,0,0,3281,
        3283,5,165,0,0,3282,3281,1,0,0,0,3282,3283,1,0,0,0,3283,3285,1,0,
        0,0,3284,3286,5,163,0,0,3285,3284,1,0,0,0,3285,3286,1,0,0,0,3286,
        3287,1,0,0,0,3287,3314,3,436,218,0,3288,3289,5,155,0,0,3289,3314,
        5,35,0,0,3290,3291,5,155,0,0,3291,3294,5,46,0,0,3292,3293,5,69,0,
        0,3293,3295,3,442,221,0,3294,3292,1,0,0,0,3294,3295,1,0,0,0,3295,
        3314,1,0,0,0,3296,3298,5,155,0,0,3297,3299,5,165,0,0,3298,3297,1,
        0,0,0,3298,3299,1,0,0,0,3299,3300,1,0,0,0,3300,3303,5,164,0,0,3301,
        3302,7,55,0,0,3302,3304,3,442,221,0,3303,3301,1,0,0,0,3303,3304,
        1,0,0,0,3304,3308,1,0,0,0,3305,3306,5,99,0,0,3306,3309,5,395,0,0,
        3307,3309,3,354,177,0,3308,3305,1,0,0,0,3308,3307,1,0,0,0,3308,3309,
        1,0,0,0,3309,3311,1,0,0,0,3310,3312,3,366,183,0,3311,3310,1,0,0,
        0,3311,3312,1,0,0,0,3312,3314,1,0,0,0,3313,3271,1,0,0,0,3313,3275,
        1,0,0,0,3313,3279,1,0,0,0,3313,3288,1,0,0,0,3313,3290,1,0,0,0,3313,
        3296,1,0,0,0,3314,407,1,0,0,0,3315,3316,5,162,0,0,3316,3317,5,64,
        0,0,3317,3318,5,50,0,0,3318,3350,3,436,218,0,3319,3320,5,162,0,0,
        3320,3321,5,64,0,0,3321,3350,5,103,0,0,3322,3323,5,162,0,0,3323,
        3324,5,138,0,0,3324,3350,5,46,0,0,3325,3326,5,162,0,0,3326,3327,
        5,138,0,0,3327,3328,5,47,0,0,3328,3350,3,436,218,0,3329,3330,5,162,
        0,0,3330,3338,7,37,0,0,3331,3332,5,50,0,0,3332,3339,5,152,0,0,3333,
        3339,5,61,0,0,3334,3336,5,178,0,0,3335,3334,1,0,0,0,3335,3336,1,
        0,0,0,3336,3337,1,0,0,0,3337,3339,5,107,0,0,3338,3331,1,0,0,0,3338,
        3333,1,0,0,0,3338,3335,1,0,0,0,3339,3340,1,0,0,0,3340,3350,3,436,
        218,0,3341,3342,5,162,0,0,3342,3343,7,37,0,0,3343,3344,5,143,0,0,
        3344,3350,5,152,0,0,3345,3346,5,162,0,0,3346,3347,5,160,0,0,3347,
        3348,5,142,0,0,3348,3350,3,436,218,0,3349,3315,1,0,0,0,3349,3319,
        1,0,0,0,3349,3322,1,0,0,0,3349,3325,1,0,0,0,3349,3329,1,0,0,0,3349,
        3341,1,0,0,0,3349,3345,1,0,0,0,3350,409,1,0,0,0,3351,3353,5,177,
        0,0,3352,3354,5,165,0,0,3353,3352,1,0,0,0,3353,3354,1,0,0,0,3354,
        3356,1,0,0,0,3355,3357,5,163,0,0,3356,3355,1,0,0,0,3356,3357,1,0,
        0,0,3357,3360,1,0,0,0,3358,3359,5,79,0,0,3359,3361,5,57,0,0,3360,
        3358,1,0,0,0,3360,3361,1,0,0,0,3361,3362,1,0,0,0,3362,3364,3,436,
        218,0,3363,3365,3,208,104,0,3364,3363,1,0,0,0,3364,3365,1,0,0,0,
        3365,411,1,0,0,0,3366,3367,5,183,0,0,3367,3368,3,442,221,0,3368,
        413,1,0,0,0,3369,3370,5,189,0,0,3370,3372,3,436,218,0,3371,3373,
        5,56,0,0,3372,3371,1,0,0,0,3372,3373,1,0,0,0,3373,3376,1,0,0,0,3374,
        3375,5,100,0,0,3375,3377,5,393,0,0,3376,3374,1,0,0,0,3376,3377,1,
        0,0,0,3377,415,1,0,0,0,3378,3426,3,458,229,0,3379,3380,3,458,229,
        0,3380,3381,5,412,0,0,3381,3382,3,458,229,0,3382,3389,3,416,208,
        0,3383,3384,5,401,0,0,3384,3385,3,458,229,0,3385,3386,3,416,208,
        0,3386,3388,1,0,0,0,3387,3383,1,0,0,0,3388,3391,1,0,0,0,3389,3387,
        1,0,0,0,3389,3390,1,0,0,0,3390,3392,1,0,0,0,3391,3389,1,0,0,0,3392,
        3393,5,422,0,0,3393,3426,1,0,0,0,3394,3395,3,458,229,0,3395,3396,
        5,412,0,0,3396,3401,3,462,231,0,3397,3398,5,401,0,0,3398,3400,3,
        462,231,0,3399,3397,1,0,0,0,3400,3403,1,0,0,0,3401,3399,1,0,0,0,
        3401,3402,1,0,0,0,3402,3404,1,0,0,0,3403,3401,1,0,0,0,3404,3405,
        5,422,0,0,3405,3426,1,0,0,0,3406,3407,3,458,229,0,3407,3408,5,412,
        0,0,3408,3413,3,416,208,0,3409,3410,5,401,0,0,3410,3412,3,416,208,
        0,3411,3409,1,0,0,0,3412,3415,1,0,0,0,3413,3411,1,0,0,0,3413,3414,
        1,0,0,0,3414,3416,1,0,0,0,3415,3413,1,0,0,0,3416,3417,5,422,0,0,
        3417,3426,1,0,0,0,3418,3419,3,458,229,0,3419,3421,5,412,0,0,3420,
        3422,3,418,209,0,3421,3420,1,0,0,0,3421,3422,1,0,0,0,3422,3423,1,
        0,0,0,3423,3424,5,422,0,0,3424,3426,1,0,0,0,3425,3378,1,0,0,0,3425,
        3379,1,0,0,0,3425,3394,1,0,0,0,3425,3406,1,0,0,0,3425,3418,1,0,0,
        0,3426,417,1,0,0,0,3427,3432,3,420,210,0,3428,3429,5,401,0,0,3429,
        3431,3,420,210,0,3430,3428,1,0,0,0,3431,3434,1,0,0,0,3432,3430,1,
        0,0,0,3432,3433,1,0,0,0,3433,419,1,0,0,0,3434,3432,1,0,0,0,3435,
        3436,3,436,218,0,3436,3437,5,404,0,0,3437,3439,1,0,0,0,3438,3435,
        1,0,0,0,3438,3439,1,0,0,0,3439,3440,1,0,0,0,3440,3447,5,397,0,0,
        3441,3442,5,412,0,0,3442,3443,3,336,168,0,3443,3444,5,422,0,0,3444,
        3447,1,0,0,0,3445,3447,3,422,211,0,3446,3438,1,0,0,0,3446,3441,1,
        0,0,0,3446,3445,1,0,0,0,3447,421,1,0,0,0,3448,3449,6,211,-1,0,3449,
        3451,5,20,0,0,3450,3452,3,422,211,0,3451,3450,1,0,0,0,3451,3452,
        1,0,0,0,3452,3458,1,0,0,0,3453,3454,5,191,0,0,3454,3455,3,422,211,
        0,3455,3456,5,167,0,0,3456,3457,3,422,211,0,3457,3459,1,0,0,0,3458,
        3453,1,0,0,0,3459,3460,1,0,0,0,3460,3458,1,0,0,0,3460,3461,1,0,0,
        0,3461,3464,1,0,0,0,3462,3463,5,52,0,0,3463,3465,3,422,211,0,3464,
        3462,1,0,0,0,3464,3465,1,0,0,0,3465,3466,1,0,0,0,3466,3467,5,53,
        0,0,3467,3578,1,0,0,0,3468,3469,5,21,0,0,3469,3470,5,412,0,0,3470,
        3471,3,422,211,0,3471,3472,5,10,0,0,3472,3473,3,416,208,0,3473,3474,
        5,422,0,0,3474,3578,1,0,0,0,3475,3476,5,36,0,0,3476,3578,5,395,0,
        0,3477,3478,5,60,0,0,3478,3479,5,412,0,0,3479,3480,3,450,225,0,3480,
        3481,5,69,0,0,3481,3482,3,422,211,0,3482,3483,5,422,0,0,3483,3578,
        1,0,0,0,3484,3485,5,87,0,0,3485,3486,3,422,211,0,3486,3487,3,450,
        225,0,3487,3578,1,0,0,0,3488,3489,5,159,0,0,3489,3490,5,412,0,0,
        3490,3491,3,422,211,0,3491,3492,5,69,0,0,3492,3495,3,422,211,0,3493,
        3494,5,66,0,0,3494,3496,3,422,211,0,3495,3493,1,0,0,0,3495,3496,
        1,0,0,0,3496,3497,1,0,0,0,3497,3498,5,422,0,0,3498,3578,1,0,0,0,
        3499,3500,5,170,0,0,3500,3578,5,395,0,0,3501,3502,5,175,0,0,3502,
        3503,5,412,0,0,3503,3504,7,56,0,0,3504,3505,5,395,0,0,3505,3506,
        5,69,0,0,3506,3507,3,422,211,0,3507,3508,5,422,0,0,3508,3578,1,0,
        0,0,3509,3510,3,458,229,0,3510,3512,5,412,0,0,3511,3513,3,418,209,
        0,3512,3511,1,0,0,0,3512,3513,1,0,0,0,3513,3514,1,0,0,0,3514,3515,
        5,422,0,0,3515,3516,1,0,0,0,3516,3517,5,126,0,0,3517,3518,5,412,
        0,0,3518,3519,3,392,196,0,3519,3520,5,422,0,0,3520,3578,1,0,0,0,
        3521,3522,3,458,229,0,3522,3524,5,412,0,0,3523,3525,3,418,209,0,
        3524,3523,1,0,0,0,3524,3525,1,0,0,0,3525,3526,1,0,0,0,3526,3527,
        5,422,0,0,3527,3528,1,0,0,0,3528,3529,5,126,0,0,3529,3530,3,458,
        229,0,3530,3578,1,0,0,0,3531,3537,3,458,229,0,3532,3534,5,412,0,
        0,3533,3535,3,418,209,0,3534,3533,1,0,0,0,3534,3535,1,0,0,0,3535,
        3536,1,0,0,0,3536,3538,5,422,0,0,3537,3532,1,0,0,0,3537,3538,1,0,
        0,0,3538,3539,1,0,0,0,3539,3541,5,412,0,0,3540,3542,5,49,0,0,3541,
        3540,1,0,0,0,3541,3542,1,0,0,0,3542,3544,1,0,0,0,3543,3545,3,424,
        212,0,3544,3543,1,0,0,0,3544,3545,1,0,0,0,3545,3546,1,0,0,0,3546,
        3547,5,422,0,0,3547,3578,1,0,0,0,3548,3578,3,448,224,0,3549,3550,
        5,403,0,0,3550,3578,3,422,211,17,3551,3552,5,116,0,0,3552,3578,3,
        422,211,12,3553,3554,3,436,218,0,3554,3555,5,404,0,0,3555,3557,1,
        0,0,0,3556,3553,1,0,0,0,3556,3557,1,0,0,0,3557,3558,1,0,0,0,3558,
        3578,5,397,0,0,3559,3560,5,412,0,0,3560,3561,3,336,168,0,3561,3562,
        5,422,0,0,3562,3578,1,0,0,0,3563,3564,5,412,0,0,3564,3565,3,422,
        211,0,3565,3566,5,422,0,0,3566,3578,1,0,0,0,3567,3568,5,412,0,0,
        3568,3569,3,418,209,0,3569,3570,5,422,0,0,3570,3578,1,0,0,0,3571,
        3573,5,410,0,0,3572,3574,3,418,209,0,3573,3572,1,0,0,0,3573,3574,
        1,0,0,0,3574,3575,1,0,0,0,3575,3578,5,421,0,0,3576,3578,3,430,215,
        0,3577,3448,1,0,0,0,3577,3468,1,0,0,0,3577,3475,1,0,0,0,3577,3477,
        1,0,0,0,3577,3484,1,0,0,0,3577,3488,1,0,0,0,3577,3499,1,0,0,0,3577,
        3501,1,0,0,0,3577,3509,1,0,0,0,3577,3521,1,0,0,0,3577,3531,1,0,0,
        0,3577,3548,1,0,0,0,3577,3549,1,0,0,0,3577,3551,1,0,0,0,3577,3556,
        1,0,0,0,3577,3559,1,0,0,0,3577,3563,1,0,0,0,3577,3567,1,0,0,0,3577,
        3571,1,0,0,0,3577,3576,1,0,0,0,3578,3650,1,0,0,0,3579,3580,10,16,
        0,0,3580,3581,7,57,0,0,3581,3649,3,422,211,17,3582,3583,10,15,0,
        0,3583,3584,7,58,0,0,3584,3649,3,422,211,16,3585,3604,10,14,0,0,
        3586,3605,5,405,0,0,3587,3605,5,406,0,0,3588,3605,5,414,0,0,3589,
        3605,5,411,0,0,3590,3605,5,407,0,0,3591,3605,5,413,0,0,3592,3605,
        5,408,0,0,3593,3595,5,72,0,0,3594,3593,1,0,0,0,3594,3595,1,0,0,0,
        3595,3597,1,0,0,0,3596,3598,5,116,0,0,3597,3596,1,0,0,0,3597,3598,
        1,0,0,0,3598,3599,1,0,0,0,3599,3605,5,81,0,0,3600,3602,5,116,0,0,
        3601,3600,1,0,0,0,3601,3602,1,0,0,0,3602,3603,1,0,0,0,3603,3605,
        7,59,0,0,3604,3586,1,0,0,0,3604,3587,1,0,0,0,3604,3588,1,0,0,0,3604,
        3589,1,0,0,0,3604,3590,1,0,0,0,3604,3591,1,0,0,0,3604,3592,1,0,0,
        0,3604,3594,1,0,0,0,3604,3601,1,0,0,0,3605,3606,1,0,0,0,3606,3649,
        3,422,211,15,3607,3608,10,11,0,0,3608,3609,5,6,0,0,3609,3649,3,422,
        211,12,3610,3611,10,10,0,0,3611,3612,5,122,0,0,3612,3649,3,422,211,
        11,3613,3615,10,9,0,0,3614,3616,5,116,0,0,3615,3614,1,0,0,0,3615,
        3616,1,0,0,0,3616,3617,1,0,0,0,3617,3618,5,17,0,0,3618,3619,3,422,
        211,0,3619,3620,5,6,0,0,3620,3621,3,422,211,10,3621,3649,1,0,0,0,
        3622,3623,10,8,0,0,3623,3624,5,417,0,0,3624,3625,3,422,211,0,3625,
        3626,5,400,0,0,3626,3627,3,422,211,8,3627,3649,1,0,0,0,3628,3629,
        10,19,0,0,3629,3630,5,410,0,0,3630,3631,3,422,211,0,3631,3632,5,
        421,0,0,3632,3649,1,0,0,0,3633,3634,10,18,0,0,3634,3635,5,404,0,
        0,3635,3649,5,393,0,0,3636,3637,10,13,0,0,3637,3639,5,89,0,0,3638,
        3640,5,116,0,0,3639,3638,1,0,0,0,3639,3640,1,0,0,0,3640,3641,1,0,
        0,0,3641,3649,5,117,0,0,3642,3646,10,7,0,0,3643,3647,3,456,228,0,
        3644,3645,5,10,0,0,3645,3647,3,458,229,0,3646,3643,1,0,0,0,3646,
        3644,1,0,0,0,3647,3649,1,0,0,0,3648,3579,1,0,0,0,3648,3582,1,0,0,
        0,3648,3585,1,0,0,0,3648,3607,1,0,0,0,3648,3610,1,0,0,0,3648,3613,
        1,0,0,0,3648,3622,1,0,0,0,3648,3628,1,0,0,0,3648,3633,1,0,0,0,3648,
        3636,1,0,0,0,3648,3642,1,0,0,0,3649,3652,1,0,0,0,3650,3648,1,0,0,
        0,3650,3651,1,0,0,0,3651,423,1,0,0,0,3652,3650,1,0,0,0,3653,3658,
        3,426,213,0,3654,3655,5,401,0,0,3655,3657,3,426,213,0,3656,3654,
        1,0,0,0,3657,3660,1,0,0,0,3658,3656,1,0,0,0,3658,3659,1,0,0,0,3659,
        425,1,0,0,0,3660,3658,1,0,0,0,3661,3664,3,428,214,0,3662,3664,3,
        422,211,0,3663,3661,1,0,0,0,3663,3662,1,0,0,0,3664,427,1,0,0,0,3665,
        3666,5,412,0,0,3666,3667,3,160,80,0,3667,3668,5,422,0,0,3668,3671,
        1,0,0,0,3669,3671,3,160,80,0,3670,3665,1,0,0,0,3670,3669,1,0,0,0,
        3671,3672,1,0,0,0,3672,3673,5,396,0,0,3673,3674,3,422,211,0,3674,
        429,1,0,0,0,3675,3676,3,436,218,0,3676,3677,5,404,0,0,3677,3679,
        1,0,0,0,3678,3675,1,0,0,0,3678,3679,1,0,0,0,3679,3680,1,0,0,0,3680,
        3683,3,458,229,0,3681,3682,5,404,0,0,3682,3684,3,458,229,0,3683,
        3681,1,0,0,0,3683,3684,1,0,0,0,3684,431,1,0,0,0,3685,3686,6,216,
        -1,0,3686,3693,3,436,218,0,3687,3693,3,434,217,0,3688,3689,5,412,
        0,0,3689,3690,3,336,168,0,3690,3691,5,422,0,0,3691,3693,1,0,0,0,
        3692,3685,1,0,0,0,3692,3687,1,0,0,0,3692,3688,1,0,0,0,3693,3702,
        1,0,0,0,3694,3698,10,1,0,0,3695,3699,3,456,228,0,3696,3697,5,10,
        0,0,3697,3699,3,458,229,0,3698,3695,1,0,0,0,3698,3696,1,0,0,0,3699,
        3701,1,0,0,0,3700,3694,1,0,0,0,3701,3704,1,0,0,0,3702,3700,1,0,0,
        0,3702,3703,1,0,0,0,3703,433,1,0,0,0,3704,3702,1,0,0,0,3705,3706,
        3,458,229,0,3706,3708,5,412,0,0,3707,3709,3,438,219,0,3708,3707,
        1,0,0,0,3708,3709,1,0,0,0,3709,3710,1,0,0,0,3710,3711,5,422,0,0,
        3711,435,1,0,0,0,3712,3713,3,442,221,0,3713,3714,5,404,0,0,3714,
        3716,1,0,0,0,3715,3712,1,0,0,0,3715,3716,1,0,0,0,3716,3717,1,0,0,
        0,3717,3718,3,458,229,0,3718,437,1,0,0,0,3719,3724,3,440,220,0,3720,
        3721,5,401,0,0,3721,3723,3,440,220,0,3722,3720,1,0,0,0,3723,3726,
        1,0,0,0,3724,3722,1,0,0,0,3724,3725,1,0,0,0,3725,439,1,0,0,0,3726,
        3724,1,0,0,0,3727,3731,3,430,215,0,3728,3731,3,434,217,0,3729,3731,
        3,448,224,0,3730,3727,1,0,0,0,3730,3728,1,0,0,0,3730,3729,1,0,0,
        0,3731,441,1,0,0,0,3732,3733,3,458,229,0,3733,443,1,0,0,0,3734,3743,
        5,391,0,0,3735,3736,5,404,0,0,3736,3743,7,60,0,0,3737,3738,5,393,
        0,0,3738,3740,5,404,0,0,3739,3741,7,60,0,0,3740,3739,1,0,0,0,3740,
        3741,1,0,0,0,3741,3743,1,0,0,0,3742,3734,1,0,0,0,3742,3735,1,0,0,
        0,3742,3737,1,0,0,0,3743,445,1,0,0,0,3744,3746,7,61,0,0,3745,3744,
        1,0,0,0,3745,3746,1,0,0,0,3746,3753,1,0,0,0,3747,3754,3,444,222,
        0,3748,3754,5,392,0,0,3749,3754,5,393,0,0,3750,3754,5,394,0,0,3751,
        3754,5,83,0,0,3752,3754,5,114,0,0,3753,3747,1,0,0,0,3753,3748,1,
        0,0,0,3753,3749,1,0,0,0,3753,3750,1,0,0,0,3753,3751,1,0,0,0,3753,
        3752,1,0,0,0,3754,447,1,0,0,0,3755,3759,3,446,223,0,3756,3759,5,
        395,0,0,3757,3759,5,117,0,0,3758,3755,1,0,0,0,3758,3756,1,0,0,0,
        3758,3757,1,0,0,0,3759,449,1,0,0,0,3760,3761,7,62,0,0,3761,451,1,
        0,0,0,3762,3763,7,63,0,0,3763,453,1,0,0,0,3764,3765,7,64,0,0,3765,
        455,1,0,0,0,3766,3769,5,390,0,0,3767,3769,3,454,227,0,3768,3766,
        1,0,0,0,3768,3767,1,0,0,0,3769,457,1,0,0,0,3770,3774,5,390,0,0,3771,
        3774,3,450,225,0,3772,3774,3,452,226,0,3773,3770,1,0,0,0,3773,3771,
        1,0,0,0,3773,3772,1,0,0,0,3774,459,1,0,0,0,3775,3778,3,458,229,0,
        3776,3778,5,117,0,0,3777,3775,1,0,0,0,3777,3776,1,0,0,0,3778,461,
        1,0,0,0,3779,3780,5,395,0,0,3780,3781,5,406,0,0,3781,3782,3,446,
        223,0,3782,463,1,0,0,0,535,465,471,477,483,487,490,495,517,520,528,
        533,551,558,564,567,570,574,581,585,591,597,603,606,609,613,618,
        622,627,634,639,642,645,649,655,659,662,665,668,672,678,684,687,
        690,693,696,699,702,705,708,718,725,734,744,749,753,771,774,782,
        788,799,811,819,823,829,834,838,844,849,852,858,863,866,868,874,
        878,884,888,894,898,903,910,912,918,923,929,934,940,945,947,954,
        959,962,969,974,981,986,989,995,998,1005,1011,1017,1022,1028,1034,
        1040,1046,1052,1056,1068,1077,1079,1087,1092,1114,1128,1136,1142,
        1148,1154,1157,1163,1166,1169,1175,1179,1182,1185,1188,1191,1198,
        1202,1205,1209,1215,1218,1224,1228,1231,1242,1246,1249,1254,1256,
        1259,1262,1272,1276,1279,1282,1287,1289,1296,1302,1306,1309,1312,
        1340,1348,1350,1357,1364,1374,1382,1387,1394,1402,1410,1413,1417,
        1420,1423,1428,1436,1442,1451,1455,1458,1461,1464,1467,1470,1476,
        1478,1481,1484,1491,1498,1502,1510,1516,1521,1523,1527,1536,1543,
        1551,1558,1566,1570,1574,1581,1585,1589,1592,1595,1599,1606,1610,
        1617,1623,1635,1642,1646,1657,1662,1668,1672,1675,1678,1681,1685,
        1692,1698,1702,1705,1708,1713,1721,1728,1732,1735,1738,1742,1748,
        1751,1758,1767,1771,1780,1787,1795,1799,1804,1808,1820,1828,1833,
        1837,1843,1847,1863,1871,1897,1899,1903,1925,1927,1938,1941,1950,
        1967,1978,1996,2009,2026,2035,2062,2064,2085,2090,2095,2098,2110,
        2115,2119,2122,2126,2130,2135,2138,2142,2144,2166,2174,2177,2187,
        2191,2199,2203,2208,2212,2216,2220,2224,2226,2234,2238,2241,2264,
        2268,2273,2283,2288,2294,2301,2309,2317,2322,2335,2344,2352,2355,
        2368,2374,2379,2382,2392,2395,2399,2401,2408,2415,2422,2427,2431,
        2435,2439,2445,2448,2452,2456,2460,2466,2474,2477,2481,2487,2491,
        2496,2500,2504,2509,2517,2520,2525,2536,2540,2545,2552,2566,2568,
        2580,2587,2606,2619,2623,2630,2634,2638,2646,2658,2661,2667,2670,
        2674,2677,2682,2687,2694,2703,2711,2718,2722,2727,2730,2738,2743,
        2770,2775,2780,2783,2786,2795,2798,2806,2818,2821,2826,2830,2837,
        2848,2852,2860,2863,2873,2881,2886,2892,2896,2902,2905,2908,2911,
        2925,2929,2933,2938,2941,2951,2959,2962,2966,2969,2973,2976,2979,
        2982,2985,2988,2992,2996,2999,3002,3005,3008,3011,3020,3026,3053,
        3075,3083,3086,3092,3100,3103,3109,3111,3115,3120,3123,3126,3130,
        3134,3137,3139,3142,3146,3150,3153,3155,3157,3160,3165,3176,3182,
        3187,3194,3199,3203,3207,3212,3219,3227,3230,3233,3252,3266,3282,
        3285,3294,3298,3303,3308,3311,3313,3335,3338,3349,3353,3356,3360,
        3364,3372,3376,3389,3401,3413,3421,3425,3432,3438,3446,3451,3460,
        3464,3495,3512,3524,3534,3537,3541,3544,3556,3573,3577,3594,3597,
        3601,3604,3615,3639,3646,3648,3650,3658,3663,3670,3678,3683,3692,
        3698,3702,3708,3715,3724,3730,3740,3742,3745,3753,3758,3768,3773,
        3777
    ];

    private static __ATN: antlr.ATN;
    public static get _ATN(): antlr.ATN {
        if (!ClickHouseParser.__ATN) {
            ClickHouseParser.__ATN = new antlr.ATNDeserializer().deserialize(ClickHouseParser._serializedATN);
        }

        return ClickHouseParser.__ATN;
    }


    private static readonly vocabulary = new antlr.Vocabulary(ClickHouseParser.literalNames, ClickHouseParser.symbolicNames, []);

    public override get vocabulary(): antlr.Vocabulary {
        return ClickHouseParser.vocabulary;
    }

    private static readonly decisionsToDFA = ClickHouseParser._ATN.decisionToState.map( (ds: antlr.DecisionState, index: number) => new antlr.DFA(ds, index) );
}

export class RootContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EOF, 0)!;
    }
    public statements(): StatementsContext | null {
        return this.getRuleContext(0, StatementsContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_root;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRoot) {
            return visitor.visitRoot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementsContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public statement(): StatementContext {
        return this.getRuleContext(0, StatementContext)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public statements(): StatementsContext | null {
        return this.getRuleContext(0, StatementsContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_statements;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStatements) {
            return visitor.visitStatements(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public notInsertStatement(): NotInsertStatementContext | null {
        return this.getRuleContext(0, NotInsertStatementContext);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTO, 0);
    }
    public OUTFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTFILE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORMAT, 0);
    }
    public identifierOrNull(): IdentifierOrNullContext | null {
        return this.getRuleContext(0, IdentifierOrNullContext);
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public insertStatement(): InsertStatementContext | null {
        return this.getRuleContext(0, InsertStatementContext);
    }
    public grantStatement(): GrantStatementContext | null {
        return this.getRuleContext(0, GrantStatementContext);
    }
    public revokeStatement(): RevokeStatementContext | null {
        return this.getRuleContext(0, RevokeStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_statement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStatement) {
            return visitor.visitStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NotInsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterStatement(): AlterStatementContext | null {
        return this.getRuleContext(0, AlterStatementContext);
    }
    public attachStatement(): AttachStatementContext | null {
        return this.getRuleContext(0, AttachStatementContext);
    }
    public checkStatement(): CheckStatementContext | null {
        return this.getRuleContext(0, CheckStatementContext);
    }
    public createStatement(): CreateStatementContext | null {
        return this.getRuleContext(0, CreateStatementContext);
    }
    public describeStatement(): DescribeStatementContext | null {
        return this.getRuleContext(0, DescribeStatementContext);
    }
    public deleteStatement(): DeleteStatementContext | null {
        return this.getRuleContext(0, DeleteStatementContext);
    }
    public dropStatement(): DropStatementContext | null {
        return this.getRuleContext(0, DropStatementContext);
    }
    public existsStatement(): ExistsStatementContext | null {
        return this.getRuleContext(0, ExistsStatementContext);
    }
    public explainStatement(): ExplainStatementContext | null {
        return this.getRuleContext(0, ExplainStatementContext);
    }
    public killStatement(): KillStatementContext | null {
        return this.getRuleContext(0, KillStatementContext);
    }
    public optimizeStatement(): OptimizeStatementContext | null {
        return this.getRuleContext(0, OptimizeStatementContext);
    }
    public renameStatement(): RenameStatementContext | null {
        return this.getRuleContext(0, RenameStatementContext);
    }
    public selectUnionStatement(): SelectUnionStatementContext | null {
        return this.getRuleContext(0, SelectUnionStatementContext);
    }
    public setStatement(): SetStatementContext | null {
        return this.getRuleContext(0, SetStatementContext);
    }
    public showStatement(): ShowStatementContext | null {
        return this.getRuleContext(0, ShowStatementContext);
    }
    public systemStatement(): SystemStatementContext | null {
        return this.getRuleContext(0, SystemStatementContext);
    }
    public truncateStatement(): TruncateStatementContext | null {
        return this.getRuleContext(0, TruncateStatementContext);
    }
    public useStatement(): UseStatementContext | null {
        return this.getRuleContext(0, UseStatementContext);
    }
    public watchStatement(): WatchStatementContext | null {
        return this.getRuleContext(0, WatchStatementContext);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public commonTableExpressionStatement(): CommonTableExpressionStatementContext | null {
        return this.getRuleContext(0, CommonTableExpressionStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_notInsertStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNotInsertStatement) {
            return visitor.visitNotInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CommonTableExpressionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WITH, 0)!;
    }
    public namedQuery(): NamedQueryContext[];
    public namedQuery(i: number): NamedQueryContext | null;
    public namedQuery(i?: number): NamedQueryContext[] | NamedQueryContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedQueryContext);
        }

        return this.getRuleContext(i, NamedQueryContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_commonTableExpressionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCommonTableExpressionStatement) {
            return visitor.visitCommonTableExpressionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedQueryContext extends antlr.ParserRuleContext {
    public _name?: IdentifierContext;
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnAliases(): ColumnAliasesContext | null {
        return this.getRuleContext(0, ColumnAliasesContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_namedQuery;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNamedQuery) {
            return visitor.visitNamedQuery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnAliasesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnAliases;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnAliases) {
            return visitor.visitColumnAliases(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterTableStatement(): AlterTableStatementContext | null {
        return this.getRuleContext(0, AlterTableStatementContext);
    }
    public alterUserStatement(): AlterUserStatementContext | null {
        return this.getRuleContext(0, AlterUserStatementContext);
    }
    public alterQuotaStatement(): AlterQuotaStatementContext | null {
        return this.getRuleContext(0, AlterQuotaStatementContext);
    }
    public alterRowPolicyStatement(): AlterRowPolicyStatementContext | null {
        return this.getRuleContext(0, AlterRowPolicyStatementContext);
    }
    public alterRoleStatement(): AlterRoleStatementContext | null {
        return this.getRuleContext(0, AlterRoleStatementContext);
    }
    public alterNamedCollectionStatement(): AlterNamedCollectionStatementContext | null {
        return this.getRuleContext(0, AlterNamedCollectionStatementContext);
    }
    public alterSettingsProfileStatement(): AlterSettingsProfileStatementContext | null {
        return this.getRuleContext(0, AlterSettingsProfileStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterStatement) {
            return visitor.visitAlterStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterSettingsProfileStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ALTER, 0)!;
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public PROFILE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROFILE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public renameClause(): RenameClauseContext | null {
        return this.getRuleContext(0, RenameClauseContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public extendedSettingsWithInheritClause(): ExtendedSettingsWithInheritClauseContext | null {
        return this.getRuleContext(0, ExtendedSettingsWithInheritClauseContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public subjectExpressionList(): SubjectExpressionListContext | null {
        return this.getRuleContext(0, SubjectExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterSettingsProfileStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterSettingsProfileStatement) {
            return visitor.visitAlterSettingsProfileStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterNamedCollectionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ALTER, 0)!;
    }
    public NAMED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NAMED, 0)!;
    }
    public COLLECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLLECTION, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SET, 0);
    }
    public namedCollectionExpressionList(): NamedCollectionExpressionListContext | null {
        return this.getRuleContext(0, NamedCollectionExpressionListContext);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterNamedCollectionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterNamedCollectionStatement) {
            return visitor.visitAlterNamedCollectionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterRoleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ALTER, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ROLE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public renameClause(): RenameClauseContext | null {
        return this.getRuleContext(0, RenameClauseContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public extendedSettingsWithProfileClause(): ExtendedSettingsWithProfileClauseContext | null {
        return this.getRuleContext(0, ExtendedSettingsWithProfileClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterRoleStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterRoleStatement) {
            return visitor.visitAlterRoleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterPolicyExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ON, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public renameClause(): RenameClauseContext | null {
        return this.getRuleContext(0, RenameClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterPolicyExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterPolicyExpression) {
            return visitor.visitAlterPolicyExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterRowPolicyStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ALTER, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.POLICY, 0)!;
    }
    public alterPolicyExpression(): AlterPolicyExpressionContext[];
    public alterPolicyExpression(i: number): AlterPolicyExpressionContext | null;
    public alterPolicyExpression(i?: number): AlterPolicyExpressionContext[] | AlterPolicyExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterPolicyExpressionContext);
        }

        return this.getRuleContext(i, AlterPolicyExpressionContext);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SELECT, 0);
    }
    public usingClause(): UsingClauseContext | null {
        return this.getRuleContext(0, UsingClauseContext);
    }
    public asPermissiveOrRestrictive(): AsPermissiveOrRestrictiveContext | null {
        return this.getRuleContext(0, AsPermissiveOrRestrictiveContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public subjectExpressionList(): SubjectExpressionListContext | null {
        return this.getRuleContext(0, SubjectExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterRowPolicyStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterRowPolicyStatement) {
            return visitor.visitAlterRowPolicyStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterQuotaStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ALTER, 0)!;
    }
    public QUOTA(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.QUOTA, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public renameClause(): RenameClauseContext | null {
        return this.getRuleContext(0, RenameClauseContext);
    }
    public quotaKeyClause(): QuotaKeyClauseContext | null {
        return this.getRuleContext(0, QuotaKeyClauseContext);
    }
    public quotaForList(): QuotaForListContext | null {
        return this.getRuleContext(0, QuotaForListContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public subjectExpressionList(): SubjectExpressionListContext | null {
        return this.getRuleContext(0, SubjectExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterQuotaStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterQuotaStatement) {
            return visitor.visitAlterQuotaStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterUserStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ALTER, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.USER, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public renameClause(): RenameClauseContext | null {
        return this.getRuleContext(0, RenameClauseContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public userIdentificationClause(): UserIdentificationClauseContext | null {
        return this.getRuleContext(0, UserIdentificationClauseContext);
    }
    public hostClause(): HostClauseContext | null {
        return this.getRuleContext(0, HostClauseContext);
    }
    public validUntilClause(): ValidUntilClauseContext | null {
        return this.getRuleContext(0, ValidUntilClauseContext);
    }
    public defaultRoleClause(): DefaultRoleClauseContext | null {
        return this.getRuleContext(0, DefaultRoleClauseContext);
    }
    public granteesClause(): GranteesClauseContext | null {
        return this.getRuleContext(0, GranteesClauseContext);
    }
    public extendedSettingsWithProfileClause(): ExtendedSettingsWithProfileClauseContext | null {
        return this.getRuleContext(0, ExtendedSettingsWithProfileClauseContext);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADD, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterUserStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterUserStatement) {
            return visitor.visitAlterUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RENAME, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_renameClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRenameClause) {
            return visitor.visitRenameClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ALTER, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public alterTableClause(): AlterTableClauseContext[];
    public alterTableClause(i: number): AlterTableClauseContext | null;
    public alterTableClause(i?: number): AlterTableClauseContext[] | AlterTableClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AlterTableClauseContext);
        }

        return this.getRuleContext(i, AlterTableClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableStatement) {
            return visitor.visitAlterTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public alterTableAddClause(): AlterTableAddClauseContext | null {
        return this.getRuleContext(0, AlterTableAddClauseContext);
    }
    public alterTableClearClause(): AlterTableClearClauseContext | null {
        return this.getRuleContext(0, AlterTableClearClauseContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext[];
    public columnIdentifier(i: number): ColumnIdentifierContext | null;
    public columnIdentifier(i?: number): ColumnIdentifierContext[] | ColumnIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnIdentifierContext);
        }

        return this.getRuleContext(i, ColumnIdentifierContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public partitionOrPartClause(): PartitionOrPartClauseContext | null {
        return this.getRuleContext(0, PartitionOrPartClauseContext);
    }
    public alterTableDropClause(): AlterTableDropClauseContext | null {
        return this.getRuleContext(0, AlterTableDropClauseContext);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FREEZE, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAME, 0);
    }
    public UNFREEZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNFREEZE, 0);
    }
    public alterTableMaterializeClause(): AlterTableMaterializeClauseContext | null {
        return this.getRuleContext(0, AlterTableMaterializeClauseContext);
    }
    public alterTableModifyClause(): AlterTableModifyClauseContext | null {
        return this.getRuleContext(0, AlterTableModifyClauseContext);
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVE, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOVE, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RENAME, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UPDATE, 0);
    }
    public assignmentExpressionList(): AssignmentExpressionListContext | null {
        return this.getRuleContext(0, AssignmentExpressionListContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESET, 0);
    }
    public SETTING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTING, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public FORGET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORGET, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARTITION, 0);
    }
    public partitionExpression(): PartitionExpressionContext | null {
        return this.getRuleContext(0, PartitionExpressionContext);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STATISTICS, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public CLEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLEAR, 0);
    }
    public MATERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCH, 0);
    }
    public alterTableUpdateClause(): AlterTableUpdateClauseContext | null {
        return this.getRuleContext(0, AlterTableUpdateClauseContext);
    }
    public alterTableDeleteClause(): AlterTableDeleteClauseContext | null {
        return this.getRuleContext(0, AlterTableDeleteClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClause) {
            return visitor.visitAlterTableClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableDeleteClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DELETE, 0)!;
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public filterByNumberExpression(): FilterByNumberExpressionContext | null {
        return this.getRuleContext(0, FilterByNumberExpressionContext);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableDeleteClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableDeleteClause) {
            return visitor.visitAlterTableDeleteClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableMaterializeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATERIALIZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0)!;
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public PROJECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROJECTION, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableMaterializeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableMaterializeClause) {
            return visitor.visitAlterTableMaterializeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableDropClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public PROJECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROJECTION, 0);
    }
    public partitionOrPartClause(): PartitionOrPartClauseContext | null {
        return this.getRuleContext(0, PartitionOrPartClauseContext);
    }
    public DETACHED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACHED, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARTITION, 0);
    }
    public PART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PART, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableDropClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableDropClause) {
            return visitor.visitAlterTableDropClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableClearClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CLEAR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLEAR, 0)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public PROJECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROJECTION, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableClearClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableClearClause) {
            return visitor.visitAlterTableClearClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableAddClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADD, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public tableColumnDefinition(): TableColumnDefinitionContext | null {
        return this.getRuleContext(0, TableColumnDefinitionContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public tableIndexDefinition(): TableIndexDefinitionContext | null {
        return this.getRuleContext(0, TableIndexDefinitionContext);
    }
    public PROJECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROJECTION, 0);
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext | null {
        return this.getRuleContext(0, TableProjectionDefinitionContext);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STATISTICS, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TYPE, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableAddClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableAddClause) {
            return visitor.visitAlterTableAddClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableModifyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MODIFY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MODIFY, 0)!;
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public codecExpression(): CodecExpressionContext | null {
        return this.getRuleContext(0, CodecExpressionContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOVE, 0);
    }
    public tableColumnPropertyType(): TableColumnPropertyTypeContext | null {
        return this.getRuleContext(0, TableColumnPropertyTypeContext);
    }
    public tableColumnDefinition(): TableColumnDefinitionContext | null {
        return this.getRuleContext(0, TableColumnDefinitionContext);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STATISTICS, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TYPE, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public SETTING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTING, 0);
    }
    public settingExpressionList(): SettingExpressionListContext | null {
        return this.getRuleContext(0, SettingExpressionListContext);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORDER, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public ttlClause(): TtlClauseContext | null {
        return this.getRuleContext(0, TtlClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableModifyClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableModifyClause) {
            return visitor.visitAlterTableModifyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterTableUpdateClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UPDATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.UPDATE, 0)!;
    }
    public columnEqualExpression(): ColumnEqualExpressionContext[];
    public columnEqualExpression(i: number): ColumnEqualExpressionContext | null;
    public columnEqualExpression(i?: number): ColumnEqualExpressionContext[] | ColumnEqualExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnEqualExpressionContext);
        }

        return this.getRuleContext(i, ColumnEqualExpressionContext);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WHERE, 0)!;
    }
    public filterByNumberExpression(): FilterByNumberExpressionContext {
        return this.getRuleContext(0, FilterByNumberExpressionContext)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterTableUpdateClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterTableUpdateClause) {
            return visitor.visitAlterTableUpdateClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FilterByNumberExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierEqualNumber(): IdentifierEqualNumberContext[];
    public identifierEqualNumber(i: number): IdentifierEqualNumberContext | null;
    public identifierEqualNumber(i?: number): IdentifierEqualNumberContext[] | IdentifierEqualNumberContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierEqualNumberContext);
        }

        return this.getRuleContext(i, IdentifierEqualNumberContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_filterByNumberExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFilterByNumberExpression) {
            return visitor.visitFilterByNumberExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierEqualNumberContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public numberLiteral(): NumberLiteralContext {
        return this.getRuleContext(0, NumberLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifierEqualNumber;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierEqualNumber) {
            return visitor.visitIdentifierEqualNumber(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnEqualExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnEqualExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnEqualExpression) {
            return visitor.visitColumnEqualExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public assignmentExpression(): AssignmentExpressionContext[];
    public assignmentExpression(i: number): AssignmentExpressionContext | null;
    public assignmentExpression(i?: number): AssignmentExpressionContext[] | AssignmentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AssignmentExpressionContext);
        }

        return this.getRuleContext(i, AssignmentExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_assignmentExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentExpressionList) {
            return visitor.visitAssignmentExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AssignmentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_assignmentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAssignmentExpression) {
            return visitor.visitAssignmentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnPropertyTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public CODEC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CODEC, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnPropertyType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnPropertyType) {
            return visitor.visitTableColumnPropertyType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionExpression(): FunctionExpressionContext | null {
        return this.getRuleContext(0, FunctionExpressionContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_partitionExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionExpression) {
            return visitor.visitPartitionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public partitionExpression(): PartitionExpressionContext {
        return this.getRuleContext(0, PartitionExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_partitionClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionClause) {
            return visitor.visitPartitionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionOrPartClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public PART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PART, 0);
    }
    public partitionExpression(): PartitionExpressionContext | null {
        return this.getRuleContext(0, PartitionExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_partitionOrPartClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionOrPartClause) {
            return visitor.visitPartitionOrPartClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AttachStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_attachStatement;
    }
    public override copyFrom(ctx: AttachStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class AttachDictionaryStatementContext extends AttachStatementContext {
    public constructor(ctx: AttachStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ATTACH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ATTACH, 0)!;
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAttachDictionaryStatement) {
            return visitor.visitAttachDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CheckStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CHECK, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_checkStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCheckStatement) {
            return visitor.visitCheckStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DeleteStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DELETE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DELETE, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_deleteStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDeleteStatement) {
            return visitor.visitDeleteStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateTableStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public engineClause(): EngineClauseContext | null {
        return this.getRuleContext(0, EngineClauseContext);
    }
    public subqueryClause(): SubqueryClauseContext | null {
        return this.getRuleContext(0, SubqueryClauseContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createTableStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateTableStatement) {
            return visitor.visitCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDatabaseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public engineExpression(): EngineExpressionContext | null {
        return this.getRuleContext(0, EngineExpressionContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createDatabaseStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDatabaseStatement) {
            return visitor.visitCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateDictionaryStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public dictionarySchemaClause(): DictionarySchemaClauseContext {
        return this.getRuleContext(0, DictionarySchemaClauseContext)!;
    }
    public dictionaryEngineClause(): DictionaryEngineClauseContext {
        return this.getRuleContext(0, DictionaryEngineClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createDictionaryStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateDictionaryStatement) {
            return visitor.visitCreateDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateLiveViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIVE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIVE, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIMEOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMEOUT, 0);
    }
    public destinationClause(): DestinationClauseContext | null {
        return this.getRuleContext(0, DestinationClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createLiveViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateLiveViewStatement) {
            return visitor.visitCreateLiveViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateMaterializedViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MATERIALIZED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0)!;
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public destinationClause(): DestinationClauseContext | null {
        return this.getRuleContext(0, DestinationClauseContext);
    }
    public engineClause(): EngineClauseContext | null {
        return this.getRuleContext(0, EngineClauseContext);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public POPULATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POPULATE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createMaterializedViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateMaterializedViewStatement) {
            return visitor.visitCreateMaterializedViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateViewStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VIEW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VIEW, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public subqueryClause(): SubqueryClauseContext {
        return this.getRuleContext(0, SubqueryClauseContext)!;
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public uuidClause(): UuidClauseContext | null {
        return this.getRuleContext(0, UuidClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public tableSchemaClause(): TableSchemaClauseContext | null {
        return this.getRuleContext(0, TableSchemaClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createViewStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateViewStatement) {
            return visitor.visitCreateViewStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringIdentificationTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PLAINTEXT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLAINTEXT_PASSWORD, 0);
    }
    public SHA256_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_PASSWORD, 0);
    }
    public SHA256_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_HASH, 0);
    }
    public DOUBLE_SHA1_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_PASSWORD, 0);
    }
    public DOUBLE_SHA1_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_HASH, 0);
    }
    public BCRYPT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_PASSWORD, 0);
    }
    public BCRYPT_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_HASH, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_stringIdentificationType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStringIdentificationType) {
            return visitor.visitStringIdentificationType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeyTypeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEY, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.STRING_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.STRING_LITERAL, i);
    	}
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TYPE, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_keyTypeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKeyTypeClause) {
            return visitor.visitKeyTypeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OtherIdentificationTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NO_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO_PASSWORD, 0);
    }
    public LDAP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LDAP, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SERVER, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode[];
    public STRING_LITERAL(i: number): antlr.TerminalNode | null;
    public STRING_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.STRING_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.STRING_LITERAL, i);
    	}
    }
    public KERBEROS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KERBEROS, 0);
    }
    public REALM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REALM, 0);
    }
    public SSL_CERTIFICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSL_CERTIFICATE, 0);
    }
    public SAN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAN, 0);
    }
    public CN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CN, 0);
    }
    public SSH_KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSH_KEY, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public keyTypeClause(): KeyTypeClauseContext[];
    public keyTypeClause(i: number): KeyTypeClauseContext | null;
    public keyTypeClause(i?: number): KeyTypeClauseContext[] | KeyTypeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(KeyTypeClauseContext);
        }

        return this.getRuleContext(i, KeyTypeClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public HTTP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HTTP, 0);
    }
    public SCHEME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SCHEME, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_otherIdentificationType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOtherIdentificationType) {
            return visitor.visitOtherIdentificationType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserIdentificationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public IDENTIFIED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.IDENTIFIED, 0)!;
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public stringIdentificationType(): StringIdentificationTypeContext | null {
        return this.getRuleContext(0, StringIdentificationTypeContext);
    }
    public otherIdentificationType(): OtherIdentificationTypeContext | null {
        return this.getRuleContext(0, OtherIdentificationTypeContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userIdentificationClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserIdentificationClause) {
            return visitor.visitUserIdentificationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValidUntilClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALID(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VALID, 0)!;
    }
    public UNTIL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.UNTIL, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_validUntilClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValidUntilClause) {
            return visitor.visitValidUntilClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantsProviderContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifier(): UserIdentifierContext | null {
        return this.getRuleContext(0, UserIdentifierContext);
    }
    public roleIdentifier(): RoleIdentifierContext | null {
        return this.getRuleContext(0, RoleIdentifierContext);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_grantsProvider;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGrantsProvider) {
            return visitor.visitGrantsProvider(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GranteesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANTEES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GRANTEES, 0)!;
    }
    public grantsProvider(): GrantsProviderContext[];
    public grantsProvider(i: number): GrantsProviderContext | null;
    public grantsProvider(i?: number): GrantsProviderContext[] | GrantsProviderContext | null {
        if (i === undefined) {
            return this.getRuleContexts(GrantsProviderContext);
        }

        return this.getRuleContext(i, GrantsProviderContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext | null {
        return this.getRuleContext(0, UserOrRoleExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_granteesClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGranteesClause) {
            return visitor.visitGranteesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HostTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAME, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REGEXP, 0);
    }
    public IP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IP, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_hostType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitHostType) {
            return visitor.visitHostType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HostClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HOST(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.HOST, 0)!;
    }
    public hostType(): HostTypeContext[];
    public hostType(i: number): HostTypeContext | null;
    public hostType(i?: number): HostTypeContext[] | HostTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(HostTypeContext);
        }

        return this.getRuleContext(i, HostTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_hostClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitHostClause) {
            return visitor.visitHostClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtendedSettingExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode[];
    public EQ_SINGLE(i: number): antlr.TerminalNode | null;
    public EQ_SINGLE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.EQ_SINGLE);
    	} else {
    		return this.getToken(ClickHouseParser.EQ_SINGLE, i);
    	}
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public CONST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONST, 0);
    }
    public READONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READONLY, 0);
    }
    public WRITABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WRITABLE, 0);
    }
    public CHANGEABLE_IN_READONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CHANGEABLE_IN_READONLY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_extendedSettingExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExtendedSettingExpression) {
            return visitor.visitExtendedSettingExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtendedSettingExpressionWithProfileClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public extendedSettingExpression(): ExtendedSettingExpressionContext | null {
        return this.getRuleContext(0, ExtendedSettingExpressionContext);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_extendedSettingExpressionWithProfileClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExtendedSettingExpressionWithProfileClause) {
            return visitor.visitExtendedSettingExpressionWithProfileClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtendedSettingsWithProfileClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public extendedSettingExpressionWithProfileClause(): ExtendedSettingExpressionWithProfileClauseContext[];
    public extendedSettingExpressionWithProfileClause(i: number): ExtendedSettingExpressionWithProfileClauseContext | null;
    public extendedSettingExpressionWithProfileClause(i?: number): ExtendedSettingExpressionWithProfileClauseContext[] | ExtendedSettingExpressionWithProfileClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExtendedSettingExpressionWithProfileClauseContext);
        }

        return this.getRuleContext(i, ExtendedSettingExpressionWithProfileClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_extendedSettingsWithProfileClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExtendedSettingsWithProfileClause) {
            return visitor.visitExtendedSettingsWithProfileClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.IN, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_inClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInClause) {
            return visitor.visitInClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DefaultRoleClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DEFAULT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DEFAULT, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ROLE, 0)!;
    }
    public roleExpressionList(): RoleExpressionListContext {
        return this.getRuleContext(0, RoleExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_defaultRoleClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDefaultRoleClause) {
            return visitor.visitDefaultRoleClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateUserStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public USER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.USER, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public userIdentificationClause(): UserIdentificationClauseContext | null {
        return this.getRuleContext(0, UserIdentificationClauseContext);
    }
    public hostClause(): HostClauseContext | null {
        return this.getRuleContext(0, HostClauseContext);
    }
    public validUntilClause(): ValidUntilClauseContext | null {
        return this.getRuleContext(0, ValidUntilClauseContext);
    }
    public inClause(): InClauseContext | null {
        return this.getRuleContext(0, InClauseContext);
    }
    public defaultRoleClause(): DefaultRoleClauseContext | null {
        return this.getRuleContext(0, DefaultRoleClauseContext);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public granteesClause(): GranteesClauseContext | null {
        return this.getRuleContext(0, GranteesClauseContext);
    }
    public extendedSettingsWithProfileClause(): ExtendedSettingsWithProfileClauseContext | null {
        return this.getRuleContext(0, ExtendedSettingsWithProfileClauseContext);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createUserStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateUserStatement) {
            return visitor.visitCreateUserStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ReplaceOrIfNotExistsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_replaceOrIfNotExistsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitReplaceOrIfNotExistsClause) {
            return visitor.visitReplaceOrIfNotExistsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIdentifierOrAnyTableContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASTERISK, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableIdentifierOrAnyTable;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdentifierOrAnyTable) {
            return visitor.visitTableIdentifierOrAnyTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatePolicyExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ON, 0)!;
    }
    public tableIdentifierOrAnyTable(): TableIdentifierOrAnyTableContext {
        return this.getRuleContext(0, TableIdentifierOrAnyTableContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createPolicyExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreatePolicyExpression) {
            return visitor.visitCreatePolicyExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierOrLiteralOrFunctionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public functionExpression(): FunctionExpressionContext | null {
        return this.getRuleContext(0, FunctionExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifierOrLiteralOrFunction;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierOrLiteralOrFunction) {
            return visitor.visitIdentifierOrLiteralOrFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FunctionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public functionExpression(): FunctionExpressionContext | null {
        return this.getRuleContext(0, FunctionExpressionContext);
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_functionExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFunctionExpression) {
            return visitor.visitFunctionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConditionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifierOrLiteralOrFunction(): IdentifierOrLiteralOrFunctionContext[];
    public identifierOrLiteralOrFunction(i: number): IdentifierOrLiteralOrFunctionContext | null;
    public identifierOrLiteralOrFunction(i?: number): IdentifierOrLiteralOrFunctionContext[] | IdentifierOrLiteralOrFunctionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierOrLiteralOrFunctionContext);
        }

        return this.getRuleContext(i, IdentifierOrLiteralOrFunctionContext);
    }
    public EQ_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
    }
    public NOT_EQ(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT_EQ, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GT, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LT, 0);
    }
    public EQ_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_DOUBLE, 0);
    }
    public GE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GE, 0);
    }
    public LE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_conditionExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitConditionExpression) {
            return visitor.visitConditionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ConditionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public conditionExpression(): ConditionExpressionContext[];
    public conditionExpression(i: number): ConditionExpressionContext | null;
    public conditionExpression(i?: number): ConditionExpressionContext[] | ConditionExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ConditionExpressionContext);
        }

        return this.getRuleContext(i, ConditionExpressionContext);
    }
    public AND(): antlr.TerminalNode[];
    public AND(i: number): antlr.TerminalNode | null;
    public AND(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.AND);
    	} else {
    		return this.getToken(ClickHouseParser.AND, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_conditionClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitConditionClause) {
            return visitor.visitConditionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubjectOrAllOrExceptContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userOrRoleIdentifier(): UserOrRoleIdentifierContext | null {
        return this.getRuleContext(0, UserOrRoleIdentifierContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext | null {
        return this.getRuleContext(0, UserOrRoleExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_subjectOrAllOrExcept;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSubjectOrAllOrExcept) {
            return visitor.visitSubjectOrAllOrExcept(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubjectExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userOrRoleIdentifier(): UserOrRoleIdentifierContext | null {
        return this.getRuleContext(0, UserOrRoleIdentifierContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext | null {
        return this.getRuleContext(0, UserOrRoleExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_subjectExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSubjectExpression) {
            return visitor.visitSubjectExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AsPermissiveOrRestrictiveContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public PERMISSIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PERMISSIVE, 0);
    }
    public RESTRICTIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTRICTIVE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_asPermissiveOrRestrictive;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAsPermissiveOrRestrictive) {
            return visitor.visitAsPermissiveOrRestrictive(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UsingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USING(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.USING, 0)!;
    }
    public conditionClause(): ConditionClauseContext | null {
        return this.getRuleContext(0, ConditionClauseContext);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_usingClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUsingClause) {
            return visitor.visitUsingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRowPolicyStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public POLICY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.POLICY, 0)!;
    }
    public createPolicyExpression(): CreatePolicyExpressionContext[];
    public createPolicyExpression(i: number): CreatePolicyExpressionContext | null;
    public createPolicyExpression(i?: number): CreatePolicyExpressionContext[] | CreatePolicyExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CreatePolicyExpressionContext);
        }

        return this.getRuleContext(i, CreatePolicyExpressionContext);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public inClause(): InClauseContext | null {
        return this.getRuleContext(0, InClauseContext);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SELECT, 0);
    }
    public usingClause(): UsingClauseContext | null {
        return this.getRuleContext(0, UsingClauseContext);
    }
    public asPermissiveOrRestrictive(): AsPermissiveOrRestrictiveContext | null {
        return this.getRuleContext(0, AsPermissiveOrRestrictiveContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public subjectExpressionList(): SubjectExpressionListContext | null {
        return this.getRuleContext(0, SubjectExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createRowPolicyStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRowPolicyStatement) {
            return visitor.visitCreateRowPolicyStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaKeyTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USER_NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER_NAME, 0);
    }
    public IP_ADDRESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IP_ADDRESS, 0);
    }
    public CLIENT_KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public CLIENT_KEY_OR_USER_NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY_OR_USER_NAME, 0);
    }
    public CLIENT_KEY_OR_IP_ADDRESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaKeyType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaKeyType) {
            return visitor.visitQuotaKeyType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaKeyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public quotaKeyType(): QuotaKeyTypeContext | null {
        return this.getRuleContext(0, QuotaKeyTypeContext);
    }
    public KEYED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEYED, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEY, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaKeyClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaKeyClause) {
            return visitor.visitQuotaKeyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaRestrictionTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public QUERIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERIES, 0);
    }
    public QUERY_SELECTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY_SELECTS, 0);
    }
    public QUERY_INSERTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY_INSERTS, 0);
    }
    public ERRORS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ERRORS, 0);
    }
    public RESULT_ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESULT_ROWS, 0);
    }
    public RESULT_BYTES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESULT_BYTES, 0);
    }
    public READ_ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READ_ROWS, 0);
    }
    public READ_BYTES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READ_BYTES, 0);
    }
    public EXECUTION_TIME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXECUTION_TIME, 0);
    }
    public FAILED_SEQUENTIAL_AUTHENTICATIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaRestrictionType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaRestrictionType) {
            return visitor.visitQuotaRestrictionType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class StringOrNumberLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public numberLiteral(): NumberLiteralContext | null {
        return this.getRuleContext(0, NumberLiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_stringOrNumberLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitStringOrNumberLiteral) {
            return visitor.visitStringOrNumberLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaRestrictionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public MAX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MAX, 0)!;
    }
    public quotaRestrictionType(): QuotaRestrictionTypeContext {
        return this.getRuleContext(0, QuotaRestrictionTypeContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public stringOrNumberLiteral(): StringOrNumberLiteralContext {
        return this.getRuleContext(0, StringOrNumberLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaRestrictionExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaRestrictionExpression) {
            return visitor.visitQuotaRestrictionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaRestrictionClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public quotaRestrictionExpression(): QuotaRestrictionExpressionContext[];
    public quotaRestrictionExpression(i: number): QuotaRestrictionExpressionContext | null;
    public quotaRestrictionExpression(i?: number): QuotaRestrictionExpressionContext[] | QuotaRestrictionExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QuotaRestrictionExpressionContext);
        }

        return this.getRuleContext(i, QuotaRestrictionExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO, 0);
    }
    public LIMITS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMITS, 0);
    }
    public TRACKING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRACKING, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ONLY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaRestrictionClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaRestrictionClause) {
            return visitor.visitQuotaRestrictionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaForClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FOR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FOR, 0)!;
    }
    public intervalOperand(): IntervalOperandContext {
        return this.getRuleContext(0, IntervalOperandContext)!;
    }
    public quotaRestrictionClause(): QuotaRestrictionClauseContext {
        return this.getRuleContext(0, QuotaRestrictionClauseContext)!;
    }
    public RANDOMIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANDOMIZED, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaForClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaForClause) {
            return visitor.visitQuotaForClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalOperandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INTERVAL, 0)!;
    }
    public numberLiteral(): NumberLiteralContext {
        return this.getRuleContext(0, NumberLiteralContext)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_intervalOperand;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIntervalOperand) {
            return visitor.visitIntervalOperand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class QuotaForListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public quotaForClause(): QuotaForClauseContext[];
    public quotaForClause(i: number): QuotaForClauseContext | null;
    public quotaForClause(i?: number): QuotaForClauseContext[] | QuotaForClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(QuotaForClauseContext);
        }

        return this.getRuleContext(i, QuotaForClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_quotaForList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitQuotaForList) {
            return visitor.visitQuotaForList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateQuotaStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public QUOTA(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.QUOTA, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public inClause(): InClauseContext | null {
        return this.getRuleContext(0, InClauseContext);
    }
    public quotaKeyClause(): QuotaKeyClauseContext | null {
        return this.getRuleContext(0, QuotaKeyClauseContext);
    }
    public quotaForList(): QuotaForListContext | null {
        return this.getRuleContext(0, QuotaForListContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public subjectExpressionList(): SubjectExpressionListContext | null {
        return this.getRuleContext(0, SubjectExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createQuotaStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateQuotaStatement) {
            return visitor.visitCreateQuotaStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifierList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierList) {
            return visitor.visitIdentifierList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateRoleStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public ROLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ROLE, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public inClause(): InClauseContext | null {
        return this.getRuleContext(0, InClauseContext);
    }
    public extendedSettingsWithProfileClause(): ExtendedSettingsWithProfileClauseContext | null {
        return this.getRuleContext(0, ExtendedSettingsWithProfileClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createRoleStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateRoleStatement) {
            return visitor.visitCreateRoleStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtendedSettingExpressionWithProfileOrInheritClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public extendedSettingExpressionWithProfileClause(): ExtendedSettingExpressionWithProfileClauseContext | null {
        return this.getRuleContext(0, ExtendedSettingExpressionWithProfileClauseContext);
    }
    public INHERIT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INHERIT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_extendedSettingExpressionWithProfileOrInheritClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExtendedSettingExpressionWithProfileOrInheritClause) {
            return visitor.visitExtendedSettingExpressionWithProfileOrInheritClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExtendedSettingsWithInheritClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public extendedSettingExpressionWithProfileOrInheritClause(): ExtendedSettingExpressionWithProfileOrInheritClauseContext[];
    public extendedSettingExpressionWithProfileOrInheritClause(i: number): ExtendedSettingExpressionWithProfileOrInheritClauseContext | null;
    public extendedSettingExpressionWithProfileOrInheritClause(i?: number): ExtendedSettingExpressionWithProfileOrInheritClauseContext[] | ExtendedSettingExpressionWithProfileOrInheritClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExtendedSettingExpressionWithProfileOrInheritClauseContext);
        }

        return this.getRuleContext(i, ExtendedSettingExpressionWithProfileOrInheritClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_extendedSettingsWithInheritClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExtendedSettingsWithInheritClause) {
            return visitor.visitExtendedSettingsWithInheritClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateSettingsProfileStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public PROFILE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROFILE, 0)!;
    }
    public identifierList(): IdentifierListContext {
        return this.getRuleContext(0, IdentifierListContext)!;
    }
    public replaceOrIfNotExistsClause(): ReplaceOrIfNotExistsClauseContext | null {
        return this.getRuleContext(0, ReplaceOrIfNotExistsClauseContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public inClause(): InClauseContext | null {
        return this.getRuleContext(0, InClauseContext);
    }
    public extendedSettingsWithInheritClause(): ExtendedSettingsWithInheritClauseContext | null {
        return this.getRuleContext(0, ExtendedSettingsWithInheritClauseContext);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public subjectExpressionList(): SubjectExpressionListContext | null {
        return this.getRuleContext(0, SubjectExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createSettingsProfileStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateSettingsProfileStatement) {
            return visitor.visitCreateSettingsProfileStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedCollectionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public stringOrNumberLiteral(): StringOrNumberLiteralContext {
        return this.getRuleContext(0, StringOrNumberLiteralContext)!;
    }
    public OVERRIDABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OVERRIDABLE, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_namedCollectionExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNamedCollectionExpression) {
            return visitor.visitNamedCollectionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedCollectionExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public namedCollectionExpression(): NamedCollectionExpressionContext[];
    public namedCollectionExpression(i: number): NamedCollectionExpressionContext | null;
    public namedCollectionExpression(i?: number): NamedCollectionExpressionContext[] | NamedCollectionExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NamedCollectionExpressionContext);
        }

        return this.getRuleContext(i, NamedCollectionExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_namedCollectionExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNamedCollectionExpressionList) {
            return visitor.visitNamedCollectionExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateNamedCollectionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public NAMED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NAMED, 0)!;
    }
    public COLLECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLLECTION, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public namedCollectionExpressionList(): NamedCollectionExpressionListContext {
        return this.getRuleContext(0, NamedCollectionExpressionListContext)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createNamedCollectionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateNamedCollectionStatement) {
            return visitor.visitCreateNamedCollectionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionOperandContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public functionExpression(): FunctionExpressionContext | null {
        return this.getRuleContext(0, FunctionExpressionContext);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public intervalOperand(): IntervalOperandContext | null {
        return this.getRuleContext(0, IntervalOperandContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_expressionOperand;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExpressionOperand) {
            return visitor.visitExpressionOperand(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public expressionOperand(): ExpressionOperandContext[];
    public expressionOperand(i: number): ExpressionOperandContext | null;
    public expressionOperand(i?: number): ExpressionOperandContext[] | ExpressionOperandContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ExpressionOperandContext);
        }

        return this.getRuleContext(i, ExpressionOperandContext);
    }
    public ASTERISK(): antlr.TerminalNode[];
    public ASTERISK(i: number): antlr.TerminalNode | null;
    public ASTERISK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ASTERISK);
    	} else {
    		return this.getToken(ClickHouseParser.ASTERISK, i);
    	}
    }
    public PLUS(): antlr.TerminalNode[];
    public PLUS(i: number): antlr.TerminalNode | null;
    public PLUS(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.PLUS);
    	} else {
    		return this.getToken(ClickHouseParser.PLUS, i);
    	}
    }
    public DASH(): antlr.TerminalNode[];
    public DASH(i: number): antlr.TerminalNode | null;
    public DASH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DASH);
    	} else {
    		return this.getToken(ClickHouseParser.DASH, i);
    	}
    }
    public CONCAT(): antlr.TerminalNode[];
    public CONCAT(i: number): antlr.TerminalNode | null;
    public CONCAT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.CONCAT);
    	} else {
    		return this.getToken(ClickHouseParser.CONCAT, i);
    	}
    }
    public PERCENT(): antlr.TerminalNode[];
    public PERCENT(i: number): antlr.TerminalNode | null;
    public PERCENT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.PERCENT);
    	} else {
    		return this.getToken(ClickHouseParser.PERCENT, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_expression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExpression) {
            return visitor.visitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateFunctionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public FUNCTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FUNCTION, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public ARROW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ARROW_SYMBOL, 0)!;
    }
    public expression(): ExpressionContext {
        return this.getRuleContext(0, ExpressionContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createFunctionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateFunctionStatement) {
            return visitor.visitCreateFunctionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public DESCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCENDING, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASC, 0);
    }
    public ASCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASCENDING, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderType) {
            return visitor.visitOrderType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateIndexStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ON, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public orderType(): OrderTypeContext[];
    public orderType(i: number): OrderTypeContext | null;
    public orderType(i?: number): OrderTypeContext[] | OrderTypeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderTypeContext);
        }

        return this.getRuleContext(i, OrderTypeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TYPE, 0);
    }
    public GRANULARITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANULARITY, 0);
    }
    public numberLiteral(): NumberLiteralContext | null {
        return this.getRuleContext(0, NumberLiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createIndexStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateIndexStatement) {
            return visitor.visitCreateIndexStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public createDatabaseStatement(): CreateDatabaseStatementContext | null {
        return this.getRuleContext(0, CreateDatabaseStatementContext);
    }
    public createDictionaryStatement(): CreateDictionaryStatementContext | null {
        return this.getRuleContext(0, CreateDictionaryStatementContext);
    }
    public createLiveViewStatement(): CreateLiveViewStatementContext | null {
        return this.getRuleContext(0, CreateLiveViewStatementContext);
    }
    public createMaterializedViewStatement(): CreateMaterializedViewStatementContext | null {
        return this.getRuleContext(0, CreateMaterializedViewStatementContext);
    }
    public createTableStatement(): CreateTableStatementContext | null {
        return this.getRuleContext(0, CreateTableStatementContext);
    }
    public createViewStatement(): CreateViewStatementContext | null {
        return this.getRuleContext(0, CreateViewStatementContext);
    }
    public createUserStatement(): CreateUserStatementContext | null {
        return this.getRuleContext(0, CreateUserStatementContext);
    }
    public createRowPolicyStatement(): CreateRowPolicyStatementContext | null {
        return this.getRuleContext(0, CreateRowPolicyStatementContext);
    }
    public createQuotaStatement(): CreateQuotaStatementContext | null {
        return this.getRuleContext(0, CreateQuotaStatementContext);
    }
    public createRoleStatement(): CreateRoleStatementContext | null {
        return this.getRuleContext(0, CreateRoleStatementContext);
    }
    public createSettingsProfileStatement(): CreateSettingsProfileStatementContext | null {
        return this.getRuleContext(0, CreateSettingsProfileStatementContext);
    }
    public createNamedCollectionStatement(): CreateNamedCollectionStatementContext | null {
        return this.getRuleContext(0, CreateNamedCollectionStatementContext);
    }
    public createFunctionStatement(): CreateFunctionStatementContext | null {
        return this.getRuleContext(0, CreateFunctionStatementContext);
    }
    public createIndexStatement(): CreateIndexStatementContext | null {
        return this.getRuleContext(0, CreateIndexStatementContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreateStatement) {
            return visitor.visitCreateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionarySchemaClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public dictionaryAttributeDefinition(): DictionaryAttributeDefinitionContext[];
    public dictionaryAttributeDefinition(i: number): DictionaryAttributeDefinitionContext | null;
    public dictionaryAttributeDefinition(i?: number): DictionaryAttributeDefinitionContext[] | DictionaryAttributeDefinitionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryAttributeDefinitionContext);
        }

        return this.getRuleContext(i, DictionaryAttributeDefinitionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionarySchemaClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionarySchemaClause) {
            return visitor.visitDictionarySchemaClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryAttributeDefinitionContext extends antlr.ParserRuleContext {
    public attrs: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public DEFAULT(): antlr.TerminalNode[];
    public DEFAULT(i: number): antlr.TerminalNode | null;
    public DEFAULT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DEFAULT);
    	} else {
    		return this.getToken(ClickHouseParser.DEFAULT, i);
    	}
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public EXPRESSION(): antlr.TerminalNode[];
    public EXPRESSION(i: number): antlr.TerminalNode | null;
    public EXPRESSION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.EXPRESSION);
    	} else {
    		return this.getToken(ClickHouseParser.EXPRESSION, i);
    	}
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public HIERARCHICAL(): antlr.TerminalNode[];
    public HIERARCHICAL(i: number): antlr.TerminalNode | null;
    public HIERARCHICAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.HIERARCHICAL);
    	} else {
    		return this.getToken(ClickHouseParser.HIERARCHICAL, i);
    	}
    }
    public INJECTIVE(): antlr.TerminalNode[];
    public INJECTIVE(i: number): antlr.TerminalNode | null;
    public INJECTIVE(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.INJECTIVE);
    	} else {
    		return this.getToken(ClickHouseParser.INJECTIVE, i);
    	}
    }
    public IS_OBJECT_ID(): antlr.TerminalNode[];
    public IS_OBJECT_ID(i: number): antlr.TerminalNode | null;
    public IS_OBJECT_ID(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.IS_OBJECT_ID);
    	} else {
    		return this.getToken(ClickHouseParser.IS_OBJECT_ID, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryAttributeDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryAttributeDefinition) {
            return visitor.visitDictionaryAttributeDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryEngineClauseContext extends antlr.ParserRuleContext {
    public clauses: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public dictionaryPrimaryKeyClause(): DictionaryPrimaryKeyClauseContext | null {
        return this.getRuleContext(0, DictionaryPrimaryKeyClauseContext);
    }
    public sourceClause(): SourceClauseContext[];
    public sourceClause(i: number): SourceClauseContext | null;
    public sourceClause(i?: number): SourceClauseContext[] | SourceClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SourceClauseContext);
        }

        return this.getRuleContext(i, SourceClauseContext);
    }
    public lifetimeClause(): LifetimeClauseContext[];
    public lifetimeClause(i: number): LifetimeClauseContext | null;
    public lifetimeClause(i?: number): LifetimeClauseContext[] | LifetimeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LifetimeClauseContext);
        }

        return this.getRuleContext(i, LifetimeClauseContext);
    }
    public layoutClause(): LayoutClauseContext[];
    public layoutClause(i: number): LayoutClauseContext | null;
    public layoutClause(i?: number): LayoutClauseContext[] | LayoutClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LayoutClauseContext);
        }

        return this.getRuleContext(i, LayoutClauseContext);
    }
    public rangeClause(): RangeClauseContext[];
    public rangeClause(i: number): RangeClauseContext | null;
    public rangeClause(i?: number): RangeClauseContext[] | RangeClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RangeClauseContext);
        }

        return this.getRuleContext(i, RangeClauseContext);
    }
    public dictionarySettingsClause(): DictionarySettingsClauseContext[];
    public dictionarySettingsClause(i: number): DictionarySettingsClauseContext | null;
    public dictionarySettingsClause(i?: number): DictionarySettingsClauseContext[] | DictionarySettingsClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionarySettingsClauseContext);
        }

        return this.getRuleContext(i, DictionarySettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryEngineClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryEngineClause) {
            return visitor.visitDictionaryEngineClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryPrimaryKeyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PRIMARY, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryPrimaryKeyClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryPrimaryKeyClause) {
            return visitor.visitDictionaryPrimaryKeyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionaryArgumentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionaryArgumentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionaryArgumentExpression) {
            return visitor.visitDictionaryArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourceClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SOURCE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SOURCE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext[];
    public dictionaryArgumentExpression(i: number): DictionaryArgumentExpressionContext | null;
    public dictionaryArgumentExpression(i?: number): DictionaryArgumentExpressionContext[] | DictionaryArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryArgumentExpressionContext);
        }

        return this.getRuleContext(i, DictionaryArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sourceClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSourceClause) {
            return visitor.visitSourceClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LifetimeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIFETIME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIFETIME, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode[];
    public DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
    	}
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_lifetimeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLifetimeClause) {
            return visitor.visitLifetimeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LayoutClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LAYOUT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LAYOUT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public dictionaryArgumentExpression(): DictionaryArgumentExpressionContext[];
    public dictionaryArgumentExpression(i: number): DictionaryArgumentExpressionContext | null;
    public dictionaryArgumentExpression(i?: number): DictionaryArgumentExpressionContext[] | DictionaryArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(DictionaryArgumentExpressionContext);
        }

        return this.getRuleContext(i, DictionaryArgumentExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_layoutClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLayoutClause) {
            return visitor.visitLayoutClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RangeClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RANGE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RANGE, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_rangeClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRangeClause) {
            return visitor.visitRangeClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictionarySettingsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictionarySettingsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictionarySettingsClause) {
            return visitor.visitDictionarySettingsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ClusterClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ON, 0)!;
    }
    public CLUSTER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CLUSTER, 0)!;
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_clusterClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitClusterClause) {
            return visitor.visitClusterClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UuidClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public UUID(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.UUID, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_uuidClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUuidClause) {
            return visitor.visitUuidClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DestinationClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_destinationClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDestinationClause) {
            return visitor.visitDestinationClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubqueryClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_subqueryClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSubqueryClause) {
            return visitor.visitSubqueryClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableSchemaClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableSchemaClause;
    }
    public override copyFrom(ctx: TableSchemaClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class SchemaAsTableClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaAsTableClause) {
            return visitor.visitSchemaAsTableClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SchemaAsFunctionClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        return this.getRuleContext(0, TableFunctionExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaAsFunctionClause) {
            return visitor.visitSchemaAsFunctionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class SchemaDescriptionClauseContext extends TableSchemaClauseContext {
    public constructor(ctx: TableSchemaClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public tableElementExpression(): TableElementExpressionContext[];
    public tableElementExpression(i: number): TableElementExpressionContext | null;
    public tableElementExpression(i?: number): TableElementExpressionContext[] | TableElementExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableElementExpressionContext);
        }

        return this.getRuleContext(i, TableElementExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSchemaDescriptionClause) {
            return visitor.visitSchemaDescriptionClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineClauseContext extends antlr.ParserRuleContext {
    public clauses: Set<string> = new Set();
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public engineExpression(): EngineExpressionContext {
        return this.getRuleContext(0, EngineExpressionContext)!;
    }
    public orderByClause(): OrderByClauseContext[];
    public orderByClause(i: number): OrderByClauseContext | null;
    public orderByClause(i?: number): OrderByClauseContext[] | OrderByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderByClauseContext);
        }

        return this.getRuleContext(i, OrderByClauseContext);
    }
    public partitionByClause(): PartitionByClauseContext[];
    public partitionByClause(i: number): PartitionByClauseContext | null;
    public partitionByClause(i?: number): PartitionByClauseContext[] | PartitionByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PartitionByClauseContext);
        }

        return this.getRuleContext(i, PartitionByClauseContext);
    }
    public primaryKeyClause(): PrimaryKeyClauseContext[];
    public primaryKeyClause(i: number): PrimaryKeyClauseContext | null;
    public primaryKeyClause(i?: number): PrimaryKeyClauseContext[] | PrimaryKeyClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrimaryKeyClauseContext);
        }

        return this.getRuleContext(i, PrimaryKeyClauseContext);
    }
    public sampleByClause(): SampleByClauseContext[];
    public sampleByClause(i: number): SampleByClauseContext | null;
    public sampleByClause(i?: number): SampleByClauseContext[] | SampleByClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SampleByClauseContext);
        }

        return this.getRuleContext(i, SampleByClauseContext);
    }
    public ttlClause(): TtlClauseContext[];
    public ttlClause(i: number): TtlClauseContext | null;
    public ttlClause(i?: number): TtlClauseContext[] | TtlClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TtlClauseContext);
        }

        return this.getRuleContext(i, TtlClauseContext);
    }
    public settingsClause(): SettingsClauseContext[];
    public settingsClause(i: number): SettingsClauseContext | null;
    public settingsClause(i?: number): SettingsClauseContext[] | SettingsClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SettingsClauseContext);
        }

        return this.getRuleContext(i, SettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_engineClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEngineClause) {
            return visitor.visitEngineClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PartitionByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_partitionByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPartitionByClause) {
            return visitor.visitPartitionByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrimaryKeyClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PRIMARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PRIMARY, 0)!;
    }
    public KEY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KEY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_primaryKeyClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrimaryKeyClause) {
            return visitor.visitPrimaryKeyClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAMPLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SAMPLE, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sampleByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSampleByClause) {
            return visitor.visitSampleByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TtlClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TTL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TTL, 0)!;
    }
    public ttlExpression(): TtlExpressionContext[];
    public ttlExpression(i: number): TtlExpressionContext | null;
    public ttlExpression(i?: number): TtlExpressionContext[] | TtlExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TtlExpressionContext);
        }

        return this.getRuleContext(i, TtlExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ttlClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTtlClause) {
            return visitor.visitTtlClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EngineExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ENGINE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ENGINE, 0)!;
    }
    public identifierOrNull(): IdentifierOrNullContext {
        return this.getRuleContext(0, IdentifierOrNullContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_engineExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEngineExpression) {
            return visitor.visitEngineExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableElementExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableElementExpression;
    }
    public override copyFrom(ctx: TableElementExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class TableElementExpressionColumnContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableColumnDefinition(): TableColumnDefinitionContext {
        return this.getRuleContext(0, TableColumnDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionColumn) {
            return visitor.visitTableElementExpressionColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionConstraintContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CONSTRAINT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public CHECK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CHECK, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionConstraint) {
            return visitor.visitTableElementExpressionConstraint(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionIndexContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INDEX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INDEX, 0)!;
    }
    public tableIndexDefinition(): TableIndexDefinitionContext {
        return this.getRuleContext(0, TableIndexDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionIndex) {
            return visitor.visitTableElementExpressionIndex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableElementExpressionProjectionContext extends TableElementExpressionContext {
    public constructor(ctx: TableElementExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public PROJECTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PROJECTION, 0)!;
    }
    public tableProjectionDefinition(): TableProjectionDefinitionContext {
        return this.getRuleContext(0, TableProjectionDefinitionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableElementExpressionProjection) {
            return visitor.visitTableElementExpressionProjection(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext | null {
        return this.getRuleContext(0, ColumnTypeExpressionContext);
    }
    public tableColumnPropertyExpression(): TableColumnPropertyExpressionContext | null {
        return this.getRuleContext(0, TableColumnPropertyExpressionContext);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public codecExpression(): CodecExpressionContext | null {
        return this.getRuleContext(0, CodecExpressionContext);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnDefinition) {
            return visitor.visitTableColumnDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableColumnPropertyExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableColumnPropertyExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableColumnPropertyExpression) {
            return visitor.visitTableColumnPropertyExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIndexDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public TYPE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TYPE, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public GRANULARITY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GRANULARITY, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableIndexDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableIndexDefinition) {
            return visitor.visitTableIndexDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableProjectionDefinitionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public projectionSelectStatement(): ProjectionSelectStatementContext {
        return this.getRuleContext(0, ProjectionSelectStatementContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableProjectionDefinition;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableProjectionDefinition) {
            return visitor.visitTableProjectionDefinition(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CodecExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CODEC(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CODEC, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public codecArgExpression(): CodecArgExpressionContext[];
    public codecArgExpression(i: number): CodecArgExpressionContext | null;
    public codecArgExpression(i?: number): CodecArgExpressionContext[] | CodecArgExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(CodecArgExpressionContext);
        }

        return this.getRuleContext(i, CodecArgExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_codecExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCodecExpression) {
            return visitor.visitCodecExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CodecArgExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_codecArgExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCodecArgExpression) {
            return visitor.visitCodecArgExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TtlExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ttlExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTtlExpression) {
            return visitor.visitTtlExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DescribeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_describeStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDescribeStatement) {
            return visitor.visitDescribeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dropStatement;
    }
    public override copyFrom(ctx: DropStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class DropDatabaseStatementContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropDatabaseStatement) {
            return visitor.visitDropDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DropTableStatementContext extends DropStatementContext {
    public constructor(ctx: DropStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO, 0);
    }
    public DELAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELAY, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropTableStatement) {
            return visitor.visitDropTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExistsStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_existsStatement;
    }
    public override copyFrom(ctx: ExistsStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExistsDatabaseStatementContext extends ExistsStatementContext {
    public constructor(ctx: ExistsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXISTS, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExistsDatabaseStatement) {
            return visitor.visitExistsDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExistsTableStatementContext extends ExistsStatementContext {
    public constructor(ctx: ExistsStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXISTS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXISTS, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExistsTableStatement) {
            return visitor.visitExistsTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ExplainStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_explainStatement;
    }
    public override copyFrom(ctx: ExplainStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ExplainASTStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public AST(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AST, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainASTStatement) {
            return visitor.visitExplainASTStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainQueryTreeStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public QUERY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.QUERY, 0)!;
    }
    public TREE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TREE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainQueryTreeStatement) {
            return visitor.visitExplainQueryTreeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainPlanStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public PLAN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PLAN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainPlanStatement) {
            return visitor.visitExplainPlanStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainDefaultStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainDefaultStatement) {
            return visitor.visitExplainDefaultStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainEstimateStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public ESTIMATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ESTIMATE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainEstimateStatement) {
            return visitor.visitExplainEstimateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainSyntaxStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public SYNTAX(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SYNTAX, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainSyntaxStatement) {
            return visitor.visitExplainSyntaxStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ExplainPipelineStatementContext extends ExplainStatementContext {
    public constructor(ctx: ExplainStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXPLAIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXPLAIN, 0)!;
    }
    public PIPELINE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PIPELINE, 0)!;
    }
    public notInsertStatement(): NotInsertStatementContext {
        return this.getRuleContext(0, NotInsertStatementContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitExplainPipelineStatement) {
            return visitor.visitExplainPipelineStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RevokeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public REVOKE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REVOKE, 0)!;
    }
    public privilegeList(): PrivilegeListContext | null {
        return this.getRuleContext(0, PrivilegeListContext);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ON, 0);
    }
    public accessSubjectIdentifier(): AccessSubjectIdentifierContext | null {
        return this.getRuleContext(0, AccessSubjectIdentifierContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public subjectExpressionList(): SubjectExpressionListContext {
        return this.getRuleContext(0, SubjectExpressionListContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public roleExpressionList(): RoleExpressionListContext | null {
        return this.getRuleContext(0, RoleExpressionListContext);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_revokeStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRevokeStatement) {
            return visitor.visitRevokeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SubjectExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public subjectExpression(): SubjectExpressionContext[];
    public subjectExpression(i: number): SubjectExpressionContext | null;
    public subjectExpression(i?: number): SubjectExpressionContext[] | SubjectExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SubjectExpressionContext);
        }

        return this.getRuleContext(i, SubjectExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_subjectExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSubjectExpressionList) {
            return visitor.visitSubjectExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifier(): UserIdentifierContext[];
    public userIdentifier(i: number): UserIdentifierContext | null;
    public userIdentifier(i?: number): UserIdentifierContext[] | UserIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserIdentifierContext);
        }

        return this.getRuleContext(i, UserIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserExpressionList) {
            return visitor.visitUserExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public roleIdentifier(): RoleIdentifierContext[];
    public roleIdentifier(i: number): RoleIdentifierContext | null;
    public roleIdentifier(i?: number): RoleIdentifierContext[] | RoleIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RoleIdentifierContext);
        }

        return this.getRuleContext(i, RoleIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_roleExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRoleExpressionList) {
            return visitor.visitRoleExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GrantStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GRANT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GRANT, 0)!;
    }
    public TO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TO, 0)!;
    }
    public userOrRoleExpressionList(): UserOrRoleExpressionListContext {
        return this.getRuleContext(0, UserOrRoleExpressionListContext)!;
    }
    public withGrantOrReplaceOption(): WithGrantOrReplaceOptionContext | null {
        return this.getRuleContext(0, WithGrantOrReplaceOptionContext);
    }
    public privilegeList(): PrivilegeListContext[];
    public privilegeList(i: number): PrivilegeListContext | null;
    public privilegeList(i?: number): PrivilegeListContext[] | PrivilegeListContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeListContext);
        }

        return this.getRuleContext(i, PrivilegeListContext);
    }
    public ON(): antlr.TerminalNode[];
    public ON(i: number): antlr.TerminalNode | null;
    public ON(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ON);
    	} else {
    		return this.getToken(ClickHouseParser.ON, i);
    	}
    }
    public accessSubjectIdentifier(): AccessSubjectIdentifierContext[];
    public accessSubjectIdentifier(i: number): AccessSubjectIdentifierContext | null;
    public accessSubjectIdentifier(i?: number): AccessSubjectIdentifierContext[] | AccessSubjectIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(AccessSubjectIdentifierContext);
        }

        return this.getRuleContext(i, AccessSubjectIdentifierContext);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public roleExpressionList(): RoleExpressionListContext | null {
        return this.getRuleContext(0, RoleExpressionListContext);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public withReplaceOption(): WithReplaceOptionContext | null {
        return this.getRuleContext(0, WithReplaceOptionContext);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT, 0);
    }
    public GRANTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANTS, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_grantStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGrantStatement) {
            return visitor.visitGrantStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithGrantOrReplaceOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANT, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public withReplaceOption(): WithReplaceOptionContext | null {
        return this.getRuleContext(0, WithReplaceOptionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_withGrantOrReplaceOption;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWithGrantOrReplaceOption) {
            return visitor.visitWithGrantOrReplaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithReplaceOptionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WITH, 0)!;
    }
    public REPLACE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.REPLACE, 0)!;
    }
    public OPTION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OPTION, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_withReplaceOption;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWithReplaceOption) {
            return visitor.visitWithReplaceOption(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AccessSubjectIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public ASTERISK(): antlr.TerminalNode[];
    public ASTERISK(i: number): antlr.TerminalNode | null;
    public ASTERISK(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ASTERISK);
    	} else {
    		return this.getToken(ClickHouseParser.ASTERISK, i);
    	}
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_accessSubjectIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAccessSubjectIdentifier) {
            return visitor.visitAccessSubjectIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public privilege(): PrivilegeContext[];
    public privilege(i: number): PrivilegeContext | null;
    public privilege(i?: number): PrivilegeContext[] | PrivilegeContext | null {
        if (i === undefined) {
            return this.getRuleContexts(PrivilegeContext);
        }

        return this.getRuleContext(i, PrivilegeContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_privilegeList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilegeList) {
            return visitor.visitPrivilegeList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RoleIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_roleIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRoleIdentifier) {
            return visitor.visitRoleIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT_USER, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserIdentifier) {
            return visitor.visitUserIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserOrRoleExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userOrRoleIdentifier(): UserOrRoleIdentifierContext[];
    public userOrRoleIdentifier(i: number): UserOrRoleIdentifierContext | null;
    public userOrRoleIdentifier(i?: number): UserOrRoleIdentifierContext[] | UserOrRoleIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(UserOrRoleIdentifierContext);
        }

        return this.getRuleContext(i, UserOrRoleIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userOrRoleExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserOrRoleExpressionList) {
            return visitor.visitUserOrRoleExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UserOrRoleIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public userIdentifier(): UserIdentifierContext | null {
        return this.getRuleContext(0, UserIdentifierContext);
    }
    public roleIdentifier(): RoleIdentifierContext | null {
        return this.getRuleContext(0, RoleIdentifierContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_userOrRoleIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUserOrRoleIdentifier) {
            return visitor.visitUserOrRoleIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectPrivilege) {
            return visitor.visitSelectPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INSERT, 0)!;
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_insertPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInsertPrivilege) {
            return visitor.visitInsertPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class CreatePrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public ARBITRARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARBITRARY, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_createPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitCreatePrivilege) {
            return visitor.visitCreatePrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DropPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DROP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DROP, 0)!;
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dropPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDropPrivilege) {
            return visitor.visitDropPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DATABASES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASES, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLES, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMNS, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_showPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowPrivilege) {
            return visitor.visitShowPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntrospectionPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INTROSPECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTROSPECTION, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTIONS, 0);
    }
    public ADDRESSTOLINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINE, 0);
    }
    public ADDRESSTOLINEWITHINLINES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINEWITHINLINES, 0);
    }
    public ADDRESSTOSYMBOL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOSYMBOL, 0);
    }
    public DEMANGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEMANGLE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_introspectionPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIntrospectionPrivilege) {
            return visitor.visitIntrospectionPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SourcePrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SOURCES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCES, 0);
    }
    public AZURE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AZURE, 0);
    }
    public FILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FILE, 0);
    }
    public HDFS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HDFS, 0);
    }
    public HIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HIVE, 0);
    }
    public JDBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JDBC, 0);
    }
    public MONGO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONGO, 0);
    }
    public MYSQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQL, 0);
    }
    public ODBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ODBC, 0);
    }
    public POSTGRES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POSTGRES, 0);
    }
    public REDIS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REDIS, 0);
    }
    public REMOTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOTE, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.S3, 0);
    }
    public SQLITE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQLITE, 0);
    }
    public URL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.URL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sourcePrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSourcePrivilege) {
            return visitor.visitSourcePrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DictPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DICTGET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGET, 0);
    }
    public DICTHAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTHAS, 0);
    }
    public DICTGETHIERARCHY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGETHIERARCHY, 0);
    }
    public DICTISIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTISIN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dictPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDictPrivilege) {
            return visitor.visitDictPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AlterPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UPDATE, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADD, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MODIFY, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public CLEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLEAR, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RENAME, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public MATERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORDER, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAMPLE, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SETTING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTING, 0);
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVE, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCH, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARTITION, 0);
    }
    public PART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PART, 0);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FREEZE, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REFRESH, 0);
    }
    public LIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIVE, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECURITY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alterPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlterPrivilege) {
            return visitor.visitAlterPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AccessManagementPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ACCESS, 0);
    }
    public MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MANAGEMENT, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLE, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICY, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public QUOTA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUOTA, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILE, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW, 0);
    }
    public SHOW_USERS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_USERS, 0);
    }
    public SHOW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROLES, 0);
    }
    public SHOW_ROW_POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROW_POLICIES, 0);
    }
    public POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICIES, 0);
    }
    public SHOW_QUOTAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_QUOTAS, 0);
    }
    public SHOW_SETTINGS_PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_SETTINGS_PROFILES, 0);
    }
    public PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILES, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQL, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECURITY, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public ALLOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALLOW, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_accessManagementPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAccessManagementPrivilege) {
            return visitor.visitAccessManagementPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SystemPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYSTEM, 0);
    }
    public SHUTDOWN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHUTDOWN, 0);
    }
    public KILL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KILL, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CACHE, 0);
    }
    public DNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DNS, 0);
    }
    public MARK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARK, 0);
    }
    public UNCOMPRESSED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNCOMPRESSED, 0);
    }
    public MARKS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARKS, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RELOAD, 0);
    }
    public CONFIG(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONFIG, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public EMBEDDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EMBEDDED, 0);
    }
    public MERGES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MERGES, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STOP, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.START, 0);
    }
    public FETCHES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCHES, 0);
    }
    public MOVES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVES, 0);
    }
    public SENDS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SENDS, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
    }
    public REPLICATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATED, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATION, 0);
    }
    public QUEUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUEUES, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICA, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTART, 0);
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLUSH, 0);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOGS, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_systemPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSystemPrivilege) {
            return visitor.visitSystemPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NamedCollectionAdminPrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public NAMED(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NAMED, 0)!;
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTION, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public CONTROL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONTROL, 0);
    }
    public USAGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USAGE, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW, 0);
    }
    public COLLECTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTIONS, 0);
    }
    public SECRETS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECRETS, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_namedCollectionAdminPrivilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNamedCollectionAdminPrivilege) {
            return visitor.visitNamedCollectionAdminPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrivilegeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectPrivilege(): SelectPrivilegeContext | null {
        return this.getRuleContext(0, SelectPrivilegeContext);
    }
    public insertPrivilege(): InsertPrivilegeContext | null {
        return this.getRuleContext(0, InsertPrivilegeContext);
    }
    public createPrivilege(): CreatePrivilegeContext | null {
        return this.getRuleContext(0, CreatePrivilegeContext);
    }
    public dropPrivilege(): DropPrivilegeContext | null {
        return this.getRuleContext(0, DropPrivilegeContext);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRUNCATE, 0);
    }
    public KILL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KILL, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY, 0);
    }
    public OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0);
    }
    public showPrivilege(): ShowPrivilegeContext | null {
        return this.getRuleContext(0, ShowPrivilegeContext);
    }
    public introspectionPrivilege(): IntrospectionPrivilegeContext | null {
        return this.getRuleContext(0, IntrospectionPrivilegeContext);
    }
    public sourcePrivilege(): SourcePrivilegeContext | null {
        return this.getRuleContext(0, SourcePrivilegeContext);
    }
    public dictPrivilege(): DictPrivilegeContext | null {
        return this.getRuleContext(0, DictPrivilegeContext);
    }
    public alterPrivilege(): AlterPrivilegeContext | null {
        return this.getRuleContext(0, AlterPrivilegeContext);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public DISPLAYSECRETSINSHOWANDSELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT, 0);
    }
    public accessManagementPrivilege(): AccessManagementPrivilegeContext | null {
        return this.getRuleContext(0, AccessManagementPrivilegeContext);
    }
    public systemPrivilege(): SystemPrivilegeContext | null {
        return this.getRuleContext(0, SystemPrivilegeContext);
    }
    public namedCollectionAdminPrivilege(): NamedCollectionAdminPrivilegeContext | null {
        return this.getRuleContext(0, NamedCollectionAdminPrivilegeContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ENGINE, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public USAGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USAGE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_privilege;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrivilege) {
            return visitor.visitPrivilege(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public INSERT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INSERT, 0)!;
    }
    public INTO(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INTO, 0)!;
    }
    public dataClause(): DataClauseContext {
        return this.getRuleContext(0, DataClauseContext)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext | null {
        return this.getRuleContext(0, TableFunctionExpressionContext);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public columnsOrExceptClause(): ColumnsOrExceptClauseContext | null {
        return this.getRuleContext(0, ColumnsOrExceptClauseContext);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_insertStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInsertStatement) {
            return visitor.visitInsertStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsOrExceptClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnsClause(): ColumnsClauseContext | null {
        return this.getRuleContext(0, ColumnsClauseContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASTERISK, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnsOrExceptClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsOrExceptClause) {
            return visitor.visitColumnsOrExceptClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnIdentifier(): ColumnIdentifierContext[];
    public columnIdentifier(i: number): ColumnIdentifierContext | null;
    public columnIdentifier(i?: number): ColumnIdentifierContext[] | ColumnIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnIdentifierContext);
        }

        return this.getRuleContext(i, ColumnIdentifierContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsClause) {
            return visitor.visitColumnsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class InsertFormatTypeContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TABSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATED, 0);
    }
    public TABSEPARATEDRAW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAW, 0);
    }
    public TABSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMES, 0);
    }
    public TABSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public TABSEPARATEDRAWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMES, 0);
    }
    public TABSEPARATEDRAWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATE, 0);
    }
    public TEMPLATEIGNORESPACES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATEIGNORESPACES, 0);
    }
    public CSV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSV, 0);
    }
    public CSVWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMES, 0);
    }
    public CSVWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMESANDTYPES, 0);
    }
    public CUSTOMSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATED, 0);
    }
    public CUSTOMSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMES, 0);
    }
    public CUSTOMSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VALUES, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON, 0);
    }
    public JSONASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASSTRING, 0);
    }
    public JSONASOBJECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASOBJECT, 0);
    }
    public JSONSTRINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGS, 0);
    }
    public JSONCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNS, 0);
    }
    public JSONCOLUMNSWITHMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNSWITHMETADATA, 0);
    }
    public JSONCOMPACT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACT, 0);
    }
    public JSONCOMPACTCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTCOLUMNS, 0);
    }
    public JSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONEACHROW, 0);
    }
    public JSONSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROW, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONOBJECTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONOBJECTEACHROW, 0);
    }
    public BSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BSONEACHROW, 0);
    }
    public TSKV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TSKV, 0);
    }
    public PROTOBUF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUF, 0);
    }
    public PROTOBUFSINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFSINGLE, 0);
    }
    public PROTOBUFLIST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFLIST, 0);
    }
    public AVRO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVRO, 0);
    }
    public AVROCONFLUENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVROCONFLUENT, 0);
    }
    public PARQUET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUET, 0);
    }
    public PARQUETMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUETMETADATA, 0);
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROW, 0);
    }
    public ARROWSTREAM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROWSTREAM, 0);
    }
    public ORC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORC, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ONE, 0);
    }
    public NPY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NPY, 0);
    }
    public ROWBINARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARY, 0);
    }
    public ROWBINARYWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMES, 0);
    }
    public ROWBINARYWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMESANDTYPES, 0);
    }
    public ROWBINARYWITHDEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHDEFAULTS, 0);
    }
    public NATIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NATIVE, 0);
    }
    public CAPNPROTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CAPNPROTO, 0);
    }
    public LINEASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LINEASSTRING, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REGEXP, 0);
    }
    public RAWBLOB(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RAWBLOB, 0);
    }
    public MSGPACK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MSGPACK, 0);
    }
    public MYSQLDUMP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQLDUMP, 0);
    }
    public DWARF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DWARF, 0);
    }
    public FORM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORM, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_insertFormatType;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInsertFormatType) {
            return visitor.visitInsertFormatType(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DataClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_dataClause;
    }
    public override copyFrom(ctx: DataClauseContext): void {
        super.copyFrom(ctx);
    }
}
export class DataClauseValuesContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public valuesStatement(): ValuesStatementContext {
        return this.getRuleContext(0, ValuesStatementContext)!;
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORMAT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseValues) {
            return visitor.visitDataClauseValues(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DataClauseFormatContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FORMAT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FORMAT, 0)!;
    }
    public insertFormatType(): InsertFormatTypeContext {
        return this.getRuleContext(0, InsertFormatTypeContext)!;
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseFormat) {
            return visitor.visitDataClauseFormat(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class DataClauseSelectContext extends DataClauseContext {
    public constructor(ctx: DataClauseContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public EOF(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EOF, 0)!;
    }
    public SEMICOLON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMICOLON, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDataClauseSelect) {
            return visitor.visitDataClauseSelect(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext[];
    public literal(i: number): LiteralContext | null;
    public literal(i?: number): LiteralContext[] | LiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(LiteralContext);
        }

        return this.getRuleContext(i, LiteralContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_literalList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLiteralList) {
            return visitor.visitLiteralList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public numberLiteral(): NumberLiteralContext[];
    public numberLiteral(i: number): NumberLiteralContext | null;
    public numberLiteral(i?: number): NumberLiteralContext[] | NumberLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumberLiteralContext);
        }

        return this.getRuleContext(i, NumberLiteralContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public functionExpression(): FunctionExpressionContext | null {
        return this.getRuleContext(0, FunctionExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valueIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValueIdentifier) {
            return visitor.visitValueIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValueOrArrayIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public valueIdentifier(): ValueIdentifierContext | null {
        return this.getRuleContext(0, ValueIdentifierContext);
    }
    public arrayIdentifier(): ArrayIdentifierContext | null {
        return this.getRuleContext(0, ArrayIdentifierContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valueOrArrayIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValueOrArrayIdentifier) {
            return visitor.visitValueOrArrayIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LBRACKET, 0)!;
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RBRACKET, 0)!;
    }
    public valueOrArrayIdentifier(): ValueOrArrayIdentifierContext[];
    public valueOrArrayIdentifier(i: number): ValueOrArrayIdentifierContext | null;
    public valueOrArrayIdentifier(i?: number): ValueOrArrayIdentifierContext[] | ValueOrArrayIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueOrArrayIdentifierContext);
        }

        return this.getRuleContext(i, ValueOrArrayIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_arrayIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitArrayIdentifier) {
            return visitor.visitArrayIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public valueOrArrayIdentifier(): ValueOrArrayIdentifierContext[];
    public valueOrArrayIdentifier(i: number): ValueOrArrayIdentifierContext | null;
    public valueOrArrayIdentifier(i?: number): ValueOrArrayIdentifierContext[] | ValueOrArrayIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValueOrArrayIdentifierContext);
        }

        return this.getRuleContext(i, ValueOrArrayIdentifierContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valuesClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValuesClause) {
            return visitor.visitValuesClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ValuesStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public VALUES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.VALUES, 0)!;
    }
    public valuesClause(): ValuesClauseContext[];
    public valuesClause(i: number): ValuesClauseContext | null;
    public valuesClause(i?: number): ValuesClauseContext[] | ValuesClauseContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ValuesClauseContext);
        }

        return this.getRuleContext(i, ValuesClauseContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_valuesStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitValuesStatement) {
            return visitor.visitValuesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KillStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_killStatement;
    }
    public override copyFrom(ctx: KillStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class KillMutationStatementContext extends KillStatementContext {
    public constructor(ctx: KillStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public KILL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.KILL, 0)!;
    }
    public MUTATION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.MUTATION, 0)!;
    }
    public whereClause(): WhereClauseContext {
        return this.getRuleContext(0, WhereClauseContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASYNC, 0);
    }
    public TEST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEST, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKillMutationStatement) {
            return visitor.visitKillMutationStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OptimizeStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public OPTIMIZE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public partitionClause(): PartitionClauseContext | null {
        return this.getRuleContext(0, PartitionClauseContext);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public DEDUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_optimizeStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOptimizeStatement) {
            return visitor.visitOptimizeStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RenameStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public RENAME(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RENAME, 0)!;
    }
    public TABLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext[];
    public tableIdentifier(i: number): TableIdentifierContext | null;
    public tableIdentifier(i?: number): TableIdentifierContext[] | TableIdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableIdentifierContext);
        }

        return this.getRuleContext(i, TableIdentifierContext);
    }
    public TO(): antlr.TerminalNode[];
    public TO(i: number): antlr.TerminalNode | null;
    public TO(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.TO);
    	} else {
    		return this.getToken(ClickHouseParser.TO, i);
    	}
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_renameStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRenameStatement) {
            return visitor.visitRenameStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProjectionSelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public projectionOrderByClause(): ProjectionOrderByClauseContext | null {
        return this.getRuleContext(0, ProjectionOrderByClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_projectionSelectStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitProjectionSelectStatement) {
            return visitor.visitProjectionSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectUnionStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatementWithParentheses(): SelectStatementWithParenthesesContext[];
    public selectStatementWithParentheses(i: number): SelectStatementWithParenthesesContext | null;
    public selectStatementWithParentheses(i?: number): SelectStatementWithParenthesesContext[] | SelectStatementWithParenthesesContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SelectStatementWithParenthesesContext);
        }

        return this.getRuleContext(i, SelectStatementWithParenthesesContext);
    }
    public UNION(): antlr.TerminalNode[];
    public UNION(i: number): antlr.TerminalNode | null;
    public UNION(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.UNION);
    	} else {
    		return this.getToken(ClickHouseParser.UNION, i);
    	}
    }
    public ALL(): antlr.TerminalNode[];
    public ALL(i: number): antlr.TerminalNode | null;
    public ALL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.ALL);
    	} else {
    		return this.getToken(ClickHouseParser.ALL, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectUnionStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectUnionStatement) {
            return visitor.visitSelectUnionStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementWithParenthesesContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public selectStatement(): SelectStatementContext | null {
        return this.getRuleContext(0, SelectStatementContext);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public selectUnionStatement(): SelectUnionStatementContext | null {
        return this.getRuleContext(0, SelectUnionStatementContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectStatementWithParentheses;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatementWithParentheses) {
            return visitor.visitSelectStatementWithParentheses(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SelectStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SELECT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SELECT, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public withClause(): WithClauseContext | null {
        return this.getRuleContext(0, WithClauseContext);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public topClause(): TopClauseContext | null {
        return this.getRuleContext(0, TopClauseContext);
    }
    public fromClause(): FromClauseContext | null {
        return this.getRuleContext(0, FromClauseContext);
    }
    public arrayJoinClause(): ArrayJoinClauseContext | null {
        return this.getRuleContext(0, ArrayJoinClauseContext);
    }
    public windowClause(): WindowClauseContext | null {
        return this.getRuleContext(0, WindowClauseContext);
    }
    public prewhereClause(): PrewhereClauseContext | null {
        return this.getRuleContext(0, PrewhereClauseContext);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public groupByClause(): GroupByClauseContext | null {
        return this.getRuleContext(0, GroupByClauseContext);
    }
    public WITH(): antlr.TerminalNode[];
    public WITH(i: number): antlr.TerminalNode | null;
    public WITH(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.WITH);
    	} else {
    		return this.getToken(ClickHouseParser.WITH, i);
    	}
    }
    public TOTALS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOTALS, 0);
    }
    public havingClause(): HavingClauseContext | null {
        return this.getRuleContext(0, HavingClauseContext);
    }
    public orderByClause(): OrderByClauseContext | null {
        return this.getRuleContext(0, OrderByClauseContext);
    }
    public limitByClause(): LimitByClauseContext | null {
        return this.getRuleContext(0, LimitByClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public settingsClause(): SettingsClauseContext | null {
        return this.getRuleContext(0, SettingsClauseContext);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_selectStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSelectStatement) {
            return visitor.visitSelectStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WithClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WITH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WITH, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_withClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWithClause) {
            return visitor.visitWithClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TopClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TOP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TOP, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_topClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTopClause) {
            return visitor.visitTopClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FromClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public joinExpression(): JoinExpressionContext {
        return this.getRuleContext(0, JoinExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_fromClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFromClause) {
            return visitor.visitFromClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ArrayJoinClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARRAY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ARRAY, 0)!;
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.JOIN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_arrayJoinClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitArrayJoinClause) {
            return visitor.visitArrayJoinClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WINDOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WINDOW, 0)!;
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public windowExpression(): WindowExpressionContext {
        return this.getRuleContext(0, WindowExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowClause) {
            return visitor.visitWindowClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class PrewhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PREWHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PREWHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_prewhereClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitPrewhereClause) {
            return visitor.visitPrewhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WhereClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WHERE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WHERE, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_whereClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWhereClause) {
            return visitor.visitWhereClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class GroupByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public GROUP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.GROUP, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_groupByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitGroupByClause) {
            return visitor.visitGroupByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class HavingClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public HAVING(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.HAVING, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_havingClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitHavingClause) {
            return visitor.visitHavingClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public orderExpressionList(): OrderExpressionListContext {
        return this.getRuleContext(0, OrderExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderByClause) {
            return visitor.visitOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ProjectionOrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_projectionOrderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitProjectionOrderByClause) {
            return visitor.visitProjectionOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIMIT, 0)!;
    }
    public limitExpression(): LimitExpressionContext {
        return this.getRuleContext(0, LimitExpressionContext)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitByClause) {
            return visitor.visitLimitByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public LIMIT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LIMIT, 0)!;
    }
    public limitExpression(): LimitExpressionContext {
        return this.getRuleContext(0, LimitExpressionContext)!;
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitClause) {
            return visitor.visitLimitClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingsClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SETTINGS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SETTINGS, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingsClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingsClause) {
            return visitor.visitSettingsClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinExpression;
    }
    public override copyFrom(ctx: JoinExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class JoinExpressionParensContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public joinExpression(): JoinExpressionContext {
        return this.getRuleContext(0, JoinExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionParens) {
            return visitor.visitJoinExpressionParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionTableContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public sampleClause(): SampleClauseContext | null {
        return this.getRuleContext(0, SampleClauseContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionTable) {
            return visitor.visitJoinExpressionTable(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionCrossOpContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public joinExpression(): JoinExpressionContext[];
    public joinExpression(i: number): JoinExpressionContext | null;
    public joinExpression(i?: number): JoinExpressionContext[] | JoinExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinExpressionContext);
        }

        return this.getRuleContext(i, JoinExpressionContext);
    }
    public joinOperatorCross(): JoinOperatorCrossContext {
        return this.getRuleContext(0, JoinOperatorCrossContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionCrossOp) {
            return visitor.visitJoinExpressionCrossOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinExpressionOpContext extends JoinExpressionContext {
    public constructor(ctx: JoinExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public joinExpression(): JoinExpressionContext[];
    public joinExpression(i: number): JoinExpressionContext | null;
    public joinExpression(i?: number): JoinExpressionContext[] | JoinExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(JoinExpressionContext);
        }

        return this.getRuleContext(i, JoinExpressionContext);
    }
    public JOIN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.JOIN, 0)!;
    }
    public joinConstraintClause(): JoinConstraintClauseContext {
        return this.getRuleContext(0, JoinConstraintClauseContext)!;
    }
    public joinOperator(): JoinOperatorContext | null {
        return this.getRuleContext(0, JoinOperatorContext);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinExpressionOp) {
            return visitor.visitJoinExpressionOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinOperatorContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinOperator;
    }
    public override copyFrom(ctx: JoinOperatorContext): void {
        super.copyFrom(ctx);
    }
}
export class JoinOpFullContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FULL, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpFull) {
            return visitor.visitJoinOpFull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinOpInnerContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpInner) {
            return visitor.visitJoinOpInner(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class JoinOpLeftRightContext extends JoinOperatorContext {
    public constructor(ctx: JoinOperatorContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RIGHT, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMI, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANTI, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOpLeftRight) {
            return visitor.visitJoinOpLeftRight(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinOperatorCrossContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CROSS, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JOIN, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinOperatorCross;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinOperatorCross) {
            return visitor.visitJoinOperatorCross(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class JoinConstraintClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ON, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USING, 0);
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_joinConstraintClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitJoinConstraintClause) {
            return visitor.visitJoinConstraintClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SampleClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SAMPLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SAMPLE, 0)!;
    }
    public ratioExpression(): RatioExpressionContext[];
    public ratioExpression(i: number): RatioExpressionContext | null;
    public ratioExpression(i?: number): RatioExpressionContext[] | RatioExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(RatioExpressionContext);
        }

        return this.getRuleContext(i, RatioExpressionContext);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_sampleClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSampleClause) {
            return visitor.visitSampleClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LimitExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public COMMA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMA, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_limitExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLimitExpression) {
            return visitor.visitLimitExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public orderExpression(): OrderExpressionContext[];
    public orderExpression(i: number): OrderExpressionContext | null;
    public orderExpression(i?: number): OrderExpressionContext[] | OrderExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(OrderExpressionContext);
        }

        return this.getRuleContext(i, OrderExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderExpressionList) {
            return visitor.visitOrderExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class OrderExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULLS, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLATE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public ASCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASCENDING, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASC, 0);
    }
    public DESCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCENDING, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAST, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_orderExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitOrderExpression) {
            return visitor.visitOrderExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class RatioExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numberLiteral(): NumberLiteralContext[];
    public numberLiteral(i: number): NumberLiteralContext | null;
    public numberLiteral(i?: number): NumberLiteralContext[] | NumberLiteralContext | null {
        if (i === undefined) {
            return this.getRuleContexts(NumberLiteralContext);
        }

        return this.getRuleContext(i, NumberLiteralContext);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SLASH, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_ratioExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitRatioExpression) {
            return visitor.visitRatioExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public settingExpression(): SettingExpressionContext[];
    public settingExpression(i: number): SettingExpressionContext | null;
    public settingExpression(i?: number): SettingExpressionContext[] | SettingExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(SettingExpressionContext);
        }

        return this.getRuleContext(i, SettingExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingExpressionList) {
            return visitor.visitSettingExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SettingExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public literal(): LiteralContext {
        return this.getRuleContext(0, LiteralContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_settingExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSettingExpression) {
            return visitor.visitSettingExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowPartitionByClause(): WindowPartitionByClauseContext | null {
        return this.getRuleContext(0, WindowPartitionByClauseContext);
    }
    public windowOrderByClause(): WindowOrderByClauseContext | null {
        return this.getRuleContext(0, WindowOrderByClauseContext);
    }
    public windowFrameClause(): WindowFrameClauseContext | null {
        return this.getRuleContext(0, WindowFrameClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowExpression) {
            return visitor.visitWindowExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowPartitionByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public PARTITION(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.PARTITION, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowPartitionByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowPartitionByClause) {
            return visitor.visitWindowPartitionByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowOrderByClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ORDER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ORDER, 0)!;
    }
    public BY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BY, 0)!;
    }
    public orderExpressionList(): OrderExpressionListContext {
        return this.getRuleContext(0, OrderExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowOrderByClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowOrderByClause) {
            return visitor.visitWindowOrderByClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameClauseContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public windowFrameExtend(): WindowFrameExtendContext {
        return this.getRuleContext(0, WindowFrameExtendContext)!;
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWS, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANGE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameClause;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrameClause) {
            return visitor.visitWindowFrameClause(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameExtendContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameExtend;
    }
    public override copyFrom(ctx: WindowFrameExtendContext): void {
        super.copyFrom(ctx);
    }
}
export class FrameStartContext extends WindowFrameExtendContext {
    public constructor(ctx: WindowFrameExtendContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public windowFrameBound(): WindowFrameBoundContext {
        return this.getRuleContext(0, WindowFrameBoundContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFrameStart) {
            return visitor.visitFrameStart(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class FrameBetweenContext extends WindowFrameExtendContext {
    public constructor(ctx: WindowFrameExtendContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BETWEEN, 0)!;
    }
    public windowFrameBound(): WindowFrameBoundContext[];
    public windowFrameBound(i: number): WindowFrameBoundContext | null;
    public windowFrameBound(i?: number): WindowFrameBoundContext[] | WindowFrameBoundContext | null {
        if (i === undefined) {
            return this.getRuleContexts(WindowFrameBoundContext);
        }

        return this.getRuleContext(i, WindowFrameBoundContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFrameBetween) {
            return visitor.visitFrameBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WindowFrameBoundContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNBOUNDED, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRECEDING, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOLLOWING, 0);
    }
    public numberLiteral(): NumberLiteralContext | null {
        return this.getRuleContext(0, NumberLiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_windowFrameBound;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWindowFrameBound) {
            return visitor.visitWindowFrameBound(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SetStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SET, 0)!;
    }
    public settingExpressionList(): SettingExpressionListContext {
        return this.getRuleContext(0, SettingExpressionListContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_setStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSetStatement) {
            return visitor.visitSetStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ShowStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_showStatement;
    }
    public override copyFrom(ctx: ShowStatementContext): void {
        super.copyFrom(ctx);
    }
}
export class ShowCreateTableStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateTableStatement) {
            return visitor.visitShowCreateTableStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateDictionaryStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DICTIONARY(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARY, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateDictionaryStatement) {
            return visitor.visitShowCreateDictionaryStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowTablesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public TABLES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TABLES, 0)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public whereClause(): WhereClauseContext | null {
        return this.getRuleContext(0, WhereClauseContext);
    }
    public limitClause(): LimitClauseContext | null {
        return this.getRuleContext(0, LimitClauseContext);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowTablesStatement) {
            return visitor.visitShowTablesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDictionariesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DICTIONARIES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0)!;
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowDictionariesStatement) {
            return visitor.visitShowDictionariesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowCreateDatabaseStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public CREATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CREATE, 0)!;
    }
    public DATABASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowCreateDatabaseStatement) {
            return visitor.visitShowCreateDatabaseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ShowDatabasesStatementContext extends ShowStatementContext {
    public constructor(ctx: ShowStatementContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SHOW(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SHOW, 0)!;
    }
    public DATABASES(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATABASES, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitShowDatabasesStatement) {
            return visitor.visitShowDatabasesStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class SystemStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SYSTEM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SYSTEM, 0)!;
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLUSH, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOGS, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RELOAD, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.START, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STOP, 0);
    }
    public SENDS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SENDS, 0);
    }
    public FETCHES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCHES, 0);
    }
    public MERGES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MERGES, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public REPLICATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATED, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICA, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_systemStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitSystemStatement) {
            return visitor.visitSystemStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TruncateStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public TRUNCATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TRUNCATE, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public clusterClause(): ClusterClauseContext | null {
        return this.getRuleContext(0, ClusterClauseContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_truncateStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTruncateStatement) {
            return visitor.visitTruncateStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class UseStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public USE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.USE, 0)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext {
        return this.getRuleContext(0, DatabaseIdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_useStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitUseStatement) {
            return visitor.visitUseStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class WatchStatementContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public WATCH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.WATCH, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public EVENTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EVENTS, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMIT, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_watchStatement;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitWatchStatement) {
            return visitor.visitWatchStatement(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnTypeExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnTypeExpression;
    }
    public override copyFrom(ctx: ColumnTypeExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnTypeExpressionComplexContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext[];
    public columnTypeExpression(i: number): ColumnTypeExpressionContext | null;
    public columnTypeExpression(i?: number): ColumnTypeExpressionContext[] | ColumnTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeExpressionContext);
        }

        return this.getRuleContext(i, ColumnTypeExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionComplex) {
            return visitor.visitColumnTypeExpressionComplex(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionEnumContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public enumValue(): EnumValueContext[];
    public enumValue(i: number): EnumValueContext | null;
    public enumValue(i?: number): EnumValueContext[] | EnumValueContext | null {
        if (i === undefined) {
            return this.getRuleContexts(EnumValueContext);
        }

        return this.getRuleContext(i, EnumValueContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionEnum) {
            return visitor.visitColumnTypeExpressionEnum(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionNestedContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext[];
    public columnTypeExpression(i: number): ColumnTypeExpressionContext | null;
    public columnTypeExpression(i?: number): ColumnTypeExpressionContext[] | ColumnTypeExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnTypeExpressionContext);
        }

        return this.getRuleContext(i, ColumnTypeExpressionContext);
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionNested) {
            return visitor.visitColumnTypeExpressionNested(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionParamContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionParam) {
            return visitor.visitColumnTypeExpressionParam(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnTypeExpressionSimpleContext extends ColumnTypeExpressionContext {
    public constructor(ctx: ColumnTypeExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnTypeExpressionSimple) {
            return visitor.visitColumnTypeExpressionSimple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnExpressionListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnsExpression(): ColumnsExpressionContext[];
    public columnsExpression(i: number): ColumnsExpressionContext | null;
    public columnsExpression(i?: number): ColumnsExpressionContext[] | ColumnsExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnsExpressionContext);
        }

        return this.getRuleContext(i, ColumnsExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnExpressionList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionList) {
            return visitor.visitColumnExpressionList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnsExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnsExpression;
    }
    public override copyFrom(ctx: ColumnsExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnsExpressionAsteriskContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ASTERISK, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionAsterisk) {
            return visitor.visitColumnsExpressionAsterisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnsExpressionSubqueryContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionSubquery) {
            return visitor.visitColumnsExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnsExpressionColumnContext extends ColumnsExpressionContext {
    public constructor(ctx: ColumnsExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnsExpressionColumn) {
            return visitor.visitColumnsExpressionColumn(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnExpression;
    }
    public override copyFrom(ctx: ColumnExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class ColumnExpressionIsNullContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public IS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.IS, 0)!;
    }
    public NULL_SQL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NULL_SQL, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionIsNull) {
            return visitor.visitColumnExpressionIsNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTupleContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext {
        return this.getRuleContext(0, ColumnExpressionListContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTuple) {
            return visitor.visitColumnExpressionTuple(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAndContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAnd) {
            return visitor.visitColumnExpressionAnd(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionDateContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DATE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DATE, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionDate) {
            return visitor.visitColumnExpressionDate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionBetweenContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public BETWEEN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.BETWEEN, 0)!;
    }
    public AND(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AND, 0)!;
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionBetween) {
            return visitor.visitColumnExpressionBetween(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTrimContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TRIM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TRIM, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BOTH, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEADING, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRAILING, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTrim) {
            return visitor.visitColumnExpressionTrim(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionNotContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public NOT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.NOT, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionNot) {
            return visitor.visitColumnExpressionNot(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionSubstringContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public SUBSTRING(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.SUBSTRING, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionSubstring) {
            return visitor.visitColumnExpressionSubstring(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionCaseContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CASE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CASE, 0)!;
    }
    public END(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.END, 0)!;
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public WHEN(): antlr.TerminalNode[];
    public WHEN(i: number): antlr.TerminalNode | null;
    public WHEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.WHEN);
    	} else {
    		return this.getToken(ClickHouseParser.WHEN, i);
    	}
    }
    public THEN(): antlr.TerminalNode[];
    public THEN(i: number): antlr.TerminalNode | null;
    public THEN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.THEN);
    	} else {
    		return this.getToken(ClickHouseParser.THEN, i);
    	}
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ELSE, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionCase) {
            return visitor.visitColumnExpressionCase(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionIdentifierContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnIdentifier(): ColumnIdentifierContext {
        return this.getRuleContext(0, ColumnIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionIdentifier) {
            return visitor.visitColumnExpressionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionArrayAccessContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LBRACKET, 0)!;
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RBRACKET, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionArrayAccess) {
            return visitor.visitColumnExpressionArrayAccess(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionFunctionContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public columnArgumentList(): ColumnArgumentListContext | null {
        return this.getRuleContext(0, ColumnArgumentListContext);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionFunction) {
            return visitor.visitColumnExpressionFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAsteriskContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public ASTERISK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ASTERISK, 0)!;
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAsterisk) {
            return visitor.visitColumnExpressionAsterisk(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionLiteralContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public literal(): LiteralContext {
        return this.getRuleContext(0, LiteralContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionLiteral) {
            return visitor.visitColumnExpressionLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionWinFunctionContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OVER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode[];
    public LPAREN(i: number): antlr.TerminalNode | null;
    public LPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.LPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.LPAREN, i);
    	}
    }
    public windowExpression(): WindowExpressionContext {
        return this.getRuleContext(0, WindowExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode[];
    public RPAREN(i: number): antlr.TerminalNode | null;
    public RPAREN(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.RPAREN);
    	} else {
    		return this.getToken(ClickHouseParser.RPAREN, i);
    	}
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionWinFunction) {
            return visitor.visitColumnExpressionWinFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTernaryOpContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public QUESTIONMARK(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.QUESTIONMARK, 0)!;
    }
    public COLON(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.COLON, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTernaryOp) {
            return visitor.visitColumnExpressionTernaryOp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionArrayContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LBRACKET, 0)!;
    }
    public RBRACKET(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RBRACKET, 0)!;
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionArray) {
            return visitor.visitColumnExpressionArray(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTupleAccessContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public DOT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DOT, 0)!;
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTupleAccess) {
            return visitor.visitColumnExpressionTupleAccess(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionParensContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionParens) {
            return visitor.visitColumnExpressionParens(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionWinFunctionTargetContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public OVER(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OVER, 0)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public columnExpressionList(): ColumnExpressionListContext | null {
        return this.getRuleContext(0, ColumnExpressionListContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionWinFunctionTarget) {
            return visitor.visitColumnExpressionWinFunctionTarget(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionAliasContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public alias(): AliasContext | null {
        return this.getRuleContext(0, AliasContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionAlias) {
            return visitor.visitColumnExpressionAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence3Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public EQ_DOUBLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_DOUBLE, 0);
    }
    public EQ_SINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
    }
    public NOT_EQ(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT_EQ, 0);
    }
    public LE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LE, 0);
    }
    public GE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GE, 0);
    }
    public LT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LT, 0);
    }
    public GT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GT, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ILIKE, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence3) {
            return visitor.visitColumnExpressionPrecedence3(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionTimestampContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public TIMESTAMP(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.TIMESTAMP, 0)!;
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionTimestamp) {
            return visitor.visitColumnExpressionTimestamp(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence2Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLUS, 0);
    }
    public DASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DASH, 0);
    }
    public CONCAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONCAT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence2) {
            return visitor.visitColumnExpressionPrecedence2(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionPrecedence1Context extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public ASTERISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASTERISK, 0);
    }
    public SLASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SLASH, 0);
    }
    public PERCENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PERCENT, 0);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionPrecedence1) {
            return visitor.visitColumnExpressionPrecedence1(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionIntervalContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public INTERVAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.INTERVAL, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionInterval) {
            return visitor.visitColumnExpressionInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionSubqueryContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionSubquery) {
            return visitor.visitColumnExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionNegateContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public DASH(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.DASH, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionNegate) {
            return visitor.visitColumnExpressionNegate(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionExtractContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public EXTRACT(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EXTRACT, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public interval(): IntervalContext {
        return this.getRuleContext(0, IntervalContext)!;
    }
    public FROM(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.FROM, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionExtract) {
            return visitor.visitColumnExpressionExtract(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionCastContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public CAST(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.CAST, 0)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public AS(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.AS, 0)!;
    }
    public columnTypeExpression(): ColumnTypeExpressionContext {
        return this.getRuleContext(0, ColumnTypeExpressionContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionCast) {
            return visitor.visitColumnExpressionCast(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class ColumnExpressionOrContext extends ColumnExpressionContext {
    public constructor(ctx: ColumnExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public columnExpression(): ColumnExpressionContext[];
    public columnExpression(i: number): ColumnExpressionContext | null;
    public columnExpression(i?: number): ColumnExpressionContext[] | ColumnExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnExpressionContext);
        }

        return this.getRuleContext(i, ColumnExpressionContext);
    }
    public OR(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.OR, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnExpressionOr) {
            return visitor.visitColumnExpressionOr(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnArgumentListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnArgumentExpression(): ColumnArgumentExpressionContext[];
    public columnArgumentExpression(i: number): ColumnArgumentExpressionContext | null;
    public columnArgumentExpression(i?: number): ColumnArgumentExpressionContext[] | ColumnArgumentExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(ColumnArgumentExpressionContext);
        }

        return this.getRuleContext(i, ColumnArgumentExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnArgumentList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnArgumentList) {
            return visitor.visitColumnArgumentList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnArgumentExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnLambdaExpression(): ColumnLambdaExpressionContext | null {
        return this.getRuleContext(0, ColumnLambdaExpressionContext);
    }
    public columnExpression(): ColumnExpressionContext | null {
        return this.getRuleContext(0, ColumnExpressionContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnArgumentExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnArgumentExpression) {
            return visitor.visitColumnArgumentExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnLambdaExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public ARROW_SYMBOL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.ARROW_SYMBOL, 0)!;
    }
    public columnExpression(): ColumnExpressionContext {
        return this.getRuleContext(0, ColumnExpressionContext)!;
    }
    public LPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LPAREN, 0);
    }
    public identifierList(): IdentifierListContext | null {
        return this.getRuleContext(0, IdentifierListContext);
    }
    public RPAREN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RPAREN, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnLambdaExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnLambdaExpression) {
            return visitor.visitColumnLambdaExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class ColumnIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext[];
    public identifier(i: number): IdentifierContext | null;
    public identifier(i?: number): IdentifierContext[] | IdentifierContext | null {
        if (i === undefined) {
            return this.getRuleContexts(IdentifierContext);
        }

        return this.getRuleContext(i, IdentifierContext);
    }
    public tableIdentifier(): TableIdentifierContext | null {
        return this.getRuleContext(0, TableIdentifierContext);
    }
    public DOT(): antlr.TerminalNode[];
    public DOT(i: number): antlr.TerminalNode | null;
    public DOT(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DOT);
    	} else {
    		return this.getToken(ClickHouseParser.DOT, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_columnIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitColumnIdentifier) {
            return visitor.visitColumnIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableExpression;
    }
    public override copyFrom(ctx: TableExpressionContext): void {
        super.copyFrom(ctx);
    }
}
export class TableExpressionFunctionContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext {
        return this.getRuleContext(0, TableFunctionExpressionContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionFunction) {
            return visitor.visitTableExpressionFunction(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionIdentifierContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableIdentifier(): TableIdentifierContext {
        return this.getRuleContext(0, TableIdentifierContext)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionIdentifier) {
            return visitor.visitTableExpressionIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionAliasContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public tableExpression(): TableExpressionContext {
        return this.getRuleContext(0, TableExpressionContext)!;
    }
    public alias(): AliasContext | null {
        return this.getRuleContext(0, AliasContext);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionAlias) {
            return visitor.visitTableExpressionAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
export class TableExpressionSubqueryContext extends TableExpressionContext {
    public constructor(ctx: TableExpressionContext) {
        super(ctx.parent, ctx.invokingState);
        super.copyFrom(ctx);
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public selectUnionStatement(): SelectUnionStatementContext {
        return this.getRuleContext(0, SelectUnionStatementContext)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableExpressionSubquery) {
            return visitor.visitTableExpressionSubquery(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableFunctionExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public LPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.LPAREN, 0)!;
    }
    public RPAREN(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.RPAREN, 0)!;
    }
    public tableArgList(): TableArgListContext | null {
        return this.getRuleContext(0, TableArgListContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableFunctionExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableFunctionExpression) {
            return visitor.visitTableFunctionExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public databaseIdentifier(): DatabaseIdentifierContext | null {
        return this.getRuleContext(0, DatabaseIdentifierContext);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableIdentifier) {
            return visitor.visitTableIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgListContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public tableArgExpression(): TableArgExpressionContext[];
    public tableArgExpression(i: number): TableArgExpressionContext | null;
    public tableArgExpression(i?: number): TableArgExpressionContext[] | TableArgExpressionContext | null {
        if (i === undefined) {
            return this.getRuleContexts(TableArgExpressionContext);
        }

        return this.getRuleContext(i, TableArgExpressionContext);
    }
    public COMMA(): antlr.TerminalNode[];
    public COMMA(i: number): antlr.TerminalNode | null;
    public COMMA(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.COMMA);
    	} else {
    		return this.getToken(ClickHouseParser.COMMA, i);
    	}
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableArgList;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgList) {
            return visitor.visitTableArgList(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class TableArgExpressionContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public columnIdentifier(): ColumnIdentifierContext | null {
        return this.getRuleContext(0, ColumnIdentifierContext);
    }
    public tableFunctionExpression(): TableFunctionExpressionContext | null {
        return this.getRuleContext(0, TableFunctionExpressionContext);
    }
    public literal(): LiteralContext | null {
        return this.getRuleContext(0, LiteralContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_tableArgExpression;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitTableArgExpression) {
            return visitor.visitTableArgExpression(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class DatabaseIdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext {
        return this.getRuleContext(0, IdentifierContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_databaseIdentifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitDatabaseIdentifier) {
            return visitor.visitDatabaseIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class FloatingLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public FLOATING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLOATING_LITERAL, 0);
    }
    public DOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOT, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode[];
    public DECIMAL_LITERAL(i: number): antlr.TerminalNode | null;
    public DECIMAL_LITERAL(i?: number): antlr.TerminalNode | null | antlr.TerminalNode[] {
    	if (i === undefined) {
    		return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
    	} else {
    		return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
    	}
    }
    public OCTAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_floatingLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitFloatingLiteral) {
            return visitor.visitFloatingLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class NumberLiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public floatingLiteral(): FloatingLiteralContext | null {
        return this.getRuleContext(0, FloatingLiteralContext);
    }
    public OCTAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
    }
    public DECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
    }
    public HEXADECIMAL_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HEXADECIMAL_LITERAL, 0);
    }
    public INF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INF, 0);
    }
    public NAN_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAN_SQL, 0);
    }
    public PLUS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLUS, 0);
    }
    public DASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DASH, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_numberLiteral;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitNumberLiteral) {
            return visitor.visitNumberLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class LiteralContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public numberLiteral(): NumberLiteralContext | null {
        return this.getRuleContext(0, NumberLiteralContext);
    }
    public STRING_LITERAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
    }
    public NULL_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULL_SQL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_literal;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitLiteral) {
            return visitor.visitLiteral(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IntervalContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECOND, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MINUTE, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HOUR, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DAY, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WEEK, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONTH, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUARTER, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.YEAR, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_interval;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitInterval) {
            return visitor.visitInterval(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public AFTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AFTER, 0);
    }
    public ALIAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALIAS, 0);
    }
    public ALL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALL, 0);
    }
    public ALTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALTER, 0);
    }
    public AND(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AND, 0);
    }
    public ANTI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANTI, 0);
    }
    public ANY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ANY, 0);
    }
    public ARRAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARRAY, 0);
    }
    public AS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AS, 0);
    }
    public ASCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASCENDING, 0);
    }
    public ASC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASC, 0);
    }
    public ASOF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASOF, 0);
    }
    public AST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AST, 0);
    }
    public ASYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ASYNC, 0);
    }
    public ATTACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ATTACH, 0);
    }
    public BETWEEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BETWEEN, 0);
    }
    public BOTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BOTH, 0);
    }
    public BY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BY, 0);
    }
    public CASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CASE, 0);
    }
    public CAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CAST, 0);
    }
    public CHECK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CHECK, 0);
    }
    public CLEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLEAR, 0);
    }
    public CLUSTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLUSTER, 0);
    }
    public CODEC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CODEC, 0);
    }
    public COLLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLATE, 0);
    }
    public COLUMN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMN, 0);
    }
    public COMMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COMMENT, 0);
    }
    public CONSTRAINT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONSTRAINT, 0);
    }
    public CREATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CREATE, 0);
    }
    public CROSS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CROSS, 0);
    }
    public CUBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUBE, 0);
    }
    public CURRENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT, 0);
    }
    public DATABASE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASE, 0);
    }
    public DATABASES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATABASES, 0);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATE, 0);
    }
    public DEDUPLICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
    }
    public DEFAULT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEFAULT, 0);
    }
    public DELAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELAY, 0);
    }
    public DELETE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DELETE, 0);
    }
    public DESCRIBE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCRIBE, 0);
    }
    public DESC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESC, 0);
    }
    public DESCENDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DESCENDING, 0);
    }
    public DETACH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACH, 0);
    }
    public DICTIONARIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARIES, 0);
    }
    public DICTIONARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTIONARY, 0);
    }
    public DISK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISK, 0);
    }
    public DISTINCT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTINCT, 0);
    }
    public DISTRIBUTED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
    }
    public DROP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DROP, 0);
    }
    public ELSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ELSE, 0);
    }
    public END(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.END, 0);
    }
    public ENGINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ENGINE, 0);
    }
    public EVENTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EVENTS, 0);
    }
    public EXISTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXISTS, 0);
    }
    public EXPLAIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXPLAIN, 0);
    }
    public EXPRESSION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXPRESSION, 0);
    }
    public EXTRACT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXTRACT, 0);
    }
    public FETCHES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCHES, 0);
    }
    public FINAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FINAL, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public FLUSH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FLUSH, 0);
    }
    public FOR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOR, 0);
    }
    public FOLLOWING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FOLLOWING, 0);
    }
    public FORMAT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORMAT, 0);
    }
    public FREEZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FREEZE, 0);
    }
    public FROM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FROM, 0);
    }
    public FULL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FULL, 0);
    }
    public FUNCTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTION, 0);
    }
    public GLOBAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GLOBAL, 0);
    }
    public GRANULARITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANULARITY, 0);
    }
    public GROUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GROUP, 0);
    }
    public HAVING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HAVING, 0);
    }
    public HIERARCHICAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HIERARCHICAL, 0);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public IF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IF, 0);
    }
    public ILIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ILIKE, 0);
    }
    public IN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IN, 0);
    }
    public INDEX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INDEX, 0);
    }
    public INJECTIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INJECTIVE, 0);
    }
    public INNER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INNER, 0);
    }
    public INSERT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INSERT, 0);
    }
    public INTERVAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTERVAL, 0);
    }
    public INTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTO, 0);
    }
    public IS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IS, 0);
    }
    public IS_OBJECT_ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IS_OBJECT_ID, 0);
    }
    public JOIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JOIN, 0);
    }
    public JSON_FALSE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON_FALSE, 0);
    }
    public JSON_TRUE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON_TRUE, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEY, 0);
    }
    public KILL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KILL, 0);
    }
    public LAST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAST, 0);
    }
    public LAYOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LAYOUT, 0);
    }
    public LEADING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEADING, 0);
    }
    public LEFT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LEFT, 0);
    }
    public LIFETIME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIFETIME, 0);
    }
    public LIKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIKE, 0);
    }
    public LIMIT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMIT, 0);
    }
    public LIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIVE, 0);
    }
    public LOCAL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOCAL, 0);
    }
    public LOGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LOGS, 0);
    }
    public MATERIALIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZE, 0);
    }
    public MATERIALIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MATERIALIZED, 0);
    }
    public MAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MAX, 0);
    }
    public MERGES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MERGES, 0);
    }
    public MIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MIN, 0);
    }
    public MODIFY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MODIFY, 0);
    }
    public MOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVE, 0);
    }
    public MUTATION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MUTATION, 0);
    }
    public NO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO, 0);
    }
    public NOT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NOT, 0);
    }
    public NULLS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULLS, 0);
    }
    public OFFSET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OFFSET, 0);
    }
    public ON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ON, 0);
    }
    public OPTIMIZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTIMIZE, 0);
    }
    public OR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OR, 0);
    }
    public ORDER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORDER, 0);
    }
    public OUTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTER, 0);
    }
    public OUTFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OUTFILE, 0);
    }
    public OVER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OVER, 0);
    }
    public PARTITION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARTITION, 0);
    }
    public POPULATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POPULATE, 0);
    }
    public PRECEDING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRECEDING, 0);
    }
    public PREWHERE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PREWHERE, 0);
    }
    public PRIMARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PRIMARY, 0);
    }
    public RANGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANGE, 0);
    }
    public RELOAD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RELOAD, 0);
    }
    public REMOVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOVE, 0);
    }
    public RENAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RENAME, 0);
    }
    public REPLACE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLACE, 0);
    }
    public REPLICA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICA, 0);
    }
    public REPLICATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATED, 0);
    }
    public RIGHT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RIGHT, 0);
    }
    public ROLLUP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLLUP, 0);
    }
    public ROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROW, 0);
    }
    public ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWS, 0);
    }
    public SAMPLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAMPLE, 0);
    }
    public SELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SELECT, 0);
    }
    public SEMI(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SEMI, 0);
    }
    public SENDS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SENDS, 0);
    }
    public SET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SET, 0);
    }
    public SETTINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTINGS, 0);
    }
    public SHOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW, 0);
    }
    public SOURCE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCE, 0);
    }
    public START(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.START, 0);
    }
    public STOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STOP, 0);
    }
    public SUBSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SUBSTRING, 0);
    }
    public SYNC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNC, 0);
    }
    public SYNTAX(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYNTAX, 0);
    }
    public SYSTEM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SYSTEM, 0);
    }
    public TABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLE, 0);
    }
    public TABLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABLES, 0);
    }
    public TEMPORARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPORARY, 0);
    }
    public TEST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEST, 0);
    }
    public THEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.THEN, 0);
    }
    public TIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIES, 0);
    }
    public TIMEOUT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMEOUT, 0);
    }
    public TIMESTAMP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TIMESTAMP, 0);
    }
    public TOTALS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOTALS, 0);
    }
    public TRAILING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRAILING, 0);
    }
    public TRIM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRIM, 0);
    }
    public TRUNCATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRUNCATE, 0);
    }
    public TO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TO, 0);
    }
    public TOP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TOP, 0);
    }
    public TTL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TTL, 0);
    }
    public TYPE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TYPE, 0);
    }
    public UNBOUNDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNBOUNDED, 0);
    }
    public UNION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNION, 0);
    }
    public UPDATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UPDATE, 0);
    }
    public USE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USE, 0);
    }
    public USING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USING, 0);
    }
    public UUID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UUID, 0);
    }
    public VALUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VALUES, 0);
    }
    public VIEW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VIEW, 0);
    }
    public VOLUME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VOLUME, 0);
    }
    public WATCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WATCH, 0);
    }
    public WHEN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WHEN, 0);
    }
    public WHERE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WHERE, 0);
    }
    public WINDOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WINDOW, 0);
    }
    public WITH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WITH, 0);
    }
    public GRANT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANT, 0);
    }
    public USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER, 0);
    }
    public FETCH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FETCH, 0);
    }
    public REFRESH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REFRESH, 0);
    }
    public POLICY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICY, 0);
    }
    public QUOTA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUOTA, 0);
    }
    public ROLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROLE, 0);
    }
    public PROFILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILE, 0);
    }
    public ARBITRARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARBITRARY, 0);
    }
    public COLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLUMNS, 0);
    }
    public CURRENT_USER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CURRENT_USER, 0);
    }
    public ACCESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ACCESS, 0);
    }
    public SHOW_USERS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_USERS, 0);
    }
    public SHOW_ROLES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROLES, 0);
    }
    public SHOW_ROW_POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_ROW_POLICIES, 0);
    }
    public SHOW_QUOTAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_QUOTAS, 0);
    }
    public SHOW_SETTINGS_PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHOW_SETTINGS_PROFILES, 0);
    }
    public SHUTDOWN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHUTDOWN, 0);
    }
    public CACHE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CACHE, 0);
    }
    public DNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DNS, 0);
    }
    public MARK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARK, 0);
    }
    public PART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PART, 0);
    }
    public UNCOMPRESSED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNCOMPRESSED, 0);
    }
    public CONFIG(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONFIG, 0);
    }
    public EMBEDDED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EMBEDDED, 0);
    }
    public FUNCTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FUNCTIONS, 0);
    }
    public MOVES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MOVES, 0);
    }
    public REPLICATION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REPLICATION, 0);
    }
    public QUEUES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUEUES, 0);
    }
    public RESTART(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTART, 0);
    }
    public DICTGET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGET, 0);
    }
    public DICTGETHIERARCHY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTGETHIERARCHY, 0);
    }
    public DICTHAS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTHAS, 0);
    }
    public DICTISIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DICTISIN, 0);
    }
    public MANAGEMENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MANAGEMENT, 0);
    }
    public ADMIN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADMIN, 0);
    }
    public INTROSPECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INTROSPECTION, 0);
    }
    public ADDRESSTOLINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINE, 0);
    }
    public ADDRESSTOSYMBOL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOSYMBOL, 0);
    }
    public DEMANGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DEMANGLE, 0);
    }
    public SOURCES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SOURCES, 0);
    }
    public FILE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FILE, 0);
    }
    public URL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.URL, 0);
    }
    public REMOTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REMOTE, 0);
    }
    public MYSQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQL, 0);
    }
    public ODBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ODBC, 0);
    }
    public JDBC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JDBC, 0);
    }
    public HDFS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HDFS, 0);
    }
    public S3(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.S3, 0);
    }
    public SETTING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SETTING, 0);
    }
    public OPTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OPTION, 0);
    }
    public NONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NONE, 0);
    }
    public ADD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADD, 0);
    }
    public ADDRESSTOLINEWITHINLINES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ADDRESSTOLINEWITHINLINES, 0);
    }
    public ALLOW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ALLOW, 0);
    }
    public AZURE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AZURE, 0);
    }
    public COLLECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTION, 0);
    }
    public COLLECTIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.COLLECTIONS, 0);
    }
    public CONTROL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONTROL, 0);
    }
    public DAY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DAY, 0);
    }
    public DISPLAYSECRETSINSHOWANDSELECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DISPLAYSECRETSINSHOWANDSELECT, 0);
    }
    public ESTIMATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ESTIMATE, 0);
    }
    public HIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HIVE, 0);
    }
    public HOUR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HOUR, 0);
    }
    public INF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INF, 0);
    }
    public MARKS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MARKS, 0);
    }
    public MINUTE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MINUTE, 0);
    }
    public MONGO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONGO, 0);
    }
    public MONTH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MONTH, 0);
    }
    public NAMED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAMED, 0);
    }
    public PIPELINE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PIPELINE, 0);
    }
    public PLAN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLAN, 0);
    }
    public POLICIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POLICIES, 0);
    }
    public POSTGRES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.POSTGRES, 0);
    }
    public PROFILES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROFILES, 0);
    }
    public PROJECTION(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROJECTION, 0);
    }
    public QUARTER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUARTER, 0);
    }
    public QUERY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY, 0);
    }
    public REDIS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REDIS, 0);
    }
    public SECOND(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECOND, 0);
    }
    public SECRETS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECRETS, 0);
    }
    public SECURITY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SECURITY, 0);
    }
    public SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQL, 0);
    }
    public SQLITE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SQLITE, 0);
    }
    public TREE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TREE, 0);
    }
    public USAGE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USAGE, 0);
    }
    public WEEK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WEEK, 0);
    }
    public YEAR(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.YEAR, 0);
    }
    public GRANTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANTS, 0);
    }
    public EXCEPT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXCEPT, 0);
    }
    public REVOKE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REVOKE, 0);
    }
    public IDENTIFIED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IDENTIFIED, 0);
    }
    public PLAINTEXT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PLAINTEXT_PASSWORD, 0);
    }
    public SHA256_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_PASSWORD, 0);
    }
    public SHA256_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SHA256_HASH, 0);
    }
    public DOUBLE_SHA1_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_PASSWORD, 0);
    }
    public DOUBLE_SHA1_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DOUBLE_SHA1_HASH, 0);
    }
    public NO_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NO_PASSWORD, 0);
    }
    public LDAP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LDAP, 0);
    }
    public SERVER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SERVER, 0);
    }
    public KERBEROS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KERBEROS, 0);
    }
    public REALM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REALM, 0);
    }
    public SSL_CERTIFICATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSL_CERTIFICATE, 0);
    }
    public SAN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SAN, 0);
    }
    public CN(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CN, 0);
    }
    public SSH_KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SSH_KEY, 0);
    }
    public HTTP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HTTP, 0);
    }
    public SCHEME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.SCHEME, 0);
    }
    public BCRYPT_PASSWORD(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_PASSWORD, 0);
    }
    public BCRYPT_HASH(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BCRYPT_HASH, 0);
    }
    public VALID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.VALID, 0);
    }
    public UNTIL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNTIL, 0);
    }
    public GRANTEES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.GRANTEES, 0);
    }
    public NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NAME, 0);
    }
    public REGEXP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.REGEXP, 0);
    }
    public IP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IP, 0);
    }
    public HOST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.HOST, 0);
    }
    public READONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READONLY, 0);
    }
    public WRITABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.WRITABLE, 0);
    }
    public PERMISSIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PERMISSIVE, 0);
    }
    public RESTRICTIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESTRICTIVE, 0);
    }
    public TABSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATED, 0);
    }
    public TABSEPARATEDRAW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAW, 0);
    }
    public TABSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMES, 0);
    }
    public TABSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public TABSEPARATEDRAWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMES, 0);
    }
    public TABSEPARATEDRAWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TABSEPARATEDRAWWITHNAMESANDTYPES, 0);
    }
    public TEMPLATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATE, 0);
    }
    public TEMPLATEIGNORESPACES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TEMPLATEIGNORESPACES, 0);
    }
    public CSV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSV, 0);
    }
    public CSVWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMES, 0);
    }
    public CSVWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CSVWITHNAMESANDTYPES, 0);
    }
    public CUSTOMSEPARATED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATED, 0);
    }
    public CUSTOMSEPARATEDWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMES, 0);
    }
    public CUSTOMSEPARATEDWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CUSTOMSEPARATEDWITHNAMESANDTYPES, 0);
    }
    public JSON(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSON, 0);
    }
    public JSONASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASSTRING, 0);
    }
    public JSONASOBJECT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONASOBJECT, 0);
    }
    public JSONSTRINGS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGS, 0);
    }
    public JSONCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNS, 0);
    }
    public JSONCOLUMNSWITHMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOLUMNSWITHMETADATA, 0);
    }
    public JSONCOMPACT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACT, 0);
    }
    public JSONCOMPACTCOLUMNS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTCOLUMNS, 0);
    }
    public JSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONEACHROW, 0);
    }
    public JSONSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROW, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROW, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMES, 0);
    }
    public JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONCOMPACTSTRINGSEACHROWWITHNAMESANDTYPES, 0);
    }
    public JSONOBJECTEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.JSONOBJECTEACHROW, 0);
    }
    public BSONEACHROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.BSONEACHROW, 0);
    }
    public TSKV(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TSKV, 0);
    }
    public PROTOBUF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUF, 0);
    }
    public PROTOBUFSINGLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFSINGLE, 0);
    }
    public PROTOBUFLIST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PROTOBUFLIST, 0);
    }
    public AVRO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVRO, 0);
    }
    public AVROCONFLUENT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.AVROCONFLUENT, 0);
    }
    public PARQUET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUET, 0);
    }
    public PARQUETMETADATA(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.PARQUETMETADATA, 0);
    }
    public ARROW(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROW, 0);
    }
    public ARROWSTREAM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ARROWSTREAM, 0);
    }
    public ORC(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ORC, 0);
    }
    public ONE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ONE, 0);
    }
    public NPY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NPY, 0);
    }
    public ROWBINARY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARY, 0);
    }
    public ROWBINARYWITHNAMES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMES, 0);
    }
    public ROWBINARYWITHNAMESANDTYPES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHNAMESANDTYPES, 0);
    }
    public ROWBINARYWITHDEFAULTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ROWBINARYWITHDEFAULTS, 0);
    }
    public NATIVE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NATIVE, 0);
    }
    public CAPNPROTO(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CAPNPROTO, 0);
    }
    public LINEASSTRING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LINEASSTRING, 0);
    }
    public RAWBLOB(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RAWBLOB, 0);
    }
    public MSGPACK(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MSGPACK, 0);
    }
    public MYSQLDUMP(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.MYSQLDUMP, 0);
    }
    public DWARF(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DWARF, 0);
    }
    public FORM(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORM, 0);
    }
    public KEYED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEYED, 0);
    }
    public RANDOMIZED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RANDOMIZED, 0);
    }
    public USER_NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.USER_NAME, 0);
    }
    public IP_ADDRESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IP_ADDRESS, 0);
    }
    public FORWARDED_IP_ADDRESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORWARDED_IP_ADDRESS, 0);
    }
    public CLIENT_KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY, 0);
    }
    public CLIENT_KEY_OR_USER_NAME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY_OR_USER_NAME, 0);
    }
    public CLIENT_KEY_OR_IP_ADDRESS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CLIENT_KEY_OR_IP_ADDRESS, 0);
    }
    public QUERIES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERIES, 0);
    }
    public QUERY_SELECTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY_SELECTS, 0);
    }
    public QUERY_INSERTS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.QUERY_INSERTS, 0);
    }
    public ERRORS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ERRORS, 0);
    }
    public RESULT_ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESULT_ROWS, 0);
    }
    public RESULT_BYTES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESULT_BYTES, 0);
    }
    public READ_ROWS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READ_ROWS, 0);
    }
    public READ_BYTES(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.READ_BYTES, 0);
    }
    public EXECUTION_TIME(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.EXECUTION_TIME, 0);
    }
    public FAILED_SEQUENTIAL_AUTHENTICATIONS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FAILED_SEQUENTIAL_AUTHENTICATIONS, 0);
    }
    public LIMITS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.LIMITS, 0);
    }
    public TRACKING(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.TRACKING, 0);
    }
    public ONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ONLY, 0);
    }
    public CONST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CONST, 0);
    }
    public CHANGEABLE_IN_READONLY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.CHANGEABLE_IN_READONLY, 0);
    }
    public OVERRIDABLE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.OVERRIDABLE, 0);
    }
    public INHERIT(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.INHERIT, 0);
    }
    public RESET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.RESET, 0);
    }
    public DETACHED(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DETACHED, 0);
    }
    public FORGET(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FORGET, 0);
    }
    public STATISTICS(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.STATISTICS, 0);
    }
    public UNFREEZE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.UNFREEZE, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_keyword;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKeyword) {
            return visitor.visitKeyword(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class KeywordForAliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public DATE(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.DATE, 0);
    }
    public FIRST(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.FIRST, 0);
    }
    public ID(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.ID, 0);
    }
    public KEY(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.KEY, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_keywordForAlias;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitKeywordForAlias) {
            return visitor.visitKeywordForAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class AliasContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IDENTIFIER, 0);
    }
    public keywordForAlias(): KeywordForAliasContext | null {
        return this.getRuleContext(0, KeywordForAliasContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_alias;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitAlias) {
            return visitor.visitAlias(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public IDENTIFIER(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.IDENTIFIER, 0);
    }
    public interval(): IntervalContext | null {
        return this.getRuleContext(0, IntervalContext);
    }
    public keyword(): KeywordContext | null {
        return this.getRuleContext(0, KeywordContext);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifier;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifier) {
            return visitor.visitIdentifier(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class IdentifierOrNullContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public identifier(): IdentifierContext | null {
        return this.getRuleContext(0, IdentifierContext);
    }
    public NULL_SQL(): antlr.TerminalNode | null {
        return this.getToken(ClickHouseParser.NULL_SQL, 0);
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_identifierOrNull;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitIdentifierOrNull) {
            return visitor.visitIdentifierOrNull(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}


export class EnumValueContext extends antlr.ParserRuleContext {
    public constructor(parent: antlr.ParserRuleContext | null, invokingState: number) {
        super(parent, invokingState);
    }
    public STRING_LITERAL(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.STRING_LITERAL, 0)!;
    }
    public EQ_SINGLE(): antlr.TerminalNode {
        return this.getToken(ClickHouseParser.EQ_SINGLE, 0)!;
    }
    public numberLiteral(): NumberLiteralContext {
        return this.getRuleContext(0, NumberLiteralContext)!;
    }
    public override get ruleIndex(): number {
        return ClickHouseParser.RULE_enumValue;
    }
    public override accept<Result>(visitor: ClickHouseParserVisitor<Result>): Result | null {
        if (visitor.visitEnumValue) {
            return visitor.visitEnumValue(this);
        } else {
            return visitor.visitChildren(this);
        }
    }
}
