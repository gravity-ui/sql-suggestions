/* eslint no-useless-escape: "off" */
/* eslint filenames/match-regex: "off" */
/* eslint no-irregular-whitespace: "off" */
import {parseClickHouseQueryWithoutCursor} from '../../../index';

test('should pass without errors create: 1', () => {
    const query = `CREATE TABLE id_values ENGINE MergeTree ORDER BY id1 AS SELECT arrayJoin(range(500000)) AS id1, arrayJoin(range(1000)) AS id2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2', () => {
    const query = `CREATE TABLE test_table ENGINE MergeTree ORDER BY id AS SELECT id_values.id1             AS id,
string_values.string_val1 AS string_val1,
string_values.string_val2 AS string_val2
FROM id_values
JOIN (SELECT arrayJoin(range(10)) AS id1,
'qwe'                AS string_val1,
'asd'                AS string_val2) AS string_values
ON id_values.id1 = string_values.id1
SETTINGS join_algorithm = 'hash';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3', () => {
    const query = `CREATE TABLE t (st FixedString(54)) ENGINE=MergeTree ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4', () => {
    const query = `create table test (map Map(String, DateTime)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5', () => {
    const query = `CREATE TABLE checks (
\`check_name\` LowCardinality(String),
\`check_status\` LowCardinality(String),
\`check_start_time\` DateTime,
\`test_name\` LowCardinality(String),
\`test_status\` LowCardinality(String),
)
ENGINE = ReplicatedMergeTree('/clickhouse/{database}/checks', '{replica}')
ORDER BY check_start_time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6', () => {
    const query = `CREATE TABLE ANIMAL ( ANIMAL Nullable(String) ) ENGINE = ReplicatedMergeTree('/clickhouse/test/{database}/animal', 'r1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 7', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String
) ENGINE=ReplicatedMergeTree('/clickhouse/test/{database}/test_table', 'r1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 8', () => {
    const query = `CREATE TABLE test_table_for_in (
id UInt64
) ENGINE=ReplicatedMergeTree('/clickhouse/test/{database}/test_table_for_in', 'r1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 9', () => {
    const query = `CREATE TABLE t0 (c0 Int) ENGINE = AggregatingMergeTree() ORDER BY (c0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 10', () => {
    const query = `CREATE TABLE t1 (c0 Array(Dynamic), c1 Int) ENGINE = MergeTree() ORDER BY (c0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 11', () => {
    const query = `CREATE TABLE a (x Int64, y Int64 MATERIALIZED 1 SETTINGS (max_compress_block_size = 30000)) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 12', () => {
    const query = `CREATE TABLE projections (
key String,
d1 Int,
PROJECTION improved_sorting_key (
SELECT *
ORDER BY d1, key
)
)
Engine=MergeTree()
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 13', () => {
    const query = `CREATE TABLE projections_2 (
name String,
frequency UInt64,
PROJECTION agg (
SELECT name, max(frequency) max_frequency
GROUP BY name
),
PROJECTION agg_no_key (
SELECT max(frequency) max_frequency
)
)
Engine=MergeTree()
ORDER BY name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 14', () => {
    const query = `CREATE TABLE rawtable (
\`Attributes\` Map(String, String),
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 15', () => {
    const query = `CREATE MATERIALIZED VIEW raw_to_attributes_mv TO attributes (
\`AttributeKeys\` Array(String),
\`AttributeValues\` Array(String)
)
AS SELECT
mapKeys(Attributes) AS AttributeKeys,
mapValues(Attributes) AS AttributeValues
FROM rawtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 16', () => {
    const query = `CREATE TABLE attributes (
\`AttributeKeys\` Array(String),
\`AttributeValues\` Array(String)
)
ENGINE = ReplacingMergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 17', () => {
    const query = `CREATE TABLE uk_price_paid (
price UInt32,
date Date,
postcode1 LowCardinality(String),
postcode2 LowCardinality(String),
type Enum('terraced' = 1, 'semi-detached' = 2, 'detached' = 3, 'flat' = 4, 'other' = 0),
is_new UInt8,
duration Enum('freehold' = 1, 'leasehold' = 2, 'unknown' = 0),
addr1 String,
addr2 String,
street LowCardinality(String),
locality LowCardinality(String),
town LowCardinality(String),
district LowCardinality(String),
county LowCardinality(String),
INDEX county_index county TYPE set(10) GRANULARITY 1,
PROJECTION town_date_projection
(
SELECT 
town,
date,
price
ORDER BY 
town,
date
),
PROJECTION handy_aggs_projection
(
SELECT 
avg(price),
max(price),
sum(price)
GROUP BY town
)
)
ENGINE = MergeTree
ORDER BY (postcode1, postcode2, date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 18', () => {
    const query = `CREATE TABLE prices_by_year_dest ( price UInt32,
date Date,
addr1 String,
addr2 String,
street LowCardinality(String),
town LowCardinality(String),
district LowCardinality(String),
county LowCardinality(String)
)
ENGINE = MergeTree
PRIMARY KEY (town, date)
PARTITION BY toYear(date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 19', () => {
    const query = `CREATE MATERIALIZED VIEW prices_by_year_view TO prices_by_year_dest
AS
SELECT
price,
date,
addr1,
addr2,
street,
town,
district,
county
FROM uk_price_paid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 20', () => {
    const query = `CREATE TABLE uk_prices_aggs_dest ( month Date,
min_price SimpleAggregateFunction(min, UInt32),
max_price SimpleAggregateFunction(max, UInt32),
volume AggregateFunction(count, UInt32),
avg_price AggregateFunction(avg, UInt32)
)
ENGINE = AggregatingMergeTree
PRIMARY KEY month;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 21', () => {
    const query = `CREATE MATERIALIZED VIEW uk_prices_aggs_view TO uk_prices_aggs_dest
AS
WITH
toStartOfMonth(date) AS month
SELECT
month,
minSimpleState(price) AS min_price,
maxSimpleState(price) AS max_price,
countState(price) AS volume,
avgState(price) AS avg_price
FROM uk_price_paid
GROUP BY month;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 22', () => {
    const query = `CREATE TABLE uk_mortgage_rates ( date DateTime64,
variable Decimal32(2),
fixed Decimal32(2),
bank Decimal32(2)
)
ENGINE Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 23', () => {
    const query = `CREATE DICTIONARY uk_mortgage_rates_dict ( date DateTime64,
variable Decimal32(2),
fixed Decimal32(2),
bank Decimal32(2)
)
PRIMARY KEY date
SOURCE(
CLICKHOUSE(TABLE 'uk_mortgage_rates')
)
LAYOUT(COMPLEX_KEY_HASHED())
LIFETIME(2628000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 24', () => {
    const query = `CREATE TABLE t (letter String) ENGINE=MergeTree order by () partition by letter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 25', () => {
    const query = `CREATE TABLE a (x String, y String MATERIALIZED 'str') ENGINE = ReplicatedMergeTree('/clickhouse/{database}/a', 'r1') ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 26', () => {
    const query = `CREATE TABLE test_new_json_type(id UInt32, data JSON, version UInt64) ENGINE=ReplacingMergeTree(version) ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 27', () => {
    const query = `CREATE TABLE t_async_insert_alter (id Int64, v1 Int64) ENGINE = MergeTree ORDER BY id SETTINGS async_insert = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 28', () => {
    const query = `CREATE TABLE t_local_1 (a UInt32) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 29', () => {
    const query = `CREATE TABLE t_local_2 (a UInt32) ENGINE = MergeTree ORDER BY  a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 30', () => {
    const query = `CREATE TABLE t_merge AS t_local_1 ENGINE = Merge(currentDatabase(), '^(t_local_1|t_local_2)\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 31', () => {
    const query = `CREATE TABLE t_distr AS t_local_1 ENGINE = Distributed('test_shard_localhost', currentDatabase(), t_merge, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 32', () => {
    const query = `CREATE TABLE test_new_json_type(id Nullable(UInt32), data JSON, version UInt64) ENGINE=ReplacingMergeTree(version) ORDER BY id settings allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 33', () => {
    const query = `CREATE TABLE table1 (number UInt64) ENGINE=MergeTree ORDER BY number SETTINGS index_granularity=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 34', () => {
    const query = `CREATE VIEW view1 AS SELECT number FROM table1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 35', () => {
    const query = `CREATE TABLE test_left (a Int64, b String, c LowCardinality(String)) ENGINE = MergeTree() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 36', () => {
    const query = `CREATE TABLE test_right (a Int64, b String, c LowCardinality(String)) ENGINE = MergeTree() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 37', () => {
    const query = `CREATE TABLE tab ( v0 String,
v1 String,
INDEX idx (v0, v1) TYPE full_text GRANULARITY 1)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 38', () => {
    const query = `CREATE TABLE t_async_insert_params (id UInt64) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 39', () => {
    const query = `CREATE TABLE IF NOT EXISTS table_name (
id UInt64
)
ENGINE = MergeTree()
ORDER BY cityHash64(id)
SAMPLE BY cityHash64(id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 40', () => {
    const query = `create table test (json JSON(SKIP REGEXP '[]')) engine=Memory(); -- {serverError CANNOT_COMPILE_REGEXP} create table test (json JSON(SKIP REGEXP '+')) engine=Memory(); -- {serverError CANNOT_COMPILE_REGEXP};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 41', () => {
    const query = `create table test (json JSON) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 42', () => {
    const query = `create table test_json_dynamic_aggregate_functions (json JSON(a1 String, max_dynamic_paths=2, max_dynamic_types=2)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 43', () => {
    const query = `create table test (d Dynamic, json JSON) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 44', () => {
    const query = `create table test (s String) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 45', () => {
    const query = `create table test (s Array(String)) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 46', () => {
    const query = `create table test (s Tuple(String, String)) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 47', () => {
    const query = `create table test (json JSON(max_dynamic_paths=8)) engine=MergeTree order by tuple() settings min_rows_for_wide_part = 1, min_bytes_for_wide_part = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 48', () => {
    const query = `create table test (json JSON(max_dynamic_paths=1)) engine=MergeTree order by tuple() settings min_rows_for_wide_part = 1, min_bytes_for_wide_part = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 49', () => {
    const query = `create table null as system.one engine=Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 50', () => {
    const query = `create table dist as null engine=Distributed(test_cluster_two_shards, currentDatabase(), 'null', rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 51', () => {
    const query = `create table rocksdb (key Int) engine=EmbeddedRocksDB() primary key key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 52', () => {
    const query = `create table mt (key Int) engine=MergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 53', () => {
    const query = `create table rep1 (key Int) engine=ReplicatedMergeTree('/{database}/rep', '{table}') order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 54', () => {
    const query = `create table rep2 (key Int) engine=ReplicatedMergeTree('/{database}/rep', '{table}') order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 55', () => {
    const query = `CREATE TABLE test__fuzz_22 (k Float32, v String) ENGINE = MergeTree ORDER BY k SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 56', () => {
    const query = `create table test (json JSON(max_dynamic_paths=8)) engine=MergeTree order by tuple() settings min_bytes_for_wide_part=1, min_rows_for_wide_part=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 57', () => {
    const query = `CREATE TABLE t1 (\`a\` Int64, \`b\` Int64) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 58', () => {
    const query = `CREATE TABLE t2 (\`key\` Int32, \`val\` Int64) ENGINE = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 59', () => {
    const query = `CREATE TABLE test (k UInt64, v String) ENGINE = MergeTree
ORDER BY k
SETTINGS index_granularity=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 60', () => {
    const query = `CREATE TABLE test__fuzz_22 (k Float32, v String) ENGINE = ReplicatedMergeTree('/clickhouse/03222/{database}/test__fuzz_22', 'r1') ORDER BY k SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 61', () => {
    const query = `CREATE TABLE test_00808 (
\`date\` Date,
\`id\` Int8,
\`name\` String,
\`value\` Int64,
\`sign\` Int8
)
ENGINE = CollapsingMergeTree(sign)
ORDER BY (id, date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 62', () => {
    const query = `create table test (json JSON) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 63', () => {
    const query = `create table test (json JSON(max_dynamic_paths=2)) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 64', () => {
    const query = `create table test (json JSON(max_dynamic_paths=8)) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 65', () => {
    const query = `CREATE TABLE table1(col AggregateFunction(uniq, UInt64)) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 66', () => {
    const query = `CREATE TABLE table2(UserID UInt64) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 67', () => {
    const query = `CREATE TABLE table1(address IPv6 DEFAULT toIPv6('2001:db8:3333:4444:5555:6666:7777:8888')) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 68', () => {
    const query = `create database if not exists shard_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 69', () => {
    const query = `create database if not exists shard_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 70', () => {
    const query = `create table shard_0.dt64_03222(id UInt64, dt DateTime64(3)) engine = MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 71', () => {
    const query = `create table shard_1.dt64_03222(id UInt64, dt DateTime64(3)) engine = MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 72', () => {
    const query = `create table distr_03222_dt64 (id UInt64, dt DateTime64(3)) engine = Distributed(test_cluster_two_shards_different_databases, '', dt64_03222);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 73', () => {
    const query = `CREATE TABLE 03222_timeseries_table1 ENGINE = TimeSeries FORMAT Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 74', () => {
    const query = `CREATE TABLE 03222_timeseries_table2 ENGINE = TimeSeries SETTINGS store_min_time_and_max_time = 1, aggregate_min_time_and_max_time = 1 FORMAT Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 75', () => {
    const query = `CREATE TABLE 03222_timeseries_table4 ENGINE = TimeSeries SETTINGS store_min_time_and_max_time = 0 FORMAT Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 76', () => {
    const query = `CREATE MATERIALIZED VIEW 03221_rmv REFRESH AFTER 10 SECOND
(
x UInt64
)
ENGINE = Memory
AS SELECT number AS x
FROM numbers(3)
UNION ALL
SELECT rand64() AS x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 77', () => {
    const query = `CREATE TABLE t_merge_profile_events_1 (id UInt64, v1 UInt64, v2 UInt64) ENGINE = MergeTree ORDER BY id
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 78', () => {
    const query = `CREATE TABLE t_merge_profile_events_2 (id UInt64, v1 UInt64, v2 UInt64) ENGINE = MergeTree ORDER BY id
SETTINGS min_bytes_for_wide_part = 0, vertical_merge_algorithm_min_rows_to_activate = 1, vertical_merge_algorithm_min_columns_to_activate = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 79', () => {
    const query = `CREATE TABLE t_merge_profile_events_3 (id UInt64, v1 UInt64, v2 UInt64, PROJECTION p (SELECT v2, v2 * v2, v2 * 2, v2 * 10, v1 ORDER BY v1)) ENGINE = MergeTree ORDER BY id
SETTINGS min_bytes_for_wide_part = 0, vertical_merge_algorithm_min_rows_to_activate = 1, vertical_merge_algorithm_min_columns_to_activate = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 80', () => {
    const query = `CREATE TABLE IF NOT EXISTS report_metrics_v2 (
	\`a\` UInt64
) Engine = MergeTree()
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 81', () => {
    const query = `CREATE TABLE example_table (id UInt32) ENGINE=MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 82', () => {
    const query = `CREATE TABLE example_table (id UInt32) ENGINE=MergeTree() ORDER BY id; -- { serverError TABLE_ALREADY_EXISTS } DROP DATABASE IF EXISTS example_database;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 83', () => {
    const query = `CREATE DATABASE example_database;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 84', () => {
    const query = `CREATE DATABASE example_database; -- { serverError DATABASE_ALREADY_EXISTS } SET create_if_not_exists=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 85', () => {
    const query = `CREATE TABLE t_primary_index_memory (s String) ENGINE = MergeTree ORDER BY s SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 86', () => {
    const query = `CREATE TABLE test_03217_system_tables_replica_1(x UInt32) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_03217_system_tables_replica', 'r1')
ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 87', () => {
    const query = `CREATE TABLE test_03217_system_tables_replica_2(x UInt32) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_03217_system_tables_replica', 'r2')
ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 88', () => {
    const query = `CREATE TABLE test_03217_merge_replica_1(x UInt32) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_03217_merge_replica', 'r1')
ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 89', () => {
    const query = `CREATE TABLE test_03217_merge_replica_2(x UInt32) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_03217_merge_replica', 'r2')
ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 90', () => {
    const query = `CREATE TABLE test_03217_all_replicas (x UInt32) ENGINE = Merge(currentDatabase(), 'test_03217_merge_replica_*');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 91', () => {
    const query = `CREATE VIEW 03215_test_v AS WITH RECURSIVE test_table AS
(
SELECT 1 AS number
UNION ALL
SELECT number + 1
FROM test_table
WHERE number < 100
)
SELECT sum(number)
FROM test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 92', () => {
    const query = `CREATE VIEW 03215_multi_v AS WITH RECURSIVE
task AS
(
SELECT
number AS task_id,
number - 1 AS parent_id
FROM numbers(10)
),
rtq AS
(
SELECT
task_id,
parent_id
FROM task AS t
WHERE t.parent_id = 1
UNION ALL
SELECT
t.task_id,
t.parent_id
FROM task AS t, rtq AS r
WHERE t.parent_id = r.task_id
)
SELECT count()
FROM rtq;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 93', () => {
    const query = `create table test (id UInt64) engine=MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 94', () => {
    const query = `CREATE FUNCTION 03215_udf_with_union AS () -> ( SELECT sum(s)
FROM
(
SELECT 1 AS s
UNION ALL
SELECT 1 AS s
)
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 95', () => {
    const query = `CREATE TABLE test_parquet (col1 int, col2 String) ENGINE=File(Parquet);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 96', () => {
    const query = `CREATE TABLE test_parquet (col1 int, col2 String) ENGINE=File(Parquet)  SETTINGS output_format_parquet_use_custom_encoder=false, output_format_parquet_write_page_index=true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 97', () => {
    const query = `CREATE TABLE test_parquet (col1 int, col2 String) ENGINE=File(Parquet)  SETTINGS output_format_parquet_use_custom_encoder=false, output_format_parquet_write_page_index=false;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 98', () => {
    const query = `CREATE TABLE IF NOT EXISTS t (shape Array(Array(Tuple(Float64, Float64))), wkt_string String, ord Float64) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 99', () => {
    const query = `CREATE TABLE t (x Int8) ENGINE MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 100', () => {
    const query = `create table t (number UInt64) engine MergeTree order by number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 101', () => {
    const query = `CREATE TABLE test__fuzz_21 (
\`x\` Decimal(18, 10)
)
ENGINE = MergeTree
ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 102', () => {
    const query = `create table test (json JSON(a Dynamic)) engine=MergeTree order by tuple() settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 103', () => {
    const query = `create table test (json JSON(a Dynamic)) engine=MergeTree order by tuple() settings min_rows_for_wide_part=10000000, min_bytes_for_wide_part=10000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 104', () => {
    const query = `CREATE TABLE a (key Nullable(String)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 105', () => {
    const query = `CREATE TABLE b (key Nullable(String)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 106', () => {
    const query = `CREATE TABLE testnull (
\`a\` Nullable(String),
\`b\` Nullable(String),
\`c\` Nullable(String)
)
ENGINE = MergeTree
PARTITION BY tuple()
ORDER BY c
SETTINGS index_granularity = 8192, allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 107', () => {
    const query = `CREATE TABLE product_groups ( 	group_id Int64,
	group_name String
) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 108', () => {
    const query = `CREATE TABLE products ( 	product_id Int64,
	product_name String,
	price DECIMAL(11, 2),
	group_id Int64
) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 109', () => {
    const query = `create table t (d Dynamic) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 110', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 111', () => {
    const query = `CREATE TABLE t0 (c0 Int32, c1 Int32, c2 String) ENGINE = Log() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 112', () => {
    const query = `CREATE TABLE source  (
Name String,
Value Int64
) ENGINE = MergeTree ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 113', () => {
    const query = `CREATE TABLE test_agg_variant (
Name String,
Value Variant(AggregateFunction(uniqExact, Int64), AggregateFunction(avg, Int64))
)
ENGINE = MergeTree
ORDER BY (Name);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 114', () => {
    const query = `CREATE TABLE a (
\`a_id\` String
)
ENGINE = MergeTree
PARTITION BY tuple()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 115', () => {
    const query = `CREATE TABLE b (
\`b_id\` AggregateFunction(uniq, Nullable(String))
)
ENGINE = AggregatingMergeTree
PARTITION BY tuple()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 116', () => {
    const query = `CREATE MATERIALIZED VIEW mv TO b (
\`b_id\` AggregateFunction(uniq, Nullable(String))
)
AS SELECT uniqState(if(a_id != '', a_id, NULL)) AS b_id
FROM a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 117', () => {
    const query = `create table test (d Dynamic) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 118', () => {
    const query = `create table test (d Dynamic(max_types=1)) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 119', () => {
    const query = `CREATE TABLE user_country ( user_id UInt64,
country String
)
ENGINE = ReplacingMergeTree
ORDER BY user_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 120', () => {
    const query = `CREATE TABLE user_transactions ( user_id UInt64,
transaction_id String
)
ENGINE = MergeTree
ORDER BY user_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 121', () => {
    const query = `create table date_table_pv (id Int32, dt Date) engine = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 122', () => {
    const query = `create view date_pv as select * from date_table_pv where dt =  {dtparam:Date};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 123', () => {
    const query = `create table date32_table_pv (id Int32, dt Date32) engine = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 124', () => {
    const query = `create view date32_pv as select * from date32_table_pv where dt =  {dtparam:Date32};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 125', () => {
    const query = `create table uuid_table_pv (id Int32, uu UUID) engine = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 126', () => {
    const query = `create view uuid_pv as select * from uuid_table_pv where uu =  {uuidparam:UUID};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 127', () => {
    const query = `create view date_pv2 as select * from date_table_pv where dt = {dtparam:Date} and id = {intparam:Int32};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 128', () => {
    const query = `create table ipv4_table_pv (id Int32, ipaddr IPv4) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 129', () => {
    const query = `create view ipv4_pv as select * from ipv4_table_pv where ipaddr = {ipv4param:IPv4};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 130', () => {
    const query = `CREATE TABLE order_by_all (
a String,
b Nullable(Int32),
all UInt64
)
ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_03210', 'r1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 131', () => {
    const query = `CREATE TABLE t_03209 ( \`a\` Decimal(18, 0), \`b\` Decimal(18, 1), \`c\` Decimal(36, 0) ) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_03209', 'r1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 132', () => {
    const query = `CREATE TABLE tab ( \`k\` Nullable(UInt32), \`k1\` Nullable(UInt32), \`k2\` Nullable(UInt32), \`v\` String ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 133', () => {
    const query = `CREATE TABLE mem ( \`k\` UInt64, \`v\` String ) ENGINE = Join(ANY, LEFT, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 134', () => {
    const query = `CREATE TABLE mem2 ( \`k\` UInt64, \`v\` String ) ENGINE = Join(ANY, RIGHT, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 135', () => {
    const query = `CREATE TABLE mem3 ( \`k\` UInt64, \`v\` String ) ENGINE = Join(ALL, FULL, k) SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 136', () => {
    const query = `CREATE TABLE mem4 ( \`k1\` UInt64, \`k2\` UInt64, \`v\` String ) ENGINE = Join(ALL, FULL, k1, k2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 137', () => {
    const query = `CREATE TABLE grouparray (
\`v\` AggregateFunction(groupArrayIntersect, Array(UInt8))
)
ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 138', () => {
    const query = `CREATE TABLE grouparray_string (
\`v\` AggregateFunction(groupArrayIntersect, Array(Tuple(Array(String))))
)
ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 139', () => {
    const query = `CREATE TABLE realtimedrep (\`amount\` Int32) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 140', () => {
    const query = `CREATE TABLE realtimedistributed (\`amount\` Int32) ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), realtimedrep, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 141', () => {
    const query = `CREATE TABLE realtimebuff__fuzz_19 (\`amount\` UInt32) ENGINE = Buffer(currentDatabase(), 'realtimedistributed', 16, 3600, 36000, 10000, 1000000, 10000000, 100000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 142', () => {
    const query = `CREATE TABLE realtimebuff__fuzz_20 (\`amount\` Nullable(Int32)) ENGINE = Buffer(currentDatabase(), 'realtimedistributed', 16, 3600, 36000, 10000, 1000000, 10000000, 100000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 143', () => {
    const query = `create table test (id UInt64, json JSON(max_dynamic_paths=8, a.b Array(JSON))) engine=MergeTree order by id settings min_rows_for_wide_part=1000000000, min_bytes_for_wide_part=10000000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 144', () => {
    const query = `create table test (id UInt64, json JSON(max_dynamic_paths=2, a.b.c UInt32)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 145', () => {
    const query = `CREATE DATABASE rdb1 ENGINE = Replicated('/test/test_replication_lag_metric', 'shard1', 'replica1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 146', () => {
    const query = `CREATE DATABASE rdb2 ENGINE = Replicated('/test/test_replication_lag_metric', 'shard1', 'replica2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 147', () => {
    const query = `CREATE TABLE rdb1.t (id UInt32) ENGINE = ReplicatedMergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 148', () => {
    const query = `CREATE TABLE tp ( type Int32,
eventcnt UInt64,
PROJECTION p (select sum(eventcnt), type group by type)
) engine = MergeTree order by type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 149', () => {
    const query = `CREATE TABLE tp ( type Int32,
eventcnt UInt64,
PROJECTION p (select sum(eventcnt), type group by type)
) engine = MergeTree order by type
SETTINGS deduplicate_merge_projection_mode = 'drop';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 150', () => {
    const query = `CREATE TABLE tp ( type Int32,
eventcnt UInt64,
PROJECTION p (select sum(eventcnt), type group by type)
) engine = ReplacingMergeTree order by type;  -- { serverError SUPPORT_IS_DISABLED }
CREATE TABLE tp (
type Int32,
eventcnt UInt64,
PROJECTION p (select sum(eventcnt), type group by type)
) engine = ReplacingMergeTree order by type
SETTINGS deduplicate_merge_projection_mode = 'throw';  -- { serverError SUPPORT_IS_DISABLED }
CREATE TABLE tp (
type Int32,
eventcnt UInt64,
PROJECTION p (select sum(eventcnt), type group by type)
) engine = ReplacingMergeTree order by type
SETTINGS deduplicate_merge_projection_mode = 'drop';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 151', () => {
    const query = `CREATE TABLE tp ( type Int32,
eventcnt UInt64,
PROJECTION p (select sum(eventcnt), type group by type)
) engine = ReplacingMergeTree order by type
SETTINGS deduplicate_merge_projection_mode = 'rebuild';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 152', () => {
    const query = `CREATE TABLE tp ( type Int32,
eventcnt UInt64
) engine = ReplacingMergeTree order by type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 153', () => {
    const query = `CREATE TABLE left (x UUID) ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 154', () => {
    const query = `CREATE TABLE right (x UUID) ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 155', () => {
    const query = `create table t(c Int32, d Bool) Engine=MergeTree order by c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 156', () => {
    const query = `create table t ( c Int32 primary key ,
s Bool ,
w Float64
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 157', () => {
    const query = `CREATE TABLE t1__fuzz_26 (\`a\` Nullable(Float64), \`b\` Nullable(Float32), \`pk\` Int64) ENGINE = MergeTree ORDER BY pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 158', () => {
    const query = `CREATE TABLE t1 ( a Float64, b Int64, pk String) Engine = MergeTree() ORDER BY pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 159', () => {
    const query = `create table test (json JSON(max_dynamic_paths=10)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 160', () => {
    const query = `create table test (json JSON(max_dynamic_types=10)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 161', () => {
    const query = `create table test (json JSON(a UInt32)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 162', () => {
    const query = `create table test (json JSON(aaaaa UInt32)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 163', () => {
    const query = `create table test (json JSON(\`a b c d\` UInt32)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 164', () => {
    const query = `create table test (json JSON(a.b.c UInt32)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 165', () => {
    const query = `create table test (json JSON(aaaa.b.cccc UInt32)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 166', () => {
    const query = `create table test (json JSON(\`some path\`.\`path some\` UInt32)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 167', () => {
    const query = `create table test (json JSON(a.b.c Tuple(d UInt32, e UInt32))) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 168', () => {
    const query = `create table test (json JSON(SKIP a)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 169', () => {
    const query = `create table test (json JSON(SKIP aaaa)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 170', () => {
    const query = `create table test (json JSON(SKIP \`a b c d\`)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 171', () => {
    const query = `create table test (json JSON(SKIP a.b.c)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 172', () => {
    const query = `create table test (json JSON(SKIP aaaa.b.cccc)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 173', () => {
    const query = `create table test (json JSON(SKIP \`some path\`.\`path some\`)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 174', () => {
    const query = `create table test (json JSON(SKIP REGEXP '.*a.*')) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 175', () => {
    const query = `create table test (json JSON(max_dynamic_paths=10, max_dynamic_types=10, a.b.c UInt32, b.c.d String, SKIP g.d.a, SKIP o.g.a, SKIP REGEXP '.*u.*', SKIP REGEXP 'abc')) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 176', () => {
    const query = `CREATE TABLE dict_03204 (k UInt64, v UInt64) ENGINE = Join(ANY, LEFT, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 177', () => {
    const query = `CREATE TABLE t_c3oollc8r (c_k37 Int32, c_y String, c_bou Int32, c_g1 Int32, c_lfntfzg Int32, c_kntw50q Int32) ENGINE = MergeTree ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 178', () => {
    const query = `CREATE TABLE foo (i Date) ENGINE MergeTree ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 179', () => {
    const query = `CREATE TABLE bugcheck1 ENGINE = MergeTree
ORDER BY tuple()
AS SELECT
'c1' as column_a,
'c2' as column_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 180', () => {
    const query = `CREATE TABLE t_missed_subcolumns (x UInt32) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 181', () => {
    const query = `CREATE TABLE t_missed_subcolumns (id UInt64, \`n.a\` Array(Nullable(String))) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 182', () => {
    const query = `CREATE TABLE t_missed_subcolumns (id UInt64) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 183', () => {
    const query = `CREATE TABLE t_03203 (p UInt64, v UInt64) ENGINE = MergeTree PARTITION BY p ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 184', () => {
    const query = `CREATE TABLE t (p UInt8, x UInt64) Engine = MergeTree PARTITION BY p ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 185', () => {
    const query = `CREATE TABLE t_subcolumns_join (id UInt64) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 186', () => {
    const query = `create table test (d Dynamic) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 187', () => {
    const query = `CREATE TABLE test ( idx UInt64,
coverage Array(UInt64),
test_name String
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 188', () => {
    const query = `CREATE TABLE seq ( number UInt64
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 189', () => {
    const query = `CREATE TABLE t1 (
\`s1\` String,
\`s2\` String,
\`s3\` String
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 190', () => {
    const query = `CREATE TABLE t2 (
\`fs1\` FixedString(10),
\`fs2\` FixedString(10)
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 191', () => {
    const query = `CREATE TABLE table_with_materialized (col String MATERIALIZED 'A') ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 192', () => {
    const query = `CREATE TABLE 03199_fixedstring_array (arr Array(LowCardinality(FixedString(8)))) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 193', () => {
    const query = `CREATE TABLE labels_unordered (
idx Int64,
score Float64,
label Int64
)
ENGINE = MergeTree
PRIMARY KEY idx
ORDER BY idx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 194', () => {
    const query = `CREATE TABLE labels_ordered (
idx Int64,
score Float64,
label Int64
)
ENGINE = MergeTree
PRIMARY KEY idx
ORDER BY idx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 195', () => {
    const query = `CREATE TABLE test_numbers__fuzz_29 (\`a\` Array(Nullable(FixedString(19)))) ENGINE = MergeTree ORDER BY a SETTINGS allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 196', () => {
    const query = `CREATE TABLE test_dynamic (id UInt64, d Dynamic) ENGINE = MergeTree ORDER BY id SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 197', () => {
    const query = `CREATE DICTIONARY \`test_dictionary0\` ( \`n1\` String,
\`n2\` UInt32
)
PRIMARY KEY n1
SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 DB 'test_db' TABLE 'table_01' USER 'default'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 198', () => {
    const query = `CREATE DICTIONARY \`test_dictionary1\` ( \`n1\` String,
\`n2\` UInt32
)
PRIMARY KEY n1
SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 DB 'test_db' TABLE 'table_01' USER 'default'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());  -- { serverError 36 }
CREATE DICTIONARY \`test_dictionary2\` (
\`n1\` UInt32,
\`n2\` UInt32
)
PRIMARY KEY n1
SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 DB 'test_db' TABLE 'table_01' USER 'default'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT()); -- { serverError 36 }
CREATE DICTIONARY \`test_dictionary3\` (
\`n1\` UInt64,
\`n2\` UInt32
)
PRIMARY KEY n1
SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 DB 'test_db' TABLE 'table_01' USER 'default'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 199', () => {
    const query = `CREATE TABLE my_events (start UInt32, end UInt32) Engine = MergeTree ORDER BY tuple() AS Select * FROM VALUES ('start UInt32, end UInt32', (1, 3), (1, 6), (2, 5), (3, 7));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 200', () => {
    const query = `CREATE TABLE test_serialization (
id UInt64,
text AggregateFunction(groupConcat, String)
) ENGINE = AggregatingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 201', () => {
    const query = `CREATE TABLE t_bloom_filter( key UInt64,
value UInt64,
INDEX key_bf key TYPE bloom_filter(0.01) GRANULARITY 2147483648, -- bloom filter on sorting key column
INDEX value_bf value TYPE bloom_filter(0.01) GRANULARITY 2147483648  -- bloom filter on no-sorting column
) ENGINE=MergeTree ORDER BY key
SETTINGS
ratio_of_defaults_for_sparse_serialization = 0.0
,vertical_merge_algorithm_min_rows_to_activate = 1
,vertical_merge_algorithm_min_columns_to_activate = 1
,allow_vertical_merges_from_compact_to_wide_parts = 1
,min_bytes_for_wide_part=0
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 202', () => {
    const query = `create table tab (x DateTime('UTC'), y UInt32, v Int32) engine = ReplacingMergeTree(v) order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 203', () => {
    const query = `CREATE TABLE test_projection_deduplicate (
\`id\` Int32,
\`string\` String,
PROJECTION test_projection
(
SELECT id
GROUP BY id
)
)
ENGINE = MergeTree
PRIMARY KEY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 204', () => {
    const query = `CREATE TABLE xxxx_yyy (key UInt32, key_b ALIAS key) ENGINE=MergeTree() ORDER BY key SETTINGS ratio_of_defaults_for_sparse_serialization=0.0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 205', () => {
    const query = `create table test (i int) engine MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 206', () => {
    const query = `create table test (i int) engine MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 207', () => {
    const query = `CREATE TABLE 03173_single_function ( dt Date,
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY toMonth(dt);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 208', () => {
    const query = `CREATE TABLE 03173_nested_function( id Int32,
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY xxHash32(id) % 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 209', () => {
    const query = `CREATE TABLE 03173_nested_function_lc( id LowCardinality(Int32),
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY xxHash32(id) % 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 210', () => {
    const query = `CREATE TABLE 03173_nested_function_null( id Nullable(Int32),
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY xxHash32(id) % 3
SETTINGS allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 211', () => {
    const query = `CREATE TABLE 03173_nested_function_lc_null( id LowCardinality(Nullable(Int32)),
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY xxHash32(id) % 3
SETTINGS allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 212', () => {
    const query = `CREATE TABLE 03173_nonsafe_cast( id Int64,
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY xxHash32(id) % 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 213', () => {
    const query = `CREATE TABLE 03173_multiple_partition_cols ( key1 Int32,
key2 Int32
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY (intDiv(key1, 50), xxHash32(key2) % 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 214', () => {
    const query = `CREATE TABLE 03173_base_data_source( id Int32,
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY xxHash32(id) % 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 215', () => {
    const query = `CREATE TABLE 03173_low_cardinality_set (id LowCardinality(Int32)) ENGINE=Memory AS SELECT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 216', () => {
    const query = `CREATE TABLE 03173_nullable_set (id Nullable(Int32)) ENGINE=Memory AS SELECT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 217', () => {
    const query = `CREATE TABLE 03173_lc_nullable_set (id LowCardinality(Nullable(Int32))) ENGINE=Memory AS SELECT 10 UNION ALL SELECT NULL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 218', () => {
    const query = `CREATE TABLE 03173_date_parsing ( id String
)
ENGINE=MergeTree
ORDER BY tuple()
PARTITION BY toDate(id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 219', () => {
    const query = `CREATE TABLE 03173_nested_date_parsing ( id String
)
ENGINE=MergeTree
ORDER BY tuple()
PARTITION BY toMonth(toDate(id));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 220', () => {
    const query = `CREATE TABLE 03173_empty_transform( id Int32,
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY xxHash32(id) % 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 221', () => {
    const query = `create table test_qualify (number Int64) ENGINE = MergeTree ORDER BY (number);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 222', () => {
    const query = `CREATE TABLE test (id UInt64, value String) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 223', () => {
    const query = `CREATE DICTIONARY test_dict (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE test))
LAYOUT(FLAT())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 224', () => {
    const query = `CREATE TABLE view_source (id UInt64) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 225', () => {
    const query = `CREATE VIEW view AS SELECT id, dictGet('test_dict', 'value', id) as value FROM view_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 226', () => {
    const query = `CREATE OR REPLACE DICTIONARY test_dict (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE view))
LAYOUT(FLAT())
LIFETIME(MIN 0 MAX 1000); -- {serverError INFINITE_LOOP}
REPLACE DICTIONARY test_dict
(
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE view))
LAYOUT(FLAT())
LIFETIME(MIN 0 MAX 1000); -- {serverError INFINITE_LOOP}
DROP DICTIONARY IF EXISTS test_dict_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 227', () => {
    const query = `CREATE DICTIONARY test_dict_2 (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE view))
LAYOUT(FLAT())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 228', () => {
    const query = `CREATE OR REPLACE DICTIONARY test_dict_2 (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE view))
LAYOUT(FLAT())
LIFETIME(MIN 0 MAX 1000); `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 229', () => {
    const query = `CREATE TABLE test_hilbert_encode (x UInt32, y UInt32) ENGINE = MergeTree ORDER BY hilbertEncode(x, y) SETTINGS index_granularity = 8192, index_granularity_bytes = '1Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 230', () => {
    const query = `CREATE TABLE test_hilbert_encode (x UInt32, y UInt32) ENGINE = MergeTree ORDER BY hilbertEncode(x, y) SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 231', () => {
    const query = `CREATE TABLE x ( hash_id UInt64, user_result Decimal(3, 2) ) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 232', () => {
    const query = `CREATE TABLE y ( hash_id UInt64, user_result  DECIMAL(18, 6) ) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 233', () => {
    const query = `CREATE DICTIONARY d1 (hash_id UInt64, user_result Decimal(3, 2) ) PRIMARY KEY hash_id
SOURCE(CLICKHOUSE(TABLE 'x'))
LIFETIME(0)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 234', () => {
    const query = `CREATE DICTIONARY d2 (hash_id UInt64, user_result Decimal(3, 2) ) PRIMARY KEY hash_id
SOURCE(CLICKHOUSE(TABLE 'x'))
LIFETIME(0)
LAYOUT(HASHED_ARRAY());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 235', () => {
    const query = `CREATE TABLE t_func_to_subcolumns_map_2 (id UInt64, m Map(String, UInt64)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 236', () => {
    const query = `CREATE TABLE t_func_to_subcolumns_join (id UInt64, arr Array(UInt64), n Nullable(String), m Map(String, UInt64)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 237', () => {
    const query = `CREATE TABLE t_func_to_subcolumns_use_nulls (arr Array(UInt64), v UInt64) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 238', () => {
    const query = `CREATE TABLE simple_key_simple_attributes_source_table (
id UInt64,
value_first String,
value_second String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 239', () => {
    const query = `CREATE DICTIONARY direct_dictionary_simple_key_simple_attributes (
\`id\` UInt64,
\`value_first\` String DEFAULT 'value_first_default',
\`value_second\` String DEFAULT 'value_second_default'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'simple_key_simple_attributes_source_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 240', () => {
    const query = `CREATE TABLE test_table (
\`key\` UInt32,
\`_part_offset\` DEFAULT 0
)
ENGINE = MergeTree
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 241', () => {
    const query = `CREATE TABLE column_modify_test (id UInt64, val String, other_col UInt64) engine=MergeTree ORDER BY id SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 242', () => {
    const query = `CREATE TABLE complex_key_simple_attributes_source_short_circuit_table (
id UInt64,
id_key String,
value_first String,
value_second String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 243', () => {
    const query = `CREATE DICTIONARY cache_dictionary_complex_key_simple_attributes_short_circuit (
\`id\` UInt64,
\`id_key\` String,
\`value_first\` String DEFAULT 'value_first_default',
\`value_second\` String DEFAULT 'value_second_default'
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(TABLE 'complex_key_simple_attributes_source_short_circuit_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(COMPLEX_KEY_CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 244', () => {
    const query = `CREATE TABLE t_read_in_order_2 (id UInt64, v UInt64) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 245', () => {
    const query = `CREATE TABLE t_read_in_order_1 (id UInt64, v UInt64) ENGINE = MergeTree ORDER BY id
SETTINGS index_granularity = 1024, index_granularity_bytes = '10M';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 246', () => {
    const query = `CREATE DATABASE IF NOT EXISTS 03147_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 247', () => {
    const query = `CREATE TABLE 03147_db.t (n Int8) ENGINE=MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 248', () => {
    const query = `create table a (x \`Null\`); -- { clientError SYNTAX_ERROR } create table a (x f(\`Null\`)); -- { clientError SYNTAX_ERROR }
create table a (x Enum8(f(\`Null\`, 'World', 2))); -- { clientError SYNTAX_ERROR }
create table a (\`value2\` Enum8('Hello' = 1, equals(\`Null\`, 'World', 2), '!' = 3)); -- { clientError SYNTAX_ERROR }
create table a (x Int8) engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 249', () => {
    const query = `create table b empty as a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 250', () => {
    const query = `CREATE TABLE null_table (str String) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 251', () => {
    const query = `CREATE MATERIALIZED VIEW mv_table (str String) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/transactions_disabled_rmt', '{replica}') ORDER BY str AS SELECT str AS str FROM null_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 252', () => {
    const query = `CREATE OR REPLACE VIEW param_test AS SELECT {test_str:String} as s_result;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 253', () => {
    const query = `CREATE TABLE t_ind_merge_2 ( a UInt64,
b UInt64,
c UInt64,
d UInt64,
e UInt64,
f UInt64,
INDEX idx_a  a TYPE minmax,
INDEX idx_b  b TYPE minmax,
INDEX idx_cd c * d TYPE minmax,
INDEX idx_d1 d TYPE minmax,
INDEX idx_d2 d + 7 TYPE set(3),
INDEX idx_e  e * 3 TYPE set(3))
ENGINE = MergeTree
ORDER BY a SETTINGS
index_granularity = 64,
vertical_merge_algorithm_min_rows_to_activate = 1,
vertical_merge_algorithm_min_columns_to_activate = 1,
min_bytes_for_wide_part = 0,
min_bytes_for_full_part_storage = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 254', () => {
    const query = `CREATE TABLE t_ind_merge_1 (a UInt64, b UInt64, c UInt64, d UInt64, INDEX idx_b b TYPE minmax) ENGINE = MergeTree
ORDER BY a SETTINGS
index_granularity = 64,
merge_max_block_size = 8192,
vertical_merge_algorithm_min_rows_to_activate = 1,
vertical_merge_algorithm_min_columns_to_activate = 1,
min_bytes_for_wide_part = 0,
min_bytes_for_full_part_storage = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 255', () => {
    const query = `CREATE TABLE tab ( name String,
event Int8
) ENGINE = MergeTree
ORDER BY name
SETTINGS optimize_row_order = true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 256', () => {
    const query = `CREATE TABLE tab ( name String,
timestamp Int64,
money UInt8,
flag String
) ENGINE = MergeTree
ORDER BY ()
SETTINGS optimize_row_order = True;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 257', () => {
    const query = `CREATE TABLE tab ( name FixedString(2),
timestamp Float32,
money Float64,
flag Nullable(Int32)
) ENGINE = MergeTree
ORDER BY (flag, money)
SETTINGS optimize_row_order = True, allow_nullable_key = True;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 258', () => {
    const query = `CREATE TABLE tab ( fixed_str FixedString(6),
event_date Date,
vector_array Array(Float32),
nullable_int Nullable(Int128),
low_card_string LowCardinality(String),
map_column Map(String, String),
tuple_column Tuple(UInt256)
) ENGINE = MergeTree()
ORDER BY (fixed_str, event_date)
SETTINGS optimize_row_order = True;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 259', () => {
    const query = `create table src (x Int64) engine = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 260', () => {
    const query = `create table dst (s String, lc LowCardinality(String)) engine MergeTree order by s;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 261', () => {
    const query = `create materialized view mv to dst (s String, lc String) as select 'a' as s, toLowCardinality('b') as lc from src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 262', () => {
    const query = `CREATE TABLE 03165_token_bf (
id Int64,
message String,
INDEX idx_message message TYPE tokenbf_v1(32768, 3, 2) GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 263', () => {
    const query = `CREATE TABLE 03165_token_ft (
id Int64,
message String,
INDEX idx_message message TYPE full_text() GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY id
SETTINGS min_bytes_for_full_part_storage=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 264', () => {
    const query = `CREATE TABLE ids (id UUID, whatever String) Engine=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 265', () => {
    const query = `CREATE TABLE data (id UUID, event_time DateTime, status String) Engine=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 266', () => {
    const query = `CREATE TABLE data2 (id UUID, event_time DateTime, status String) Engine=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 267', () => {
    const query = `CREATE TABLE tab ( id Int32,
scale Int16,
u8 UInt8, u16 UInt16, u32 UInt32, u64 UInt64,
i8 Int8, i16 Int16, i32 Int32, i64 Int64,
f32 Float32, f64 Float64
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 268', () => {
    const query = `CREATE TABLE tab ( id Int32,
scale Int16,
d32 Decimal32(4), d64 Decimal64(4), d128 Decimal128(4), d256 Decimal256(4)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 269', () => {
    const query = `CREATE TABLE test ENGINE = ReplacingMergeTree
PRIMARY KEY id
AS SELECT number AS id FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 270', () => {
    const query = `CREATE TABLE atable (
cdu_date Int16,
loanx_id String,
rating_sp String
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 271', () => {
    const query = `CREATE TABLE t_compact_bytes_s3(c1 UInt32, c2 UInt32, c3 UInt32, c4 UInt32, c5 UInt32) ENGINE = MergeTree ORDER BY c1
SETTINGS index_granularity = 512, min_bytes_for_wide_part = '10G', storage_policy = 's3_no_cache';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 272', () => {
    const query = `CREATE TABLE range_filter_custom_range_test (k UInt64) ENGINE=MergeTree ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 273', () => {
    const query = `CREATE TABLE range_filter_custom_range_test_2 (k UInt64) ENGINE=MergeTree ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 274', () => {
    const query = `CREATE TABLE range_filter_custom_range_test_3 (k UInt64) ENGINE=MergeTree ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 275', () => {
    const query = `CREATE TABLE 03164_users (uid Nullable(Int16), name String, age Int16) ENGINE=MergeTree ORDER BY (uid) SETTINGS allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 276', () => {
    const query = `CREATE TABLE 03164_multi_key (c1 Nullable(UInt32), c2 Nullable(UInt32)) ENGINE = MergeTree ORDER BY (c1, c2) SETTINGS allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 277', () => {
    const query = `CREATE TABLE t_skip_index_insert (
a UInt64,
b UInt64,
INDEX idx_a a TYPE minmax,
INDEX idx_b b TYPE set(3)
)
ENGINE = MergeTree ORDER BY tuple() SETTINGS index_granularity = 4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 278', () => {
    const query = `CREATE TABLE checks (
\`pull_request_number\` UInt32,
\`commit_sha\` LowCardinality(String),
\`check_name\` LowCardinality(String),
\`check_status\` LowCardinality(String),
\`check_duration_ms\` UInt64,
\`check_start_time\` DateTime,
\`test_name\` LowCardinality(String),
\`test_status\` LowCardinality(String),
\`test_duration_ms\` UInt64,
\`report_url\` String,
\`pull_request_url\` String,
\`commit_url\` String,
\`task_url\` String,
\`base_ref\` String,
\`base_repo\` String,
\`head_ref\` String,
\`head_repo\` String,
\`test_context_raw\` String,
\`instance_type\` LowCardinality(String),
\`instance_id\` String,
\`date\` Date MATERIALIZED toDate(check_start_time)
)
ENGINE = MergeTree ORDER BY (date, pull_request_number, commit_sha, check_name, test_name, check_start_time);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 279', () => {
    const query = `CREATE TABLE src_table (
time DateTime('UTC') DEFAULT fromUnixTimestamp(sipTimestamp),
sipTimestamp UInt64
)
ENGINE = MergeTree
ORDER BY time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 280', () => {
    const query = `CREATE TABLE copied_table AS src_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 281', () => {
    const query = `CREATE TABLE t (
c1	Int64	,
c2	Int64	,
c3	Int64	,
c4	Int64	,
c5	Int64	,
c6	Int64	,
c7	Int64	,
c8	Int64	,
c9	Int64	,
c10	Int64	,
c11	Int64	,
c12	Int64	,
c13	Int64	,
c14	Int64	,
c15	Int64	,
c16	Int64	,
c17	Int64	,
c18	Int64	,
c19	Int64	,
c20	Int64	,
c21	Int64	,
c22	Int64	,
c23	Int64	,
c24	Int64	,
c25	Int64	,
c26	Int64	,
c27	Int64	,
c28	Int64	,
c29	Int64	,
c30	Int64	,
c31	Int64	,
c32	Int64	,
c33	Int64	,
c34	Int64	,
c35	Int64	,
c36	Int64	,
c37	Int64	,
c38	Int64	,
c39	Int64	,
c40	Int64	,
c41	Int64	,
c42	Int64	,
c43	Int64	,
c44	Int64	,
c45	Int64	,
c46	Int64	,
c47	Int64	,
c48	Int64	,
c49	Int64	,
c50	Int64	,
c51	Int64	,
c52	Int64	,
c53	Int64	,
c54	Int64	,
c55	Int64	,
c56	Int64	,
c57	Int64	,
c58	Int64	,
c59	Int64	,
c60	Int64	,
c61	Int64	,
c62	Int64	,
c63	Int64	,
c64	Int64	,
c65	Int64	,
c66	Int64	,
c67	Int64	,
c68	Int64	,
c69	Int64	,
c70	Int64	,
c71	Int64	,
c72	Int64	,
c73	Int64	,
c74	Int64	,
c75	Int64	,
c76	Int64	,
c77	Int64	,
c78	Int64	,
c79	Int64	,
c80	Int64	,
c81	Int64	,
c82	Int64	,
c83	Int64	,
c84	Int64	,
c85	Int64	,
c86	Int64	,
c87	Int64	,
c88	Int64	,
c89	Int64	,
c90	Int64	,
c91	Int64	,
c92	Int64	,
c93	Int64	,
c94	Int64	,
c95	Int64	,
c96	Int64	,
c97	Int64	,
c98	Int64	,
c99	Int64	,
c100	Int64	,
c101	Int64	,
c102	Int64	,
c103	Int64	,
c104	Int64	,
c105	Int64	,
c106	Int64	,
c107	Int64	,
c108	Int64	,
c109	Int64	,
c110	Int64	,
c111	Int64	,
c112	Int64	,
c113	Int64	,
c114	Int64	,
c115	Int64	,
c116	Int64	,
c117	Int64	,
c118	Int64	,
c119	Int64	,
c120	Int64	,
c121	Int64	,
c122	Int64	,
c123	Int64	,
c124	Int64	,
c125	Int64	,
c126	Int64	,
c127	Int64	,
c128	Int64	,
c129	Int64	,
c130	Int64	,
c131	Int64	,
c132	Int64	,
c133	Int64	,
c134	Int64	,
c135	Int64	,
c136	Int64	,
c137	Int64	,
c138	Int64	,
c139	Int64	,
c140	Int64	,
c141	Int64	,
c142	Int64	,
c143	Int64	,
c144	Int64	,
c145	Int64	,
c146	Int64	,
c147	Int64	,
c148	Int64	,
c149	Int64	,
c150	Int64	,
c151	Int64	,
c152	Int64	,
c153	Int64	,
c154	Int64	,
c155	Int64	,
c156	Int64	,
c157	Int64	,
c158	Int64	,
c159	Int64	,
c160	Int64	,
c161	Int64	,
c162	Int64	,
c163	Int64	,
c164	Int64	,
c165	Int64	,
c166	Int64	,
c167	Int64	,
c168	Int64	,
c169	Int64	,
c170	Int64	,
c171	Int64	,
c172	Int64	,
c173	Int64	,
c174	Int64	,
c175	Int64	,
c176	Int64	,
c177	Int64	,
c178	Int64	,
c179	Int64	,
c180	Int64	,
c181	Int64	,
c182	Int64	,
c183	Int64	,
c184	Int64	,
c185	Int64	,
c186	Int64	,
c187	Int64	,
c188	Int64	,
c189	Int64	,
c190	Int64	,
c191	Int64	,
c192	Int64	,
c193	Int64	,
c194	Int64	,
c195	Int64	,
c196	Int64	,
c197	Int64	,
c198	Int64	,
c199	Int64	,
c200	Int64	,
c201	Int64	,
c202	Int64	,
c203	Int64	,
c204	Int64	,
c205	Int64	,
c206	Int64	,
c207	Int64	,
c208	Int64	,
c209	Int64	,
c210	Int64	,
c211	Int64	,
c212	Int64	,
c213	Int64	,
c214	Int64	,
c215	Int64	,
c216	Int64	,
c217	Int64	,
c218	Int64	,
c219	Int64	,
c220	Int64	,
c221	Int64	,
c222	Int64	,
c223	Int64	,
c224	Int64	,
c225	Int64	,
c226	Int64	,
c227	Int64	,
c228	Int64	,
c229	Int64	,
c230	Int64	,
c231	Int64	,
c232	Int64	,
c233	Int64	,
c234	Int64	,
c235	Int64	,
c236	Int64	,
c237	Int64	,
c238	Int64	,
c239	Int64	,
c240	Int64	,
c241	Int64	,
c242	Int64	,
c243	Int64	,
c244	Int64	,
c245	Int64	,
c246	Int64	,
c247	Int64	,
c248	Int64	,
c249	Int64	,
c250	Int64	,
c251	Int64	,
c252	Int64	,
c253	Int64	,
c254	Int64	,
c255	Int64	,
c256	Int64	,
c257	Int64	,
c258	Int64	,
c259	Int64	,
c260	Int64	,
c261	Int64	,
c262	Int64	,
c263	Int64	,
c264	Int64	,
c265	Int64	,
c266	Int64	,
c267	Int64	,
c268	Int64	,
c269	Int64	,
c270	Int64	,
c271	Int64	,
c272	Int64	,
c273	Int64	,
c274	Int64	,
c275	Int64	,
c276	Int64	,
c277	Int64	,
c278	Int64	,
c279	Int64	,
c280	Int64	,
c281	Int64	,
c282	Int64	,
c283	Int64	,
c284	Int64	,
c285	Int64	,
c286	Int64	,
c287	Int64	,
c288	Int64	,
c289	Int64	,
c290	Int64	,
c291	Int64	,
c292	Int64	,
c293	Int64	,
c294	Int64	,
c295	Int64	,
c296	Int64	,
c297	Int64	,
c298	Int64	,
c299	Int64	,
c300	Int64	,
c301	Int64	,
c302	Int64	,
c303	Int64	,
c304	Int64	,
c305	Int64	,
c306	Int64	,
c307	Int64	,
c308	Int64	,
c309	Int64	,
c310	Int64	,
c311	Int64	,
c312	Int64	,
c313	Int64	,
c314	Int64	,
c315	Int64	,
c316	Int64	,
c317	Int64	,
c318	Int64	,
c319	Int64	,
c320	Int64	,
c321	Int64	,
c322	Int64	,
c323	Int64	,
c324	Int64	,
c325	Int64	,
c326	Int64	,
c327	Int64	,
c328	Int64	,
c329	Int64	,
c330	Int64	,
c331	Int64	,
c332	Int64	,
c333	Int64	,
c334	Int64	,
c335	Int64	,
c336	Int64	,
c337	Int64	,
c338	Int64	,
c339	Int64	,
c340	Int64	,
c341	Int64	,
c342	Int64	,
c343	Int64	,
c344	Int64	,
c345	Int64	,
c346	Int64	,
c347	Int64	,
c348	Int64	,
c349	Int64	,
c350	Int64	,
c351	Int64	,
c352	Int64	,
c353	Int64	,
c354	Int64	,
c355	Int64	,
c356	Int64	,
c357	Int64	,
c358	Int64	,
c359	Int64	,
c360	Int64	,
c361	Int64	,
c362	Int64	,
c363	Int64	,
c364	Int64	,
c365	Int64	,
c366	Int64	,
c367	Int64	,
c368	Int64	,
c369	Int64	,
c370	Int64	,
c371	Int64	,
c372	Int64	,
c373	Int64	,
c374	Int64	,
c375	Int64	,
c376	Int64	,
c377	Int64	,
c378	Int64	,
c379	Int64	,
c380	Int64	,
c381	Int64	,
c382	Int64	,
c383	Int64	,
c384	Int64	,
c385	Int64	,
c386	Int64	,
c387	Int64	,
c388	Int64	,
c389	Int64	,
c390	Int64	,
c391	Int64	,
c392	Int64	,
c393	Int64	,
c394	Int64	,
c395	Int64	,
c396	Int64	,
c397	Int64	,
c398	Int64	,
c399	Int64	,
c400	Int64	,
c401	Int64	,
c402	Int64	,
c403	Int64	,
c404	Int64	,
c405	Int64	,
c406	Int64	,
c407	Int64	,
c408	Int64	,
c409	Int64	,
c410	Int64	,
c411	Int64	,
c412	Int64	,
c413	Int64	,
c414	Int64	,
c415	Int64	,
c416	Int64	,
c417	Int64	,
c418	Int64	,
c419	Int64	,
c420	Int64	,
c421	Int64	,
c422	Int64	,
c423	Int64	,
c424	Int64	,
c425	Int64	,
c426	Int64	,
c427	Int64	,
c428	Int64	,
c429	Int64	,
c430	Int64	,
c431	Int64	,
c432	Int64	,
c433	Int64	,
c434	Int64	,
c435	Int64	,
c436	Int64	,
c437	Int64	,
c438	Int64	,
c439	Int64	,
c440	Int64	,
c441	Int64	,
c442	Int64	,
c443	Int64	,
c444	Int64	,
c445	Int64	,
c446	Int64	,
c447	Int64	,
c448	Int64	,
c449	Int64	,
c450	Int64	,
c451	Int64	,
c452	Int64	,
c453	Int64	,
c454	Int64	,
c455	Int64	,
c456	Int64	,
c457	Int64	,
c458	Int64	,
c459	Int64	,
c460	Int64	,
c461	Int64	,
c462	Int64	,
c463	Int64	,
c464	Int64	,
c465	Int64	,
c466	Int64	,
c467	Int64	,
c468	Int64	,
c469	Int64	,
c470	Int64	,
c471	Int64	,
c472	Int64	,
c473	Int64	,
c474	Int64	,
c475	Int64	,
c476	Int64	,
c477	Int64	,
c478	Int64	,
c479	Int64	,
c480	Int64	,
c481	Int64	,
c482	Int64	,
c483	Int64	,
c484	Int64	,
c485	Int64	,
c486	Int64	,
c487	Int64	,
c488	Int64	,
c489	Int64	,
c490	Int64	,
c491	Int64	,
c492	Int64	,
c493	Int64	,
c494	Int64	,
c495	Int64	,
c496	Int64	,
c497	Int64	,
c498	Int64	,
c499	Int64	,
c500	Int64	,
b1	Int64	,
b2	Int64	,
b3	Int64	,
b4	Int64	,
b5	Int64	,
b6	Int64	,
b7	Int64	,
b8	Int64	,
b9	Int64	,
b10	Int64	,
b11	Int64	,
b12	Int64	,
b13	Int64	,
b14	Int64	,
b15	Int64	,
b16	Int64	,
b17	Int64	,
b18	Int64	,
b19	Int64	,
b20	Int64	,
b21	Int64	,
b22	Int64	,
b23	Int64	,
b24	Int64	,
b25	Int64	,
b26	Int64	,
b27	Int64	,
b28	Int64	,
b29	Int64	,
b30	Int64	,
b31	Int64	,
b32	Int64	,
b33	Int64	,
b34	Int64	,
b35	Int64	,
b36	Int64	,
b37	Int64	,
b38	Int64	,
b39	Int64	,
b40	Int64	,
b41	Int64	,
b42	Int64	,
b43	Int64	,
b44	Int64	,
b45	Int64	,
b46	Int64	,
b47	Int64	,
b48	Int64	,
b49	Int64	,
b50	Int64	,
b51	Int64	,
b52	Int64	,
b53	Int64	,
b54	Int64	,
b55	Int64	,
b56	Int64	,
b57	Int64	,
b58	Int64	,
b59	Int64	,
b60	Int64	,
b61	Int64	,
b62	Int64	,
b63	Int64	,
b64	Int64	,
b65	Int64	,
b66	Int64	,
b67	Int64	,
b68	Int64	,
b69	Int64	,
b70	Int64	,
b71	Int64	,
b72	Int64	,
b73	Int64	,
b74	Int64	,
b75	Int64	,
b76	Int64	,
b77	Int64	,
b78	Int64	,
b79	Int64	,
b80	Int64	,
b81	Int64	,
b82	Int64	,
b83	Int64	,
b84	Int64	,
b85	Int64	,
b86	Int64	,
b87	Int64	,
b88	Int64	,
b89	Int64	,
b90	Int64	,
b91	Int64	,
b92	Int64	,
b93	Int64	,
b94	Int64	,
b95	Int64	,
b96	Int64	,
b97	Int64	,
b98	Int64	,
b99	Int64	,
b100	Int64	,
b101	Int64	,
b102	Int64	,
b103	Int64	,
b104	Int64	,
b105	Int64	,
b106	Int64	,
b107	Int64	,
b108	Int64	,
b109	Int64	,
b110	Int64	,
b111	Int64	,
b112	Int64	,
b113	Int64	,
b114	Int64	,
b115	Int64	,
b116	Int64	,
b117	Int64	,
b118	Int64	,
b119	Int64	,
b120	Int64	,
b121	Int64	,
b122	Int64	,
b123	Int64	,
b124	Int64	,
b125	Int64	,
b126	Int64	,
b127	Int64	,
b128	Int64	,
b129	Int64	,
b130	Int64	,
b131	Int64	,
b132	Int64	,
b133	Int64	,
b134	Int64	,
b135	Int64	,
b136	Int64	,
b137	Int64	,
b138	Int64	,
b139	Int64	,
b140	Int64	,
b141	Int64	,
b142	Int64	,
b143	Int64	,
b144	Int64	,
b145	Int64	,
b146	Int64	,
b147	Int64	,
b148	Int64	,
b149	Int64	,
b150	Int64	,
b151	Int64	,
b152	Int64	,
b153	Int64	,
b154	Int64	,
b155	Int64	,
b156	Int64	,
b157	Int64	,
b158	Int64	,
b159	Int64	,
b160	Int64	,
b161	Int64	,
b162	Int64	,
b163	Int64	,
b164	Int64	,
b165	Int64	,
b166	Int64	,
b167	Int64	,
b168	Int64	,
b169	Int64	,
b170	Int64	,
b171	Int64	,
b172	Int64	,
b173	Int64	,
b174	Int64	,
b175	Int64	,
b176	Int64	,
b177	Int64	,
b178	Int64	,
b179	Int64	,
b180	Int64	,
b181	Int64	,
b182	Int64	,
b183	Int64	,
b184	Int64	,
b185	Int64	,
b186	Int64	,
b187	Int64	,
b188	Int64	,
b189	Int64	,
b190	Int64	,
b191	Int64	,
b192	Int64	,
b193	Int64	,
b194	Int64	,
b195	Int64	,
b196	Int64	,
b197	Int64	,
b198	Int64	,
b199	Int64	,
b200	Int64	,
b201	Int64	,
b202	Int64	,
b203	Int64	,
b204	Int64	,
b205	Int64	,
b206	Int64	,
b207	Int64	,
b208	Int64	,
b209	Int64	,
b210	Int64	,
b211	Int64	,
b212	Int64	,
b213	Int64	,
b214	Int64	,
b215	Int64	,
b216	Int64	,
b217	Int64	,
b218	Int64	,
b219	Int64	,
b220	Int64	,
b221	Int64	,
b222	Int64	,
b223	Int64	,
b224	Int64	,
b225	Int64	,
b226	Int64	,
b227	Int64	,
b228	Int64	,
b229	Int64	,
b230	Int64	,
b231	Int64	,
b232	Int64	,
b233	Int64	,
b234	Int64	,
b235	Int64	,
b236	Int64	,
b237	Int64	,
b238	Int64	,
b239	Int64	,
b240	Int64	,
b241	Int64	,
b242	Int64	,
b243	Int64	,
b244	Int64	,
b245	Int64	,
b246	Int64	,
b247	Int64	,
b248	Int64	,
b249	Int64	,
b250	Int64	,
b251	Int64	,
b252	Int64	,
b253	Int64	,
b254	Int64	,
b255	Int64	,
b256	Int64	,
b257	Int64	,
b258	Int64	,
b259	Int64	,
b260	Int64	,
b261	Int64	,
b262	Int64	,
b263	Int64	,
b264	Int64	,
b265	Int64	,
b266	Int64	,
b267	Int64	,
b268	Int64	,
b269	Int64	,
b270	Int64	,
b271	Int64	,
b272	Int64	,
b273	Int64	,
b274	Int64	,
b275	Int64	,
b276	Int64	,
b277	Int64	,
b278	Int64	,
b279	Int64	,
b280	Int64	,
b281	Int64	,
b282	Int64	,
b283	Int64	,
b284	Int64	,
b285	Int64	,
b286	Int64	,
b287	Int64	,
b288	Int64	,
b289	Int64	,
b290	Int64	,
b291	Int64	,
b292	Int64	,
b293	Int64	,
b294	Int64	,
b295	Int64	,
b296	Int64	,
b297	Int64	,
b298	Int64	,
b299	Int64	,
b300	Int64	,
b301	Int64	,
b302	Int64	,
b303	Int64	,
b304	Int64	,
b305	Int64	,
b306	Int64	,
b307	Int64	,
b308	Int64	,
b309	Int64	,
b310	Int64	,
b311	Int64	,
b312	Int64	,
b313	Int64	,
b314	Int64	,
b315	Int64	,
b316	Int64	,
b317	Int64	,
b318	Int64	,
b319	Int64	,
b320	Int64	,
b321	Int64	,
b322	Int64	,
b323	Int64	,
b324	Int64	,
b325	Int64	,
b326	Int64	,
b327	Int64	,
b328	Int64	,
b329	Int64	,
b330	Int64	,
b331	Int64	,
b332	Int64	,
b333	Int64	,
b334	Int64	,
b335	Int64	,
b336	Int64	,
b337	Int64	,
b338	Int64	,
b339	Int64	,
b340	Int64	,
b341	Int64	,
b342	Int64	,
b343	Int64	,
b344	Int64	,
b345	Int64	,
b346	Int64	,
b347	Int64	,
b348	Int64	,
b349	Int64	,
b350	Int64	,
b351	Int64	,
b352	Int64	,
b353	Int64	,
b354	Int64	,
b355	Int64	,
b356	Int64	,
b357	Int64	,
b358	Int64	,
b359	Int64	,
b360	Int64	,
b361	Int64	,
b362	Int64	,
b363	Int64	,
b364	Int64	,
b365	Int64	,
b366	Int64	,
b367	Int64	,
b368	Int64	,
b369	Int64	,
b370	Int64	,
b371	Int64	,
b372	Int64	,
b373	Int64	,
b374	Int64	,
b375	Int64	,
b376	Int64	,
b377	Int64	,
b378	Int64	,
b379	Int64	,
b380	Int64	,
b381	Int64	,
b382	Int64	,
b383	Int64	,
b384	Int64	,
b385	Int64	,
b386	Int64	,
b387	Int64	,
b388	Int64	,
b389	Int64	,
b390	Int64	,
b391	Int64	,
b392	Int64	,
b393	Int64	,
b394	Int64	,
b395	Int64	,
b396	Int64	,
b397	Int64	,
b398	Int64	,
b399	Int64	,
b400	Int64	,
b401	Int64	,
b402	Int64	,
b403	Int64	,
b404	Int64	,
b405	Int64	,
b406	Int64	,
b407	Int64	,
b408	Int64	,
b409	Int64	,
b410	Int64	,
b411	Int64	,
b412	Int64	,
b413	Int64	,
b414	Int64	,
b415	Int64	,
b416	Int64	,
b417	Int64	,
b418	Int64	,
b419	Int64	,
b420	Int64	,
b421	Int64	,
b422	Int64	,
b423	Int64	,
b424	Int64	,
b425	Int64	,
b426	Int64	,
b427	Int64	,
b428	Int64	,
b429	Int64	,
b430	Int64	,
b431	Int64	,
b432	Int64	,
b433	Int64	,
b434	Int64	,
b435	Int64	,
b436	Int64	,
b437	Int64	,
b438	Int64	,
b439	Int64	,
b440	Int64	,
b441	Int64	,
b442	Int64	,
b443	Int64	,
b444	Int64	,
b445	Int64	,
b446	Int64	,
b447	Int64	,
b448	Int64	,
b449	Int64	,
b450	Int64	,
b451	Int64	,
b452	Int64	,
b453	Int64	,
b454	Int64	,
b455	Int64	,
b456	Int64	,
b457	Int64	,
b458	Int64	,
b459	Int64	,
b460	Int64	,
b461	Int64	,
b462	Int64	,
b463	Int64	,
b464	Int64	,
b465	Int64	,
b466	Int64	,
b467	Int64	,
b468	Int64	,
b469	Int64	,
b470	Int64	,
b471	Int64	,
b472	Int64	,
b473	Int64	,
b474	Int64	,
b475	Int64	,
b476	Int64	,
b477	Int64	,
b478	Int64	,
b479	Int64	,
b480	Int64	,
b481	Int64	,
b482	Int64	,
b483	Int64	,
b484	Int64	,
b485	Int64	,
b486	Int64	,
b487	Int64	,
b488	Int64	,
b489	Int64	,
b490	Int64	,
b491	Int64	,
b492	Int64	,
b493	Int64	,
b494	Int64	,
b495	Int64	,
b496	Int64	,
b497	Int64	,
b498	Int64	,
b499	Int64	,
b500	Int64	  
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 282', () => {
    const query = `CREATE TABLE test_parquet (col1 String, col2 String, col3 String, col4 String, col5 String, col6 String, col7 String) ENGINE=File(Parquet);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 283', () => {
    const query = `CREATE TABLE test_parquet (col1 String, col2 String, col3 String, col4 String, col5 String, col6 String, col7 String) ENGINE=File(Parquet) settings input_format_parquet_max_block_size=16;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 284', () => {
    const query = `CREATE TABLE test_parquet (col1 String, col2 String, col3 String, col4 String, col5 String, col6 String, col7 String) ENGINE=File(Parquet) settings input_format_parquet_prefer_block_bytes=30;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 285', () => {
    const query = `CREATE TABLE test_parquet (col1 String, col2 String, col3 String, col4 String, col5 String, col6 String, col7 String) ENGINE=File(Parquet) settings input_format_parquet_prefer_block_bytes=30720;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 286', () => {
    const query = `CREATE TABLE dynamic_test_1 (d Dynamic(max_types=3)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 287', () => {
    const query = `CREATE TABLE dynamic_test_2 (d Dynamic(max_types=5)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 288', () => {
    const query = `CREATE TABLE t (d Dynamic) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 289', () => {
    const query = `CREATE TABLE users_compact ( uid Int16,
name String,
age Int16,
projection p1 (select count(), age group by age),
projection p2 (select age, name group by age, name)
) ENGINE = MergeTree order by uid
SETTINGS min_bytes_for_wide_part = 10485760;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 290', () => {
    const query = `CREATE TABLE users_wide ( uid Int16,
name String,
age Int16,
projection p1 (select count(), age group by age),
projection p2 (select age, name group by age, name)
) ENGINE = MergeTree order by uid
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 291', () => {
    const query = `CREATE TABLE base_table (date DateTime, id String, cost Float64) ENGINE = MergeTree() ORDER BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 292', () => {
    const query = `CREATE TABLE target_table (id String, total AggregateFunction(sum, Float64)) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 293', () => {
    const query = `CREATE MATERIALIZED VIEW mv_from_base_to_target TO target_table AS Select id, sumState(cost) FROM base_table GROUP BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 294', () => {
    const query = `CREATE MATERIALIZED VIEW mv_with_storage ENGINE=MergeTree() ORDER BY id AS Select id, sumState(cost) FROM base_table GROUP BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 295', () => {
    const query = `CREATE TABLE other_table_1 AS mv_with_storage;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 296', () => {
    const query = `CREATE TABLE 03161_table (id UInt32, f UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 297', () => {
    const query = `CREATE TABLE 03161_reproducer (c0 UInt8, c1 UInt8, c2 UInt8, c3 UInt8, c4 UInt8, c5 UInt8, c6 UInt8, c7 UInt8, c8 UInt8, c9 UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 298', () => {
    const query = `CREATE TABLE t (d Dynamic(max_types=254)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 299', () => {
    const query = `CREATE TABLE t2 (d Dynamic(max_types=254)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 300', () => {
    const query = `CREATE TABLE test_variable (v Variant(String, UInt32, IPv6, Bool, DateTime64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 301', () => {
    const query = `CREATE TABLE test_dynamic (d Dynamic) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 302', () => {
    const query = `CREATE TABLE test_deep_nested_json (i UInt16, d JSON) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 303', () => {
    const query = `CREATE TABLE t_map_lc (
id UInt64,
t Tuple(m Map(LowCardinality(String), LowCardinality(String)))
)
ENGINE = MergeTree ORDER BY id SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 304', () => {
    const query = `CREATE TABLE t_map_lc (
id UInt64,
t Tuple(m Map(LowCardinality(String), LowCardinality(String)))
)
ENGINE = MergeTree ORDER BY id SETTINGS min_bytes_for_wide_part = '10G';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 305', () => {
    const query = `CREATE TEMPORARY TABLE test (x Nullable(UInt64), PRIMARY KEY ()) ENGINE = MergeTree SETTINGS ratio_of_defaults_for_sparse_serialization = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 306', () => {
    const query = `CREATE TEMPORARY TABLE test (x UInt64, PRIMARY KEY ()) ENGINE = MergeTree SETTINGS ratio_of_defaults_for_sparse_serialization = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 307', () => {
    const query = `CREATE TABLE test_groupConcat (
id UInt64,
p_int Int32 NULL,
p_string String,
p_array Array(Int32)
) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 308', () => {
    const query = `CREATE TABLE test_groupConcat (
id UInt64,
p_int Int32,
) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 309', () => {
    const query = `CREATE TABLE arrays_test (s String, arr Array(UInt8)) ENGINE = MergeTree() ORDER BY (s);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 310', () => {
    const query = `create table hourly( hour datetime,
\`metric.names\` Array(String),
\`metric.values\` Array(Int64)
) Engine=Memory
as select '2020-01-01', ['a', 'b'], [1,2];`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 311', () => {
    const query = `create table Example (id Int32) engine = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 312', () => {
    const query = `create table Null engine=Null as Example ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 313', () => {
    const query = `create materialized view Transform to Example as select * from Null
join ( select * FROM Example
WHERE id IN (SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM (SELECT * FROM Null)))))
) as old
using id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 314', () => {
    const query = `CREATE TABLE test_table (
id String,
parent_id String
)
ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 315', () => {
    const query = `CREATE TEMPORARY TABLE test (a UInt8, b UInt8, c UInt8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 316', () => {
    const query = `CREATE TABLE test_null_empty (d Dynamic) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 317', () => {
    const query = `CREATE TABLE users (uid Int16, name String, age Int16) ENGINE=MergeTree order by (uid, name);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 318', () => {
    const query = `CREATE TABLE users2 (uid Int16, name String, age2 Int16) ENGINE=MergeTree order by (uid, name);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 319', () => {
    const query = `CREATE TABLE test_max_types (d Dynamic(max_types=5)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 320', () => {
    const query = `CREATE TABLE test_nested_dynamic (d1 Dynamic, d2 Dynamic(max_types=2)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 321', () => {
    const query = `CREATE TABLE test_rapid_schema (d Dynamic) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 322', () => {
    const query = `CREATE TABLE test (
foo String,
bar String,
)
ENGINE = MergeTree()
ORDER BY (foo, bar);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 323', () => {
    const query = `CREATE TABLE tab (id Int32, val Nullable(Float64), dt Nullable(DateTime64(6)), type Nullable(Int32)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 324', () => {
    const query = `CREATE VIEW tab_v AS SELECT t1.type AS type,
sum(t1.val) AS sval,
toStartOfDay(t1.dt) AS sday,
anyLast(sval) OVER w AS lval
FROM tab AS t1
GROUP BY
type,
sday
WINDOW w AS (PARTITION BY type);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 325', () => {
    const query = `CREATE TABLE t1 (x Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 326', () => {
    const query = `CREATE TABLE to_table (
n1 UInt8,
n2 Dynamic(max_types=2)
)
ENGINE = MergeTree ORDER BY n1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 327', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 328', () => {
    const query = `CREATE VIEW test_view AS SELECT id, value FROM test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 329', () => {
    const query = `CREATE TABLE test_grouping_sets_predicate ( day_ Date, type_1 String ) ENGINE=MergeTree ORDER BY day_;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 330', () => {
    const query = `CREATE TABLE null_table (
n1 UInt8,
n2 Dynamic(max_types=3)
)
ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 331', () => {
    const query = `CREATE MATERIALIZED VIEW dummy_rmv TO to_table AS SELECT * FROM null_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 332', () => {
    const query = `CREATE TABLE to_table (
n1 UInt8,
n2 Dynamic(max_types=4)
)
ENGINE = MergeTree ORDER BY n1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 333', () => {
    const query = `CREATE TABLE events0 ENGINE = MergeTree()
ORDER BY COALESCE(begin, toDateTime('9999-12-31 23:59:59'))
AS
SELECT
toNullable(toDateTime('2023-03-21 13:00:00') + INTERVAL number HOUR) AS begin,
number AS value
FROM numbers(4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 334', () => {
    const query = `CREATE TABLE probe0 ENGINE = MergeTree()
ORDER BY COALESCE(begin, toDateTime('9999-12-31 23:59:59'))
AS
SELECT
toNullable(toDateTime('2023-03-21 12:00:00') + INTERVAL number HOUR) AS begin
FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 335', () => {
    const query = `CREATE TABLE users (uid Int16, name String, age Int16) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 336', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String
) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 337', () => {
    const query = `CREATE DICTIONARY 03148_dictionary ( id UInt64,
name String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(
QUERY 'select 0 as id, ''name0'' as name'
))
LIFETIME(MIN 1 MAX 10)
LAYOUT(HASHED);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 338', () => {
    const query = `CREATE TABLE t_mut_virtuals (id UInt64, s String) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 339', () => {
    const query = `CREATE TABLE events (begin Float64, value Int32) ENGINE = MergeTree() ORDER BY begin;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 340', () => {
    const query = `CREATE TABLE t (n Int8) ENGINE=MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 341', () => {
    const query = `CREATE TABLE test (d DateTime, PRIMARY KEY (d));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 342', () => {
    const query = `create table table_pv (id Int32, timestamp_field DateTime) engine = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 343', () => {
    const query = `create view pv as select * from table_pv where timestamp_field > {timestamp_param:DateTime};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 344', () => {
    const query = `CREATE TABLE t_index_3146 (a UInt64, b UInt64) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 345', () => {
    const query = `CREATE INDEX i1 ON t_index_3146 (a) TYPE minmax;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 346', () => {
    const query = `CREATE INDEX i2 ON t_index_3146 (a, b) TYPE minmax;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 347', () => {
    const query = `CREATE INDEX i3 ON t_index_3146 (a DESC, b ASC) TYPE minmax;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 348', () => {
    const query = `CREATE INDEX i4 ON t_index_3146 a TYPE minmax;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 349', () => {
    const query = `CREATE INDEX i5 ON t_index_3146 (a); -- ignored CREATE INDEX i6 ON t_index_3146 (a DESC, b ASC); -- ignored
CREATE INDEX i7 ON t_index_3146; -- { clientError SYNTAX_ERROR }
CREATE INDEX i8 ON t_index_3146 a, b TYPE minmax; -- { clientError SYNTAX_ERROR }
SHOW CREATE TABLE t_index_3146;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 350', () => {
    const query = `CREATE TABLE events0 ( begin Nullable(DateTime('UTC')),
value Int32
) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 351', () => {
    const query = `CREATE TABLE probe0 ( begin Nullable(DateTime('UTC'))
) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 352', () => {
    const query = `CREATE TABLE test_table (\`id\` UInt64, \`value\` String) ENGINE = TinyLog() AS Select number, number::String from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 353', () => {
    const query = `create table t (x 123) engine Memory; -- { clientError SYNTAX_ERROR } create table t (x \`a.b\`) engine Memory; -- { clientError SYNTAX_ERROR }
create table t (x Array(\`a.b\`)) engine Memory; -- { clientError SYNTAX_ERROR }
create table t (x Array(\`ab\`)) engine Memory; -- { serverError UNKNOWN_TYPE }
create table t (x \`ab\`) engine Memory; -- { serverError UNKNOWN_TYPE }
create table t (x \`Int64\`) engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 354', () => {
    const query = `CREATE TABLE events0 ( begin Float64,
value Int32
) ENGINE = MergeTree ORDER BY begin;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 355', () => {
    const query = `CREATE TABLE events ( key Int32,
begin Float64,
value Int32
) ENGINE = MergeTree ORDER BY (key, begin);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 356', () => {
    const query = `CREATE TABLE probes ( key Int32,
ts Float64
) ENGINE = MergeTree ORDER BY (key, ts) AS
SELECT
key.number,
ts.number
FROM
numbers(1, 2) as key,
numbers(10) as ts
SETTINGS join_algorithm = 'hash';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 357', () => {
    const query = `create table tab (x UInt32) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 358', () => {
    const query = `CREATE TABLE uk_price_paid (
\`price\` UInt32,
\`date\` Date,
\`postcode1\` LowCardinality(String),
\`postcode2\` LowCardinality(String),
\`type\` Enum8('terraced' = 1, 'semi-detached' = 2, 'detached' = 3, 'flat' = 4, 'other' = 0),
\`is_new\` UInt8,
\`duration\` Enum8('freehold' = 1, 'leasehold' = 2, 'unknown' = 0),
\`addr1\` String,
\`addr2\` String,
\`street\` LowCardinality(String),
\`locality\` LowCardinality(String),
\`town\` LowCardinality(String),
\`district\` LowCardinality(String),
\`county\` LowCardinality(String)
)
ENGINE = MergeTree
ORDER BY (postcode1, postcode2, addr1, addr2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 359', () => {
    const query = `CREATE TABLE test_03143 ( timestamp DateTime,
x UInt32 TTL timestamp + INTERVAL 1 MONTH,
y String TTL timestamp + INTERVAL 1 DAY,
z String
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 360', () => {
    const query = `CREATE MATERIALIZED VIEW mv_table (str String) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/03143_parallel_replicas_mat_view_bug', '{replica}') ORDER BY str AS SELECT str AS str FROM null_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 361', () => {
    const query = `CREATE TABLE t1 (
id UInt64,
external_id UInt64
)
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 362', () => {
    const query = `CREATE TABLE t2 (
id UInt64,
name String
)
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 363', () => {
    const query = `CREATE DICTIONARY d2 (
id UInt64,
name String,
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(
table t2))
LIFETIME(MIN 600 MAX 900)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 364', () => {
    const query = `CREATE TEMPORARY TABLE IF NOT EXISTS tmp_a (
k1 Int32,
k2 Int32,
d1 Int32,
d2 Int32
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 365', () => {
    const query = `CREATE TEMPORARY TABLE IF NOT EXISTS tmp_b ( k1 Int32,
k2 Int32,
d0 Float64
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 366', () => {
    const query = `CREATE TABLE build ENGINE = MergeTree ORDER BY (key, begin) AS
SELECT
toDateTime('1990-03-21 13:00:00') + INTERVAL number MINUTE AS begin,
number % 4 AS key,
number AS value
FROM numbers(0, 4000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 367', () => {
    const query = `CREATE TABLE skewed_probe ENGINE = MergeTree ORDER BY (key, begin) AS
SELECT
toDateTime('1990-04-21 13:00:01') + INTERVAL number MINUTE AS begin,
0 AS key
FROM numbers(0, 5)
UNION ALL
SELECT
toDateTime('1990-05-21 13:00:01') + INTERVAL number MINUTE AS begin,
1 AS key
FROM numbers(0, 10)
UNION ALL
SELECT
toDateTime('1990-06-21 13:00:01') + INTERVAL number MINUTE AS begin,
2 AS key
FROM numbers(0, 20)
UNION ALL
SELECT
toDateTime('1990-03-21 13:00:01') + INTERVAL number MINUTE AS begin,
3 AS key
FROM numbers(0, 4000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 368', () => {
    const query = `CREATE TABLE error_win_func (
\`k\` String,
\`in\` UInt64,
\`out\` UInt64
)
ENGINE = MergeTree
ORDER BY k AS
SELECT * from VALUES (('a', 2, 4), ('a', 4, 2), ('a', 6, 3), ('a', 8, 4));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 369', () => {
    const query = `CREATE TABLE t(n String, st String) ENGINE = Memory as select * from values(('a', 'x'), ('b', 'y'), ('c', 'z'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 370', () => {
    const query = `CREATE VIEW test_table_comment AS SELECT toString({date_from:String});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 371', () => {
    const query = `create table data_r1 (key Int, value String) engine=ReplicatedMergeTree('/tables/{database}/data', '{table}') order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 372', () => {
    const query = `create table data_r2 (key Int, value String) engine=ReplicatedMergeTree('/tables/{database}/data', '{table}') order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 373', () => {
    const query = `CREATE TABLE t0 (c0 String) ENGINE = Memory() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 374', () => {
    const query = `CREATE TABLE IF NOT EXISTS t1 (c0 Int32, c1 Int32, c2  ALIAS c1) ENGINE = Log() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 375', () => {
    const query = `CREATE TABLE t2 (c0 Int32) ENGINE = MergeTree()  ORDER BY tuple() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 376', () => {
    const query = `CREATE TABLE t3 (c0 String) ENGINE = Memory() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 377', () => {
    const query = `CREATE TABLE t4 (c0 Int32) ENGINE = Memory() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 378', () => {
    const query = `CREATE TABLE test1_00395 (
col1 UInt64,
col2 Nullable(UInt64),
col3 String,
col4 Nullable(String),
col5 Array(UInt64),
col6 Array(Nullable(UInt64)),
col7 Array(String),
col8 Array(Nullable(String)),
d Date
) Engine = MergeTree(d, (col1, d), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 379', () => {
    const query = `create table hilbert_numbers_03131( n1 UInt32,
n2 UInt32
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 380', () => {
    const query = `create table hilbert_numbers_1_03131( n1 UInt64,
n2 UInt64
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 381', () => {
    const query = `CREATE TABLE test_table_1 (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id
SETTINGS index_granularity = 16 # We have number of granules in the \`EXPLAIN\` output in reference file
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 382', () => {
    const query = `CREATE TABLE test_table_2 (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id
SETTINGS index_granularity = 16
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 383', () => {
    const query = `CREATE TABLE t1 (x Int32) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 384', () => {
    const query = `CREATE TABLE test_table (\`id\` UInt64, \`value\` String, \`value_array\` Array(UInt64)) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 385', () => {
    const query = `CREATE TABLE t (id UInt64, ts DateTime) ENGINE = MergeTree() ORDER BY (id, ts) SETTINGS index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 386', () => {
    const query = `CREATE TABLE elements (
\`id\` UInt32,
\`nested.key\` Array(String),
\`nested.value\` Array(String),
\`nested.key_hashed\` Array(UInt64) MATERIALIZED arrayMap(x -> sipHash64(x), nested.key),
\`nested.val_hashed\` Array(UInt64) MATERIALIZED arrayMap(x -> sipHash64(x), nested.value),
)
ENGINE = Memory ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 387', () => {
    const query = `CREATE TABLE small (\`dt\` DateTime, \`user_email\` LowCardinality(Nullable(String))) ENGINE = MergeTree order by (dt, user_email) settings allow_nullable_key = 1, min_bytes_for_wide_part=0, min_rows_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 388', () => {
    const query = `CREATE TABLE t (
\`key\` Int64,
\`someCol\` String,
\`eventTime\` DateTime
)
ENGINE = ReplacingMergeTree(eventTime)
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 389', () => {
    const query = `CREATE TABLE test (s String) ENGINE = MergeTree ORDER BY s SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 390', () => {
    const query = `CREATE TABLE test2 (s String) ENGINE = MergeTree ORDER BY s SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 391', () => {
    const query = `CREATE TABLE t_index_lazy_load (a UInt64, b UInt64) ENGINE = MergeTree ORDER BY (a, b)
SETTINGS index_granularity = 4, primary_key_ratio_of_unique_prefix_values_to_skip_suffix_columns = 0.5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 392', () => {
    const query = `CREATE TABLE combinator_argMin_table_r1 (
\`id\` Int32,
\`value\` Int32,
\`agg_time\` DateTime,
PROJECTION first_items
(
SELECT
id,
minArgMin(agg_time, value),
maxArgMax(agg_time, value)
GROUP BY id
)
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_03128/combinator_argMin_table', 'r1')
ORDER BY (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 393', () => {
    const query = `CREATE TABLE combinator_argMin_table_r2 (
\`id\` Int32,
\`value\` Int32,
\`agg_time\` DateTime,
PROJECTION first_items
(
SELECT
id,
minArgMin(agg_time, value),
maxArgMax(agg_time, value)
GROUP BY id
)
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_03128/combinator_argMin_table', 'r2')
ORDER BY (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 394', () => {
    const query = `CREATE TABLE argmax_comb( id UInt64,
state AggregateFunction(avgArgMax, Float64, UInt64)
)
ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 395', () => {
    const query = `create table events ( distinct_id String ) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 396', () => {
    const query = `create table table_local engine = Memory AS select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 397', () => {
    const query = `create table table_dist engine = Distributed('test_cluster_two_shards', currentDatabase(),table_local) AS table_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 398', () => {
    const query = `create table "t0" (a Int64, b Int64) engine = MergeTree() partition by a order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 399', () => {
    const query = `create table "dist_t0" (a Int64, b Int64) engine = Distributed(test_shard_localhost, currentDatabase(), t0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 400', () => {
    const query = `create table test_window_collate(c1 String, c2 String) engine=MergeTree order by c1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 401', () => {
    const query = `CREATE TABLE test_subquery ENGINE = Memory AS
SELECT 'base' AS my_field;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 402', () => {
    const query = `CREATE TABLE a1_replicated ON CLUSTER test_shard_localhost ( day Date,
id UInt32
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/a1_replicated', '1_replica')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 403', () => {
    const query = `CREATE TABLE a1 ( day Date,
id UInt32
)
ENGINE = Distributed('test_shard_localhost', currentDatabase(), a1_replicated, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 404', () => {
    const query = `CREATE TABLE b1_replicated ON CLUSTER test_shard_localhost ( day Date,
id UInt32
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/b1_replicated', '1_replica')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 405', () => {
    const query = `CREATE TABLE b1 ( day Date,
id UInt32
)
ENGINE = Distributed('test_shard_localhost', currentDatabase(), b1_replicated, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 406', () => {
    const query = `CREATE TEMPORARY TABLE test (a Float32, id UInt64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 407', () => {
    const query = `CREATE TABLE a1 ( ANIMAL Nullable(String) ) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 408', () => {
    const query = `create table x( a UInt64,
\`sipHash64(a)\` UInt64
) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 409', () => {
    const query = `create table t  (ID UInt8) Engine= Memory() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 410', () => {
    const query = `create table t  (ID String) Engine= Memory() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 411', () => {
    const query = `CREATE TABLE my_first_table (
user_id UInt32,
message String,
timestamp DateTime,
metric Float32
)
ENGINE = MergeTree
PRIMARY KEY (user_id, timestamp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 412', () => {
    const query = `CREATE TABLE a ( a UInt64, b UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 413', () => {
    const query = `CREATE TABLE b ( b UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 414', () => {
    const query = `CREATE MATERIALIZED VIEW view_4 ( bb UInt64, cnt UInt64) Engine=MergeTree ORDER BY bb POPULATE AS SELECT bb, count() AS cnt FROM (SELECT a, b AS j, b AS bb FROM a INNER JOIN (SELECT b AS j, b AS bb FROM b ) USING (j)) GROUP BY bb; -- { serverError UNKNOWN_IDENTIFIER } DROP TABLE IF EXISTS a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 415', () => {
    const query = `CREATE TABLE event ( \`event_time\` DateTime,
\`event_name\` String,
\`user_id\` String
)
ENGINE = MergeTree()
ORDER BY (event_time, event_name);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 416', () => {
    const query = `CREATE TABLE user ( \`user_id\` String,
\`user_type\` String
)
ENGINE = MergeTree()
ORDER BY (user_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 417', () => {
    const query = `CREATE MATERIALIZED VIEW mv (
\`event_time\` DateTime,
\`event_name\` String,
\`user_id\` String,
\`user_type\` String
)
ENGINE = MergeTree()
ORDER BY (event_time, event_name) POPULATE AS
SELECT
e.event_time,
e.event_name,
e.user_id,
u.user_type
FROM event e
INNER JOIN user u ON u.user_id = e.user_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 418', () => {
    const query = `CREATE TABLE test_table_01 ( column Int32
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 419', () => {
    const query = `CREATE TABLE test_table_02 ( column Int32
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 420', () => {
    const query = `CREATE VIEW test_view_01 AS SELECT
t1.column,
t2.column
FROM test_table_01 AS t1
INNER JOIN test_table_02 AS t2 ON t1.column = t2.column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 421', () => {
    const query = `CREATE TABLE users (uid Int16, name String, age Int16) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 422', () => {
    const query = `CREATE TABLE loans (loan_number int, security_id text) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 423', () => {
    const query = `create table t1 (c3 String, primary key(c3)) engine = MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 424', () => {
    const query = `create table t2 (c11 String, primary key(c11)) engine = MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 425', () => {
    const query = `CREATE DATABASE {CLICKHOUSE_DATABASE:Identifier};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 426', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.t (
col String,
hello String,
world String
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 427', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.u (
cc String
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 428', () => {
    const query = `CREATE TEMPORARY TABLE aliased (
x UInt8 DEFAULT 0,
y ALIAS x + 1
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 429', () => {
    const query = `CREATE TEMPORARY TABLE aliased2 (
x UInt8,
y ALIAS ((x + 1) AS z) + 1
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 430', () => {
    const query = `CREATE TEMPORARY TABLE aliased3 (
x UInt8,
y ALIAS z + 1,
z ALIAS x + 1
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 431', () => {
    const query = `CREATE DATABASE db1_03101;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 432', () => {
    const query = `CREATE DATABASE db2_03101;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 433', () => {
    const query = `CREATE TABLE db1_03101.tbl (
col String,
db1_03101 Nested
(
tbl Nested
(
col String
)
)
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 434', () => {
    const query = `CREATE TABLE t (
x String,
nest Nested
(
a String,
b String
)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 435', () => {
    const query = `CREATE TEMPORARY TABLE test1 (a String, nest Nested(x String, y String));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 436', () => {
    const query = `CREATE TEMPORARY TABLE test2 (a String, nest Array(Tuple(x String, y String)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 437', () => {
    const query = `CREATE TABLE table ( column UInt64,
nest Nested
(
key Nested (
subkey UInt16
)
)
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 438', () => {
    const query = `CREATE TABLE users (name String, age Int16) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 439', () => {
    const query = `CREATE TABLE clickhouse_alias_issue_1 ( id bigint,
column_1 Nullable(Float32)
) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 440', () => {
    const query = `CREATE TABLE clickhouse_alias_issue_2 ( id bigint,
column_2 Nullable(Float32)
) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 441', () => {
    const query = `create table test (id UInt64, v Variant(UInt64, String)) engine=MergeTree order by (id, v);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 442', () => {
    const query = `CREATE TABLE test_03096 (
\`a\` UInt32,
\`b\` UInt32,
\`c\` UInt32,
\`d\` UInt32 MATERIALIZED 0,
\`sum\` UInt32 MATERIALIZED (a + b) + c,
INDEX idx (c, d) TYPE minmax GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY a
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 443', () => {
    const query = `create table mt1 (f1 Int32, f2 Int32) engine = MergeTree() order by f1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 444', () => {
    const query = `create table mt2 as mt1 engine = MergeTree() order by f1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 445', () => {
    const query = `create table b as mt1 engine = Buffer(currentDatabase(), mt2, 16, 1, 1, 10000, 1000000, 10000000, 100000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 446', () => {
    const query = `create table m as mt1 engine = Merge(currentDatabase(), '^(mt1|b)\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 447', () => {
    const query = `CREATE TABLE t1__fuzz_0 (
\`x\` UInt8,
\`str\` String
)
ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 448', () => {
    const query = `CREATE TABLE left_join__fuzz_2 (
\`x\` UInt32,
\`s\` LowCardinality(String)
) ENGINE = Join(\`ALL\`, LEFT, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 449', () => {
    const query = `CREATE TABLE 03094_grouparrysorted_dest (
ServiceName LowCardinality(String) CODEC(ZSTD(1)),
SlowSpans AggregateFunction(groupArraySorted(100),
Tuple(NegativeDurationNs Int64, Timestamp DateTime64(9), TraceId String, SpanId String)
) CODEC(ZSTD(1))
)
ENGINE = AggregatingMergeTree()
ORDER BY (ServiceName);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 450', () => {
    const query = `CREATE TABLE 03094_grouparrysorted_src (
ServiceName String,
Duration Int64,
Timestamp DateTime64(9),
TraceId String,
SpanId String
)
ENGINE = MergeTree()
ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 451', () => {
    const query = `CREATE MATERIALIZED VIEW 03094_grouparrysorted_mv TO 03094_grouparrysorted_dest AS SELECT
ServiceName,
groupArraySortedState(100)(
CAST(
tuple(-Duration, Timestamp, TraceId, SpanId),
'Tuple(NegativeDurationNs Int64, Timestamp DateTime64(9), TraceId String, SpanId String)'
)) as SlowSpans
FROM 03094_grouparrysorted_src
GROUP BY
ServiceName;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 452', () => {
    const query = `CREATE TABLE users_03094 (name String, age Int16) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 453', () => {
    const query = `CREATE TABLE override_test__fuzz_45 (\`_part\` Float32) ENGINE = MergeTree ORDER BY tuple() AS SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 454', () => {
    const query = `CREATE TABLE replacing_wrong (key Int64, ver Int64, is_deleted UInt16) ENGINE = ReplacingMergeTree(ver, is_deleted) ORDER BY key; -- { serverError BAD_TYPE_OF_FIELD } CREATE TABLE replacing_wrong (key Int64, ver String, is_deleted UInt8) ENGINE = ReplacingMergeTree(ver, is_deleted) ORDER BY key; -- { serverError BAD_TYPE_OF_FIELD }
CREATE TABLE replacing_wrong (key Int64, ver Int64, is_deleted UInt8) ENGINE = ReplacingMergeTree(is_deleted, is_deleted) ORDER BY key; -- { serverError BAD_ARGUMENTS }
CREATE TABLE replacing (key Int64, ver Int64, is_deleted UInt8) ENGINE = ReplacingMergeTree(ver, is_deleted) ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 455', () => {
    const query = `create table t2(a Int16) engine=MergeTree order by tuple() partition by a % 8 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 456', () => {
    const query = `CREATE TABLE test_gcd(test_col UInt32 CODEC(GCD, LZ4)) ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192, index_granularity_bytes = 1024;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 457', () => {
    const query = `CREATE TABLE test_gcd2(test_col UInt32 CODEC(GCD, LZ4)) ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192, index_granularity_bytes = 1024, min_bytes_for_wide_part = 0, max_compress_block_size = 1024, min_compress_block_size = 1024;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 458', () => {
    const query = `CREATE TABLE test_03093 (app String, c UInt64, k Map(String, String)) ENGINE=MergeTree ORDER BY app;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 459', () => {
    const query = `CREATE DATABASE {CLICKHOUSE_DATABASE_1:Identifier};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 460', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.\`1-1\` (field Int8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 461', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE_1:Identifier}.\`2-1\` (field Int8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 462', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE_1:Identifier}.\`3-1\` (field Int8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 463', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE_1:Identifier}.\`1-1\` (field Int8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 464', () => {
    const query = `create table {CLICKHOUSE_DATABASE:Identifier}.a (i int) engine = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 465', () => {
    const query = `create table t1 engine = MergeTree()
order by tuple()
as
select 1 as user_id, 2 as level;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 466', () => {
    const query = `create table t2 engine = MergeTree()
order by tuple()
as
select 1 as user_id, 'website' as event_source, '2023-01-01 00:00:00'::DateTime as timestamp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 467', () => {
    const query = `CREATE TABLE test1 (
\`pk\` String,
\`x.y\` Decimal(18, 4)
)
ENGINE = MergeTree()
ORDER BY (pk);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 468', () => {
    const query = `CREATE TABLE test2 (
\`pk\` String,
\`x.y\` Decimal(18, 4)
)
ENGINE = MergeTree()
ORDER BY (pk);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 469', () => {
    const query = `CREATE TABLE test (
\`dt\` Date,
\`text\` String
)
ENGINE = MergeTree
ORDER BY dt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 470', () => {
    const query = `CREATE TABLE first_table_lr (
id String,
id2 String
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_03080/alter', 'r1')
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 471', () => {
    const query = `CREATE TABLE first_table (
id String,
id2 String
)
ENGINE = Distributed('test_shard_localhost', currentDatabase(), 'first_table_lr');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 472', () => {
    const query = `CREATE TABLE second_table_lr (
id String,
id2 String
) ENGINE = MergeTree()
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 473', () => {
    const query = `CREATE TABLE second_table (
id String,
id2 String
)
ENGINE = Distributed('test_shard_localhost', currentDatabase(), 'second_table_lr');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 474', () => {
    const query = `CREATE TABLE two_tables (
id String,
id2 String
)
ENGINE = Merge(currentDatabase(), '^(first_table)\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 475', () => {
    const query = `CREATE TABLE test ( id UInt64
)
ENGINE = MergeTree()
SAMPLE BY intHash32(id)
ORDER BY intHash32(id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 476', () => {
    const query = `CREATE TABLE testdata (\`1\` String) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 477', () => {
    const query = `CREATE TABLE t2 (first_column Int64, second_column Int64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 478', () => {
    const query = `CREATE TABLE t1 (i Int64, j Int64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 479', () => {
    const query = `create view alias (dummy int, n alias dummy) as select * from system.one;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 480', () => {
    const query = `CREATE TABLE test ( id String, create_time DateTime ) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 481', () => {
    const query = `CREATE FUNCTION IF NOT EXISTS unhexPrefixed AS value -> unhex(substring(value, 3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 482', () => {
    const query = `CREATE FUNCTION IF NOT EXISTS hex2bytes AS address -> CAST(unhexPrefixed(address), 'FixedString(20)');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 483', () => {
    const query = `CREATE FUNCTION IF NOT EXISTS bytes2hex AS address -> concat('0x', lower(hex(address)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 484', () => {
    const query = `CREATE TABLE test (
\`transfer_id\` String,
\`address\` FixedString(20),
\`value\` UInt256,
\`block_timestamp\` DateTime('UTC'),
\`token_address\` FixedString(20)
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(block_timestamp)
PRIMARY KEY (address, block_timestamp)
ORDER BY (address, block_timestamp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 485', () => {
    const query = `CREATE TABLE token_data (
token_address_hex String,
chain String,
is_blacklisted Bool
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 486', () => {
    const query = `CREATE DICTIONARY token_data_map (
token_address_hex String,
chain String,
is_blacklisted Bool
)
PRIMARY KEY token_address_hex, chain
SOURCE(Clickhouse(table token_data))
LIFETIME(MIN 200 MAX 300)
LAYOUT(COMPLEX_KEY_HASHED_ARRAY());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 487', () => {
    const query = `CREATE TABLE LINEITEM_shard ON CLUSTER test_shard_localhost (
L_ORDERKEY UInt64,
L_COMMITDATE UInt32,
L_RECEIPTDATE UInt32
)
ENGINE = MergeTree()
ORDER BY L_ORDERKEY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 488', () => {
    const query = `CREATE TABLE LINEITEM AS LINEITEM_shard ENGINE = Distributed('test_shard_localhost', currentDatabase(), LINEITEM_shard, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 489', () => {
    const query = `CREATE TABLE ORDERS_shard ON CLUSTER test_shard_localhost (
O_ORDERKEY UInt64,
O_ORDERPRIORITY UInt32
)
ENGINE = MergeTree()
ORDER BY O_ORDERKEY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 490', () => {
    const query = `CREATE TABLE ORDERS AS ORDERS_shard ENGINE = Distributed('test_shard_localhost', currentDatabase(), ORDERS_shard, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 491', () => {
    const query = `CREATE TABLE t1 ( k Int64, x Int64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 492', () => {
    const query = `CREATE TABLE t2( x Int64 ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 493', () => {
    const query = `create table s (k Int64, d DateTime)  Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 494', () => {
    const query = `create table test (TOPIC String, PARTITION UInt64, OFFSET UInt64, ID UInt64) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_03062', 'r2') ORDER BY (TOPIC, PARTITION, OFFSET);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 495', () => {
    const query = `create table test_join (TOPIC String, PARTITION UInt64, OFFSET UInt64)  ENGINE = Join(ANY, LEFT, \`TOPIC\`, \`PARTITION\`) SETTINGS join_any_take_last_row = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 496', () => {
    const query = `CREATE TABLE xxxx_yyy (key UInt32, key_b ALIAS key) ENGINE=MergeTree() ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 497', () => {
    const query = `create table vt(datetime_value DateTime, value Float64) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 498', () => {
    const query = `create view computed_datum_hours as SELECT
toStartOfHour(b.datetime_value) AS datetime_desc,
sum(b.value) AS value
FROM vt AS b
GROUP BY toStartOfHour(b.datetime_value);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 499', () => {
    const query = `CREATE TABLE id_val(id UInt32, val UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 500', () => {
    const query = `CREATE TABLE id_val_join0(id UInt32, val UInt8) ENGINE = Join(ANY, LEFT, id) SETTINGS join_use_nulls = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 501', () => {
    const query = `CREATE TABLE id_val_join1(id UInt32, val UInt8) ENGINE = Join(ANY, LEFT, id) SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 502', () => {
    const query = `create table fact(id Int64, animal_key Int64, color_key Int64) Engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 503', () => {
    const query = `create table animals(animal_key UInt64, animal_name String) Engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 504', () => {
    const query = `create table colors(color_key UInt64, color_name String) Engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 505', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.base (
\`id\` UInt64,
\`id2\` UInt64,
\`d\` UInt64,
\`value\` UInt64
)
ENGINE=MergeTree()
PARTITION BY d
ORDER BY (id,id2,d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 506', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.derived1 (
\`id1\` UInt64,
\`d1\` UInt64,
\`value1\` UInt64
)
ENGINE = MergeTree()
PARTITION BY d1
ORDER BY (id1, d1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 507', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.derived2 (
\`id2\` UInt64,
\`d2\` UInt64,
\`value2\` UInt64
)
ENGINE = MergeTree()
PARTITION BY d2
ORDER BY (id2, d2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 508', () => {
    const query = `CREATE TABLE l (y String) Engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 509', () => {
    const query = `CREATE TABLE r (d Date, y String, ty UInt16 MATERIALIZED toYear(d)) Engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 510', () => {
    const query = `CREATE TABLE test (\`a\` UInt32, \`b\` UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 511', () => {
    const query = `CREATE TABLE ab_12_aaa (
\`id\` String,
\`subid\` Int32,
\`prodcat\` String,
\`prodtype\` String,
\`quality\` String,
\`m1\` Float64,
\`m2\` Float64,
\`r1\` Float64,
\`r2\` Float64,
\`d1\` Float64,
\`d2\` Float64,
\`pcs\` Float64,
\`qty\` Float64,
\`amt\` Float64,
\`amts\` Float64,
\`prc\` Float64,
\`prcs\` Float64,
\`suqty\` Float64,
\`suamt\` Float64,
\`_year\` String
)
ENGINE = MergeTree
ORDER BY (_year, prodcat, prodtype, quality, d1, id)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 512', () => {
    const query = `CREATE TABLE ab_12_bbb (
\`id\` String,
\`sales_type\` String,
\`date\` Date32,
\`o1\` String,
\`o2\` String,
\`o3\` String,
\`o4\` String,
\`o5\` String,
\`short\` String,
\`a1\` String,
\`a2\` String,
\`a3\` String,
\`idx\` String,
\`a4\` String,
\`ctx\` String,
\`_year\` String,
\`theyear\` UInt16 MATERIALIZED toYear(\`date\`),
\`themonth\` UInt8 MATERIALIZED toMonth(\`date\`),
\`theweek\` UInt8 MATERIALIZED toISOWeek(\`date\`)
)
ENGINE = MergeTree
ORDER BY (theyear, themonth, _year, id, sales_type, date)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 513', () => {
    const query = `CREATE TABLE nested_test (
s String,
nest Nested
(
x UInt64,
y UInt64
)
) ENGINE = MergeTree
ORDER BY s;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 514', () => {
    const query = `CREATE TABLE join_test (
id Int64,
y UInt64
)
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 515', () => {
    const query = `CREATE TEMPORARY TABLE repl_tbl (
\`key\` UInt32,
\`val_1\` UInt32,
\`val_2\` String,
\`val_3\` String,
\`val_4\` String,
\`val_5\` UUID,
\`ts\` DateTime
)
ENGINE = ReplacingMergeTree(ts)
ORDER BY \`key\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 516', () => {
    const query = `CREATE TABLE test_a_table ( name String,
a_col String
)
Engine = MergeTree()
ORDER BY name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 517', () => {
    const query = `CREATE TABLE test_b_table ( name String,
b_col String,
some_val String
)
Engine = MergeTree()
ORDER BY name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 518', () => {
    const query = `CREATE TEMPORARY TABLE hits (date Date, data Float64) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 519', () => {
    const query = `create table fill_ex ( eventDate Date ,
storeId String
)
engine = ReplacingMergeTree()
partition by toYYYYMM(eventDate)
order by (storeId,eventDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 520', () => {
    const query = `CREATE TABLE IF NOT EXISTS t0 (c0 Int32) ENGINE = Memory() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 521', () => {
    const query = `CREATE TABLE t1 (c0 Int32, c1 Int32, c2 Int32) ENGINE = Memory() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 522', () => {
    const query = `CREATE TABLE t2 (c0 String, c1 String MATERIALIZED (c2), c2 Int32) ENGINE = Memory() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 523', () => {
    const query = `CREATE TABLE t3 (c0 String, c1 String, c2 String) ENGINE = Log() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 524', () => {
    const query = `CREATE TABLE IF NOT EXISTS t4 (c0 Int32) ENGINE = Log() ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 525', () => {
    const query = `CREATE TABLE test1(id UInt64, t1value UInt64) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 526', () => {
    const query = `CREATE TABLE test2(id UInt64, t2value String) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 527', () => {
    const query = `CREATE TABLE parent( a_id Int64,
b_id Int64,
c_id Int64,
created_at Int64
)
ENGINE=MergeTree()
ORDER BY (a_id, b_id, c_id, created_at);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 528', () => {
    const query = `CREATE TABLE join_table_1( a_id Int64,
b_id Int64
)
ENGINE=MergeTree()
ORDER BY (a_id, b_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 529', () => {
    const query = `CREATE TABLE join_table_2( c_id Int64,
created_at Int64
)
ENGINE=MergeTree()
ORDER BY (c_id, created_at);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 530', () => {
    const query = `CREATE TABLE IF NOT EXISTS first engine = MergeTree PARTITION BY (inn, toYYYYMM(received)) ORDER BY (inn, sessionId) AS SELECT now() AS received, '123456789' AS inn, '42' AS sessionId;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 531', () => {
    const query = `CREATE TABLE IF NOT EXISTS second engine = MergeTree PARTITION BY (inn, toYYYYMM(received)) ORDER BY (inn, sessionId) AS SELECT now() AS received, '123456789' AS inn, '42' AS sessionId, '111' AS serial, '222' AS reg;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 532', () => {
    const query = `CREATE TABLE y (a UInt64) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 533', () => {
    const query = `create table test (x UInt64, y UInt64) engine=MergeTree order by x settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 534', () => {
    const query = `create table test (x UInt64, y UInt64) engine=MergeTree order by x settings min_rows_for_wide_part=100000000, min_bytes_for_wide_part=1000000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 535', () => {
    const query = `create table test (x UInt64, y UInt64) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 536', () => {
    const query = `CREATE TABLE 03040_test (
id           UInt64,
val String alias 'value: '||toString(id)
) ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 537', () => {
    const query = `CREATE TABLE graph( f UInt64,
t UInt64,
label String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 538', () => {
    const query = `create table test (id UInt64, d Dynamic(max_types=2)) engine=MergeTree order by id settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, vertical_merge_algorithm_min_rows_to_activate=1, vertical_merge_algorithm_min_columns_to_activate=1, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 539', () => {
    const query = `create table test (id UInt64, d Dynamic(max_types=2)) engine=MergeTree order by id settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 540', () => {
    const query = `create table test (id UInt64, d Dynamic(max_types=2)) engine=MergeTree order by id settings min_rows_for_wide_part=1000000000, min_bytes_for_wide_part=10000000000, vertical_merge_algorithm_min_rows_to_activate=1, vertical_merge_algorithm_min_columns_to_activate=1, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 541', () => {
    const query = `create table test (id UInt64, d Dynamic(max_types=2)) engine=MergeTree order by id settings min_rows_for_wide_part=1000000000, min_bytes_for_wide_part=10000000000, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 542', () => {
    const query = `CREATE TABLE move_partition_to_oneself (key UInt64 CODEC(NONE)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 543', () => {
    const query = `CREATE TABLE 03038_table (
\`time\` DateTime
)
ENGINE = MergeTree
ORDER BY time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 544', () => {
    const query = `CREATE TABLE broken_table (
start DateTime64(6),
end DateTime64(6),
)
ENGINE = ReplacingMergeTree(start)
ORDER BY (start);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 545', () => {
    const query = `CREATE VIEW broken_view as SELECT
t.start as start,
t.end as end,
cast(datediff('second', t.start, t.end) as float) as total_sec
FROM broken_table t FINAL
UNION ALL
SELECT
null as start,
null as end,
null as total_sec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 546', () => {
    const query = `CREATE TABLE tree( id UInt64,
parent_id Nullable(UInt64)
)
ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 547', () => {
    const query = `create table test (id UInt64, d Dynamic) engine=MergeTree order by id settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, vertical_merge_algorithm_min_rows_to_activate=1, vertical_merge_algorithm_min_columns_to_activate=1, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 548', () => {
    const query = `create table test (id UInt64, d Dynamic) engine=MergeTree order by id settings min_rows_for_wide_part=1000000000, min_bytes_for_wide_part=10000000000, vertical_merge_algorithm_min_rows_to_activate=1, vertical_merge_algorithm_min_columns_to_activate=1, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 549', () => {
    const query = `create table test (id UInt64, d Dynamic) engine=MergeTree order by id settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 550', () => {
    const query = `create table test (id UInt64, d Dynamic) engine=MergeTree order by id settings min_rows_for_wide_part=1000000000, min_bytes_for_wide_part=10000000000, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 551', () => {
    const query = `create table test (id UInt64, d Dynamic(max_types=2)) engine=MergeTree order by id settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, vertical_merge_algorithm_min_rows_to_activate=1, vertical_merge_algorithm_min_columns_to_activate=1, index_granularity_bytes=10485760, index_granularity=8192, merge_max_block_size=8192, merge_max_block_size_bytes=10485760, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 552', () => {
    const query = `create table test (id UInt64, d Dynamic(max_types=2)) engine=MergeTree order by id settings min_rows_for_wide_part=1000000000, min_bytes_for_wide_part=10000000000, vertical_merge_algorithm_min_rows_to_activate=1, vertical_merge_algorithm_min_columns_to_activate=1, index_granularity_bytes=10485760, index_granularity=8192, merge_max_block_size=8192, merge_max_block_size_bytes=10485760, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 553', () => {
    const query = `create table test (id UInt64, d Dynamic(max_types=2)) engine=MergeTree order by id settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1, vertical_merge_algorithm_min_columns_to_activate=10, index_granularity_bytes=10485760, index_granularity=8192, merge_max_block_size=8192, merge_max_block_size_bytes=10485760, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 554', () => {
    const query = `create table test (id UInt64, d Dynamic(max_types=2)) engine=MergeTree order by id settings min_rows_for_wide_part=1000000000, min_bytes_for_wide_part=10000000000, vertical_merge_algorithm_min_columns_to_activate=10, index_granularity_bytes=10485760, index_granularity=8192, merge_max_block_size=8192, merge_max_block_size_bytes=10485760, lock_acquire_timeout_for_background_operations=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 555', () => {
    const query = `CREATE TABLE department ( id UInt64,  -- department ID
parent_department UInt64, -- upper department ID
name String -- department name
)
ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 556', () => {
    const query = `CREATE table table_tar2star Engine S3(s3_conn, filename='03036_archive2.tar :: example*.csv');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 557', () => {
    const query = `CREATE table table_tarstarglobs Engine S3(s3_conn, filename='03036_archive*.tar* :: example{2..3}.csv');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 558', () => {
    const query = `CREATE TABLE t (A Array(Int64)) Engine = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 559', () => {
    const query = `CREATE TABLE test_table_1 (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 560', () => {
    const query = `CREATE TABLE test_table_2 (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 561', () => {
    const query = `create table test (id UInt64, d Dynamic) engine=MergeTree order by id settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 562', () => {
    const query = `create table test (id UInt64, d Dynamic) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 563', () => {
    const query = `create table test (id UInt64, d Dynamic) engine=MergeTree order by id settings min_rows_for_wide_part=1000000000, min_bytes_for_wide_part=10000000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 564', () => {
    const query = `create table test (id UInt64, d Dynamic(max_types=2)) engine=MergeTree order by id settings min_rows_for_wide_part=1, min_bytes_for_wide_part=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 565', () => {
    const query = `create table test (id UInt64, d Dynamic(max_types=2)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 566', () => {
    const query = `create table test (id UInt64, d Dynamic(max_types=2)) engine=MergeTree order by id settings min_rows_for_wide_part=1000000000, min_bytes_for_wide_part=10000000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 567', () => {
    const query = `CREATE TABLE test (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 568', () => {
    const query = `CREATE MATERIALIZED VIEW test_mv (
id UInt64,
value String
) ENGINE=MergeTree
ORDER BY id AS SELECT id, value FROM test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 569', () => {
    const query = `CREATE MATERIALIZED VIEW test_mv_pk (
value String,
id UInt64
) ENGINE=MergeTree PRIMARY KEY value
POPULATE AS SELECT value, id FROM test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 570', () => {
    const query = `create table test (d1 Dynamic(max_types=2), d2 Dynamic(max_types=2)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 571', () => {
    const query = `CREATE TABLE IF NOT EXISTS test (
\`value\` Float64 CODEC(Delta, LZ4),
\`uuid\` LowCardinality(String),
\`time\` DateTime64(3, 'UTC') CODEC(DoubleDelta, LZ4)
)
ENGINE = MergeTree()
ORDER BY uuid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 572', () => {
    const query = `CREATE TABLE alias_bug (
\`src\` String,
\`theAlias\` String ALIAS trimBoth(src)
)
ENGINE = MergeTree()
ORDER BY src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 573', () => {
    const query = `CREATE TABLE alias_bug_dist AS alias_bug
ENGINE = Distributed('test_shard_localhost', currentDatabase(), 'alias_bug', rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 574', () => {
    const query = `CREATE TABLE alias_bug (
\`s\` String,
\`src\` String,
\`theAlias\` String ALIAS trimBoth(src)
)
ENGINE = MergeTree()
ORDER BY src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 575', () => {
    const query = `CREATE TABLE tree (
id UInt64,
link Nullable(UInt64),
data String
) ENGINE=MergeTree ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 576', () => {
    const query = `CREATE TABLE department ( id UInt64,  -- department ID
parent_department UInt64, -- upper department ID
name String -- department name
)
ENGINE=MergeTree ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 577', () => {
    const query = `CREATE TABLE department__fuzz_1 (\`id\` DateTime, \`parent_department\` UInt128, \`name\` String) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 578', () => {
    const query = `CREATE TABLE department__fuzz_3 (\`id\` Date, \`parent_department\` UInt128, \`name\` LowCardinality(String)) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 579', () => {
    const query = `CREATE TABLE tree (
id UInt64,
link Nullable(UInt64),
data String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 580', () => {
    const query = `create table test (d Dynamic) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 581', () => {
    const query = `CREATE TABLE tab (m1 Map(Nothing, String)) ENGINE = MergeTree ORDER BY m1; -- { serverError DATA_TYPE_CANNOT_BE_USED_IN_KEY } SELECT 'But Map(Nothing, ...) can be a non-primary-key, it is quite useless though ...';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 582', () => {
    const query = `CREATE TABLE tab (m3 Map(Nothing, String)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 583', () => {
    const query = `CREATE TABLE tab (m1 Map(Float32, String), m2 Map(LowCardinality(String), String)) ENGINE = MergeTree ORDER BY (m1, m2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 584', () => {
    const query = `CREATE TABLE tab (m1 Map(Float32, String), m2 Map(LowCardinality(String), String)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 585', () => {
    const query = `CREATE TABLE 03033_example_table (
ColumnA Int64,
ColumnB Int64,
ColumnC Int64
)
ENGINE = MergeTree()
ORDER BY ColumnA;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 586', () => {
    const query = `CREATE TABLE override_test (_part UInt32) ENGINE = MergeTree ORDER BY tuple() AS SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 587', () => {
    const query = `create table a (k UInt64, v UInt64, index i (v) type set(100) granularity 2) engine MergeTree order by k settings index_granularity=8192, index_granularity_bytes=1000000000, min_index_granularity_bytes=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 588', () => {
    const query = `CREATE TABLE test  (
\`address\` FixedString(20),
\`deployer\` FixedString(20),
\`block_number\` UInt256,
\`block_hash\` FixedString(32),
\`block_timestamp\` DateTime('UTC'),
\`insertion_time\` DateTime('UTC')
)
ENGINE = MergeTree
ORDER BY address
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 589', () => {
    const query = `CREATE TABLE test_tmp as test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 590', () => {
    const query = `CREATE TABLE dst (
\`block_timestamp\` AggregateFunction(max, Nullable(DateTime('UTC'))),
\`block_hash\` AggregateFunction(argMax, Nullable(FixedString(32)), DateTime('UTC')),
\`block_number\` AggregateFunction(argMax, Nullable(UInt256), DateTime('UTC')),
\`deployer\` AggregateFunction(argMax, Nullable(FixedString(20)), DateTime('UTC')),
\`address\` FixedString(20),
\`name\` AggregateFunction(argMax, Nullable(String), DateTime('UTC')),
\`symbol\` AggregateFunction(argMax, Nullable(String), DateTime('UTC')),
\`decimals\` AggregateFunction(argMax, Nullable(UInt8), DateTime('UTC')),
\`is_proxy\` AggregateFunction(argMax, Nullable(Bool), DateTime('UTC')),
\`blacklist_flags\` AggregateFunction(argMax, Array(Nullable(String)), DateTime('UTC')),
\`whitelist_flags\` AggregateFunction(argMax, Array(Nullable(String)), DateTime('UTC')),
\`detected_standards\` AggregateFunction(argMax, Array(Nullable(String)), DateTime('UTC')),
\`amended_type\` AggregateFunction(argMax, Nullable(String), DateTime('UTC')),
\`comment\` AggregateFunction(argMax, Nullable(String), DateTime('UTC')),
\`_sources\` AggregateFunction(groupUniqArray, String),
\`_updated_at\` AggregateFunction(max, DateTime('UTC')),
\`_active\` AggregateFunction(argMax, Bool, DateTime('UTC'))
)
ENGINE = MergeTree
ORDER BY address
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 591', () => {
    const query = `CREATE MATERIALIZED VIEW view TO dst (
\`block_timestamp\` AggregateFunction(max, Nullable(DateTime('UTC'))),
\`block_hash\` AggregateFunction(argMax, Nullable(FixedString(32)), DateTime('UTC')),
\`block_number\` AggregateFunction(argMax, Nullable(UInt256), DateTime('UTC')),
\`deployer\` AggregateFunction(argMax, Nullable(FixedString(20)), DateTime('UTC')),
\`address\` FixedString(20),
\`name\` AggregateFunction(argMax, Nullable(String), DateTime('UTC')),
\`symbol\` AggregateFunction(argMax, Nullable(String), DateTime('UTC')),
\`decimals\` AggregateFunction(argMax, Nullable(UInt8), DateTime('UTC')),
\`is_proxy\` AggregateFunction(argMax, Nullable(Bool), DateTime('UTC')),
\`blacklist_flags\` AggregateFunction(argMax, Array(Nullable(String)), DateTime('UTC')),
\`whitelist_flags\` AggregateFunction(argMax, Array(Nullable(String)), DateTime('UTC')),
\`detected_standards\` AggregateFunction(argMax, Array(Nullable(String)), DateTime('UTC')),
\`amended_type\` AggregateFunction(argMax, Nullable(String), DateTime('UTC')),
\`comment\` AggregateFunction(argMax, Nullable(String), DateTime('UTC')),
\`_sources\` AggregateFunction(groupUniqArray, String),
\`_updated_at\` AggregateFunction(max, DateTime('UTC')),
\`_active\` AggregateFunction(argMax, Bool, DateTime('UTC'))
) AS
(WITH (
SELECT toDateTime('1970-01-01 00:00:00')
) AS default_timestamp
SELECT
maxState(CAST(block_timestamp, 'Nullable(DateTime(\\'UTC\\'))')) AS block_timestamp,
argMaxState(CAST(block_hash, 'Nullable(FixedString(32))'), insertion_time) AS block_hash,
argMaxState(CAST(block_number, 'Nullable(UInt256)'), insertion_time) AS block_number,
argMaxState(CAST(deployer, 'Nullable(FixedString(20))'), insertion_time) AS deployer,
address,
argMaxState(CAST(NULL, 'Nullable(String)'), CAST(default_timestamp, 'DateTime(\\'UTC\\')')) AS name,
argMaxState(CAST(NULL, 'Nullable(String)'), CAST(default_timestamp, 'DateTime(\\'UTC\\')')) AS symbol,
argMaxState(CAST(NULL, 'Nullable(UInt8)'), CAST(default_timestamp, 'DateTime(\\'UTC\\')')) AS decimals,
argMaxState(CAST(true, 'Nullable(Boolean)'), insertion_time) AS is_proxy,
argMaxState(CAST('[]', 'Array(Nullable(String))'), CAST(default_timestamp, 'DateTime(\\'UTC\\')')) AS blacklist_flags,
argMaxState(CAST('[]', 'Array(Nullable(String))'), CAST(default_timestamp, 'DateTime(\\'UTC\\')')) AS whitelist_flags,
argMaxState(CAST('[]', 'Array(Nullable(String))'), CAST(default_timestamp, 'DateTime(\\'UTC\\')')) AS detected_standards,
argMaxState(CAST(NULL, 'Nullable(String)'), CAST(default_timestamp, 'DateTime(\\'UTC\\')')) AS amended_type,
argMaxState(CAST(NULL, 'Nullable(String)'), CAST(default_timestamp, 'DateTime(\\'UTC\\')')) AS comment,
groupUniqArrayState('tokens_proxy_deployments') AS _sources,
maxState(insertion_time) AS _updated_at,
argMaxState(true, CAST(default_timestamp, 'DateTime(\\'UTC\\')')) AS _active
FROM test
WHERE insertion_time > toDateTime('2024-03-14 11:38:09')
GROUP BY address);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 592', () => {
    const query = `create table t(a UInt32, b UInt32) engine=MergeTree order by (a, b) settings index_granularity=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 593', () => {
    const query = `CREATE TABLE t_lightweight_deletes (a UInt64) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 594', () => {
    const query = `CREATE FUNCTION test_func_1 AS (a, b, c) -> ((a + b) + c);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 595', () => {
    const query = `CREATE TABLE t4_2 (
\`col1\` Int64 NOT NULL COMMENT 'test',
\`col2\` Float64 NOT NULL,
\`col3\` Int64 NOT NULL,
INDEX ind4 test_func_1(col1, col3, col1) TYPE set(51) GRANULARITY 5
)
ENGINE = MergeTree
ORDER BY col1
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 596', () => {
    const query = `CREATE TABLE account_test (
\`id\` UInt64,
\`row_ver\` UInt64,
)
ENGINE = ReplacingMergeTree(row_ver)
ORDER BY id
SETTINGS index_granularity = 16, index_granularity_bytes = 0,
min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0,
min_rows_for_compact_part = 0, min_bytes_for_compact_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 597', () => {
    const query = `create table test (s String) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 598', () => {
    const query = `CREATE TABLE t (tag_id UInt64, tag_name String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 599', () => {
    const query = `CREATE TABLE dt AS t ENGINE = Distributed('test_cluster_two_shards_localhost', currentDatabase(), 't', cityHash64(concat(tag_id, tag_name)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 600', () => {
    const query = `CREATE TABLE base (a Int32) ENGINE = TinyLog COMMENT 'original comment';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 601', () => {
    const query = `CREATE TABLE copy_without_comment AS base;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 602', () => {
    const query = `CREATE TABLE copy_with_comment AS base COMMENT 'new comment';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 603', () => {
    const query = `CREATE TABLE vecs_Float32 (v Array(Float32)) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 604', () => {
    const query = `CREATE TABLE raw_data (
	\`id\` UInt8,
	\`data\` String
)
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 605', () => {
    const query = `CREATE VIEW raw_data_parametrized AS SELECT *
FROM raw_data
WHERE (id >= {id_from:UInt8}) AND (id <= {id_to:UInt8});`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 606', () => {
    const query = `create table test (\`x\` LowCardinality(Nullable(UInt32)), \`y\` String) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 607', () => {
    const query = `create table m_table (x UInt32, y String) engine = Merge(currentDatabase(), 'test*');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 608', () => {
    const query = `CREATE TABLE memory (i UInt32) ENGINE = Memory SETTINGS min_bytes_to_keep = 8192, max_bytes_to_keep = 32768;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 609', () => {
    const query = `CREATE TABLE memory (i UInt32) ENGINE = Memory SETTINGS min_rows_to_keep = 200, max_rows_to_keep = 2000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 610', () => {
    const query = `CREATE TABLE memory (i UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 611', () => {
    const query = `create table query_run_metric_arrays engine Memory as with (with (select groupUniqArrayArray(['a', 'b']) from numbers(1)) as all_names select all_names) as all_metrics select all_metrics;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 612', () => {
    const query = `create table data_r1 (key Int) engine=ReplicatedMergeTree('/tables/{database}', 'r1') order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 613', () => {
    const query = `create table data_r2 engine=ReplicatedMergeTree('/tables/{database}', 'r2') order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 614', () => {
    const query = `CREATE TABLE test_table (
k UInt64,
)
ENGINE = MergeTree
ORDER BY k SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 615', () => {
    const query = `CREATE TABLE test (\`id\` LowCardinality(UInt32)) ENGINE = MergeTree ORDER BY id AS SELECT 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 616', () => {
    const query = `CREATE TABLE 03031_test (
\`id\` UInt64,
\`value_1\` String,
\`value_2\` String,
\`value_3\` String,
INDEX value_1_idx value_1 TYPE bloom_filter GRANULARITY 1,
INDEX value_2_idx value_2 TYPE ngrambf_v1(3, 512, 2, 0) GRANULARITY 1,
INDEX value_3_idx value_3 TYPE tokenbf_v1(512, 3, 0) GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 617', () => {
    const query = `create table ephemeral (key Int, value Int) engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 618', () => {
    const query = `create table dist_in as ephemeral engine=Distributed(test_shard_localhost, currentDatabase(), ephemeral, key) settings background_insert_batch=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 619', () => {
    const query = `create table data (key Int, uniq_values Int) engine=TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 620', () => {
    const query = `create materialized view mv to data as select key, uniqExact(value::String) uniq_values from ephemeral group by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 621', () => {
    const query = `create table dist_out as data engine=Distributed(test_shard_localhost, currentDatabase(), data);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 622', () => {
    const query = `CREATE TABLE src_table (\`a\` UInt32, \`b\` UInt32) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 623', () => {
    const query = `CREATE MATERIALIZED VIEW mv (\`a\` UInt32) ENGINE = MergeTree ORDER BY a AS SELECT a FROM src_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 624', () => {
    const query = `create table data (key Int, value AggregateFunction(sum, UInt64)) engine=AggregatingMergeTree() order by (key, value); -- { serverError DATA_TYPE_CANNOT_BE_USED_IN_KEY } create table data (key Int, value SimpleAggregateFunction(sum, UInt64)) engine=AggregatingMergeTree() order by (key, value); -- { serverError DATA_TYPE_CANNOT_BE_USED_IN_KEY }
create table data (key Int, value AggregateFunction(sum, UInt64)) engine=AggregatingMergeTree() primary key value; -- { serverError DATA_TYPE_CANNOT_BE_USED_IN_KEY }
create table data (key Int, value SimpleAggregateFunction(sum, UInt64)) engine=AggregatingMergeTree() primary key value; -- { serverError DATA_TYPE_CANNOT_BE_USED_IN_KEY }
create table data (key Int, value AggregateFunction(sum, UInt64)) engine=AggregatingMergeTree() primary key value order by (value, key); -- { serverError DATA_TYPE_CANNOT_BE_USED_IN_KEY }
create table data (key Int, value SimpleAggregateFunction(sum, UInt64)) engine=AggregatingMergeTree() primary key value order by (value, key); -- { serverError DATA_TYPE_CANNOT_BE_USED_IN_KEY }
set allow_suspicious_primary_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 625', () => {
    const query = `create table data (key Int, value SimpleAggregateFunction(sum, UInt64)) engine=AggregatingMergeTree() primary key value order by (value, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 626', () => {
    const query = `create table data (key Int) engine=AggregatingMergeTree() order by (key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 627', () => {
    const query = `create table data_rep (key Int) engine=ReplicatedAggregatingMergeTree('/tables/{database}', 'r1') order by (key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 628', () => {
    const query = `CREATE TABLE set_index_not__fuzz_0 (\`name\` String, \`status\` Enum8('alive' = 0, 'rip' = 1), INDEX idx_status status TYPE set(2) GRANULARITY 1) ENGINE = MergeTree ORDER BY name
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 629', () => {
    const query = `CREATE TABLE test_data (
ShipmentDate Date
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 630', () => {
    const query = `CREATE TABLE 03015_aggregator_empty_data_multiple_blocks (c0 Int32) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 631', () => {
    const query = `CREATE TABLE 03014_async_with_dedup_part_log (x UInt64) ENGINE=ReplicatedMergeTree('/clickhouse/table/{database}/03014_async_with_dedup_part_log', 'r1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 632', () => {
    const query = `CREATE TABLE test (a Int) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 633', () => {
    const query = `CREATE TABLE 03013_position_const_start_pos (n Int16) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 634', () => {
    const query = `create table test_memory (number UInt64) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 635', () => {
    const query = `create table test_merge_tree (number UInt64) engine=MergeTree order by number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 636', () => {
    const query = `create table test_join (number UInt64) engine=Join(ALL, LEFT, number);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 637', () => {
    const query = `CREATE VIEW v (\`date\` UInt32,\`value\` UInt8) AS WITH
data AS (SELECT '' id LIMIT 0),
r AS (SELECT'' as id, 1::UInt8 as value)
SELECT
now() as date,
value AND (data.id IN (SELECT '' as d from system.one)) AS value
FROM data
LEFT JOIN r ON data.id = r.id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 638', () => {
    const query = `CREATE TABLE users (uid Int16, name String, age Int16) ENGINE=MergeTree ORDER BY uid PARTITION BY uid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 639', () => {
    const query = `create table test (number UInt64) engine=FileLog('./user_files/data.jsonl', 'JSONEachRow') settings poll_max_batch_size=18446744073709; -- {serverError INVALID_SETTING_VALUE} `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 640', () => {
    const query = `CREATE TABLE memory (i UInt32) ENGINE = Memory SETTINGS min_bytes_to_keep = 4096, max_bytes_to_keep = 16384;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 641', () => {
    const query = `CREATE TABLE faulty_memory (i UInt32) ENGINE = Memory SETTINGS min_rows_to_keep = 100;  -- { serverError SETTING_CONSTRAINT_VIOLATION } CREATE TABLE faulty_memory (i UInt32) ENGINE = Memory SETTINGS min_bytes_to_keep = 100; -- { serverError SETTING_CONSTRAINT_VIOLATION }
DROP TABLE memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 642', () => {
    const query = `CREATE TABLE range_dictionary_nullable_source_table (
key UInt64,
start_date Date,
end_date Date,
value Nullable(UInt64)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 643', () => {
    const query = `CREATE DICTIONARY range_dictionary (
key UInt64,
start_date Date,
end_date Date,
value Nullable(UInt64) DEFAULT NULL
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'range_dictionary_nullable_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(RANGE_HASHED())
RANGE(MIN start_date MAX end_date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 644', () => {
    const query = `CREATE TABLE t_nullable_keys_1 (x Nullable(Int64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 645', () => {
    const query = `CREATE TABLE t_nullable_keys_2 (x Nullable(Int64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 646', () => {
    const query = `CREATE TABLE t_nullable_keys_3 (x Nullable(Int64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 647', () => {
    const query = `CREATE TABLE t_nullable_keys_4 (x Nullable(Int64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 648', () => {
    const query = `CREATE TABLE t_nullable_keys_5 (x Nullable(Int64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 649', () => {
    const query = `CREATE TABLE t_nullable_keys_6 (x Nullable(Int64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 650', () => {
    const query = `CREATE TABLE t_uniq_exact (a UInt64, b String, c UInt64) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 651', () => {
    const query = `CREATE TABLE t_optimize_equal_ranges (a UInt64, b String, c UInt64) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 652', () => {
    const query = `CREATE TABLE test (a UInt8, b UInt8) ENGINE = MergeTree ORDER BY (a, b) SETTINGS index_granularity = 1, primary_key_ratio_of_unique_prefix_values_to_skip_suffix_columns = 0.01;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 653', () => {
    const query = `create table test (number UInt64) engine=MergeTree order by number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 654', () => {
    const query = `CREATE TABLE src (x UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 655', () => {
    const query = `CREATE TABLE dst (x UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 656', () => {
    const query = `CREATE MATERIALIZED VIEW mv1 TO dst AS SELECT * FROM src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 657', () => {
    const query = `CREATE TABLE src (a UInt64, b UInt64) ENGINE=ReplicatedMergeTree('/clickhouse/tables/{database}/03008_deduplication_remote_insert_select/src', '{replica}')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 658', () => {
    const query = `CREATE TABLE dst_null(a UInt64, b UInt64) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 659', () => {
    const query = `CREATE MATERIALIZED VIEW mv_dst ENGINE = AggregatingMergeTree()
ORDER BY a
AS SELECT
a,
sumState(b)  AS sum_b,
uniqState(b) AS uniq_b
FROM dst_null
GROUP BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 660', () => {
    const query = `CREATE TABLE partitioned_table (key Int64, value String)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/03008_deduplication_insert_into_partitioned_table', '{replica}')
partition by key % 10
order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 661', () => {
    const query = `CREATE MATERIALIZED VIEW mv_table (key Int64, value String) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/03008_deduplication_insert_into_partitioned_table_mv', '{replica}')
ORDER BY tuple()
AS SELECT key, value FROM partitioned_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 662', () => {
    const query = `CREATE TABLE dst (
\`key\` Int64,
\`value\` String
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS non_replicated_deduplication_window=1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 663', () => {
    const query = `CREATE TABLE mv_dst (
\`key\` Int64,
\`value\` String
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS non_replicated_deduplication_window=1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 664', () => {
    const query = `CREATE MATERIALIZED VIEW mv_first TO mv_dst
AS SELECT
0 AS key,
value AS value
FROM dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 665', () => {
    const query = `CREATE MATERIALIZED VIEW mv_second TO mv_dst
AS SELECT
0 AS key,
value AS value
FROM dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 666', () => {
    const query = `CREATE MATERIALIZED VIEW mv_dst (
\`key\` Int64,
\`value\` String
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS non_replicated_deduplication_window=1000
AS SELECT
0 AS key,
value AS value
FROM dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 667', () => {
    const query = `CREATE TABLE url_na_log (
\`SiteId\` UInt32,
\`DateVisit\` Date
)
ENGINE = MergeTree
PRIMARY KEY SiteId
ORDER BY (SiteId, DateVisit)
SETTINGS index_granularity = 1000, min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 668', () => {
    const query = `CREATE ROW POLICY url_na_log_policy0 ON url_na_log FOR SELECT USING (DateVisit < '2022-08-11') OR (DateVisit > '2022-08-19') TO default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 669', () => {
    const query = `CREATE TABLE numbers_1e6__fuzz_34 (
n UInt64
)
ENGINE = MergeTree
ORDER BY n
AS SELECT *
FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 670', () => {
    const query = `CREATE TABLE numbers_1e6__fuzz_33 (
n UInt64
)
ENGINE = MergeTree
ORDER BY n
AS SELECT *
FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 671', () => {
    const query = `CREATE TABLE 03006_test (
d Date,
value UInt64
)
ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 672', () => {
    const query = `CREATE TABLE 03006_buffer_overflow_l (\`a\` String, \`b\` Tuple(String, String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 673', () => {
    const query = `CREATE TABLE 03006_buffer_overflow_r (\`a\` LowCardinality(Nullable(String)), \`c\` Tuple(LowCardinality(String), LowCardinality(String))) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 674', () => {
    const query = `create table test (a Int8) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 675', () => {
    const query = `CREATE TABLE t_length_1 (id UInt64, arr Array(UInt64)) ENGINE = ReplacingMergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 676', () => {
    const query = `CREATE TABLE t_length_2 (id UInt64, arr_length UInt64) ENGINE = ReplacingMergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 677', () => {
    const query = `CREATE TABLE users (uid Int16, name Nullable(String), age Int16) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 678', () => {
    const query = `CREATE TABLE test (dummy Int8) ENGINE = Distributed(test_cluster_two_shards, 'system', 'one');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 679', () => {
    const query = `CREATE TABLE t_sample_factor(a UInt64, b UInt64) ENGINE = MergeTree ORDER BY (a, b) SAMPLE BY b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 680', () => {
    const query = `CREATE TABLE table_03002 (ts DateTime, event_type String) ENGINE = MergeTree ORDER BY (event_type, ts);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 681', () => {
    const query = `CREATE MATERIALIZED VIEW mv_03002 TO table_03002 AS SELECT ts FROM table_03002;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 682', () => {
    const query = `CREATE TABLE t__fuzz_0 (\`i\` Int32, \`j\` Nullable(Int32), \`k\` Int32, PROJECTION p (SELECT * ORDER BY j)) ENGINE = MergeTree ORDER BY i SETTINGS index_granularity = 1, allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 683', () => {
    const query = `create table test_d engine=Distributed(test_cluster_two_shard_three_replicas_localhost, system, numbers);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 684', () => {
    const query = `CREATE TABLE landing (
timestamp DateTime64(3),
status String,
id String
)
ENGINE = MergeTree()
ORDER BY timestamp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 685', () => {
    const query = `CREATE TABLE landing_dist (
timestamp DateTime64(3),
status String,
id String
)
ENGINE = Distributed('test_cluster_two_shards', currentDatabase(), 'landing', rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 686', () => {
    const query = `CREATE TABLE ds (
timestamp DateTime64(3),
status String,
id String
)
ENGINE = MergeTree()
ORDER BY timestamp
SETTINGS non_replicated_deduplication_window=1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 687', () => {
    const query = `CREATE TABLE t_data_version (a UInt64, b UInt64) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 688', () => {
    const query = `CREATE TABLE lwd_merge (id UInt64 CODEC(NONE)) ENGINE = MergeTree ORDER BY id
SETTINGS max_bytes_to_merge_at_max_space_in_pool = 80000, exclude_deleted_rows_for_part_size_in_merge = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 689', () => {
    const query = `CREATE TABLE t_block_offset (id UInt32) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 690', () => {
    const query = `create table x (i int, j int, k int) engine MergeTree order by tuple() settings index_granularity=8192, index_granularity_bytes = '10Mi',  min_bytes_for_wide_part=0, min_rows_for_wide_part=0, ratio_of_defaults_for_sparse_serialization=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 691', () => {
    const query = `CREATE TABLE 03000_traverse_shadow_system_data_path_table ( id Int64,
data String
) ENGINE=MergeTree()
ORDER BY id
SETTINGS storage_policy='s3_cache';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 692', () => {
    const query = `CREATE TABLE skip_table (
k UInt64,
v UInt64,
INDEX v_set v TYPE set(100) GRANULARITY 2, -- set index is declared before minmax intentionally
INDEX v_mm v TYPE minmax GRANULARITY 2
)
ENGINE = MergeTree
PRIMARY KEY k
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 693', () => {
    const query = `create table source(type String) engine=MergeTree order by type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 694', () => {
    const query = `create view v_heavy as with nums as (select number from numbers(1e5))
select count(*) n from (select number from numbers(1e5) n1 cross join nums);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 695', () => {
    const query = `create table target1(type String) engine=MergeTree order by type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 696', () => {
    const query = `create table target2(type String) engine=MergeTree order by type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 697', () => {
    const query = `create materialized view vm_target2 to target2 as select * from source where type='two' and (select sum(sleepEachRow(0.1)) from numbers(30));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 698', () => {
    const query = `CREATE TABLE t_table_select (id UInt32) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 699', () => {
    const query = `CREATE TEMPORARY TABLE t_test (x UInt32, y Nullable(UInt32)) AS SELECT a.id, b.id FROM remote('127.0.0.{1,2}', currentDatabase(), t_table_select) AS a GLOBAL LEFT JOIN (SELECT id FROM remote('127.0.0.{1,2}', currentDatabase(), t_table_select) AS b WHERE (b.id % 10) = 0) AS b ON b.id = a.id SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 700', () => {
    const query = `CREATE TABLE date_t__fuzz_0 (\`id\` UInt32, \`value1\` String, \`date1\` Date) ENGINE = ReplacingMergeTree ORDER BY id SETTINGS allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 701', () => {
    const query = `CREATE TABLE visits_order (
user_id UInt64,
user_name String,
some_int UInt64
) ENGINE = MergeTree() PRIMARY KEY user_id PARTITION BY user_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 702', () => {
    const query = `CREATE TABLE visits_order_dst (
user_id UInt64,
user_name String,
some_int UInt64
) ENGINE = MergeTree() PRIMARY KEY user_id PARTITION BY user_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 703', () => {
    const query = `CREATE TABLE test (a UInt64, b UInt64, c UInt64) ENGINE = MergeTree ORDER BY (a, b, c) SETTINGS index_granularity = 1, primary_key_ratio_of_unique_prefix_values_to_skip_suffix_columns = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 704', () => {
    const query = `CREATE TABLE attach_partition_t7 ( a UInt32,
b UInt32
)
ENGINE = MergeTree
PARTITION BY a ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 705', () => {
    const query = `CREATE TABLE attach_partition_t8 ( a UInt32,
b UInt32
)
ENGINE = MergeTree
PARTITION BY a ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 706', () => {
    const query = `CREATE TABLE hits (
\`date\` Date,
\`data\` Array(UInt32)
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(date)
ORDER BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 707', () => {
    const query = `CREATE TEMPORARY TABLE t_proj (t DateTime, id UInt64, PROJECTION p (SELECT id, t ORDER BY toStartOfDay(t))) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 708', () => {
    const query = `CREATE TEMPORARY TABLE t_proj2 (a UInt32, b UInt32, PROJECTION p (SELECT a ORDER BY b * 2)) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 709', () => {
    const query = `CREATE TABLE too_many_parts (x UInt64) ENGINE = MergeTree ORDER BY tuple() SETTINGS parts_to_delay_insert = 5, parts_to_throw_insert = 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 710', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_0 (a DateTime64(0)) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 711', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_2 (a DateTime64(2)) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 712', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_3 (a DateTime64(3)) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 713', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_6 (a DateTime64(6)) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 714', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_9 (a DateTime64(6)) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 715', () => {
    const query = `create table b (x Int64, y String) engine MergeTree order by (x, y) settings index_granularity=2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 716', () => {
    const query = `CREATE TABLE t__fuzz_0 (\`i\` LowCardinality(Int32), \`j\` Int32, \`k\` Int32, PROJECTION p (SELECT * ORDER BY j)) ENGINE = MergeTree ORDER BY i SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 717', () => {
    const query = `create table data (key SimpleAggregateFunction(max, Int)) engine=AggregatingMergeTree() order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 718', () => {
    const query = `create table data (key Int) engine=AggregatingMergeTree() order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 719', () => {
    const query = `create temporary table t1 engine=MergeTree() order by c as ( select 1 as c intersect (select 1 as c union all  select 2 as c ) );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 720', () => {
    const query = `CREATE TABLE data_02052_1_wide0__fuzz_48 (
\`key\` Nullable(Int64),
\`value\` UInt8
)
ENGINE = MergeTree
ORDER BY key
SETTINGS min_bytes_for_wide_part = 0, allow_nullable_key = 1 AS
SELECT
number,
repeat(toString(number), 5)
FROM numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 721', () => {
    const query = `CREATE TEMPORARY TABLE table (x UInt8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 722', () => {
    const query = `CREATE TEMPORARY TABLE FORMAT (x UInt8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 723', () => {
    const query = `CREATE TABLE ttt (hr DateTime, ts DateTime) ENGINE=Memory as select '2000-01-01' d, d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 724', () => {
    const query = `create table test (v Variant(String, UInt64)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 725', () => {
    const query = `CREATE TABLE x (key Int) ENGINE = ReplicatedMergeTree('/tables/{database}/{uuid}', 'r1') ORDER BY tuple(); -- { serverError BAD_ARGUMENTS } CREATE TABLE x UUID 'aaaaaaaa-1111-2222-3333-aaaaaaaaaaaa' (key Int) ENGINE = ReplicatedMergeTree('/tables/{database}/{uuid}', 'r1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 726', () => {
    const query = `CREATE TABLE test_table (
\`eventType\` String,
\`timestamp\` UInt64,
\`key\` UInt64
)
ENGINE = ReplacingMergeTree
PRIMARY KEY (eventType, timestamp)
ORDER BY (eventType, timestamp, key)
SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 727', () => {
    const query = `CREATE TABLE tags (dev_tag String) ENGINE = Memory AS SELECT '1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 728', () => {
    const query = `CREATE TABLE users (
\`id\` Int64,
\`name\` String
)
ENGINE = ReplacingMergeTree
ORDER BY (id, name);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 729', () => {
    const query = `create table test (v1 Variant(String, UInt64, Array(UInt32)), v2 Variant(String, UInt64, Array(UInt32))) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 730', () => {
    const query = `CREATE TEMPORARY TABLE test_temporary_table_02989 (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 731', () => {
    const query = `CREATE TABLE test_table_replicated (
id UInt64,
value String
) ENGINE=ReplicatedMergeTree('/clickhouse/tables/{database}/test_table_replicated', '1_replica') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 732', () => {
    const query = `CREATE TABLE test_table_replicated_second (
id UInt64,
value String,
insert_time DateTime
) ENGINE=ReplicatedMergeTree('/clickhouse/tables/{database}/test_table_replicated', '2_replica') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 733', () => {
    const query = `CREATE TABLE tabc (a UInt32, b UInt32 ALIAS a + 1, c UInt32 ALIAS b + 1, s String) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 734', () => {
    const query = `CREATE TABLE ta (a Int32) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 735', () => {
    const query = `CREATE TABLE tb (b Int32) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 736', () => {
    const query = `CREATE TABLE users (uid Int16, name String, spouse_name String) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 737', () => {
    const query = `CREATE DATABASE 02988_ordinary ENGINE=Ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 738', () => {
    const query = `CREATE TABLE t (\`id\` UInt16, \`u\` LowCardinality(Int32), \`s\` LowCardinality(String)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 739', () => {
    const query = `CREATE TABLE 02987_logical_optimizer_table (key Int, value Int) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 740', () => {
    const query = `CREATE VIEW v1 AS SELECT * FROM 02987_logical_optimizer_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 741', () => {
    const query = `CREATE TABLE 02987_logical_optimizer_merge AS v1 ENGINE=Merge(currentDatabase(), 'v1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 742', () => {
    const query = `CREATE TABLE test_empty (a Array(Int64)) engine=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 743', () => {
    const query = `CREATE TABLE test_null (a Array(Nullable(Int64))) engine=MergeTree ORDER BY a SETTINGS allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 744', () => {
    const query = `CREATE TABLE test_nested_arrays (a Array(Array(Int64))) engine=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 745', () => {
    const query = `CREATE TABLE test_numbers (a Array(Int64)) engine=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 746', () => {
    const query = `CREATE TABLE test_big_numbers_sep (a Array(Int64)) engine=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 747', () => {
    const query = `CREATE TABLE test_big_numbers (a Array(Int64)) engine=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 748', () => {
    const query = `CREATE TABLE test_string (a Array(String)) engine=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 749', () => {
    const query = `CREATE TABLE test_big_string (a Array(String)) engine=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 750', () => {
    const query = `CREATE TABLE test_datetime (a Array(DateTime)) engine=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 751', () => {
    const query = `CREATE TABLE test_date32 (a Array(Date32)) engine=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 752', () => {
    const query = `CREATE TABLE test_date (a Array(Date)) engine=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 753', () => {
    const query = `CREATE TABLE sharded_table (dummy UInt8) ENGINE = Distributed('test_cluster_two_shards', 'system', 'one');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 754', () => {
    const query = `CREATE TABLE t_index_agg_func (
id UInt64,
v AggregateFunction(avg, UInt64),
INDEX idx_v v TYPE minmax GRANULARITY 1
)
ENGINE = AggregatingMergeTree ORDER BY id
SETTINGS index_granularity = 4; -- { serverError BAD_ARGUMENTS }
CREATE TABLE t_index_agg_func
(
id UInt64,
v AggregateFunction(avg, UInt64),
)
ENGINE = AggregatingMergeTree ORDER BY id
SETTINGS index_granularity = 4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 755', () => {
    const query = `CREATE TABLE shared_test_table (id UInt64) ENGINE = MergeTree
ORDER BY (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 756', () => {
    const query = `CREATE TABLE distributed_test_table ENGINE = Distributed(test_cluster_two_shard_three_replicas_localhost, currentDatabase(), shared_test_table);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 757', () => {
    const query = `CREATE TABLE test (
t String,
id String,
h Map(String, String)   
)
ENGINE = MergeTree
ORDER BY (t, id) SETTINGS index_granularity = 4096 ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 758', () => {
    const query = `CREATE TABLE t1 (
f1 Int32,
f2 Map(LowCardinality(String),LowCardinality(String)),
f3 Map(String,String),
f4 Map(Int32,Int32)
)
ENGINE=Memory AS
SELECT 1 as f1,
map(number%2,number%10) as f2,
f2 as f3,
f2 as f4
from numbers(1000111);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 759', () => {
    const query = `CREATE TABLE shard_0.t_local (a Int) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 760', () => {
    const query = `CREATE TABLE shard_1.t_local (a Int) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 761', () => {
    const query = `CREATE TABLE t_distr (a Int) ENGINE = Distributed(test_cluster_two_shards_different_databases, '', 't_local', 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 762', () => {
    const query = `CREATE TABLE test_unexpected_cluster (n UInt64) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 763', () => {
    const query = `CREATE TABLE data (
key String,
)
ENGINE = MergeTree
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 764', () => {
    const query = `CREATE MATERIALIZED VIEW mv_indexes (
key String,
INDEX idx key TYPE bloom_filter GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY key
AS SELECT * FROM data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 765', () => {
    const query = `CREATE MATERIALIZED VIEW mv_no_indexes (
key String,
INDEX idx key TYPE bloom_filter GRANULARITY 1
)
ENGINE = Null
AS SELECT * FROM data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 766', () => {
    const query = `CREATE MATERIALIZED VIEW mv_projections (
key String,
projection p (SELECT uniqCombined(key))
)
ENGINE = MergeTree
ORDER BY key
AS SELECT * FROM data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 767', () => {
    const query = `CREATE MATERIALIZED VIEW mv_primary_key (
key String,
PRIMARY KEY key
)
ENGINE = MergeTree
AS SELECT * FROM data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 768', () => {
    const query = `CREATE MATERIALIZED VIEW mv_primary_key_from_column (
key String PRIMARY KEY
)
ENGINE = MergeTree
AS SELECT * FROM data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 769', () => {
    const query = `CREATE TABLE t_vertical_merge_memory (id UInt64, arr Array(String)) ENGINE = MergeTree ORDER BY id
SETTINGS
min_bytes_for_wide_part = 0,
vertical_merge_algorithm_min_rows_to_activate = 1,
vertical_merge_algorithm_min_columns_to_activate = 1,
index_granularity = 8192,
index_granularity_bytes = '10M',
merge_max_block_size = 8192,
merge_max_block_size_bytes = '10M';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 770', () => {
    const query = `CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 771', () => {
    const query = `CREATE TABLE t2 (id Int32, pe Map(String, Tuple(a UInt64, b UInt64))) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 772', () => {
    const query = `CREATE TABLE t3 (id Int32, c Tuple(v String, pe Map(String, Tuple(a UInt64, b UInt64)))) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 773', () => {
    const query = `CREATE TABLE test_table (i Int64) engine=MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 774', () => {
    const query = `CREATE DICTIONARY test_dict (y String, value UInt64 DEFAULT 0) PRIMARY KEY y SOURCE(CLICKHOUSE(TABLE 'test_table')) LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 775', () => {
    const query = `CREATE TABLE table_with_some_columns( key UInt64,
value0 UInt8
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/table_with_some_columns', '1')
ORDER BY key
SETTINGS allow_experimental_block_number_column=1,
ratio_of_defaults_for_sparse_serialization=0.0001,
min_bytes_for_wide_part = 0,
replace_long_file_name_to_hash=0; -- simpler to debug
INSERT INTO table_with_some_columns SELECT rand(), number + 10 from numbers(100000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 776', () => {
    const query = `CREATE TABLE pr_1 (\`a\` UInt32) ENGINE = MergeTree ORDER BY a PARTITION BY a % 10 AS SELECT 10 * intDiv(number, 10) + 1 FROM numbers(1_000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 777', () => {
    const query = `CREATE TABLE pr_2 (\`a\` UInt32) ENGINE = MergeTree ORDER BY a AS SELECT * FROM numbers(1_000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 778', () => {
    const query = `CREATE TABLE numbers_1e3 (
\`n\` UInt64
)
ENGINE = MergeTree
ORDER BY n
AS SELECT * FROM numbers(1_000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 779', () => {
    const query = `CREATE TABLE landing (
timestamp UInt64,
value UInt64
)
ENGINE = MergeTree ORDER BY tuple() SETTINGS non_replicated_deduplication_window = 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 780', () => {
    const query = `CREATE TABLE ds_1_1 (
t UInt64,
v UInt64
)
ENGINE = MergeTree ORDER BY tuple() SETTINGS non_replicated_deduplication_window = 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 781', () => {
    const query = `CREATE MATERIALIZED VIEW mv_1_1 TO ds_1_1 as SELECT
timestamp t, sum(value) v
FROM landing
GROUP BY t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 782', () => {
    const query = `CREATE MATERIALIZED VIEW mv_1_2 TO ds_1_1 as SELECT
timestamp t, sum(value) v
FROM landing
GROUP BY t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 783', () => {
    const query = `CREATE TABLE ds_1_2 (
t UInt64,
v UInt64
)
ENGINE = MergeTree ORDER BY tuple() SETTINGS non_replicated_deduplication_window = 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 784', () => {
    const query = `CREATE MATERIALIZED VIEW mv_1_2 TO ds_1_2 as SELECT
timestamp t, sum(value) v
FROM landing
GROUP BY t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 785', () => {
    const query = `CREATE TABLE ds_2_1 (
l String,
t DateTime,
v UInt64
)
ENGINE = MergeTree ORDER BY tuple() SETTINGS non_replicated_deduplication_window = 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 786', () => {
    const query = `CREATE MATERIALIZED VIEW mv_2_1 TO ds_2_1 as SELECT '2_1' l, t, v
FROM ds_1_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 787', () => {
    const query = `CREATE MATERIALIZED VIEW mv_2_2 TO ds_2_1 as SELECT '2_2' l, t, v
FROM ds_1_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 788', () => {
    const query = `CREATE TABLE ds_3_1 (
l String,
t DateTime,
v UInt64
)
ENGINE = MergeTree ORDER BY tuple() SETTINGS non_replicated_deduplication_window = 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 789', () => {
    const query = `CREATE MATERIALIZED VIEW mv_3_1 TO ds_3_1 as SELECT '3_1' l, t, v
FROM ds_2_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 790', () => {
    const query = `create table tlb (k UInt64) engine MergeTree order by k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 791', () => {
    const query = `CREATE TABLE t_func_to_subcolumns_variant (id UInt64, v Variant(String, UInt64)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 792', () => {
    const query = `CREATE TABLE t_func_to_subcolumns_map (id UInt64, m Map(String, UInt64)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 793', () => {
    const query = `CREATE TABLE t_column_names (arr Array(UInt64), n Nullable(String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 794', () => {
    const query = `CREATE TABLE t_subcolumns_if (id Nullable(Int64)) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 795', () => {
    const query = `create table a (x Int64) engine URL('https://example.com/', CSV, headers('foo' = 'bar', 'a' = '13'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 796', () => {
    const query = `create table b (x Int64) engine URL('https://example.com/', CSV, headers());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 797', () => {
    const query = `create table c (x Int64) engine S3('https://example.s3.amazonaws.com/a.csv', NOSIGN, CSV, headers('foo' = 'bar'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 798', () => {
    const query = `create table d (x Int64) engine S3('https://example.s3.amazonaws.com/a.csv', NOSIGN, headers('foo' = 'bar'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 799', () => {
    const query = `create view e (x Int64) as select count() from url('https://example.com/', CSV, headers('foo' = 'bar', 'a' = '13'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 800', () => {
    const query = `create view f (x Int64) as select count() from url('https://example.com/', CSV, headers());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 801', () => {
    const query = `create view g (x Int64) as select count() from s3('https://example.s3.amazonaws.com/a.csv', CSV, headers('foo' = 'bar'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 802', () => {
    const query = `create view h (x Int64) as select count() from s3('https://example.s3.amazonaws.com/a.csv', headers('foo' = 'bar'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 803', () => {
    const query = `CREATE TABLE tp (
\`type\` Int32,
\`eventcnt\` UInt64,
PROJECTION p
(
SELECT type,sum(eventcnt)
GROUP BY type
)
)
ENGINE = ReplacingMergeTree
ORDER BY type
SETTINGS deduplicate_merge_projection_mode = 'rebuild';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 804', () => {
    const query = `CREATE TABLE tp (
\`type\` Int32,
\`eventcnt\` UInt64,
\`sign\` Int8,
PROJECTION p
(
SELECT type,sum(eventcnt)
GROUP BY type
)
)
ENGINE = CollapsingMergeTree(sign)
ORDER BY type
SETTINGS deduplicate_merge_projection_mode = 'rebuild';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 805', () => {
    const query = `CREATE TABLE tp (
\`type\` Int32,
\`eventcnt\` UInt64,
\`sign\` Int8,
\`version\` UInt8,
PROJECTION p
(
SELECT type,sum(eventcnt)
GROUP BY type
)
)
ENGINE = VersionedCollapsingMergeTree(sign,version)
ORDER BY type
SETTINGS deduplicate_merge_projection_mode = 'rebuild';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 806', () => {
    const query = `CREATE TABLE tp (
\`type\` Int32,
\`eventcnt\` UInt64,
PROJECTION p
(
SELECT type,sum(eventcnt)
GROUP BY type
)
)
ENGINE = MergeTree
ORDER BY type
SETTINGS deduplicate_merge_projection_mode = 'rebuild';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 807', () => {
    const query = `CREATE TABLE t1 (\`key\` UInt32, \`s\` String) ENGINE = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 808', () => {
    const query = `CREATE TABLE t2 (\`key\` UInt32, \`s\` String) ENGINE = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 809', () => {
    const query = `CREATE TABLE im (id Int32, dd Int32) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 810', () => {
    const query = `CREATE TABLE ts (tid Int32, id Int32) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 811', () => {
    const query = `CREATE TABLE async_insert_mt_test (a UInt64, b Array(UInt64)) ENGINE=MergeTree() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 812', () => {
    const query = `CREATE TABLE tab (
\`foo\` Array(LowCardinality(String)),
INDEX idx foo TYPE bloom_filter GRANULARITY 1
)
ENGINE = MergeTree
PRIMARY KEY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 813', () => {
    const query = `CREATE TABLE t1__fuzz_4 (\`x\` Nullable(UInt32), \`y\` Int64) ENGINE = MergeTree ORDER BY (x, y) SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 814', () => {
    const query = `CREATE TABLE t0__fuzz_29 (\`x\` LowCardinality(UInt256), \`y\` Array(Array(Date))) ENGINE = MergeTree ORDER BY (x, y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 815', () => {
    const query = `CREATE TABLE data_01223 (\`key\` Int) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 816', () => {
    const query = `CREATE TABLE dist_layer_01223 AS data_01223 ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), data_01223);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 817', () => {
    const query = `CREATE TABLE dist_01223 AS data_01223 ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), dist_layer_01223);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 818', () => {
    const query = `CREATE TABLE f32_table (my_field Float32) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 819', () => {
    const query = `create table a (i int, j int, projection p (select * order by j)) engine MergeTree partition by i order by tuple() settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 820', () => {
    const query = `create table test (a Int32) engine = MergeTree() order by tuple() settings disk=disk(name='02963_custom_disk', type = object_storage, object_storage_type = local_blob_storage, path='./02963_test1/');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 821', () => {
    const query = `create table test (a Int32) engine = MergeTree() order by tuple() settings disk=disk(name='02963_custom_disk', type = object_storage, object_storage_type = local_blob_storage, path='./02963_test2/'); -- { serverError BAD_ARGUMENTS }
drop table if exists test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 822', () => {
    const query = `create table test (a Int32) engine = MergeTree() order by tuple() settings disk=disk(name='02963_custom_disk'); -- { serverError BAD_ARGUMENTS }
drop table if exists test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 823', () => {
    const query = `create table test (a Int32) engine = MergeTree() order by tuple() settings disk='02963_custom_disk'; -- { serverError BAD_ARGUMENTS }
drop table if exists test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 824', () => {
    const query = `create table test (a Int32) engine = MergeTree() order by tuple() settings disk=disk(name='s3_disk_02963'); -- { serverError BAD_ARGUMENTS }
drop table if exists test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 825', () => {
    const query = `create table test (a Int32) engine = MergeTree() order by tuple() settings disk='s3_disk_02963';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 826', () => {
    const query = `create table test (a Int32) engine = MergeTree() order by tuple() settings disk=disk(name='s3_disk_02963', type = object_storage, object_storage_type = local_blob_storage, path='./02963_test2/'); -- { serverError BAD_ARGUMENTS }
drop table if exists test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 827', () => {
    const query = `create table test (a Int32) engine = MergeTree() order by tuple() settings disk=disk(name='test1',
type = object_storage,
object_storage_type = s3,
endpoint = 'http://localhost:11111/test/common/',
access_key_id = clickhouse,
secret_access_key = clickhouse);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 828', () => {
    const query = `create table test (a Int32) engine = MergeTree() order by tuple() settings disk=disk(name='test2',
type = object_storage,
object_storage_type = s3,
metadata_type = local,
endpoint = 'http://localhost:11111/test/common/',
access_key_id = clickhouse,
secret_access_key = clickhouse);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 829', () => {
    const query = `create table test (a Int32) engine = MergeTree() order by tuple() settings disk=disk(name='test3',
type = object_storage,
object_storage_type = s3,
metadata_type = local,
metadata_keep_free_space_bytes = 1024,
endpoint = 'http://localhost:11111/test/common/',
access_key_id = clickhouse,
secret_access_key = clickhouse);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 830', () => {
    const query = `create table test (a Int32) engine = MergeTree() order by tuple() settings disk=disk(name='test4',
type = object_storage,
object_storage_type = s3,
metadata_type = local,
metadata_keep_free_space_bytes = 0,
endpoint = 'http://localhost:11111/test/common/',
access_key_id = clickhouse,
secret_access_key = clickhouse);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 831', () => {
    const query = `CREATE TABLE empsalary  (
\`depname\` LowCardinality(String),
\`empno\` UInt64,
\`salary\` Int32,
\`enroll_date\` Date
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 832', () => {
    const query = `CREATE table t1 (a UInt64, b UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 833', () => {
    const query = `CREATE table t2 (a UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 834', () => {
    const query = `CREATE TABLE t (\`x\` UInt32, \`s\` LowCardinality(String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 835', () => {
    const query = `CREATE TABLE r (\`x\` LowCardinality(Nullable(UInt32)), \`s\` Nullable(String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 836', () => {
    const query = `CREATE TABLE test_parallel_index (
z UInt64,
INDEX i z TYPE set(8)
)
ENGINE = MergeTree
ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 837', () => {
    const query = `CREATE DATABASE IF NOT EXISTS 02961_db1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 838', () => {
    const query = `CREATE DATABASE IF NOT EXISTS 02961_db2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 839', () => {
    const query = `CREATE TABLE IF NOT EXISTS 02961_db1.02961_tb1 (id UInt32) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 840', () => {
    const query = `CREATE TABLE IF NOT EXISTS 02961_db1.02961_tb2 (id UInt32) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 841', () => {
    const query = `CREATE TABLE IF NOT EXISTS 02961_db2.02961_tb3 (id UInt32) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 842', () => {
    const query = `CREATE TABLE IF NOT EXISTS 02961_db2.02961_tb4 (id UInt32) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 843', () => {
    const query = `CREATE TABLE IF NOT EXISTS 02961_db2.02961_tb5 (id UInt32) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 844', () => {
    const query = `CREATE TABLE IF NOT EXISTS tab1 (id UInt32) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 845', () => {
    const query = `CREATE TABLE IF NOT EXISTS tab2 (id UInt32) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 846', () => {
    const query = `CREATE TABLE IF NOT EXISTS tab3 (id UInt32) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 847', () => {
    const query = `CREATE TABLE test_tuple_filter__fuzz_2 (
\`id\` Nullable(UInt32),
\`value\` LowCardinality(String),
\`log_date\` LowCardinality(Date)
)
ENGINE = MergeTree
PARTITION BY log_date
ORDER BY id
SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 848', () => {
    const query = `CREATE DATABASE test2960_valid_database_engine ENGINE = Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 849', () => {
    const query = `CREATE DATABASE test2960_database_engine_args_not_allowed ENGINE = Atomic('foo', 'bar'); -- { serverError BAD_ARGUMENTS } CREATE DATABASE test2960_invalid_database_engine ENGINE = Foo; -- { serverError UNKNOWN_DATABASE_ENGINE }
DROP DATABASE IF EXISTS test2960_valid_database_engine;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 850', () => {
    const query = `CREATE FUNCTION f1 AS (x) -> x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 851', () => {
    const query = `CREATE TABLE hit (
\`UserID\` UInt32,
\`URL\` String,
\`EventTime\` DateTime
)
ENGINE = MergeTree
partition by f1(URL)
ORDER BY (EventTime);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 852', () => {
    const query = `create table data (key Int) engine=MergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 853', () => {
    const query = `CREATE TABLE dict_with_ttl (key UInt64, value String) ENGINE = EmbeddedRocksDB(2) PRIMARY KEY (key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 854', () => {
    const query = `CREATE TABLE spark_bar_test (\`value\` Int64, \`event_date\` Date) ENGINE = MergeTree ORDER BY event_date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 855', () => {
    const query = `CREATE TABLE t (
\`n1\` Int32
)
ENGINE = File(Avro)
SETTINGS output_format_avro_codec = 'zstd';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 856', () => {
    const query = `create view slow_view1 as with c1 as (select 1 as a),
c2 as (select a from c1),
c3 as (select a from c2),
c4 as (select a from c3),
c5 as (select a from c4),
c6 as (select a from c5),
c7 as (select a from c6),
c8 as (select a from c7),
c9 as (select a from c8),
c10 as (select a from c9),
c11 as (select a from c10),
c12 as (select a from c11),
c13 as (select a from c12),
c14 as (select a from c13),
c15 as (select a from c14),
c16 as (select a from c15),
c17 as (select a from c16),
c18 as (select a from c17),
c19 as (select a from c18),
c20 as (select a from c19),
c21 as (select a from c20),
c22 as (select a from c21),
c23 as (select a from c22),
c24 as (select a from c23),
c25 as (select a from c24),
c26 as (select a from c25),
c27 as (select a from c26),
c28 as (select a from c27),
c29 as (select a from c28),
c30 as (select a from c29),
c31 as (select a from c30),
c32 as (select a from c31),
c33 as (select a from c32),
c34 as (select a from c33),
c35 as (select a from c34),
c36 as (select a from c35),
c37 as (select a from c36),
c38 as (select a from c37),
c39 as (select a from c38),
c40 as (select a from c39)
select a from c21;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 857', () => {
    const query = `CREATE TABLE 02952_disjunction_optimization (a Int32, b String)
ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 858', () => {
    const query = `CREATE TABLE test (
\`id\` UInt64,
\`t\` Tuple(a UInt64, b Array(Tuple(c UInt64, d UInt64)))
)
ENGINE = MergeTree
ORDER BY id
SETTINGS min_rows_for_wide_part = 1, min_bytes_for_wide_part = 1, index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 859', () => {
    const query = `create table a (i int) engine MergeTree order by i settings index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 860', () => {
    const query = `create table b (i int) engine MergeTree order by tuple() settings index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 861', () => {
    const query = `CREATE TABLE part_log_bytes_uncompressed ( key UInt8,
value UInt8
)
Engine=MergeTree()
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 862', () => {
    const query = `CREATE TABLE dictionary_source_table (
id UInt64,
v1 String,
v2 Nullable(String),
v3 Nullable(UInt64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 863', () => {
    const query = `CREATE DICTIONARY flat_dictionary (
id UInt64,
v1 String,
v2 Nullable(String) DEFAULT NULL,
v3 Nullable(UInt64)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'dictionary_source_table'))
LIFETIME(MIN 0 MAX 0)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 864', () => {
    const query = `CREATE DICTIONARY hashed_dictionary (
id UInt64,
v1 String,
v2 Nullable(String) DEFAULT NULL,
v3 Nullable(UInt64)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'dictionary_source_table'))
LIFETIME(MIN 0 MAX 0)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 865', () => {
    const query = `CREATE DICTIONARY hashed_array_dictionary (
id UInt64,
v1 String,
v2 Nullable(String) DEFAULT NULL,
v3 Nullable(UInt64)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'dictionary_source_table'))
LIFETIME(MIN 0 MAX 0)
LAYOUT(HASHED_ARRAY());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 866', () => {
    const query = `CREATE TABLE range_dictionary_source_table (
id UInt64,
start Date,
end Nullable(Date),
val Nullable(UInt64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 867', () => {
    const query = `CREATE DICTIONARY range_hashed_dictionary (
id UInt64,
start Date,
end Nullable(Date),
val Nullable(UInt64)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'range_dictionary_source_table'))
LIFETIME(MIN 0 MAX 0)
LAYOUT(RANGE_HASHED())
RANGE(MIN start MAX end);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 868', () => {
    const query = `CREATE DICTIONARY cache_dictionary (
id UInt64,
v1 String,
v2 Nullable(String) DEFAULT NULL,
v3 Nullable(UInt64)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'dictionary_source_table'))
LIFETIME(MIN 0 MAX 0)
LAYOUT(CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 869', () => {
    const query = `CREATE DICTIONARY direct_dictionary (
id UInt64,
v1 String,
v2 Nullable(String) DEFAULT NULL,
v3 Nullable(UInt64)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'dictionary_source_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 870', () => {
    const query = `CREATE TABLE ip_dictionary_source_table (
id UInt64,
prefix String,
asn UInt32,
cca2 String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 871', () => {
    const query = `CREATE DICTIONARY ip_dictionary (
id UInt64,
prefix String,
asn UInt32,
cca2 String
)
PRIMARY KEY prefix
SOURCE(CLICKHOUSE(TABLE 'ip_dictionary_source_table'))
LAYOUT(IP_TRIE)
LIFETIME(3600);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 872', () => {
    const query = `CREATE TABLE polygon_dictionary_source_table (
key Array(Array(Array(Tuple(Float64, Float64)))),
name Nullable(String)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 873', () => {
    const query = `CREATE DICTIONARY polygon_dictionary (
key Array(Array(Array(Tuple(Float64, Float64)))),
name Nullable(String)
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE 'polygon_dictionary_source_table'))
LIFETIME(0)
LAYOUT(POLYGON());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 874', () => {
    const query = `CREATE TABLE points (x Float64, y Float64) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 875', () => {
    const query = `CREATE TABLE regexp_dictionary_source_table (
id UInt64,
parent_id UInt64,
regexp String,
keys   Array(String),
values Array(String),
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 876', () => {
    const query = `create dictionary regexp_dict (
regexp String,
name String,
version Nullable(UInt64),
comment String default 'nothing'
)
PRIMARY KEY(regexp)
SOURCE(CLICKHOUSE(TABLE 'regexp_dictionary_source_table'))
LIFETIME(0)
LAYOUT(regexp_tree);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 877', () => {
    const query = `CREATE TABLE ttl_group_by_bug (key UInt32, ts DateTime, value UInt32, min_value UInt32 default value, max_value UInt32 default value)
ENGINE = MergeTree()
ORDER BY (key, toStartOfInterval(ts, toIntervalMinute(3)), ts)
TTL ts + INTERVAL 5 MINUTE GROUP BY key, toStartOfInterval(ts, toIntervalMinute(3))
SET value = sum(value), min_value = min(min_value), max_value = max(max_value),  ts=min(toStartOfInterval(ts, toIntervalMinute(3)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 878', () => {
    const query = `CREATE TABLE test (x UInt8) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 879', () => {
    const query = `CREATE TABLE merge_tree_in_subqueries (id UInt64, name String, num UInt64) ENGINE = MergeTree ORDER BY (id, name);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 880', () => {
    const query = `CREATE TABLE test (id UInt64, date Date) ENGINE = MergeTree
ORDER BY id
AS select *, '2023-12-25' from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 881', () => {
    const query = `CREATE TABLE t_merge_tree_index (
\`a\` UInt64,
\`b\` UInt64,
\`sp\` UInt64,
\`arr\` Array(LowCardinality(String)),
\`n\` Nested(c1 String, c2 UInt64),
\`t\` Tuple(c1 UInt64, c2 UInt64),
\`column.with.dots\` UInt64
)
ENGINE = MergeTree
ORDER BY (a, b, sipHash64(sp) % 100)
SETTINGS
index_granularity = 3,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 6,
ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 882', () => {
    const query = `CREATE TABLE t_merge_tree_index (a UInt64 CODEC(LZ4), b UInt64 CODEC(LZ4), s String CODEC(LZ4)) ENGINE = MergeTree ORDER BY (a, b)
SETTINGS
index_granularity = 3,
min_bytes_for_wide_part = 0,
ratio_of_defaults_for_sparse_serialization = 1.0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 883', () => {
    const query = `CREATE TABLE t_merge_tree_index (a UInt64 CODEC(LZ4), b UInt64 CODEC(LZ4), s String CODEC(LZ4)) ENGINE = MergeTree ORDER BY (a, b)
SETTINGS
index_granularity = 3,
min_bytes_for_wide_part = '1G',
ratio_of_defaults_for_sparse_serialization = 1.0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 884', () => {
    const query = `CREATE TABLE 02947_table_1 (id Int32) Engine=MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 885', () => {
    const query = `CREATE TABLE 02947_table_2 (id Int32) Engine=MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 886', () => {
    const query = `CREATE TABLE t1(k UInt32, v String) ENGINE ReplicatedMergeTree('/02946_parallel_replicas/{database}/test_tbl', 'r1') ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 887', () => {
    const query = `CREATE TABLE t2(k UInt32, v String) ENGINE ReplicatedMergeTree('/02946_parallel_replicas/{database}/test_tbl', 'r2') ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 888', () => {
    const query = `CREATE TABLE t3(k UInt32, v String) ENGINE ReplicatedMergeTree('/02946_parallel_replicas/{database}/test_tbl', 'r3') ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 889', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_d as test ENGINE = Distributed(test_cluster_one_shard_three_replicas_localhost, currentDatabase(), test);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 890', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String
) ENGINE=ReplacingMergeTree ORDER BY id SETTINGS index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 891', () => {
    const query = `CREATE TABLE tab (id Int64, dflt Int64 DEFAULT 54321) ENGINE MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 892', () => {
    const query = `CREATE TABLE tab (id Int64, dflt Int64 DEFAULT 54321) ENGINE MergeTree ORDER BY id SETTINGS min_bytes_for_wide_part = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 893', () => {
    const query = `CREATE TABLE tab (id Int64, dflt Nullable(Int64) DEFAULT 54321) ENGINE MergeTree ORDER BY id SETTINGS min_bytes_for_wide_part = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 894', () => {
    const query = `CREATE TABLE tab (id Int64, mtrl Int64 MATERIALIZED 54321) ENGINE MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 895', () => {
    const query = `CREATE TABLE tab (id Int64, mtrl Int64 MATERIALIZED 54321) ENGINE MergeTree ORDER BY id SETTINGS min_bytes_for_wide_part = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 896', () => {
    const query = `CREATE TABLE literal_alias_misclassification (
\`id\` Int64,
\`a\` Nullable(String),
\`b\` Nullable(Int64)
)
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 897', () => {
    const query = `CREATE TABLE tokenbf_v1_hasany_test (
id UInt32,
array Array(String),
INDEX idx_array_tokenbf_v1 array TYPE tokenbf_v1(512,3,0) GRANULARITY 1,
) Engine=MergeTree() ORDER BY id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 898', () => {
    const query = `CREATE TABLE ngrambf_v1_hasany_test (
id UInt32,
array Array(String),
INDEX idx_array_ngrambf_v1 array TYPE ngrambf_v1(3,512,3,0) GRANULARITY 1,
) Engine=MergeTree() ORDER BY id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 899', () => {
    const query = `CREATE TABLE tokenbf_tab (
id UInt32,
str String,
INDEX idx str TYPE tokenbf_v1(256, 2, 0)
)
ENGINE = MergeTree
ORDER BY id
SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 900', () => {
    const query = `CREATE TABLE ngrambf_tab (
id UInt32,
str String,
INDEX idx str TYPE ngrambf_v1(3, 256, 2, 0)
)
ENGINE = MergeTree
ORDER BY id
SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 901', () => {
    const query = `CREATE TABLE t (
\`n\` int,
\`__unused_group_by_column\` int
)
ENGINE = MergeTree
ORDER BY n AS
SELECT number, number
FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 902', () => {
    const query = `CREATE TABLE order_by_all (
a String,
b Nullable(Int32)
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 903', () => {
    const query = `CREATE TABLE order_by_all (
a String,
b Nullable(Int32),
all UInt64
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 904', () => {
    const query = `CREATE TABLE test_group_by_with_rollup_order (id Int64, a Nullable(Int64), b Nullable(String)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 905', () => {
    const query = `CREATE TABLE test_table (
number UInt64
)
ENGINE=MergeTree ORDER BY number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 906', () => {
    const query = `CREATE MATERIALIZED VIEW test_mv ENGINE=MergeTree ORDER BY arr AS
WITH (SELECT '\\d[a-z]') AS constant_value
SELECT extractAll(concat(toString(number), 'a'), assumeNotNull(constant_value)) AS arr
FROM test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 907', () => {
    const query = `CREATE TABLE regex_test_table (
regex String
)
ENGINE = MergeTree ORDER BY regex;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 908', () => {
    const query = `CREATE MATERIALIZED VIEW test_mv ENGINE=MergeTree ORDER BY arr AS
WITH (SELECT regex FROM regex_test_table) AS constant_value
SELECT extractAll(concat(toString(number), 'a'), assumeNotNull(constant_value)) AS arr
FROM test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 909', () => {
    const query = `CREATE TABLE t_proj_external (
k1 UInt32,
k2 UInt32,
k3 UInt32,
value UInt32
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 910', () => {
    const query = `CREATE TABLE data_sparse_column (\`key\` Int64, \`value\` Int32) ENGINE = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 911', () => {
    const query = `CREATE TABLE test_parallel_replicas_settings (n UInt64) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 912', () => {
    const query = `CREATE TABLE format_nested(attrs Nested(k String, v String)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 913', () => {
    const query = `CREATE TABLE test_max_mt_projections_alter (c1 UInt32, c2 UInt32, c3 UInt32) ENGINE = MergeTree ORDER BY c1
SETTINGS max_projections = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 914', () => {
    const query = `CREATE TABLE test_max_mt_projections_create (c1 UInt32, c2 UInt32, PROJECTION p1 (SELECT c1, c2 ORDER BY c2),
PROJECTION p2 (SELECT c2 ORDER BY c2))
ENGINE = MergeTree ORDER BY c1
SETTINGS max_projections = 1; -- { serverError LIMIT_EXCEEDED }
CREATE TABLE test_max_mt_projections_create (c1 UInt32, c2 UInt32,
PROJECTION p (SELECT c1, c2 ORDER BY c2))
ENGINE = MergeTree ORDER BY c1
SETTINGS max_projections = 0; -- { serverError LIMIT_EXCEEDED }
CREATE TABLE test_max_mt_projections_create (c1 UInt32, c2 UInt32,
PROJECTION p (SELECT c1, c2 ORDER BY c2))
ENGINE = MergeTree ORDER BY c1
SETTINGS max_projections = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 915', () => {
    const query = `CREATE TABLE tab (id String) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 916', () => {
    const query = `create table if not exists test (number UInt64) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 917', () => {
    const query = `CREATE TABLE t2 (a UInt64, b UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 918', () => {
    const query = `CREATE TABLE test1 (a Int32) engine=MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 919', () => {
    const query = `CREATE TABLE test2 (a Int32) engine=MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 920', () => {
    const query = `CREATE TABLE raw (
name String,
num String
) ENGINE = MergeTree
ORDER BY (name);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 921', () => {
    const query = `CREATE TABLE parsed_eph (
name String,
num_ephemeral UInt32 EPHEMERAL,
num UInt32 MATERIALIZED num_ephemeral,
) ENGINE = MergeTree
ORDER BY (name);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 922', () => {
    const query = `CREATE MATERIALIZED VIEW parse_mv_eph TO parsed_eph
AS
SELECT
name,
toUInt32(num) as num_ephemeral
FROM raw;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 923', () => {
    const query = `create or replace table t_temp ( a UInt32,
timestamp DateTime
)
engine = MergeTree
order by a
TTL timestamp + INTERVAL 2 SECOND WHERE a in (select number from system.numbers limit 100_000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 924', () => {
    const query = `CREATE TABLE test_max_size_drop Engine = MergeTree()
ORDER BY number
AS SELECT number
FROM numbers(1000)
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 925', () => {
    const query = `CREATE TABLE tab (str String) ENGINE=MergeTree ORDER BY str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 926', () => {
    const query = `CREATE TABLE tab (puny String) ENGINE=MergeTree ORDER BY puny;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 927', () => {
    const query = `CREATE TABLE join_inner_table__fuzz_146 (\`id\` UUID, \`key\` String, \`number\` Int64, \`value1\` String, \`value2\` String, \`time\` Nullable(Int64)) ENGINE = MergeTree ORDER BY (id, number, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 928', () => {
    const query = `CREATE TABLE t_02709__fuzz_23 (\`key\` Nullable(UInt8), \`sign\` Int8, \`date\` DateTime64(3)) ENGINE = CollapsingMergeTree(sign) PARTITION BY date ORDER BY key SETTINGS allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 929', () => {
    const query = `CREATE TABLE tab (item_id UInt64, price_sold Nullable(Float32), date Date) ENGINE = MergeTree ORDER BY item_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 930', () => {
    const query = `create table from_table (x UInt32) engine=MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 931', () => {
    const query = `create table to_table (x UInt32) engine=MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 932', () => {
    const query = `create materialized view mv to to_table as select * from from_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 933', () => {
    const query = `CREATE TABLE t_lwd_mutations(id UInt64, v UInt64) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 934', () => {
    const query = `CREATE TABLE tab (idna String) ENGINE=MergeTree ORDER BY idna;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 935', () => {
    const query = `CREATE TABLE t_materialize_delete (id UInt64, v UInt64) ENGINE = MergeTree ORDER BY id PARTITION BY id % 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 936', () => {
    const query = `CREATE TABLE test_table (
uint64 UInt64,
float64 Float64,
decimal32 Decimal32(5),
) ENGINE=MergeTree ORDER BY uint64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 937', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_02931;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 938', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_1 (id Int32, str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 939', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_2 (id Int32, str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 940', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_3 (id Int32, str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 941', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_4 (id Int32, str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 942', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_5 (id Int32, str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 943', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_6 (id Int32, str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 944', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_7 (id Int32, str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 945', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_8 (id Int32, str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 946', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_9 (id Int32, str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 947', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_10 (id Int32, str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 948', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_11 (id Int32, str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 949', () => {
    const query = `CREATE VIEW IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_view_1 AS SELECT * FROM test_max_num_to_warn_02931.test_max_num_to_warn_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 950', () => {
    const query = `CREATE VIEW IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_view_2 AS SELECT * FROM test_max_num_to_warn_02931.test_max_num_to_warn_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 951', () => {
    const query = `CREATE VIEW IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_view_3 AS SELECT * FROM test_max_num_to_warn_02931.test_max_num_to_warn_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 952', () => {
    const query = `CREATE VIEW IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_view_4 AS SELECT * FROM test_max_num_to_warn_02931.test_max_num_to_warn_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 953', () => {
    const query = `CREATE VIEW IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_view_5 AS SELECT * FROM test_max_num_to_warn_02931.test_max_num_to_warn_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 954', () => {
    const query = `CREATE VIEW IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_view_6 AS SELECT * FROM test_max_num_to_warn_02931.test_max_num_to_warn_6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 955', () => {
    const query = `CREATE VIEW IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_view_7 AS SELECT * FROM test_max_num_to_warn_02931.test_max_num_to_warn_7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 956', () => {
    const query = `CREATE VIEW IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_view_8 AS SELECT * FROM test_max_num_to_warn_02931.test_max_num_to_warn_8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 957', () => {
    const query = `CREATE VIEW IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_view_9 AS SELECT * FROM test_max_num_to_warn_02931.test_max_num_to_warn_9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 958', () => {
    const query = `CREATE VIEW IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_view_10 AS SELECT * FROM test_max_num_to_warn_02931.test_max_num_to_warn_10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 959', () => {
    const query = `CREATE VIEW IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_view_11 AS SELECT * FROM test_max_num_to_warn_02931.test_max_num_to_warn_11;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 960', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_dict_1 (id Int32, str String) PRIMARY KEY id SOURCE(CLICKHOUSE(DB 'test_max_num_to_warn_02931' TABLE 'test_max_num_to_warn_1'))LAYOUT(FLAT()) LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 961', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_dict_2 (id Int32, str String) PRIMARY KEY id SOURCE(CLICKHOUSE(DB 'test_max_num_to_warn_02931' TABLE 'test_max_num_to_warn_2'))LAYOUT(FLAT()) LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 962', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_dict_3 (id Int32, str String) PRIMARY KEY id SOURCE(CLICKHOUSE(DB 'test_max_num_to_warn_02931' TABLE 'test_max_num_to_warn_3'))LAYOUT(FLAT()) LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 963', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_dict_4 (id Int32, str String) PRIMARY KEY id SOURCE(CLICKHOUSE(DB 'test_max_num_to_warn_02931' TABLE 'test_max_num_to_warn_4'))LAYOUT(FLAT()) LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 964', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_dict_5 (id Int32, str String) PRIMARY KEY id SOURCE(CLICKHOUSE(DB 'test_max_num_to_warn_02931' TABLE 'test_max_num_to_warn_5'))LAYOUT(FLAT()) LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 965', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_dict_6 (id Int32, str String) PRIMARY KEY id SOURCE(CLICKHOUSE(DB 'test_max_num_to_warn_02931' TABLE 'test_max_num_to_warn_6'))LAYOUT(FLAT()) LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 966', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_dict_7 (id Int32, str String) PRIMARY KEY id SOURCE(CLICKHOUSE(DB 'test_max_num_to_warn_02931' TABLE 'test_max_num_to_warn_7'))LAYOUT(FLAT()) LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 967', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_dict_8 (id Int32, str String) PRIMARY KEY id SOURCE(CLICKHOUSE(DB 'test_max_num_to_warn_02931' TABLE 'test_max_num_to_warn_8'))LAYOUT(FLAT()) LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 968', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_dict_9 (id Int32, str String) PRIMARY KEY id SOURCE(CLICKHOUSE(DB 'test_max_num_to_warn_02931' TABLE 'test_max_num_to_warn_9'))LAYOUT(FLAT()) LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 969', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS test_max_num_to_warn_02931.test_max_num_to_warn_dict_10 (id Int32, str String) PRIMARY KEY id SOURCE(CLICKHOUSE(DB 'test_max_num_to_warn_02931' TABLE 'test_max_num_to_warn_10'))LAYOUT(FLAT()) LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 970', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 971', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 972', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 973', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 974', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 975', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 976', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 977', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 978', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 979', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 980', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_max_num_to_warn_11;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 981', () => {
    const query = `CREATE TABLE src(v UInt64) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 982', () => {
    const query = `CREATE TABLE dest(v UInt64) Engine = MergeTree() ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 983', () => {
    const query = `CREATE MATERIALIZED VIEW pipe TO dest AS SELECT v FROM src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 984', () => {
    const query = `CREATE TABLE test_bug_optimization (
\`path\` String
)
ENGINE = MergeTree
ORDER BY path;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 985', () => {
    const query = `CREATE TABLE t1 (\`n\` UInt64) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 986', () => {
    const query = `create database db_filesystem ENGINE=Filesystem('/etc'); -- { serverError BAD_ARGUMENTS } create database db_filesystem ENGINE=Filesystem('../../../../../../../../etc'); -- { serverError BAD_ARGUMENTS }`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 987', () => {
    const query = `CREATE TABLE t (
key1 UInt64,
value1 String,
value2 String,
INDEX idx (value1) TYPE set(10) GRANULARITY 1
)
ENGINE MergeTree ORDER BY key1 SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 988', () => {
    const query = `CREATE TABLE t (uid Int16, name String, age Nullable(Int8), i Int16, j Int16, projection p1 (select name, age, uniq(i), count(j) group by name, age)) ENGINE=MergeTree order by uid settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 989', () => {
    const query = `CREATE TABLE 02919_test_table_noarg(str String) ENGINE = FuzzJSON('{}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 990', () => {
    const query = `CREATE TABLE 02919_test_table_valid_args(str String) ENGINE = FuzzJSON( '{"pet":"rat"}', NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 991', () => {
    const query = `CREATE TABLE 02919_test_table_reuse_args(str String) ENGINE = FuzzJSON( '{
"name": "Jane Doe",
"age": 30,
"city": "New York",
"contacts": {
"email": "jane@example.com",
"phone": "+1234567890"
},
"skills": [
"JavaScript",
"Python",
{
"frameworks": ["React", "Django"]
}
],
"projects": [
{"name": "Project A", "status": "completed"},
{"name": "Project B", "status": "in-progress"}
]
}',
12345);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 992', () => {
    const query = `CREATE TABLE 02919_test_table_invalid_col_type (
str Nullable(Int64)
)
ENGINE = FuzzJSON('{"pet":"rat"}', NULL); -- { serverError BAD_ARGUMENTS }
DROP TABLE IF EXISTS 02919_test_table_invalid_col_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 993', () => {
    const query = `CREATE TABLE 02919_test_multi_col (
str1 String,
str2 String
) ENGINE = FuzzJSON('{"pet":"rat"}', 999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 994', () => {
    const query = `CREATE TABLE crash_02919 ( b Int64,
c Nullable(Int64) MATERIALIZED b,
d Nullable(Bool) MATERIALIZED b
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 995', () => {
    const query = `CREATE TABLE t_hardware_error ( KeyID UInt32
) Engine = ReplicatedMergeTree('/clickhouse/tables/{shard}/{database}/t_async_insert_dedup', '{replica}')
ORDER BY (KeyID);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 996', () => {
    const query = `CREATE TABLE \`02919_ddsketch_quantile\` ENGINE = Log AS
SELECT quantilesDDState(0.001, 0.9)(number) AS sketch
FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 997', () => {
    const query = `CREATE TEMPORARY TABLE alter_test (a UInt32, b UInt8) ENGINE=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 998', () => {
    const query = `CREATE TEMPORARY TABLE alter_test (a UInt32, b UInt8) ENGINE=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 999', () => {
    const query = `CREATE TEMPORARY TABLE alter_test (a UInt32, b UInt8) ENGINE=Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1000', () => {
    const query = `CREATE TABLE source_table(id UInt64, value String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1001', () => {
    const query = `CREATE DICTIONARY id_value_dictionary(id UInt64, value String) PRIMARY KEY id SOURCE(CLICKHOUSEX(TABLE 'source_table')) LIFETIME(MIN 0 MAX 1000) LAYOUT(FLAT()); -- { serverError UNKNOWN_ELEMENT_IN_CONFIG } SELECT count() FROM system.dictionaries WHERE name=='id_value_dictionary' AND database==currentDatabase();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1002', () => {
    const query = `CREATE TABLE 02918_parallel_replicas (x String, y Int32) ENGINE = MergeTree ORDER BY cityHash64(x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1003', () => {
    const query = `CREATE TABLE mt1 (id UInt64) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1004', () => {
    const query = `CREATE TABLE mt2 (id UInt64) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1005', () => {
    const query = `CREATE TABLE merge (id UInt64) ENGINE = Merge(currentDatabase(), '^mt[0-9]+\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1006', () => {
    const query = `CREATE TABLE mt3 (id UInt64) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1007', () => {
    const query = `CREATE NAMED COLLECTION 02918_json_fuzzer AS json_str='{}';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1008', () => {
    const query = `CREATE TABLE 02918_table_str (json_str String) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1009', () => {
    const query = `CREATE TABLE 02918_table_obj1 (json_obj Object('json')) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1010', () => {
    const query = `CREATE TABLE 02918_table_obj2 (json_obj Object('json')) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1011', () => {
    const query = `CREATE TEMPORARY TABLE alter_test (CounterID UInt32, StartDate Date, UserID UInt32, VisitID UInt32, NestedColumn Nested(A UInt8, S String), ToDrop UInt32);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1012', () => {
    const query = `CREATE TABLE t1 (v UInt64, s String) ENGINE=MergeTree() ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1013', () => {
    const query = `CREATE VIEW v1 (v UInt64) AS SELECT v FROM t1 SETTINGS additional_table_filters = {'default.t1': 's != \\'s1%\\''};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1014', () => {
    const query = `create table tableIn (n int) engine=ReplicatedMergeTree('/test/02916/{database}/table', '1')
order by tuple()
settings
storage_policy='s3_cache',
allow_remote_fs_zero_copy_replication=1,
sleep_before_commit_local_part_in_replicated_table_ms=5000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1015', () => {
    const query = `create table tableOut (n int) engine=ReplicatedMergeTree('/test/02916/{database}/table', '2')
order by tuple()
settings
storage_policy='s3_cache',
allow_remote_fs_zero_copy_replication=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1016', () => {
    const query = `CREATE TABLE table_02916 (
\`ID\` UInt32,
\`Name\` String
)
ENGINE = MergeTree
ORDER BY ID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1017', () => {
    const query = `CREATE TABLE table_02916_distributed (
\`ID\` UInt32,
\`Name\` String
)
ENGINE = Distributed(test_unavailable_shard, currentDatabase(), table_02916, rand())
SETTINGS skip_unavailable_shards = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1018', () => {
    const query = `create table shard_0.from_1 (x UInt32) engine = ReplicatedMergeTree('/clickhouse/tables/from_1_' || currentDatabase(), '0') order by x settings old_parts_lifetime=1, max_cleanup_delay_period=1, cleanup_delay_period=1, shared_merge_tree_disable_merges_and_mutations_assignment=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1019', () => {
    const query = `create table shard_1.from_1 (x UInt32) engine = ReplicatedMergeTree('/clickhouse/tables/from_1_' || currentDatabase(), '1') order by x settings old_parts_lifetime=1, max_cleanup_delay_period=1, cleanup_delay_period=1, shared_merge_tree_disable_merges_and_mutations_assignment=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1020', () => {
    const query = `create table shard_0.to (x UInt32) engine = ReplicatedMergeTree('/clickhouse/tables/to_' || currentDatabase(), '0') order by x settings old_parts_lifetime=1, max_cleanup_delay_period=1, cleanup_delay_period=1, max_parts_to_merge_at_once=2, shared_merge_tree_disable_merges_and_mutations_assignment=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1021', () => {
    const query = `create table shard_1.to (x UInt32) engine = ReplicatedMergeTree('/clickhouse/tables/to_' || currentDatabase(), '1') order by x settings old_parts_lifetime=1, max_cleanup_delay_period=1, cleanup_delay_period=1, max_parts_to_merge_at_once=2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1022', () => {
    const query = `CREATE TABLE nested_table (id UInt64, first Nested(a Int8, b String)) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1023', () => {
    const query = `create table shard_0.from_0 (x UInt32) engine = ReplicatedMergeTree('/clickhouse/tables/from_0_' || currentDatabase(), '0') order by x settings old_parts_lifetime=1, max_cleanup_delay_period=1, cleanup_delay_period=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1024', () => {
    const query = `create table shard_1.from_0 (x UInt32) engine = ReplicatedMergeTree('/clickhouse/tables/from_0_' || currentDatabase(), '1') order by x settings old_parts_lifetime=1, max_cleanup_delay_period=1, cleanup_delay_period=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1025', () => {
    const query = `create table shard_0.from_1 (x UInt32) engine = ReplicatedMergeTree('/clickhouse/tables/from_1_' || currentDatabase(), '0') order by x settings old_parts_lifetime=1, max_cleanup_delay_period=1, cleanup_delay_period=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1026', () => {
    const query = `create table shard_1.from_1 (x UInt32) engine = ReplicatedMergeTree('/clickhouse/tables/from_1_' || currentDatabase(), '1') order by x settings old_parts_lifetime=1, max_cleanup_delay_period=1, cleanup_delay_period=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1027', () => {
    const query = `create table shard_0.to (x UInt32) engine = ReplicatedMergeTree('/clickhouse/tables/to_' || currentDatabase(), '0') order by x settings old_parts_lifetime=1, max_cleanup_delay_period=1, cleanup_delay_period=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1028', () => {
    const query = `create table shard_1.to (x UInt32) engine = ReplicatedMergeTree('/clickhouse/tables/to_' || currentDatabase(), '1') order by x settings old_parts_lifetime=1, max_cleanup_delay_period=1, cleanup_delay_period=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1029', () => {
    const query = `create table tab (x LowCardinality(Nullable(Float64))) engine = MergeTree order by x settings allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1030', () => {
    const query = `CREATE TABLE t__fuzz_307 (\`k1\` DateTime, \`k2\` LowCardinality(Nullable(Float64)), \`v\` Nullable(UInt32)) ENGINE = ReplacingMergeTree ORDER BY (k1, k2) settings allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1031', () => {
    const query = `CREATE TABLE t__fuzz_282 (\`k1\` DateTime, \`k2\` LowCardinality(Nullable(Float64)), \`v\` Nullable(UInt32)) ENGINE = ReplacingMergeTree ORDER BY (k1, k2) SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1032', () => {
    const query = `create table t_delete_projection (x UInt32, y UInt64, projection p (select sum(y))) engine = MergeTree order by tuple() SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1033', () => {
    const query = `CREATE TABLE landing (
\`time\` DateTime,
\`pk1\` LowCardinality(String),
\`pk2\` LowCardinality(String),
\`pk3\` LowCardinality(String),
\`pk4\` String
)
ENGINE = ReplicatedReplacingMergeTree('/clickhouse/' || currentDatabase() || '/landing/{shard}/', '{replica}')
ORDER BY (pk1, pk2, pk3, pk4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1034', () => {
    const query = `CREATE TABLE ds (
\`pk1\` LowCardinality(String),
\`pk2\` LowCardinality(String),
\`pk3\` LowCardinality(String),
\`pk4\` LowCardinality(String),
\`occurences\` AggregateFunction(count)
)
ENGINE = ReplicatedAggregatingMergeTree('/clickhouse/' || currentDatabase() || '/ds/{shard}/', '{replica}')
ORDER BY (pk1, pk2, pk3, pk4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1035', () => {
    const query = `CREATE MATERIALIZED VIEW mv TO ds AS SELECT
pk1,
pk2,
pk4,
pk3,
countState() AS occurences
FROM landing
GROUP BY pk1, pk2, pk4, pk3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1036', () => {
    const query = `create database 02911_support_alias_column_in_indices;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1037', () => {
    const query = `create table test1 (
c UInt32,
a alias c + 1,
index i (a) type minmax
)
engine = MergeTree
order by c
settings index_granularity = 8192, min_index_granularity_bytes = 1024, index_granularity_bytes = 10485760; -- default settings, prevent randomization in tests
insert into test1 select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1038', () => {
    const query = `create table test2 (
c UInt32,
a1 alias c + 1,
a2 alias a1 + 1,
index i (a2) type minmax
)
engine = MergeTree
order by c
settings index_granularity = 8192, min_index_granularity_bytes = 1024, index_granularity_bytes = 10485760; -- default settings, prevent randomization in tests
insert into test2 select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1039', () => {
    const query = `CREATE USER 02911_user ON CLUSTER test_shard_localhost;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1040', () => {
    const query = `CREATE ROW POLICY 02911_rowpolicy ON CLUSTER test_shard_localhost ON default.* USING 1 TO 02911_user;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1041', () => {
    const query = `CREATE TABLE t1 (x Nullable(Int64), y Nullable(UInt64)) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1042', () => {
    const query = `CREATE TABLE t2 (x Nullable(Int64), y Nullable(UInt64)) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1043', () => {
    const query = `CREATE TABLE t1n (x Int64, y UInt64) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1044', () => {
    const query = `CREATE TABLE t2n (x Int64, y UInt64) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1045', () => {
    const query = `create table t0 (pkey UInt32, c1 UInt32, primary key(pkey)) engine = MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1046', () => {
    const query = `create table t1 (vkey UInt32, primary key(vkey)) engine = MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1047', () => {
    const query = `create table t3 (c17 String, primary key(c17)) engine = MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1048', () => {
    const query = `create table tab (a UInt32, b UInt32, c UInt32, d UInt32) engine = MergeTree order by ((a + b) * c, sin(a / b));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1049', () => {
    const query = `create table tab2 (x DateTime, y UInt32, z UInt32) engine = MergeTree order by (x, y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1050', () => {
    const query = `create table tab3 (a UInt32, b UInt32, c UInt32, d UInt32) engine = MergeTree order by ((a + b) * c, sin(a / b));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1051', () => {
    const query = `create table tab4 (a UInt32, b UInt32, c UInt32, d UInt32) engine = MergeTree order by sin(a / b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1052', () => {
    const query = `create table tab5 (a UInt32, b UInt32, c UInt32, d UInt32) engine = MergeTree order by (a + b) * c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1053', () => {
    const query = `CREATE TABLE index_test (
	x UInt32,
	y UInt32,
	z UInt32
) ENGINE = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1054', () => {
    const query = `CREATE TABLE dict (key UInt64, value String) ENGINE = EmbeddedRocksDB PRIMARY KEY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1055', () => {
    const query = `CREATE TABLE t (
\`id\` UInt64,
\`val\` String,
\`legacy_ver\` UInt64,
)
ENGINE = ReplicatedReplacingMergeTree('/tables/{database}/t/', 'r1', legacy_ver)
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1056', () => {
    const query = `CREATE TABLE t_r_ok (
\`id\` UInt64,
\`val\` String,
\`legacy_ver\` UInt64,
)
ENGINE = ReplicatedReplacingMergeTree('/tables/{database}/t/', 'r2', legacy_ver)
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1057', () => {
    const query = `CREATE TABLE t_r_error (
\`id\` UInt64,
\`val\` String,
\`legacy_ver\` UInt64
)
ENGINE = ReplicatedReplacingMergeTree('/tables/{database}/t/', 'r3')
ORDER BY id; -- { serverError METADATA_MISMATCH }
CREATE TABLE t2
(
\`id\` UInt64,
\`val\` String,
\`legacy_ver\` UInt64,
\`deleted\` UInt8
)
ENGINE = ReplicatedReplacingMergeTree('/tables/{database}/t2/', 'r1', legacy_ver)
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1058', () => {
    const query = `CREATE TABLE t2_r_ok (
\`id\` UInt64,
\`val\` String,
\`legacy_ver\` UInt64,
\`deleted\` UInt8
)
ENGINE = ReplicatedReplacingMergeTree('/tables/{database}/t2/', 'r2', legacy_ver)
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1059', () => {
    const query = `CREATE TABLE t2_r_error (
\`id\` UInt64,
\`val\` String,
\`legacy_ver\` UInt64,
\`deleted\` UInt8
)
ENGINE = ReplicatedReplacingMergeTree('/tables/{database}/t2/', 'r3', legacy_ver, deleted)
ORDER BY id; -- { serverError METADATA_MISMATCH }
CREATE TABLE t3
(
\`key\` UInt64,
\`metrics1\` UInt64,
\`metrics2\` UInt64
)
ENGINE = ReplicatedSummingMergeTree('/tables/{database}/t3/', 'r1', metrics1)
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1060', () => {
    const query = `CREATE TABLE t3_r_ok (
\`key\` UInt64,
\`metrics1\` UInt64,
\`metrics2\` UInt64
)
ENGINE = ReplicatedSummingMergeTree('/tables/{database}/t3/', 'r2', metrics1)
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1061', () => {
    const query = `CREATE TABLE t3_r_error (
\`key\` UInt64,
\`metrics1\` UInt64,
\`metrics2\` UInt64
)
ENGINE = ReplicatedSummingMergeTree('/tables/{database}/t3/', 'r3', metrics2)
ORDER BY key; -- { serverError METADATA_MISMATCH }
CREATE TABLE t4
(
\`key\` UInt32,
\`Path\` String,
\`Time\` DateTime('UTC'),
\`Value\` Float64,
\`Version\` UInt32,
\`col\` UInt64
)
ENGINE = ReplicatedGraphiteMergeTree('/tables/{database}/t4/', 'r1', 'graphite_rollup')
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1062', () => {
    const query = `CREATE TABLE t4_r_ok (
\`key\` UInt32,
\`Path\` String,
\`Time\` DateTime('UTC'),
\`Value\` Float64,
\`Version\` UInt32,
\`col\` UInt64
)
ENGINE = ReplicatedGraphiteMergeTree('/tables/{database}/t4/', 'r2', 'graphite_rollup')
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1063', () => {
    const query = `CREATE TABLE prefetched_table(key UInt64, s String) Engine = MergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1064', () => {
    const query = `CREATE TABLE test02910 (
	i Int8,
	jString String
) ENGINE = MergeTree
ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1065', () => {
    const query = `CREATE TABLE test02910_second (
\`Id1\` String,
\`Id2\` String,
\`timestamp\` DateTime64(6),
\`tags\` Array(String),
)
ENGINE = MergeTree
PRIMARY KEY (Id1, Id2)
ORDER BY (Id1, Id2, timestamp)
SETTINGS index_granularity = 8192, index_granularity_bytes = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1066', () => {
    const query = `CREATE NAMED COLLECTION IF NOT EXISTS cache_collection_sql AS path = 'collection_sql', max_size = '1Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1067', () => {
    const query = `CREATE TABLE test (a Int32, b String) ENGINE = MergeTree() ORDER BY a SETTINGS disk = disk(type = cache, disk = 'local_disk', name = '\$CLICHOUSE_TEST_UNIQUE_NAME', cache_name='cache_collection_sql', load_metadata_asynchronously = 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1068', () => {
    const query = `CREATE TABLE test2 (a Int32, b String) ENGINE = MergeTree() ORDER BY a SETTINGS disk = disk(type = cache, disk = 'local_disk', name = '\$CLICHOUSE_TEST_UNIQUE_NAME_2', cache_name='cache_collection', load_metadata_asynchronously = 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1069', () => {
    const query = `CREATE NAMED COLLECTION foobar03 AS a = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1070', () => {
    const query = `CREATE TABLE t ( c0 DateTime,
c1 DateTime,
a DateTime alias toStartOfFifteenMinutes(c0)
) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1071', () => {
    const query = `CREATE TABLE t(a UInt64) ENGINE = Log
SETTINGS disk = 's3_cache';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1072', () => {
    const query = `CREATE TABLE t1 (key UInt8) ENGINE = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1073', () => {
    const query = `CREATE TABLE t2 (key UInt32) ENGINE = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1074', () => {
    const query = `CREATE TABLE test (
\`id\` UInt64,
\`name\` String,
PROJECTION projection_name
(
SELECT sum(id) GROUP BY id, name
)
)
ENGINE = MergeTree()
ORDER BY id
SETTINGS index_granularity_bytes = 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1075', () => {
    const query = `create table test_nested (data Nested(x UInt32, y UInt32)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1076', () => {
    const query = `create table test_array_tuple (data Array(Tuple(x UInt64, y UInt64))) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1077', () => {
    const query = `CREATE TABLE tab (
\`machine_id\` UInt64,
\`name\` String,
\`timestamp\` DateTime
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(timestamp)
ORDER BY machine_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1078', () => {
    const query = `CREATE TABLE null_02902 (t Tuple(num Int64, str String)) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1079', () => {
    const query = `create table test_02902 engine File(JSONEachRow) settings output_format_json_named_tuples_as_objects = 1, output_format_json_skip_null_value_in_named_tuples = 1
as select cast((number::String, null, (number::String, null)), 'Tuple(a Nullable(String), b Nullable(Int64), c Tuple(x Nullable(String), y Nullable(Float64)))') as c
from numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1080', () => {
    const query = `CREATE TABLE test_apply_deleted_mask(id Int64, value String) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1081', () => {
    const query = `CREATE TABLE t (
\`rDate\` String,
\`cpu_total\` Int64
)
ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1082', () => {
    const query = `CREATE TABLE test1 (
id String,
time DateTime64(9),
key Int64,
value Bool,
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(time)
ORDER BY (key, id, time);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1083', () => {
    const query = `CREATE TABLE test2 (
time DateTime,
value String
)
ENGINE = MergeTree
ORDER BY (time) AS SELECT 0, '';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1084', () => {
    const query = `CREATE TABLE test (x UInt32, y UInt32) ENGINE = MergeTree ORDER BY mortonEncode(x, y) SETTINGS index_granularity = 8192, index_granularity_bytes = '1Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1085', () => {
    const query = `CREATE TABLE test (x UInt32, y UInt32) ENGINE = MergeTree ORDER BY mortonEncode(x, y) SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1086', () => {
    const query = `CREATE TABLE t1(k UInt32, v String) ENGINE ReplicatedMergeTree('/02898_parallel_replicas/{database}/test_tbl', 'r1') ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1087', () => {
    const query = `CREATE TABLE t2(k UInt32, v String) ENGINE ReplicatedMergeTree('/02898_parallel_replicas/{database}/test_tbl', 'r2') ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1088', () => {
    const query = `CREATE TABLE t3(k UInt32, v String) ENGINE ReplicatedMergeTree('/02898_parallel_replicas/{database}/test_tbl', 'r3') ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1089', () => {
    const query = `CREATE TABLE 02898_parallel_replicas_final (x String, y Int32) ENGINE = ReplacingMergeTree ORDER BY cityHash64(x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1090', () => {
    const query = `CREATE TABLE test (
EventDate Date
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY toMonday(EventDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1091', () => {
    const query = `CREATE TABLE test2 (
a UInt32,
b Int64
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY (a * b, b * b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1092', () => {
    const query = `CREATE TABLE test3 (
a UInt32,
b Int64
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1093', () => {
    const query = `CREATE TABLE test4 (EventDate Date) ENGINE = MergeTree() ORDER BY tuple() PARTITION BY EventDate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1094', () => {
    const query = `CREATE TABLE test5 (
a UInt32,
b Int64
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY (a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1095', () => {
    const query = `CREATE TABLE test6 (
a UInt32,
b Int64
)
ENGINE = MergeTree
ORDER BY tuple()
PARTITION BY (a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1096', () => {
    const query = `CREATE TABLE or_bug (key UInt8) ENGINE=MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1097', () => {
    const query = `CREATE TABLE forms (
\`form_id\` FixedString(24),
\`text_field\` String
)
ENGINE = MergeTree
PRIMARY KEY form_id
ORDER BY form_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1098', () => {
    const query = `CREATE TABLE t_leading_zeroes(id Int64, input String, val Int64, expected Int64, comment String) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1099', () => {
    const query = `CREATE TABLE t_leading_zeroes_f(id Int64, input String, val Float64, expected Float64, comment String) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1100', () => {
    const query = `CREATE TABLE test_table (time_stamp_utc DateTime, impressions UInt32, clicks UInt32, revenue Float32) ENGINE = MergeTree ORDER BY time_stamp_utc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1101', () => {
    const query = `create table test_table engine MergeTree order by sum as select 100 as sum union all select 200 as sum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1102', () => {
    const query = `CREATE TABLE foo (id UInt64, seq UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1103', () => {
    const query = `CREATE TABLE bar (id UInt64, seq UInt64, name String) ENGINE = ReplacingMergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1104', () => {
    const query = `CREATE TABLE t (k1 UInt64, k2 UInt64, v UInt64) ENGINE = ReplacingMergeTree() ORDER BY (k1, k2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1105', () => {
    const query = `CREATE VIEW view_without_sample AS SELECT 1 AS x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1106', () => {
    const query = `create table nested_smt ( date date,
val UInt64,
counters_Map Nested (
id UInt8,
count Int32
)
)
ENGINE = SummingMergeTree()
ORDER BY (date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1107', () => {
    const query = `CREATE DATABASE IF NOT EXISTS {CLICKHOUSE_DATABASE:Identifier};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1108', () => {
    const query = `CREATE TABLE IF NOT EXISTS {CLICKHOUSE_DATABASE:Identifier}.r1 (name String) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1109', () => {
    const query = `CREATE TABLE IF NOT EXISTS {CLICKHOUSE_DATABASE:Identifier}.r2 (name String) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1110', () => {
    const query = `CREATE TABLE IF NOT EXISTS {CLICKHOUSE_DATABASE:Identifier}.source_table ( id UInt64,
value String
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1111', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS {CLICKHOUSE_DATABASE:Identifier}.test_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '{CLICKHOUSE_DATABASE:String}.dictionary_table'))
LAYOUT(FLAT())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1112', () => {
    const query = `create table test (key Int) engine=MergeTree() order by tuple() settings ratio_of_defaults_for_sparse_serialization=0.1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1113', () => {
    const query = `create table x engine MergeTree order by () as select () as a, () as b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1114', () => {
    const query = `create table x (i Nullable(Tuple())) engine MergeTree order by (); -- { serverError 43 } create table x (i LowCardinality(Tuple())) engine MergeTree order by (); -- { serverError 43 }
create table x (i Tuple(), j Array(Tuple())) engine MergeTree order by ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1115', () => {
    const query = `CREATE TABLE kv (
\`key\` UInt64,
\`value\` UInt64,
\`s\` String,
INDEX value_idx value TYPE minmax GRANULARITY 1
)
ENGINE = ReplacingMergeTree
ORDER BY key
SETTINGS index_granularity = 32, index_granularity_bytes = 1024;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1116', () => {
    const query = `CREATE TABLE e (dt DateTime, t Int32) ENGINE = MergeTree() PARTITION BY (t, toYYYYMM(dt)) ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1117', () => {
    const query = `create table x (i int, j int) engine MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1118', () => {
    const query = `create table tbl (x Tuple(a Int32, b Int32, c Int32)) engine MergeTree order by ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1119', () => {
    const query = `CREATE TABLE t_describe_options ( id UInt64 COMMENT 'index column',
arr Array(UInt64) DEFAULT [10, 20] CODEC(ZSTD),
t Tuple(a String, b UInt64) DEFAULT ('foo', 0) CODEC(ZSTD))
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1120', () => {
    const query = `create table test (a Tuple(b String, c Tuple(d Nullable(UInt64), e Array(UInt32), f Array(Tuple(g String, h Map(String, Array(Tuple(i String, j UInt64))))), k Date), l Nullable(String))) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1121', () => {
    const query = `CREATE TABLE t_parts_columns_filenames (id UInt64, v UInt64, long_v_name UInt64, long_arr_name Array(UInt64), arr_col Array(UInt64)) ENGINE = MergeTree ORDER BY id
SETTINGS
min_bytes_for_wide_part = 0,
replace_long_file_name_to_hash = 1,
max_file_name_length = 8,
ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1122', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.tablefunc01 (x int) AS postgresql('127.121.0.1:5432', 'postgres_db', 'postgres_table', 'postgres_user', '124444');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1123', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.tablefunc02 (x int) AS mysql('127.123.0.1:3306', 'mysql_db', 'mysql_table', 'mysql_user','123123');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1124', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.tablefunc03 (a int) AS sqlite('db_path', 'table_name');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1125', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.tablefunc04 (a int) AS  mongodb('127.0.0.1:27017','test', 'my_collection', 'test_user', 'password', 'a Int');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1126', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.tablefunc05 (a int) AS redis('127.0.0.1:6379', 'key', 'key UInt32');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1127', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.tablefunc06 (a int) AS s3('http://some_addr:9000/cloud-storage-01/data.tsv', 'M9O7o0SX5I4udXhWxI12', '9ijqzmVN83fzD9XDkEAAAAAAAA', 'TSV');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1128', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.tablefunc01_without_schema AS postgresql('127.121.0.1:5432', 'postgres_db', 'postgres_table', 'postgres_user', '124444'); -- { serverError POSTGRESQL_CONNECTION_FAILURE } CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.tablefunc02_without_schema AS mysql('127.123.0.1:3306', 'mysql_db', 'mysql_table', 'mysql_user','123123'); -- {serverError ALL_CONNECTION_TRIES_FAILED }
SELECT name, engine, engine_full, create_table_query, data_paths, notEmpty([metadata_path]), notEmpty([uuid])
FROM system.tables
WHERE name like '%tablefunc%' and database=currentDatabase()
ORDER BY name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1129', () => {
    const query = `CREATE TABLE attach_partition_t1 ( 	a UInt32,
	b String,
	INDEX bf b TYPE tokenbf_v1(8192, 3, 0) GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1130', () => {
    const query = `CREATE TABLE attach_partition_t2 ( 	a UInt32,
	b String,
	INDEX bf b TYPE bloom_filter GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1131', () => {
    const query = `CREATE TABLE attach_partition_t4 ( 	a UInt32,
	b String,
PROJECTION differently_named_proj
(
SELECT
b,
sum(a)
GROUP BY b
)
)
ENGINE = MergeTree
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1132', () => {
    const query = `CREATE TABLE attach_partition_t6 ( 	a UInt32,
	b String,
PROJECTION proj
(
SELECT
b,
sum(a)
GROUP BY b
)
)
ENGINE = MergeTree
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1133', () => {
    const query = `CREATE TABLE t_mutations_subcolumns (id UInt64, n String, obj Object(Nullable('json'))) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1134', () => {
    const query = `CREATE TABLE t_mutations_subcolumns (a UInt64, obj Object(Nullable('json'))) ENGINE = MergeTree ORDER BY a PARTITION BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1135', () => {
    const query = `CREATE TABLE quorum1(x UInt32) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02887/quorum', '1') ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1136', () => {
    const query = `CREATE TABLE quorum2(x UInt32) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02887/quorum', '2') ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1137', () => {
    const query = `CREATE TABLE t_missed_subcolumns (id UInt64, n String, obj Object(Nullable('json'))) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1138', () => {
    const query = `CREATE TABLE local_tbl (\`key\` UInt32, \`value\` UInt32 DEFAULT 42) ENGINE = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1139', () => {
    const query = `CREATE TABLE dist_tbl ENGINE = Distributed('test_shard_localhost', currentDatabase(), 'local_tbl', rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1140', () => {
    const query = `CREATE TABLE t (
s1 String,
s2 String
) ENGINE = MergeTree ORDER BY s1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1141', () => {
    const query = `CREATE TABLE IF NOT EXISTS posts (
\`page_id\` LowCardinality(String),
\`post_id\` String CODEC(LZ4),
\`host_id\` UInt32 CODEC(T64, LZ4),
\`path_id\` UInt32,
\`created\` DateTime CODEC(T64, LZ4),
\`as_of\` DateTime CODEC(T64, LZ4)
)
ENGINE = ReplacingMergeTree(as_of)
PARTITION BY toStartOfMonth(created)
ORDER BY (page_id, post_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1142', () => {
    const query = `CREATE TABLE IF NOT EXISTS post_metrics (
\`page_id\` LowCardinality(String),
\`post_id\` String CODEC(LZ4),
\`created\` DateTime CODEC(T64, LZ4),
\`impressions\` UInt32 CODEC(T64, LZ4),
\`clicks\` UInt32 CODEC(T64, LZ4),
\`as_of\` DateTime CODEC(T64, LZ4)
)
ENGINE = ReplacingMergeTree(as_of)
PARTITION BY toStartOfMonth(created)
ORDER BY (page_id, post_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1143', () => {
    const query = `CREATE TABLE window_function_threading Engine = MergeTree
ORDER BY (ac, nw)
AS SELECT
toUInt64(toFloat32(number % 2) % 20000000) as ac,
toFloat32(1) as wg,
toUInt16(toFloat32(number % 3) % 400) as nw
FROM numbers_mt(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1144', () => {
    const query = `CREATE TABLE t_async_insert_skip_settings (id UInt64) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/tables/t_async_insert_skip_settings', '1')
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1145', () => {
    const query = `CREATE TABLE t_reverse_order_virt_col (\`order_0\` Decimal(76, 53), \`p_time\` Date) ENGINE = MergeTree PARTITION BY toYYYYMM(p_time)
ORDER BY order_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1146', () => {
    const query = `CREATE TABLE my_table (values Array(Int32)) ENGINE = MergeTree() ORDER BY values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1147', () => {
    const query = `CREATE TABLE checksums_r1 (column1 UInt32, column2 String) Engine = ReplicatedMergeTree('/tables/{database}/checksums_table', 'r1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1148', () => {
    const query = `CREATE TABLE checksums_r2 (column1 UInt32, column2 String) Engine = ReplicatedMergeTree('/tables/{database}/checksums_table', 'r2') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1149', () => {
    const query = `CREATE TABLE checksums_r3 (column1 UInt32, column2 String) Engine = ReplicatedMergeTree('/tables/{database}/checksums_table', 'r3') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1150', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value UInt64
) ENGINE=MergeTree ORDER BY (id, value) SETTINGS index_granularity = 8192, index_granularity_bytes = '1Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1151', () => {
    const query = `CREATE TABLE all_valid (id UInt64, query String) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1152', () => {
    const query = `CREATE TABLE some_invalid (id UInt64, query String) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1153', () => {
    const query = `create table data (part Int) engine=MergeTree() order by tuple() partition by part;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1154', () => {
    const query = `CREATE TABLE table1 (number UInt64) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1155', () => {
    const query = `CREATE TABLE table2 (number UInt64) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1156', () => {
    const query = `CREATE TABLE tt (n UInt64) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1157', () => {
    const query = `CREATE TABLE max_length_alias_14053__fuzz_45 (
\`a\` Date,
\`b\` Nullable(Decimal(76, 45)),
\`c.d\` Array(Nullable(DateTime64(3))),
\`dcount\` Int8 ALIAS length(c.d)
)
ENGINE = MergeTree
PARTITION BY toMonday(a)
ORDER BY (a, b)
SETTINGS allow_nullable_key = 1, index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1158', () => {
    const query = `CREATE TABLE t (
tid UInt64,
processed_at DateTime,
created_at DateTime,
amount Int64
)
ENGINE = ReplacingMergeTree
PARTITION BY toStartOfQuarter(created_at)
PRIMARY KEY (toStartOfDay(created_at), toStartOfDay(processed_at))
ORDER BY (toStartOfDay(created_at), toStartOfDay(processed_at), tid)
SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1159', () => {
    const query = `create table t_json_merge (id UInt64, s1 String, s2 String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1160', () => {
    const query = `create table data (key Int, val1 SimpleAggregateFunction(max, Nullable(Int)), val2 SimpleAggregateFunction(min, Int)) engine=AggregatingMergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1161', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec (n UInt64 CODEC(GCD)) ENGINE = Memory; -- { serverError BAD_ARGUMENTS } CREATE TEMPORARY TABLE table_gcd_codec (str String CODEC(GCD, LZ4)) ENGINE = Memory; -- { serverError BAD_ARGUMENTS }
CREATE TEMPORARY TABLE table_lz4 (id UInt64, ui UInt256 CODEC(LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1162', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd (id UInt64, ui UInt256 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1163', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_uint8 (n UInt8 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1164', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_uint16 (n UInt16 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1165', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_uint32 (n UInt32 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1166', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_uint64 (n UInt64 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1167', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_uint128 (n UInt128 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1168', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_uint256 (n UInt256 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1169', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_int8 (n Int8 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1170', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_int16 (n Int16 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1171', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_int32 (n Int32 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1172', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_int64 (n Int64 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1173', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_int128 (n Int128 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1174', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_int256 (n Int256 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1175', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_decimal32 (n Decimal32(1) CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1176', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_decimal64 (n Decimal64(1) CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1177', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_decimal128 (n Decimal128(1) CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1178', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_decimal256 (n Decimal256(1) CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1179', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_date (n Date CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1180', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_date32 (n Date32 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1181', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_datetime (n DateTime('Asia/Istanbul') CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1182', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_datetime64 (n DateTime64(3, 'Asia/Istanbul') CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1183', () => {
    const query = `CREATE TEMPORARY TABLE table_gcd_codec_only_zeros (n UInt8 CODEC(GCD, LZ4)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1184', () => {
    const query = `CREATE TABLE table_gcd_codec_one_hundred_zeros (a Nullable(Int64) CODEC (GCD,LZ4)) ENGINE=MergeTree ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1185', () => {
    const query = `CREATE TABLE table_gcd_codec_one_hundred_ones (a Nullable(Int64) CODEC (GCD,LZ4)) ENGINE=MergeTree Order by ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1186', () => {
    const query = `CREATE TABLE tab (
id UInt64,
long_string String SETTINGS (min_compress_block_size = 163840, max_compress_block_size = 163840),
v1 String,
v2 UInt64,
v3 Float32,
v4 Float64
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/tab/2870', 'r1')
ORDER BY id
SETTINGS min_bytes_for_wide_part = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1187', () => {
    const query = `CREATE TABLE tab (
id UInt64,
tup Tuple(UInt64, UInt64) SETTINGS (min_compress_block_size = 81920, max_compress_block_size = 163840),
json Object('json') SETTINGS (min_compress_block_size = 81920, max_compress_block_size = 163840),
)
ENGINE = MergeTree
ORDER BY id
SETTINGS min_bytes_for_wide_part = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1188', () => {
    const query = `CREATE TABLE test_move_partition_throttling (key UInt64 CODEC(NONE)) ENGINE = MergeTree ORDER BY tuple() SETTINGS storage_policy='local_remote';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1189', () => {
    const query = `CREATE TABLE t1(k UInt32, v UInt32) ENGINE ReplicatedMergeTree('/parallel_replicas/{database}/test_tbl', 'r1') ORDER BY k settings index_granularity=10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1190', () => {
    const query = `CREATE TABLE t2(k UInt32, v UInt32) ENGINE ReplicatedMergeTree('/parallel_replicas/{database}/test_tbl', 'r2') ORDER BY k settings index_granularity=10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1191', () => {
    const query = `CREATE TABLE t3(k UInt32, v UInt32) ENGINE ReplicatedMergeTree('/parallel_replicas/{database}/test_tbl', 'r3') ORDER BY k settings index_granularity=10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1192', () => {
    const query = `CREATE TABLE t_collisions (
\`very_very_long_column_name_that_will_be_replaced_with_hash\` Int32,
\`e798545eefc8b7a1c2c81ff00c064ad8\` Int32
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS replace_long_file_name_to_hash = 1, max_file_name_length = 42; -- { serverError BAD_ARGUMENTS }
DROP TABLE IF EXISTS t_collisions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1193', () => {
    const query = `CREATE TABLE t_collisions (
\`col1\` Int32,
\`e798545eefc8b7a1c2c81ff00c064ad8\` Int32
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS replace_long_file_name_to_hash = 1, max_file_name_length = 42;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1194', () => {
    const query = `CREATE TABLE t_collisions (
\`very_very_long_column_name_that_will_be_replaced_with_hash\` Int32,
\`e798545eefc8b7a1c2c81ff00c064ad8\` Int32
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS replace_long_file_name_to_hash = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1195', () => {
    const query = `CREATE TABLE t_collisions (
\`id\` Int,
\`col\` Array(String),
\`col.s\` Array(LowCardinality(String)),
\`col.u\` Array(LowCardinality(String))
)
ENGINE = MergeTree
ORDER BY id; -- { serverError BAD_ARGUMENTS }
DROP TABLE IF EXISTS t_collisions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1196', () => {
    const query = `CREATE TABLE t_collisions (
\`id\` Int,
\`col\` String,
\`col.s\` Array(LowCardinality(String)),
\`col.u\` Array(LowCardinality(String))
)
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1197', () => {
    const query = `create table test_table ( \`date\` Date, \`__sign\` Int8, \`from\` Float64, \`to\` Float64 ) ENGINE = CollapsingMergeTree(__sign) PARTITION BY toYYYYMM(date) ORDER BY (date) SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1198', () => {
    const query = `create VIEW test_view AS WITH cte AS (SELECT date, __sign, "from", "to" FROM test_table FINAL) SELECT date, __sign, "from", "to" FROM cte;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1199', () => {
    const query = `CREATE TABLE test_rewrite_uniq_to_count (
\`a\` UInt8,
\`b\` UInt8,
\`c\` UInt8
) ENGINE = MergeTree ORDER BY \`a\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1200', () => {
    const query = `CREATE TABLE t (
\`d\` Nullable(Date),
\`f1\` Nullable(String),
\`f2\` Nullable(String),
\`c\` Nullable(Int64)
)
ENGINE = ReplacingMergeTree
ORDER BY (f1, f2, d)
SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1201', () => {
    const query = `CREATE TABLE t (
\`d\` Nullable(Date),
\`f1\` Nullable(String),
\`f2\` Nullable(String),
\`c\` Nullable(Int64)
)
ENGINE = SummingMergeTree
ORDER BY (f1, f2, d)
SETTINGS allow_nullable_key = 1, index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1202', () => {
    const query = `CREATE TABLE t (o Nullable(String), p Nullable(String)) ENGINE = ReplacingMergeTree ORDER BY (p, o) SETTINGS allow_nullable_key = 1, index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1203', () => {
    const query = `CREATE TABLE tnul (lc Nullable(String)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1204', () => {
    const query = `CREATE TABLE tlc (lc LowCardinality(Nullable(String))) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1205', () => {
    const query = `CREATE USER test_user_02867 IDENTIFIED WITH ssh_key BY KEY 'invalid_key' TYPE 'ssh-rsa'; -- { serverError LIBSSH_ERROR } CREATE USER test_user_02867 IDENTIFIED WITH ssh_key BY KEY 'invalid_key' TYPE 'ssh-rsa', KEY 'invalid_key' TYPE 'ssh-rsa'; -- { serverError LIBSSH_ERROR }
CREATE USER test_user_02867 IDENTIFIED WITH ssh_key
BY KEY 'AAAAB3NzaC1yc2EAAAADAQABAAABgQCVTUso7/LQcBljfsHwyuL6fWfIvS3BaVpYB8lwf/ZylSOltBy6YlABtTU3mIb197d2DW99RcLKk174f5Zj5rUukXbV0fnufWvwd37fbb1eKM8zxBYvXs53EI5QBPZgKACIzMpYYZeJnAP0oZhUfWWtKXpy/SQ5CHiEIGD9RNYDL+uXZejMwC5r/+f2AmrATBo+Y+WJFZIvhj4uznFYvyvNTUz/YDvZCk+vwwIgiv4BpFCaZm2TeETTj6SvK567bZznLP5HXrkVbB5lhxjAkahc2w/Yjm//Fwto3xsMoJwROxJEU8L1kZ40QWPqjo7Tmr6C/hL2cKDNgWOEqrjLKQmh576s1+PfxwXpVPjLK4PHVSvuJLV88sn0iPdspLlKlDCdc7T9MqIrjJfxuhqnaoFQ7U+oBte8vkm1wGu76+WEC3iNWVAiIVZxLx9rUEsDqj3OovqfLiRsTmNLeY94p2asZjkx7rU48ZwuYN5XGafYsArPscj9Ve6RoRrof+5Q7cc='
TYPE 'invalid_algorithm'; -- { serverError LIBSSH_ERROR }
CREATE USER test_user_02867 IDENTIFIED WITH ssh_key
BY KEY 'AAAAB3NzaC1yc2EAAAADAQABAAABgQCVTUso7/LQcBljfsHwyuL6fWfIvS3BaVpYB8lwf/ZylSOltBy6YlABtTU3mIb197d2DW99RcLKk174f5Zj5rUukXbV0fnufWvwd37fbb1eKM8zxBYvXs53EI5QBPZgKACIzMpYYZeJnAP0oZhUfWWtKXpy/SQ5CHiEIGD9RNYDL+uXZejMwC5r/+f2AmrATBo+Y+WJFZIvhj4uznFYvyvNTUz/YDvZCk+vwwIgiv4BpFCaZm2TeETTj6SvK567bZznLP5HXrkVbB5lhxjAkahc2w/Yjm//Fwto3xsMoJwROxJEU8L1kZ40QWPqjo7Tmr6C/hL2cKDNgWOEqrjLKQmh576s1+PfxwXpVPjLK4PHVSvuJLV88sn0iPdspLlKlDCdc7T9MqIrjJfxuhqnaoFQ7U+oBte8vkm1wGu76+WEC3iNWVAiIVZxLx9rUEsDqj3OovqfLiRsTmNLeY94p2asZjkx7rU48ZwuYN5XGafYsArPscj9Ve6RoRrof+5Q7cc='
TYPE 'ssh-rsa';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1206', () => {
    const query = `CREATE TABLE test_skip_idx ( id UInt32,
INDEX name_idx_g2 id TYPE minmax GRANULARITY 2,
INDEX name_idx_g1 id TYPE minmax GRANULARITY 1)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 1, index_granularity_bytes = 0, min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1207', () => {
    const query = `CREATE TABLE test (
ip IPv4 Codec(ZSTD(6)),
) ENGINE MergeTree() order by ip;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1208', () => {
    const query = `CREATE TABLE tab (
a Float64 STATISTICS(tdigest),
b Int64 STATISTICS(tdigest)
) Engine = MergeTree() ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1209', () => {
    const query = `CREATE TABLE tab (
u64                 UInt64,
u64_tdigest         UInt64 STATISTICS(tdigest),
u64_minmax          UInt64 STATISTICS(minmax),
u64_countmin       UInt64 STATISTICS(countmin),
u64_uniq            UInt64 STATISTICS(uniq),
f64                 Float64,
f64_tdigest         Float64 STATISTICS(tdigest),
f64_minmax          Float64 STATISTICS(minmax),
f64_countmin       Float64 STATISTICS(countmin),
f64_uniq            Float64 STATISTICS(uniq),
dt                  DateTime,
dt_tdigest          DateTime STATISTICS(tdigest),
dt_minmax           DateTime STATISTICS(minmax),
dt_countmin        DateTime STATISTICS(countmin),
dt_uniq             DateTime STATISTICS(uniq),
b                   Bool,
b_tdigest           Bool STATISTICS(tdigest),
b_minmax            Bool STATISTICS(minmax),
b_countmin         Bool STATISTICS(countmin),
b_uniq              Bool STATISTICS(uniq),
s                   String,
s_countmin         String STATISTICS(countmin),
s_uniq              String STATISTICS(uniq)
) Engine = MergeTree() ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1210', () => {
    const query = `CREATE TABLE tab (
a Int64 STATISTICS(tdigest),
b Int16 STATISTICS(tdigest),
) ENGINE = MergeTree() ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0, enable_vertical_merge_algorithm = 0; -- TODO: there is a bug in vertical merge with statistics.
INSERT INTO tab SELECT number, -number FROM system.numbers LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1211', () => {
    const query = `CREATE TABLE tab (col Float64 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError INCORRECT_QUERY } SET allow_experimental_statistics = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1212', () => {
    const query = `CREATE TABLE tab (col Float64 STATISTICS(no_statistics_type)) Engine = MergeTree() ORDER BY tuple(); -- { serverError INCORRECT_QUERY } CREATE TABLE tab (col Float64 STATISTICS(tdigest, tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError INCORRECT_QUERY }
SET allow_suspicious_low_cardinality_types = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1213', () => {
    const query = `CREATE TABLE tab (col UInt8 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1214', () => {
    const query = `CREATE TABLE tab (col UInt256 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1215', () => {
    const query = `CREATE TABLE tab (col Float32 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1216', () => {
    const query = `CREATE TABLE tab (col Decimal32(3) STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1217', () => {
    const query = `CREATE TABLE tab (col Date STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1218', () => {
    const query = `CREATE TABLE tab (col Date32 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1219', () => {
    const query = `CREATE TABLE tab (col DateTime STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1220', () => {
    const query = `CREATE TABLE tab (col DateTime64 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1221', () => {
    const query = `CREATE TABLE tab (col Enum('hello', 'world') STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1222', () => {
    const query = `CREATE TABLE tab (col IPv4 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1223', () => {
    const query = `CREATE TABLE tab (col Nullable(UInt8) STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1224', () => {
    const query = `CREATE TABLE tab (col LowCardinality(UInt8) STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1225', () => {
    const query = `CREATE TABLE tab (col LowCardinality(Nullable(UInt8)) STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1226', () => {
    const query = `CREATE TABLE tab (col String STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS } CREATE TABLE tab (col FixedString(1) STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col Array(Float64) STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col Tuple(Float64, Float64) STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col UUID STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col IPv6 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col UInt8 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1227', () => {
    const query = `CREATE TABLE tab (col UInt256 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1228', () => {
    const query = `CREATE TABLE tab (col Float32 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1229', () => {
    const query = `CREATE TABLE tab (col Decimal32(3) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1230', () => {
    const query = `CREATE TABLE tab (col Date STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1231', () => {
    const query = `CREATE TABLE tab (col Date32 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1232', () => {
    const query = `CREATE TABLE tab (col DateTime STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1233', () => {
    const query = `CREATE TABLE tab (col DateTime64 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1234', () => {
    const query = `CREATE TABLE tab (col Enum('hello', 'world') STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1235', () => {
    const query = `CREATE TABLE tab (col IPv4 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1236', () => {
    const query = `CREATE TABLE tab (col Nullable(UInt8) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1237', () => {
    const query = `CREATE TABLE tab (col LowCardinality(UInt8) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1238', () => {
    const query = `CREATE TABLE tab (col LowCardinality(Nullable(UInt8)) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1239', () => {
    const query = `CREATE TABLE tab (col String STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1240', () => {
    const query = `CREATE TABLE tab (col FixedString(1) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1241', () => {
    const query = `CREATE TABLE tab (col Array(Float64) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS } CREATE TABLE tab (col Tuple(Float64, Float64) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col UUID STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col IPv6 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col UInt8 STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1242', () => {
    const query = `CREATE TABLE tab (col UInt256 STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1243', () => {
    const query = `CREATE TABLE tab (col Float32 STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1244', () => {
    const query = `CREATE TABLE tab (col Decimal32(3) STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1245', () => {
    const query = `CREATE TABLE tab (col Date STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1246', () => {
    const query = `CREATE TABLE tab (col Date32 STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1247', () => {
    const query = `CREATE TABLE tab (col DateTime STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1248', () => {
    const query = `CREATE TABLE tab (col DateTime64 STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1249', () => {
    const query = `CREATE TABLE tab (col Enum('hello', 'world') STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1250', () => {
    const query = `CREATE TABLE tab (col IPv4 STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1251', () => {
    const query = `CREATE TABLE tab (col Nullable(UInt8) STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1252', () => {
    const query = `CREATE TABLE tab (col LowCardinality(UInt8) STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1253', () => {
    const query = `CREATE TABLE tab (col LowCardinality(Nullable(UInt8)) STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1254', () => {
    const query = `CREATE TABLE tab (col String STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1255', () => {
    const query = `CREATE TABLE tab (col FixedString(1) STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1256', () => {
    const query = `CREATE TABLE tab (col Array(Float64) STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS } CREATE TABLE tab (col Tuple(Float64, Float64) STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col UUID STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col IPv6 STATISTICS(countmin)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col UInt8 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1257', () => {
    const query = `CREATE TABLE tab (col UInt256 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1258', () => {
    const query = `CREATE TABLE tab (col Float32 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1259', () => {
    const query = `CREATE TABLE tab (col Decimal32(3) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1260', () => {
    const query = `CREATE TABLE tab (col Date STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1261', () => {
    const query = `CREATE TABLE tab (col Date32 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1262', () => {
    const query = `CREATE TABLE tab (col DateTime STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1263', () => {
    const query = `CREATE TABLE tab (col DateTime64 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1264', () => {
    const query = `CREATE TABLE tab (col Enum('hello', 'world') STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1265', () => {
    const query = `CREATE TABLE tab (col IPv4 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1266', () => {
    const query = `CREATE TABLE tab (col Nullable(UInt8) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1267', () => {
    const query = `CREATE TABLE tab (col LowCardinality(UInt8) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1268', () => {
    const query = `CREATE TABLE tab (col LowCardinality(Nullable(UInt8)) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1269', () => {
    const query = `CREATE TABLE tab (col String STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS } CREATE TABLE tab (col FixedString(1) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col Array(Float64) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col Tuple(Float64, Float64) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col UUID STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab (col IPv6 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
CREATE TABLE tab
(
f64           Float64,
f64_tdigest   Float64 STATISTICS(tdigest),
f32           Float32,
s             String,
a             Array(Float64)
)
Engine = MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1270', () => {
    const query = `CREATE TABLE tab (
a LowCardinality(Int64) STATISTICS(countmin, minmax, tdigest, uniq),
b LowCardinality(Nullable(String)) STATISTICS(countmin, uniq),
c LowCardinality(Nullable(Int64)) STATISTICS(countmin, minmax, tdigest, uniq),
d DateTime STATISTICS(countmin, minmax, tdigest, uniq),
pk String,
) Engine = MergeTree() ORDER BY pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1271', () => {
    const query = `CREATE TABLE bug_67742 (a Float64 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1272', () => {
    const query = `CREATE TABLE bug_67742 (a Int32 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1273', () => {
    const query = `CREATE TABLE bug_67742 (a Int16 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1274', () => {
    const query = `CREATE TABLE random_mt (
key UInt64,
value String
)
ENGINE MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1275', () => {
    const query = `CREATE TABLE Dates (date DateTime('UTC')) ENGINE = MergeTree() ORDER BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1276', () => {
    const query = `create table tab (x UInt32, y UInt32) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1277', () => {
    const query = `CREATE TABLE tab (i UInt32, a UInt32) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1278', () => {
    const query = `create table parent (id int, primary key(id)) engine MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1279', () => {
    const query = `create table child  (id int, pid int, primary key(id), foreign key(pid)) engine MergeTree; -- { clientError SYNTAX_ERROR } create table child  (id int, pid int, primary key(id), foreign key(pid) references) engine MergeTree; -- { clientError SYNTAX_ERROR }
create table child  (id int, pid int, primary key(id), foreign key(pid) references parent(pid)) engine MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1280', () => {
    const query = `create table child2 (id int, pid int, primary key(id),  foreign key(pid) references parent(pid) on delete) engine MergeTree; -- { clientError SYNTAX_ERROR }
create table child2 (id int, pid int, primary key(id), 
foreign key(pid) references parent(pid) on delete cascade) engine MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1281', () => {
    const query = `create table child3 (id int, pid int, primary key(id),  foreign key(pid) references parent(pid) on delete cascade on update restrict) engine MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1282', () => {
    const query = `CREATE TABLE 02863_delayed_source(a Int64) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/02863_delayed_source/{replica}', 'r1') ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1283', () => {
    const query = `CREATE TABLE t_uuid (x UUID) ENGINE=MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1284', () => {
    const query = `CREATE TABLE t_sparse_distinct (id UInt32, v String) ENGINE = MergeTree
ORDER BY id
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1285', () => {
    const query = `CREATE TABLE test (uid String, version UInt32, is_deleted UInt8) ENGINE = ReplacingMergeTree(version, is_deleted) Order by (uid) SETTINGS vertical_merge_algorithm_min_rows_to_activate = 1, vertical_merge_algorithm_min_columns_to_activate = 0,
min_rows_for_wide_part = 1,
min_bytes_for_wide_part = 1,
allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1286', () => {
    const query = `CREATE TABLE 02861_interpolate (date Date, id String, f Int16) ENGINE=MergeTree() ORDER BY (date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1287', () => {
    const query = `CREATE TABLE set_index__fuzz_41 (\`a\` Date, \`b\` Nullable(DateTime64(3)), INDEX b_set b TYPE set(0) GRANULARITY 1) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1288', () => {
    const query = `CREATE TABLE t1 (key UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1289', () => {
    const query = `create table data (key Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1290', () => {
    const query = `create table dist (key Int) engine=Distributed(test_shard_localhost, currentDatabase(), data);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1291', () => {
    const query = `create table dist (key Int) engine=Distributed(test_shard_localhost, currentDatabase(), data) settings flush_on_detach=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1292', () => {
    const query = `CREATE TABLE  02845_prewhere  ( e String, c String, q String ) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1293', () => {
    const query = `CREATE TABLE t1 ( id UInt32, attr UInt32 ) ENGINE = MergeTree ORDER BY id SETTINGS ratio_of_defaults_for_sparse_serialization = 0.1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1294', () => {
    const query = `CREATE TABLE t2 ( id UInt32, attr UInt32 ) ENGINE = MergeTree ORDER BY id SETTINGS ratio_of_defaults_for_sparse_serialization = 0.1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1295', () => {
    const query = `create table test (x UInt64) engine=File(JSON);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1296', () => {
    const query = `create table t02845 (a Array(UInt8), s Int16, d UInt8) engine = MergeTree order by d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1297', () => {
    const query = `CREATE TABLE t (key UInt64, value UInt64, INDEX value_idx value TYPE bloom_filter GRANULARITY 1) ENGINE=MergeTree() ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1298', () => {
    const query = `create table data_01072 (key Int) Engine=MergeTree() ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1299', () => {
    const query = `create table dist_01072 (key Int) Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01072, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1300', () => {
    const query = `CREATE TABLE 02843_source (
id UInt64,
value String
)
ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1301', () => {
    const query = `CREATE DICTIONARY 02843_dict (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02843_source'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1302', () => {
    const query = `CREATE TABLE 02843_join (id UInt8, value String) ENGINE Join(ANY, LEFT, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1303', () => {
    const query = `create table data ( key Int,
\`legacy_features_Map.id\` Array(UInt8),
\`legacy_features_Map.count\` Array(UInt32),
) engine=MergeTree()
order by key
settings
min_bytes_for_wide_part=0,
min_rows_for_wide_part=0,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1304', () => {
    const query = `CREATE DATABASE test_truncate_database;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1305', () => {
    const query = `CREATE TABLE source_table_memory (x UInt16) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1306', () => {
    const query = `CREATE TABLE source_table_log (x UInt16) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1307', () => {
    const query = `CREATE TABLE source_table_tiny_log (x UInt16) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1308', () => {
    const query = `CREATE TABLE source_table_stripe_log (x UInt16) ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1309', () => {
    const query = `CREATE TABLE source_table_merge_tree (x UInt16) ENGINE = MergeTree ORDER BY x PARTITION BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1310', () => {
    const query = `CREATE TABLE source_table_dictionary (
id UInt64,
value String
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1311', () => {
    const query = `CREATE VIEW dest_view_memory (x UInt64) AS SELECT * FROM source_table_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1312', () => {
    const query = `CREATE VIEW dest_view_log (x UInt64) AS SELECT * FROM source_table_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1313', () => {
    const query = `CREATE VIEW dest_view_tiny_log (x UInt64) AS SELECT * FROM source_table_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1314', () => {
    const query = `CREATE VIEW dest_view_stripe_log (x UInt64) AS SELECT * FROM source_table_stripe_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1315', () => {
    const query = `CREATE VIEW dest_view_merge_tree (x UInt64) AS SELECT * FROM source_table_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1316', () => {
    const query = `CREATE DICTIONARY dest_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB 'test_truncate_database' TABLE 'source_table_dictionary'))
LAYOUT(FLAT())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1317', () => {
    const query = `CREATE TABLE new_table (x UInt16) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1318', () => {
    const query = `CREATE TABLE t_mutations_nondeterministic (id UInt64, v UInt64) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/02842_mutations_replace', '1')
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1319', () => {
    const query = `CREATE TABLE t_mutations_nondeterministic (id UInt64, v Array(UInt64)) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/02842_mutations_replace', '1')
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1320', () => {
    const query = `CREATE TABLE t_mutations_nondeterministic (id UInt64, v AggregateFunction(uniqExact, UInt64)) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/02842_mutations_replace', '1')
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1321', () => {
    const query = `CREATE TABLE t_mutations_nondeterministic (id UInt64, v DateTime) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/02842_mutations_replace', '1')
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1322', () => {
    const query = `CREATE TABLE t_mutations_nondeterministic (id UInt64, v UInt64) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/02842_mutations_replace', '1') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1323', () => {
    const query = `CREATE TABLE t_mutations_nondeterministic (id UInt64, d DateTime) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/02842_mutations_replace', '1')
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1324', () => {
    const query = `CREATE TABLE t_02848_mt1 (k UInt32, v String) ENGINE = MergeTree ORDER BY k SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1325', () => {
    const query = `CREATE TABLE t_02848_mt2 (a UInt32, b String, c Int32, d String) ENGINE = MergeTree ORDER BY (a,b,c) SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1326', () => {
    const query = `CREATE TABLE largestTriangleThreeBucketsTestFloat64Float64 (
x Float64,
y Float64
) ENGINE = MergeTree order by (y,x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1327', () => {
    const query = `CREATE TABLE largestTriangleThreeBucketsTestDecimal64Decimal64 (
x Decimal64(2),
y Decimal64(2)
) ENGINE = MergeTree order by (y,x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1328', () => {
    const query = `create table largestTriangleThreeBucketsTestDateTime64Float64 (x DateTime64(3), y Float64) engine = MergeTree order by (y,x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1329', () => {
    const query = `CREATE TABLE largestTriangleTreeBucketsBucketSizeTest (
x UInt32,
y UInt32
) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1330', () => {
    const query = `CREATE TABLE test (a Int32) ENGINE = MergeTree()
ORDER BY tuple()
SETTINGS disk = disk(type = cache,
max_size = '1Mi',
path = '/kek',
disk = 'local_disk'); -- {serverError BAD_ARGUMENTS}
CREATE TABLE test (a Int32)
ENGINE = MergeTree()
ORDER BY tuple()
SETTINGS disk = disk(type = cache,
max_size = '1Mi',
path = '/var/lib/clickhouse/filesystem_caches/../kek',
disk = 'local_disk'); -- {serverError BAD_ARGUMENTS}
CREATE TABLE test (a Int32)
ENGINE = MergeTree()
ORDER BY tuple()
SETTINGS disk = disk(type = cache,
max_size = '1Mi',
path = '../kek',
disk = 'local_disk'); -- {serverError BAD_ARGUMENTS}
CREATE TABLE test_1 (a Int32)
ENGINE = MergeTree()
ORDER BY tuple()
SETTINGS disk = disk(type = cache,
max_size = '1Mi',
path = '/var/lib/clickhouse/filesystem_caches/kek',
disk = 'local_disk');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1331', () => {
    const query = `CREATE TABLE test_2 (a Int32) ENGINE = MergeTree()
ORDER BY tuple()
SETTINGS disk = disk(type = cache,
max_size = '1Mi',
path = 'kek2',
disk = 'local_disk');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1332', () => {
    const query = `create table tab2 (id String, version Int64, l String, accountCode String, z Int32) engine = ReplacingMergeTree(z) PRIMARY KEY (accountCode, id) ORDER BY (accountCode, id, version, l);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1333', () => {
    const query = `CREATE TABLE t1 ( \`id\` UInt64
)
ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1334', () => {
    const query = `CREATE TABLE t2 ( \`conversation\` UInt64,
CONSTRAINT constraint_conversation CHECK conversation IN (SELECT id FROM t1)
)
ENGINE = MergeTree ORDER BY conversation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1335', () => {
    const query = `CREATE TABLE t1 (s String) ENGINE = MergeTree ORDER BY s SETTINGS ratio_of_defaults_for_sparse_serialization = 0.5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1336', () => {
    const query = `CREATE TABLE t2 (s String) ENGINE = MergeTree ORDER BY s SETTINGS ratio_of_defaults_for_sparse_serialization = 0.5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1337', () => {
    const query = `CREATE TABLE test (a Array(UInt64)) engine=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1338', () => {
    const query = `CREATE TABLE IF NOT EXISTS test (id Int32, data Tuple(Int32, Int32)) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1339', () => {
    const query = `CREATE TABLE IF NOT EXISTS test (id Int32, data Decimal32(2)) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1340', () => {
    const query = `CREATE TABLE IF NOT EXISTS test (id Int32, data FixedString(3)) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1341', () => {
    const query = `CREATE TABLE test (id Decimal(76, 53), str String) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1342', () => {
    const query = `CREATE TABLE test (id UInt64, agg AggregateFunction(groupArraySorted(2), UInt64)) engine=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1343', () => {
    const query = `CREATE TABLE t1__fuzz_17 (\`a\` LowCardinality(UInt8), \`b\` Nullable(UInt256)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1344', () => {
    const query = `CREATE TABLE t2__fuzz_0 (\`c\` UInt32, \`d\` String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1345', () => {
    const query = `CREATE TABLE test (id UInt64, date Date) ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1346', () => {
    const query = `CREATE TABLE test2 (id UInt64, date Date) ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1347', () => {
    const query = `CREATE TABLE IF NOT EXISTS test2_d as test2 ENGINE = Distributed(test_cluster_two_shard_three_replicas_localhost, currentDatabase(), test2, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1348', () => {
    const query = `CREATE TABLE IF NOT EXISTS cool_table (
id UInt64,
n Nested(n UInt64, lc1 LowCardinality(String))
)
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1349', () => {
    const query = `CREATE TABLE IF NOT EXISTS cool_table (
id UInt64,
n Nested(n UInt64, lc1 Array(LowCardinality(String)))
)
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1350', () => {
    const query = `CREATE TABLE IF NOT EXISTS cool_table (
id UInt64,
n Nested(n UInt64, lc1 Map(LowCardinality(String), UInt64))
)
ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1351', () => {
    const query = `CREATE TABLE test_table_1 (
id UInt64,
value_1 String,
value_2 UInt64
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1352', () => {
    const query = `CREATE TABLE test_table_2 (
id UInt64,
value_1 String,
value_2 UInt64
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1353', () => {
    const query = `CREATE TABLE numbers500k (\`number\` UInt32) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1354', () => {
    const query = `CREATE TABLE t_sparse_sort_limit (date Date, i UInt64, v Int16) ENGINE = MergeTree ORDER BY (date, i)
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1355', () => {
    const query = `CREATE TABLE nulls_first_sort_test (a Nullable(Int32), b Nullable(Int32), c Nullable(Int32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1356', () => {
    const query = `CREATE TABLE 02834_t (id UInt64, arr Array(UInt64)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1357', () => {
    const query = `CREATE TABLE alter_02834 (a UInt64) ENGINE=MergeTree() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1358', () => {
    const query = `CREATE TABLE t_02833 (tup Tuple(a UInt64, b UInt64)) ENGINE=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1359', () => {
    const query = `CREATE TABLE series(i UInt32, x Float64, y Float64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1360', () => {
    const query = `create table t_tuple_sparse (a UInt64, b UInt64) ENGINE = MergeTree ORDER BY tuple()
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1361', () => {
    const query = `create table t_multi_prewhere (a UInt64, b UInt64, c UInt8) engine = MergeTree order by tuple()
settings min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1362', () => {
    const query = `create row policy policy_02834 on t_multi_prewhere using a > 2000 as permissive to all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1363', () => {
    const query = `create table test_array_joins (
id UInt64 default rowNumberInAllBlocks() + 1,
arr_1 Array(String),
arr_2 Array(String),
arr_3 Array(String),
arr_4 Array(String)
) engine = MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1364', () => {
    const query = `create view v4test_array_joins as SELECT * from test_array_joins where id != 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1365', () => {
    const query = `create table t_delete_skip_index (x UInt32, y String, index i y type minmax granularity 3) engine = MergeTree order by tuple() SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1366', () => {
    const query = `CREATE TABLE t1 (
c1 DateTime DEFAULT now() NOT NULL,
c2 DateTime DEFAULT now() NOT NULL,
c3 DateTime DEFAULT now() NOT NULL,
PRIMARY KEY(c1, c2, c3)
) ENGINE = MergeTree()
ORDER BY (c1, c2, c3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1367', () => {
    const query = `CREATE TABLE t1 (n int, dt DateTime) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1368', () => {
    const query = `create table t1 as remote('localhost', 'system.one');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1369', () => {
    const query = `create view test_param_view as with {param_test_val:UInt8} as param_test_val
select param_test_val,
arrayCount((a)->(a < param_test_val), t.arr) as cnt1
from (select [1,2,3,4,5] as arr) t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1370', () => {
    const query = `create view test_param_view2 as with {param_test_val:UInt8} as param_test_val
select param_test_val,
arrayCount((a)->(a < param_test_val), t.arr) as cnt1,
arrayCount((a)->(a < param_test_val+1), t.arr) as cnt2
from (select [1,2,3,4,5] as arr) t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1371', () => {
    const query = `create table kek (uuid FixedString(16), id int, ns String, dt DateTime64(6), projection null_pk (select * order by ns, 1, 4)) engine=MergeTree order by (id, dt, uuid); -- {serverError ILLEGAL_COLUMN } `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1372', () => {
    const query = `CREATE TABLE discounts (
advertiser_id UInt64,
discount_start_date Date,
discount_end_date Nullable(Date),
amount Float64
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1373', () => {
    const query = `CREATE DICTIONARY discounts_dict (
advertiser_id UInt64,
discount_start_date Date,
discount_end_date Nullable(Date),
amount Float64
)
PRIMARY KEY advertiser_id
SOURCE(CLICKHOUSE(TABLE discounts))
LIFETIME(MIN 600 MAX 900)
LAYOUT(RANGE_HASHED(RANGE_LOOKUP_STRATEGY 'max'))
RANGE(MIN discount_start_date MAX discount_end_date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1374', () => {
    const query = `CREATE TABLE ids (id UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1375', () => {
    const query = `CREATE TABLE rdb ( \`key\` UInt32, \`value\` String ) ENGINE = EmbeddedRocksDB PRIMARY KEY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1376', () => {
    const query = `CREATE TABLE t2 ( \`k\` UInt16 ) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1377', () => {
    const query = `CREATE TABLE src (id UInt64, s String) ENGINE = MergeTree ORDER BY id AS SELECT number, toString(number) FROM numbers(1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1378', () => {
    const query = `CREATE DICTIONARY dict( id UInt64,
s  String
) PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'src' DB currentDatabase()))
LIFETIME (MIN 0 MAX 0)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1379', () => {
    const query = `CREATE TABLE t0 (vkey UInt32, c0 Float32, primary key(c0)) engine = AggregatingMergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1380', () => {
    const query = `create table 02815_first_line_vector (n Int32, text String) engine = MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1381', () => {
    const query = `CREATE TABLE null_table (number UInt64) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1382', () => {
    const query = `CREATE VIEW number_view as SELECT * FROM numbers(10) as tb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1383', () => {
    const query = `CREATE MATERIALIZED VIEW null_mv Engine = Log AS SELECT * FROM null_table LEFT JOIN number_view as tb USING number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1384', () => {
    const query = `CREATE TABLE null_table_buffer (number UInt64) ENGINE = Buffer(currentDatabase(), null_table, 1, 1, 1, 100, 200, 10000, 20000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1385', () => {
    const query = `CREATE UNIQUE INDEX idx_tab2_0 ON tab2 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1386', () => {
    const query = `CREATE TABLE t (
\`account_id\` UInt64,
\`_is_deleted\` UInt8,
\`_version\` UInt64
)
ENGINE = ReplacingMergeTree(_version, _is_deleted)
ORDER BY (account_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1387', () => {
    const query = `CREATE TABLE tb1 (n UInt32, a Array(Int32)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1388', () => {
    const query = `CREATE TABLE tb1 (n UInt32, a Array(Float64)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1389', () => {
    const query = `CREATE TABLE tb2 (\`period\` UInt32, \`ts\` Array(Float64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1390', () => {
    const query = `CREATE INDEX idx_tab1_0 on tab1 (col0); -- { serverError INCORRECT_QUERY } SET allow_create_index_without_type=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1391', () => {
    const query = `CREATE INDEX idx_tab1_0 on tab1 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1392', () => {
    const query = `CREATE INDEX idx_tab1_1 on tab1 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1393', () => {
    const query = `CREATE INDEX idx_tab1_3 on tab1 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1394', () => {
    const query = `CREATE INDEX idx_tab1_4 on tab1 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1395', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1396', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1397', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0 DESC,col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1398', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1399', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1400', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1401', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1402', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1403', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1404', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0,col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1405', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1406', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1407', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1408', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0,col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1409', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0,col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1410', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1411', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1412', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col0,col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1413', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1414', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1415', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1416', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1 DESC,col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1417', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1 DESC,col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1418', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1419', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1 DESC,col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1420', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1421', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1422', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1423', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1424', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1425', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1,col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1426', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1,col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1427', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1428', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1429', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1430', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1,col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1431', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1,col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1432', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1433', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1434', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1435', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1436', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1437', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1438', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1439', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1440', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1441', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1442', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1443', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1444', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1445', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1446', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1447', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1448', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3,col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1449', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3,col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1450', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1451', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1452', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3,col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1453', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1454', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1455', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1456', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1457', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1458', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1459', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4 DESC,col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1460', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4 DESC,col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1461', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1462', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4 DESC,col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1463', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1464', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1465', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4 DESC,col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1466', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1467', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1468', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1469', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4,col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1470', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1471', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1472', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4,col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1473', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4,col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1474', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1475', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1476', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4,col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1477', () => {
    const query = `CREATE INDEX idx_tab2_0 ON tab2 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1478', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1479', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1480', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1481', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0 DESC,col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1482', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1483', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0 DESC,col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1484', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1485', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1486', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1487', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1488', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1489', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0,col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1490', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1491', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0,col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1492', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0,col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1493', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1494', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1495', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1496', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1497', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1498', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1 DESC,col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1499', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1500', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1501', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1502', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1503', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1 DESC,col4 DESC,col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1504', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1505', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1506', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1507', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1508', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1,col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1509', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1510', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1,col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1511', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1512', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col1,col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1513', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1514', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1515', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3 DESC,col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1516', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3 DESC,col0 DESC,col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1517', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1518', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3 DESC,col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1519', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1520', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1521', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1522', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1523', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1524', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1525', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1526', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1527', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1528', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3,col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1529', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1530', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1531', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1532', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1533', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1534', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4 DESC,col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1535', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1536', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1537', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1538', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1539', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1540', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1541', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1542', () => {
    const query = `CREATE INDEX idx_tab2_1 ON tab2 (col4,col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1543', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1544', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1545', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1546', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1547', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0 DESC,col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1548', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1549', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1550', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1551', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0,col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1552', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1553', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1554', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1555', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0,col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1556', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0,col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1557', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1558', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1559', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1560', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1 DESC,col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1561', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1562', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1 DESC,col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1563', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1 DESC,col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1564', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1565', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1 DESC,col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1566', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1567', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1568', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1569', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1570', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1571', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1572', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1573', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1,col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1574', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1575', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1576', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1577', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1578', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1579', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1580', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1581', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1582', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1583', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1584', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1585', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1586', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3,col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1587', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1588', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1589', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1590', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1591', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1592', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1593', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1594', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1595', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1596', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1597', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4,col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1598', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4,col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1599', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1600', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1601', () => {
    const query = `CREATE INDEX idx_tab2_2 ON tab2 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1602', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1603', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1604', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1605', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0 DESC,col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1606', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1607', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1608', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1609', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1610', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1611', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0,col4 DESC,col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1612', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0,col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1613', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1614', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1615', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1 DESC,col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1616', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1617', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1618', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1619', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1 DESC,col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1620', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1 DESC,col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1621', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1622', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1623', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1624', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1625', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1626', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1627', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1628', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1629', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3 DESC,col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1630', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1631', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1632', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3 DESC,col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1633', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1634', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3 DESC,col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1635', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1636', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1637', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1638', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1639', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3,col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1640', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1641', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1642', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1643', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1644', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4 DESC,col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1645', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4 DESC,col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1646', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4 DESC,col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1647', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1648', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1649', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4 DESC,col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1650', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1651', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1652', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1653', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1654', () => {
    const query = `CREATE INDEX idx_tab2_3 ON tab2 (col4,col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1655', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1656', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1657', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1658', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1659', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1660', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col0 DESC,col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1661', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1662', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1663', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1664', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1665', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1666', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1667', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1668', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1669', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1670', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1671', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1672', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1673', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1674', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1675', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1676', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1677', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1678', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1679', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1680', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1681', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1682', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1683', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1684', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1685', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1686', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1687', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4 DESC,col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1688', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1689', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4 DESC,col3,col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1690', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1691', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1692', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1693', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1694', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1695', () => {
    const query = `CREATE INDEX idx_tab2_4 ON tab2 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1696', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1697', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1698', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col0 DESC,col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1699', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1700', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1701', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1702', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1703', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1704', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1705', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1706', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1707', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1708', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1709', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1710', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1711', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1712', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1713', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1714', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1715', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1716', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1717', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1718', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1719', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col3 DESC,col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1720', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1721', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1722', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1723', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1724', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1725', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1726', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1727', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1728', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1729', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1730', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col4,col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1731', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1732', () => {
    const query = `CREATE INDEX idx_tab2_5 ON tab2 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1733', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1734', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1735', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1736', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1737', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1738', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1739', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1740', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1741', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1742', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1743', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1744', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1745', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1746', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0 DESC,col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1747', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1748', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1749', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0,col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1750', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1751', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1752', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1753', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1754', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0,col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1755', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0,col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1756', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1757', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1758', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1759', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1 DESC,col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1760', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1761', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1762', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1 DESC,col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1763', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1764', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1 DESC,col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1765', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1766', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1 DESC,col4,col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1767', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1768', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1769', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1770', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1,col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1771', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1772', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1,col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1773', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1,col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1774', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1775', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1,col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1776', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1777', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1778', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1779', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3 DESC,col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1780', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1781', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1782', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1783', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3 DESC,col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1784', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1785', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1786', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1787', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1788', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1789', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1790', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3,col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1791', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1792', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3,col1,col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1793', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1794', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1795', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1796', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1797', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1798', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4 DESC,col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1799', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1800', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1801', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4 DESC,col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1802', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1803', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1804', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4 DESC,col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1805', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1806', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1807', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1808', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1809', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4,col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1810', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4,col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1811', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1812', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1813', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1814', () => {
    const query = `CREATE INDEX idx_tab3_0 ON tab3 (col4,col3,col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1815', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1816', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1817', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1818', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1819', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0 DESC,col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1820', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1821', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1822', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1823', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1824', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1825', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0,col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1826', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1827', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1828', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0,col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1829', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1830', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1831', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1832', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1833', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1 DESC,col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1834', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1835', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1836', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1 DESC,col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1837', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1838', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1839', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1840', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1841', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1,col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1842', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1843', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1844', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1,col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1845', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1846', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1847', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col1,col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1848', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1849', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1850', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3 DESC,col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1851', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1852', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3 DESC,col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1853', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1854', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1855', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1856', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1857', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3,col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1858', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3,col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1859', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1860', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3,col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1861', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1862', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1863', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1864', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1865', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1866', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1867', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4 DESC,col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1868', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1869', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4 DESC,col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1870', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1871', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1872', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1873', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1874', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1875', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1876', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4,col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1877', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1878', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4,col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1879', () => {
    const query = `CREATE INDEX idx_tab3_1 ON tab3 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1880', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1881', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1882', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1883', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1884', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1885', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1886', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1887', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1888', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1889', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1890', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1891', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1892', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1893', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1894', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1895', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1896', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1897', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1898', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1899', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1900', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1901', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1902', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1903', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1904', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1905', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1906', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1907', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1908', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1909', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1910', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3 DESC,col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1911', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3 DESC,col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1912', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1913', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3 DESC,col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1914', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3 DESC,col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1915', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1916', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3 DESC,col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1917', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1918', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1919', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1920', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1921', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1922', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1923', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1924', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1925', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4 DESC,col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1926', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1927', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4 DESC,col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1928', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1929', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1930', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4 DESC,col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1931', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4 DESC,col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1932', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1933', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4,col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1934', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1935', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1936', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1937', () => {
    const query = `CREATE INDEX idx_tab3_2 ON tab3 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1938', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1939', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1940', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1941', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1942', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0 DESC,col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1943', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1944', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1945', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1946', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1947', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1948', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1949', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1950', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1951', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1952', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1953', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1954', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1955', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1956', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1957', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1958', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1959', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1960', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1,col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1961', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1962', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1963', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1964', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3 DESC,col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1965', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1966', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1967', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3 DESC,col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1968', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1969', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1970', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1971', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1972', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3,col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1973', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col3,col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1974', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1975', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1976', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1977', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1978', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1979', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1980', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1981', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1982', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1983', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1984', () => {
    const query = `CREATE INDEX idx_tab3_3 ON tab3 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1985', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1986', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1987', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1988', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1989', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1990', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1991', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1992', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1993', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1994', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1995', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1996', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1997', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1998', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 1999', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col1 DESC,col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2000', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col1 DESC,col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2001', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2002', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col1 DESC,col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2003', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2004', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2005', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2006', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2007', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2008', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col3 DESC,col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2009', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col3 DESC,col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2010', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2011', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2012', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2013', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2014', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2015', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col4 DESC,col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2016', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2017', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2018', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2019', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col4,col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2020', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2021', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2022', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col4,col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2023', () => {
    const query = `CREATE INDEX idx_tab3_4 ON tab3 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2024', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2025', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2026', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2027', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2028', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2029', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2030', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2031', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col0,col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2032', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2033', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2034', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2035', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2036', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2037', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2038', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2039', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2040', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2041', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2042', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2043', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2044', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2045', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2046', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2047', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3 DESC,col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2048', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2049', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2050', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2051', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3,col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2052', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2053', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2054', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2055', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2056', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2057', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col4 DESC,col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2058', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2059', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2060', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2061', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2062', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2063', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2064', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2065', () => {
    const query = `CREATE INDEX idx_tab3_5 ON tab3 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2066', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2067', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2068', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC,col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2069', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2070', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC,col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2071', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC,col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2072', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2073', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2074', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC,col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2075', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2076', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC,col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2077', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0 DESC,col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2078', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2079', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2080', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0,col1,col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2081', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2082', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2083', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0,col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2084', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0,col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2085', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2086', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2087', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col0,col4,col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2088', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2089', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2090', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2091', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2092', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2093', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1 DESC,col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2094', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2095', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1 DESC,col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2096', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1 DESC,col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2097', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2098', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2099', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2100', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1,col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2101', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2102', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1,col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2103', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2104', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1,col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2105', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2106', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2107', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2108', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col1,col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2109', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2110', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2111', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2112', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2113', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3 DESC,col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2114', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2115', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2116', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3 DESC,col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2117', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2118', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2119', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2120', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3,col0 DESC,col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2121', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2122', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3,col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2123', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2124', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3,col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2125', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2126', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2127', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2128', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col3,col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2129', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2130', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2131', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2132', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4 DESC,col0,col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2133', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2134', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4 DESC,col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2135', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4 DESC,col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2136', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2137', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2138', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4 DESC,col3 DESC,col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2139', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2140', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2141', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2142', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2143', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4,col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2144', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2145', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2146', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2147', () => {
    const query = `CREATE INDEX idx_tab4_0 ON tab4 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2148', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2149', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2150', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0 DESC,col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2151', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2152', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2153', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2154', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2155', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2156', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2157', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0,col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2158', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2159', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2160', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0,col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2161', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2162', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2163', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2164', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2165', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2166', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1 DESC,col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2167', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2168', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2169', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2170', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2171', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2172', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2173', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2174', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1,col3,col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2175', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2176', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1,col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2177', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2178', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col1,col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2179', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2180', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2181', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2182', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2183', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2184', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2185', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2186', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3 DESC,col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2187', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2188', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2189', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3,col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2190', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2191', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2192', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3,col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2193', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3,col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2194', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2195', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2196', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2197', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4 DESC,col0 DESC,col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2198', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2199', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4 DESC,col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2200', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2201', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2202', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2203', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4 DESC,col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2204', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2205', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4,col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2206', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2207', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2208', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2209', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4,col3 DESC,col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2210', () => {
    const query = `CREATE INDEX idx_tab4_1 ON tab4 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2211', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2212', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2213', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2214', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col0 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2215', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2216', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2217', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2218', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2219', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2220', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col0,col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2221', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2222', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2223', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2224', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2225', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2226', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1 DESC,col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2227', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2228', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2229', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1,col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2230', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1,col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2231', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2232', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2233', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2234', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2235', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2236', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2237', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2238', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2239', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2240', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2241', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2242', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2243', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2244', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2245', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2246', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2247', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2248', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2249', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4 DESC,col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2250', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2251', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2252', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2253', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2254', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4 DESC,col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2255', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2256', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4,col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2257', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4,col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2258', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2259', () => {
    const query = `CREATE INDEX idx_tab4_2 ON tab4 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2260', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2261', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2262', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2263', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2264', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2265', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2266', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col0,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2267', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2268', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2269', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col0,col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2270', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2271', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2272', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2273', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2274', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2275', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2276', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2277', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col1 DESC,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2278', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2279', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2280', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2281', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2282', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2283', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col3 DESC,col1,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2284', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2285', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2286', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col3,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2287', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2288', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2289', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col3,col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2290', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2291', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col3,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2292', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2293', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2294', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2295', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2296', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2297', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4 DESC,col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2298', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4 DESC,col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2299', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2300', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2301', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2302', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2303', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2304', () => {
    const query = `CREATE INDEX idx_tab4_3 ON tab4 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2305', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2306', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2307', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2308', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2309', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col0 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2310', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2311', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col0,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2312', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col0,col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2313', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2314', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col0,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2315', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2316', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2317', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2318', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2319', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2320', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2321', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col1,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2322', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col1,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2323', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2324', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2325', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2326', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2327', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2328', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col3 DESC,col4 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2329', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2330', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2331', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2332', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2333', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2334', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2335', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2336', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2337', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2338', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4 DESC,col3 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2339', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2340', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4 DESC,col3,col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2341', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4 DESC,col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2342', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2343', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2344', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2345', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2346', () => {
    const query = `CREATE INDEX idx_tab4_4 ON tab4 (col4,col3 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2347', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2348', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col0 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2349', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col0 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2350', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col0 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2351', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col0 DESC,col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2352', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col0 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2353', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col0 DESC,col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2354', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2355', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col0,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2356', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col0,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2357', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col0,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2358', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2359', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2360', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col1 DESC,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2361', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col1 DESC,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2362', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2363', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2364', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2365', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col1,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2366', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col1,col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2367', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2368', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col3 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2369', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2370', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col3 DESC,col1 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2371', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col3 DESC,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2372', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col3 DESC,col1,col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2373', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col3 DESC,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2374', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2375', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col3,col0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2376', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col3,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2377', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col3,col1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2378', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col3,col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2379', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col4 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2380', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col4 DESC,col1 DESC,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2381', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col4 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2382', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col4);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2383', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col4,col0 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2384', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col4,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2385', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col4,col1 DESC,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2386', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col4,col3 DESC,col1 DESC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2387', () => {
    const query = `CREATE INDEX idx_tab4_5 ON tab4 (col4,col3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2388', () => {
    const query = `create table t (n UInt32, a Array(Int32)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2389', () => {
    const query = `create table t (n Int32, s String) engine=MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2390', () => {
    const query = `CREATE TABLE pk_test1 (a String PRIMARY KEY, b String, c String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2391', () => {
    const query = `CREATE TABLE pk_test2 (a String PRIMARY KEY, b String PRIMARY KEY, c String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2392', () => {
    const query = `CREATE TABLE pk_test3 (a String PRIMARY KEY, b String PRIMARY KEY, c String PRIMARY KEY);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2393', () => {
    const query = `CREATE TABLE pk_test4 (a String, b String PRIMARY KEY, c String PRIMARY KEY);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2394', () => {
    const query = `CREATE TABLE pk_test5 (a String, b String PRIMARY KEY, c String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2395', () => {
    const query = `CREATE TABLE pk_test6 (a String, b String, c String PRIMARY KEY);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2396', () => {
    const query = `CREATE TABLE pk_test7 (a String PRIMARY KEY, b String, c String, PRIMARY KEY (a)); -- { clientError BAD_ARGUMENTS } CREATE TABLE pk_test8 (a String PRIMARY KEY, b String PRIMARY KEY, c String, PRIMARY KEY (a)); -- { clientError BAD_ARGUMENTS }
CREATE TABLE pk_test9 (a String PRIMARY KEY, b String PRIMARY KEY, c String PRIMARY KEY, PRIMARY KEY (a)); -- { clientError BAD_ARGUMENTS }
CREATE TABLE pk_test10 (a String, b String PRIMARY KEY, c String PRIMARY KEY, PRIMARY KEY (a));  -- { clientError BAD_ARGUMENTS }
CREATE TABLE pk_test11 (a String, b String PRIMARY KEY, c String, PRIMARY KEY (a)); -- { clientError BAD_ARGUMENTS }
CREATE TABLE pk_test12 (a String, b String, c String PRIMARY KEY, PRIMARY KEY (a)); -- { clientError BAD_ARGUMENTS }
CREATE TABLE pk_test12 (a String PRIMARY KEY, b String, c String) PRIMARY KEY (a,b,c); -- { clientError BAD_ARGUMENTS }
CREATE TABLE pk_test13 (a String PRIMARY KEY, b String PRIMARY KEY, c String) PRIMARY KEY (a,b,c); -- { clientError BAD_ARGUMENTS }
CREATE TABLE pk_test14 (a String PRIMARY KEY, b String PRIMARY KEY, c String PRIMARY KEY) PRIMARY KEY (a,b,c); -- { clientError BAD_ARGUMENTS }
CREATE TABLE pk_test15 (a String, b String PRIMARY KEY, c String PRIMARY KEY) PRIMARY KEY (a,b,c); -- { clientError BAD_ARGUMENTS }
CREATE TABLE pk_test16 (a String, b String PRIMARY KEY, c String) PRIMARY KEY (a,b,c); -- { clientError BAD_ARGUMENTS }
CREATE TABLE pk_test17 (a String, b String, c String PRIMARY KEY) PRIMARY KEY (a,b,c); -- { clientError BAD_ARGUMENTS }
CREATE TABLE pk_test18 (a String PRIMARY KEY, b String, c String) ORDER BY (a,b,c);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2397', () => {
    const query = `CREATE TABLE pk_test19 (a String PRIMARY KEY, b String PRIMARY KEY, c String) ORDER BY (a,b,c);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2398', () => {
    const query = `CREATE TABLE pk_test20 (a String PRIMARY KEY, b String PRIMARY KEY, c String PRIMARY KEY) ORDER BY (a,b,c);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2399', () => {
    const query = `CREATE TABLE pk_test21 (a String, b String PRIMARY KEY, c String PRIMARY KEY) ORDER BY (a,b,c); -- { serverError BAD_ARGUMENTS } CREATE TABLE pk_test22 (a String, b String PRIMARY KEY, c String) ORDER BY (a,b,c); -- { serverError BAD_ARGUMENTS }
CREATE TABLE pk_test23 (a String, b String, c String PRIMARY KEY) ORDER BY (a,b,c); -- { serverError BAD_ARGUMENTS }
DROP TABLE IF EXISTS pk_test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2400', () => {
    const query = `CREATE TABLE users (uid Int16, name String, age Int16) ENGINE=MergeTree() ORDER BY uid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2401', () => {
    const query = `CREATE TABLE src ( id UInt64, ip4 IPv4, ip6 IPv6 ) Engine=Memory AS SELECT * FROM VALUES( (1, '1.1.1.1', '::1.1.1.1'), (2, '2.2.2.2', '::2.2.2.2') );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2402', () => {
    const query = `CREATE DICTIONARY dict ( id UInt64, ip4 IPv4, ip6 IPv6 ) PRIMARY KEY id
LAYOUT(HASHED())
SOURCE (CLICKHOUSE ( table src))
lifetime ( 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2403', () => {
    const query = `CREATE TABLE dict (\`k\` String, \`v\` String) ENGINE = EmbeddedRocksDB(k) PRIMARY KEY k; -- {serverError BAD_ARGUMENTS} `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2404', () => {
    const query = `create table test (
n1 UInt32,
n2 UInt32 alias murmurHash3_32(n1),
n3 UInt32 materialized n2 + 1
)engine=MergeTree order by n1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2405', () => {
    const query = `create table tab (x UInt64, y UInt64) engine MergeTree() order by (x, y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2406', () => {
    const query = `create view tab_v as select distinct(x) from tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2407', () => {
    const query = `CREATE TABLE null_in__fuzz_6 (\`dt\` LowCardinality(UInt16), \`idx\` Int32, \`i\` Nullable(Int256), \`s\` Int32) ENGINE = MergeTree PARTITION BY dt ORDER BY idx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2408', () => {
    const query = `CREATE TABLE test_set (i Nullable(int)) ENGINE = Set();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2409', () => {
    const query = `CREATE TABLE t_02809(a Int64, b Int64, s String) ENGINE=MergeTree order by tuple()
AS SELECT number, number%10, toString(arrayMap(i-> cityHash64(i*number), range(50))) FROM numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2410', () => {
    const query = `CREATE TABLE t_02809_set(c Int64) ENGINE=Set()
AS SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2411', () => {
    const query = `CREATE TABLE t_02809_aux(c Int64) ENGINE=Memory()
AS SELECT * FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2412', () => {
    const query = `CREATE TABLE t10 (\`c0\` Int32) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2413', () => {
    const query = `create temporary table test ( data int,
default Nullable(DateTime) DEFAULT '1977-01-01 00:00:00'
) engine  = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2414', () => {
    const query = `create temporary table test ( data int,
default DateTime DEFAULT '1977-01-01 00:00:00'
) engine  = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2415', () => {
    const query = `create table dist as system.one engine=Distributed(test_shard_localhost, system, one);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2416', () => {
    const query = `CREATE TABLE numbers_10_00223 ENGINE = Log AS
SELECT *
FROM system.numbers
LIMIT 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2417', () => {
    const query = `CREATE TABLE test_xy (
\`x\` Int32,
\`y\` String
)
ENGINE = MergeTree
ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2418', () => {
    const query = `CREATE TABLE updates (
\`x\` Int32,
\`y\` String
)
ENGINE = MergeTree
ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2419', () => {
    const query = `CREATE TABLE t(a UInt64) ENGINE = MergeTree
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2420', () => {
    const query = `create view v (s LowCardinality(String), n UInt8) as select 'test' as s, toUInt8(number) as n from numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2421', () => {
    const query = `CREATE TABLE fx_1m ( \`symbol\` LowCardinality(String) CODEC(ZSTD),
\`dt_close\` DateTime64(3, 'UTC') CODEC(DoubleDelta, ZSTD),
\`open\` Float32 CODEC(Delta, ZSTD),
\`high\` Float32 CODEC(Delta, ZSTD),
\`low\` Float32 CODEC(Delta, ZSTD),
\`close\` Float32 CODEC(Delta, ZSTD),
\`volume\` Float32 CODEC(Delta, ZSTD)
)
ENGINE = MergeTree()
PARTITION BY toYear(dt_close)
ORDER BY (symbol, dt_close) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2422', () => {
    const query = `CREATE VIEW fx_5m AS SELECT
symbol,
toStartOfInterval(dt_close, INTERVAL 300 SECOND) AS dt_close,
argMin(open, dt_close) open,
max(high) high,
min(low) low,
argMax(close, dt_close) close,
sum(volume) volume
FROM fx_1m
GROUP BY symbol, dt_close;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2423', () => {
    const query = `CREATE TABLE t_projections_lwd (a UInt32, b UInt32, PROJECTION p (SELECT * ORDER BY b)) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2424', () => {
    const query = `CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY () COMMENT 'Hello';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2425', () => {
    const query = `CREATE TABLE t (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_comment_table2/t', '1') ORDER BY () COMMENT 'Hello';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2426', () => {
    const query = `CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2427', () => {
    const query = `CREATE TABLE t (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_comment_table3/t', '1') ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2428', () => {
    const query = `CREATE TABLE t (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_comment_table4/t', '1') ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2429', () => {
    const query = `CREATE TEMPORARY TABLE b (key UInt32);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2430', () => {
    const query = `CREATE TABLE test_block_mismatch (
a UInt32,
b DateTime
)
ENGINE = ReplacingMergeTree
PARTITION BY toYYYYMM(b)
ORDER BY (toDate(b), a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2431', () => {
    const query = `CREATE TABLE test_block_mismatch_sk1 (
a UInt32,
b DateTime
)
ENGINE = ReplacingMergeTree
PARTITION BY toYYYYMM(b)
PRIMARY KEY (toDate(b))
ORDER BY (toDate(b), a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2432', () => {
    const query = `CREATE TABLE test_block_mismatch_sk2 (
a UInt32,
b DateTime
)
ENGINE = ReplacingMergeTree
PARTITION BY toYYYYMM(b)
PRIMARY KEY (a)
ORDER BY (a, toDate(b));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2433', () => {
    const query = `CREATE TEMPORARY TABLE employees (id UInt64, name String, department String, salary UInt64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2434', () => {
    const query = `CREATE TABLE IF NOT EXISTS outer (
\`id\` UInt64,
\`organization_id\` UInt64,
\`version\` UInt64
)
ENGINE = ReplacingMergeTree(version)
PARTITION BY organization_id % 8
ORDER BY (organization_id, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2435', () => {
    const query = `CREATE TABLE inner (
\`id\` UInt64,
\`outer_id\` UInt64,
\`organization_id\` UInt64,
\`version\` UInt64,
\`date\` Date
)
ENGINE = ReplacingMergeTree(version)
PARTITION BY toYYYYMM(date)
ORDER BY (organization_id, outer_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2436', () => {
    const query = `CREATE TABLE inner_distributed AS inner ENGINE = Distributed('test_cluster_two_shards', currentDatabase(), 'inner', intHash64(organization_id));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2437', () => {
    const query = `CREATE TABLE outer_distributed AS outer ENGINE = Distributed('test_cluster_two_shards', currentDatabase(), 'outer', intHash64(organization_id));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2438', () => {
    const query = `CREATE TABLE test (col1 Nullable(DOUBLE), col2 Nullable(DOUBLE), col3 DOUBLE) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2439', () => {
    const query = `CREATE TABLE test_table (
col1 String,
col2 String,
INDEX test_table_col2_idx col2 TYPE set(0) GRANULARITY 1
) ENGINE = MergeTree()
ORDER BY col1
AS SELECT 'v1', 'v2';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2440', () => {
    const query = `create table test1 ( \`pt\` String,
\`brand_name\` String,
\`total_indirect_order_cnt\` Float64,
\`total_indirect_gmv\` Float64
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2441', () => {
    const query = `create table test2 ( \`pt\` String,
\`brand_name\` String,
\`exposure_uv\` Float64,
\`click_uv\` Float64
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2442', () => {
    const query = `CREATE TABLE test (
\`pt\` String,
\`count_distinct_exposure_uv\` AggregateFunction(uniqHLL12, Int64)
)
ENGINE = AggregatingMergeTree
ORDER BY pt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2443', () => {
    const query = `CREATE TABLE test1 (
\`pt\` String,
\`exposure_uv\` Float64
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2444', () => {
    const query = `CREATE TABLE session_events (
clientId UInt64,
sessionId String,
pageId UInt64,
eventNumber UInt64,
timestamp UInt64,
type LowCardinality(String),
data String
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(toDate(pageId / 1000))
ORDER BY (clientId, sessionId, pageId, timestamp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2445', () => {
    const query = `CREATE TABLE event_types (
type String,
active Int16
)
ENGINE = MergeTree
PARTITION BY substring(type, 1, 1)
ORDER BY (type, active);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2446', () => {
    const query = `CREATE TABLE summing_merge_tree_datetime64 ( \`pk\` UInt64, \`timestamp\` DateTime64(3), \`value\` UInt64 ) ENGINE = SummingMergeTree() ORDER BY pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2447', () => {
    const query = `CREATE TABLE test_table (\`id\` Float32, \`value\` Float32) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2448', () => {
    const query = `CREATE TABLE test_table__fuzz_3 (\`id\` LowCardinality(Nullable(Float32)), \`value\` Float32) ENGINE = MergeTree ORDER BY id SETTINGS allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2449', () => {
    const query = `create table local (a UInt64, b UInt64, c UInt64, d UInt64, e UInt64, f UInt64, g UInt64, h UInt64) engine = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2450', () => {
    const query = `create table distr as local engine = Distributed('test_cluster_two_shards', currentDatabase(), local);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2451', () => {
    const query = `CREATE TABLE date_t (id UInt32, value1 String, date1 Date) ENGINE ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2452', () => {
    const query = `CREATE TABLE datetime_t (id UInt32, value1 String, date1 Datetime) ENGINE ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2453', () => {
    const query = `CREATE TABLE date32_t (id UInt32, value1 String, date1 Date32) ENGINE ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2454', () => {
    const query = `CREATE TABLE datetime64_t (id UInt32, value1 String, date1 Datetime64) ENGINE ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2455', () => {
    const query = `create table events ( \`organisation_id\` UUID,
\`session_id\` UUID,
\`id\` UUID DEFAULT generateUUIDv4(),
\`timestamp\` UInt64,
\`payload\` String,
\`customer_id\` UUID,
\`call_id\` String,
PROJECTION events_by_session_and_org
(
SELECT *
ORDER BY
organisation_id,
session_id,
timestamp
),
PROJECTION events_by_session
(
SELECT *
ORDER BY
session_id,
timestamp
),
PROJECTION events_by_session_and_customer
(
SELECT *
ORDER BY
customer_id,
session_id,
timestamp
),
PROJECTION events_by_call_id
(
SELECT *
ORDER BY
call_id,
timestamp
)) engine = MergeTree order by (organisation_id, session_id, timestamp) settings index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2456', () => {
    const query = `CREATE TABLE t_02784 (c1 UInt64, c2 UInt64) ENGINE=MergeTree() ORDER BY c1 SETTINGS min_bytes_for_wide_part=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2457', () => {
    const query = `CREATE TABLE source (
\`ts\` DateTime('UTC'),
\`n\` Int32
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(ts)
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2458', () => {
    const query = `CREATE TABLE source (
\`dt\` Date,
\`ts\` DateTime,
\`dt_32\` Date32,
\`ts_64\` DateTime64(3),
\`n\` Int32
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(ts)
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2459', () => {
    const query = `create table t4 (c26 String) engine = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2460', () => {
    const query = `create view t7 as select max(ref_3.c26) as c_2_c46_1 from t4 as ref_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2461', () => {
    const query = `CREATE TABLE data (
key  Int,
v1   DateTime,
INDEX v1_index v1 TYPE minmax GRANULARITY 1
) ENGINE=AggregatingMergeTree()
ORDER BY key
SETTINGS index_granularity=8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2462', () => {
    const query = `CREATE TABLE data (
key  Int,
v1   DateTime,
INDEX v1_index v1 TYPE minmax GRANULARITY 1
) ENGINE=AggregatingMergeTree()
ORDER BY key
SETTINGS index_granularity=8192, min_bytes_for_wide_part=0, min_rows_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2463', () => {
    const query = `CREATE TABLE tab (
i8            Int8,
i16           Int16,
i32           Int32,
i64           Int64,
i128          Int128,
i256          Int256,
ui8           UInt8,
ui16          UInt16,
ui32          UInt32,
ui64          UInt64,
ui128         UInt128,
ui256         UInt256,
f32           Float32,
f64           Float64,
dec32         Decimal32(2),
dec64         Decimal64(2),
dec128        Decimal128(2),
dec128_native Decimal(35, 30),
dec128_text   Decimal(35, 31),
dec256        Decimal256(2),
dec256_native Decimal(65, 2),
dec256_text   Decimal(66, 2),
p             Point,
r             Ring,
pg            Polygon,
mpg           MultiPolygon,
b             Bool,
s             String,
fs            FixedString(3),
uuid          UUID,
d             Date,
d32           Date32,
dt            DateTime,
dt_tz1        DateTime('UTC'),
dt_tz2        DateTime('Europe/Amsterdam'),
dt64          DateTime64(3),
dt64_3_tz1    DateTime64(3, 'UTC'),
dt64_3_tz2    DateTime64(3, 'Asia/Shanghai'),
dt64_6        DateTime64(6, 'UTC'),
dt64_9        DateTime64(9, 'UTC'),
enm           Enum('hallo' = 1, 'welt' = 2),
agg           AggregateFunction(uniq, UInt64),
sagg          SimpleAggregateFunction(sum, Double),
a             Array(String),
o             JSON,
t             Tuple(Int32, String, Nullable(String), LowCardinality(String), LowCardinality(Nullable(String)), Tuple(Int32, String)),
m             Map(Int32, String),
m_complex     Map(Int32, Map(Int32, LowCardinality(Nullable(String)))),
nested        Nested (col1 String, col2 UInt32),
ip4           IPv4,
ip6           IPv6,
ns            Nullable(String),
nfs           Nullable(FixedString(3)),
ndt64         Nullable(DateTime64(3)),
ndt64_tz      Nullable(DateTime64(3, 'Asia/Shanghai')),
ls            LowCardinality(String),
lfs           LowCardinality(FixedString(3)),
lns           LowCardinality(Nullable(String)),
lnfs          LowCardinality(Nullable(FixedString(3))),
) ENGINE Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2464', () => {
    const query = `CREATE DATABASE test_02771;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2465', () => {
    const query = `CREATE TABLE test_02771.t (x UInt8) ENGINE = MergeTree() ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2466', () => {
    const query = `CREATE TABLE join_inner_table__fuzz_146_replicated (
\`id\` UUID,
\`key\` String,
\`number\` Int64,
\`value1\` String,
\`value2\` String,
\`time\` Nullable(Int64)
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/join_inner_table__fuzz_146_replicated', '{replica}')
ORDER BY (id, number, key)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2467', () => {
    const query = `CREATE TABLE test_log (
\`crypto_name\` String,
\`trade_date\` Date
)
ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2468', () => {
    const query = `CREATE TABLE test_log (
\`crypto_name\` String,
\`trade_date\` Date
)
ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2469', () => {
    const query = `CREATE TABLE test_table_1 (
pkey UInt32,
c8 UInt32,
c9 String,
c10 Float32,
c11 String
) ENGINE = MergeTree ORDER BY pkey;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2470', () => {
    const query = `CREATE TABLE test_table_2 (
vkey UInt32,
pkey UInt32,
c15 UInt32
) ENGINE = MergeTree ORDER BY vkey;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2471', () => {
    const query = `CREATE TABLE data_02771 (
key Int,
x Int,
y Int,
INDEX x_idx x TYPE minmax GRANULARITY 1,
INDEX y_idx y TYPE minmax GRANULARITY 1,
INDEX xy_idx (x,y) TYPE minmax GRANULARITY 1
)
Engine=MergeTree()
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2472', () => {
    const query = `CREATE TABLE test_parallel_replicas_unavailable_shards (n UInt64) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2473', () => {
    const query = `CREATE TABLE test_table (
id UInt32,
value UInt32
) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2474', () => {
    const query = `CREATE TABLE test_table (
id UInt32,
value_1 UInt32,
value_2 Float32
) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2475', () => {
    const query = `CREATE TABLE test_table (
id Float32,
value Float32
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2476', () => {
    const query = `CREATE TABLE t0 (vkey UInt32, pkey UInt32, c0 UInt32) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2477', () => {
    const query = `CREATE TABLE t1 (vkey UInt32) ENGINE = AggregatingMergeTree  ORDER BY vkey;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2478', () => {
    const query = `CREATE TABLE t5 (vkey UInt32, pkey UInt32, c18 Float32, c19 UInt32) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2479', () => {
    const query = `CREATE TABLE IF NOT EXISTS parallel_replicas_final (x String) ENGINE=ReplacingMergeTree() ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2480', () => {
    const query = `CREATE TABLE parallel_replicas_plain (x String) ENGINE=MergeTree() ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2481', () => {
    const query = `create table x (dt String) engine MergeTree partition by toYYYYMM(toDate(dt)) order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2482', () => {
    const query = `CREATE TABLE test ( col1 Int64, dt Date ) ENGINE = MergeTree PARTITION BY dt ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2483', () => {
    const query = `CREATE TABLE test_table_1 (id UInt32) ENGINE = MergeTree ORDER BY (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2484', () => {
    const query = `create table test_table_2 (id UInt32) ENGINE = MergeTree ORDER BY (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2485', () => {
    const query = `create database replicated_db_no_args engine=Replicated; -- { serverError BAD_ARGUMENTS } `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2486', () => {
    const query = `CREATE TABLE defaults (
u8 UInt8,
u16 UInt16,
u32 UInt32,
u64 UInt64,
i8 Int8,
i16 Int16,
i32 Int32,
i64 Int64
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2487', () => {
    const query = `CREATE TABLE 02751_query_log_test_partitions (a Int64, b Int64) ENGINE = MergeTree PARTITION BY a ORDER BY b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2488', () => {
    const query = `CREATE TABLE join_inner_table__fuzz_1 (
\`id\` UUID,
\`key\` Nullable(Date),
\`number\` Int64,
\`value1\` LowCardinality(String),
\`value2\` LowCardinality(String),
\`time\` Int128
)
ENGINE = MergeTree
ORDER BY (id, number, key)
SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2489', () => {
    const query = `create table tab (x DateTime) engine MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2490', () => {
    const query = `CREATE TABLE test_table (
key UInt64,
value UInt16
) ENGINE=Memory() AS SELECT number, number FROM numbers(1e5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2491', () => {
    const query = `CREATE TABLE test_table_nullable (
key UInt64,
value Nullable(UInt16)
) ENGINE=Memory() AS SELECT number, number % 2 == 0 ? NULL : number FROM numbers(1e5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2492', () => {
    const query = `CREATE TABLE test_table_string (
key String,
value UInt16
) ENGINE=Memory() AS SELECT 'foo' || number::String, number FROM numbers(1e5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2493', () => {
    const query = `CREATE TABLE test_table_complex (
key_1 UInt64,
key_2 UInt64,
value UInt16
) ENGINE=Memory() AS SELECT number, number, number FROM numbers(1e5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2494', () => {
    const query = `CREATE DICTIONARY test_sparse_dictionary_load_factor (
key UInt64,
value UInt16
) PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE test_table))
LAYOUT(SPARSE_HASHED(MAX_LOAD_FACTOR 0.90))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2495', () => {
    const query = `CREATE DICTIONARY test_dictionary_load_factor (
key UInt64,
value UInt16
) PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE test_table))
LAYOUT(HASHED(MAX_LOAD_FACTOR 0.90))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2496', () => {
    const query = `CREATE DICTIONARY test_dictionary_load_factor_nullable (
key UInt64,
value Nullable(UInt16)
) PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE test_table_nullable))
LAYOUT(HASHED(MAX_LOAD_FACTOR 0.90))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2497', () => {
    const query = `CREATE DICTIONARY test_complex_dictionary_load_factor (
key_1 UInt64,
key_2 UInt64,
value UInt16
) PRIMARY KEY key_1, key_2
SOURCE(CLICKHOUSE(TABLE test_table_complex))
LAYOUT(COMPLEX_KEY_HASHED(MAX_LOAD_FACTOR 0.90))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2498', () => {
    const query = `CREATE DICTIONARY test_dictionary_load_factor_string (
key String,
value UInt16
) PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE test_table_string))
LAYOUT(HASHED(MAX_LOAD_FACTOR 1))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2499', () => {
    const query = `CREATE TABLE test_tz_setting (d DateTime('UTC')) Engine=Memory AS SELECT toDateTime('2000-01-01 00:00:00');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2500', () => {
    const query = `CREATE TABLE array_jaccard_index (arr Array(UInt8)) engine = MergeTree ORDER BY arr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2501', () => {
    const query = `CREATE TABLE test_zk_connection_table ( key UInt64
)
ENGINE ReplicatedMergeTree('zookeeper2:/clickhouse/{database}/02731_zk_connection/{shard}', '{replica}')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2502', () => {
    const query = `create temporary table basic_types_02735 as select * from generateRandom(' u8 UInt8,
u16 UInt16,
u32 UInt32,
u64 UInt64,
i8 Int8,
i16 Int16,
i32 Int32,
i64 Int64,
date Date,
date32 Date32,
datetime DateTime,
datetime64 DateTime64,
enum8 Enum8(''x'' = 1, ''y'' = 2, ''z'' = 3),
enum16 Enum16(''xx'' = 1000, ''yy'' = 2000, ''zz'' = 3000),
float32 Float32,
float64 Float64,
str String,
fstr FixedString(12),
u128 UInt128,
u256 UInt256,
i128 Int128,
i256 Int256,
decimal32 Decimal32(3),
decimal64 Decimal64(10),
decimal128 Decimal128(20),
decimal256 Decimal256(40),
ipv4 IPv4,
ipv6 IPv6') limit 1011;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2503', () => {
    const query = `create temporary table nullables_02735 as select * from generateRandom(' u16 Nullable(UInt16),
i64 Nullable(Int64),
datetime64 Nullable(DateTime64),
enum8 Nullable(Enum8(''x'' = 1, ''y'' = 2, ''z'' = 3)),
float64 Nullable(Float64),
str Nullable(String),
fstr Nullable(FixedString(12)),
i256 Nullable(Int256),
decimal256 Nullable(Decimal256(40)),
ipv6 Nullable(IPv6)') limit 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2504', () => {
    const query = `create table arrays_02735 engine = Memory as select * from generateRandom(' u32 Array(UInt32),
i8 Array(Int8),
datetime Array(DateTime),
enum16 Array(Enum16(''xx'' = 1000, ''yy'' = 2000, ''zz'' = 3000)),
float32 Array(Float32),
str Array(String),
fstr Array(FixedString(12)),
u128 Array(UInt128),
decimal64 Array(Decimal64(10)),
ipv4 Array(IPv4),
msi Map(String, Int16),
tup Tuple(FixedString(3), Array(String), Map(Int8, Date))') limit 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2505', () => {
    const query = `create temporary table arrays_out_02735 as arrays_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2506', () => {
    const query = `create temporary table madness_02735 as select * from generateRandom(' aa Array(Array(UInt32)),
aaa Array(Array(Array(UInt32))),
an Array(Nullable(String)),
aan Array(Array(Nullable(FixedString(10)))),
l LowCardinality(String),
ln LowCardinality(Nullable(FixedString(11))),
al Array(LowCardinality(UInt128)),
aaln Array(Array(LowCardinality(Nullable(String)))),
mln Map(LowCardinality(String), Nullable(Int8)),
t Tuple(Map(FixedString(5), Tuple(Array(UInt16), Nullable(UInt16), Array(Tuple(Int8, Decimal64(10))))), Tuple(kitchen UInt64, sink String)),
n Nested(hello UInt64, world Tuple(first String, second FixedString(1)))
') limit 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2507', () => {
    const query = `create temporary table other_encoders_02735 as select number, number*2 from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2508', () => {
    const query = `CREATE TABLE t1 (a Int, b Int) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2509', () => {
    const query = `CREATE TABLE t2 (a Int, b Nullable(Int)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2510', () => {
    const query = `CREATE TABLE t_sparse_short_circuit (a UInt64, b UInt64) ENGINE = MergeTree ORDER BY tuple()
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2511', () => {
    const query = `CREATE TABLE t_sparse_mutation (id UInt64, v UInt64) ENGINE = MergeTree ORDER BY id
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2512', () => {
    const query = `CREATE TABLE t_sparse_reload (id UInt64, v UInt64) ENGINE = MergeTree ORDER BY id
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.95;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2513', () => {
    const query = `CREATE TABLE test_string (
\`c1\` String,
\`c2\` String
)
ENGINE = MergeTree
ORDER BY c1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2514', () => {
    const query = `CREATE TABLE test (
c1 String,
c2 String,
c3 String
)
ENGINE = ReplacingMergeTree
ORDER BY (c1, c3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2515', () => {
    const query = `CREATE TEMPORARY TABLE src (p UInt64, k String, d UInt64) ENGINE = MergeTree PARTITION BY p ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2516', () => {
    const query = `CREATE TABLE dst (p UInt64, k String, d UInt64) ENGINE = MergeTree PARTITION BY p ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2517', () => {
    const query = `CREATE TABLE rdst (p UInt64, k String, d UInt64) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_alter_attach_00626_rdst', 'r1') PARTITION BY p ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2518', () => {
    const query = `CREATE TABLE join_inner_table (
id UUID,
key String,
number Int64,
value1 String,
value2 String,
time Int64
)
ENGINE=ReplicatedMergeTree('/clickhouse/tables/{database}/join_inner_table', 'r1')
ORDER BY (id, number, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2519', () => {
    const query = `CREATE TABLE join_outer_table (
id UUID,
key String,
otherValue1 String,
otherValue2 String,
time Int64
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/join_outer_table', 'r1')
ORDER BY (id, time, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2520', () => {
    const query = `CREATE TABLE test(\`report_date\` Date, \`sspid\` UInt64) ENGINE MergeTree PARTITION BY report_date ORDER BY report_date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2521', () => {
    const query = `CREATE TABLE dict_data (v0 UInt16, v1 Int16, v2 Float32, v3 Decimal128(10), v4 String) engine=Memory()  AS SELECT number, number%65535, number*1.1, number*1.1, 'foo' FROM numbers(10);;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2522', () => {
    const query = `CREATE DICTIONARY dict_flat_simple (v0 UInt16, v1 UInt16, v2 UInt16) PRIMARY KEY v0 SOURCE(CLICKHOUSE(TABLE 'dict_data')) LIFETIME(0) LAYOUT(flat());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2523', () => {
    const query = `CREATE DICTIONARY dict_hashed_simple_Decimal128 (v3 Decimal128(10), v1 UInt16, v2 Float32) PRIMARY KEY v3 SOURCE(CLICKHOUSE(TABLE 'dict_data')) LIFETIME(0) LAYOUT(hashed());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2524', () => {
    const query = `CREATE DICTIONARY dict_hashed_simple_Float32 (v2 Float32, v3 Decimal128(10), v4 String) PRIMARY KEY v2 SOURCE(CLICKHOUSE(TABLE 'dict_data')) LIFETIME(0) LAYOUT(hashed());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2525', () => {
    const query = `CREATE DICTIONARY dict_hashed_simple_String (v4 String, v3 Decimal128(10), v2 Float32) PRIMARY KEY v4 SOURCE(CLICKHOUSE(TABLE 'dict_data')) LIFETIME(0) LAYOUT(hashed());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2526', () => {
    const query = `CREATE DICTIONARY dict_hashed_simple_auto_convert (v0 UInt16, v1 Int16, v2 UInt16) PRIMARY KEY v0,v1 SOURCE(CLICKHOUSE(TABLE 'dict_data')) LIFETIME(0) LAYOUT(hashed());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2527', () => {
    const query = `create table ts (sensor_id UInt64, timestamp UInt64, value Float64) ENGINE=MergeTree()  ORDER BY (sensor_id, timestamp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2528', () => {
    const query = `CREATE TABLE dict_data (key UInt64, v0 UInt16, v1 UInt16, v2 UInt16, v3 UInt16, v4 UInt16) engine=Memory() AS SELECT number, number%65535, number%65535, number%6553, number%655355, number%65535 FROM numbers(1e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2529', () => {
    const query = `CREATE DICTIONARY dict_sharded (key UInt64, v0 UInt16) PRIMARY KEY key SOURCE(CLICKHOUSE(TABLE 'dict_data')) LIFETIME(MIN 0 MAX 0) LAYOUT(HASHED(SHARDS 32));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2530', () => {
    const query = `CREATE DICTIONARY dict_sharded_multi (key UInt64, v0 UInt16, v1 UInt16, v2 UInt16, v3 UInt16, v4 UInt16) PRIMARY KEY key SOURCE(CLICKHOUSE(TABLE 'dict_data')) LIFETIME(MIN 0 MAX 0) LAYOUT(HASHED(SHARDS 32));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2531', () => {
    const query = `CREATE TABLE t_async_inserts_flush (a UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2532', () => {
    const query = `CREATE TABLE t_to (id UInt64, value Nullable(String)) ENGINE MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2533', () => {
    const query = `CREATE TABLE t_from (id UInt64, value Object('json')) ENGINE MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2534', () => {
    const query = `CREATE TABLE group_by_null_key (c1 Nullable(Int32), c2 LowCardinality(Nullable(Int32))) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2535', () => {
    const query = `CREATE TABLE 02725_memory_for_merges (   n UInt64,
s String
)
ENGINE = MergeTree
ORDER BY n
SETTINGS merge_max_block_size_bytes=1024, index_granularity_bytes=1024;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2536', () => {
    const query = `CREATE TABLE 02725_cnf (c0 UInt8, c1 UInt8, c2 UInt8, c3 UInt8, c4 UInt8, c5 UInt8, c6 UInt8, c7 UInt8, c8 UInt8, c9 UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2537', () => {
    const query = `CREATE TABLE join_test ( \`key\` UInt64, \`value\` UInt64 ) ENGINE = Join(ANY, LEFT, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2538', () => {
    const query = `CREATE TEMPORARY TABLE initial_table_size AS SELECT engine_full, total_rows, total_bytes FROM system.tables WHERE (name = 'join_test') AND (database = currentDatabase());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2539', () => {
    const query = `CREATE TEMPORARY TABLE one_row_table_size AS SELECT engine_full, total_rows, total_bytes FROM system.tables WHERE (name = 'join_test') AND (database = currentDatabase());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2540', () => {
    const query = `CREATE TABLE join_test_right ( \`key\` UInt64, \`value\` UInt64 ) ENGINE = Join(ANY, RIGHT, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2541', () => {
    const query = `create table if not exists alias_column_should_not_allow_compression ( user_id UUID, user_id_hashed ALIAS (cityHash64(user_id))) engine=MergeTree() order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2542', () => {
    const query = `create table if not exists alias_column_should_not_allow_compression_fail ( user_id UUID, user_id_hashed ALIAS (cityHash64(user_id)) codec(LZ4HC(1))) engine=MergeTree() order by tuple(); -- { serverError BAD_ARGUMENTS } alter table alias_column_should_not_allow_compression modify column user_id codec(LZ4HC(1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2543', () => {
    const query = `CREATE TABLE t0 (
c1 Int64,
c2 Int64,
c3 Int64,
PROJECTION p1
(
SELECT
c1,
c2,
sum(c3)
GROUP BY
c2,
c1
)
)
ENGINE = MergeTree ORDER BY (c1, c2) settings min_bytes_for_wide_part = 10485760, min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2544', () => {
    const query = `CREATE TABLE tbl (
a UInt64,
b UInt64,
c UInt64,
d UInt64,
e UInt64,
INDEX mm1_idx (a, c, d) TYPE minmax,
INDEX mm2_idx (c, d, e) TYPE minmax,
INDEX set_idx (e)       TYPE set(100),
INDEX blf_idx (d, b)    TYPE bloom_filter(0.8)
)
ENGINE = MergeTree
PRIMARY KEY (c, a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2545', () => {
    const query = `CREATE TABLE \`\$4@^7\` (c String) ENGINE = MergeTree ORDER BY c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2546', () => {
    const query = `CREATE TABLE NULL (c String) ENGINE = MergeTree ORDER BY c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2547', () => {
    const query = `CREATE DATABASE \`'\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2548', () => {
    const query = `CREATE TABLE \`'\`.\`'\` (c String) ENGINE = MergeTree ORDER BY c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2549', () => {
    const query = `CREATE DATABASE database_123456789abcde; -- pseudo-random database name DROP TABLE IF EXISTS database_123456789abcde.tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2550', () => {
    const query = `CREATE TABLE database_123456789abcde.tbl (
a UInt64,
b UInt64,
INDEX mmi_idx b TYPE minmax
)
ENGINE = MergeTree
PRIMARY KEY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2551', () => {
    const query = `CREATE TABLE \`tab.with.dots\` (
a UInt64,
b UInt64,
c UInt64,
d UInt64,
e UInt64,
INDEX mm1_idx (a, c, d) TYPE minmax,
INDEX mm2_idx (c, d, e) TYPE minmax,
INDEX set_idx (e)       TYPE set(100),
INDEX blf_idx (d, b)    TYPE bloom_filter(0.8)
)
ENGINE = MergeTree
PRIMARY KEY (c, a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2552', () => {
    const query = `create table saved_intervals_tmp Engine=Memory as SELECT number as EventID, toIntervalSecond(number+1) as v1, toIntervalHour(number+2) as v2, toIntervalNanosecond(number+3) as v3 from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2553', () => {
    const query = `create table saved_intervals_mgt Engine=MergeTree() ORDER BY EventID as SELECT number as EventID, toIntervalSecond(number+1) as v1, toIntervalHour(number+2) as v2, toIntervalNanosecond(number+3) as v3 from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2554', () => {
    const query = `CREATE table t1 (v1 IntervalMinute) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2555', () => {
    const query = `CREATE TABLE user(id UInt32, name String) ENGINE = Join(ANY, LEFT, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2556', () => {
    const query = `CREATE TABLE product(id UInt32, name String, cate String) ENGINE = Join(ANY, LEFT, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2557', () => {
    const query = `CREATE TABLE order(id UInt32, pId UInt32, uId UInt32) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2558', () => {
    const query = `CREATE TABLE test_table (a UInt8, b UInt8) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2559', () => {
    const query = `CREATE TABLE test_table_nullable (a UInt8, b Nullable(UInt8)) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2560', () => {
    const query = `CREATE TABLE t1(k UInt32, v UInt32) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02723/zookeeper_name/t1', '1') ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2561', () => {
    const query = `CREATE TABLE t2(k UInt32, v UInt32) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02723/zookeeper_name/t2', '1') ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2562', () => {
    const query = `CREATE TABLE dummy ( num1 Int32, num2 Enum8('foo' = 0, 'bar' = 1, 'tar' = 2) ) ENGINE = MergeTree ORDER BY num1 as select 5, 'bar';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2563', () => {
    const query = `create table test (x UInt32, y UInt32, z UInt32) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2564', () => {
    const query = `CREATE TABLE IF NOT EXISTS table_with_dot_column (date Date, regular_column String, \`other_column.2\` String) ENGINE = MergeTree() ORDER BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2565', () => {
    const query = `CREATE ROW POLICY IF NOT EXISTS row_policy ON table_with_dot_column USING toDate(date) >= today() - 30 TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2566', () => {
    const query = `create table test(str Nullable(String), i Int64) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2567', () => {
    const query = `CREATE TABLE t_hardware_error ( 	KeyID UInt32
) Engine = ReplicatedMergeTree('/clickhouse/tables/{shard}/{database}/t_async_insert_dedup', '{replica}')
ORDER BY (KeyID);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2568', () => {
    const query = `CREATE TABLE tab (line String, patterns Array(String)) ENGINE = MergeTree ORDER BY line;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2569', () => {
    const query = `CREATE TABLE tab (line String) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2570', () => {
    const query = `CREATE TABLE data_02716_1 (v UInt64) ENGINE = MergeTree ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2571', () => {
    const query = `CREATE TABLE data_02716_2 (v UInt64) ENGINE = MergeTree ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2572', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE_1:Identifier}.data_02716_3 (v UInt64) ENGINE = MergeTree ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2573', () => {
    const query = `CREATE TABLE IF NOT EXISTS dict_source (key UInt64, value String) ENGINE=MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2574', () => {
    const query = `CREATE TABLE test (id UInt64, \`amax\` AggregateFunction(argMax, String, DateTime)) ENGINE=MergeTree()
ORDER BY id
SETTINGS ratio_of_defaults_for_sparse_serialization=1 -- Sparse columns will take more bytes for a single row
AS
SELECT number, argMaxState(number::String, '2023-04-12 16:23:01'::DateTime)
FROM numbers(1)
GROUP BY number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2575', () => {
    const query = `CREATE TABLE test (a Int32, b String) ENGINE = MergeTree() ORDER BY tuple()
SETTINGS disk = disk(
type = 'local_blob_storage',
path = '\${CLICKHOUSE_TEST_UNIQUE_NAME}/');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2576', () => {
    const query = `CREATE TABLE test (a Int32, b String) ENGINE = MergeTree() ORDER BY tuple()
SETTINGS disk = disk(
type = 'cache',
max_size = '10Mi',
path = '\${CLICKHOUSE_TEST_UNIQUE_NAME}/',
disk = disk(type='local_blob_storage', path='/var/lib/clickhouse/disks/\${CLICKHOUSE_TEST_UNIQUE_NAME}/'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2577', () => {
    const query = `CREATE TABLE 02713_seqt ENGINE = MergeTree
ORDER BY n AS
SELECT
sequenceMatchState('(?1)(?2)')(time, number_ = 1, number_ = 0) AS seq,
1 AS n
FROM
(
SELECT
number AS time,
number % 2 AS number_
FROM numbers_mt(100)
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2578', () => {
    const query = `CREATE TABLE 02713_seqt_distr ( seq AggregateFunction(sequenceMatch('(?1)(?2)'), UInt64, UInt8, UInt8) , n UInt8) ENGINE = Distributed(test_shard_localhost, currentDatabase(), '02713_seqt');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2579', () => {
    const query = `CREATE TABLE tab (
foo Array(LowCardinality(String)),
INDEX idx foo TYPE bloom_filter
)
ENGINE = MergeTree
PRIMARY KEY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2580', () => {
    const query = `CREATE TABLE tab (col String) Engine=MergeTree ORDER BY col;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2581', () => {
    const query = `CREATE TABLE test (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test', 'replica-{server_uuid}') ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2582', () => {
    const query = `CREATE TABLE test2 (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test', 'replica-{server_uuid}') ORDER BY x; -- { serverError REPLICA_ALREADY_EXISTS } SELECT getMacro('server_uuid'); -- { serverError NO_ELEMENTS_IN_CONFIG }
DROP TABLE test SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2583', () => {
    const query = `CREATE TABLE t_2710_show_table(n1 UInt32, s String) engine=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2584', () => {
    const query = `CREATE DATABASE t_2710_db engine=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2585', () => {
    const query = `CREATE DATABASE replicated_database_params ENGINE = Replicated('some/path/' || currentDatabase() || '/replicated_database_params');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2586', () => {
    const query = `CREATE DATABASE replicated_database_params ENGINE = Replicated('some/path/' || currentDatabase() || '/replicated_database_params', 'shard_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2587', () => {
    const query = `CREATE TABLE tbl (id UInt32) ENGINE = MergeTree() ORDER BY (id + 1, id + 1);  -- { serverError BAD_ARGUMENTS } CREATE TABLE tbl (id UInt32) ENGINE = MergeTree() ORDER BY (id + 1, id + 1) SETTINGS allow_suspicious_indices = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2588', () => {
    const query = `CREATE TABLE tbl (id UInt32, INDEX idx (id + 1, id + 1) TYPE minmax) ENGINE = MergeTree() ORDER BY id;  -- { serverError BAD_ARGUMENTS } CREATE TABLE tbl (id UInt32, INDEX idx (id + 1, id + 1) TYPE minmax) ENGINE = MergeTree() ORDER BY id SETTINGS allow_suspicious_indices = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2589', () => {
    const query = `CREATE TABLE tbl (id1 UInt32) ENGINE = MergeTree() ORDER BY id1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2590', () => {
    const query = `CREATE TABLE tbl (id UInt32) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2591', () => {
    const query = `CREATE TABLE summing_table (
id UInt32,
\`ip4Map.value\` Array(IPv4), \`ip4Map.total\` Array(UInt32),
\`ip6Map.value\` Array(IPv6), \`ip6Map.total\` Array(UInt32),
\`uuidMap.value\` Array(UUID), \`uuidMap.total\` Array(UInt32)
) ENGINE = SummingMergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2592', () => {
    const query = `CREATE TABLE t_memory_compressed (id UInt64, s String, arr Array(LowCardinality(String)), m Map(String, String)) ENGINE = Memory SETTINGS compress = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2593', () => {
    const query = `CREATE TABLE IF NOT EXISTS t_02708(x DateTime) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2594', () => {
    const query = `CREATE TABLE tab(id UInt64, vec Array(Float32)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2595', () => {
    const query = `CREATE TABLE t_skip_index_in (
a String,
b String,
c String,
INDEX idx_c c TYPE bloom_filter GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY (a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2596', () => {
    const query = `CREATE TABLE 02707_keepermap_delete_update (key UInt64, value String, value2 UInt64) ENGINE=KeeperMap('/' ||  currentDatabase() || '/test02707_keepermap_delete_update') PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2597', () => {
    const query = `CREATE TABLE tab (
\`uint64\` UInt64,
\`int32\` Nullable(Int32) COMMENT 'example comment',
\`str\` String,
INDEX idx str TYPE set(1000)
)
ENGINE = MergeTree
PRIMARY KEY (uint64)
ORDER BY (uint64, str);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2598', () => {
    const query = `CREATE DATABASE database_123456789abcde; -- pseudo-random database name DROP TABLE IF EXISTS database_123456789abcde.tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2599', () => {
    const query = `CREATE TABLE database_123456789abcde.tab (
\`uint64\` UInt64,
\`int32\` Int32,
\`str\` String
)
ENGINE = MergeTree
ORDER BY uint64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2600', () => {
    const query = `CREATE TABLE \`tab.with.dots\` (
\`uint64\` UInt64,
\`int32\` Nullable(Int32) COMMENT 'example comment',
\`str\` String,
INDEX idx str TYPE set(1000)
)
ENGINE = MergeTree
PRIMARY KEY (uint64)
ORDER BY (uint64, str);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2601', () => {
    const query = `CREATE TABLE kstest (left Float64, right Float64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2602', () => {
    const query = `CREATE TABLE 02706_keeper_map_insert_strict (key UInt64, value Float64) Engine=KeeperMap('/' || currentDatabase() || '/test_02706_keeper_map_insert_strict') PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2603', () => {
    const query = `CREATE TABLE t1 (c0 Int32) ENGINE = MergeTree() ORDER BY c0 PARTITION BY (- (c0));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2604', () => {
    const query = `CREATE TABLE foo (\`Id\` Int32, \`Val\` Int32) ENGINE = MergeTree ORDER BY Id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2605', () => {
    const query = `CREATE TABLE foo2 (\`Id\` Int32, \`Val\` Int32) ENGINE = MergeTree ORDER BY Id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2606', () => {
    const query = `CREATE TABLE foo2_dist (\`Id\` UInt32, \`Val\` String) ENGINE = Distributed(test_shard_localhost, currentDatabase(), foo2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2607', () => {
    const query = `CREATE TABLE merge1 AS foo ENGINE = Merge(currentDatabase(), '^(foo|foo2_dist)\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2608', () => {
    const query = `CREATE TABLE 02702_logical_optimizer (a Int32, b LowCardinality(String))
ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2609', () => {
    const query = `CREATE TABLE 02702_logical_optimizer_with_null_column (a Nullable(Int32), b LowCardinality(String))
ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2610', () => {
    const query = `CREATE TABLE 25400_dropped_tables (id Int32) Engine=MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2611', () => {
    const query = `CREATE TABLE mv_source (a Int64, insert_time DateTime) ENGINE = MergeTree() ORDER BY insert_time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2612', () => {
    const query = `CREATE TABLE mv_target (a Int64, insert_time DateTime) ENGINE = MergeTree() ORDER BY insert_time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2613', () => {
    const query = `CREATE MATERIALIZED VIEW source_to_target to mv_target as Select * from mv_source where a not in (Select sleepEachRow(0.1) from numbers(50));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2614', () => {
    const query = `CREATE TABLE test_table (n Int32, s String) ENGINE MergeTree PARTITION BY n ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2615', () => {
    const query = `CREATE TABLE mview_backend (n Int32, n2 Int64) ENGINE MergeTree PARTITION BY n ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2616', () => {
    const query = `CREATE MATERIALIZED VIEW mview TO mview_backend AS SELECT n, n * n AS "n2" FROM test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2617', () => {
    const query = `CREATE TABLE test_table_join (
id UInt64,
value String
) ENGINE = Join(Any, Left, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2618', () => {
    const query = `create table test_local (id UInt32, path LowCardinality(String)) engine = MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2619', () => {
    const query = `CREATE TABLE t2 ( x Int64 ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2620', () => {
    const query = `create temporary table temp_table3(val0 UInt64) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2621', () => {
    const query = `CREATE TABLE store (id UInt32, "名称" String, "状态" String) ENGINE=MergeTree() Order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2622', () => {
    const query = `CREATE TABLE location (id UInt32, name String) ENGINE=MergeTree() Order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2623', () => {
    const query = `CREATE TABLE sales ("日期" Date, "店铺" UInt32, "地址" UInt32, "销售额" Float32) ENGINE=MergeTree() Order by "日期";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2624', () => {
    const query = `CREATE TABLE t1 (\`1a\` Nullable(Int64), \`2b\` Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2625', () => {
    const query = `CREATE TABLE t2 (\`3c\` Nullable(Int64), \`4d\` Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2626', () => {
    const query = `CREATE TABLE t3 (\`5e\` Nullable(Int64), \`6f\` Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2627', () => {
    const query = `CREATE TABLE t1 (\`a\` Nullable(Int64), \`b\` Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2628', () => {
    const query = `CREATE TABLE t2 (\`c\` Nullable(Int64), \`d\` Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2629', () => {
    const query = `CREATE TABLE t3 (\`e\` Nullable(Int64), \`f\` Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2630', () => {
    const query = `CREATE TABLE 02691_drop_column_replicated (col1 Int64, col2 Int64, PROJECTION 02691_drop_column_replicated (SELECT * ORDER BY col1 )) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test/02691_drop_column', 'r1')
ORDER BY col1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2631', () => {
    const query = `CREATE TABLE t_str (
\`creation_time\` String
)
ENGINE = MergeTree
PARTITION BY creation_time
ORDER BY creation_time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2632', () => {
    const query = `create table decimal_insert_cast_issue (a Decimal(76, 0)) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2633', () => {
    const query = `create table 02681_undrop_mergetree (id Int32) Engine=MergeTree() order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2634', () => {
    const query = `create table 02681_undrop_detach (id Int32, num Int32) Engine=MergeTree() order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2635', () => {
    const query = `create table 02681_undrop_uuid_on_cluster on cluster test_shard_localhost (id Int32) Engine=MergeTree() order by id format Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2636', () => {
    const query = `create table 02681_undrop_no_uuid_on_cluster on cluster test_shard_localhost (id Int32) Engine=MergeTree() order by id format Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2637', () => {
    const query = `create table 02681_undrop_replicatedmergetree (id Int32) Engine=ReplicatedMergeTree('/clickhouse/tables/{database}/02681_undrop_replicatedmergetree', 'test_undrop') order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2638', () => {
    const query = `create table 02681_undrop_log (id Int32) Engine=Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2639', () => {
    const query = `create table 02681_undrop_distributed (id Int32) Engine = Distributed(test_shard_localhost, currentDatabase(), 02681_undrop, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2640', () => {
    const query = `create table 02681_undrop_multiple (id Int32) Engine=MergeTree() order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2641', () => {
    const query = `create table t(a UInt32) engine=MergeTree order by tuple() partition by a % 16;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2642', () => {
    const query = `CREATE TABLE foo (key UInt32, a String, b Int64, c String) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2643', () => {
    const query = `CREATE TABLE test_null_as_default__fuzz_46 (a Nullable(DateTime64(3)), b LowCardinality(Float32) DEFAULT a + 1000) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2644', () => {
    const query = `CREATE TABLE test_tuple (\`p\` DateTime, \`i\` int, \`j\` int) ENGINE = MergeTree PARTITION BY (toDate(p), i) ORDER BY j SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2645', () => {
    const query = `CREATE TEMPORARY TABLE test (ad DEFAULT *); -- { clientError SYNTAX_ERROR } CREATE TEMPORARY TABLE test (ad INT DEFAULT *); -- { clientError SYNTAX_ERROR }
CREATE TEMPORARY TABLE test (ad DEFAULT * NOT NULL); -- { clientError SYNTAX_ERROR }
CREATE TEMPORARY TABLE test (ad DEFAULT t.* NOT NULL); -- { clientError SYNTAX_ERROR }
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2646', () => {
    const query = `CREATE TABLE 02680_datetime64_monotonic_check (\`t\` DateTime64(3), \`x\` Nullable(Decimal(18, 14))) ENGINE = MergeTree
PARTITION BY toYYYYMMDD(t)
ORDER BY x SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2647', () => {
    const query = `CREATE TABLE 02680_datetime_monotonic_check_lc (\`timestamp\` LowCardinality(UInt32)) ENGINE = MergeTree
ORDER BY timestamp
SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2648', () => {
    const query = `CREATE ROW POLICY test_row_policy ON test_table USING id >= 5 TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2649', () => {
    const query = `CREATE TABLE t1(ID UInt64, name String) engine=MergeTree order by ID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2650', () => {
    const query = `CREATE TABLE test_grace_hash (id UInt32, value UInt64) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2651', () => {
    const query = `CREATE TABLE t_get_subcolumn (id UInt64, n Nested(u UInt64, s String)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2652', () => {
    const query = `create table t (a UInt64, b UInt64) engine=MergeTree() order by (a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2653', () => {
    const query = `CREATE TABLE test (i UInt64) Engine = MergeTree() order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2654', () => {
    const query = `CREATE TABLE t_sparse_columns_clear (arr Array(UInt64), v UInt64) ENGINE = MergeTree ORDER BY tuple()
SETTINGS
ratio_of_defaults_for_sparse_serialization = 0.9,
min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2655', () => {
    const query = `CREATE TABLE test_table_join (
id UInt64,
value String
) ENGINE = Join(All, inner, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2656', () => {
    const query = `create table m3(a Int64, b UInt64) Engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2657', () => {
    const query = `create table replacing_m3(a Int64, b UInt64) Engine=ReplacingMergeTree() order by (a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2658', () => {
    const query = `CREATE TABLE t_constant_index (
id UInt64,
INDEX t_constant_index 'foo' TYPE set(2) GRANULARITY 1
) ENGINE = MergeTree
ORDER BY id; -- { serverError INCORRECT_QUERY }
CREATE TABLE t_constant_index
(
id UInt64,
INDEX t_constant_index id + rand() TYPE set(2) GRANULARITY 1
) ENGINE = MergeTree
ORDER BY id; -- { serverError BAD_ARGUMENTS }
CREATE TABLE t_constant_index
(
id UInt64,
INDEX t_constant_index id * 2 TYPE set(2) GRANULARITY 1
) ENGINE = MergeTree
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2659', () => {
    const query = `CREATE TABLE t_modify_to_nullable (key UInt64, id UInt64, s String) ENGINE = MergeTree ORDER BY id PARTITION BY key
SETTINGS min_bytes_for_wide_part = 0, ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2660', () => {
    const query = `CREATE TABLE 02668_logical_optimizer (a Int32, b LowCardinality(String))
ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2661', () => {
    const query = `CREATE TABLE t (x UInt8, PROJECTION p (SELECT x GROUP BY x)) ENGINE = MergeTree ORDER BY () SETTINGS allow_experimental_block_number_column=true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2662', () => {
    const query = `CREATE TABLE test (id UInt32, a UInt32) ENGINE = MergeTree ORDER BY id SETTINGS allow_experimental_block_number_column = true, vertical_merge_algorithm_min_rows_to_activate = 1,
vertical_merge_algorithm_min_columns_to_activate = 0,
min_rows_for_wide_part = 1,
min_bytes_for_wide_part = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2663', () => {
    const query = `CREATE TABLE test (id UInt32, a UInt32) ENGINE = MergeTree ORDER BY id SETTINGS allow_experimental_block_number_column = true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2664', () => {
    const query = `CREATE TABLE t_sparse_mutations_5 (k UInt64, t Tuple(UInt64, UInt64)) ENGINE = MergeTree ORDER BY k
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2665', () => {
    const query = `CREATE TABLE t_sparse_mutations_4 (k UInt64, v UInt64) ENGINE = MergeTree ORDER BY k
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2666', () => {
    const query = `CREATE TABLE t_sparse_mutations_3 (key UInt8, id UInt64, s String) ENGINE = MergeTree ORDER BY id PARTITION BY key
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2667', () => {
    const query = `CREATE TABLE t_sparse_mutations_2 (key UInt8, id UInt64, s String) ENGINE = MergeTree ORDER BY id PARTITION BY key
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2668', () => {
    const query = `CREATE TABLE t_sparse_mutations_1 (key UInt8, id UInt64, s String) ENGINE = MergeTree ORDER BY id PARTITION BY key
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2669', () => {
    const query = `create table test(\`a\` Nullable(Int32), \`b\` Nullable(Int32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2670', () => {
    const query = `CREATE TABLE test ( \`c_id\` String,
\`p_id\` String,
\`d\` String
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test/test_table', '1')
ORDER BY (c_id, p_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2671', () => {
    const query = `create table t(a UInt64) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2672', () => {
    const query = `CREATE TABLE mytable (
operand Float64,
low     Float64,
high     Float64,
count   UInt64,
PRIMARY KEY (operand, low, high, count)
) ENGINE = MergeTree();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2673', () => {
    const query = `CREATE TABLE 02581_trips(id UInt32, description String, id2 UInt32, PRIMARY KEY id) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2674', () => {
    const query = `CREATE TABLE 02581_set (id UInt32) ENGINE = Set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2675', () => {
    const query = `CREATE TABLE 02581_trips(id UInt32, id2 UInt32, description String) ENGINE=MergeTree ORDER BY id SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2676', () => {
    const query = `CREATE DATABASE {old_db_name:Identifier};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2677', () => {
    const query = `CREATE TABLE {new_db_name:Identifier}.{old_tbl_name:Identifier} (a UInt64) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2678', () => {
    const query = `CREATE DICTIONARY {new_db_name:Identifier}.{old_dict_name:Identifier} (id UInt64, val UInt8) PRIMARY KEY id SOURCE(NULL()) LAYOUT(FLAT()) LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2679', () => {
    const query = `CREATE TABLE ipv4_t64 (uid Int16, ip IPv4 CODEC(T64), INDEX ip_idx ip TYPE bloom_filter GRANULARITY 4) ENGINE=MergeTree ORDER BY uid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2680', () => {
    const query = `CREATE TABLE 02577_keepermap_delete_update (key UInt64, value String, value2 UInt64) ENGINE=KeeperMap('/' ||  currentDatabase() || '/test02577_keepermap_delete_update') PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2681', () => {
    const query = `CREATE TABLE m (
\`a\` String,
\`f\` UInt8 DEFAULT 0
)
ENGINE = Merge(currentDatabase(), '^(t1|t2)\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2682', () => {
    const query = `CREATE TABLE t1 (
a String,
f UInt8 MATERIALIZED 1
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2683', () => {
    const query = `CREATE TABLE t2 (
a String,
f UInt8 DEFAULT 2
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2684', () => {
    const query = `CREATE TABLE m (
\`a\` String,
\`f\` UInt8 EPHEMERAL 0
)
ENGINE = Merge(currentDatabase(), '^(t1|t2)\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2685', () => {
    const query = `CREATE TABLE t1 (
a String,
f UInt8 DEFAULT 1
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2686', () => {
    const query = `CREATE TABLE m (
a String,
date Date,
f UInt8
)
ENGINE = Merge(currentDatabase(), '^(t1|t2)\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2687', () => {
    const query = `CREATE TABLE t1 (
a String,
date Date,
f UInt8 ALIAS 0
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2688', () => {
    const query = `CREATE TABLE t2 (
a String,
date Date,
f UInt8,
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2689', () => {
    const query = `CREATE TEMPORARY TABLE datetime__fuzz_14 (\`d\` LowCardinality(Nullable(UInt128)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2690', () => {
    const query = `CREATE TABLE table1__fuzz_19 (\`id\` LowCardinality(UInt16), \`v\` DateTime64(3, 'UTC')) ENGINE = ReplacingMergeTree(v) PARTITION BY id % 200 ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2691', () => {
    const query = `CREATE TEMPORARY TABLE datetime (\`d\` DateTime('UTC'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2692', () => {
    const query = `create table log_proxy_02572 as system.query_log engine=Distributed('test_shard_localhost', currentDatabase(), 'receiver_02572');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2693', () => {
    const query = `create materialized view push_to_logs_proxy_mv_02572 to log_proxy_02572 as select * from system.query_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2694', () => {
    const query = `create table data_02572 (key Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2695', () => {
    const query = `create table proxy_02572 (key Int) engine=Distributed('test_shard_localhost', currentDatabase(), 'receiver_02572');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2696', () => {
    const query = `create table receiver_02572 as data_02572;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2697', () => {
    const query = `CREATE TABLE ttttttt (
\`timestamp\` DateTime,
\`col1\` Float64,
\`col2\` Float64,
\`col3\` Float64
)
ENGINE = MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2698', () => {
    const query = `CREATE TABLE table1 (
id String,
device UUID
)
ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2699', () => {
    const query = `CREATE TABLE t1 (c0 Int32, PRIMARY KEY (c0)) ENGINE=MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2700', () => {
    const query = `CREATE TABLE t2(c0 Int32) ENGINE = MergeTree ORDER BY c0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2701', () => {
    const query = `CREATE TABLE t_update_empty_nested (
\`id\` UInt32,
\`nested.arr1\` Array(UInt64),
)
ENGINE = MergeTree
ORDER BY id
SETTINGS min_bytes_for_wide_part = 0, index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2702', () => {
    const query = `CREATE TABLE mytable (
timestamp        UInt64,
insert_timestamp UInt64,
key              UInt64,
value            Float64
) ENGINE = ReplacingMergeTree(insert_timestamp)
PRIMARY KEY (key, timestamp)
ORDER BY (key, timestamp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2703', () => {
    const query = `CREATE TABLE t3 (a UInt64, b UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2704', () => {
    const query = `CREATE DATABASE 02563_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2705', () => {
    const query = `CREATE TABLE 02563_db.test_merge_table_1 (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2706', () => {
    const query = `CREATE TABLE 02563_db.test_merge_table_2 (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2707', () => {
    const query = `CREATE TABLE 02563_db.test_merge_table (
id UInt64,
value String
) ENGINE=Merge(02563_db, '^test_merge_table');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2708', () => {
    const query = `CREATE TABLE 02563_db.t_1 (
timestamp DateTime64(9),
a String,
b String
)
ENGINE = MergeTree
PARTITION BY formatDateTime(toStartOfMinute(timestamp), '%Y%m%d%H', 'UTC')
ORDER BY (timestamp, a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2709', () => {
    const query = `CREATE TABLE 02563_db.dist_t_1 (timestamp DateTime64(9), a String, b String) ENGINE = Distributed('test_shard_localhost', '02563_db', 't_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2710', () => {
    const query = `CREATE TABLE 02563_db.m ENGINE = Merge('02563_db', '^dist_');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2711', () => {
    const query = `CREATE TABLE test_table (string_value String) ENGINE = MergeTree ORDER BY string_value SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2712', () => {
    const query = `create table tvm (c0 UInt64, c1 UInt64, c2 UInt64, c3 UInt64, c4 UInt64, c5 UInt64, c6 UInt64, c7 UInt64, c8 UInt64, c9 UInt64, c10 UInt64, c11 UInt64, c12 UInt64, c13 UInt64, c14 UInt64, c15 UInt64, c16 UInt64, c17 UInt64, c18 UInt64, c19 UInt64, c20 UInt64, c21 UInt64, c22 UInt64, c23 UInt64, c24 UInt64, c25 UInt64, c26 UInt64, c27 UInt64, c28 UInt64, c29 UInt64, c30 UInt64, c31 UInt64, c32 UInt64, c33 UInt64, c34 UInt64, c35 UInt64, c36 UInt64, c37 UInt64, c38 UInt64, c39 UInt64, c40 UInt64, c41 UInt64, c42 UInt64, c43 UInt64, c44 UInt64, c45 UInt64, c46 UInt64, c47 UInt64, c48 UInt64, c49 UInt64, c50 UInt64, c51 UInt64, c52 UInt64, c53 UInt64, c54 UInt64, c55 UInt64, c56 UInt64, c57 UInt64, c58 UInt64, c59 UInt64, c60 UInt64, c61 UInt64, c62 UInt64, c63 UInt64, c64 UInt64, c65 UInt64, c66 UInt64, c67 UInt64, c68 UInt64, c69 UInt64, c70 UInt64, c71 UInt64, c72 UInt64, c73 UInt64, c74 UInt64, c75 UInt64, c76 UInt64, c77 UInt64, c78 UInt64, c79 UInt64, c80 UInt64, c81 UInt64, c82 UInt64, c83 UInt64, c84 UInt64, c85 UInt64, c86 UInt64, c87 UInt64, c88 UInt64, c89 UInt64, c90 UInt64, c91 UInt64, c92 UInt64, c93 UInt64, c94 UInt64, c95 UInt64, c96 UInt64, c97 UInt64, c98 UInt64, c99 UInt64, c100 UInt64, c101 UInt64, c102 UInt64, c103 UInt64, c104 UInt64, c105 UInt64, c106 UInt64, c107 UInt64, c108 UInt64, c109 UInt64, c110 UInt64, c111 UInt64, c112 UInt64, c113 UInt64, c114 UInt64, c115 UInt64, c116 UInt64, c117 UInt64, c118 UInt64, c119 UInt64, c120 UInt64, c121 UInt64, c122 UInt64, c123 UInt64, c124 UInt64, c125 UInt64, c126 UInt64, c127 UInt64, c128 UInt64, c129 UInt64, c130 UInt64, c131 UInt64, c132 UInt64, c133 UInt64, c134 UInt64, c135 UInt64, c136 UInt64, c137 UInt64, c138 UInt64, c139 UInt64, c140 UInt64, c141 UInt64, c142 UInt64, c143 UInt64, c144 UInt64, c145 UInt64, c146 UInt64, c147 UInt64, c148 UInt64, c149 UInt64, c150 UInt64, c151 UInt64, c152 UInt64, c153 UInt64, c154 UInt64, c155 UInt64, c156 UInt64, c157 UInt64, c158 UInt64, c159 UInt64, c160 UInt64, c161 UInt64, c162 UInt64, c163 UInt64, c164 UInt64, c165 UInt64, c166 UInt64, c167 UInt64, c168 UInt64, c169 UInt64, c170 UInt64, c171 UInt64, c172 UInt64, c173 UInt64, c174 UInt64, c175 UInt64, c176 UInt64, c177 UInt64, c178 UInt64, c179 UInt64, c180 UInt64, c181 UInt64, c182 UInt64, c183 UInt64, c184 UInt64, c185 UInt64, c186 UInt64, c187 UInt64, c188 UInt64, c189 UInt64, c190 UInt64, c191 UInt64, c192 UInt64, c193 UInt64, c194 UInt64, c195 UInt64, c196 UInt64, c197 UInt64, c198 UInt64, c199 UInt64, c200 UInt64, c201 UInt64, c202 UInt64, c203 UInt64, c204 UInt64, c205 UInt64, c206 UInt64, c207 UInt64, c208 UInt64, c209 UInt64, c210 UInt64, c211 UInt64, c212 UInt64, c213 UInt64, c214 UInt64, c215 UInt64, c216 UInt64, c217 UInt64, c218 UInt64, c219 UInt64, c220 UInt64, c221 UInt64, c222 UInt64, c223 UInt64, c224 UInt64, c225 UInt64, c226 UInt64, c227 UInt64, c228 UInt64, c229 UInt64, c230 UInt64, c231 UInt64, c232 UInt64, c233 UInt64, c234 UInt64, c235 UInt64, c236 UInt64, c237 UInt64, c238 UInt64, c239 UInt64, c240 UInt64, c241 UInt64, c242 UInt64, c243 UInt64, c244 UInt64, c245 UInt64, c246 UInt64, c247 UInt64, c248 UInt64, c249 UInt64, c250 UInt64, c251 UInt64, c252 UInt64, c253 UInt64, c254 UInt64, c255 UInt64, c256 UInt64, c257 UInt64, c258 UInt64, c259 UInt64, c260 UInt64, c261 UInt64, c262 UInt64, c263 UInt64, c264 UInt64, c265 UInt64, c266 UInt64, c267 UInt64, c268 UInt64, c269 UInt64, c270 UInt64, c271 UInt64, c272 UInt64, c273 UInt64, c274 UInt64, c275 UInt64, c276 UInt64, c277 UInt64, c278 UInt64, c279 UInt64, c280 UInt64, c281 UInt64, c282 UInt64, c283 UInt64, c284 UInt64, c285 UInt64, c286 UInt64, c287 UInt64, c288 UInt64, c289 UInt64, c290 UInt64, c291 UInt64, c292 UInt64, c293 UInt64, c294 UInt64, c295 UInt64, c296 UInt64, c297 UInt64, c298 UInt64, c299 UInt64) engine = MergeTree order by tuple() settings min_rows_for_wide_part = 10, min_bytes_for_wide_part=0, vertical_merge_algorithm_min_rows_to_activate=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2713', () => {
    const query = `CREATE TABLE nums(n UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2714', () => {
    const query = `create table test (x UInt64) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2715', () => {
    const query = `create table test (x LowCardinality(String) default 'Hello') engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2716', () => {
    const query = `CREATE MATERIALIZED VIEW test_materialized_view (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id AS SELECT id, value FROM test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2717', () => {
    const query = `CREATE TABLE test_table_data (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2718', () => {
    const query = `create table tab (d Int64, s AggregateFunction(groupUniqArrayArray, Array(UInt64)), c SimpleAggregateFunction(groupUniqArrayArray, Array(UInt64))) engine = SummingMergeTree() order by d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2719', () => {
    const query = `CREATE TABLE data_compact (
\`root.array\` Array(UInt8),
)
ENGINE = MergeTree()
ORDER BY tuple()
SETTINGS min_rows_for_wide_part=100, min_bytes_for_wide_part=1e9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2720', () => {
    const query = `CREATE TABLE data_wide (
\`root.array\` Array(UInt8),
)
ENGINE = MergeTree()
ORDER BY tuple()
SETTINGS min_rows_for_wide_part=0, min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2721', () => {
    const query = `CREATE TABLE t_02559 (a Int64, b Int64, c Int64) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2722', () => {
    const query = `CREATE TABLE t_02559 ( key UInt64,
value Array(String))
ENGINE = MergeTree
ORDER BY key
SETTINGS index_granularity=400, min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2723', () => {
    const query = `CREATE TABLE test_02559 (x UInt8, s String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2724', () => {
    const query = `CREATE TABLE test_02559__fuzz_20(\`id1\` Int16, \`id2\` Decimal(18, 14)) ENGINE = MergeTree ORDER BY id1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2725', () => {
    const query = `CREATE TABLE test_02559 (id1 UInt64, id2 UInt64) ENGINE=MergeTree ORDER BY id1 SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2726', () => {
    const query = `CREATE ROW POLICY 02559_filter_1 ON test_02559 USING id2=2 AS permissive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2727', () => {
    const query = `CREATE ROW POLICY 02559_filter_2 ON test_02559 USING id2<=2 AS restrictive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2728', () => {
    const query = `CREATE TABLE ip_bloom (
\`a\` UInt32,
\`ip4\` Nullable(IPv4),
\`ip6\` Nullable(IPv6),
INDEX x4 ip4 TYPE bloom_filter(0.1) GRANULARITY 3,
INDEX x6 ip6 TYPE bloom_filter(0.1) GRANULARITY 3
)
ENGINE = MergeTree
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2729', () => {
    const query = `CREATE TABLE check_system_tables (
name1 UInt8,
name2 UInt8,
name3 UInt8
) ENGINE = MergeTree()
ORDER BY name1
PARTITION BY name2
SAMPLE BY name1
SETTINGS min_bytes_for_wide_part = 0, compress_marks=false, compress_primary_key=false;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2730', () => {
    const query = `CREATE TABLE test_2554_log (n UInt32) ENGINE = Log SETTINGS storage_policy = 'default';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2731', () => {
    const query = `CREATE TABLE test_2554_tinylog (n UInt32) ENGINE = Log SETTINGS storage_policy = 'default';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2732', () => {
    const query = `CREATE TABLE test_2554_stripelog (n UInt32) ENGINE = StripeLog SETTINGS storage_policy = 's3_cache';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2733', () => {
    const query = `CREATE VIEW X TO Y AS SELECT 1; -- { clientError SYNTAX_ERROR } `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2734', () => {
    const query = `CREATE TABLE json_columns (n UInt32, s String) ENGINE = MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2735', () => {
    const query = `CREATE TABLE test_grouping_sets_predicate (
day_ Date,
type_1 String
)
ENGINE=MergeTree
ORDER BY day_;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2736', () => {
    const query = `CREATE TABLE t_json_analyzer (a Object('json')) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2737', () => {
    const query = `CREATE TABLE t_json_attach_partition(b UInt64, c Object('json')) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2738', () => {
    const query = `CREATE TABLE t_json_attach_partition(b UInt64, c JSON) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2739', () => {
    const query = `CREATE TABLE t_sparse_intersect (a UInt64, c Int64) ENGINE = MergeTree ORDER BY tuple() SETTINGS ratio_of_defaults_for_sparse_serialization = 0.8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2740', () => {
    const query = `CREATE TABLE tab (key Tuple(UInt64, UInt64), val UInt64) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2741', () => {
    const query = `CREATE TABLE sipHashKeyed_test ENGINE = Memory() AS SELECT 1 a, 'test' b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2742', () => {
    const query = `CREATE TABLE sipHashKeyed_keys (key Tuple(UInt64, UInt64), val UInt64) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2743', () => {
    const query = `CREATE TABLE sipHashKeyed_keys (key0 UInt64, key1 UInt64, val UInt64) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2744', () => {
    const query = `CREATE TABLE sipHashKeyed_keys (key0 UInt64, key1 UInt64) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2745', () => {
    const query = `CREATE TABLE store_sales (
\`ss_sold_date_sk\` Float64,
\`ss_sold_time_sk\` Float64,
\`ss_customer_sk\` Float64,
\`ss_cdemo_sk\` Float64,
\`ss_hdemo_sk\` Float64
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2746', () => {
    const query = `CREATE TABLE t0 (c0 Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2747', () => {
    const query = `CREATE TABLE t1 (c1 Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2748', () => {
    const query = `CREATE MATERIALIZED VIEW mv TO dst AS SELECT x FROM src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2749', () => {
    const query = `CREATE TABLE ip4test (ip IPv4) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2750', () => {
    const query = `create table test as format(TSV, 'cust_id UInt128', '20210129005809043707\\n123456789\\n987654321');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2751', () => {
    const query = `CREATE TABLE test_tuple_element (
tuple Tuple(k1 Nullable(UInt64), k2 UInt64)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2752', () => {
    const query = `CREATE TABLE t1_local ON CLUSTER test_shard_localhost(partition_col_1 String, tc1 int,tc2 int) ENGINE=MergeTree() PARTITION BY partition_col_1 ORDER BY tc1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2753', () => {
    const query = `CREATE TABLE 02540_date (txt String, x Date) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2754', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value_alias ALIAS concat('AliasValue_', toString(id)),
value_materialized MATERIALIZED concat('MaterializedValue_', toString(id))
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2755', () => {
    const query = `CREATE TABLE t_compact_vertical_merge (id UInt64, s LowCardinality(String), arr Array(UInt64)) ENGINE MergeTree ORDER BY id
SETTINGS
index_granularity = 16,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 100,
vertical_merge_algorithm_min_rows_to_activate = 1,
vertical_merge_algorithm_min_columns_to_activate = 1,
allow_vertical_merges_from_compact_to_wide_parts = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2756', () => {
    const query = `CREATE TABLE tbl ( v1_gor Nullable(Float64) CODEC(Gorilla),
v1_fpc Nullable(Float64) CODEC(FPC),
v2_gor Array(Float64) CODEC(Gorilla),
v2_fpc Array(Float64) CODEC(FPC),
v3_gor Array(Array(Float64)) CODEC(Gorilla),
v3_fpc Array(Array(Float64)) CODEC(FPC),
v4_gor Array(Nullable(Float64)) CODEC(Gorilla),
v4_fpc Array(Nullable(Float64)) CODEC(FPC),
v5_gor Array(Tuple(Float64)) CODEC(Gorilla),
v5_fpc Array(Tuple(Float64)) CODEC(FPC),
v6_gor Tuple(Float64) CODEC(Gorilla),
v6_fpc Tuple(Float64) CODEC(FPC),
v7_gor Tuple(Tuple(Float64)) CODEC(Gorilla),
v7_fpc Tuple(Tuple(Float64)) CODEC(FPC),
v8_gor Tuple(Nullable(Float64)) CODEC(Gorilla),
v8_fpc Tuple(Nullable(Float64)) CODEC(FPC),
v9_gor Tuple(Array(Float64)) CODEC(Gorilla),
v9_fpc Tuple(Array(Float64)) CODEC(FPC),
) Engine = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2757', () => {
    const query = `CREATE TABLE 02538_bf_ngrambf_map_values_test (\`row_id\` Int128, \`map\` Map(String, String), \`map_fixed\` Map(FixedString(2), String), INDEX map_values_ngrambf mapKeys(map) TYPE ngrambf_v1(4, 256, 2, 0) GRANULARITY 1,
INDEX map_fixed_values_ngrambf mapKeys(map_fixed) TYPE ngrambf_v1(4, 256, 2, 0) GRANULARITY 1)
ENGINE = MergeTree
ORDER BY row_id
SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2758', () => {
    const query = `CREATE TABLE test_table_data (
id UInt64,
value String
) ENGINE=MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2759', () => {
    const query = `CREATE TABLE test_table ENGINE=MergeTree() ORDER BY tuple() AS SELECT * FROM test_table_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2760', () => {
    const query = `CREATE TABLE wrong_metadata( column1 UInt64,
column2 UInt64,
column3 UInt64
)
ENGINE ReplicatedMergeTree('/test/{database}/tables/wrong_metadata', '1')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2761', () => {
    const query = `CREATE TABLE wrong_metadata_wide( column1 UInt64,
column2 UInt64,
column3 UInt64
)
ENGINE ReplicatedMergeTree('/test/{database}/tables/wrong_metadata_wide', '1')
ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2762', () => {
    const query = `CREATE TABLE test_tab (id UInt32, haystack String, needle String, replacement String)
engine = MergeTree()
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2763', () => {
    const query = `create table test (x Tuple(a UInt32, b UInt32)) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2764', () => {
    const query = `CREATE TABLE test_02536 (n Int8) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2765', () => {
    const query = `CREATE TABLE test_dist_02536 (n Int8) ENGINE=Distributed(test_cluster_two_shards, currentDatabase(), test_02536, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2766', () => {
    const query = `create table bug_delta_gorilla (value_bug UInt64 codec (Delta, Gorilla))
engine = MergeTree
order by tuple() SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi'
as (select 0 from numbers(20000000));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2767', () => {
    const query = `create table bug_delta_gorilla (val UInt64 codec (Delta, Gorilla)) engine = MergeTree
order by val SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2768', () => {
    const query = `CREATE TABLE sipHashKeyed_keys (\`a\` Map(String, String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2769', () => {
    const query = `CREATE TABLE test1 ( \`col1\` UInt64, \`col2\` Int8 ) ENGINE = MergeTree ORDER BY col1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2770', () => {
    const query = `CREATE TABLE test2 ( \`col1\` UInt64, \`col3\` Int16 ) ENGINE = MergeTree ORDER BY col1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2771', () => {
    const query = `CREATE TABLE users_02534 (id Int16, name String, INDEX bf_idx(name) TYPE minmax) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2772', () => {
    const query = `CREATE TABLE users_02534 (id Int16, name String) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2773', () => {
    const query = `create table test (x UInt32, y String) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2774', () => {
    const query = `CREATE TABLE t1__fuzz_8 (\`x\` LowCardinality(UInt32), \`str\` Nullable(Int16)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2775', () => {
    const query = `CREATE TABLE full_join__fuzz_4 (\`x\` LowCardinality(UInt32), \`s\` LowCardinality(String)) ENGINE = Join(\`ALL\`, FULL, x) SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2776', () => {
    const query = `CREATE TABLE ip_part_test ( ipv4 IPv4, ipv6 IPv6 ) ENGINE = MergeTree PARTITION BY ipv4 ORDER BY ipv4 AS SELECT '1.2.3.4', '::ffff:1.2.3.4';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2777', () => {
    const query = `CREATE TABLE ip_part_test ( ipv4 IPv4, ipv6 IPv6 ) ENGINE = MergeTree PARTITION BY ipv6 ORDER BY ipv6 AS SELECT '1.2.3.4', '::ffff:1.2.3.4';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2778', () => {
    const query = `CREATE TABLE foo(Id Int32, Val Nullable(Int32)) Engine=MergeTree ORDER BY Id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2779', () => {
    const query = `CREATE TABLE merge1(Id Int32, Val Int32) Engine=Merge(currentDatabase(), '^foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2780', () => {
    const query = `CREATE TABLE foo(Id Int32, Val Int32) Engine=MergeTree PARTITION BY Val ORDER BY Id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2781', () => {
    const query = `CREATE TABLE foo1(Id Int32, Val Decimal32(9)) Engine=MergeTree PARTITION BY Val ORDER BY Id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2782', () => {
    const query = `CREATE TABLE foo_merge as foo ENGINE=Merge(currentDatabase(), '^foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2783', () => {
    const query = `CREATE TABLE t2 (Id Int32, Val Int64, X UInt256) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2784', () => {
    const query = `CREATE TABLE 02526_keeper_map (\`key\` String, \`value\` UInt32) ENGINE = KeeperMap('/' || currentDatabase() || '/02526_kv_filter_types') PRIMARY KEY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2785', () => {
    const query = `CREATE TABLE 02526_rocksdb (\`key\` String, \`value\` UInt32) ENGINE = EmbeddedRocksDB PRIMARY KEY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2786', () => {
    const query = `CREATE TABLE test_table (
uid Int64,
start Int64,
end Int64,
insert_time DateTime
) ENGINE = MergeTree ORDER BY (uid, start);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2787', () => {
    const query = `CREATE DICTIONARY test_dictionary (
start Int64,
end Int64,
insert_time DateTime,
uid Int64
) PRIMARY KEY uid
LAYOUT(RANGE_HASHED())
RANGE(MIN start MAX end)
SOURCE(CLICKHOUSE(TABLE 'test_table' UPDATE_FIELD 'insert_time' UPDATE_LAG 10))
LIFETIME(MIN 1 MAX 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2788', () => {
    const query = `CREATE TEMPORARY TABLE table_merge_tree_02525 (
id UInt64,
info String
)
ENGINE = MergeTree
ORDER BY id
PRIMARY KEY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2789', () => {
    const query = `CREATE TEMPORARY TABLE table_log_02525 (
id UInt64,
info String
)
ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2790', () => {
    const query = `CREATE TEMPORARY TABLE table_stripe_log_02525 (
id UInt64,
info String
)
ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2791', () => {
    const query = `CREATE TEMPORARY TABLE table_tiny_log_02525 (
id UInt64,
info String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2792', () => {
    const query = `CREATE TEMPORARY TABLE table_replicated_merge_tree_02525 (
id UInt64,
info String
)
ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02525/table_replicated_merge_tree_02525', 'r1')
ORDER BY id
PRIMARY KEY id; -- { serverError INCORRECT_QUERY }
DROP TEMPORARY TABLE IF EXISTS table_keeper_map_02525;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2793', () => {
    const query = `CREATE TABLE test_table (
id UInt8,
value Nullable(Decimal(38, 2))
) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2794', () => {
    const query = `CREATE TABLE data_a_02187 (
\`a\` Nullable(Int64)
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2795', () => {
    const query = `CREATE TABLE test_s64_local (date Date, value Int64) ENGINE = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2796', () => {
    const query = `CREATE TABLE test_u64_local (date Date, value UInt64) ENGINE = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2797', () => {
    const query = `CREATE TABLE test_s64_distributed AS test_s64_local ENGINE = Distributed('test_shard_localhost', currentDatabase(), test_s64_local, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2798', () => {
    const query = `CREATE TABLE test_u64_distributed AS test_u64_local ENGINE = Distributed('test_shard_localhost', currentDatabase(), test_u64_local, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2799', () => {
    const query = `CREATE TABLE lwd_test_02521 (id UInt64, value String, event_time DateTime) ENGINE MergeTree()
ORDER BY id
SETTINGS min_bytes_for_wide_part = 0, index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2800', () => {
    const query = `create table test(day Date, id UInt32) engine=MergeTree partition by day order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2801', () => {
    const query = `CREATE TABLE test_table (
c0 String ALIAS c1,
c1 String,
c2 String,
) ENGINE = MergeTree ORDER BY c1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2802', () => {
    const query = `create table t1(a UInt32) engine=MergeTree order by tuple() partition by a % 4 settings index_granularity = 8192, index_granularity_bytes = 10485760;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2803', () => {
    const query = `create table t2(a UInt32) engine=MergeTree order by tuple() partition by a % 8 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2804', () => {
    const query = `create table t3(a UInt32) engine=MergeTree order by tuple() partition by a % 16 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2805', () => {
    const query = `create table t4(a UInt32) engine=MergeTree order by a partition by a % 4 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2806', () => {
    const query = `create table t5(a UInt32) engine=MergeTree order by a partition by a % 8 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2807', () => {
    const query = `create table t6(a UInt32) engine=MergeTree order by a partition by a % 16 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2808', () => {
    const query = `create table t7(a UInt32) engine=MergeTree order by a partition by intDiv(a, 2) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2809', () => {
    const query = `create table t8(a UInt32) engine=MergeTree order by a partition by intDiv(a, 2) * 2 + 1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2810', () => {
    const query = `create table t9(a UInt32) engine=MergeTree order by a partition by intDiv(a, 2) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2811', () => {
    const query = `create table t10(a UInt32, b UInt32) engine=MergeTree order by a partition by (intDiv(a, 2), intDiv(b, 3)) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2812', () => {
    const query = `create table t11(a UInt32, b UInt32) engine=MergeTree order by a partition by (intDiv(a, 2), intDiv(b, 3)) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2813', () => {
    const query = `create table t12(a UInt32, b UInt32) engine=MergeTree order by a partition by a % 16;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2814', () => {
    const query = `create table t13(a UInt32, b UInt32) engine=MergeTree order by a partition by (intDiv(a, 2), intDiv(b, 3)) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2815', () => {
    const query = `create table t14(a UInt32, b UInt32) engine=MergeTree order by a partition by intDiv(a, 2) + intDiv(b, 3) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2816', () => {
    const query = `create table t15(a UInt32, b UInt32) engine=MergeTree order by a partition by a < 90 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2817', () => {
    const query = `create table t16(a UInt32, b UInt32) engine=MergeTree order by a partition by a % 16 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2818', () => {
    const query = `create table t17(a UInt32, b UInt32) engine=MergeTree order by a partition by a < 90 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2819', () => {
    const query = `create table t18(a UInt32, b UInt32) engine=MergeTree order by a partition by a SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2820', () => {
    const query = `create table t19(a UInt32, b UInt32) engine=MergeTree order by a partition by a SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2821', () => {
    const query = `create table t20(a UInt32, b UInt32) engine=MergeTree order by a partition by a SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2822', () => {
    const query = `create table t21(a UInt64, b UInt64) engine=MergeTree order by a partition by a % 16 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2823', () => {
    const query = `create table t22(a UInt32, b UInt32) engine=SummingMergeTree order by a partition by a % 16 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2824', () => {
    const query = `create table simple_agg_groupArrayLastArray (key Int, value SimpleAggregateFunction(groupArrayLastArray(5), Array(UInt64))) engine=AggregatingMergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2825', () => {
    const query = `CREATE TABLE t (x Decimal(18, 3)) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2826', () => {
    const query = `CREATE TABLE t (x DateTime64(3)) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2827', () => {
    const query = `CREATE TABLE test_table_join_1 (id UInt64, value String) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2828', () => {
    const query = `CREATE TABLE test_table_join_2 (id UInt64, value String) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2829', () => {
    const query = `CREATE TABLE test_table_join_3 (id UInt64, value String ) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2830', () => {
    const query = `CREATE TABLE foo__fuzz_0 (\`Id\` Int64, \`Val\` Nullable(Int32)) ENGINE = MergeTree ORDER BY Id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2831', () => {
    const query = `CREATE TABLE merge1 AS foo ENGINE = Merge(currentDatabase(), '^foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2832', () => {
    const query = `CREATE TABLE merge2 (\`Id\` Int32, \`Val\` Int32) ENGINE = Merge(currentDatabase(), '^foo');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2833', () => {
    const query = `CREATE TABLE merge3 (\`Id\` Int32, \`Val\` Int32) ENGINE = Merge(currentDatabase(), '^foo__fuzz_0');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2834', () => {
    const query = `CREATE TABLE kek (a UInt32) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2835', () => {
    const query = `CREATE MATERIALIZED VIEW kekv ENGINE = MergeTree ORDER BY tuple() AS SELECT * FROM kek;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2836', () => {
    const query = `CREATE OR REPLACE TABLE alias10__fuzz_13 (\`Id\` Array(Array(UInt256)), \`EventDate\` Array(String), \`field1\` Array(Array(Nullable(Int8))), \`field2\` Array(Date), \`field3\` Array(Array(Array(UInt128)))) ENGINE = Distributed(test_shard_localhost, currentDatabase(), alias_local10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2837', () => {
    const query = `CREATE OR REPLACE TABLE alias_local10 ( Id Int8,
EventDate Date DEFAULT '2000-01-01',
field1 Int8,
field2 String,
field3 ALIAS CASE WHEN field1 = 1 THEN field2 ELSE '0' END
) ENGINE = MergeTree(EventDate, (Id, EventDate), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2838', () => {
    const query = `CREATE OR REPLACE TABLE distributed (x Array(Int8)) ENGINE = Distributed(test_shard_localhost, currentDatabase(), local);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2839', () => {
    const query = `CREATE TABLE temp (
\`id\` UInt64,
\`field1\` UUID,
\`field2\` UUID,
\`field3\` Int64,
\`field4\` Int64,
\`field5\` LowCardinality(String),
\`field6\` FixedString(3),
\`field7\` String,
\`field8\` Nullable(UUID),
\`event_at\` DateTime('UTC'),
\`order_id\` Nullable(UUID),
\`identity\` LowCardinality(String)
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(event_at)
ORDER BY (field1, event_at, field2, field5, id)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2840', () => {
    const query = `CREATE TABLE t1 (c0 Int32, PRIMARY KEY (c0)) ENGINE = MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2841', () => {
    const query = `CREATE TABLE test_table (value String) ENGINE=ExecutablePool('nonexist.py', 'TabSeparated', (foobar)); -- {serverError BAD_ARGUMENTS} CREATE TABLE test_table (value String) ENGINE=ExecutablePool('nonexist.py', 'TabSeparated', '(SELECT 1)'); -- {serverError BAD_ARGUMENTS}
CREATE TABLE test_table (value String) ENGINE=ExecutablePool('nonexist.py', 'TabSeparated', [1,2,3]); -- {serverError BAD_ARGUMENTS}
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2842', () => {
    const query = `CREATE TABLE video_log (
\`datetime\` DateTime,
\`user_id\` UInt64,
\`device_id\` UInt64,
\`domain\` LowCardinality(String),
\`bytes\` UInt64,
\`duration\` UInt64
)
ENGINE = MergeTree
PARTITION BY toDate(datetime)
ORDER BY (user_id, device_id)
SETTINGS index_granularity_bytes=10485760, index_granularity=8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2843', () => {
    const query = `CREATE TABLE video_log_result__fuzz_0 (
\`hour\` Nullable(DateTime),
\`sum_bytes\` UInt64,
\`avg_duration\` Float64
)
ENGINE = MergeTree
PARTITION BY toDate(hour)
ORDER BY sum_bytes
SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2844', () => {
    const query = `CREATE TABLE rng (
\`user_id_raw\` UInt64,
\`device_id_raw\` UInt64,
\`domain_raw\` UInt64,
\`bytes_raw\` UInt64,
\`duration_raw\` UInt64
)
ENGINE = GenerateRandom(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2845', () => {
    const query = `CREATE TABLE test1__fuzz_37 (\`i\` Date) ENGINE = MergeTree ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2846', () => {
    const query = `CREATE TABLE t (x UInt8, PROJECTION p (SELECT x GROUP BY x)) ENGINE = MergeTree ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2847', () => {
    const query = `CREATE TABLE fh(a_value UInt32, b_value Float64, c_value Float64, d_value Float64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2848', () => {
    const query = `CREATE DICTIONARY null_dict ( id              UInt64,
val             UInt8,
default_val     UInt8 DEFAULT 123,
nullable_val    Nullable(UInt8)
)
PRIMARY KEY id
SOURCE(NULL())
LAYOUT(FLAT())
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2849', () => {
    const query = `CREATE DICTIONARY null_ip_dict ( network String,
val     UInt8 DEFAULT 77
)
PRIMARY KEY network
SOURCE(NULL())
LAYOUT(IP_TRIE())
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2850', () => {
    const query = `create table if not exists t (\`arr.key\` Array(LowCardinality(String)), \`arr.value\` Array(LowCardinality(String))) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2851', () => {
    const query = `CREATE TABLE t (
id Int64,
d String,
p Map(String, String)
)
ENGINE = ReplacingMergeTree order by id settings index_granularity = 0; -- { serverError BAD_ARGUMENTS }
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2852', () => {
    const query = `CREATE TABLE a (k UInt64, a1 UInt64, a2 String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2853', () => {
    const query = `CREATE TABLE b (k UInt64, b1 UInt64, b2 String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2854', () => {
    const query = `CREATE TABLE c (k UInt64, c1 UInt64, c2 String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2855', () => {
    const query = `CREATE TABLE d (k UInt64, d1 UInt64, d2 String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2856', () => {
    const query = `CREATE TABLE table_02513 (n UInt64) ENGINE=MergeTree() ORDER BY tuple() SETTINGS index_granularity=100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2857', () => {
    const query = `CREATE TABLE datetime_date_table ( col_date Date,
col_datetime DateTime,
col_datetime64 DateTime64(3),
col_date_string String,
col_datetime_string String,
col_datetime64_string DateTime64,
col_date_lc LowCardinality(String),
col_datetime_lc LowCardinality(String),
col_datetime64_lc LowCardinality(String),
PRIMARY KEY col_date
) ENGINE = MergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2858', () => {
    const query = `CREATE TABLE products (\`price\` UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2859', () => {
    const query = `CREATE TABLE x ( \`arr.key\` Array(String), \`arr.value\` Array(String), \`n\` String ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2860', () => {
    const query = `create table table1 ( col1 Int32,
col2 Int32
)
ENGINE = MergeTree
partition by tuple()
order by col1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2861', () => {
    const query = `CREATE TABLE data_table (id UInt64, longitude Float64, latitude Float64) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2862', () => {
    const query = `CREATE TABLE table (uid UUID, date DateTime('Asia/Kamchatka')) ENGINE = MergeTree ORDER BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2863', () => {
    const query = `create table test_graphite (key UInt32, Path String, Time DateTime('UTC'), Value UInt8, Version UInt32, col UInt64) engine = GraphiteMergeTree('graphite_rollup') order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2864', () => {
    const query = `create dictionary regexp_dict1 (
regexp String,
name String,
version Nullable(UInt64),
comment String default 'nothing'
)
PRIMARY KEY(regexp)
SOURCE(CLICKHOUSE(TABLE 'regexp_dictionary_source_table'))
LIFETIME(0)
LAYOUT(regexp_tree);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2865', () => {
    const query = `CREATE TABLE needle_table (
key String
)
ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2866', () => {
    const query = `CREATE TEMPORARY TABLE my_table (col_date Date, col_date32 Date32, col_datetime DateTime('UTC'), col_datetime32 DateTime32('UTC'), col_datetime64 DateTime64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2867', () => {
    const query = `CREATE TABLE test_02504 (\`a\` UInt32,\`b\` UInt32) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2868', () => {
    const query = `CREATE TABLE test54378 (\`part_date\` Date, \`pk_date\` Date, \`date\` Date) ENGINE = MergeTree(part_date, pk_date, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2869', () => {
    const query = `CREATE TABLE 02501_test(\`a\` UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2870', () => {
    const query = `CREATE TABLE 02501_dist(\`a\` UInt64) ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), 02501_test);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2871', () => {
    const query = `CREATE VIEW 02501_view(\`a\` UInt64) AS SELECT a FROM 02501_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2872', () => {
    const query = `CREATE TABLE test_table (
b Int64,
a Int64,
grp_aggreg AggregateFunction(groupArrayArray, Array(UInt64))
) ENGINE = MergeTree() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2873', () => {
    const query = `CREATE TABLE 02500_nested(nes Nested(a Int32, b Int32)) Engine=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2874', () => {
    const query = `CREATE TABLE 02500_nested(nes Nested(a Int32, b Int32), z Int32) Engine=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2875', () => {
    const query = `CREATE TABLE 02500_nested(nes Array(Tuple(a Int32, b Int32)), z Int32) Engine=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2876', () => {
    const query = `CREATE TABLE test_table (
f1 Int32,
f2 Int32,
pk Int32
) ENGINE = MergeTree PARTITION BY pk ORDER BY f1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2877', () => {
    const query = `CREATE VIEW test_view AS SELECT f1, f2 FROM test_table WHERE pk = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2878', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String,
INDEX value_idx (value) TYPE set(1000) GRANULARITY 1
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2879', () => {
    const query = `CREATE TABLE test_table (id UInt64, value Tuple(a UInt64)) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2880', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value UInt64
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2881', () => {
    const query = `CREATE TABLE t1 (key UInt64, a UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2882', () => {
    const query = `CREATE TABLE t2 (key UInt64, a UInt64) ENGINE = Join(ALL, RIGHT, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2883', () => {
    const query = `CREATE TABLE t_source_part_is_intact (id UInt64, u UInt64) ENGINE = MergeTree ORDER BY id
SETTINGS min_bytes_for_wide_part=1, ratio_of_defaults_for_sparse_serialization = 0.5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2884', () => {
    const query = `create table fat_granularity (x UInt32, fat FixedString(160000)) engine = MergeTree order by x settings storage_policy = 's3_cache';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2885', () => {
    const query = `CREATE TABLE t_s3_events_02496 (a UInt64) ENGINE = S3(s3_conn, filename = 'test_02496_{_partition_id}', format = Parquet)
PARTITION BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2886', () => {
    const query = `CREATE TABLE t_s3_filter_02495 (a UInt64) ENGINE = S3(s3_conn, filename = 'test_02495_{_partition_id}', format = Parquet)
PARTITION BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2887', () => {
    const query = `CREATE TABLE tj (key2 UInt64, key1 Int64, a UInt64, b UInt64, x UInt64, y UInt64) ENGINE = Join(ALL, RIGHT, key1, key2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2888', () => {
    const query = `CREATE TABLE t1 (id2 UInt64, id1 Int64, val UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2889', () => {
    const query = `CREATE TABLE t (key2 UInt64, key1 Int64, b UInt64, x UInt64, val UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2890', () => {
    const query = `CREATE TABLE wikistat1 (
time DateTime,
project LowCardinality(String),
subproject LowCardinality(String),
path String,
hits UInt64,
PROJECTION total
(
SELECT
project,
subproject,
path,
sum(hits),
count()
GROUP BY
project,
subproject,
path
)
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/02494_zero_copy_and_projection', '1')
ORDER BY (path, time)
SETTINGS old_parts_lifetime = 1, cleanup_delay_period = 0, cleanup_delay_period_random_add = 0,
cleanup_thread_preferred_points_per_iteration=0, allow_remote_fs_zero_copy_replication=1, min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2891', () => {
    const query = `CREATE TABLE wikistat2 (
time DateTime,
project LowCardinality(String),
subproject LowCardinality(String),
path String,
hits UInt64,
PROJECTION total
(
SELECT
project,
subproject,
path,
sum(hits),
count()
GROUP BY
project,
subproject,
path
)
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/02494_zero_copy_and_projection', '2')
ORDER BY (path, time)
SETTINGS old_parts_lifetime = 1, cleanup_delay_period = 0, cleanup_delay_period_random_add = 0,
cleanup_thread_preferred_points_per_iteration=0, allow_remote_fs_zero_copy_replication=1, min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2892', () => {
    const query = `CREATE TABLE tbl (key UInt64, agg UInt64) ENGINE = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2893', () => {
    const query = `CREATE TABLE system (c UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2894', () => {
    const query = `CREATE TABLE system.system (c UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2895', () => {
    const query = `CREATE TABLE t(c String) ENGINE=MergeTree ORDER BY c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2896', () => {
    const query = `CREATE TABLE t_cache_sparse (id UInt64, v UInt64) ENGINE = MergeTree ORDER BY id
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2897', () => {
    const query = `CREATE DATABASE db1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2898', () => {
    const query = `CREATE DATABASE db2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2899', () => {
    const query = `CREATE TABLE db1.tab(a UInt64, PRIMARY KEY a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2900', () => {
    const query = `CREATE TABLE db2.tab(a UInt64, PRIMARY KEY a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2901', () => {
    const query = `CREATE TABLE eligible_test (a String) ENGINE=MergeTree ORDER BY a; --  SETTINGS use_query_cache = true; -- SETTINGS rejected as unknown SELECT COUNT(*) FROM system.query_cache;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2902', () => {
    const query = `CREATE TABLE tab(c UInt64) ENGINE = Memory AS SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2903', () => {
    const query = `CREATE TABLE tab(c UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2904', () => {
    const query = `CREATE TABLE t(timestamp DateTime, day ALIAS toYYYYMMDD(timestamp)) Engine = MergeTree ORDER BY timestamp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2905', () => {
    const query = `CREATE TABLE test_table ( fingerprint UInt16,
fields Nested(name Array(UInt32), value String)
) ENGINE = MergeTree
ORDER BY fingerprint;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2906', () => {
    const query = `create table t (x UInt64) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2907', () => {
    const query = `CREATE TABLE table1 (column1 String) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2908', () => {
    const query = `CREATE TABLE table2 (column1 String, column2 String, column3 String) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2909', () => {
    const query = `CREATE TABLE table3 (column3 String) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2910', () => {
    const query = `create table data_02491 (key Int) engine=MergeTree() order by tuple() settings old_parts_lifetime=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2911', () => {
    const query = `CREATE TABLE test (uid String, version UInt32, is_deleted UInt8) ENGINE = ReplacingMergeTree(version) Order by (uid) settings allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2912', () => {
    const query = `CREATE TABLE test (uid String, version UInt32, is_deleted UInt8) ENGINE = ReplacingMergeTree(version) Order by (uid) SETTINGS clean_deleted_rows='Always', allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2913', () => {
    const query = `CREATE TABLE test (uid String, version UInt32, is_deleted UInt8) ENGINE = ReplacingMergeTree(version, is_deleted) Order by (uid) settings allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2914', () => {
    const query = `CREATE TABLE test (uid String, version UInt32, is_deleted UInt8) ENGINE = ReplacingMergeTree(version, is_deleted) Order by (uid) SETTINGS clean_deleted_rows='Always', allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2915', () => {
    const query = `CREATE TABLE testCleanupR1 (uid String, version UInt32, is_deleted UInt8) ENGINE = ReplicatedReplacingMergeTree('/clickhouse/{database}/tables/test_cleanup/', 'r1', version, is_deleted)
ORDER BY uid settings allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2916', () => {
    const query = `CREATE TABLE testSettingsR1 (col1 String, version UInt32, is_deleted UInt8) ENGINE = ReplicatedReplacingMergeTree('/clickhouse/{database}/tables/test_setting/', 'r1', version, is_deleted)
ORDER BY col1
SETTINGS clean_deleted_rows = 'Always', allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2917', () => {
    const query = `CREATE TABLE test (uid String, version UInt32, is_deleted String) ENGINE = ReplacingMergeTree(version, is_deleted) Order by (uid); -- { serverError BAD_TYPE_OF_FIELD } CREATE TABLE test (uid String, version UInt32, is_deleted UInt8) ENGINE = ReplacingMergeTree(version, is_deleted) Order by (uid);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2918', () => {
    const query = `CREATE TABLE test (uid String, version UInt32, is_deleted UInt8) ENGINE = ReplicatedReplacingMergeTree('/clickhouse/{database}/tables/no_cleanup/', 'r1', version, is_deleted) Order by (uid);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2919', () => {
    const query = `CREATE TABLE testMT (uid String, version UInt32, is_deleted UInt8) ENGINE = MergeTree() Order by (uid) SETTINGS clean_deleted_rows='Always', allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2920', () => {
    const query = `CREATE TABLE testSummingMT (uid String, version UInt32, is_deleted UInt8) ENGINE = SummingMergeTree() Order by (uid) SETTINGS clean_deleted_rows='Always', allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2921', () => {
    const query = `CREATE TABLE testAggregatingMT (uid String, version UInt32, is_deleted UInt8) ENGINE = AggregatingMergeTree() Order by (uid) SETTINGS clean_deleted_rows='Always', allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2922', () => {
    const query = `CREATE TABLE testCollapsingMT (uid String, version UInt32, is_deleted UInt8, sign Int8) ENGINE = CollapsingMergeTree(sign) Order by (uid) SETTINGS clean_deleted_rows='Always', allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2923', () => {
    const query = `CREATE TABLE testVersionedCMT (uid String, version UInt32, is_deleted UInt8, sign Int8) ENGINE = VersionedCollapsingMergeTree(sign, version) Order by (uid) SETTINGS clean_deleted_rows='Always', allow_experimental_replacing_merge_with_cleanup=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2924', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value_1 String,
value_2 String,
value_3 String,
INDEX value_1_idx (value_1) TYPE bloom_filter GRANULARITY 1,
INDEX value_2_idx (value_2) TYPE ngrambf_v1(3, 512, 2, 0) GRANULARITY 1,
INDEX value_3_idx (value_3) TYPE tokenbf_v1(512, 3, 0) GRANULARITY 1
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2925', () => {
    const query = `create table rmt (n int, ts DateTime64(8, 'UTC')) engine=ReplicatedMergeTree('/test/02487/{database}/rmt', '1') order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2926', () => {
    const query = `create index idx2 on rmt date(ts) TYPE MinMax GRANULARITY 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2927', () => {
    const query = `create table rmt2 (n int, ts DateTime64(8, 'UTC'), index idx1 date(ts) TYPE MinMax GRANULARITY 1, index idx2 date(ts) TYPE MinMax GRANULARITY 1) engine=ReplicatedMergeTree('/test/02487/{database}/rmt', '2') order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2928', () => {
    const query = `create table rmt (n int) engine=ReplicatedMergeTree('/test/02468/{database}', '1') order by tuple() partition by n % 2 settings replicated_max_ratio_of_wrong_parts=0, max_suspicious_broken_parts=0, max_suspicious_broken_parts_bytes=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2929', () => {
    const query = `create table rmt1 (n int) engine=ReplicatedMergeTree('/test/02468/{database}', '2') order by tuple() partition by n % 2 settings replicated_max_ratio_of_wrong_parts=0, max_suspicious_broken_parts=0, max_suspicious_broken_parts_bytes=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2930', () => {
    const query = `create table rmt2 (n int) engine=ReplicatedMergeTree('/test/02468/{database}2', '1') order by tuple() partition by n % 2 settings replicated_max_ratio_of_wrong_parts=0, max_suspicious_broken_parts=0, max_suspicious_broken_parts_bytes=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2931', () => {
    const query = `create table rmt3 (n int) engine=ReplicatedMergeTree('/test/02468/{database}3', '1') order by tuple() settings replicated_max_ratio_of_wrong_parts=0, max_suspicious_broken_parts=0, max_suspicious_broken_parts_bytes=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2932', () => {
    const query = `create table rmt1 (n int, m int, k int) engine=ReplicatedMergeTree('/test/02485/{database}/rmt', '1') order by n settings storage_policy='s3_cache', allow_remote_fs_zero_copy_replication=1, old_parts_lifetime=60, cleanup_delay_period=60, max_cleanup_delay_period=60, cleanup_delay_period_random_add=1, min_bytes_for_wide_part=0, simultaneous_parts_removal_limit=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2933', () => {
    const query = `create table rmt2 (n int, m int, k int) engine=ReplicatedMergeTree('/test/02485/{database}/rmt', '2') order by n settings storage_policy='s3_cache', allow_remote_fs_zero_copy_replication=1, old_parts_lifetime=0, cleanup_delay_period=0, max_cleanup_delay_period=1, cleanup_delay_period_random_add=1, min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2934', () => {
    const query = `CREATE FUNCTION 02484_plusone AS (a) -> a + 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2935', () => {
    const query = `CREATE FUNCTION 02484_plustwo AS (a) -> a + 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2936', () => {
    const query = `CREATE FUNCTION 02484_plusthreemonths AS (a) -> a + INTERVAL 3 MONTH;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2937', () => {
    const query = `CREATE TABLE 02484_substitute_udf (id UInt32, dt DateTime, number UInt32)  ENGINE=MergeTree() 
ORDER BY 02484_plusone(id)
PARTITION BY 02484_plustwo(id)
SAMPLE BY 02484_plusone(id)
TTL 02484_plusthreemonths(dt);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2938', () => {
    const query = `CREATE FUNCTION 02484_plusthree AS (a) -> a + 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2939', () => {
    const query = `CREATE FUNCTION 02484_plusthreedays AS (a) -> a + INTERVAL 3 DAY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2940', () => {
    const query = `CREATE FUNCTION 02483_plusone AS (a) -> a + 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2941', () => {
    const query = `CREATE TABLE 02483_substitute_udf (id UInt32, number UInt32 DEFAULT 02483_plusone(id)) ENGINE=MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2942', () => {
    const query = `CREATE FUNCTION 02483_plustwo AS (a) -> a + 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2943', () => {
    const query = `CREATE FUNCTION 02483_plusthree AS (a) -> a + 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2944', () => {
    const query = `create table test (line String, _file String, _path String) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2945', () => {
    const query = `CREATE DATABASE IF NOT EXISTS replicated_database_test ENGINE = Replicated('some/path/' || currentDatabase() || '/replicated_database_test', 'shard_1', 'replica_1') SETTINGS max_broken_tables_ratio=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2946', () => {
    const query = `CREATE TABLE range_key_dictionary_source_table__fuzz_323 (
\`key\` UInt256,
\`start_date\` Int8,
\`end_date\` LowCardinality(UInt256),
\`value\` Tuple(UInt8, Array(DateTime), Decimal(9, 1), Array(Int16), Array(UInt8)),
\`value_nullable\` UUID
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2947', () => {
    const query = `CREATE TABLE tmp_02482 (i UInt64, n LowCardinality(String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2948', () => {
    const query = `CREATE TABLE dist_02482(i UInt64, n LowCardinality(Nullable(String))) ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), tmp_02482, i);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2949', () => {
    const query = `create table test (x LowCardinality(Int32)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2950', () => {
    const query = `create table test_02481_mismatch_files (a UInt64, b String) engine = S3(s3_conn, filename='test_02481_mismatch_files_{_partition_id}', format=Parquet) partition by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2951', () => {
    const query = `CREATE TABLE test_filter(a Int32, b Int32, c Int32) ENGINE = MergeTree() ORDER BY a SETTINGS index_granularity = 3, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2952', () => {
    const query = `CREATE TABLE gen (
repo_name String,
event_type Enum8('CommitCommentEvent' = 1, 'CreateEvent' = 2, 'DeleteEvent' = 3, 'ForkEvent' = 4, 'GollumEvent' = 5, 'IssueCommentEvent' = 6, 'IssuesEvent' = 7, 'MemberEvent' = 8, 'PublicEvent' = 9, 'PullRequestEvent' = 10, 'PullRequestReviewCommentEvent' = 11, 'PushEvent' = 12, 'ReleaseEvent' = 13, 'SponsorshipEvent' = 14, 'WatchEvent' = 15, 'GistEvent' = 16, 'FollowEvent' = 17, 'DownloadEvent' = 18, 'PullRequestReviewEvent' = 19, 'ForkApplyEvent' = 20, 'Event' = 21, 'TeamAddEvent' = 22),
actor_login String,
created_at DateTime,
action Enum8('none' = 0, 'created' = 1, 'added' = 2, 'edited' = 3, 'deleted' = 4, 'opened' = 5, 'closed' = 6, 'reopened' = 7, 'assigned' = 8, 'unassigned' = 9, 'labeled' = 10, 'unlabeled' = 11, 'review_requested' = 12, 'review_request_removed' = 13, 'synchronize' = 14, 'started' = 15, 'published' = 16, 'update' = 17, 'create' = 18, 'fork' = 19, 'merged' = 20),
number UInt32,
merged_at DateTime
)
ENGINE = GenerateRandom;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2953', () => {
    const query = `CREATE TABLE github_events AS gen ENGINE=MergeTree ORDER BY (event_type, repo_name, created_at) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2954', () => {
    const query = `CREATE TABLE 02481_mergetree(x UInt64, y UInt64, arr Array(String)) ENGINE = MergeTree ORDER BY x SAMPLE BY x SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2955', () => {
    const query = `CREATE TABLE 02481_merge(x UInt64, y UInt64, arr Array(String)) ENGINE = Merge(currentDatabase(), '^(02481_mergetree)\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2956', () => {
    const query = `create table issue_46128 ( 	id Int64,
	a LowCardinality(Nullable(String)),
	b LowCardinality(Nullable(String))
) Engine = MergeTree order by id
as  select number%100, 'xxxx', 'yyyy' from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2957', () => {
    const query = `CREATE TABLE test_rlp (a Int32, b Int32) ENGINE=MergeTree() ORDER BY a SETTINGS index_granularity=5, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2958', () => {
    const query = `CREATE ROW POLICY test_rlp_policy ON test_rlp FOR SELECT USING c%2 == 0 TO default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2959', () => {
    const query = `CREATE TABLE arrays_test (
s String,
arr1 Array(UInt8),
map1 Map(UInt8, String),
map2 Map(UInt8, String)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2960', () => {
    const query = `CREATE TABLE test_table_join_1 (
id UInt8,
value String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2961', () => {
    const query = `CREATE TABLE test_table_join_2 (
id UInt16,
value String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2962', () => {
    const query = `create table tab (a Int32, b Int32, c Int32, d Int32) engine = MergeTree order by (a, b, c);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2963', () => {
    const query = `create table test (val LowCardinality(Float32)) engine MergeTree order by val;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2964', () => {
    const query = `create table test_02480_support_wildcard_write (a UInt64, b String) engine = S3(s3_conn, filename='test_02480_support_wildcard_{_partition_id}', format=Parquet) partition by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2965', () => {
    const query = `create table test_02480_support_wildcard_write2 (a UInt64, b String) engine = S3(s3_conn, filename='prefix/test_02480_support_wildcard_{_partition_id}', format=Parquet) partition by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2966', () => {
    const query = `create table test_table (A Nullable(String), B Nullable(String)) engine MergeTree order by (A,B) settings index_granularity = 1, allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2967', () => {
    const query = `CREATE TABLE dm_metric_small2 (\`x\` Nullable(Int64), \`y\` Nullable(Int64), \`z\` Nullable(Int64)) ENGINE = MergeTree() ORDER BY (x, y, z) SETTINGS index_granularity = 1, allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2968', () => {
    const query = `CREATE TABLE lc_00906__fuzz_46 (\`b\` Int64) ENGINE = MergeTree ORDER BY b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2969', () => {
    const query = `CREATE TABLE testing (
a String,
b String,
c Int32,
d Int32,
e Int32,
PROJECTION proj_1
(
SELECT c ORDER BY d
),
PROJECTION proj_2
(
SELECT c ORDER BY e, d
)
)
ENGINE = MergeTree() PRIMARY KEY (a) SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2970', () => {
    const query = `CREATE TABLE testing (
a String,
b String,
c String,
d String,
PROJECTION proj_1
(
SELECT b, c
ORDER BY d
)
)
ENGINE = MergeTree()
PRIMARY KEY (a)
ORDER BY (a, b)
SETTINGS index_granularity = 8192, index_granularity_bytes = 0, min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2971', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2972', () => {
    const query = `CREATE TABLE argmaxstate_hex_small (
\`v\` String,
\`state\` String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2973', () => {
    const query = `CREATE TABLE argmaxstate_hex_large (
\`v\` String,
\`state\` String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2974', () => {
    const query = `CREATE TABLE argmaxstate_hex_empty (
\`v\` String,
\`state\` String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2975', () => {
    const query = `create table aggr (n int, s AggregateFunction(max, String)) engine=MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2976', () => {
    const query = `create table t (c1 Int64, c2 String, c3 DateTime, c4 Int8, c5 String, c6 String, c7 String, c8 String, c9 String, c10 String, c11 String, c12 String, c13 Int8, c14 Int64, c15 String, c16 String, c17 String, c18 Int64, c19 Int64, c20 Int64) engine ReplicatedMergeTree('/clickhouse/test/{database}/test_02477', '1') order by c18 SETTINGS allow_remote_fs_zero_copy_replication=1, index_granularity=8192, index_granularity_bytes='10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2977', () => {
    const query = `CREATE TABLE t_logical_expressions_optimizer_low_cardinality (a LowCardinality(String), b UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2978', () => {
    const query = `CREATE TABLE fuse_tbl(a Nullable(Int32), b Int32) Engine = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2979', () => {
    const query = `create table test_rows_compact_part__fuzz_11 (x UInt32) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2980', () => {
    const query = `CREATE TABLE test_table (
id UInt64
) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2981', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String,
value_array Array(UInt64)
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2982', () => {
    const query = `CREATE TABLE 02476_query_parameters_insert (x Int32) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2983', () => {
    const query = `CREATE TABLE fuse_tbl(a Nullable(Int8), b Int8) Engine = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2984', () => {
    const query = `CREATE TABLE tab1 (a1 Int32, b1 Int32, val UInt64) ENGINE = MergeTree ORDER BY a1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2985', () => {
    const query = `CREATE TABLE tab2 (a2 LowCardinality(Int32), b2 Int32) ENGINE = MergeTree ORDER BY a2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2986', () => {
    const query = `create table unhex_in_fix_string_table ( dt Date, s1 FixedString(20), s2 String) engine=MergeTree partition by dt order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2987', () => {
    const query = `CREATE DATABASE conv_mian ENGINE QALL(COLUMNS('|T.D'),¸mp} -- { clientError SYNTAX_ERROR } `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2988', () => {
    const query = `CREATE TABLE prewhere_int128 (a Int128) ENGINE=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2989', () => {
    const query = `CREATE TABLE prewhere_int256 (a Int256) ENGINE=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2990', () => {
    const query = `CREATE TABLE prewhere_uint128 (a UInt128) ENGINE=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2991', () => {
    const query = `CREATE TABLE prewhere_uint256 (a UInt256) ENGINE=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2992', () => {
    const query = `CREATE TABLE tdm__fuzz_23 (\`x\` UInt256) ENGINE = MergeTree ORDER BY x SETTINGS write_final_mark = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2993', () => {
    const query = `CREATE TABLE alias_2__fuzz_25 (\`dt\` LowCardinality(Date), \`col\` DateTime, \`col2\` Nullable(Int256), \`colAlias0\` Nullable(DateTime64(3)) ALIAS col, \`colAlias3\` Nullable(Int32) ALIAS col3 + colAlias0, \`colAlias1\` LowCardinality(UInt16) ALIAS colAlias0 + col2, \`colAlias2\` LowCardinality(Int32) ALIAS colAlias0 + colAlias1, \`col3\` Nullable(UInt8)) ENGINE = MergeTree ORDER BY dt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2994', () => {
    const query = `CREATE TABLE bloom_filter_nullable_index__fuzz_0 (
\`order_key\` UInt64,
\`str\` Nullable(String),
INDEX idx str TYPE bloom_filter GRANULARITY 1
)
ENGINE = MergeTree ORDER BY order_key SETTINGS index_granularity = 6, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2995', () => {
    const query = `CREATE TABLE bloom_filter_nullable_index__fuzz_1 (
\`order_key\` UInt64,
\`str\` String,
INDEX idx str TYPE bloom_filter GRANULARITY 1
)
ENGINE = MergeTree ORDER BY order_key SETTINGS index_granularity = 6, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2996', () => {
    const query = `CREATE TABLE nullable_string_value__fuzz_2 (\`value\` LowCardinality(String)) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2997', () => {
    const query = `CREATE TABLE t_max_rows_to_read (a UInt64) ENGINE = MergeTree ORDER BY a
SETTINGS index_granularity = 4, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2998', () => {
    const query = `CREATE TABLE series__fuzz_35 (\`i\` UInt8, \`x_value\` Decimal(18, 14), \`y_value\` DateTime) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 2999', () => {
    const query = `CREATE TABLE mt_match_pk (v String) ENGINE = MergeTree ORDER BY v SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3000', () => {
    const query = `CREATE TABLE welch_ttest__fuzz_7 (left UInt128, right UInt128) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3001', () => {
    const query = `create table tab (x Nullable(UInt8)) engine = MergeTree order by x settings allow_nullable_key = 1, index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3002', () => {
    const query = `create table tab (x LowCardinality(UInt8)) engine = MergeTree order by x settings allow_nullable_key = 1, index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3003', () => {
    const query = `create table tab (x UInt128) engine = MergeTree order by x settings allow_nullable_key = 1, index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3004', () => {
    const query = `create table tab (x DateTime) engine = MergeTree order by x settings allow_nullable_key = 1, index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3005', () => {
    const query = `CREATE TABLE t1__fuzz_13 (id Nullable(Int16)) ENGINE = MergeTree() ORDER BY id SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3006', () => {
    const query = `CREATE TABLE t2__fuzz_47 (id LowCardinality(Int16)) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3007', () => {
    const query = `create table src( A Int64, B String, C String) Engine=MergeTree order by A SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3008', () => {
    const query = `create table src( A String, B String, C String) Engine=MergeTree order by A SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3009', () => {
    const query = `create table src( A Int64, B String, C String) Engine=ReplicatedMergeTree('/clickhouse/{database}/test/src1', '1') order by A SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3010', () => {
    const query = `create table src( A String, B String, C String) Engine=ReplicatedMergeTree('/clickhouse/{database}/test/src2', '1') order by A SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3011', () => {
    const query = `create table src( A String, B String, C String) Engine=ReplicatedMergeTree('/clickhouse/{database}/test/src3', '1') order by A SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3012', () => {
    const query = `create table src( A String, B String, C String) Engine=ReplicatedMergeTree('/clickhouse/{database}/test/src4', '1') order by A SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3013', () => {
    const query = `CREATE TABLE row_level_policy_prewhere (x Int16, y String) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3014', () => {
    const query = `CREATE ROW POLICY row_level_policy_prewhere_policy0 ON row_level_policy_prewhere FOR SELECT USING x >= 0 TO default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3015', () => {
    const query = `CREATE TABLE mytable_stored (\`a\` UInt8) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3016', () => {
    const query = `CREATE TABLE mytable (\`a\` UInt8) ENGINE = Buffer(currentDatabase(), 'mytable_stored', 4, 600, 3600, 10, 100, 10000, 10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3017', () => {
    const query = `CREATE TABLE session (
\`day\` Date,
\`uid\` String,
\`dummy\` String DEFAULT ''
)
ENGINE = MergeTree
ORDER BY (day, uid);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3018', () => {
    const query = `CREATE TABLE queue (
\`day\` Date,
\`uid\` String
)
ENGINE = MergeTree
ORDER BY (day, uid);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3019', () => {
    const query = `CREATE MATERIALIZED VIEW IF NOT EXISTS forward TO session AS SELECT
day,
uid
FROM queue;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3020', () => {
    const query = `CREATE TABLE group_by_pk_lc_uint128 (\`k\` LowCardinality(UInt128), \`v\` UInt32) ENGINE = MergeTree ORDER BY k PARTITION BY v%50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3021', () => {
    const query = `CREATE TABLE group_by_pk_lc_uint256 (\`k\` LowCardinality(UInt256), \`v\` UInt32) ENGINE = MergeTree ORDER BY k PARTITION BY v%50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3022', () => {
    const query = `CREATE TABLE group_by_all (
a String,
b int,
c int
)
engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3023', () => {
    const query = `create table test (x Nullable(UInt32), y UInt32) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3024', () => {
    const query = `create table test (x Nullable(UInt32)) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3025', () => {
    const query = `CREATE TABLE test (x UInt64, s String) ENGINE = MergeTree ORDER BY tuple() SETTINGS parts_to_throw_insert = 3, max_parts_to_merge_at_once = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3026', () => {
    const query = `CREATE TABLE data (str String) ENGINE=MergeTree ORDER BY str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3027', () => {
    const query = `create table morton_numbers_mask_02457( n1 UInt8,
n2 UInt8,
n3 UInt8,
n4 UInt8
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3028', () => {
    const query = `create table morton_numbers_mask_1_02457( n1 UInt64,
n2 UInt64,
n3 UInt64,
n4 UInt64
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3029', () => {
    const query = `create table morton_numbers_mask_02457( n1 UInt32,
n2 UInt8
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3030', () => {
    const query = `create table morton_numbers_mask_2_02457( n1 UInt64,
n2 UInt64
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3031', () => {
    const query = `create table morton_numbers_mask_02457( n1 UInt16,
n2 UInt16,
n3 UInt8,
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3032', () => {
    const query = `create table morton_numbers_mask_3_02457( n1 UInt64,
n2 UInt64,
n3 UInt64
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3033', () => {
    const query = `create table morton_numbers_02457( n1 UInt32,
n2 UInt32,
n3 UInt16,
n4 UInt16,
n5 UInt8,
n6 UInt8,
n7 UInt8,
n8 UInt8
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3034', () => {
    const query = `create table morton_numbers_1_02457( n1 UInt64,
n2 UInt64,
n3 UInt64,
n4 UInt64,
n5 UInt64,
n6 UInt64,
n7 UInt64,
n8 UInt64
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3035', () => {
    const query = `create table morton_numbers_2_02457( n1 UInt64,
n2 UInt64,
n3 UInt64,
n4 UInt64
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3036', () => {
    const query = `create table morton_numbers_3_02457( n1 UInt64,
n2 UInt64
)
Engine=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3037', () => {
    const query = `create table test (Printer LowCardinality(String), IntervalStart DateTime) engine MergeTree partition by (hiveHash(Printer), toYear(IntervalStart)) order by (Printer, IntervalStart);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3038', () => {
    const query = `CREATE TABLE mutation_1 (
a UInt64,
b String
)
ENGINE = ReplicatedMergeTree('/clickhouse/test/{database}/t', '1')
ORDER BY tuple() SETTINGS min_bytes_for_wide_part=0, allow_remote_fs_zero_copy_replication=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3039', () => {
    const query = `CREATE TABLE mutation_2 (
a UInt64,
b String
)
ENGINE = ReplicatedMergeTree('/clickhouse/test/{database}/t', '2')
ORDER BY tuple() SETTINGS min_bytes_for_wide_part=0, allow_remote_fs_zero_copy_replication=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3040', () => {
    const query = `CREATE TABLE t_summing_lc (
\`key\` UInt32,
\`val\` LowCardinality(UInt32),
\`date\` DateTime
)
ENGINE = SummingMergeTree(val)
PARTITION BY date
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3041', () => {
    const query = `CREATE TABLE keeper_retries_r1(a UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test/02456_keeper_retries_during_insert', 'r1') ORDER BY tuple ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3042', () => {
    const query = `CREATE TABLE keeper_retries_r2(a UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test/02456_keeper_retries_during_insert', 'r2') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3043', () => {
    const query = `CREATE TABLE t1  (v UInt64) ENGINE=ReplicatedMergeTree('/test/tables/{database}/test/t1', 'r1') ORDER BY v PARTITION BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3044', () => {
    const query = `CREATE TABLE test_a (id UInt32, company UInt32, total UInt64) ENGINE=SummingMergeTree() PARTITION BY company PRIMARY KEY (id) ORDER BY (id, company);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3045', () => {
    const query = `CREATE TABLE test_b (id UInt32, company UInt32, total UInt64) ENGINE=SummingMergeTree() PARTITION BY company ORDER BY (id, company);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3046', () => {
    const query = `CREATE TABLE test_fixed_string_nested_json (data String) ENGINE MergeTree ORDER BY data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3047', () => {
    const query = `create table a (i int, j int) engine Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3048', () => {
    const query = `create materialized view b engine Log as select countState(*) from a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3049', () => {
    const query = `create table t_row_exists(a int, _row_exists int) engine=MergeTree order by a; --{serverError ILLEGAL_COLUMN} create table t_row_exists(a int, b int) engine=MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3050', () => {
    const query = `create table t_row_exists(a int, _row_exists int) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3051', () => {
    const query = `create table t_row_exists(a int, b int) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3052', () => {
    const query = `CREATE TABLE test (a Int32) ENGINE = MergeTree() order by tuple()
SETTINGS disk = disk(type=local, path='/local/'); -- { serverError BAD_ARGUMENTS }
CREATE TABLE test (a Int32)
ENGINE = MergeTree() order by tuple()
SETTINGS disk = disk(type=local, path='/var/lib/clickhouse/disks/local/');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3053', () => {
    const query = `create table cc (a UInt64, b String) ENGINE = MergeTree order by (a, b) SETTINGS compress_marks = true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3054', () => {
    const query = `CREATE TABLE test_low_cardinality_string (data String) ENGINE MergeTree ORDER BY data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3055', () => {
    const query = `CREATE TABLE test_low_cardinality_uuid (data String) ENGINE MergeTree ORDER BY data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3056', () => {
    const query = `CREATE TABLE test_low_cardinality_int (data String) ENGINE MergeTree ORDER BY data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3057', () => {
    const query = `CREATE TABLE view (id UInt32, value String) ENGINE=ReplicatedMergeTree('/test/2449/{database}', '1') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3058', () => {
    const query = `CREATE DICTIONARY dict (id UInt32, value String) PRIMARY KEY id
SOURCE(CLICKHOUSE(host 'localhost' port tcpPort() user 'default' db currentDatabase() table 'view'))
LAYOUT (HASHED()) LIFETIME (MIN 600 MAX 600);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3059', () => {
    const query = `CREATE TABLE table (
col MATERIALIZED dictGet(currentDatabase() || '.dict', 'value', toUInt32(1))
)
ENGINE = MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3060', () => {
    const query = `create table rmt1 (n int) engine=ReplicatedMergeTree('/test/02448/{database}/rmt', '1') order by tuple() settings min_replicated_logs_to_keep=1, max_replicated_logs_to_keep=2,
max_cleanup_delay_period=1, cleanup_delay_period=0, cleanup_delay_period_random_add=1,
cleanup_thread_preferred_points_per_iteration=0, old_parts_lifetime=0, max_parts_to_merge_at_once=4,
merge_selecting_sleep_ms=1000, max_merge_selecting_sleep_ms=2000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3061', () => {
    const query = `create table rmt2 (n int) engine=ReplicatedMergeTree('/test/02448/{database}/rmt', '2') order by tuple() settings min_replicated_logs_to_keep=1, max_replicated_logs_to_keep=2,
max_cleanup_delay_period=1, cleanup_delay_period=0, cleanup_delay_period_random_add=1,
cleanup_thread_preferred_points_per_iteration=0, old_parts_lifetime=0, max_parts_to_merge_at_once=4,
merge_selecting_sleep_ms=1000, max_merge_selecting_sleep_ms=2000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3062', () => {
    const query = `create table rmt1 (n int, m int, k int) engine=ReplicatedMergeTree('/test/02446/{database}/rmt', '1') order by n settings storage_policy='s3_cache', allow_remote_fs_zero_copy_replication=1, old_parts_lifetime=0, cleanup_delay_period=0, max_cleanup_delay_period=1, cleanup_delay_period_random_add=1, min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3063', () => {
    const query = `create table rmt2 (n int, m int, k int) engine=ReplicatedMergeTree('/test/02446/{database}/rmt', '2') order by n settings storage_policy='s3_cache', allow_remote_fs_zero_copy_replication=1, old_parts_lifetime=0, cleanup_delay_period=0, max_cleanup_delay_period=1, cleanup_delay_period_random_add=1, min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3064', () => {
    const query = `create table t1_r1 (x Int32) engine=ReplicatedMergeTree('/test/02442/{database}/t', 'r1') order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3065', () => {
    const query = `create table t1_r2 (x Int32) engine=ReplicatedMergeTree('/test/02442/{database}/t', 'r2') order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3066', () => {
    const query = `create table t2 (x Int32) engine=ReplicatedMergeTree('zookeeper2:/test/02442/{database}/t', 'r1') order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3067', () => {
    const query = `create table mut (n int, m int, k int) engine=ReplicatedMergeTree('/test/02441/{database}/mut', '1') order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3068', () => {
    const query = `create table mut (n int) engine=ReplicatedMergeTree('/test/02440/{database}/mut', '1') order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3069', () => {
    const query = `create table tmp (n int) engine=MergeTree order by tuple() settings index_granularity=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3070', () => {
    const query = `create table rmt (n int, m int) engine=ReplicatedMergeTree('/test/02439/{shard}/{database}', '{replica}') partition by n order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3071', () => {
    const query = `create table rmt1 (n int) engine=ReplicatedMergeTree('/test/{database}/02438/', '1') order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3072', () => {
    const query = `create table rmt2 (n int) engine=ReplicatedMergeTree('/test/{database}/02438/', '2') order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3073', () => {
    const query = `create table mt (n int, s String) engine=MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3074', () => {
    const query = `CREATE TABLE id_join (\`country\` String, \`location\` Array(Int32)) ENGINE = Join(ANY, LEFT, country);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3075', () => {
    const query = `CREATE TABLE dep (
\`id\` Int32,
\`country\` LowCardinality(String),
\`purchase_location\` UInt16 MATERIALIZED if(id IN joinGet(concat(currentDatabase(), '.id_join'), 'location', 'CLICK'), 123, 456)
)
ENGINE = ReplicatedMergeTree('/test/02433/{database}/dep', '1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3076', () => {
    const query = `CREATE TABLE dep2 (
\`id\` Int32,
\`country\` LowCardinality(String),
\`purchase_location\` UInt16 MATERIALIZED if(id IN joinGet(concat(currentDatabase(), '.id_join'), 'location', 'CLICK'), 123, 456)
)
ENGINE = ReplicatedMergeTree('/test/02433/{database}/dep', '2') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3077', () => {
    const query = `create table test (n int, m default n in 'default.table_name') engine=Memory; -- { serverError TYPE_MISMATCH } create table test (n int, m default in(n, 'default.table_name')) engine=Memory; -- { serverError TYPE_MISMATCH }
DROP TABLE dep;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3078', () => {
    const query = `create table rmt (n int, m int, k int) engine=ReplicatedMergeTree('/test/02432/{database}', '1') order by tuple() settings storage_policy = 's3_cache', allow_remote_fs_zero_copy_replication=1,
concurrent_part_removal_threshold=1, cleanup_delay_period=1, cleanup_delay_period_random_add=1, cleanup_thread_preferred_points_per_iteration=0,
max_replicated_merges_in_queue=0, max_replicated_mutations_in_queue=0, min_bytes_for_wide_part=0, min_rows_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3079', () => {
    const query = `create table rmt2 (n int, m int, k String) engine=ReplicatedMergeTree('/test/02432/{database}', '2') order by tuple() settings storage_policy = 's3_cache', allow_remote_fs_zero_copy_replication=1,
concurrent_part_removal_threshold=1, cleanup_delay_period=1, cleanup_delay_period_random_add=1, cleanup_thread_preferred_points_per_iteration=0,
min_bytes_for_wide_part=0, min_rows_for_wide_part=0, max_replicated_merges_in_queue=1,
old_parts_lifetime=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3080', () => {
    const query = `CREATE TABLE t ENGINE = Log AS SELECT * FROM system.numbers LIMIT 20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3081', () => {
    const query = `create table partial_sort_opt_bug (x UInt64) engine = MergeTree order by tuple() settings index_granularity = 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3082', () => {
    const query = `create table t(z String, ts DateTime) Engine=Memory as  select '1', '2020-01-01 00:00:00';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3083', () => {
    const query = `CREATE VIEW v1 AS SELECT z, 'test' = {m:String} AS c
FROM t 
WHERE ts > '2019-01-01 00:00:00'
GROUP BY z, c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3084', () => {
    const query = `CREATE VIEW v2 AS SELECT z, {m:String} AS c
FROM t 
WHERE ts > '2019-01-01 00:00:00'
GROUP BY z, c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3085', () => {
    const query = `CREATE VIEW v3 AS SELECT z, {m:String} 
FROM t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3086', () => {
    const query = `create table t(z String, ts DateTime) Engine=MergeTree ORDER BY z as  select '1', '2020-01-01 00:00:00';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3087', () => {
    const query = `create table test(a UInt64, m UInt64, d DateTime) engine MergeTree partition by toYYYYMM(d) order by (a, m, d) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3088', () => {
    const query = `create table test_null_filter(key UInt64, value UInt32) engine MergeTree order by key SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3089', () => {
    const query = `create table test (id Int32, key String) engine=MergeTree() order by tuple() settings index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3090', () => {
    const query = `CREATE TABLE decimal_in_float_test ( \`a\` Decimal(18, 0), \`b\` Decimal(36, 2) ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3091', () => {
    const query = `create table test (x AggregateFunction(uniq, UInt64), y Int64) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3092', () => {
    const query = `CREATE TABLE mutate_and_zero_copy_replication1 (
a UInt64,
b String,
c Float64
)
ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02427_mutate_and_zero_copy_replication/alter', '1')
ORDER BY tuple()
SETTINGS old_parts_lifetime=0, cleanup_delay_period=300, max_cleanup_delay_period=300, cleanup_delay_period_random_add=300, min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3093', () => {
    const query = `CREATE TABLE mutate_and_zero_copy_replication2 (
a UInt64,
b String,
c Float64
)
ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02427_mutate_and_zero_copy_replication/alter', '2')
ORDER BY tuple()
SETTINGS old_parts_lifetime=0, cleanup_delay_period=300,  max_cleanup_delay_period=300, cleanup_delay_period_random_add=300;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3094', () => {
    const query = `CREATE TABLE fixed_string (id UInt64, s FixedString(256)) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3095', () => {
    const query = `CREATE TABLE suspicious_fixed_string (id UInt64, s FixedString(257)) ENGINE = MergeTree() ORDER BY id; -- { serverError ILLEGAL_COLUMN } SET allow_suspicious_fixed_string_types = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3096', () => {
    const query = `CREATE TABLE suspicious_fixed_string (id UInt64, s FixedString(257)) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3097', () => {
    const query = `CREATE TABLE table_one (id UInt64, value UInt64) ENGINE = MergeTree
PARTITION BY id
ORDER BY value
SETTINGS index_granularity = 8192, index_granularity_bytes = 0, min_bytes_for_wide_part = 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3098', () => {
    const query = `CREATE TABLE table_two (id UInt64, value UInt64) ENGINE = MergeTree
PARTITION BY id
ORDER BY value
SETTINGS index_granularity = 8192, index_granularity_bytes = 1024, min_bytes_for_wide_part = 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3099', () => {
    const query = `CREATE TABLE table_two (id UInt64, value UInt64) ENGINE = MergeTree
PARTITION BY id
ORDER BY value
SETTINGS index_granularity = 8192, index_granularity_bytes = 0, min_bytes_for_wide_part = 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3100', () => {
    const query = `CREATE TABLE table_one (id UInt64, value UInt64) ENGINE = MergeTree
PARTITION BY id
ORDER BY value
SETTINGS index_granularity = 8192, index_granularity_bytes = 1024, min_bytes_for_wide_part = 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3101', () => {
    const query = `CREATE TABLE store_sales (
\`ss_sold_date_sk\` Nullable(Int64),
\`ss_sold_time_sk\` Nullable(Int64),
\`ss_item_sk\` Int64,
\`ss_customer_sk\` Nullable(Int64),
\`ss_cdemo_sk\` Nullable(Int64),
\`ss_hdemo_sk\` Nullable(Int64),
\`ss_addr_sk\` Nullable(Int64),
\`ss_store_sk\` Nullable(Int64),
\`ss_promo_sk\` Nullable(Int64),
\`ss_ticket_number\` Int64,
\`ss_quantity\` Nullable(Int64),
\`ss_wholesale_cost\` Nullable(Float32),
\`ss_list_price\` Nullable(Float32),
\`ss_sales_price\` Nullable(Float32),
\`ss_ext_discount_amt\` Nullable(Float32),
\`ss_ext_sales_price\` Nullable(Float32),
\`ss_ext_wholesale_cost\` Nullable(Float32),
\`ss_ext_list_price\` Nullable(Float32),
\`ss_ext_tax\` Nullable(Float32),
\`ss_coupon_amt\` Nullable(Float32),
\`ss_net_paid\` Nullable(Float32),
\`ss_net_paid_inc_tax\` Nullable(Float32),
\`ss_net_profit\` Nullable(Float32),
\`ss_promo_sk_nn\` Int16,
\`ss_promo_sk_n2\` Nullable(Int16)
)
ENGINE = MergeTree ORDER BY (ss_item_sk, ss_ticket_number);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3102', () => {
    const query = `CREATE TABLE store_returns (
\`sr_returned_date_sk\` Nullable(Int64),
\`sr_return_time_sk\` Nullable(Int64),
\`sr_item_sk\` Int64,
\`sr_customer_sk\` Nullable(Int64),
\`sr_cdemo_sk\` Nullable(Int64),
\`sr_hdemo_sk\` Nullable(Int64),
\`sr_addr_sk\` Nullable(Int64),
\`sr_store_sk\` Nullable(Int64),
\`sr_reason_sk\` Nullable(Int64),
\`sr_ticket_number\` Int64,
\`sr_return_quantity\` Nullable(Int64),
\`sr_return_amt\` Nullable(Float32),
\`sr_return_tax\` Nullable(Float32),
\`sr_return_amt_inc_tax\` Nullable(Float32),
\`sr_fee\` Nullable(Float32),
\`sr_return_ship_cost\` Nullable(Float32),
\`sr_refunded_cash\` Nullable(Float32),
\`sr_reversed_charge\` Nullable(Float32),
\`sr_store_credit\` Nullable(Float32),
\`sr_net_loss\` Nullable(Float32)
)
ENGINE = MergeTree ORDER BY (sr_item_sk, sr_ticket_number);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3103', () => {
    const query = `CREATE TABLE catalog_sales (
\`cs_sold_date_sk\` Nullable(Int64),
\`cs_sold_time_sk\` Nullable(Int64),
\`cs_ship_date_sk\` Nullable(Int64),
\`cs_bill_customer_sk\` Nullable(Int64),
\`cs_bill_cdemo_sk\` Nullable(Int64),
\`cs_bill_hdemo_sk\` Nullable(Int64),
\`cs_bill_addr_sk\` Nullable(Int64),
\`cs_ship_customer_sk\` Nullable(Int64),
\`cs_ship_cdemo_sk\` Nullable(Int64),
\`cs_ship_hdemo_sk\` Nullable(Int64),
\`cs_ship_addr_sk\` Nullable(Int64),
\`cs_call_center_sk\` Nullable(Int64),
\`cs_catalog_page_sk\` Nullable(Int64),
\`cs_ship_mode_sk\` Nullable(Int64),
\`cs_warehouse_sk\` Nullable(Int64),
\`cs_item_sk\` Int64,
\`cs_promo_sk\` Nullable(Int64),
\`cs_order_number\` Int64,
\`cs_quantity\` Nullable(Int64),
\`cs_wholesale_cost\` Nullable(Float32),
\`cs_list_price\` Nullable(Float32),
\`cs_sales_price\` Nullable(Float32),
\`cs_ext_discount_amt\` Nullable(Float32),
\`cs_ext_sales_price\` Nullable(Float32),
\`cs_ext_wholesale_cost\` Nullable(Float32),
\`cs_ext_list_price\` Nullable(Float32),
\`cs_ext_tax\` Nullable(Float32),
\`cs_coupon_amt\` Nullable(Float32),
\`cs_ext_ship_cost\` Nullable(Float32),
\`cs_net_paid\` Nullable(Float32),
\`cs_net_paid_inc_tax\` Nullable(Float32),
\`cs_net_paid_inc_ship\` Nullable(Float32),
\`cs_net_paid_inc_ship_tax\` Nullable(Float32),
\`cs_net_profit\` Nullable(Float32)
)
ENGINE = MergeTree ORDER BY (cs_item_sk, cs_order_number);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3104', () => {
    const query = `CREATE TABLE catalog_returns (
\`cr_returned_date_sk\` Nullable(Int64),
\`cr_returned_time_sk\` Nullable(Int64),
\`cr_item_sk\` Int64,
\`cr_refunded_customer_sk\` Nullable(Int64),
\`cr_refunded_cdemo_sk\` Nullable(Int64),
\`cr_refunded_hdemo_sk\` Nullable(Int64),
\`cr_refunded_addr_sk\` Nullable(Int64),
\`cr_returning_customer_sk\` Nullable(Int64),
\`cr_returning_cdemo_sk\` Nullable(Int64),
\`cr_returning_hdemo_sk\` Nullable(Int64),
\`cr_returning_addr_sk\` Nullable(Int64),
\`cr_call_center_sk\` Nullable(Int64),
\`cr_catalog_page_sk\` Nullable(Int64),
\`cr_ship_mode_sk\` Nullable(Int64),
\`cr_warehouse_sk\` Nullable(Int64),
\`cr_reason_sk\` Nullable(Int64),
\`cr_order_number\` Int64,
\`cr_return_quantity\` Nullable(Int64),
\`cr_return_amount\` Nullable(Float32),
\`cr_return_tax\` Nullable(Float32),
\`cr_return_amt_inc_tax\` Nullable(Float32),
\`cr_fee\` Nullable(Float32),
\`cr_return_ship_cost\` Nullable(Float32),
\`cr_refunded_cash\` Nullable(Float32),
\`cr_reversed_charge\` Nullable(Float32),
\`cr_store_credit\` Nullable(Float32),
\`cr_net_loss\` Nullable(Float32)
)
ENGINE = MergeTree ORDER BY (cr_item_sk, cr_order_number);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3105', () => {
    const query = `CREATE TABLE date_dim (
\`d_date_sk\` Int64,
\`d_date_id\` String,
\`d_date\` Nullable(Date),
\`d_month_seq\` Nullable(Int64),
\`d_week_seq\` Nullable(Int64),
\`d_quarter_seq\` Nullable(Int64),
\`d_year\` Nullable(Int64),
\`d_dow\` Nullable(Int64),
\`d_moy\` Nullable(Int64),
\`d_dom\` Nullable(Int64),
\`d_qoy\` Nullable(Int64),
\`d_fy_year\` Nullable(Int64),
\`d_fy_quarter_seq\` Nullable(Int64),
\`d_fy_week_seq\` Nullable(Int64),
\`d_day_name\` Nullable(String),
\`d_quarter_name\` Nullable(String),
\`d_holiday\` Nullable(String),
\`d_weekend\` Nullable(String),
\`d_following_holiday\` Nullable(String),
\`d_first_dom\` Nullable(Int64),
\`d_last_dom\` Nullable(Int64),
\`d_same_day_ly\` Nullable(Int64),
\`d_same_day_lq\` Nullable(Int64),
\`d_current_day\` Nullable(String),
\`d_current_week\` Nullable(String),
\`d_current_month\` Nullable(String),
\`d_current_quarter\` Nullable(String),
\`d_current_year\` Nullable(String)
)
ENGINE = MergeTree ORDER BY d_date_sk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3106', () => {
    const query = `CREATE TABLE store (
\`s_store_sk\` Int64,
\`s_store_id\` String,
\`s_rec_start_date\` Nullable(Date),
\`s_rec_end_date\` Nullable(Date),
\`s_closed_date_sk\` Nullable(Int64),
\`s_store_name\` Nullable(String),
\`s_number_employees\` Nullable(Int64),
\`s_floor_space\` Nullable(Int64),
\`s_hours\` Nullable(String),
\`s_manager\` Nullable(String),
\`s_market_id\` Nullable(Int64),
\`s_geography_class\` Nullable(String),
\`s_market_desc\` Nullable(String),
\`s_market_manager\` Nullable(String),
\`s_division_id\` Nullable(Int64),
\`s_division_name\` Nullable(String),
\`s_company_id\` Nullable(Int64),
\`s_company_name\` Nullable(String),
\`s_street_number\` Nullable(String),
\`s_street_name\` Nullable(String),
\`s_street_type\` Nullable(String),
\`s_suite_number\` Nullable(String),
\`s_city\` Nullable(String),
\`s_county\` Nullable(String),
\`s_state\` Nullable(String),
\`s_zip\` Nullable(String),
\`s_country\` Nullable(String),
\`s_gmt_offset\` Nullable(Float32),
\`s_tax_precentage\` Nullable(Float32)
)
ENGINE = MergeTree ORDER BY s_store_sk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3107', () => {
    const query = `CREATE TABLE customer (
\`c_customer_sk\` Int64,
\`c_customer_id\` String,
\`c_current_cdemo_sk\` Nullable(Int64),
\`c_current_hdemo_sk\` Nullable(Int64),
\`c_current_addr_sk\` Nullable(Int64),
\`c_first_shipto_date_sk\` Nullable(Int64),
\`c_first_sales_date_sk\` Nullable(Int64),
\`c_salutation\` Nullable(String),
\`c_first_name\` Nullable(String),
\`c_last_name\` Nullable(String),
\`c_preferred_cust_flag\` Nullable(String),
\`c_birth_day\` Nullable(Int64),
\`c_birth_month\` Nullable(Int64),
\`c_birth_year\` Nullable(Int64),
\`c_birth_country\` Nullable(String),
\`c_login\` Nullable(String),
\`c_email_address\` Nullable(String),
\`c_last_review_date\` Nullable(String)
)
ENGINE = MergeTree ORDER BY c_customer_sk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3108', () => {
    const query = `CREATE TABLE customer_demographics (
\`cd_demo_sk\` Int64,
\`cd_gender\` Nullable(String),
\`cd_marital_status\` Nullable(String),
\`cd_education_status\` Nullable(String),
\`cd_purchase_estimate\` Nullable(Int64),
\`cd_credit_rating\` Nullable(String),
\`cd_dep_count\` Nullable(Int64),
\`cd_dep_employed_count\` Nullable(Int64),
\`cd_dep_college_count\` Nullable(Int64)
)
ENGINE = MergeTree ORDER BY cd_demo_sk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3109', () => {
    const query = `CREATE TABLE promotion (
\`p_promo_sk\` Int64,
\`p_promo_id\` String,
\`p_start_date_sk\` Nullable(Int64),
\`p_end_date_sk\` Nullable(Int64),
\`p_item_sk\` Nullable(Int64),
\`p_cost\` Nullable(Float64),
\`p_response_target\` Nullable(Int64),
\`p_promo_name\` Nullable(String),
\`p_channel_dmail\` Nullable(String),
\`p_channel_email\` Nullable(String),
\`p_channel_catalog\` Nullable(String),
\`p_channel_tv\` Nullable(String),
\`p_channel_radio\` Nullable(String),
\`p_channel_press\` Nullable(String),
\`p_channel_event\` Nullable(String),
\`p_channel_demo\` Nullable(String),
\`p_channel_details\` Nullable(String),
\`p_purpose\` Nullable(String),
\`p_discount_active\` Nullable(String)
)
ENGINE = MergeTree ORDER BY p_promo_sk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3110', () => {
    const query = `CREATE TABLE household_demographics (
\`hd_demo_sk\` Int64,
\`hd_income_band_sk\` Nullable(Int64),
\`hd_buy_potential\` Nullable(String),
\`hd_dep_count\` Nullable(Int64),
\`hd_vehicle_count\` Nullable(Int64)
)
ENGINE = MergeTree ORDER BY hd_demo_sk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3111', () => {
    const query = `CREATE TABLE customer_address (
\`ca_address_sk\` Int64,
\`ca_address_id\` String,
\`ca_street_number\` Nullable(String),
\`ca_street_name\` Nullable(String),
\`ca_street_type\` Nullable(String),
\`ca_suite_number\` Nullable(String),
\`ca_city\` Nullable(String),
\`ca_county\` Nullable(String),
\`ca_state\` Nullable(String),
\`ca_zip\` Nullable(String),
\`ca_country\` Nullable(String),
\`ca_gmt_offset\` Nullable(Float32),
\`ca_location_type\` Nullable(String)
)
ENGINE = MergeTree ORDER BY ca_address_sk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3112', () => {
    const query = `CREATE TABLE income_band (
\`ib_income_band_sk\` Int64,
\`ib_lower_bound\` Nullable(Int64),
\`ib_upper_bound\` Nullable(Int64)
)
ENGINE = MergeTree ORDER BY ib_income_band_sk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3113', () => {
    const query = `CREATE TABLE item (
\`i_item_sk\` Int64,
\`i_item_id\` String,
\`i_rec_start_date\` Nullable(Date),
\`i_rec_end_date\` Nullable(Date),
\`i_item_desc\` Nullable(String),
\`i_current_price\` Nullable(Float32),
\`i_wholesale_cost\` Nullable(Float32),
\`i_brand_id\` Nullable(Int64),
\`i_brand\` Nullable(String),
\`i_class_id\` Nullable(Int64),
\`i_class\` Nullable(String),
\`i_category_id\` Nullable(Int64),
\`i_category\` Nullable(String),
\`i_manufact_id\` Nullable(Int64),
\`i_manufact\` Nullable(String),
\`i_size\` Nullable(String),
\`i_formulation\` Nullable(String),
\`i_color\` Nullable(String),
\`i_units\` Nullable(String),
\`i_container\` Nullable(String),
\`i_manager_id\` Nullable(Int64),
\`i_product_name\` Nullable(String)
)
ENGINE = MergeTree ORDER BY i_item_sk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3114', () => {
    const query = `CREATE TABLE t1 ( a UInt64 ) Engine = MergeTree ORDER BY tuple() AS SELECT number AS a FROM system.numbers LIMIT 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3115', () => {
    const query = `CREATE TABLE dtest ( \`a\` Decimal(18, 0), \`b\` Decimal(18, 1), \`c\` Decimal(36, 0) ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3116', () => {
    const query = `create table tba (event_id Int64, event_dt Int64) Engine =MergeTree order by event_id ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3117', () => {
    const query = `create table if not exists replacing_mt (x String) engine=ReplacingMergeTree() ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3118', () => {
    const query = `create table if not exists lhs (x String) engine=ReplacingMergeTree() ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3119', () => {
    const query = `create table if not exists rhs (x String) engine=ReplacingMergeTree() ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3120', () => {
    const query = `create table if not exists regular_mt_table (x String) engine=MergeTree() ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3121', () => {
    const query = `create materialized VIEW mv_regular_mt_table TO regular_mt_table AS SELECT * FROM regular_mt_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3122', () => {
    const query = `create view nv_regular_mt_table AS SELECT * FROM mv_regular_mt_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3123', () => {
    const query = `create table if not exists left_table (id UInt64, val_left String) engine=ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3124', () => {
    const query = `create table if not exists middle_table (id UInt64, val_middle String) engine=MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3125', () => {
    const query = `create table if not exists right_table (id UInt64, val_right String) engine=ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3126', () => {
    const query = `create table if not exists table_to_merge_a (id UInt64, val String) engine=ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3127', () => {
    const query = `create table if not exists table_to_merge_b (id UInt64, val String) engine=MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3128', () => {
    const query = `create table if not exists table_to_merge_c (id UInt64, val String) engine=ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3129', () => {
    const query = `CREATE TABLE merge_table Engine=Merge(currentDatabase(), '^(table_to_merge_[a-z])\$') AS table_to_merge_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3130', () => {
    const query = `create table if not exists right_table_local (id UInt64, val_right String) engine=ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3131', () => {
    const query = `create table if not exists right_table engine=Distributed('test_shard_localhost', currentDatabase(), right_table_local) AS right_table_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3132', () => {
    const query = `CREATE TABLE constCondOptimization (
d Date DEFAULT today(),
time DateTime DEFAULT now(),
n Int64
)
ENGINE = MergeTree ORDER BY (time, n) SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3133', () => {
    const query = `CREATE TABLE 02418_test (key UInt64, value Float64) Engine=KeeperMap('/' || currentDatabase() || '/test2418', 3) PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3134', () => {
    const query = `CREATE TABLE 02418_test_another (key UInt64, value Float64) Engine=KeeperMap('/' || currentDatabase() || '/test2418', 4) PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3135', () => {
    const query = `create table test (x Map(UInt8, AggregateFunction(uniq, UInt64))) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3136', () => {
    const query = `create table test (x Map(UInt8, Array(Map(UInt8, Array(AggregateFunction(uniq, UInt64)))))) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3137', () => {
    const query = `create table test (x Array(Array(AggregateFunction(uniq, UInt64)))) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3138', () => {
    const query = `create table test (x Array(Array(Map(UInt8, AggregateFunction(uniq, UInt64))))) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3139', () => {
    const query = `CREATE TABLE 02417_test (key UInt64, value UInt64) Engine=KeeperMap('/' || currentDatabase() || '/test2417') PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3140', () => {
    const query = `CREATE TABLE 02417_test_another (key UInt64, value UInt64) Engine=KeeperMap('/' || currentDatabase() || '/test2417') PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3141', () => {
    const query = `create table tbl (s String, i int) engine MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3142', () => {
    const query = `create row policy filter on tbl using 0 to all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3143', () => {
    const query = `CREATE TABLE 02416_rocksdb (key UInt64, value String, value2 UInt64) Engine=EmbeddedRocksDB PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3144', () => {
    const query = `CREATE TABLE 02416_test (key String, value UInt32) Engine=KeeperMap('/' || currentDatabase() || '/test2416'); -- { serverError BAD_ARGUMENTS } CREATE TABLE 02416_test (key String, value UInt32) Engine=KeeperMap('/' || currentDatabase() || '/test2416') PRIMARY KEY(key2); -- { serverError UNKNOWN_IDENTIFIER }
CREATE TABLE 02416_test (key String, value UInt32) Engine=KeeperMap('/' || currentDatabase() || '/test2416') PRIMARY KEY(key, value); -- { serverError BAD_ARGUMENTS }
CREATE TABLE 02416_test (key String, value UInt32) Engine=KeeperMap('/' || currentDatabase() || '/test2416') PRIMARY KEY(concat(key, value)); -- { serverError BAD_ARGUMENTS }
CREATE TABLE 02416_test (key Tuple(String, UInt32), value UInt64) Engine=KeeperMap('/' || currentDatabase() || '/test2416') PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3145', () => {
    const query = `CREATE TABLE 02416_test (key String, value UInt32) Engine=KeeperMap('/' || currentDatabase() || '/test2416') PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3146', () => {
    const query = `CREATE TABLE 02416_test (k UInt32, value UInt64, dummy Tuple(UInt32, Float64), bm AggregateFunction(groupBitmap, UInt64)) Engine=KeeperMap('/' || currentDatabase() || '/test2416') PRIMARY KEY(k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3147', () => {
    const query = `CREATE TABLE 02416_test_memory AS 02416_test Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3148', () => {
    const query = `CREATE TABLE set_crash (key1 Int32, id1 Int64, c1 Int64) ENGINE = MergeTree PARTITION BY id1 ORDER BY key1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3149', () => {
    const query = `CREATE TABLE test02416(a UInt64, b UInt64) ENGINE=MergeTree() ORDER BY (a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3150', () => {
    const query = `create table src1 (n int) engine=ReplicatedMergeTree('/test/02413/{database}/src', '1') order by tuple() settings storage_policy='s3_cache', allow_remote_fs_zero_copy_replication=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3151', () => {
    const query = `create table src2 (n int) engine=ReplicatedMergeTree('/test/02413/{database}/src', '2') order by tuple() settings storage_policy='s3_cache', allow_remote_fs_zero_copy_replication=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3152', () => {
    const query = `create table dst1 (n int) engine=ReplicatedMergeTree('/test/02413/{database}/dst', '1') order by tuple() settings storage_policy='s3_cache', allow_remote_fs_zero_copy_replication=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3153', () => {
    const query = `create table dst2 (n int) engine=ReplicatedMergeTree('/test/02413/{database}/dst', '2') order by tuple() settings storage_policy='s3_cache', allow_remote_fs_zero_copy_replication=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3154', () => {
    const query = `CREATE TABLE data_02411 (
key Int32
)
ENGINE = MergeTree
ORDER BY key
SETTINGS min_bytes_for_wide_part = 0, index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3155', () => {
    const query = `CREATE TABLE t1 (x UInt64) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3156', () => {
    const query = `CREATE TABLE t2 (x UInt64, value String) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3157', () => {
    const query = `create table t(a UInt64, b UInt64) engine=MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3158', () => {
    const query = `create table dist_t as t engine = Distributed(test_cluster_two_shards, currentDatabase(), t, a % 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3159', () => {
    const query = `create table t_different_dbs(a UInt64, b UInt64) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3160', () => {
    const query = `create table shard_1.t_different_dbs(a UInt64, b UInt64) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3161', () => {
    const query = `create table dist_t_different_dbs as t engine = Distributed(test_cluster_two_shards_different_databases_with_local, '', t_different_dbs);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3162', () => {
    const query = `create table pr_t(a UInt64, b UInt64) engine=MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3163', () => {
    const query = `CREATE TABLE lwd_test (
\`id\` UInt64,
\`value\` String
)
ENGINE = MergeTree
ORDER BY id
SETTINGS
vertical_merge_algorithm_min_rows_to_activate = 1,
vertical_merge_algorithm_min_columns_to_activate = 1,
min_rows_for_wide_part = 1,
min_bytes_for_wide_part = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3164', () => {
    const query = `CREATE TABLE ttl_table (
EventDate Date,
Longitude Float64 TTL EventDate + toIntervalWeek(2)
)
ENGINE = MergeTree()
ORDER BY EventDate
SETTINGS vertical_merge_algorithm_min_rows_to_activate=1, vertical_merge_algorithm_min_columns_to_activate=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3165', () => {
    const query = `CREATE TABLE m0 (id UInt64) ENGINE=MergeTree ORDER BY id SETTINGS index_granularity = 1, ratio_of_defaults_for_sparse_serialization = 1.0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3166', () => {
    const query = `CREATE TABLE m1 (id UInt64, s String) ENGINE=MergeTree ORDER BY id SETTINGS index_granularity = 1, ratio_of_defaults_for_sparse_serialization = 1.0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3167', () => {
    const query = `CREATE VIEW m1v AS SELECT id FROM m1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3168', () => {
    const query = `CREATE TABLE m2 (id UInt64) ENGINE=Merge(currentDatabase(),'m0|m1v');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3169', () => {
    const query = `CREATE VIEW v AS SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3170', () => {
    const query = `CREATE TABLE test_inserts (\`key\` Int, \`part\` Int) ENGINE = MergeTree PARTITION BY part ORDER BY key SETTINGS temporary_directories_lifetime = 0, merge_tree_clear_old_temporary_directories_interval_seconds = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3171', () => {
    const query = `create table local_t_l5ydey on cluster test_shard_localhost ( c_qv5rv INTEGER ,
c_rutjs4 INTEGER ,
c_wmj INTEGER ,
c_m3 TEXT NOT NULL,
primary key(c_qv5rv)
) engine=ReplicatedMergeTree('/clickhouse/tables/test_' || currentDatabase() || '/{shard}/local_t_l5ydey', '{replica}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3172', () => {
    const query = `create table t_l5ydey on cluster test_shard_localhost as local_t_l5ydey engine=Distributed('test_shard_localhost', currentDatabase(),'local_t_l5ydey', rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3173', () => {
    const query = `create database local_t_l5ydey engine=Replicated('/clickhouse/tables/test_' || currentDatabase() || '/{shard}/local_t_l5ydey', '1', '1'); -- { serverError BAD_ARGUMENTS } drop table local_t_l5ydey;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3174', () => {
    const query = `create table mt (p int, n int) engine=MergeTree order by tuple() partition by p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3175', () => {
    const query = `create table m (n int) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3176', () => {
    const query = `create table t engine=Log as select * from system.numbers limit 20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3177', () => {
    const query = `CREATE TABLE test (key UInt32) Engine = Buffer(currentDatabase(), test, 16, 10, 100, 10000, 1000000, 10000000, 100000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3178', () => {
    const query = `CREATE TABLE test1 (key UInt32) Engine = Buffer(currentDatabase(), test2, 16, 10, 100, 10000, 1000000, 10000000, 100000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3179', () => {
    const query = `CREATE TABLE test2 (key UInt32) Engine = Buffer(currentDatabase(), test1, 16, 10, 100, 10000, 1000000, 10000000, 100000000); -- { serverError INFINITE_LOOP } DROP TABLE test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3180', () => {
    const query = `CREATE DICTIONARY test_dictionary_10_shards (
key UInt64,
value UInt16
) PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE test_table))
LAYOUT(SPARSE_HASHED(SHARDS 10))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3181', () => {
    const query = `CREATE DICTIONARY test_dictionary_10_shards_nullable (
key UInt64,
value Nullable(UInt16)
) PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE test_table_nullable))
LAYOUT(SPARSE_HASHED(SHARDS 10))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3182', () => {
    const query = `CREATE DICTIONARY test_complex_dictionary_10_shards (
key_1 UInt64,
key_2 UInt64,
value UInt16
) PRIMARY KEY key_1, key_2
SOURCE(CLICKHOUSE(TABLE test_table_complex))
LAYOUT(COMPLEX_KEY_SPARSE_HASHED(SHARDS 10))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3183', () => {
    const query = `CREATE DICTIONARY test_dictionary_10_shards_string (
key String,
value UInt16
) PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE test_table_string))
LAYOUT(SPARSE_HASHED(SHARDS 10))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3184', () => {
    const query = `CREATE DICTIONARY test_dictionary_10_shards_incremental (
key UInt64,
value UInt16
) PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE test_table_last_access UPDATE_FIELD last_access))
LAYOUT(SPARSE_HASHED(SHARDS 10))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3185', () => {
    const query = `CREATE TEMPORARY TABLE test (\`i\` Int64, \`d\` DateTime);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3186', () => {
    const query = `CREATE TEMPORARY TABLE test (\`i\` Int64, \`d\` DateTime64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3187', () => {
    const query = `CREATE TABLE userid_set(userid UInt64, name String) ENGINE = Set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3188', () => {
    const query = `CREATE TABLE userid_test (userid UInt64, name String) ENGINE = MergeTree() PARTITION BY (intDiv(userid, 500)) ORDER BY (userid) SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3189', () => {
    const query = `CREATE TABLE userid_set2(userid UInt64, name String, birthdate Date) ENGINE = Set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3190', () => {
    const query = `CREATE TEMPORARY TABLE t (x UInt64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3191', () => {
    const query = `CREATE DICTIONARY test_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
LAYOUT(FLAT())
SOURCE(CLICKHOUSE(TABLE 'test_table'))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3192', () => {
    const query = `CREATE TABLE test_table_join (
id UInt64,
value String
) ENGINE=Join(Any, Left, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3193', () => {
    const query = `CREATE TABLE test_table_join_1 (
id UInt64,
value String
) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3194', () => {
    const query = `CREATE TABLE test_table_join_2 (
id UInt64,
value String
) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3195', () => {
    const query = `CREATE TABLE t1 (x UInt64, y UInt64) ENGINE = MergeTree ORDER BY y AS SELECT sipHash64(number, 't1_x') % 100 AS x, sipHash64(number, 't1_y') % 100 AS y FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3196', () => {
    const query = `CREATE TABLE t2 (x UInt64, y UInt64) ENGINE = MergeTree ORDER BY y AS SELECT sipHash64(number, 't2_x') % 100 AS x, sipHash64(number, 't2_y') % 100 AS y FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3197', () => {
    const query = `CREATE TABLE test_table_join_1 (
id UInt8,
value String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3198', () => {
    const query = `CREATE TABLE test_table_join_2 (
id UInt16,
value String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3199', () => {
    const query = `CREATE TABLE test_table_join_3 (
id UInt64,
value String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3200', () => {
    const query = `CREATE TABLE t_parse_tuples (
id UInt32,
arr Array(Array(Tuple(c1 Int32, c2 UInt8)))
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3201', () => {
    const query = `create table test_02381(a UInt64, b UInt64) ENGINE = MergeTree order by (a, b) SETTINGS compress_marks = false, compress_primary_key = false, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3202', () => {
    const query = `create table test_02381_compress(a UInt64, b UInt64) ENGINE = MergeTree order by (a, b) SETTINGS compress_marks = true, compress_primary_key = true, marks_compression_codec = 'ZSTD(3)', primary_key_compression_codec = 'ZSTD(3)', marks_compress_block_size = 65536, primary_key_compress_block_size = 65536, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3203', () => {
    const query = `create table test_02381_compact (a UInt64, b String) ENGINE = MergeTree order by (a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3204', () => {
    const query = `CREATE TABLE test_table_join_1 (
id UInt64,
value UInt64
) ENGINE=SummingMergeTree(value)
ORDER BY id
SAMPLE BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3205', () => {
    const query = `CREATE TABLE test_table_join_2 (
id UInt64,
value UInt64
) ENGINE=SummingMergeTree(value)
ORDER BY id
SAMPLE BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3206', () => {
    const query = `CREATE TABLE test_table_join_1 (
id UInt64,
value String
) ENGINE=MergeTree
ORDER BY id
SAMPLE BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3207', () => {
    const query = `CREATE TABLE test_table_join_2 (
id UInt64,
value String
) ENGINE=MergeTree
ORDER BY id
SAMPLE BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3208', () => {
    const query = `CREATE TABLE part_log_profile_events_r1 (x UInt64) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_02378/part_log_profile_events', 'r1')
ORDER BY x
PARTITION BY x >= 128
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3209', () => {
    const query = `CREATE TABLE part_log_profile_events_r2 (x UInt64) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_02378/part_log_profile_events', 'r2')
ORDER BY x
PARTITION BY x >= 128
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3210', () => {
    const query = `CREATE TABLE test_table_in (
id UInt64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3211', () => {
    const query = `CREATE TABLE test_table_compound (
id UInt64,
tuple_value Tuple(value_1 UInt64, value_2 String)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3212', () => {
    const query = `CREATE TABLE test_table_join_1 (
id UInt64,
value String,
value_join_1 String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3213', () => {
    const query = `CREATE TABLE test_table_join_2 (
id UInt64,
value String,
value_join_2 String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3214', () => {
    const query = `CREATE TABLE test_table_join_3 (
id UInt64,
value String,
value_join_3 String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3215', () => {
    const query = `CREATE TABLE optimize_sorting (a UInt64, b UInt64) ENGINE MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3216', () => {
    const query = `CREATE TABLE optimize_sorting (a UInt64, b UInt64, c UInt64) ENGINE MergeTree() ORDER BY (a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3217', () => {
    const query = `CREATE TABLE t_nested_modify (id UInt64, \`n.a\` Array(UInt32), \`n.b\` Array(String)) ENGINE = MergeTree ORDER BY id
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3218', () => {
    const query = `CREATE TABLE t_modify_from_lc_1 (
id UInt64,
a LowCardinality(UInt32) CODEC(NONE)
)
ENGINE = MergeTree ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0, index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3219', () => {
    const query = `CREATE TABLE t_modify_from_lc_2 (
id UInt64,
a LowCardinality(UInt32) CODEC(NONE)
)
ENGINE = MergeTree ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0, index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3220', () => {
    const query = `CREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02377/quorum', '1') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3221', () => {
    const query = `CREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02377/quorum', '2') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3222', () => {
    const query = `CREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02377/quorum1', '1') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3223', () => {
    const query = `CREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02377/quorum1', '2') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3224', () => {
    const query = `CREATE TABLE quorum3(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_02377/quorum1', '3') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3225', () => {
    const query = `create table test_02377 (n UInt32, s String) engine=File(CSVWithNames);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3226', () => {
    const query = `CREATE TABLE special_set_table (
id UInt64
) ENGINE=Set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3227', () => {
    const query = `CREATE TABLE test_table_for_in (
id UInt64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3228', () => {
    const query = `CREATE TABLE t_in_tuple_index (
\`ID\` String,
\`USER_ID\` String,
\`PLATFORM\` LowCardinality(String)
)
ENGINE = MergeTree()
ORDER BY (PLATFORM, USER_ID, ID)
SETTINGS index_granularity = 2048, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3229', () => {
    const query = `create table m (a int) engine Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3230', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String,
value_array Array(UInt64),
value_array_array Array(Array(UInt64))
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3231', () => {
    const query = `CREATE TABLE test_table_join_1 (
id UInt64,
value String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3232', () => {
    const query = `CREATE TABLE test_table_join_2 (
id UInt64,
value String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3233', () => {
    const query = `CREATE TABLE video_log (
\`datetime\` DateTime,
\`user_id\` UInt64,
\`device_id\` UInt64,
\`domain\` LowCardinality(String),
\`bytes\` UInt64,
\`duration\` UInt64
)
ENGINE = MergeTree
PARTITION BY toDate(datetime)
ORDER BY (user_id, device_id)
SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3234', () => {
    const query = `CREATE TABLE video_log_result (
\`hour\` DateTime,
\`sum_bytes\` UInt64,
\`avg_duration\` Float64
)
ENGINE = MergeTree
PARTITION BY toDate(hour)
ORDER BY sum_bytes
SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3235', () => {
    const query = `CREATE TEMPORARY TABLE test_02327 (name String) AS SELECT * FROM VALUES(('Vasya'), ('Petya'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3236', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value_1 Array(UInt8),
value_2 Array(UInt8),
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3237', () => {
    const query = `create table t(id UInt32) engine MergeTree order by id as select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3238', () => {
    const query = `create table t1(a Array(UInt32)) ENGINE = MergeTree ORDER BY tuple() as select [1,2];`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3239', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
alias_value_1 ALIAS id + alias_value_2 + 1,
alias_value_2 ALIAS id + 5
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3240', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String,
alias_value ALIAS ((id + 1) AS inside_value) + inside_value
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3241', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String,
alias_value ALIAS ((id + 1) AS value) + value
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3242', () => {
    const query = `CREATE TABLE Customers (    
FirstName Nullable(String),
LastName String, 
Occupation String,
Education String,
Age Nullable(UInt8)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3243', () => {
    const query = `create table EventLog (
LogEntry String,
Created Int64
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3244', () => {
    const query = `create table Dates (
EventTime DateTime,
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3245', () => {
    const query = `CREATE TABLE mv_expand_test_table (    
a UInt8,
b Array(String),
c Array(Int8),
d Array(Int8)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3246', () => {
    const query = `CREATE TABLE Versions (    
Version String
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3247', () => {
    const query = `CREATE TABLE Bin_at_test (    
\`Date\` DateTime('UTC'),
Num Nullable(UInt8)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3248', () => {
    const query = `CREATE TABLE array_test (floats Array(Float64), strings Array(String),
nullable_strings Array(Nullable(String))
) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3249', () => {
    const query = `CREATE TABLE Ledger (    
Supplier Nullable(String),
Fruit String ,
Price Float64,
Purchase Date 
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3250', () => {
    const query = `CREATE TABLE Customers (
FirstName Nullable(String),
LastName String,
Occupation String,
Education String,
Age Nullable(UInt8)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3251', () => {
    const query = `CREATE TABLE kql_table1 ENGINE = Memory AS select *, now() as new_column From kql(\$\$Customers | project LastName | filter LastName=='Diaz'\$\$);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3252', () => {
    const query = `CREATE TABLE kql_table2 (
FirstName Nullable(String),
LastName String,
Age Nullable(UInt8)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3253', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value String
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3254', () => {
    const query = `CREATE TABLE test_lookup_table (
id UInt64,
lookup_key UInt64,
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3255', () => {
    const query = `CREATE DICTIONARY test_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'test_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3256', () => {
    const query = `CREATE TABLE consumer_02366 (
\`id\` UInt16,
\`dec\` AggregateFunction(argMin, Decimal(24, 10), UInt16)
)
ENGINE = AggregatingMergeTree
PRIMARY KEY id
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3257', () => {
    const query = `CREATE TABLE producer_02366 (
\`id\` UInt16,
\`dec\` String
)
ENGINE = MergeTree
PRIMARY KEY id
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3258', () => {
    const query = `CREATE MATERIALIZED VIEW mv_02366 TO consumer_02366 AS SELECT
id,
argMinState(dec, id) AS dec
FROM
(
SELECT
id,
toDecimal128(dec, 10) AS dec
FROM producer_02366
)
GROUP BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3259', () => {
    const query = `CREATE TABLE t1 (c1 Int32, c2 Int32) ENGINE MergeTree ORDER BY c1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3260', () => {
    const query = `CREATE TABLE t2 (c1 Int32, c2 Int32, c3 String) ENGINE MergeTree ORDER BY (c1, c2, c3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3261', () => {
    const query = `CREATE TABLE t1 ( x Int ) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3262', () => {
    const query = `CREATE TABLE t2 ( x Int ) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3263', () => {
    const query = `create table dat (blockNum Decimal(10,0), eventTimestamp DateTime64(9)) Engine=MergeTree() primary key eventTimestamp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3264', () => {
    const query = `CREATE DICTIONARY datDictionary (
\`blockNum\` Decimal(10, 0),
\`eventTimestamp\` DateTime64(9)
)
PRIMARY KEY blockNum
SOURCE(CLICKHOUSE(TABLE 'dat'))
LIFETIME(MIN 0 MAX 1000)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3265', () => {
    const query = `CREATE TABLE map_test(\`tags\` Map(String, String)) ENGINE = MergeTree PRIMARY KEY tags ORDER BY tags SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3266', () => {
    const query = `CREATE TABLE data_horizontal ( key Int
)
Engine=MergeTree()
ORDER BY key
SETTINGS old_parts_lifetime=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3267', () => {
    const query = `CREATE TABLE data_vertical (
key UInt64,
value String
)
ENGINE = MergeTree()
ORDER BY key
SETTINGS index_granularity_bytes = 0, enable_mixed_granularity_parts = 0, min_bytes_for_wide_part = 0,
vertical_merge_algorithm_min_rows_to_activate = 1, vertical_merge_algorithm_min_columns_to_activate = 1,
old_parts_lifetime=600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3268', () => {
    const query = `create table test(a Int64) Engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3269', () => {
    const query = `CREATE TABLE 02356_destination (a Int64, b String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3270', () => {
    const query = `CREATE TEMPORARY TABLE t1 (a Int64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3271', () => {
    const query = `CREATE TEMPORARY TABLE t2 (a Int64, b Int64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3272', () => {
    const query = `CREATE TABLE tab1 (id Int32, vec Array(Float32), PRIMARY KEY id, INDEX vec_idx(vec) TYPE vector_similarity('hnsw', 'L2Distance'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3273', () => {
    const query = `CREATE TABLE tab2 (id Int32, vec Array(Float32), PRIMARY KEY id, INDEX vec_idx(vec) TYPE vector_similarity(hnsw, L2Distance));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3274', () => {
    const query = `CREATE TABLE tab1 (id Int32, vec Array(Float32), PRIMARY KEY id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3275', () => {
    const query = `CREATE TABLE tab2 (id Int32, vec Array(Float32), PRIMARY KEY id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3276', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3277', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance') GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3278', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'cosineDistance', 'f32', 42, 99, 66) GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3279', () => {
    const query = `CREATE TABLE tab_f64(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance', 'f64', 0, 0, 0) GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3280', () => {
    const query = `CREATE TABLE tab_f32(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance', 'f32', 0, 0, 0) GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3281', () => {
    const query = `CREATE TABLE tab_f16(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance', 'f16', 0, 0, 0) GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3282', () => {
    const query = `CREATE TABLE tab_bf16(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance', 'bf16', 0, 0, 0) GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3283', () => {
    const query = `CREATE TABLE tab_i8(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance', 'i8', 0, 0, 0) GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3284', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float64), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance') GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3285', () => {
    const query = `CREATE TABLE tab (id Int32, vec Array(Float32), PRIMARY KEY id, INDEX vec_idx(vec) TYPE vector_similarity('hnsw', 'L2Distance'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3286', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX vec_idx vec TYPE annoy()) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3287', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX vec_idx vec TYPE usearch()) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3288', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_QUERY } CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity()) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_QUERY }
CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('cant_have_one_arg')) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_QUERY }
CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('cant', 'have', 'three_args')) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_QUERY }
CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('cant', 'have', 'more', 'than', 'six', 'args', '!')) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_QUERY }
SELECT '1st argument (method) must be String and hnsw';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3289', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity(3, 'L2Distance')) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_QUERY } CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('not_hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_DATA }
SELECT '2nd argument (distance function) must be String and L2Distance or cosineDistance';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3290', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 3)) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_QUERY } CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'invalid_distance')) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_DATA }
SELECT '3nd argument (quantization), if given, must be String and f32, f16, ...';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3291', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance', 1, 1, 1, 1)) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_QUERY } CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance', 'invalid', 2, 1, 1)) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_DATA }
SELECT '4nd argument (M), if given, must be UInt64 and > 1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3292', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance', 'f32', 'invalid', 1, 1)) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_QUERY } CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance', 'f32', 1, 1, 1)) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_DATA }
SELECT 'Must be created on single column';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3293', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx (vec, id) TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id; -- { serverError INCORRECT_NUMBER_OF_COLUMNS } SELECT 'Must be created on Array(Float32) columns';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3294', () => {
    const query = `CREATE TABLE tab (id UInt32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY tuple(); -- { serverError SUPPORT_IS_DISABLED } SET allow_experimental_vector_similarity_index = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3295', () => {
    const query = `CREATE TABLE tab (id UInt32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3296', () => {
    const query = `CREATE TABLE tab (id UInt32, vec Array(Float32)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3297', () => {
    const query = `CREATE TABLE tab (id Int32, vec Array(Float32), INDEX idx(vec) TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3298', () => {
    const query = `CREATE TABLE tab (id Int32, vec Array(Float32)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3299', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3300', () => {
    const query = `CREATE TABLE tab (id UInt64, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3301', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0, min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, index_granularity = 8192; -- disable adaptive granularity due to bug INSERT INTO tab SELECT number, [toFloat32(number), 0.0] from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3302', () => {
    const query = `CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'cosineDistance', 'f16', 0, 0, 0) GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3303', () => {
    const query = `CREATE TABLE order (
ID Int64,
Type Int64,
Num UInt64,
t DateTime
)
ENGINE = MergeTree()
PARTITION BY toYYYYMMDD(t)
ORDER BY (ID, Type, Num);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3304', () => {
    const query = `create table t_2354_dist_with_external_aggr(a UInt64, b String, c FixedString(100)) engine = MergeTree order by tuple() SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3305', () => {
    const query = `create table n(nc Nullable(int)) engine = MergeTree order by (tuple()) partition by (nc) settings allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3306', () => {
    const query = `CREATE TABLE replicated_table_r1(id Int32, name String) ENGINE = ReplicatedMergeTree('/test/02352/{database}/t_rep','1') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3307', () => {
    const query = `CREATE TABLE replicated_table_r2(id Int32, name String) ENGINE = ReplicatedMergeTree('/test/02352/{database}/t_rep','2') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3308', () => {
    const query = `CREATE TABLE t_light_r1(a int, b int, c int, index i_c(b) TYPE minmax granularity 4) ENGINE = ReplicatedMergeTree('/test/02352/{database}/t_light','1') ORDER BY a PARTITION BY c % 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3309', () => {
    const query = `CREATE TABLE t_light_r2(a int, b int, c int, index i_c(b) TYPE minmax granularity 4) ENGINE = ReplicatedMergeTree('/test/02352/{database}/t_light','2') ORDER BY a PARTITION BY c % 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3310', () => {
    const query = `CREATE TABLE t_light_sync_r1(a int, b int, c int, index i_c(b) TYPE minmax granularity 4) ENGINE = ReplicatedMergeTree('/test/02352/{database}/t_sync','1') ORDER BY a PARTITION BY c % 5 SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3311', () => {
    const query = `CREATE TABLE t_light_sync_r2(a int, b int, c int, index i_c(b) TYPE minmax granularity 4) ENGINE = ReplicatedMergeTree('/test/02352/{database}/t_sync','2') ORDER BY a PARTITION BY c % 5 SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3312', () => {
    const query = `CREATE TABLE t_merge_tree(time Date, id String , name String) ENGINE = MergeTree() PARTITION BY time ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3313', () => {
    const query = `CREATE TABLE t_replicated_merge_tree(time Date, id String, name String) ENGINE = ReplicatedMergeTree('/test/02352/{database}/t_rep','1') PARTITION BY time ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3314', () => {
    const query = `CREATE TABLE t_obj(id Int32, name Object('json')) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3315', () => {
    const query = `CREATE TABLE lwd_test (id UInt64 , value String) ENGINE MergeTree() ORDER BY id SETTINGS index_granularity=8192, index_granularity_bytes='10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3316', () => {
    const query = `create table t (a UInt64) Engine = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3317', () => {
    const query = `create materialized view t_mv Engine = Null AS select now() as ts, max(a) from t group by ts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3318', () => {
    const query = `create table test_tz_hour(t DateTime, x String) engine MergeTree partition by toYYYYMMDD(t) order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3319', () => {
    const query = `create table tab (id UInt32, haystack String, pattern String) engine = MergeTree() order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3320', () => {
    const query = `CREATE TABLE nnd (
id Int8, ts DateTime64(3, 'UTC'), metric Float64
)
ENGINE=MergeTree()
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3321', () => {
    const query = `CREATE TABLE tab (
\`key\` UInt64,
\`str\` String
)
ENGINE = MergeTree
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3322', () => {
    const query = `CREATE TABLE tab(k UInt64, s String, INDEX af(s) TYPE full_text(2)) ENGINE = MergeTree() ORDER BY k
SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3323', () => {
    const query = `CREATE TABLE tab_x(k UInt64, s String, INDEX af(s) TYPE full_text()) ENGINE = MergeTree() ORDER BY k
SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3324', () => {
    const query = `create table tab (k UInt64, s Array(String), INDEX af(s) TYPE full_text(2)) ENGINE = MergeTree() ORDER BY k
SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3325', () => {
    const query = `CREATE TABLE tab (k UInt64, s Map(String,String), INDEX af(mapKeys(s)) TYPE full_text(2)) ENGINE = MergeTree() ORDER BY k
SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3326', () => {
    const query = `CREATE TABLE tab(k UInt64, s String, INDEX af(s) TYPE full_text(2)) ENGINE = MergeTree()
ORDER BY k
SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3327', () => {
    const query = `CREATE TABLE tab (row_id UInt32, str String, INDEX idx str TYPE full_text) ENGINE = MergeTree ORDER BY row_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3328', () => {
    const query = `CREATE TABLE tab(k UInt64, s String, INDEX af(s) TYPE full_text(0, 12040)) Engine=MergeTree
ORDER BY (k)
AS
SELECT
number,
format('{},{},{},{}', hex(12345678), hex(87654321), hex(number/17 + 5), hex(13579012)) as s
FROM numbers(1024);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3329', () => {
    const query = `CREATE TABLE tab(k UInt64, s String, INDEX idx(s) TYPE inverted(2)) ENGINE = MergeTree() ORDER BY k; -- { serverError ILLEGAL_INDEX } SET allow_experimental_inverted_index = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3330', () => {
    const query = `CREATE TABLE tab(k UInt64, s String, INDEX idx(s) TYPE inverted(2)) ENGINE = MergeTree() ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3331', () => {
    const query = `CREATE TABLE tab (
id UInt32,
str String,
INDEX inv_idx(str) TYPE full_text(0) GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY id
SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3332', () => {
    const query = `CREATE TABLE t (
key UInt64,
str String,
INDEX inv_idx str TYPE full_text(0) GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3333', () => {
    const query = `CREATE TABLE tab (
id UInt64,
doc String,
INDEX text_idx doc TYPE full_text
)
ENGINE = MergeTree
ORDER BY id
SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi', min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3334', () => {
    const query = `CREATE TABLE tab ( k UInt64,
s Map(String, String),
INDEX idx mapKeys(s) TYPE full_text(2) GRANULARITY 1)
ENGINE = MergeTree
ORDER BY k
SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3335', () => {
    const query = `CREATE TABLE tab (
id UInt64,
str String,
INDEX idx str TYPE full_text(3) GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 1, min_bytes_for_wide_part = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3336', () => {
    const query = `create table table_1 (x UInt32, y String, INDEX a (length(y)) TYPE minmax GRANULARITY 1) engine = MergeTree order by x settings index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3337', () => {
    const query = `CREATE TABLE distr_table (x UInt32, y String) ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), 'table_1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3338', () => {
    const query = `create table shard_0.data_02346 (x UInt32, y String) engine = MergeTree order by x settings index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3339', () => {
    const query = `create table shard_1.data_02346 (x UInt32, y String) engine = MergeTree order by x settings index_granularity = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3340', () => {
    const query = `create table dist_02346 (x UInt32, y String) engine=Distributed('test_cluster_two_shards_different_databases',  '', data_02346);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3341', () => {
    const query = `create table table_1 (x UInt32, y String) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3342', () => {
    const query = `create view v_numbers as select number + 1 as x from system.numbers limit 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3343', () => {
    const query = `create table table_2 (x UInt32, y String) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3344', () => {
    const query = `create materialized view mv_table to table_2 (x UInt32, y String) as select * from table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3345', () => {
    const query = `create table m_table (x UInt32, y String) engine = Merge(currentDatabase(), '^table_');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3346', () => {
    const query = `CREATE TABLE landing (n Int64) engine=MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3347', () => {
    const query = `CREATE TABLE target  (n Int64) engine=MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3348', () => {
    const query = `CREATE MATERIALIZED VIEW landing_to_target TO target AS SELECT n + throwIf(n == 3333) AS n
FROM landing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3349', () => {
    const query = `CREATE TABLE trailing_comma_1 (id INT NOT NULL DEFAULT 1,) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3350', () => {
    const query = `CREATE TABLE trailing_comma_2 (id INT DEFAULT 1,) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3351', () => {
    const query = `CREATE TABLE trailing_comma_3 (x UInt8, y UInt8,) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3352', () => {
    const query = `create table data_02344 (key Int) engine=Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3353', () => {
    const query = `create table t_distinct_limit (d Date, id Int64) engine = MergeTree partition by toYYYYMM(d) order by d SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3354', () => {
    const query = `CREATE TABLE t_s3_compressed_blocks (id UInt64, s String CODEC(NONE)) ENGINE = MergeTree ORDER BY id
SETTINGS storage_policy = 's3_cache',
min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3355', () => {
    const query = `create table t engine=Memory empty; -- { clientError SYNTAX_ERROR } create table t engine=Memory empty as; -- { clientError SYNTAX_ERROR }
create table t engine=Memory as; -- { clientError SYNTAX_ERROR }
create table t engine=Memory empty as select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3356', () => {
    const query = `create materialized view mv engine=Memory empty as select 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3357', () => {
    const query = `CREATE TABLE test_table_tuple (
id UInt64,
value Tuple(value_0_level_0 String, value_1_level_0 String)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3358', () => {
    const query = `CREATE TABLE proj_agg_02343 (
k1 UInt32,
k2 UInt32,
k3 UInt32,
value UInt32,
PROJECTION aaaa
(
SELECT
k1,
k2,
k3,
sum(value)
GROUP BY k1, k2, k3
)
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3359', () => {
    const query = `create table t(a UInt64) engine = MergeTree order by (a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3360', () => {
    const query = `CREATE TABLE data_02342 (a UInt8) ENGINE=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3361', () => {
    const query = `CREATE WINDOW VIEW window_view_02342 ENGINE=Memory AS SELECT count(a), tumbleStart(wid) AS w_start, tumbleEnd(tumble(now(), INTERVAL '3' SECOND)) AS w_end FROM data_02342 GROUP BY tumble(now(), INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3362', () => {
    const query = `CREATE TABLE data_02342 (a UInt8, s String) ENGINE=MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3363', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value Tuple(value_0_level_0 Tuple(value_0_level_1 String, value_1_level_1 String), value_1_level_0 String)
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3364', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value Nested (value_0_level_0 Nested(value_0_level_1 String, value_1_level_1 String), value_1_level_0 String)
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3365', () => {
    const query = `CREATE DATABASE 02339_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3366', () => {
    const query = `CREATE TABLE 02339_db.test_table (
id UInt64,
value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3367', () => {
    const query = `CREATE TABLE nested_name_tuples (
\`a\` Tuple(x String, y Tuple(i Int32, j String))
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3368', () => {
    const query = `CREATE DATABASE 02337_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3369', () => {
    const query = `CREATE TABLE 02337_db.test_table (
id UInt64,
value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3370', () => {
    const query = `CREATE TABLE t_sparse_s3 (id UInt32, cond UInt8, s String) engine = MergeTree ORDER BY id
settings ratio_of_defaults_for_sparse_serialization = 0.01, storage_policy = 's3_cache',
min_bytes_for_wide_part = 0, min_compress_block_size = 1,
index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3371', () => {
    const query = `CREATE TABLE segfault (
id          UInt32,
uuid        UUID,
tags_ids    Array(UInt32)
) ENGINE = MergeTree()
ORDER BY (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3372', () => {
    const query = `CREATE MATERIALIZED VIEW segfault_mv ENGINE = AggregatingMergeTree()
ORDER BY (id)
AS SELECT
id,
uniqState(uuid) as uniq_uuids,
uniqMapState(CAST((tags_ids, arrayMap(_ -> toString(uuid), tags_ids)), 'Map(UInt32, String)')) as uniq_tags_ids
FROM segfault
GROUP BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3373', () => {
    const query = `CREATE TABLE test (id String, \`abc.1\` String, \`abc.2\` String, \`abc\` String) ENGINE MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3374', () => {
    const query = `create table t_index(a int, b String) engine=MergeTree() order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3375', () => {
    const query = `create index i_a on t_index(a) TYPE minmax GRANULARITY 4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3376', () => {
    const query = `create index if not exists i_a on t_index(a) TYPE minmax GRANULARITY 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3377', () => {
    const query = `create index i_b on t_index(b) TYPE bloom_filter GRANULARITY 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3378', () => {
    const query = `create table t_index(a int, b String) engine=ReplicatedMergeTree('/test/2319/{database}', '1') order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3379', () => {
    const query = `create table t_index_replica(a int, b String) engine=ReplicatedMergeTree('/test/2319/{database}', '2') order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3380', () => {
    const query = `CREATE TABLE decimal (
a Decimal32(4),
b Decimal64(8),
c Decimal128(8)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3381', () => {
    const query = `CREATE TABLE test_table (\`n\` UInt64, \`s\` String) ENGINE = MergeTree
PRIMARY KEY n ORDER BY n SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3382', () => {
    const query = `CREATE ROW POLICY test_filter_policy ON test_table USING False TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3383', () => {
    const query = `CREATE ROW POLICY test_filter_policy_2 ON test_table USING (n % 5) >= 3 TO default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3384', () => {
    const query = `CREATE TABLE merge_table_standard_delete(id Int32, name String) ENGINE = MergeTree order by id settings min_bytes_for_wide_part=10000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3385', () => {
    const query = `create table t_light(a int, b int, c int, index i_c(b) type minmax granularity 4) engine = MergeTree order by a partition by c % 5 settings min_bytes_for_wide_part=10000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3386', () => {
    const query = `CREATE TABLE t_large(a UInt32, b int) ENGINE=MergeTree order BY a settings min_bytes_for_wide_part=0, index_granularity=8192, index_granularity_bytes='10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3387', () => {
    const query = `CREATE TABLE merge_table_standard_delete(id Int32, name String) ENGINE = MergeTree order by id settings min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3388', () => {
    const query = `create table t_light(a int, b int, c int, index i_c(b) type minmax granularity 4) engine = MergeTree order by a partition by c % 5 settings min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3389', () => {
    const query = `CREATE TABLE t_proj(a UInt32, b int) ENGINE=MergeTree order BY a settings min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3390', () => {
    const query = `CREATE TABLE dictionary_source_table (
id UInt64,
value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3391', () => {
    const query = `CREATE DICTIONARY test_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
LAYOUT(FLAT())
SOURCE(CLICKHOUSE(TABLE 'dictionary_source_table'))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3392', () => {
    const query = `CREATE TABLE dictionary_source_table (
key UInt64,
start UInt64,
end UInt64,
value String
) Engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3393', () => {
    const query = `CREATE DICTIONARY range_hashed_dictionary (
key UInt64,
start UInt64,
end UInt64,
value String
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE 'dictionary_source_table'))
LAYOUT(RANGE_HASHED())
RANGE(MIN start MAX end)
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3394', () => {
    const query = `CREATE TABLE tab (haystack String, pattern String) engine = MergeTree() ORDER BY haystack;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3395', () => {
    const query = `create table distinct_in_order (a int) engine=MergeTree() order by a settings index_granularity=10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3396', () => {
    const query = `create table distinct_in_order (a int, b int, c int) engine=MergeTree() order by (a, b) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3397', () => {
    const query = `CREATE TABLE distinct_cardinality_low (low UInt64, medium UInt64, high UInt64) ENGINE MergeTree() ORDER BY (low, medium) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3398', () => {
    const query = `create table distinct_in_order (low UInt64, medium UInt64, high UInt64) engine=MergeTree() order by (low, medium) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3399', () => {
    const query = `create table ordinary_distinct (low UInt64, medium UInt64, high UInt64) engine=MergeTree() order by (low, medium) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3400', () => {
    const query = `create table sorting_key_empty_tuple (a int, b int) engine=MergeTree() order by tuple() SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3401', () => {
    const query = `create table sorting_key_contain_function (datetime DateTime, a int) engine=MergeTree() order by (toDate(datetime)) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3402', () => {
    const query = `CREATE TABLE ipv4_test (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3403', () => {
    const query = `CREATE TABLE ipv6_test (
id UInt64,
value String
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3404', () => {
    const query = `CREATE TABLE test02315(a UInt64, b UInt64) ENGINE=MergeTree() ORDER BY (a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3405', () => {
    const query = `CREATE TABLE codecTest ( key      UInt64,
name     String,
ref_valueF64 Float64,
ref_valueF32 Float32,
valueF64 Float64  CODEC(FPC),
valueF32 Float32  CODEC(FPC)
) Engine = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3406', () => {
    const query = `CREATE TABLE codecTest ( key      UInt64,
name     String,
ref_valueF64 Float64,
ref_valueF32 Float32,
valueF64 Float64  CODEC(FPC(4)),
valueF32 Float32  CODEC(FPC(4))
) Engine = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3407', () => {
    const query = `CREATE TABLE test02313 (
a Enum('one' = 1, 'two' = 2),
b Enum('default' = 0, 'non-default' = 1),
c UInt8
)
ENGINE = MergeTree()
ORDER BY (a, b, c);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3408', () => {
    const query = `create table test_02312 (x Tuple(a UInt32, b UInt32)) engine=File(Parquet);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3409', () => {
    const query = `create table test_02312 (x Tuple(a UInt32, b UInt32)) engine=File(Arrow);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3410', () => {
    const query = `create table test_02312 (x Tuple(a UInt32, b UInt32)) engine=File(ORC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3411', () => {
    const query = `create table test_02312 (a Nested(b Nested(c UInt32))) engine=File(Parquet);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3412', () => {
    const query = `create table test_02312 (a Nested(b Nested(c UInt32))) engine=File(Arrow);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3413', () => {
    const query = `create table test_02312 (a Nested(b Nested(c UInt32))) engine=File(ORC);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3414', () => {
    const query = `CREATE TABLE bug_36995( \`time\` DateTime,
\`product\` String)
ENGINE = MergeTree
ORDER BY time AS
SELECT '2022-01-01 00:00:00','1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3415', () => {
    const query = `create table test_zkinsert ( 	name String,
	path String,
	value String
) ENGINE Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3416', () => {
    const query = `create table test_02311 (x UInt32) engine=File(UnknownFormat); -- {serverError UNKNOWN_FORMAT} create table test_02311 (x UInt32) engine=URL('http://some/url', UnknownFormat); -- {serverError UNKNOWN_FORMAT}
create table test_02311 (x UInt32) engine=S3('http://host:2020/test/data', UnknownFormat); -- {serverError UNKNOWN_FORMAT}
create table test_02311 (x UInt32) engine=HDFS('http://hdfs:9000/data', UnknownFormat); -- {serverError UNKNOWN_FORMAT}
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3417', () => {
    const query = `create table id_val(id Int32, val Array(Int32)) engine Join(ANY, LEFT, id) settings join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3418', () => {
    const query = `CREATE TABLE t_parts_profile_events (a UInt32) ENGINE = MergeTree ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 10, min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3419', () => {
    const query = `create table test_02302 (a UInt64) engine = S3(s3_conn, filename='test_02302_{_partition_id}', format=Parquet) partition by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3420', () => {
    const query = `create table test_02302 (a UInt64) engine = S3(s3_conn, filename='test_02302.2', format=Parquet);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3421', () => {
    const query = `create table test_02302 (a UInt64) engine = S3(s3_conn, filename='test_02302.1', format=Parquet);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3422', () => {
    const query = `create table test_02302 (a UInt64) engine = S3(s3_conn, filename='test_02302', format=Parquet);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3423', () => {
    const query = `create table test_agg_proj_02302 (x Int32, y Int32, PROJECTION x_plus_y (select sum(x - y), argMax(x, y) group by x + y)) ENGINE = MergeTree order by tuple() settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3424', () => {
    const query = `CREATE TABLE lc_nullable_string(\`c1\` LowCardinality(Nullable(String)) DEFAULT CAST(NULL, 'LowCardinality(Nullable(String))'))  ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3425', () => {
    const query = `CREATE TABLE null_before (id INT NULL) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3426', () => {
    const query = `CREATE TABLE null_before (id INT NOT NULL) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3427', () => {
    const query = `CREATE TABLE null_before (id INT NULL DEFAULT 1) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3428', () => {
    const query = `CREATE TABLE null_before (id INT NOT NULL DEFAULT 1) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3429', () => {
    const query = `CREATE TABLE null_before (id INT DEFAULT 1 NULL) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3430', () => {
    const query = `CREATE TABLE null_before (id INT DEFAULT 1 NOT NULL) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3431', () => {
    const query = `CREATE TABLE null_before (id NULL DEFAULT 1) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3432', () => {
    const query = `CREATE TABLE null_before (id NOT NULL DEFAULT 1) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3433', () => {
    const query = `CREATE TABLE null_before (id DEFAULT 1 NULL) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3434', () => {
    const query = `CREATE TABLE null_before (id DEFAULT 1 NOT NULL) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3435', () => {
    const query = `CREATE TABLE e ( a UInt64, t DateTime ) ENGINE = MergeTree PARTITION BY toDate(t) ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3436', () => {
    const query = `CREATE TABLE t_ttl_non_deterministic(A Int64) ENGINE = MergeTree ORDER BY A TTL now() + toIntervalMonth(1); -- {serverError BAD_ARGUMENTS}
CREATE TABLE t_ttl_non_deterministic(A Int64)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/ttl1', '1') ORDER BY A TTL now() + toIntervalMonth(1); -- {serverError BAD_ARGUMENTS}
CREATE TABLE t_ttl_non_deterministic(A Int64) ENGINE = MergeTree ORDER BY A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3437', () => {
    const query = `CREATE TABLE t_ttl_non_deterministic(A Int64) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/ttl2', '1') ORDER BY A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3438', () => {
    const query = `CREATE TABLE t_ttl_non_deterministic(A Int64, B Int64 TTL now() + toIntervalMonth(1)) ENGINE = MergeTree ORDER BY A; -- {serverError BAD_ARGUMENTS}
CREATE TABLE t_ttl_non_deterministic(A Int64, B Int64 TTL now() + toIntervalMonth(1))
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/ttl3', '1') ORDER BY A; -- {serverError BAD_ARGUMENTS}
CREATE TABLE t_ttl_non_deterministic(A Int64, B Int64) ENGINE = MergeTree ORDER BY A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3439', () => {
    const query = `CREATE TABLE t_ttl_non_deterministic(A Int64, B Int64) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/ttl4', '1') ORDER BY A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3440', () => {
    const query = `create table data_02295 ( b Int64,
a Int64,
grp_aggreg AggregateFunction(groupArrayArray, Array(UInt64))
) engine = MergeTree() order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3441', () => {
    const query = `create table non_const_needle (id UInt32, haystack String, needle String)
engine = MergeTree()
order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3442', () => {
    const query = `create table data_02294 (a Int64, b Int64, grp_aggreg AggregateFunction(groupArrayArray, Array(UInt64)), grp_simple SimpleAggregateFunction(groupArrayArray, Array(UInt64))) engine = MergeTree() order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3443', () => {
    const query = `CREATE SETTINGS PROFILE 02294_profile1 SETTINGS timeout_before_checking_execution_speed = 3 TO default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3444', () => {
    const query = `CREATE SETTINGS PROFILE 02294_profile2 SETTINGS max_execution_time = 0.5 TO default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3445', () => {
    const query = `CREATE TABLE test_hierarchy_source_table (
id UInt64,
parent_id UInt64
) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3446', () => {
    const query = `CREATE DICTIONARY hierarchy_flat_dictionary_index (
id UInt64,
parent_id UInt64 BIDIRECTIONAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'test_hierarchy_source_table'))
LAYOUT(FLAT())
LIFETIME(0); -- {serverError BAD_ARGUMENTS }
DROP DICTIONARY IF EXISTS hierarchy_flat_dictionary_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3447', () => {
    const query = `CREATE DICTIONARY hierarchy_flat_dictionary_index (
id UInt64,
parent_id UInt64 HIERARCHICAL BIDIRECTIONAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'test_hierarchy_source_table'))
LAYOUT(FLAT())
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3448', () => {
    const query = `CREATE DICTIONARY hierarchy_hashed_dictionary_index (
id UInt64,
parent_id UInt64 HIERARCHICAL BIDIRECTIONAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'test_hierarchy_source_table'))
LAYOUT(FLAT())
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3449', () => {
    const query = `CREATE DICTIONARY hierarchy_hashed_array_dictionary_index (
id UInt64,
parent_id UInt64 HIERARCHICAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'test_hierarchy_source_table'))
LAYOUT(HASHED_ARRAY())
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3450', () => {
    const query = `create table data_02293 (a Int64, grp_aggreg AggregateFunction(groupArrayArray, Array(UInt64)), grp_simple SimpleAggregateFunction(groupArrayArray, Array(UInt64))) engine = MergeTree() order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3451', () => {
    const query = `CREATE TABLE tab (col FixedString(2)) engine = MergeTree() ORDER BY col;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3452', () => {
    const query = `CREATE TABLE h3_indexes (id int, start String, end String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3453', () => {
    const query = `CREATE TABLE h3_indexes (h3_index UInt64, k UInt16) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3454', () => {
    const query = `CREATE TABLE ignore_auto_increment ( id int AUTO_INCREMENT
) ENGINE=MergeTree() ORDER BY tuple(); -- {serverError SYNTAX_ERROR}
select 'enable AUTO_INCREMENT compatibility mode';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3455', () => {
    const query = `CREATE TABLE ignore_auto_increment ( id int AUTO_INCREMENT
) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3456', () => {
    const query = `CREATE TABLE ignore_auto_increment ( id AUTO_INCREMENT
) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3457', () => {
    const query = `CREATE TABLE ignore_auto_increment ( id int AUTO_INCREMENT, di AUTO_INCREMENT, s String AUTO_INCREMENT
) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3458', () => {
    const query = `CREATE TABLE ignore_auto_increment ( di DEFAULT 1, id int AUTO_INCREMENT, s String EPHEMERAL
) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3459', () => {
    const query = `CREATE TABLE ignore_auto_increment (id int DEFAULT 1 AUTO_INCREMENT) ENGINE=MergeTree() ORDER BY tuple(); -- {clientError SYNTAX_ERROR} select 'create table failed, column -type +DEFAULT +AUTO_INCREMENT';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3460', () => {
    const query = `CREATE TABLE ignore_auto_increment (id int DEFAULT 1 AUTO_INCREMENT) ENGINE=MergeTree() ORDER BY tuple(); -- {clientError SYNTAX_ERROR} select 'create table failed, column +type +AUTO_INCREMENT +DEFAULT';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3461', () => {
    const query = `CREATE TABLE ignore_auto_increment (id int AUTO_INCREMENT DEFAULT 1) ENGINE=MergeTree() ORDER BY tuple(); -- {clientError SYNTAX_ERROR} select 'create table failed, column -type +AUTO_INCREMENT +DEFAULT';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3462', () => {
    const query = `CREATE TABLE ignore_auto_increment (id int AUTO_INCREMENT DEFAULT 1) ENGINE=MergeTree() ORDER BY tuple(); -- {clientError SYNTAX_ERROR} DROP TABLE IF EXISTS ignore_auto_increment SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3463', () => {
    const query = `CREATE TABLE t_nested_detach (n Nested(u UInt32, s String)) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3464', () => {
    const query = `create function foo as x -- { serverError UNSUPPORTED_METHOD } `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3465', () => {
    const query = `CREATE TABLE test_local (text String, text2 String) ENGINE = MergeTree() ORDER BY text;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3466', () => {
    const query = `CREATE TABLE test_distributed (text String, text2 String) ENGINE = Distributed('test_shard_localhost', currentDatabase(), test_local);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3467', () => {
    const query = `CREATE TABLE user_local ( id Int64, name String, age Int32 ) ENGINE = MergeTree ORDER BY name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3468', () => {
    const query = `CREATE TABLE user_all ( id Int64, name String, age Int32 ) ENGINE = Distributed('test_shard_localhost', currentDatabase(), user_local, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3469', () => {
    const query = `CREATE TABLE event ( id Int64, user_id Int64, content String, created_time DateTime ) ENGINE = MergeTree ORDER BY user_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3470', () => {
    const query = `CREATE TABLE test_dictionary_source_table (
id UInt64,
value String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3471', () => {
    const query = `CREATE VIEW test_dictionary_view (
id UInt64,
value String
) AS SELECT id, value FROM test_dictionary_source_table WHERE id = (SELECT max(id) FROM test_dictionary_source_table);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3472', () => {
    const query = `CREATE DICTIONARY test_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'test_dictionary_view'))
LIFETIME(MIN 0 MAX 1)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3473', () => {
    const query = `CREATE TABLE t_object_convert(id UInt64, data Object(Nullable('JSON'))) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3474', () => {
    const query = `CREATE TABLE t_object_convert2(id UInt64, data Object('JSON')) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3475', () => {
    const query = `CREATE TABLE test(a UInt8, b String EPHEMERAL) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3476', () => {
    const query = `CREATE TABLE test(a UInt8, b EPHEMERAL String) Engine=Memory(); -- { serverError UNKNOWN_IDENTIFIER } CREATE TABLE test(a UInt8, b EPHEMERAL 'a' String) Engine=Memory(); -- { clientError SYNTAX_ERROR }
CREATE TABLE test(a UInt8, b String EPHEMERAL test) Engine=Memory(); -- { serverError UNKNOWN_IDENTIFIER }
CREATE TABLE test(a UInt8, b String EPHEMERAL 1+2) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3477', () => {
    const query = `CREATE TABLE t_vertical_merges (
a   Nullable(String),
b   Int8
)
ENGINE = MergeTree
ORDER BY tuple()
settings
vertical_merge_algorithm_min_columns_to_activate=1,
vertical_merge_algorithm_min_rows_to_activate=1,
min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3478', () => {
    const query = `CREATE TABLE t_vertical_merges (
a   Array(Int16),
b   Int8
)
ENGINE = MergeTree
ORDER BY tuple()
settings
vertical_merge_algorithm_min_columns_to_activate=1,
vertical_merge_algorithm_min_rows_to_activate=1,
min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3479', () => {
    const query = `CREATE TABLE t_tuple_numeric (t Tuple(\`1\` Tuple(\`2\` Int, \`3\` Int), \`4\` Int)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3480', () => {
    const query = `CREATE TABLE t_tuple_numeric (t Tuple(Tuple(Int, Int), Int)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3481', () => {
    const query = `CREATE TABLE t_tuple_numeric (t Object('json')) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3482', () => {
    const query = `CREATE TABLE issue32107(A Int64, s_quantiles AggregateFunction(quantilesTDigest(0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99), Float64)) ENGINE = AggregatingMergeTree ORDER BY A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3483', () => {
    const query = `CREATE TABLE vec1 (id UInt64, v Array(UInt8)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3484', () => {
    const query = `CREATE TABLE vec1f (id UInt64, v Array(Float32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3485', () => {
    const query = `CREATE TABLE vec1d (id UInt64, v Array(Float64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3486', () => {
    const query = `CREATE TABLE vec2 (id UInt64, v Array(Int64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3487', () => {
    const query = `CREATE TABLE vec2f (id UInt64, v Array(Float32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3488', () => {
    const query = `CREATE TABLE vec2d (id UInt64, v Array(Float64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3489', () => {
    const query = `CREATE TABLE table_for_alter ( id UInt64,
Data String
) ENGINE = MergeTree() ORDER BY id SETTINGS parts_to_throw_insert = 1, parts_to_delay_insert = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3490', () => {
    const query = `CREATE TABLE t1 (key UInt32, val UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3491', () => {
    const query = `CREATE TABLE t2 (key UInt32, val UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3492', () => {
    const query = `CREATE TEMPORARY TABLE 02271_temporary_table_show_rows_bytes (A Int64) Engine=Memory as SELECT * FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3493', () => {
    const query = `CREATE TABLE replace_partition_source (
key UInt64
)
ENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/source', '1')
PARTITION BY key
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3494', () => {
    const query = `CREATE TABLE replace_partition_dest1 (
key UInt64
)
ENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest1', '1')
PARTITION BY key
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3495', () => {
    const query = `CREATE TABLE replace_partition_dest1_2 (
key UInt64
)
ENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest1', '2')
PARTITION BY key
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3496', () => {
    const query = `CREATE TABLE replace_partition_dest2 (
key UInt64
)
ENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest2', '1')
PARTITION BY key
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3497', () => {
    const query = `CREATE TABLE replace_partition_dest2_2 (
key UInt64
)
ENGINE = ReplicatedMergeTree('/test/02271_replace_partition_many/{database}/dest2', '2')
PARTITION BY key
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3498', () => {
    const query = `CREATE TEMPORARY TABLE t1_02271 (x INT(11));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3499', () => {
    const query = `CREATE TEMPORARY TABLE t2_02271 (x INT(11) DEFAULT 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3500', () => {
    const query = `CREATE TEMPORARY TABLE t3_02271 (x INT(11) UNSIGNED);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3501', () => {
    const query = `CREATE TEMPORARY TABLE t4_02271 (x INT(11) SIGNED);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3502', () => {
    const query = `CREATE TEMPORARY TABLE t5_02271 (x INT(11) SIGNED DEFAULT 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3503', () => {
    const query = `CREATE TEMPORARY TABLE t6_02271 (x INT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3504', () => {
    const query = `CREATE TEMPORARY TABLE t7_02271 (x INT() DEFAULT 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3505', () => {
    const query = `CREATE TEMPORARY TABLE t8_02271 (x INT() UNSIGNED);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3506', () => {
    const query = `CREATE TEMPORARY TABLE t9_02271 (x INT() SIGNED);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3507', () => {
    const query = `CREATE TEMPORARY TABLE t10_02271 (x INT() SIGNED DEFAULT 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3508', () => {
    const query = `CREATE TABLE github_events (
\`file_time\` DateTime,
\`event_type\` Enum8('CommitCommentEvent' = 1, 'CreateEvent' = 2, 'DeleteEvent' = 3, 'ForkEvent' = 4, 'GollumEvent' = 5, 'IssueCommentEvent' = 6, 'IssuesEvent' = 7, 'MemberEvent' = 8, 'PublicEvent' = 9, 'PullRequestEvent' = 10, 'PullRequestReviewCommentEvent' = 11, 'PushEvent' = 12, 'ReleaseEvent' = 13, 'SponsorshipEvent' = 14, 'WatchEvent' = 15, 'GistEvent' = 16, 'FollowEvent' = 17, 'DownloadEvent' = 18, 'PullRequestReviewEvent' = 19, 'ForkApplyEvent' = 20, 'Event' = 21, 'TeamAddEvent' = 22),
\`actor_login\` LowCardinality(String),
\`repo_name\` LowCardinality(String),
\`created_at\` DateTime,
\`updated_at\` DateTime,
\`action\` Enum8('none' = 0, 'created' = 1, 'added' = 2, 'edited' = 3, 'deleted' = 4, 'opened' = 5, 'closed' = 6, 'reopened' = 7, 'assigned' = 8, 'unassigned' = 9, 'labeled' = 10, 'unlabeled' = 11, 'review_requested' = 12, 'review_request_removed' = 13, 'synchronize' = 14, 'started' = 15, 'published' = 16, 'update' = 17, 'create' = 18, 'fork' = 19, 'merged' = 20),
\`comment_id\` UInt64,
\`body\` String,
\`path\` String,
\`position\` Int32,
\`line\` Int32,
\`ref\` LowCardinality(String),
\`ref_type\` Enum8('none' = 0, 'branch' = 1, 'tag' = 2, 'repository' = 3, 'unknown' = 4),
\`creator_user_login\` LowCardinality(String),
\`number\` UInt32,
\`title\` String,
\`labels\` Array(LowCardinality(String)),
\`state\` Enum8('none' = 0, 'open' = 1, 'closed' = 2),
\`locked\` UInt8,
\`assignee\` LowCardinality(String),
\`assignees\` Array(LowCardinality(String)),
\`comments\` UInt32,
\`author_association\` Enum8('NONE' = 0, 'CONTRIBUTOR' = 1, 'OWNER' = 2, 'COLLABORATOR' = 3, 'MEMBER' = 4, 'MANNEQUIN' = 5),
\`closed_at\` DateTime,
\`merged_at\` DateTime,
\`merge_commit_sha\` String,
\`requested_reviewers\` Array(LowCardinality(String)),
\`requested_teams\` Array(LowCardinality(String)),
\`head_ref\` LowCardinality(String),
\`head_sha\` String,
\`base_ref\` LowCardinality(String),
\`base_sha\` String,
\`merged\` UInt8,
\`mergeable\` UInt8,
\`rebaseable\` UInt8,
\`mergeable_state\` Enum8('unknown' = 0, 'dirty' = 1, 'clean' = 2, 'unstable' = 3, 'draft' = 4),
\`merged_by\` LowCardinality(String),
\`review_comments\` UInt32,
\`maintainer_can_modify\` UInt8,
\`commits\` UInt32,
\`additions\` UInt32,
\`deletions\` UInt32,
\`changed_files\` UInt32,
\`diff_hunk\` String,
\`original_position\` UInt32,
\`commit_id\` String,
\`original_commit_id\` String,
\`push_size\` UInt32,
\`push_distinct_size\` UInt32,
\`member_login\` LowCardinality(String),
\`release_tag_name\` String,
\`release_name\` String,
\`review_state\` Enum8('none' = 0, 'approved' = 1, 'changes_requested' = 2, 'commented' = 3, 'dismissed' = 4, 'pending' = 5)
)
ENGINE = MergeTree ORDER BY (event_type, repo_name, created_at);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3509', () => {
    const query = `CREATE TABLE github_events__fuzz_0 (\`file_time\` Int64, \`event_type\` Enum8('CommitCommentEvent' = 1, 'CreateEvent' = 2, 'DeleteEvent' = 3, 'ForkEvent' = 4, 'GollumEvent' = 5, 'IssueCommentEvent' = 6, 'IssuesEvent' = 7, 'MemberEvent' = 8, 'PublicEvent' = 9, 'PullRequestEvent' = 10, 'PullRequestReviewCommentEvent' = 11, 'PushEvent' = 12, 'ReleaseEvent' = 13, 'SponsorshipEvent' = 14, 'WatchEvent' = 15, 'GistEvent' = 16, 'FollowEvent' = 17, 'DownloadEvent' = 18, 'PullRequestReviewEvent' = 19, 'ForkApplyEvent' = 20, 'Event' = 21, 'TeamAddEvent' = 22), \`actor_login\` LowCardinality(String), \`repo_name\` LowCardinality(Nullable(String)), \`created_at\` DateTime, \`updated_at\` DateTime, \`action\` Array(Enum8('none' = 0, 'created' = 1, 'added' = 2, 'edited' = 3, 'deleted' = 4, 'opened' = 5, 'closed' = 6, 'reopened' = 7, 'assigned' = 8, 'unassigned' = 9, 'labeled' = 10, 'unlabeled' = 11, 'review_requested' = 12, 'review_request_removed' = 13, 'synchronize' = 14, 'started' = 15, 'published' = 16, 'update' = 17, 'create' = 18, 'fork' = 19, 'merged' = 20)), \`comment_id\` UInt64, \`body\` String, \`path\` LowCardinality(String), \`position\` Int32, \`line\` Int32, \`ref\` String, \`ref_type\` Enum8('none' = 0, 'branch' = 1, 'tag' = 2, 'repository' = 3, 'unknown' = 4), \`creator_user_login\` Int16, \`number\` UInt32, \`title\` String, \`labels\` Array(Array(LowCardinality(String))), \`state\` Enum8('none' = 0, 'open' = 1, 'closed' = 2), \`locked\` UInt8, \`assignee\` Array(LowCardinality(String)), \`assignees\` Array(LowCardinality(String)), \`comments\` UInt32, \`author_association\` Array(Enum8('NONE' = 0, 'CONTRIBUTOR' = 1, 'OWNER' = 2, 'COLLABORATOR' = 3, 'MEMBER' = 4, 'MANNEQUIN' = 5)), \`closed_at\` UUID, \`merged_at\` DateTime, \`merge_commit_sha\` Nullable(String), \`requested_reviewers\` Array(LowCardinality(Int64)), \`requested_teams\` Array(String), \`head_ref\` String, \`head_sha\` String, \`base_ref\` String, \`base_sha\` String, \`merged\` Nullable(UInt8), \`mergeable\` Nullable(UInt8), \`rebaseable\` LowCardinality(UInt8), \`mergeable_state\` Array(Enum8('unknown' = 0, 'dirty' = 1, 'clean' = 2, 'unstable' = 3, 'draft' = 4)), \`merged_by\` LowCardinality(String), \`review_comments\` UInt32, \`maintainer_can_modify\` Nullable(UInt8), \`commits\` UInt32, \`additions\` Nullable(UInt32), \`deletions\` UInt32, \`changed_files\` UInt32, \`diff_hunk\` Nullable(String), \`original_position\` UInt32, \`commit_id\` String, \`original_commit_id\` String, \`push_size\` UInt32, \`push_distinct_size\` UInt32, \`member_login\` LowCardinality(String), \`release_tag_name\` LowCardinality(String), \`release_name\` String, \`review_state\` Int16) ENGINE = MergeTree ORDER BY (event_type, repo_name, created_at) settings allow_nullable_key=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3510', () => {
    const query = `CREATE TABLE t_02267_collation (x varchar(255) COLLATE utf8_unicode_ci NOT NULL) ENGINE = Memory; -- {serverError NOT_IMPLEMENTED} SET compatibility_ignore_collation_in_create_table=true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3511', () => {
    const query = `CREATE TABLE t_02267_collation (x varchar(255) COLLATE utf8_unicode_ci NOT NULL) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3512', () => {
    const query = `CREATE TABLE 02267_t (n1 UInt32, n2 UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3513', () => {
    const query = `CREATE TABLE t (n UInt32) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3514', () => {
    const query = `CREATE TABLE t_02267 (
a Array(String),
b UInt32,
c Array(String)
)
ENGINE = MergeTree
ORDER BY b
SETTINGS index_granularity = 500, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3515', () => {
    const query = `CREATE TABLE 02266_auto_add_nullable (
val0 Int8 DEFAULT NULL,
val1 Nullable(Int8) DEFAULT NULL,
val2 UInt8 DEFAULT NUll,
val3 String DEFAULT null,
val4 LowCardinality(Int8) DEFAULT NULL,
val5 LowCardinality(Nullable(Int8)) DEFAULT NULL
)
ENGINE = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3516', () => {
    const query = `CREATE DATABASE 02265_atomic_db ENGINE = Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3517', () => {
    const query = `CREATE DATABASE 02265_ordinary_db ENGINE = Ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3518', () => {
    const query = `CREATE TABLE 02265_ordinary_db.join_table ( \`a\` Int64 ) ENGINE = Join(\`ALL\`, LEFT, a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3519', () => {
    const query = `create table per_table_ttl_02265 (key Int, date Date, value String) engine=MergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3520', () => {
    const query = `create table ttl_02265    (date Date, key Int, value String TTL date + interval 1 month) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/ttl_02265', 'r1') order by key partition by date settings min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3521', () => {
    const query = `create table ttl_02265_r2 (date Date, key Int, value String TTL date + interval 1 month) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/ttl_02265', 'r2') order by key partition by date settings min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3522', () => {
    const query = `CREATE TABLE most_ordinary_mt (
Key UInt64
)
ENGINE = MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3523', () => {
    const query = `CREATE TABLE alter_enum_array( Key UInt64,
Value Array(Enum8('Option1'=1, 'Option2'=2))
)
ENGINE=MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3524', () => {
    const query = `create table test_02250 (x Nullable(UInt32)) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3525', () => {
    const query = `CREATE TABLE t (a DateTime('UTC'), b String, c String, d String, e Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3526', () => {
    const query = `create table test_02249 (x UInt32, y String) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3527', () => {
    const query = `CREATE TABLE t_flatten_tuple(t Tuple(t1 Nested(a UInt32, s String), b UInt32, t2 Tuple(k String, v UInt32))) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3528', () => {
    const query = `CREATE TABLE t_flatten_object(data Object('json')) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3529', () => {
    const query = `CREATE TABLE weird_partitions_02245(d DateTime, d1 DateTime default d - toIntervalHour(8), id Int64) Engine=MergeTree
PARTITION BY (toYYYYMM(toDateTime(d)), ignore(d1))
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3530', () => {
    const query = `create table test_02245 (a UInt64) engine = S3(s3_conn, filename='test_02245', format=Parquet);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3531', () => {
    const query = `create table test_02245_2 (a UInt64, _path Int32) engine = S3(s3_conn, filename='test_02245_2', format=Parquet);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3532', () => {
    const query = `create table test_02245_s3_nested_parquet1(a Int64, b Tuple(a Int64, b String)) engine=S3(s3_conn, filename='test_02245_s3_nested_parquet1_{_partition_id}', format='Parquet') partition by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3533', () => {
    const query = `create table test_02245_s3_nested_parquet2(a Int64, b Tuple(a Int64, b Tuple(c Int64, d String))) engine=S3(s3_conn, filename='test_02245_s3_nested_parquet2_{_partition_id}', format='Parquet') partition by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3534', () => {
    const query = `create table test_02245_s3_nested_arrow1(a Int64, b Tuple(a Int64, b String)) engine=S3(s3_conn, filename='test_02245_s3_nested_arrow1_{_partition_id}', format='Arrow') partition by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3535', () => {
    const query = `create table test_02245_s3_nested_arrow2(a Int64, b Tuple(a Int64, b Tuple(c Int64, d String))) engine=S3(s3_conn, filename='test_02245_s3_nested_arrow2_{_partition_id}', format='Arrow') partition by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3536', () => {
    const query = `create table test_02245_s3_nested_orc1(a Int64, b Tuple(a Int64, b String)) engine=S3(s3_conn, filename='test_02245_s3_nested_orc1_{_partition_id}', format='ORC') partition by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3537', () => {
    const query = `create table test_02245_s3_nested_orc2(a Int64, b Tuple(a Int64, b Tuple(c Int64, d String))) engine=S3(s3_conn, filename='test_02245_s3_nested_orc2_{_partition_id}', format='ORC') partition by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3538', () => {
    const query = `CREATE TABLE with_nullable ( timestamp UInt32,
country LowCardinality(Nullable(String)) ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3539', () => {
    const query = `CREATE TABLE  without_nullable ( timestamp UInt32,
country LowCardinality(String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3540', () => {
    const query = `create table url (i String) engine=URL('http://127.0.0.1:8123?query=select+12', 'RawBLOB', headers('X-ClickHouse-Format'='JSONEachRow'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3541', () => {
    const query = `CREATE TABLE lc_table (
col LowCardinality(String)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3542', () => {
    const query = `CREATE TABLE test_table_ipv4 (
ip String,
ipv4 IPv4
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3543', () => {
    const query = `CREATE TABLE test_table_ipv4_materialized (
ip String,
ipv6 IPv4 MATERIALIZED toIPv4(ip)
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3544', () => {
    const query = `CREATE TABLE test_table_ipv6 (
ip String,
ipv6 IPv6
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3545', () => {
    const query = `CREATE TABLE test_table_ipv6_materialized (
ip String,
ipv6 IPv6 MATERIALIZED toIPv6(ip)
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3546', () => {
    const query = `CREATE TABLE test_table (id UInt64, value IPv6) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3547', () => {
    const query = `CREATE TABLE test_table (id UInt64, value_ipv4 IPv4, value_ipv6 IPv6) ENGINE=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3548', () => {
    const query = `CREATE TABLE t_subcolumns_sizes (id UInt64, arr Array(UInt64), n Nullable(String), d Object('json')) ENGINE = MergeTree ORDER BY id
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3549', () => {
    const query = `CREATE TABLE rdb (key UInt32, value Array(UInt32), value2 String) ENGINE = EmbeddedRocksDB PRIMARY KEY (key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3550', () => {
    const query = `CREATE TABLE t1 (k UInt32) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3551', () => {
    const query = `CREATE TABLE t2 (k UInt16) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3552', () => {
    const query = `CREATE TABLE test (key UInt32, value String) Engine=MergeTree()
ORDER BY key
SETTINGS min_bytes_for_wide_part = 10485760,
compress_marks=false,
compress_primary_key=false,
disk = disk(
type = cache,
max_size = '128Mi',
path = 'filesystem_query_cache/',
cache_on_write_operations= 1,
enable_filesystem_query_cache_limit = 1,
delayed_cleanup_interval_ms = 100,
disk = 's3_disk');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3553', () => {
    const query = `CREATE TABLE test (key UInt32, value String) Engine=MergeTree()
ORDER BY key
SETTINGS min_bytes_for_wide_part = 10485760,
compress_marks=false,
compress_primary_key=false,
disk = disk(
type = cache,
max_size = '128Mi',
path = 'filesystem_cache_bypass_cache_threshold/',
enable_bypass_cache_with_threshold = 1,
bypass_cache_threshold = 100,
delayed_cleanup_interval_ms = 100,
disk = 's3_disk');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3554', () => {
    const query = `CREATE TABLE t_sparse_02235 (a UInt8) ENGINE = MergeTree ORDER BY tuple() SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3555', () => {
    const query = `CREATE TABLE t_1 (
\`order_0\` UInt64,
\`ordinary_1\` UInt32,
\`p_time\` Date,
\`computed\` ALIAS 'computed_' || cast(\`p_time\` AS String),
\`granule\` MATERIALIZED cast(\`order_0\` / 0x2000 AS UInt64) % 3,
INDEX \`index_granule\` \`granule\` TYPE minmax GRANULARITY 1
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(p_time)
ORDER BY order_0
SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3556', () => {
    const query = `CREATE TABLE t_random_1 (
\`ordinary_1\` UInt32
)
ENGINE = GenerateRandom(1, 5, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3557', () => {
    const query = `create table dict_table (
\`strField\` String,
\`dateField\` Date,
\`float64Field\` Float64
) Engine Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3558', () => {
    const query = `create dictionary dict (
\`strField\` String,
\`dateField\` Date,
\`float64Field\` Float64
)
PRIMARY KEY strField, dateField
SOURCE (CLICKHOUSE(TABLE 'dict_table'))
LIFETIME(MIN 300 MAX 360)
LAYOUT (COMPLEX_KEY_HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3559', () => {
    const query = `create table data_table (
\`float64Field1\` Float64,
\`float64Field2\` Float64,
\`strField1\` String,
\`strField2\` String
) Engine Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3560', () => {
    const query = `CREATE TABLE ev (a Int32, b Int32) Engine=MergeTree() ORDER BY a SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3561', () => {
    const query = `CREATE TABLE idx (a Int32) Engine=MergeTree() ORDER BY a SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3562', () => {
    const query = `create table data_02233 (partition Int, parent_key Int, child_key Int, value Int) engine=MergeTree() partition by partition order by parent_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3563', () => {
    const query = `create table data_02233 (parent_key Int, child_key Int, value Int) engine=MergeTree() order by parent_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3564', () => {
    const query = `CREATE TABLE t_inter_02233 (n Int32) ENGINE = MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3565', () => {
    const query = `CREATE TABLE lower_test ( a Int32,
b String
) ENGINE=MergeTree
PARTITION BY b
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3566', () => {
    const query = `CREATE TABLE broken (time UInt64) ENGINE = MergeTree PARTITION BY toYYYYMMDD(toDate(time / 1000)) ORDER BY time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3567', () => {
    const query = `CREATE TABLE t_functions_to_subcolumns_alias (id UInt64, t Tuple(UInt64, String), m Map(String, UInt64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3568', () => {
    const query = `CREATE TABLE hierarchy_source_table (id UInt64, parent_id UInt64) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3569', () => {
    const query = `CREATE DICTIONARY hierarchy_flat_dictionary (
id UInt64,
parent_id UInt64 HIERARCHICAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'hierarchy_source_table'))
LAYOUT(FLAT())
LIFETIME(MIN 1 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3570', () => {
    const query = `create table buffer_02231 (
key Int,
v1 AggregateFunction(groupArray, String)
) engine = Buffer(currentDatabase(), 'out_02231',
1
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3571', () => {
    const query = `create table out_02231 as buffer_02231 engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3572', () => {
    const query = `create table in_02231 (number Int) engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3573', () => {
    const query = `create materialized view mv_02231 to buffer_02231 as select number as key,
groupArrayState(toString(number)) as v1
from in_02231
group by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3574', () => {
    const query = `CREATE TABLE bloom_filter_sizing_pk( key UInt64,
value UInt64,
INDEX key_bf key TYPE bloom_filter(0.01) GRANULARITY 2147483648
) ENGINE=MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3575', () => {
    const query = `CREATE TABLE bloom_filter_sizing_sec( key1 UInt64,
key2 UInt64,
value UInt64,
INDEX key_bf key2 TYPE bloom_filter(0.01) GRANULARITY 2147483648
) ENGINE=MergeTree ORDER BY key1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3576', () => {
    const query = `create table data_02230_ttl (date Date, key Int) Engine=MergeTree() order by key TTL date + 14;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3577', () => {
    const query = `create table null_02230_ttl engine=Null() as data_02230_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3578', () => {
    const query = `create table data_02230_column_ttl (date Date, value Int TTL date + 7, key Int) Engine=MergeTree() order by key TTL date + 14;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3579', () => {
    const query = `create table null_02230_column_ttl engine=Null() as data_02230_column_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3580', () => {
    const query = `create table data_02228 (key1 UInt32, sign Int8, s UInt64) engine = CollapsingMergeTree(sign) order by (key1) partition by key1 % 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3581', () => {
    const query = `create table data_rep_02228 (key1 UInt32, sign Int8, s UInt64) engine = ReplicatedCollapsingMergeTree('/clickhouse/{database}', 'r1', sign) order by (key1) partition by key1 % 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3582', () => {
    const query = `CREATE TABLE bf_tokenbf_lowcard_test (
row_id UInt32,
lc LowCardinality(String),
lc_fixed LowCardinality(FixedString(8)),
INDEX lc_bf_tokenbf lc TYPE tokenbf_v1(256,2,0) GRANULARITY 1,
INDEX lc_fixed_bf_tokenbf lc_fixed TYPE tokenbf_v1(256,2,0) GRANULARITY 1
) Engine=MergeTree() ORDER BY row_id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3583', () => {
    const query = `CREATE TABLE bf_ngram_lowcard_test (
row_id UInt32,
lc LowCardinality(String),
lc_fixed LowCardinality(FixedString(8)),
INDEX lc_ngram lc TYPE ngrambf_v1(4,256,2,0) GRANULARITY 1,
INDEX lc_fixed_ngram lc_fixed TYPE ngrambf_v1(4,256,2,0) GRANULARITY 1
) Engine=MergeTree() ORDER BY row_id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3584', () => {
    const query = `CREATE TABLE calendar ( \`year\` Int64, \`month\` Int64 ) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3585', () => {
    const query = `CREATE TABLE events32 ( \`year\` Int32, \`month\` Int32 ) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3586', () => {
    const query = `CREATE TABLE t_async_insert_table_function (id UInt32, s String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3587', () => {
    const query = `create table dst_02224 (key Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3588', () => {
    const query = `create table src_02224 (key Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3589', () => {
    const query = `create table test (x UInt32, y String, d Date) engine=Memory() as select number as x, toString(number) as y, toDate(number) as d from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3590', () => {
    const query = `CREATE TABLE data_02222 engine=MergeTree() ORDER BY dummy AS SELECT * FROM system.one;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3591', () => {
    const query = `CREATE TABLE table1 (lat1 Float64, lon1 Float64, lat2 Float64, lon2 Float64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3592', () => {
    const query = `CREATE TABLE table1 (resolution UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3593', () => {
    const query = `CREATE TABLE t_ttl_move_if_exists (d DateTime, a UInt32) ENGINE = MergeTree ORDER BY tuple()
TTL d TO DISK IF EXISTS 'non_existing_disk';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3594', () => {
    const query = `CREATE TABLE t_key_condition_float (a Float32) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3595', () => {
    const query = `CREATE TABLE t_key_condition_float (a Float64) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3596', () => {
    const query = `CREATE TABLE t_key_condition_float (a UInt64) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3597', () => {
    const query = `CREATE TABLE minimum_sample_size_continuos (baseline UInt64, sigma UInt64) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3598', () => {
    const query = `CREATE TABLE minimum_sample_size_continuos (baseline Float64, sigma Float64) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3599', () => {
    const query = `CREATE TABLE minimum_sample_size_conversion (p1 Float64) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3600', () => {
    const query = `CREATE TABLE 02005_test_table (
value Map(Int64, Int64)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3601', () => {
    const query = `CREATE TABLE 02005_test_table (
key Array(Int64),
value Array(Int64)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3602', () => {
    const query = `CREATE TABLE t_ephemeral_02205_1 (x UInt32 DEFAULT y, y UInt32 EPHEMERAL 17, z UInt32 DEFAULT 5) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3603', () => {
    const query = `CREATE TABLE data_02201 ( key Int,
value_max SimpleAggregateFunction(max, Int),
INDEX idx value_max TYPE minmax GRANULARITY 1
)
Engine=AggregatingMergeTree()
ORDER BY key
PARTITION BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3604', () => {
    const query = `CREATE TABLE data_02201 ( key Int,
value Int,
INDEX idx value TYPE minmax GRANULARITY 1
)
Engine=AggregatingMergeTree()
ORDER BY key
PARTITION BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3605', () => {
    const query = `CREATE TABLE data_02200 ( key Int,
value Int,
INDEX idx value TYPE minmax GRANULARITY 1
)
Engine=MergeTree()
ORDER BY key
PARTITION BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3606', () => {
    const query = `CREATE TABLE t_async_insert_02193_1 (id UInt32, s String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3607', () => {
    const query = `CREATE TABLE t_nested_with_dots (n Nested(id UInt64, \`values.id\` Array(UInt64))) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3608', () => {
    const query = `CREATE TABLE t_nested_with_dots (\`t.t2\` Tuple(\`t3.t4.t5\` Tuple(\`s1.s2\` String, \`u1.u2\` UInt64), \`s3.s4.s5\` String)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3609', () => {
    const query = `create table test as format(JSONEachRow,  \$\$
{"a": "Hello", "b": 111}
{"a": "World", "b": 123}
{"a": "Hello", "b": 111}
{"a": "Hello", "b": 131}
{"a": "World", "b": 123}
\$\$);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3610', () => {
    const query = `CREATE TABLE 02188_test_dictionary_source (
id UInt64,
value String
)
ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3611', () => {
    const query = `CREATE DICTIONARY 02188_test_dictionary_simple_primary_key (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02188_test_dictionary_source'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3612', () => {
    const query = `CREATE DICTIONARY 02188_test_dictionary_simple_primary_key (
id UInt64,
value String
)
PRIMARY KEY (id)
SOURCE(CLICKHOUSE(TABLE '02188_test_dictionary_source'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3613', () => {
    const query = `CREATE DICTIONARY 02188_test_dictionary_complex_primary_key (
id UInt64,
value String
)
PRIMARY KEY id, value
SOURCE(CLICKHOUSE(TABLE '02188_test_dictionary_source'))
LAYOUT(COMPLEX_KEY_DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3614', () => {
    const query = `CREATE DICTIONARY 02188_test_dictionary_complex_primary_key (
id UInt64,
value String
)
PRIMARY KEY (id, value)
SOURCE(CLICKHOUSE(TABLE '02188_test_dictionary_source'))
LAYOUT(COMPLEX_KEY_DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3615', () => {
    const query = `CREATE TABLE test_02187 ( info String,
id Int32
)
ENGINE = ReplacingMergeTree(id)
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3616', () => {
    const query = `CREATE TABLE IF NOT EXISTS data_a_02187 (a Int64) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3617', () => {
    const query = `CREATE TABLE IF NOT EXISTS data_b_02187 (a Int64) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3618', () => {
    const query = `CREATE MATERIALIZED VIEW IF NOT EXISTS mv1 TO data_b_02187 AS Select sleepEachRow(0.05) as a FROM data_a_02187;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3619', () => {
    const query = `CREATE MATERIALIZED VIEW IF NOT EXISTS mv2 TO data_b_02187 AS Select sleepEachRow(0.05) as a FROM data_a_02187;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3620', () => {
    const query = `CREATE MATERIALIZED VIEW IF NOT EXISTS mv3 TO data_b_02187 AS Select sleepEachRow(0.05) as a FROM data_a_02187;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3621', () => {
    const query = `CREATE MATERIALIZED VIEW IF NOT EXISTS mv4 TO data_b_02187 AS Select sleepEachRow(0.05) as a FROM data_a_02187;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3622', () => {
    const query = `CREATE MATERIALIZED VIEW IF NOT EXISTS mv5 TO data_b_02187 AS Select sleepEachRow(0.05) as a FROM data_a_02187;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3623', () => {
    const query = `CREATE TABLE 02186_range_dictionary_source_table (
id UInt64,
start Date,
end Date,
value String
)
Engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3624', () => {
    const query = `CREATE DICTIONARY 02186_range_dictionary (
id UInt64,
start Date,
end Date,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02186_range_dictionary_source_table'))
LAYOUT(RANGE_HASHED(range_lookup_strategy 'min'))
RANGE(MIN start MAX end)
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3625', () => {
    const query = `CREATE DICTIONARY 02186_range_dictionary (
id UInt64,
start Date,
end Date,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02186_range_dictionary_source_table'))
LAYOUT(RANGE_HASHED(range_lookup_strategy 'max'))
RANGE(MIN start MAX end)
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3626', () => {
    const query = `CREATE TABLE 02185_range_dictionary_source_table (
id UInt64,
start Nullable(UInt64),
end Nullable(UInt64),
value String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3627', () => {
    const query = `CREATE DICTIONARY 02185_range_dictionary (
id UInt64,
start UInt64,
end UInt64,
value String DEFAULT 'DefaultValue'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02185_range_dictionary_source_table'))
LAYOUT(RANGE_HASHED(convert_null_range_bound_to_open 1))
RANGE(MIN start MAX end)
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3628', () => {
    const query = `CREATE DICTIONARY 02185_range_dictionary (
id UInt64,
start UInt64,
end UInt64,
value String DEFAULT 'DefaultValue'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02185_range_dictionary_source_table'))
LAYOUT(RANGE_HASHED(convert_null_range_bound_to_open 0))
RANGE(MIN start MAX end)
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3629', () => {
    const query = `create table t (
s Array(Int),
l Int8,
r Int8
) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3630', () => {
    const query = `CREATE TABLE mergeTree_02184 (id UInt64, name String, dt Date) Engine=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3631', () => {
    const query = `CREATE TABLE distributed_02184 (id UInt64, name String, dt Date) Engine=Distributed('test_cluster_two_shards', 'default', 'mergeTree_02184', rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3632', () => {
    const query = `CREATE TABLE buffer_02184 (id UInt64, name String, dt Date) ENGINE = Buffer(default, mergeTree_02184, 16, 10, 100, 10000, 1000000, 10000000, 100000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3633', () => {
    const query = `CREATE TABLE merge_02184 (id UInt64, name String, dt Date) ENGINE = Merge('default', 'distributed_02184');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3634', () => {
    const query = `CREATE TABLE null_02184 AS system.one Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3635', () => {
    const query = `CREATE TABLE file_02184 (id UInt64, name String, dt Date) ENGINE = File(TabSeparated);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3636', () => {
    const query = `CREATE TABLE memory_02184 (id UInt64, name String, dt Date) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3637', () => {
    const query = `CREATE TABLE log_02184 (id UInt64, name String, dt Date) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3638', () => {
    const query = `CREATE TABLE ting_log_02184 (id UInt64, name String, dt Date) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3639', () => {
    const query = `CREATE TABLE stripe_log_02184 (id UInt64, name String, dt Date) ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3640', () => {
    const query = `CREATE TABLE 02184_range_dictionary_source_table (
id UInt64,
start UInt64,
end UInt64,
value_0 String,
value_1 String,
value_2 String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3641', () => {
    const query = `CREATE DICTIONARY 02184_range_dictionary (
id UInt64,
start UInt64,
end UInt64,
value_0 String,
value_1 String,
value_2 String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02184_range_dictionary_source_table'))
LAYOUT(RANGE_HASHED())
RANGE(MIN start MAX end)
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3642', () => {
    const query = `CREATE TABLE t_nested_tuple (
endUserIDs Tuple(
_experience Tuple(
aaid Tuple(
id Nullable(String),
namespace Tuple(
code LowCardinality(Nullable(String))
),
primary LowCardinality(Nullable(UInt8))
),
mcid Tuple(
id Nullable(String),
namespace Tuple(
code LowCardinality(Nullable(String))
),
primary LowCardinality(Nullable(UInt8))
)
)
)
)
ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3643', () => {
    const query = `create table ips_v6(i IPv6) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3644', () => {
    const query = `CREATE TABLE ipv6_test26473 ( \`ip\` String,
\`ipv6\` IPv6 MATERIALIZED toIPv6(ip),
\`is_ipv6\` Boolean   MATERIALIZED isIPv6String(ip),
\`cblock\` IPv6   MATERIALIZED cutIPv6(ipv6, 10, 1),
\`cblock1\` IPv6  MATERIALIZED toIPv6(cutIPv6(ipv6, 10, 1))  
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3645', () => {
    const query = `CREATE TABLE table_02184 (x UInt8); --{serverError ENGINE_REQUIRED} SET default_table_engine = 'Log';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3646', () => {
    const query = `CREATE TABLE table_02184 (x UInt8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3647', () => {
    const query = `CREATE TABLE table_02184 (x UInt8); --{serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH} CREATE TABLE table_02184 (x UInt8, PRIMARY KEY (x));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3648', () => {
    const query = `CREATE TABLE test_optimize_exception (date Date) PARTITION BY toYYYYMM(date) ORDER BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3649', () => {
    const query = `CREATE TABLE table_02184 (x UInt8) PARTITION BY x; --{serverError BAD_ARGUMENTS} CREATE TABLE table_02184 (x UInt8) ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3650', () => {
    const query = `CREATE TABLE table_02184 (x UInt8) PRIMARY KEY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3651', () => {
    const query = `CREATE TABLE numbers1 AS SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3652', () => {
    const query = `CREATE TABLE numbers2 ORDER BY intHash32(number) SAMPLE BY intHash32(number) AS SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3653', () => {
    const query = `CREATE TABLE numbers3 ENGINE = Log AS SELECT number FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3654', () => {
    const query = `CREATE TABLE test_table (EventDate Date, CounterID UInt32,  UserID UInt64,  EventTime DateTime('America/Los_Angeles'), UTCEventTime DateTime('UTC')) PARTITION BY EventDate PRIMARY KEY CounterID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3655', () => {
    const query = `CREATE MATERIALIZED VIEW test_view (Rows UInt64,  MaxHitTime DateTime('America/Los_Angeles')) AS SELECT count() AS Rows, max(UTCEventTime) AS MaxHitTime FROM test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3656', () => {
    const query = `CREATE MATERIALIZED VIEW test_view_filtered (EventDate Date, CounterID UInt32) POPULATE AS SELECT CounterID, EventDate FROM test_table WHERE EventDate < '2013-01-01';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3657', () => {
    const query = `CREATE MATERIALIZED VIEW test_view ORDER BY Rows AS SELECT count() AS Rows, max(UTCEventTime) AS MaxHitTime FROM test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3658', () => {
    const query = `CREATE TABLE t1 AS test_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3659', () => {
    const query = `CREATE TABLE t2 ENGINE=Memory AS test_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3660', () => {
    const query = `CREATE DATABASE test_02184 ORDER BY kek; -- {serverError INCORRECT_QUERY} CREATE DATABASE test_02184 SETTINGS x=1; -- {serverError UNKNOWN_SETTING}
CREATE TABLE table_02184 (x UInt8, y int, PRIMARY KEY (x)) ENGINE=MergeTree PRIMARY KEY y; -- {clientError BAD_ARGUMENTS}
SET default_table_engine = 'MergeTree';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3661', () => {
    const query = `CREATE TABLE table_02184 (x UInt8, y int, PRIMARY KEY (x)) PRIMARY KEY y; -- {clientError BAD_ARGUMENTS} CREATE TABLE mt (a UInt64, b Nullable(String), PRIMARY KEY (a, coalesce(b, 'test')), INDEX b_index b TYPE set(123) GRANULARITY 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3662', () => {
    const query = `CREATE TABLE mt2 AS mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3663', () => {
    const query = `CREATE TEMPORARY TABLE tmp (n int);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3664', () => {
    const query = `CREATE TEMPORARY TABLE tmp1 (n int) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3665', () => {
    const query = `CREATE TEMPORARY TABLE tmp2 (n int) ENGINE=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3666', () => {
    const query = `CREATE TEMPORARY TABLE tmp2 (n int) ORDER BY n; -- {serverError BAD_ARGUMENTS} CREATE TEMPORARY TABLE tmp2 (n int, PRIMARY KEY (n)); -- {serverError BAD_ARGUMENTS}
CREATE TABLE log (n int);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3667', () => {
    const query = `CREATE TABLE log1 AS log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3668', () => {
    const query = `CREATE TABLE mem AS log1 ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3669', () => {
    const query = `CREATE TABLE mem AS SELECT 1 as n; --{serverError ENGINE_REQUIRED} SET default_table_engine = 'Memory';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3670', () => {
    const query = `CREATE TABLE mem ORDER BY n AS SELECT 1 as n; -- {serverError BAD_ARGUMENTS} SET default_table_engine = 'MergeTree';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3671', () => {
    const query = `CREATE TABLE mt ORDER BY n AS SELECT 1 as n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3672', () => {
    const query = `CREATE TABLE mem ENGINE=Memory AS SELECT 1 as n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3673', () => {
    const query = `CREATE TABLE val AS values('n int', 1, 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3674', () => {
    const query = `CREATE TABLE val2 AS val;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3675', () => {
    const query = `CREATE TABLE log ENGINE=Log AS val;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3676', () => {
    const query = `CREATE TABLE kek (n int) SETTINGS log_queries=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3677', () => {
    const query = `CREATE TABLE lol (n int) ENGINE=MergeTree ORDER BY n SETTINGS min_bytes_for_wide_part=123 SETTINGS log_queries=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3678', () => {
    const query = `CREATE TEMPORARY TABLE tmp_log (n int);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3679', () => {
    const query = `CREATE TABLE 02183_dictionary_test_table (id UInt64) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3680', () => {
    const query = `CREATE DICTIONARY 02183_flat_dictionary (
id UInt64
)
PRIMARY KEY id
LAYOUT(FLAT())
SOURCE(CLICKHOUSE(TABLE '02183_dictionary_test_table'))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3681', () => {
    const query = `CREATE DICTIONARY 02183_hashed_dictionary (
id UInt64
)
PRIMARY KEY id
LAYOUT(HASHED())
SOURCE(CLICKHOUSE(TABLE '02183_dictionary_test_table'))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3682', () => {
    const query = `CREATE DICTIONARY 02183_hashed_array_dictionary (
id UInt64
)
PRIMARY KEY id
LAYOUT(HASHED_ARRAY())
SOURCE(CLICKHOUSE(TABLE '02183_dictionary_test_table'))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3683', () => {
    const query = `CREATE DICTIONARY 02183_cache_dictionary (
id UInt64
)
PRIMARY KEY id
LAYOUT(CACHE(SIZE_IN_CELLS 10))
SOURCE(CLICKHOUSE(TABLE '02183_dictionary_test_table'))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3684', () => {
    const query = `CREATE DICTIONARY 02183_direct_dictionary (
id UInt64
)
PRIMARY KEY id
LAYOUT(HASHED())
SOURCE(CLICKHOUSE(TABLE '02183_dictionary_test_table'))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3685', () => {
    const query = `CREATE TABLE ip_trie_dictionary_source_table (
prefix String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3686', () => {
    const query = `CREATE DICTIONARY 02183_ip_trie_dictionary (
prefix String
)
PRIMARY KEY prefix
SOURCE(CLICKHOUSE(TABLE 'ip_trie_dictionary_source_table'))
LAYOUT(IP_TRIE())
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3687', () => {
    const query = `CREATE TABLE 02183_polygon_dictionary_source_table (
key Array(Array(Array(Tuple(Float64, Float64))))
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3688', () => {
    const query = `CREATE DICTIONARY 02183_polygon_dictionary (
key Array(Array(Array(Tuple(Float64, Float64))))
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE '02183_polygon_dictionary_source_table'))
LAYOUT(POLYGON(store_polygon_key_column 1))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3689', () => {
    const query = `CREATE TABLE 02183_range_dictionary_source_table (
key UInt64,
start UInt64,
end UInt64
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3690', () => {
    const query = `CREATE DICTIONARY 02183_range_dictionary (
key UInt64,
start UInt64,
end UInt64
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE '02183_range_dictionary_source_table'))
LAYOUT(RANGE_HASHED())
RANGE(MIN start MAX end)
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3691', () => {
    const query = `CREATE TABLE 02183_dictionary_source_table (
id UInt64,
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3692', () => {
    const query = `CREATE DICTIONARY 02183_flat_dictionary (
id UInt64,
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02183_dictionary_source_table'))
LIFETIME(0)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3693', () => {
    const query = `CREATE DICTIONARY 02183_hashed_dictionary (
id UInt64,
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02183_dictionary_source_table'))
LIFETIME(0)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3694', () => {
    const query = `CREATE DICTIONARY 02183_hashed_array_dictionary (
id UInt64,
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02183_dictionary_source_table'))
LIFETIME(0)
LAYOUT(HASHED_ARRAY());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3695', () => {
    const query = `CREATE DICTIONARY 02183_cache_dictionary (
id UInt64,
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02183_dictionary_source_table'))
LIFETIME(0)
LAYOUT(CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3696', () => {
    const query = `CREATE DICTIONARY 02183_direct_dictionary (
id UInt64,
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02183_dictionary_source_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3697', () => {
    const query = `CREATE TABLE 02183_ip_trie_dictionary_source_table (
prefix String,
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3698', () => {
    const query = `CREATE DICTIONARY 02183_ip_trie_dictionary (
prefix String,
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
)
PRIMARY KEY prefix
SOURCE(CLICKHOUSE(TABLE '02183_ip_trie_dictionary_source_table'))
LAYOUT(IP_TRIE(access_to_key_from_attributes 1))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3699', () => {
    const query = `CREATE TABLE 02183_polygon_dictionary_source_table (
key Array(Array(Array(Tuple(Float64, Float64)))),
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3700', () => {
    const query = `CREATE DICTIONARY 02183_polygon_dictionary (
key Array(Array(Array(Tuple(Float64, Float64)))),
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE '02183_polygon_dictionary_source_table'))
LAYOUT(POLYGON(store_polygon_key_column 1))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3701', () => {
    const query = `CREATE TABLE 02183_range_dictionary_source_table (
key UInt64,
start UInt64,
end UInt64,
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3702', () => {
    const query = `CREATE DICTIONARY 02183_range_dictionary (
key UInt64,
start UInt64,
end UInt64,
value_date Date,
value_date_32 Date32,
value_date_time DateTime,
value_date_time_64 DateTime64
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE '02183_range_dictionary_source_table'))
LAYOUT(RANGE_HASHED())
RANGE(MIN start MAX end)
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3703', () => {
    const query = `CREATE FUNCTION 02181_invalid_lambda AS lambda(((x * 2) AS x_doubled) + x_doubled); --{serverError UNSUPPORTED_METHOD} CREATE FUNCTION 02181_invalid_lambda AS lambda(x); --{serverError UNSUPPORTED_METHOD}
CREATE FUNCTION 02181_invalid_lambda AS lambda(); --{serverError UNSUPPORTED_METHOD}
CREATE FUNCTION 02181_invalid_lambda AS lambda(tuple(x)) --{serverError UNSUPPORTED_METHOD}
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3704', () => {
    const query = `CREATE TABLE 02181_test_table (
id UInt64,
value String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3705', () => {
    const query = `CREATE DICTIONARY 02181_test_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02181_test_table'))
LAYOUT(HASHED())
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3706', () => {
    const query = `create table t (x Bool) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3707', () => {
    const query = `create table if not exists t_group_by_lowcardinality(p_date Date, val LowCardinality(Nullable(String)))  engine=MergeTree() partition by p_date order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3708', () => {
    const query = `CREATE TABLE t_sparse_detach(id UInt64, s String) ENGINE = MergeTree ORDER BY id
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3709', () => {
    const query = `CREATE TABLE 02179_test_table (
id UInt64,
value String,
start Int64,
end Int64
) Engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3710', () => {
    const query = `CREATE DICTIONARY 02179_test_dictionary (
id UInt64,
value String DEFAULT 'DefaultValue',
start Int64,
end Int64
) PRIMARY KEY id
LAYOUT(RANGE_HASHED())
SOURCE(CLICKHOUSE(TABLE '02179_test_table'))
RANGE(MIN start MAX end)
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3711', () => {
    const query = `create table t (c Decimal32(9)) engine MergeTree order by c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3712', () => {
    const query = `CREATE DATABASE dict_db_02179;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3713', () => {
    const query = `CREATE TABLE dict_db_02179.dict_data (key UInt64, val UInt64) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3714', () => {
    const query = `CREATE DICTIONARY dict_db_02179.dict (
key UInt64 DEFAULT 0,
val UInt64 DEFAULT 10
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dict_data' PASSWORD '' DB 'dict_db_02179'))
LIFETIME(MIN 0 MAX 0)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3715', () => {
    const query = `CREATE DATABASE empty_db_02179;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3716', () => {
    const query = `CREATE TABLE test_degs_to_rads (degrees Float64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3717', () => {
    const query = `CREATE TABLE test_rads_to_degs (radians Float64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3718', () => {
    const query = `CREATE TABLE TESTTABLE ( _id UInt64,  pt String, attr_list Array(String)
) ENGINE = MergeTree() PARTITION BY (pt) ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3719', () => {
    const query = `CREATE TABLE data (
\`n\` UInt32,
\`t\` DateTime
)
ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3720', () => {
    const query = `CREATE TABLE agg ENGINE = AggregatingMergeTree
ORDER BY tuple() AS
SELECT
t,
sumIF(n, 0)
FROM data
GROUP BY t; -- { serverError UNKNOWN_FUNCTION}
CREATE TABLE agg
ENGINE = AggregatingMergeTree
ORDER BY tuple() AS
SELECT
t,
sumIf(n, 0)
FROM data
GROUP BY t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3721', () => {
    const query = `create table data_02177 (key Int) Engine=MergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3722', () => {
    const query = `CREATE TABLE left ( key UInt32, value String ) ENGINE = MergeTree ORDER BY key SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3723', () => {
    const query = `CREATE TABLE right (  key UInt32, value String ) ENGINE = MergeTree ORDER BY tuple() SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3724', () => {
    const query = `CREATE TABLE t02176(timestamp DateTime) ENGINE = MergeTree PARTITION BY toStartOfWeek(timestamp)
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3725', () => {
    const query = `create table data_02176 (key Int) Engine=MergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3726', () => {
    const query = `CREATE TABLE 02176_test_simple_key_table (
id UInt64,
value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3727', () => {
    const query = `CREATE DICTIONARY 02176_test_simple_key_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02176_test_simple_key_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3728', () => {
    const query = `CREATE TABLE 02176_test_complex_key_table (
id UInt64,
id_key String,
value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3729', () => {
    const query = `CREATE DICTIONARY 02176_test_complex_key_dictionary (
id UInt64,
id_key String,
value String
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(TABLE '02176_test_complex_key_table'))
LAYOUT(COMPLEX_KEY_DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3730', () => {
    const query = `create table local_02175 engine=Memory() as select * from system.one;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3731', () => {
    const query = `create table dist_02175 as local_02175 engine=Distributed(test_cluster_two_shards, currentDatabase(), local_02175);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3732', () => {
    const query = `CREATE TABLE t2 (k Int64, l Int64, m Int64, n Int64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3733', () => {
    const query = `CREATE MATERIALIZED VIEW mv1 TO t2 AS WITH
(SELECT max(i) FROM t1) AS t1
SELECT
t1 as k, -- Using local cache x 4
t1 as l,
t1 as m,
t1 as n
FROM t1
LIMIT 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3734', () => {
    const query = `CREATE TABLE t3 (z Int64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3735', () => {
    const query = `CREATE MATERIALIZED VIEW mv2 TO t3 AS SELECT
sum(i) + sum(j) + (SELECT * FROM (SELECT min(i) + min(j) FROM (SELECT * FROM system.one _a, t1 _b))) AS z
FROM t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3736', () => {
    const query = `CREATE TABLE t4 (z Int64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3737', () => {
    const query = `CREATE MATERIALIZED VIEW mv3 TO t4 AS SELECT
min(i) + min(j) + (SELECT * FROM (SELECT min(k) + min(l) FROM (SELECT * FROM system.one _a, t2 _b))) AS z
FROM t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3738', () => {
    const query = `CREATE TABLE table_map (id UInt32, col Map(String, UInt64)) engine = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3739', () => {
    const query = `CREATE TABLE counter (id UInt64, createdAt DateTime) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3740', () => {
    const query = `CREATE VIEW vcounter AS SELECT intDiv(id, 10) AS tens, max(createdAt) AS maxid FROM counter GROUP BY tens;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3741', () => {
    const query = `CREATE TABLE test_nested_default (
\`id\` String,
\`with_dot.str\` String,
\`with_dot.array\` Array(String)
)
ENGINE = MergeTree()
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3742', () => {
    const query = `CREATE TABLE h3_indexes (h3_index UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3743', () => {
    const query = `CREATE TABLE test_tb (a UInt64, s String) ENGINE = MergeTree() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3744', () => {
    const query = `CREATE MATERIALIZED VIEW test_view_tb ENGINE = MergeTree() ORDER BY a AS SELECT * FROM test_tb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3745', () => {
    const query = `CREATE TABLE 02162_test_table (
id UInt64,
value String,
range_value UInt64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3746', () => {
    const query = `CREATE DICTIONARY 02162_test_dictionary (
id UInt64,
value String,
range_value UInt64,
start UInt64 EXPRESSION range_value,
end UInt64 EXPRESSION range_value
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02162_test_table'))
LAYOUT(RANGE_HASHED())
RANGE(MIN start MAX end)
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3747', () => {
    const query = `CREATE TABLE mean_ztest (v int, s UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3748', () => {
    const query = `CREATE TABLE proportions_ztest (sx UInt64, sy UInt64, tx UInt64, ty UInt64) Engine = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3749', () => {
    const query = `create table merge_kek_1 (x UInt32, y UInt32) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3750', () => {
    const query = `create table merge_kek_2 (x UInt32, y UInt32) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3751', () => {
    const query = `CREATE TABLE t_02156_ololo_1 (k UInt32, v Nullable(String)) ENGINE = MergeTree order by k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3752', () => {
    const query = `CREATE TABLE t_02156_ololo_2 (k UInt32, v String) ENGINE = MergeTree order by k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3753', () => {
    const query = `CREATE TABLE t_02156_ololo_dist (k UInt32, v String) ENGINE = Distributed(test_shard_localhost, currentDatabase(), t_02156_ololo_2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3754', () => {
    const query = `CREATE TABLE t_02156_ololo_dist2 (k UInt32, v Nullable(String)) ENGINE = Distributed(test_shard_localhost, currentDatabase(), t_02156_ololo_1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3755', () => {
    const query = `CREATE TABLE t_02156_mt1 (k UInt32, v String) ENGINE = MergeTree ORDER BY k SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3756', () => {
    const query = `CREATE TABLE t_02156_mt2 (k UInt32, v String) ENGINE = MergeTree ORDER BY k SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3757', () => {
    const query = `CREATE TABLE t_02156_log (k UInt32, v String) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3758', () => {
    const query = `CREATE TABLE t_02156_dist (k UInt32, v String) ENGINE = Distributed(test_shard_localhost, currentDatabase(), t_02156_mt1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3759', () => {
    const query = `CREATE TABLE t_02156_merge1 (k UInt32, v String) ENGINE = Merge(currentDatabase(), 't_02156_mt1|t_02156_mt2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3760', () => {
    const query = `CREATE TABLE t_02156_merge2 (k UInt32, v String) ENGINE = Merge(currentDatabase(), 't_02156_mt1|t_02156_log');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3761', () => {
    const query = `CREATE TABLE t_02156_merge3 (k UInt32, v String) ENGINE = Merge(currentDatabase(), 't_02156_mt2|t_02156_dist');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3762', () => {
    const query = `CREATE TABLE nested_test (x UInt32, \`nest.col1\` Array(String), \`nest.col2\` Array(Int8)) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3763', () => {
    const query = `create table test (number UInt64) engine=File('Parquet');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3764', () => {
    const query = `create table test (number UInt64) engine=File('Parquet', 'test_02155/test1/data.Parquet');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3765', () => {
    const query = `create table test (number UInt64) engine=File('Parquet', 'test_02155/test3/data.Parquet.gz');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3766', () => {
    const query = `CREATE TABLE h3_indexes (id UInt8, h3_index UInt64, res UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3767', () => {
    const query = `CREATE TABLE 02155_test_table (
id UInt64,
value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3768', () => {
    const query = `CREATE DICTIONARY 02155_test_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02155_test_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3769', () => {
    const query = `CREATE TABLE 02155_test_dictionary_view (
id UInt64,
value String
) ENGINE=Dictionary(concat(currentDatabase(), '.02155_test_dictionary'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3770', () => {
    const query = `create table t02155_t64_tz ( a DateTime64(9, America/Chicago)) Engine = Memory; -- { clientError SYNTAX_ERROR } create table t02155_t_tz ( a DateTime(America/Chicago)) Engine = Memory; -- { clientError SYNTAX_ERROR }
create table t02155_t64_tz ( a DateTime64(9, 'America/Chicago')) Engine = Memory; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3771', () => {
    const query = `create table t02155_t_tz ( a DateTime('America/Chicago')) Engine = Memory; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3772', () => {
    const query = `CREATE TABLE t(d1 Decimal32(5), d2 Decimal64(10), d3 Decimal128(20), d4 Decimal256(40), f1 Float32, f2 Float64) ENGINE=Memory; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3773', () => {
    const query = `CREATE TEMPORARY TABLE IF NOT EXISTS default_table (x UInt32, y UInt32 DEFAULT 42, z UInt32 DEFAULT 33) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3774', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value Date32
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3775', () => {
    const query = `CREATE DICTIONARY test_dictionary (
id UInt64,
value Date32
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'test_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3776', () => {
    const query = `create table test_02152 (x UInt32, y String, z Array(UInt32), t Tuple(UInt32, String, Array(UInt32))) engine=File('CSV') settings format_csv_delimiter=';';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3777', () => {
    const query = `create table test_02152 (x UInt32, y String, z Array(UInt32), t Tuple(UInt32, String, Array(UInt32))) engine=File('CustomSeparated') settings format_custom_field_delimiter='<field_delimiter>', format_custom_row_before_delimiter='<row_start>', format_custom_row_after_delimiter='<row_end_delimiter>', format_custom_escaping_rule='CSV';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3778', () => {
    const query = `create table table_02152 (a String, b LowCardinality(String)) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3779', () => {
    const query = `CREATE TABLE tab_lc (x UInt64, y LowCardinality(String)) engine = MergeTree order by x SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3780', () => {
    const query = `CREATE TABLE t_read_in_order(date Date, i UInt64, v UInt64) ENGINE = MergeTree ORDER BY (date, i) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3781', () => {
    const query = `CREATE TABLE t_read_in_order(a UInt32, b UInt32) ENGINE = MergeTree ORDER BY (a, b)
SETTINGS index_granularity = 3, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3782', () => {
    const query = `CREATE TABLE t_read_in_order(dt DateTime, d Decimal64(5), v UInt64) ENGINE = MergeTree ORDER BY (toStartOfDay(dt), d) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3783', () => {
    const query = `CREATE FUNCTION 02148_test_function AS () -> (SELECT 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3784', () => {
    const query = `CREATE OR REPLACE FUNCTION 02148_test_function AS () -> (SELECT 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3785', () => {
    const query = `CREATE FUNCTION 02148_test_function AS (x) -> (SELECT x + 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3786', () => {
    const query = `CREATE FUNCTION 02148_test_function_nested AS (x) -> 02148_test_function(x + 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3787', () => {
    const query = `CREATE TABLE 02148_test_table (id UInt64, value String) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3788', () => {
    const query = `CREATE FUNCTION 02148_test_function AS () -> (SELECT * FROM 02148_test_table LIMIT 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3789', () => {
    const query = `CREATE OR REPLACE FUNCTION 02148_test_function AS () -> (SELECT value FROM 02148_test_table LIMIT 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3790', () => {
    const query = `CREATE TABLE source (a Int32) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3791', () => {
    const query = `CREATE TABLE source_null AS source ENGINE=Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3792', () => {
    const query = `CREATE TABLE dest_a (count UInt32, min Int32, max Int32, count_subquery Int32, min_subquery Int32, max_subquery Int32) ENGINE=MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3793', () => {
    const query = `CREATE MATERIALIZED VIEW mv_null TO source_null AS SELECT * FROM source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3794', () => {
    const query = `CREATE MATERIALIZED VIEW mv_a to dest_a AS SELECT
count() AS count,
min(a) AS min,
max(a) AS max,
(SELECT count() FROM source_null) AS count_subquery,
(SELECT min(a) FROM source_null) AS min_subquery,
(SELECT max(a) FROM source_null) AS max_subquery
FROM source_null
GROUP BY count_subquery, min_subquery, max_subquery;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3795', () => {
    const query = `CREATE TABLE main ( \`id\` String, \`color\` String, \`section\` String, \`description\` String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3796', () => {
    const query = `CREATE TABLE destination_join ( \`key\` String, \`id\` String, \`color\` String, \`section\` String, \`description\` String) ENGINE = Join(ANY, LEFT, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3797', () => {
    const query = `CREATE TABLE destination_set (\`key\` String) ENGINE = Set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3798', () => {
    const query = `CREATE MATERIALIZED VIEW mv_to_join TO \`destination_join\` AS SELECT concat(id, '_', color) AS key, * FROM main;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3799', () => {
    const query = `CREATE MATERIALIZED VIEW mv_to_set TO \`destination_set\` AS SELECT key FROM destination_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3800', () => {
    const query = `CREATE TABLE t1 (\`id\` Int32, \`key\` String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3801', () => {
    const query = `CREATE TABLE t2 (\`id\` Int32, \`key\` String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3802', () => {
    const query = `CREATE TABLE errors_local (level LowCardinality(String)) ENGINE=ReplacingMergeTree ORDER BY level settings min_bytes_for_wide_part = '10000000';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3803', () => {
    const query = `CREATE TABLE errors_local(level LowCardinality(String)) ENGINE=ReplacingMergeTree ORDER BY level;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3804', () => {
    const query = `create table a8x ENGINE = MergeTree ORDER BY tuple() settings min_bytes_for_wide_part=0 as SELECT number FROM system.numbers limit 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3805', () => {
    const query = `CREATE TABLE 02131_rqtable (x UInt8) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3806', () => {
    const query = `CREATE ROW POLICY 02131_filter_1 ON 02131_rqtable USING x=1 AS permissive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3807', () => {
    const query = `CREATE ROW POLICY 02131_filter_2 ON 02131_rqtable USING x=2 AS permissive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3808', () => {
    const query = `CREATE ROW POLICY 02131_filter_3 ON 02131_rqtable USING x=3 AS permissive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3809', () => {
    const query = `CREATE ROW POLICY 02131_filter_4 ON 02131_rqtable USING x<=2 AS restrictive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3810', () => {
    const query = `CREATE ROW POLICY 02131_filter_5 ON 02131_rqtable USING x>=2 AS restrictive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3811', () => {
    const query = `CREATE TABLE t_index_non_materialized (a UInt32) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3812', () => {
    const query = `CREATE TABLE 02131_rptable (x UInt8) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3813', () => {
    const query = `CREATE ROW POLICY 02131_filter_1 ON 02131_rptable USING x=1 AS permissive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3814', () => {
    const query = `CREATE ROW POLICY 02131_filter_2 ON 02131_rptable USING x=2 AS permissive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3815', () => {
    const query = `CREATE ROW POLICY 02131_filter_3 ON 02131_rptable USING x=3 AS permissive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3816', () => {
    const query = `CREATE ROW POLICY 02131_filter_4 ON 02131_rptable USING x<=2 AS restrictive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3817', () => {
    const query = `CREATE ROW POLICY 02131_filter_5 ON 02131_rptable USING x>=2 AS restrictive TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3818', () => {
    const query = `create materialized view t_mv engine = MergeTree order by tuple() as select uniq(x), bitAnd(x, 255) as y from t group by y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3819', () => {
    const query = `CREATE TABLE t_materialize_column (i Int32) ENGINE = MergeTree ORDER BY i PARTITION BY i
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3820', () => {
    const query = `create table ttl_test_02129(a Int64, b String, d Date) Engine=MergeTree partition by d order by a
settings min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0, materialize_ttl_recalculate_only = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3821', () => {
    const query = `create table ttl_test_02129(a Int64, b String, d Date) Engine=MergeTree partition by d order by a
settings min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0, materialize_ttl_recalculate_only = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3822', () => {
    const query = `CREATE TABLE 02127_join_settings_with_persistency_1 (k UInt64, s String) ENGINE = Join(ANY, LEFT, k) SETTINGS persistent=1, join_any_take_last_row=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3823', () => {
    const query = `CREATE TABLE 02127_join_settings_with_persistency_0 (k UInt64, s String) ENGINE = Join(ANY, LEFT, k) SETTINGS persistent=0, join_any_take_last_row=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3824', () => {
    const query = `CREATE FUNCTION 02126_function AS x -> x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3825', () => {
    const query = `CREATE FUNCTION 02126_function AS () -> x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3826', () => {
    const query = `CREATE FUNCTION 02126_function AS () -> 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3827', () => {
    const query = `CREATE TABLE alter_column_02126 (a Int, x Int, y Int) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3828', () => {
    const query = `CREATE FUNCTION 02125_function AS x -> 02125_function(x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3829', () => {
    const query = `CREATE FUNCTION 02125_function_1 AS x -> 02125_function_2(x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3830', () => {
    const query = `CREATE FUNCTION 02125_function_2 AS x -> 02125_function_1(x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3831', () => {
    const query = `CREATE OR REPLACE FUNCTION 02125_function_2 AS x -> x + 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3832', () => {
    const query = `CREATE TABLE data ( \`id\` UInt64, \`timestamp\` DateTime) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3833', () => {
    const query = `CREATE WINDOW VIEW wv Engine Memory as select count(id), tumbleStart(w_id) as window_start from data group by tumble(timestamp, INTERVAL '10' SECOND) as w_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3834', () => {
    const query = `create table src (key Int) engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3835', () => {
    const query = `create table dst (key Int) engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3836', () => {
    const query = `create materialized view mv2 to dst as select * from src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3837', () => {
    const query = `CREATE TABLE log (A String) ENGINE= FileLog('/tmp/aaa.csv', 'CSV'); -- {serverError BAD_ARGUMENTS } CREATE TABLE log (A String) ENGINE= FileLog('/tmp/aaa.csv', 'CSV'); -- {serverError BAD_ARGUMENTS }
CREATE TABLE log (A String) ENGINE= FileLog('/tmp/aaa.csv', 'CSV'); -- {serverError BAD_ARGUMENTS }
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3838', () => {
    const query = `CREATE TABLE 02125_test_table (
id UInt64,
value Nullable(String)
)
ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3839', () => {
    const query = `CREATE DICTIONARY 02125_test_dictionary (
id UInt64,
value Nullable(String)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE '02125_test_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3840', () => {
    const query = `create table test (x String) Engine=StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3841', () => {
    const query = `CREATE TABLE t_uncompressed_cache(id UInt32, n UInt32) ENGINE = MergeTree ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0,
min_compress_block_size = 12, max_compress_block_size = 12,
index_granularity = 4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3842', () => {
    const query = `CREATE TABLE insert_dedup_token1 ( id Int32, val UInt32
) ENGINE=ReplicatedMergeTree('/clickhouse/tables/{database}/insert_dedup_token', 'r1') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3843', () => {
    const query = `CREATE TABLE insert_dedup_token2 ( id Int32, val UInt32
) ENGINE=ReplicatedMergeTree('/clickhouse/tables/{database}/insert_dedup_token', 'r2') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3844', () => {
    const query = `CREATE TABLE test (test String, A Int64, B Int64) ENGINE = ReplicatedMergeTree ('/clickhouse/tables/{database}/test_02124/{table}', '1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3845', () => {
    const query = `CREATE MATERIALIZED VIEW test_mv_a Engine=ReplicatedMergeTree ('/clickhouse/tables/{database}/test_02124/{table}', '1') order by tuple() AS SELECT test, A, count() c FROM test group by test, A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3846', () => {
    const query = `CREATE MATERIALIZED VIEW test_mv_b Engine=ReplicatedMergeTree ('/clickhouse/tables/{database}/test_02124/{table}', '1') partition by A order by tuple() AS SELECT test, A, count() c FROM test group by test, A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3847', () => {
    const query = `CREATE MATERIALIZED VIEW test_mv_c Engine=ReplicatedMergeTree ('/clickhouse/tables/{database}/test_02124/{table}', '1') order by tuple() AS SELECT test, A, count() c FROM test group by test, A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3848', () => {
    const query = `CREATE TABLE insert_dedup_token ( id Int32, val UInt32
) ENGINE=MergeTree() ORDER BY id
SETTINGS non_replicated_deduplication_window=0xFFFFFFFF;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3849', () => {
    const query = `CREATE TABLE t (
	d1 Decimal32(5),
	d2 Decimal64(10),
	d3 Decimal128(30),
	d4 Decimal256(50),
	f1 Float32,
	f2 Float32
)ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3850', () => {
    const query = `CREATE TABLE s (
id UInt64,
value String
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3851', () => {
    const query = `CREATE DICTIONARY dict (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(NAME clickhouse_dictionary PORT tcpPort() DB currentDatabase()))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3852', () => {
    const query = `CREATE TABLE table_MySQLWire (x UInt64) ENGINE = File(MySQLWire);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3853', () => {
    const query = `CREATE TABLE t_tuple_element(t1 Tuple(a UInt32, s String), t2 Tuple(UInt32, String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3854', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_02115;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3855', () => {
    const query = `create table t1_local(a Int32) engine=MergeTree() order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3856', () => {
    const query = `create table t2_local as t1_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3857', () => {
    const query = `create table t1_all as t1_local engine Distributed(test_cluster_two_shards_localhost, test_02115, t1_local, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3858', () => {
    const query = `create table t2_all as t2_local engine Distributed(test_cluster_two_shards_localhost, test_02115, t2_local, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3859', () => {
    const query = `CREATE TABLE t_map_contains (m Map(String, UInt32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3860', () => {
    const query = `CREATE TABLE bool_test (value Bool,f String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3861', () => {
    const query = `CREATE TABLE tabl_1 (key String) ENGINE MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3862', () => {
    const query = `CREATE TABLE tabl_2 (key String) ENGINE MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3863', () => {
    const query = `CREATE TABLE with_fill_date (d Date, d32 Date32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3864', () => {
    const query = `CREATE TABLE with_fill_date (d DateTime('UTC'), d64 DateTime64(3, 'UTC')) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3865', () => {
    const query = `create table set_index (a Int32, b Int32, INDEX b_set b type set(0) granularity 1) engine MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3866', () => {
    const query = `CREATE DATABASE 02111_modify_table_comment;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3867', () => {
    const query = `CREATE TABLE t (
\`n\` Int8
)
ENGINE = MergeTree
ORDER BY n
COMMENT 'this is a MergeTree table';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3868', () => {
    const query = `CREATE TABLE t_merge AS t ENGINE = Merge('02111_modify_table_comment', 't')
COMMENT 'this is a Merge table';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3869', () => {
    const query = `CREATE TABLE map_extractKeyLike_test (id UInt32, map Map(String, String)) Engine=MergeTree() ORDER BY id settings index_granularity=2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3870', () => {
    const query = `CREATE FUNCTION 02103_test_function AS x -> x + 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3871', () => {
    const query = `CREATE FUNCTION 02103_test_function_with_nested_function_empty_args AS () -> 02103_test_function(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3872', () => {
    const query = `CREATE FUNCTION 02103_test_function_with_nested_function_arg AS (x) -> 02103_test_function(x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3873', () => {
    const query = `CREATE FUNCTION IF NOT EXISTS 02102_test_function AS x -> x + 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3874', () => {
    const query = `CREATE FUNCTION 02102_test_function AS x -> x + 1; --{serverError FUNCTION_ALREADY_EXISTS} CREATE FUNCTION IF NOT EXISTS 02102_test_function AS x -> x + 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3875', () => {
    const query = `CREATE FUNCTION 02101_test_function AS x -> x + 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3876', () => {
    const query = `CREATE OR REPLACE FUNCTION 02101_test_function AS x -> x + 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3877', () => {
    const query = `CREATE OR REPLACE FUNCTION 02101_test_function AS x -> x + 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3878', () => {
    const query = `CREATE TABLE tbl_repr( ts DateTime,
x  String)
ENGINE=MergeTree ORDER BY ts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3879', () => {
    const query = `CREATE TABLE foo (ts DateTime, x UInt64) ENGINE = MergeTree PARTITION BY toYYYYMMDD(ts)
ORDER BY (ts);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3880', () => {
    const query = `CREATE TABLE bar (ts DateTime, x UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3881', () => {
    const query = `CREATE FUNCTION 02099_lambda_function AS x -> arrayMap(array_element -> array_element * 2, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3882', () => {
    const query = `CREATE FUNCTION 02098_alias_function AS x -> (((x * 2) AS x_doubled) + x_doubled);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3883', () => {
    const query = `CREATE TABLE t_remove_sample_by(id UInt64) ENGINE = MergeTree ORDER BY id SAMPLE BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3884', () => {
    const query = `CREATE TABLE t_remove_sample_by(id UInt64) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/t_remove_sample_by', '1')
ORDER BY id SAMPLE BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3885', () => {
    const query = `CREATE TABLE t_remove_sample_by(id UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3886', () => {
    const query = `CREATE TABLE t_remove_sample_by(id String) ENGINE = MergeTree ORDER BY id SAMPLE BY id
SETTINGS check_sample_column_is_correct = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3887', () => {
    const query = `CREATE TABLE polygons_test_table (
key Array(Array(Array(Tuple(Float64, Float64)))),
name String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3888', () => {
    const query = `CREATE DICTIONARY polygons_test_dictionary_no_option (
key Array(Array(Array(Tuple(Float64, Float64)))),
name String
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE 'polygons_test_table'))
LAYOUT(POLYGON())
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3889', () => {
    const query = `CREATE DICTIONARY polygons_test_dictionary (
key Array(Array(Array(Tuple(Float64, Float64)))),
name String
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE 'polygons_test_table'))
LAYOUT(POLYGON(STORE_POLYGON_KEY_COLUMN 1))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3890', () => {
    const query = `CREATE DATABASE 02097_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3891', () => {
    const query = `CREATE TABLE test_table (
key_column UInt64,
data_column_1 UInt64,
data_column_2 UInt8
)
ENGINE = MergeTree
ORDER BY key_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3892', () => {
    const query = `CREATE DICTIONARY test_dictionary (
key_column UInt64 DEFAULT 0,
data_column_1 UInt64 DEFAULT 1,
data_column_2 UInt8 DEFAULT 1
)
PRIMARY KEY key_column
LAYOUT(DIRECT())
SOURCE(CLICKHOUSE(TABLE 'test_table'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3893', () => {
    const query = `CREATE TABLE test_table_default (
data_1 DEFAULT dictGetUInt64('02097_db.test_dictionary', 'data_column_1', toUInt64(0)),
data_2 DEFAULT dictGet(02097_db.test_dictionary, 'data_column_2', toUInt64(0))
)
ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3894', () => {
    const query = `CREATE FUNCTION 02096_test_function AS x -> x + 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3895', () => {
    const query = `CREATE TABLE t (n UInt8) ENGINE=MergeTree ORDER BY n SAMPLE BY tuple(); -- { serverError INCORRECT_QUERY } CREATE TABLE t (n UInt8) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3896', () => {
    const query = `create database db_hang engine=Ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3897', () => {
    const query = `create table db_hang.test(A Int64) Engine=MergeTree order by A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3898', () => {
    const query = `create materialized view db_hang.test_mv(A Int64) Engine=MergeTree order by A as select * from db_hang.test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3899', () => {
    const query = `create database db_hang_temp engine=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3900', () => {
    const query = `CREATE TABLE t1 ( \`a1\` Int64, \`1a1\` Int64 ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3901', () => {
    const query = `CREATE TABLE t2 ( \`b1\` Int64, \`1b1\` Int64 ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3902', () => {
    const query = `CREATE TABLE t3 ( \`c1\` Int64, \`1c1\` Int64 ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3903', () => {
    const query = `create table utf8_overlap (str String) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3904', () => {
    const query = `CREATE TABLE join_on_disk (id Int) Engine=MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3905', () => {
    const query = `CREATE TABLE partslost_0 (x String) ENGINE=ReplicatedMergeTree('/clickhouse/table/{database}_02067_lost/partslost', '0') ORDER BY tuple() SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, old_parts_lifetime = 1,
cleanup_delay_period = 1, cleanup_delay_period_random_add = 1, cleanup_thread_preferred_points_per_iteration=0,
index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3906', () => {
    const query = `CREATE TABLE partslost_1 (x String) ENGINE=ReplicatedMergeTree('/clickhouse/table/{database}_02067_lost/partslost', '1') ORDER BY tuple() SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, old_parts_lifetime = 1,
cleanup_delay_period = 1, cleanup_delay_period_random_add = 1, cleanup_thread_preferred_points_per_iteration=0,
index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3907', () => {
    const query = `CREATE TABLE partslost_2 (x String) ENGINE=ReplicatedMergeTree('/clickhouse/table/{database}_02067_lost/partslost', '2') ORDER BY tuple() SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, old_parts_lifetime = 1,
cleanup_delay_period = 1, cleanup_delay_period_random_add = 1, cleanup_thread_preferred_points_per_iteration=0,
index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3908', () => {
    const query = `create table data_02053 (id Int64, A Nullable(Int64), X Int64 materialized coalesce(A, -1)) engine=MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3909', () => {
    const query = `CREATE TABLE remote_test(a1 UInt8) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3910', () => {
    const query = `CREATE TABLE alter_table (a UInt8, b Int16) ENGINE = MergeTree
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3911', () => {
    const query = `CREATE TABLE test_table (message String) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3912', () => {
    const query = `CREATE TABLE test_tuple_filter (id UInt32, value String, log_date Date) Engine=MergeTree() ORDER BY id PARTITION BY log_date SETTINGS index_granularity = 3, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3913', () => {
    const query = `CREATE TABLE map_containsKeyLike_test (id UInt32, map Map(String, String)) Engine=MergeTree() ORDER BY id settings index_granularity=2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3914', () => {
    const query = `CREATE TABLE test_data ( col1 Nullable(String),
col2 Nullable(String),
col3 Nullable(String)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3915', () => {
    const query = `CREATE TABLE test_table (
key UInt64,
value String,
INDEX value_index value TYPE minmax GRANULARITY 1
)
Engine=MergeTree()
ORDER BY key SETTINGS compress_marks=false;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3916', () => {
    const query = `create table test_table engine MergeTree order by a as select a_table.a, b_table.b_arr from (select arrayJoin(range(10000)) as a) a_table cross join (select range(10000) as b_arr) b_table settings max_memory_usage = 1; -- { serverError MEMORY_LIMIT_EXCEEDED } `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3917', () => {
    const query = `CREATE DATABASE 02028_db ON CLUSTER test_shard_localhost;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3918', () => {
    const query = `CREATE TABLE t1_local ON CLUSTER test_shard_localhost(partition_col_1 String, tc1 int,tc2 int)ENGINE=MergeTree() PARTITION BY partition_col_1 ORDER BY tc1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3919', () => {
    const query = `CREATE TABLE t2_local ON CLUSTER test_shard_localhost(partition_col_1 String, tc1 int,tc2 int)ENGINE=MergeTree() PARTITION BY partition_col_1 ORDER BY tc1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3920', () => {
    const query = `CREATE TABLE t_desc_subcolumns (
d Date,
n Nullable(String) COMMENT 'It is a nullable column',
arr1 Array(UInt32) CODEC(ZSTD),
arr2 Array(Array(String)) TTL d + INTERVAL 1 DAY,
t Tuple(s String, a Array(Tuple(a UInt32, b UInt32))) CODEC(ZSTD)
)
ENGINE = MergeTree ORDER BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3921', () => {
    const query = `CREATE TABLE t_comp_subcolumns (id UInt32, n Nullable(String), arr Array(Array(UInt32))) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3922', () => {
    const query = `CREATE TABLE test (
d DateTime,
a String,
b UInt64
)
ENGINE = MergeTree
PARTITION BY toDate(d)
ORDER BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3923', () => {
    const query = `CREATE DATABASE 2025_test_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3924', () => {
    const query = `CREATE TABLE 2025_test_db.test_table (
id UInt64,
value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3925', () => {
    const query = `CREATE DICTIONARY 2025_test_db.test_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
LAYOUT(DIRECT())
SOURCE(CLICKHOUSE(TABLE 'test_table' DB '2025_test_db'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3926', () => {
    const query = `CREATE TABLE 2025_test_db.view_table (
id UInt64,
value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3927', () => {
    const query = `CREATE VIEW test_view_different_db AS SELECT id, value, dictGet('2025_test_db.test_dictionary', 'value', id) FROM 2025_test_db.view_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3928', () => {
    const query = `CREATE TABLE dict_nested_map_test_table (
	test_id UInt32,
	type String,
	test_config Array(Map(String, Decimal(28,12))),
	ncp UInt8
)
ENGINE=MergeTree()
ORDER BY test_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3929', () => {
    const query = `CREATE DICTIONARY dict_nested_map_dictionary (
	test_id UInt32,
	type String,
	test_config Array(Map(String, Decimal(28,12))),
	ncp UInt8
)
PRIMARY KEY test_id
SOURCE(CLICKHOUSE(TABLE 'dict_nested_map_test_table'))
LAYOUT(HASHED())
LIFETIME(MIN 1 MAX 1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3930', () => {
    const query = `CREATE TABLE t (b UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3931', () => {
    const query = `CREATE TABLE source_table (
id UInt64,
value String
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3932', () => {
    const query = `CREATE DICTIONARY 2024_dictionary_with_comment (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'source_table'))
LAYOUT(FLAT())
LIFETIME(MIN 0 MAX 1000)
COMMENT 'Test dictionary with comment';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3933', () => {
    const query = `CREATE TABLE t_transform_or(B AggregateFunction(uniq, String), A String) Engine=MergeTree ORDER BY (A);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3934', () => {
    const query = `create table t1 (id LowCardinality(Nullable(Int64))) engine MergeTree order by id settings allow_nullable_key = 1, index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3935', () => {
    const query = `CREATE TABLE bf_tokenbf_array_test (
row_id UInt32,
array Array(String),
array_fixed Array(FixedString(2)),
INDEX array_bf_tokenbf array TYPE tokenbf_v1(256,2,0) GRANULARITY 1,
INDEX array_fixed_bf_tokenbf array_fixed TYPE tokenbf_v1(256,2,0) GRANULARITY 1
) Engine=MergeTree() ORDER BY row_id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3936', () => {
    const query = `CREATE TABLE bf_ngram_array_test (
row_id UInt32,
array Array(String),
array_fixed Array(FixedString(2)),
INDEX array_ngram array TYPE ngrambf_v1(4,256,2,0) GRANULARITY 1,
INDEX array_fixed_ngram array_fixed TYPE ngrambf_v1(4,256,2,0) GRANULARITY 1
) Engine=MergeTree() ORDER BY row_id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3937', () => {
    const query = `create table data_02021 (key Int) engine=MergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3938', () => {
    const query = `CREATE TABLE test_map (value Map(String, String)) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3939', () => {
    const query = `CREATE TABLE map_test_index_map_keys (
row_id UInt32,
map Map(String, String),
INDEX map_bloom_filter_keys mapKeys(map) TYPE bloom_filter GRANULARITY 1
) Engine=MergeTree() ORDER BY row_id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3940', () => {
    const query = `CREATE TABLE map_test_index_map_values (
row_id UInt32,
map Map(String, String),
INDEX map_bloom_filter_values mapValues(map) TYPE bloom_filter GRANULARITY 1
) Engine=MergeTree() ORDER BY row_id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3941', () => {
    const query = `create table t (val UInt32) engine = MergeTree order by val;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3942', () => {
    const query = `create table td1 engine = Distributed(test_shard_localhost, currentDatabase(), 't') as t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3943', () => {
    const query = `create table td2 engine = Distributed(test_shard_localhost, currentDatabase(), 't', xxHash32(val), default) as t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3944', () => {
    const query = `create table td3 engine = Distributed(test_shard_localhost, currentDatabase(), 't', xxHash32(val), 'default') as t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3945', () => {
    const query = `CREATE TABLE test_nested (
\`id\` String,
\`with_dot.str\` String,
\`with_dot.array\` Array(Int32)
)
ENGINE = MergeTree()
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3946', () => {
    const query = `CREATE TABLE t_with_dots (id UInt32, arr Array(UInt32), \`b.id\` UInt32, \`b.arr\` Array(UInt32)) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3947', () => {
    const query = `CREATE TABLE t_with_dots (id UInt32, arr Array(UInt32), \`b.id\` UInt32, \`b.arr\` Array(UInt32)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3948', () => {
    const query = `CREATE TABLE t_with_dots (id UInt32, arr Array(UInt32), \`b.id\` UInt32, \`b.arr\` Array(UInt32)) ENGINE = MergeTree ORDER BY id
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3949', () => {
    const query = `CREATE TABLE test_bit_shift_left_string_integer (str String, fixedStr FixedString(10), id Int64) engine=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3950', () => {
    const query = `CREATE TABLE summing_mt_aggregating_column (
Key UInt64,
Value UInt64,
ConcatArraySimple SimpleAggregateFunction(groupArrayArray, Array(UInt64)),
ConcatArrayComplex AggregateFunction(groupArrayArray, Array(UInt64))
)
ENGINE = SummingMergeTree()
ORDER BY Key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3951', () => {
    const query = `CREATE TABLE test_bit_shift_right_string_integer (str String, fixedStr FixedString(10), id Int64) engine=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3952', () => {
    const query = `CREATE TABLE spark_bar_test (\`cnt\` UInt64,\`event_date\` Date) ENGINE = MergeTree ORDER BY event_date SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3953', () => {
    const query = `CREATE TABLE nullable_division (x UInt32, y Nullable(UInt32), a Decimal(7, 2), b Nullable(Decimal(7, 2))) ENGINE=MergeTree() order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3954', () => {
    const query = `CREATE DICTIONARY test_dictionary (
key_column UInt64 DEFAULT 0,
data_column_1 UInt64 DEFAULT 1,
data_column_2 UInt8 DEFAULT 1
)
PRIMARY KEY key_column
LAYOUT(DIRECT())
SOURCE(CLICKHOUSE(DB currentDatabase() TABLE 'test_table'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3955', () => {
    const query = `CREATE TABLE test_table_default (
data_1 DEFAULT dictGetUInt64('test_dictionary', 'data_column_1', toUInt64(0)),
data_2 DEFAULT dictGet(test_dictionary, 'data_column_2', toUInt64(0))
)
ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3956', () => {
    const query = `CREATE TABLE short (e Int64, t DateTime ) ENGINE = MergeTree PARTITION BY e ORDER BY t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3957', () => {
    const query = `CREATE TABLE long (e Int64, t DateTime ) ENGINE = MergeTree PARTITION BY (e, toStartOfMonth(t)) ORDER BY t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3958', () => {
    const query = `CREATE TABLE merged as short ENGINE = Merge(currentDatabase(), 'short|long');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3959', () => {
    const query = `CREATE TABLE t_map_02014(i1 UInt64, i2 Int32, m1 Map(UInt32, String), m2 Map(Int8, String), m3 Map(Int128, String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3960', () => {
    const query = `CREATE TABLE t_map_02014(s String, fs FixedString(3), m1 Map(String, String), m2 Map(FixedString(3), String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3961', () => {
    const query = `CREATE TABLE dictionary_non_nullable_source_table (id UInt64, value String) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3962', () => {
    const query = `CREATE DICTIONARY test_dictionary_non_nullable (id UInt64, value String) PRIMARY KEY id LAYOUT(DIRECT()) SOURCE(CLICKHOUSE(TABLE 'dictionary_non_nullable_source_table'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3963', () => {
    const query = `CREATE TABLE dictionary_nullable_source_table (id UInt64, value Nullable(String)) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3964', () => {
    const query = `CREATE DICTIONARY test_dictionary_nullable (id UInt64, value Nullable(String)) PRIMARY KEY id LAYOUT(DIRECT()) SOURCE(CLICKHOUSE(TABLE 'dictionary_nullable_source_table'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3965', () => {
    const query = `create table test_uint64 (\`data\` UInt64 Default 0) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3966', () => {
    const query = `create table test_float64 (\`data\` Float64 Default 0.0) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3967', () => {
    const query = `create table test_date (\`data\` Date) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3968', () => {
    const query = `create table test_datetime (\`data\` DateTime) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3969', () => {
    const query = `CREATE TABLE bftest ( k Int64,
y Array(Int64) DEFAULT x,
x Array(Int64),
index ix1(x) TYPE bloom_filter GRANULARITY 3
)
Engine=MergeTree
ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3970', () => {
    const query = `create table enum_alter_issue (a Enum16('one' = 1, 'two' = 2), b Int) engine = ReplicatedMergeTree('/clickhouse/tables/{database}/test_02012/enum_alter_issue', 'r2')
ORDER BY b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3971', () => {
    const query = `create table enum_alter_issue (a Enum8('one' = 1, 'two' = 2), b Int) engine = ReplicatedMergeTree('/clickhouse/tables/{database}/test_02012/enum_alter_issue', 'r1')
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3972', () => {
    const query = `CREATE TABLE defaults (
s FixedString(20)
)ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3973', () => {
    const query = `CREATE TABLE table_with_range(\`name\` String,\`number\` UInt32) ENGINE = S3('http://localhost:11111/test/tsv_with_header.tsv', 'test', 'testtest', 'TSVWithNames') SETTINGS input_format_with_names_use_header = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3974', () => {
    const query = `CREATE TABLE tbl (\`lc\` LowCardinality(UUID)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3975', () => {
    const query = `create table enum_alter_issue (a Enum8('one' = 1, 'two' = 2)) engine = MergeTree() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3976', () => {
    const query = `CREATE TABLE normalize_test (id int, value String) ENGINE = MergeTree ORDER BY value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3977', () => {
    const query = `CREATE TABLE test_table (id UInt64) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3978', () => {
    const query = `CREATE DICTIONARY test_dictionary (id UInt64) PRIMARY KEY id LAYOUT(DIRECT()) SOURCE(CLICKHOUSE(TABLE 'test_table'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3979', () => {
    const query = `CREATE TABLE table_2009_part (\`i\` Int64, \`d\` Date, \`s\` String) ENGINE = MergeTree PARTITION BY toYYYYMM(d) ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3980', () => {
    const query = `CREATE TABLE test02008 ( col Tuple(
a Tuple(key1 int, key2 int),
b Tuple(key1 int, key2 int)
)
) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3981', () => {
    const query = `CREATE TABLE test02008 ( col Tuple(CPU double, Memory double, Disk double)
) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3982', () => {
    const query = `create table test (name String, uuid UUID) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3983', () => {
    const query = `CREATE TABLE tmp (x Int64) ENGINE = MergeTree() ORDER BY tuple() PARTITION BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3984', () => {
    const query = `CREATE TABLE date_table (
CountryID UInt64,
CountryKey String,
StartDate Date,
EndDate Date,
Tax Float64
)
ENGINE = MergeTree()
ORDER BY CountryID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3985', () => {
    const query = `CREATE DICTIONARY range_dictionary (
CountryID UInt64,
CountryKey String,
StartDate Date,
EndDate Date,
Tax Float64 DEFAULT 0.2
)
PRIMARY KEY CountryID, CountryKey
SOURCE(CLICKHOUSE(TABLE 'date_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(COMPLEX_KEY_RANGE_HASHED())
RANGE(MIN StartDate MAX EndDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3986', () => {
    const query = `CREATE TABLE date_table (
CountryID UInt64,
CountryKey String,
StartDate Date,
EndDate Date,
Tax Nullable(Float64)
)
ENGINE = MergeTree()
ORDER BY CountryID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3987', () => {
    const query = `CREATE DICTIONARY range_dictionary_nullable (
CountryID UInt64,
CountryKey String,
StartDate Date,
EndDate Date,
Tax Nullable(Float64) DEFAULT 0.2
)
PRIMARY KEY CountryID, CountryKey
SOURCE(CLICKHOUSE(TABLE 'date_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(COMPLEX_KEY_RANGE_HASHED())
RANGE(MIN StartDate MAX EndDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3988', () => {
    const query = `CREATE TABLE click_storage ( \`PhraseID\` UInt64, \`PhraseProcessedID\` UInt64 ALIAS if(PhraseID > 5, PhraseID, 0) ) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3989', () => {
    const query = `CREATE TABLE click_storage_dst ( \`PhraseID\` UInt64, \`PhraseProcessedID\` UInt64 ) ENGINE = Distributed(test_shard_localhost, currentDatabase(), 'click_storage');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3990', () => {
    const query = `CREATE TABLE t02006 on cluster test_shard_localhost (d Date)  ENGINE = MergeTree ORDER BY d
format Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3991', () => {
    const query = `CREATE MATERIALIZED VIEW m02006 on cluster test_shard_localhost Engine = MergeTree ORDER BY tuple() AS SELECT d, 0 AS i FROM t02006 GROUP BY d, i
format Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3992', () => {
    const query = `create table test(x1 Int, x2 Int, x3 Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3993', () => {
    const query = `create table test2(x1 Int, x2 Int, x3 Int) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3994', () => {
    const query = `create table tp2(first_col String, second_col Int32) engine = MergeTree() order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3995', () => {
    const query = `create table test (
\`id\`  UInt32,
\`time\` UInt32,
index \`id\` (\`id\`) type set(0) granularity 3,
index \`time\` (\`time\`) type minmax granularity 3
) engine = MergeTree()
order by (\`time\`);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3996', () => {
    const query = `CREATE TABLE rep_data (
p Int,
t DateTime,
INDEX idx t TYPE minmax GRANULARITY 1
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/rep_data', '1')
PARTITION BY p
ORDER BY t
SETTINGS number_of_free_entries_in_pool_to_execute_mutation=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3997', () => {
    const query = `CREATE TABLE data (
p Int,
t DateTime,
INDEX idx t TYPE minmax GRANULARITY 1
)
ENGINE = MergeTree
PARTITION BY p
ORDER BY t
SETTINGS number_of_free_entries_in_pool_to_execute_mutation=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3998', () => {
    const query = `create table tab (a LowCardinality(String), b LowCardinality(String)) engine = MergeTree partition by a order by tuple() settings min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 3999', () => {
    const query = `CREATE TABLE sessions (
\`user_id\` UInt64
)
ENGINE = MergeTree
ORDER BY user_id 
SAMPLE BY user_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4000', () => {
    const query = `CREATE TABLE t_map_int_key (m1 Map(UInt32, UInt32), m2 Map(Date, UInt32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4001', () => {
    const query = `create table dist as system.one engine=Distributed('test_shard_localhost', system, one);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4002', () => {
    const query = `create user if not exists u_02001 default database system;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4003', () => {
    const query = `CREATE TABLE bf_tokenbf_map_keys_test (
row_id UInt32,
map Map(String, String),
map_fixed Map(FixedString(2), String),
INDEX map_keys_tokenbf mapKeys(map) TYPE tokenbf_v1(256,2,0) GRANULARITY 1,
INDEX map_fixed_keys_tokenbf mapKeys(map_fixed) TYPE ngrambf_v1(4,256,2,0) GRANULARITY 1
) Engine=MergeTree() ORDER BY row_id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4004', () => {
    const query = `CREATE TABLE bf_tokenbf_map_values_test (
row_id UInt32,
map Map(String, String),
map_fixed Map(FixedString(2), String),
INDEX map_values_tokenbf mapValues(map) TYPE tokenbf_v1(256,2,0) GRANULARITY 1,
INDEX map_fixed_values_tokenbf mapValues(map_fixed) TYPE ngrambf_v1(4,256,2,0) GRANULARITY 1
) Engine=MergeTree() ORDER BY row_id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4005', () => {
    const query = `CREATE TABLE bf_ngrambf_map_keys_test (
row_id UInt32,
map Map(String, String),
map_fixed Map(FixedString(2), String),
INDEX map_keys_ngrambf mapKeys(map) TYPE ngrambf_v1(4,256,2,0) GRANULARITY 1,
INDEX map_fixed_keys_ngrambf mapKeys(map_fixed) TYPE ngrambf_v1(4,256,2,0) GRANULARITY 1
) Engine=MergeTree() ORDER BY row_id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4006', () => {
    const query = `CREATE TABLE bf_ngrambf_map_values_test (
row_id UInt32,
map Map(String, String),
map_fixed Map(FixedString(2), String),
INDEX map_values_ngrambf mapKeys(map) TYPE ngrambf_v1(4,256,2,0) GRANULARITY 1,
INDEX map_fixed_values_ngrambf mapKeys(map_fixed) TYPE ngrambf_v1(4,256,2,0) GRANULARITY 1
) Engine=MergeTree() ORDER BY row_id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4007', () => {
    const query = `CREATE TABLE t1 (id Int) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4008', () => {
    const query = `CREATE TABLE t2 (id Int) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4009', () => {
    const query = `CREATE TABLE test (col Int8) ENGINE=MergeTree ORDER BY tuple() SETTINGS vertical_merge_algorithm_min_rows_to_activate=1,
vertical_merge_algorithm_min_columns_to_activate=1,
min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4010', () => {
    const query = `CREATE USER test_user_01999;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4011', () => {
    const query = `CREATE role test_role_01999;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4012', () => {
    const query = `CREATE role test_role_01999_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4013', () => {
    const query = `CREATE DATABASE \`01945.db\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4014', () => {
    const query = `CREATE TABLE \`01945.db\`.test_dictionary_values (
	id UInt64,
	value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4015', () => {
    const query = `CREATE DICTIONARY \`01945.db\`.test_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
LAYOUT(DIRECT())
SOURCE(CLICKHOUSE(DB '01945.db' TABLE 'test_dictionary_values'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4016', () => {
    const query = `CREATE DICTIONARY \`01945.db\`.\`test_dictionary.test\` (
id UInt64,
value String
)
PRIMARY KEY id
LAYOUT(DIRECT())
SOURCE(CLICKHOUSE(DB '01945.db' TABLE 'test_dictionary_values'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4017', () => {
    const query = `CREATE TABLE src Engine=MergeTree ORDER BY id AS SELECT number as id, toInt32(1) as value FROM numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4018', () => {
    const query = `CREATE TABLE dst (id UInt64, delta Int64) Engine=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4019', () => {
    const query = `CREATE MATERIALIZED VIEW src2dst_true TO dst AS SELECT
id,
src.value - deltas_sum as delta
FROM src
LEFT JOIN
(
SELECT id, sum(delta) as deltas_sum FROM dst
WHERE id IN (SELECT id FROM src WHERE not sleepEachRow(0.001))
GROUP BY id
) _a
USING (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4020', () => {
    const query = `CREATE MATERIALIZED VIEW src2dst_false TO dst AS SELECT
id,
src.value - deltas_sum as delta
FROM src
LEFT JOIN
(
SELECT id, sum(delta) as deltas_sum FROM dst
WHERE id IN (SELECT id FROM src WHERE not sleepEachRow(0.001))
GROUP BY id
) _a
USING (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4021', () => {
    const query = `CREATE VIEW sleep_view AS SELECT sleepEachRow(0.001) FROM system.numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4022', () => {
    const query = `CREATE TABLE tmp ENGINE = TinyLog AS SELECT queryID();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4023', () => {
    const query = `CREATE TABLE tmp ENGINE = TinyLog AS SELECT initialQueryID();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4024', () => {
    const query = `CREATE TABLE tmp (str String) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4025', () => {
    const query = `CREATE TABLE a (number UInt64) ENGINE = MergeTree ORDER BY if(now() > toDateTime('2020-06-01 13:31:40'), toInt64(number), -number); -- { serverError BAD_ARGUMENTS } CREATE TABLE b (number UInt64) ENGINE = MergeTree ORDER BY now() > toDateTime(number); -- { serverError BAD_ARGUMENTS }
CREATE TABLE c (number UInt64) ENGINE = MergeTree ORDER BY now(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE d (number UInt64) ENGINE = MergeTree ORDER BY now() + 1 + 1 + number; -- { serverError BAD_ARGUMENTS }
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4026', () => {
    const query = `CREATE TABLE test_log (x UInt8, s String, a Array(Nullable(String))) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4027', () => {
    const query = `CREATE TABLE test_tiny_log (x UInt8, s String, a Array(Nullable(String))) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4028', () => {
    const query = `CREATE TABLE tab(val Int64, tz String) engine = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4029', () => {
    const query = `CREATE TABLE IF NOT EXISTS sample_incorrect (\`x\` UUID)
ENGINE = MergeTree
ORDER BY tuple(x)
SAMPLE BY x;  -- { serverError ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER }
DROP TABLE IF EXISTS sample_correct;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4030', () => {
    const query = `CREATE TABLE IF NOT EXISTS sample_correct (\`x\` String)
ENGINE = MergeTree
ORDER BY tuple(sipHash64(x))
SAMPLE BY sipHash64(x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4031', () => {
    const query = `CREATE TABLE test_dictionary_source (key String, value String) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4032', () => {
    const query = `CREATE DICTIONARY test_dictionary(key String, value String) PRIMARY KEY key
LAYOUT(COMPLEX_KEY_HASHED())
SOURCE(CLICKHOUSE(TABLE 'test_dictionary_source'))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4033', () => {
    const query = `CREATE TABLE totimezone_op_mono(i int, tz String, create_time DateTime) ENGINE MergeTree PARTITION BY toDate(create_time) ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4034', () => {
    const query = `CREATE TEMPORARY TABLE map_json (m1 Map(String, UInt64), m2 Map(UInt32, UInt32), m3 Map(Date, String));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4035', () => {
    const query = `create table "/t0" (a Int64, b Int64) engine = MergeTree() partition by a order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4036', () => {
    const query = `create table "/t1" (a Int64, b Int64) engine = MergeTree() partition by a order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4037', () => {
    const query = `CREATE TEMPORARY TABLE test (\`id\` String, \`products\` Nested (\`产品\` Array(String), \`销量\` Array(Int32)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4038', () => {
    const query = `CREATE TABLE users (user_id UUID) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4039', () => {
    const query = `CREATE TABLE orders (order_id UUID, user_id UUID) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4040', () => {
    const query = `CREATE TEMPORARY TABLE test (d Date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4041', () => {
    const query = `CREATE TABLE alter_index_test ( a UInt32,
b Date,
c UInt32,
d UInt32,
INDEX index_a a TYPE set(0) GRANULARITY 1
)
ENGINE = MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4042', () => {
    const query = `create temporary table data (id UInt64) engine=Memory() as with [ 0,
1,
0x7f, 0x80, 0xff,
0x7fff, 0x8000, 0xffff,
0x7fffffff, 0x80000000, 0xffffffff,
0x7fffffffffffffff, 0x8000000000000000, 0xffffffffffffffff
] as values select arrayJoin(values) id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4043', () => {
    const query = `CREATE TABLE table_a (a String, b Int64) ENGINE = MergeTree ORDER BY b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4044', () => {
    const query = `CREATE TABLE table_b (a Float64,  b Int64) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4045', () => {
    const query = `CREATE TABLE table_c (a Float64) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4046', () => {
    const query = `CREATE TABLE table_d (a Float64, count Int64) ENGINE MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4047', () => {
    const query = `CREATE TABLE table_e (a Float64, count Int64) ENGINE MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4048', () => {
    const query = `CREATE TABLE table_f (a Float64, count Int64) ENGINE MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4049', () => {
    const query = `CREATE MATERIALIZED VIEW matview_a_to_b TO table_b AS SELECT toFloat64(a) AS a, b + sleepEachRow(0.000001) AS count FROM table_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4050', () => {
    const query = `CREATE MATERIALIZED VIEW matview_b_to_c TO table_c AS SELECT SUM(a + sleepEachRow(0.000002)) as a FROM table_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4051', () => {
    const query = `CREATE MATERIALIZED VIEW matview_join_d_e TO table_f AS SELECT table_d.a as a, table_e.count + sleepEachRow(0.000003) as count FROM table_d LEFT JOIN table_e ON table_d.a = table_e.a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4052', () => {
    const query = `CREATE TABLE order_by_desc (u UInt32, s String) ENGINE MergeTree ORDER BY u PARTITION BY u % 100
SETTINGS index_granularity = 1024, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4053', () => {
    const query = `CREATE TABLE predicate_table (value UInt8) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4054', () => {
    const query = `create table merge (
dt Date,
colAlias0 Int32,
colAlias1 Int32,
col2 Int32,
colAlias2 UInt32,
col3 Int32,
colAlias3 UInt32
)
engine = Merge(currentDatabase(), '^alias_');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4055', () => {
    const query = `create table alias_1 (
dt Date,
col Int32,
colAlias0 UInt32 alias col,
colAlias1 UInt32 alias col3 + colAlias0,
col2 Int32,
colAlias2 Int32 alias colAlias1 + col2 + 10,
col3 Int32,
colAlias3 Int32 alias colAlias2 + colAlias1 + col3
)
engine = MergeTree()
order by (dt);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4056', () => {
    const query = `create table alias_2 (
dt Date,
col Int32,
col2 Int32,
colAlias0 UInt32 alias col,
colAlias3 Int32 alias col3 + colAlias0,
colAlias1 UInt32 alias colAlias0 + col2,
colAlias2 Int32 alias colAlias0 + colAlias1,
col3 Int32
)
engine = MergeTree()
order by (dt);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4057', () => {
    const query = `create table x_1 engine=Log as select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4058', () => {
    const query = `create table x_2 engine=Log as select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4059', () => {
    const query = `create table x engine=Merge(currentDatabase(), '^x_(1|2)\$') as x_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4060', () => {
    const query = `create table map_test engine=TinyLog() as (select (number + 1) as n, map(1, 1, number,2) as m from numbers(1, 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4061', () => {
    const query = `CREATE TABLE json_square_brackets (field String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4062', () => {
    const query = `CREATE TABLE t1 ( time DateTime,
foo String,
dimension_1 String,
dt Date MATERIALIZED toDate(time),
dt1 Date MATERIALIZED toDayOfYear(time),
aliascol1 ALIAS foo || dimension_1,
time_alias DateTime ALIAS time
) ENGINE = MergeTree() PARTITION BY toYYYYMM(dt) ORDER BY (dt, foo);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4063', () => {
    const query = `CREATE TABLE t2 ( time DateTime,
bar String,
dimension_2 String,
dt Date MATERIALIZED toDate(time),
dt2 Date MATERIALIZED toDayOfYear(time),
aliascol2 ALIAS bar || dimension_2,
time_alias DateTime ALIAS time
) ENGINE = MergeTree() PARTITION BY toYYYYMM(dt) ORDER BY (dt, bar);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4064', () => {
    const query = `CREATE TABLE test_table (
id UInt64,
value UInt8,
value_nullable Nullable(UInt8)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4065', () => {
    const query = `CREATE TABLE broken_partition (
date Date,
key UInt64
)
ENGINE = ReplicatedMergeTree('/clickhouse/test_01925_{database}/rmt', 'r1')
ORDER BY tuple()
PARTITION BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4066', () => {
    const query = `CREATE TABLE old_partition_key (sd Date, dh UInt64, ak UInt32, ed Date) ENGINE=MergeTree(sd, dh, (ak, ed, dh), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4067', () => {
    const query = `CREATE TABLE t_ttl_modify_column (
InsertionDateTime DateTime,
TTLDays Int32 DEFAULT CAST(365, 'Int32')
)
ENGINE = MergeTree
ORDER BY tuple()
TTL InsertionDateTime + toIntervalDay(TTLDays)
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4068', () => {
    const query = `CREATE TABLE t_ttl_modify_column (InsertionDateTime DateTime) ENGINE = MergeTree
ORDER BY tuple()
TTL InsertionDateTime + INTERVAL 3 DAY
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4069', () => {
    const query = `CREATE TABLE merge_tree_table (
Date Date,
SomeType UInt8,
Alternative1 UInt64,
Alternative2 UInt64,
User UInt32,
CharID UInt64 ALIAS multiIf(SomeType IN (3, 4, 11), 0, SomeType IN (7, 8), Alternative1, Alternative2)
)
ENGINE = MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4070', () => {
    const query = `CREATE TABLE distributed_tbl (
Date Date,
SomeType UInt8,
Alternative1 UInt64,
Alternative2 UInt64,
CharID UInt64,
User UInt32
)
ENGINE = Distributed(test_shard_localhost, currentDatabase(), merge_tree_table);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4071', () => {
    const query = `CREATE TABLE t_array_index (n Nested(key String, value String)) ENGINE = MergeTree ORDER BY n.key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4072', () => {
    const query = `create table t1(x1 Date32) engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4073', () => {
    const query = `CREATE TABLE data_01917 (
key Int,
d1 Int,
d1_null Nullable(Int),
INDEX d1_idx d1 TYPE minmax GRANULARITY 1,
INDEX d1_null_idx assumeNotNull(d1_null) TYPE minmax GRANULARITY 1
)
Engine=MergeTree()
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4074', () => {
    const query = `CREATE TABLE data_01917_2 (
name String,
frequency UInt64,
INDEX memory (frequency * length(name)) TYPE set(1000) GRANULARITY 5,
INDEX sample_index1 (length(name), name) TYPE minmax GRANULARITY 4,
INDEX sample_index2 (lower(name), name) TYPE ngrambf_v1(3, 256, 2, 0) GRANULARITY 4
)
Engine=MergeTree()
ORDER BY name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4075', () => {
    const query = `CREATE TABLE t1 ( s String, f Float32, e UInt16 ) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part = '100G';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4076', () => {
    const query = `CREATE TABLE t1 (\`a\` UInt32, \`b\` UInt32, \`c\` UInt32 ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4077', () => {
    const query = `CREATE TABLE a(\`id\` UInt32, \`val\` UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4078', () => {
    const query = `CREATE TABLE j(\`id\` UInt32, \`val\` UInt8) ENGINE = Join(ANY, LEFT, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4079', () => {
    const query = `CREATE TABLE j (id UInt8, val UInt8) Engine = Join(ALL, INNER, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4080', () => {
    const query = `CREATE TABLE t1 (\`x\` UInt32, \`lc\` LowCardinality(String) ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4081', () => {
    const query = `CREATE TABLE t2 (\`x\` UInt32, \`lc\` LowCardinality(String) ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4082', () => {
    const query = `CREATE TABLE abc (
\`f1\` String,
\`f2\` String
)
ENGINE = MergeTree()
ORDER BY f1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4083', () => {
    const query = `CREATE DATABASE test_01915_db ENGINE=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4084', () => {
    const query = `CREATE TABLE test_01915_db.test_source_table_1 (
id UInt64,
value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4085', () => {
    const query = `CREATE OR REPLACE DICTIONARY test_01915_db.test_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
LAYOUT(DIRECT())
SOURCE(CLICKHOUSE(DB 'test_01915_db' TABLE 'test_source_table_1'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4086', () => {
    const query = `CREATE TABLE test_01915_db.test_source_table_2 (
id UInt64,
value_1 String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4087', () => {
    const query = `CREATE OR REPLACE DICTIONARY test_01915_db.test_dictionary (
id UInt64,
value_1 String
)
PRIMARY KEY id
LAYOUT(HASHED())
SOURCE(CLICKHOUSE(DB 'test_01915_db' TABLE 'test_source_table_2'))
LIFETIME(0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4088', () => {
    const query = `create table test (id UInt64,insid UInt64,insidvalue Nullable(UInt64), index insid_idx (insid) type bloom_filter() granularity 1, index insidvalue_idx (insidvalue) type bloom_filter() granularity 1) ENGINE=MergeTree() ORDER BY (insid,id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4089', () => {
    const query = `CREATE DATABASE 01914_db ENGINE=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4090', () => {
    const query = `CREATE TABLE 01914_db.table_1 (id UInt64, value String) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4091', () => {
    const query = `CREATE TABLE 01914_db.table_2 (id UInt64, value String) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4092', () => {
    const query = `CREATE DICTIONARY 01914_db.dictionary_1 (id UInt64, value String) PRIMARY KEY id
LAYOUT(DIRECT())
SOURCE(CLICKHOUSE(DB '01914_db' TABLE 'table_1'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4093', () => {
    const query = `CREATE DICTIONARY 01914_db.dictionary_2 (id UInt64, value String) PRIMARY KEY id
LAYOUT(DIRECT())
SOURCE(CLICKHOUSE(DB '01914_db' TABLE 'table_2'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4094', () => {
    const query = `CREATE TABLE smta (
\`k\` Int64,
\`a\` AggregateFunction(max, Int64),
\`city\` SimpleAggregateFunction(max, LowCardinality(String))
)
ENGINE = SummingMergeTree
ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4095', () => {
    const query = `CREATE DATABASE 01913_db ENGINE=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4096', () => {
    const query = `CREATE TABLE 01913_db.test_source_table_1 (
id UInt64,
value String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4097', () => {
    const query = `CREATE DICTIONARY 01913_db.test_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
LAYOUT(DIRECT())
SOURCE(CLICKHOUSE(DB '01913_db' TABLE 'test_source_table_1'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4098', () => {
    const query = `CREATE TABLE 01913_db.test_source_table_2 (
id UInt64,
value_1 String
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4099', () => {
    const query = `CREATE TABLE test (
\`t\` UInt8,
\`flag\` UInt8,
\`id\` UInt8
)
ENGINE = MergeTree
PARTITION BY t
ORDER BY (t, id)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4100', () => {
    const query = `create table my_table(Id UInt32, Object Nested(Key UInt8, Value String)) engine MergeTree order by Id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4101', () => {
    const query = `create view my_view as select * replace arrayMap(x -> x + 1,\`Object.Key\`) as \`Object.Key\` from my_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4102', () => {
    const query = `create table test_rows_compact_part(f1 int,f2 int)  engine=MergeTree partition by f1 order by f2 settings min_bytes_for_wide_part=10485760;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4103', () => {
    const query = `create table test_rows_wide_part(f1 int,f2 int)  engine=MergeTree partition by f1 order by f2 settings min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4104', () => {
    const query = `CREATE TABLE codecTest ( key      UInt64,
name     String,
ref_valueF64 Float64,
ref_valueF32 Float32,
valueF64 Float64  CODEC(Gorilla),
valueF32 Float32  CODEC(Gorilla)
) Engine = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4105', () => {
    const query = `CREATE TABLE codecTest ( key      UInt64,
ref_valueU64 UInt64,
ref_valueU32 UInt32,
ref_valueU16 UInt16,
ref_valueU8  UInt8,
ref_valueI64 Int64,
ref_valueI32 Int32,
ref_valueI16 Int16,
ref_valueI8  Int8,
ref_valueDT  DateTime,
ref_valueD   Date,
valueU64 UInt64   CODEC(DoubleDelta),
valueU32 UInt32   CODEC(DoubleDelta),
valueU16 UInt16   CODEC(DoubleDelta),
valueU8  UInt8    CODEC(DoubleDelta),
valueI64 Int64    CODEC(DoubleDelta),
valueI32 Int32    CODEC(DoubleDelta),
valueI16 Int16    CODEC(DoubleDelta),
valueI8  Int8     CODEC(DoubleDelta),
valueDT  DateTime CODEC(DoubleDelta),
valueD   Date     CODEC(DoubleDelta)
) Engine = MergeTree ORDER BY key SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4106', () => {
    const query = `CREATE TABLE TestTbl (
\`id\` UInt16,
\`dt\` Date,
\`val\` String
)
ENGINE = MergeTree
PARTITION BY dt
ORDER BY (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4107', () => {
    const query = `CREATE VIEW TestTbl_view AS
SELECT *
FROM TestTbl
WHERE dt = ( SELECT max(dt) FROM TestTbl );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4108', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS TestTblDict (
\`id\` UInt16,
\`dt\` Date,
\`val\` String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE TestTbl_view DB currentDatabase()))
LIFETIME(1)
LAYOUT(COMPLEX_KEY_HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4109', () => {
    const query = `CREATE TABLE dictionary_source_en (
id UInt64,
value String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4110', () => {
    const query = `CREATE TABLE dictionary_source_ru (
id UInt64,
value String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4111', () => {
    const query = `CREATE VIEW dictionary_source_view AS SELECT id, dictionary_source_en.value as value_en, dictionary_source_ru.value as value_ru
FROM dictionary_source_en LEFT JOIN dictionary_source_ru USING (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4112', () => {
    const query = `CREATE DICTIONARY flat_dictionary (
id UInt64,
value_en String,
value_ru String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' PASSWORD '' TABLE 'dictionary_source_view'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4113', () => {
    const query = `CREATE TABLE DATE_INFO_DICT (
\`TV\` Date,
\`SHAMSI\` String,
\`HIJRI\` String,
\`MILADI\` String,
\`S_DAY\` UInt8,
\`H_DAY\` UInt8,
\`S_MONTH\` UInt8,
\`H_MONTH\` UInt8,
\`WEEK_DAY_NAME\` String,
\`DAY_NUMBER\` UInt8,
\`HOLIDAY\` UInt8,
\`WEEK_NAME\` String
)
ENGINE = Join(ANY, LEFT, TV);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4114', () => {
    const query = `CREATE TABLE t (d Date, z UInt32) ENGINE = MergeTree(d, (z), 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4115', () => {
    const query = `CREATE TABLE t_01906 (
\`id\` UInt64,
\`update_ts\` DateTime,
\`value\` UInt32
)
ENGINE = ReplacingMergeTree(update_ts)
PARTITION BY 0 * id
ORDER BY (update_ts, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4116', () => {
    const query = `create table tab (x LowCardinality(String)) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4117', () => {
    const query = `CREATE TABLE test(key Int32) ENGINE = MergeTree ORDER BY (key) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4118', () => {
    const query = `CREATE TABLE h3_geo(lat Float64, lon Float64, res UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4119', () => {
    const query = `create temporary table t engine Memory as select * from generateRandom( \$\$
a Array(Int8),
b UInt32,
c Nullable(String),
d Decimal32(4),
e Nullable(Enum16('h' = 1, 'w' = 5 , 'o' = -200)),
f Float64,
g Tuple(Date, DateTime('Asia/Istanbul'), DateTime64(3, 'Asia/Istanbul'), UUID),
h FixedString(2),
i Array(Nullable(UUID))
\$\$, 10, 5, 3) limit 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4120', () => {
    const query = `CREATE TABLE dictionary_nullable_source_table (
id UInt64,
value Nullable(Int64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4121', () => {
    const query = `CREATE TABLE dictionary_nullable_default_source_table (
id UInt64,
value Nullable(UInt64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4122', () => {
    const query = `CREATE DICTIONARY flat_dictionary (
id UInt64,
value Nullable(Int64) DEFAULT NULL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_nullable_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4123', () => {
    const query = `CREATE DICTIONARY hashed_dictionary (
id UInt64,
value Nullable(Int64) DEFAULT NULL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_nullable_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4124', () => {
    const query = `CREATE DICTIONARY cache_dictionary (
id UInt64,
value Nullable(Int64) DEFAULT NULL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_nullable_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4125', () => {
    const query = `CREATE DICTIONARY direct_dictionary (
id UInt64,
value Nullable(Int64) DEFAULT NULL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_nullable_source_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4126', () => {
    const query = `CREATE DICTIONARY ip_trie_dictionary (
prefix String,
value Nullable(Int64) DEFAULT NULL
)
PRIMARY KEY prefix
SOURCE(CLICKHOUSE(HOST 'localhost' port tcpPort() TABLE 'dictionary_nullable_source_table'))
LIFETIME(MIN 10 MAX 1000)
LAYOUT(IP_TRIE());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4127', () => {
    const query = `CREATE TABLE polygon_dictionary_nullable_source_table (
key Array(Array(Array(Tuple(Float64, Float64)))),
value Nullable(Int64)
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4128', () => {
    const query = `CREATE TABLE polygon_dictionary_nullable_default_source_table (
key Tuple(Float64, Float64),
value Nullable(UInt64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4129', () => {
    const query = `CREATE DICTIONARY polygon_dictionary (
key Array(Array(Array(Tuple(Float64, Float64)))),
value Nullable(UInt64) DEFAULT NULL
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'polygon_dictionary_nullable_source_table'))
LIFETIME(MIN 0 MAX 1000)
LAYOUT(POLYGON());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4130', () => {
    const query = `CREATE TABLE range_dictionary_nullable_default_source_table (
key UInt64,
value Nullable(UInt64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4131', () => {
    const query = `CREATE DATABASE 01902_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4132', () => {
    const query = `CREATE DATABASE 01902_db1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4133', () => {
    const query = `CREATE DATABASE 01902_db2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4134', () => {
    const query = `CREATE DATABASE 01902_db3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4135', () => {
    const query = `CREATE TABLE 01902_db.t   (n Int8) ENGINE=MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4136', () => {
    const query = `CREATE TABLE 01902_db1.t1 (n Int8) ENGINE=MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4137', () => {
    const query = `CREATE TABLE 01902_db2.t2 (n Int8) ENGINE=MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4138', () => {
    const query = `CREATE TABLE 01902_db3.t3 (n Int8) ENGINE=MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4139', () => {
    const query = `CREATE TABLE 01902_db.t_merge as 01902_db.t ENGINE=Merge(REGEXP('^01902_db'), '^t');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4140', () => {
    const query = `CREATE TABLE 01902_db.t_merge1 as 01902_db.t ENGINE=Merge('01902_db', '^t\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4141', () => {
    const query = `CREATE TABLE 01902_db.t_merge_1 as 01902_db.t ENGINE=Merge(currentDatabase(), '^t');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4142', () => {
    const query = `CREATE TABLE 01902_db.t4 (n Date) ENGINE=MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4143', () => {
    const query = `CREATE DATABASE 01902_db_params;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4144', () => {
    const query = `CREATE TABLE 01902_db_params.t(n Int8) ENGINE=MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4145', () => {
    const query = `CREATE TABLE a (
\`number\` UInt64,
\`x\` MATERIALIZED x
)
ENGINE = MergeTree
ORDER BY number; --{ serverError CYCLIC_ALIASES}
CREATE TABLE foo
(
i Int32,
j ALIAS j + 1
)
ENGINE = MergeTree() ORDER BY i; --{ serverError CYCLIC_ALIASES}
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4146', () => {
    const query = `CREATE TABLE dictionary_array_source_table (
id UInt64,
array_value Array(Int64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4147', () => {
    const query = `CREATE DICTIONARY flat_dictionary (
id UInt64,
array_value Array(Int64) DEFAULT [1,2,3]
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_array_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4148', () => {
    const query = `CREATE DICTIONARY hashed_dictionary (
id UInt64,
array_value Array(Int64) DEFAULT [1,2,3]
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_array_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4149', () => {
    const query = `CREATE DICTIONARY cache_dictionary (
id UInt64,
array_value Array(Int64) DEFAULT [1,2,3]
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_array_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4150', () => {
    const query = `CREATE DICTIONARY direct_dictionary (
id UInt64,
array_value Array(Int64) DEFAULT [1,2,3]
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_array_source_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4151', () => {
    const query = `CREATE TABLE ip_trie_dictionary_array_source_table (
prefix String,
array_value Array(Int64)
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4152', () => {
    const query = `CREATE DICTIONARY ip_trie_dictionary (
prefix String,
array_value Array(Int64) DEFAULT [1,2,3]
)
PRIMARY KEY prefix
SOURCE(CLICKHOUSE(HOST 'localhost' port tcpPort() TABLE 'ip_trie_dictionary_array_source_table'))
LIFETIME(MIN 10 MAX 1000)
LAYOUT(IP_TRIE());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4153', () => {
    const query = `CREATE TABLE polygon_dictionary_array_source_table (
key Array(Array(Array(Tuple(Float64, Float64)))),
array_value Array(Int64)
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4154', () => {
    const query = `CREATE DICTIONARY polygon_dictionary (
key Array(Array(Array(Tuple(Float64, Float64)))),
array_value Array(Int64) DEFAULT [1,2,3]
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'polygon_dictionary_array_source_table'))
LIFETIME(MIN 0 MAX 1000)
LAYOUT(POLYGON());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4155', () => {
    const query = `CREATE TABLE range_dictionary_array_source_table (
key UInt64,
start_date Date,
end_date Date,
array_value Array(Int64)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4156', () => {
    const query = `CREATE DICTIONARY range_dictionary (
key UInt64,
start_date Date,
end_date Date,
array_value Array(Int64) DEFAULT [1,2,3]
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'range_dictionary_array_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(RANGE_HASHED())
RANGE(MIN start_date MAX end_date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4157', () => {
    const query = `CREATE TABLE test_alter_attach_01901S (A Int64, D date) ENGINE = MergeTree PARTITION BY D ORDER BY A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4158', () => {
    const query = `CREATE TABLE test_alter_attach_01901D (A Int64, D date)  Engine=ReplicatedMergeTree('/clickhouse/tables/{database}/test_alter_attach_01901D', 'r1')
PARTITION BY D ORDER BY A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4159', () => {
    const query = `create table d (i UInt8) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4160', () => {
    const query = `create table dp as d Engine=Distributed(test_cluster_two_shards, currentDatabase(), d, i);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4161', () => {
    const query = `CREATE TABLE test_table_unsigned_values (
id UInt64,
value1 UInt8,
value2 UInt16,
value3 UInt32,
value4 UInt64,
weight UInt64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4162', () => {
    const query = `CREATE TABLE test_table_signed_values (
id UInt64,
value1 Int8,
value2 Int16,
value3 Int32,
value4 Int64,
weight UInt64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4163', () => {
    const query = `CREATE TABLE test_table_float_values (
id UInt64,
value1 Float32,
value2 Float64,
weight UInt64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4164', () => {
    const query = `CREATE TABLE test_table_nullable_unsigned_values (
id UInt64,
value1 Nullable(UInt8),
value2 Nullable(UInt16),
value3 Nullable(UInt32),
value4 Nullable(UInt64),
weight UInt64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4165', () => {
    const query = `CREATE TABLE test_table_nullable_signed_values (
id UInt64,
value1 Nullable(Int8),
value2 Nullable(Int16),
value3 Nullable(Int32),
value4 Nullable(Int64),
weight UInt64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4166', () => {
    const query = `CREATE TABLE test_table_nullable_float_values (
id UInt64,
value1 Nullable(Float32),
value2 Nullable(Float64),
weight UInt64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4167', () => {
    const query = `CREATE TABLE test_table_null_specifics (
id UInt64,
value1 Nullable(UInt64),
value2 Nullable(UInt64),
value3 Nullable(UInt64),
weight UInt64,
weight_nullable Nullable(UInt64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4168', () => {
    const query = `CREATE TABLE test_table_unsigned_values (
id UInt64,
value1 UInt8,
value2 UInt16,
value3 UInt32,
value4 UInt64,
predicate_value UInt8
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4169', () => {
    const query = `CREATE TABLE test_table_signed_values (
id UInt64,
value1 Int8,
value2 Int16,
value3 Int32,
value4 Int64,
predicate_value UInt8
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4170', () => {
    const query = `CREATE TABLE test_table_float_values (
id UInt64,
value1 Float32,
value2 Float64,
predicate_value UInt8
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4171', () => {
    const query = `CREATE TABLE test_table_nullable_unsigned_values (
id UInt64,
value1 Nullable(UInt8),
value2 Nullable(UInt16),
value3 Nullable(UInt32),
value4 Nullable(UInt64),
predicate_value UInt8
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4172', () => {
    const query = `CREATE TABLE test_table_nullable_signed_values (
id UInt64,
value1 Nullable(Int8),
value2 Nullable(Int16),
value3 Nullable(Int32),
value4 Nullable(Int64),
predicate_value UInt8
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4173', () => {
    const query = `CREATE TABLE test_table_nullable_float_values (
id UInt64,
value1 Nullable(Float32),
value2 Nullable(Float64),
predicate_value UInt8
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4174', () => {
    const query = `CREATE TABLE test_table_null_specifics (
id UInt64,
value1 Nullable(UInt64),
value2 Nullable(UInt64),
value3 Nullable(UInt64),
predicate_value UInt8
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4175', () => {
    const query = `CREATE TABLE test_table_null_specifics (
id UInt64,
value1 Nullable(UInt64),
value2 Nullable(UInt64),
value3 Nullable(UInt64),
predicate_value UInt8,
weight UInt64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4176', () => {
    const query = `CREATE TABLE test_table_unsigned_values (
id UInt64,
value1 UInt8,
value2 UInt16,
value3 UInt32,
value4 UInt64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4177', () => {
    const query = `CREATE TABLE test_table_signed_values (
id UInt64,
value1 Int8,
value2 Int16,
value3 Int32,
value4 Int64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4178', () => {
    const query = `CREATE TABLE test_table_float_values (
id UInt64,
value1 Float32,
value2 Float64
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4179', () => {
    const query = `CREATE TABLE test_table_nullable_unsigned_values (
id UInt64,
value1 Nullable(UInt8),
value2 Nullable(UInt16),
value3 Nullable(UInt32),
value4 Nullable(UInt64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4180', () => {
    const query = `CREATE TABLE test_table_nullable_signed_values (
id UInt64,
value1 Nullable(Int8),
value2 Nullable(Int16),
value3 Nullable(Int32),
value4 Nullable(Int64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4181', () => {
    const query = `CREATE TABLE test_table_nullable_float_values (
id UInt64,
value1 Nullable(Float32),
value2 Nullable(Float64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4182', () => {
    const query = `CREATE TABLE test_table_null_specifics (
id UInt64,
value1 Nullable(UInt64),
value2 Nullable(UInt64),
value3 Nullable(UInt64)
) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4183', () => {
    const query = `create table tab (i8 Int8, i16 Int16, i32 Int32, i64 Int64, u8 UInt8, u16 UInt16, u32 UInt32, u64 UInt64, id UUID, s String, fs FixedString(33), a Array(UInt8), t Tuple(UInt16, UInt32), d Date, dt DateTime('Asia/Istanbul'), dt64 DateTime64(3, 'Asia/Istanbul'), dec128 Decimal128(3), lc LowCardinality(String)) engine = MergeTree PARTITION BY (i8, i16, i32, i64, u8, u16, u32, u64, id, s, fs, a, t, d, dt, dt64, dec128, lc) order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4184', () => {
    const query = `CREATE TABLE tab ( i8 Int8,
i16 Int16,
i32 Int32,
i64 Int64,
i128 Int128,
i256 Int256,
u8 UInt8,
u16 UInt16,
u32 UInt32,
u64 UInt64,
u128 UInt128,
u256 UInt256,
id UUID,
s String,
fs FixedString(33),
a Array(UInt8),
t Tuple(UInt16, UInt32),
d Date,
dt DateTime('Asia/Istanbul'),
dt64 DateTime64(3, 'Asia/Istanbul'),
dec128 Decimal128(3),
dec256 Decimal256(4),
lc LowCardinality(String))
engine = MergeTree PARTITION BY (i8, i16, i32, i64, i128, i256, u8, u16, u32, u64, u128, u256, id, s, fs, a, t, d, dt, dt64, dec128, dec256, lc) ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4185', () => {
    const query = `create table tab (id UUID, value UInt32) engine = MergeTree PARTITION BY id order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4186', () => {
    const query = `create table test (a String)  Engine MergeTree order by a partition by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4187', () => {
    const query = `create table test1 (i int, j int) engine MergeTree partition by i order by tuple() settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4188', () => {
    const query = `create table t1 (date Date, a Float64, b String) Engine=MergeTree ORDER BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4189', () => {
    const query = `create table t2 (date Date, a Float64, b String) Engine=MergeTree ORDER BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4190', () => {
    const query = `CREATE TABLE 01889_sql_json (id UInt8, json String) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4191', () => {
    const query = `create table tab (t DateTime) engine = MergeTree order by toStartOfDay(t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4192', () => {
    const query = `create table tab (t DateTime) engine = MergeTree order by toStartOfDay(t + 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4193', () => {
    const query = `create table tab (x Int32, y Int32) engine = MergeTree partition by x + y order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4194', () => {
    const query = `create table tab (x Int32, y Int32) engine = MergeTree partition by ((x + y) + 1) * 2 order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4195', () => {
    const query = `CREATE TABLE grouping_sets(fact_1_id Int32, fact_2_id Int32, fact_3_id Int32, fact_4_id Int32, sales_value Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4196', () => {
    const query = `CREATE TABLE t_subcolumns_local (arr Array(UInt32), n Nullable(String), t Tuple(s1 String, s2 String)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4197', () => {
    const query = `CREATE TABLE t_subcolumns_dist AS t_subcolumns_local ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), t_subcolumns_local);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4198', () => {
    const query = `CREATE TABLE t_subcolumns_local (arr Array(UInt32), n Nullable(String), t Tuple(s1 String, s2 String)) ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4199', () => {
    const query = `create table nums_in_mem(v UInt64) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4200', () => {
    const query = `create table nums_in_mem_dist as nums_in_mem engine=Distributed('test_shard_localhost', currentDatabase(), nums_in_mem);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4201', () => {
    const query = `CREATE TABLE limited_merge_table (
key UInt64
)
ENGINE = MergeTree()
ORDER BY key
SETTINGS max_parts_to_merge_at_once = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4202', () => {
    const query = `CREATE TABLE test_buffer_table (
\`a\` Int64
)
ENGINE = Buffer('', '', 1, 1000000, 1000000, 1000000, 1000000, 1000000, 1000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4203', () => {
    const query = `create table test_tbl (vend_nm String, ship_dt Date) engine MergeTree partition by toWeek(ship_dt) order by vend_nm;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4204', () => {
    const query = `CREATE TABLE t_create_as_tuple ENGINE = MergeTree() ORDER BY number AS
SELECT number, [('string',number)] AS array FROM numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4205', () => {
    const query = `CREATE TABLE test_table (
\`col1\` DateTime,
\`col2\` Int64,
\`col3\` AggregateFunction(sumMap, Tuple(Array(UInt8), Array(UInt8)))
)
ENGINE = AggregatingMergeTree() ORDER BY (col1, col2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4206', () => {
    const query = `CREATE TABLE test ENGINE = Null AS
WITH (
SELECT arrayReduce('sumMapState', [(['foo'], arrayMap(x -> -0., ['foo']))])
) AS all_metrics
SELECT
(finalizeAggregation(arrayReduce('sumMapMergeState', [all_metrics])) AS metrics_tuple).1 AS metric_names,
metrics_tuple.2 AS metric_values
FROM system.one;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4207', () => {
    const query = `CREATE TABLE test_input(id Int32) ENGINE=MergeTree() order by id; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4208', () => {
    const query = `CREATE TABLE test(\`id\` Int32, \`pv\` AggregateFunction(sum, Int32)) ENGINE = AggregatingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4209', () => {
    const query = `CREATE MATERIALIZED VIEW test_mv to test(\`id\` Int32, \`pv\` AggregateFunction(sum, Int32)) as SELECT id, sumState(1) as pv from test_input group by id; -- { serverError CANNOT_CONVERT_TYPE }  INSERT INTO test_input SELECT toInt32(number % 1000) AS id FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4210', () => {
    const query = `create MATERIALIZED VIEW test_mv to test(\`id\` Int32, \`pv\` AggregateFunction(sum, Int32)) as SELECT id, sumState(toInt32(1)) as pv from test_input group by id; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4211', () => {
    const query = `CREATE TABLE t_func_to_subcolumns (id UInt64, arr Array(UInt64), n Nullable(String), m Map(String, UInt64)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4212', () => {
    const query = `CREATE TABLE t_tuple_null (t Tuple(null UInt32)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4213', () => {
    const query = `CREATE TABLE data_01875_1 Engine=MergeTree ORDER BY number PARTITION BY bitShiftRight(number, 8) + 1 AS SELECT * FROM numbers(16384);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4214', () => {
    const query = `CREATE TABLE data_01875_2 Engine=MergeTree ORDER BY number PARTITION BY bitShiftRight(number, 8) + 1 AS SELECT * FROM numbers(16384);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4215', () => {
    const query = `CREATE TABLE data_01875_3 Engine=MergeTree ORDER BY number PARTITION BY bitShiftRight(number, 8) + 1 AS SELECT * FROM numbers(16384);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4216', () => {
    const query = `CREATE TABLE table1 (id Int64, v UInt64) ENGINE = ReplicatedReplacingMergeTree('/clickhouse/tables/{database}/test_table12', '1', v)
PARTITION BY id % 200 ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4217', () => {
    const query = `CREATE TABLE table2 (id Int64, v UInt64) ENGINE = MergeTree()
PARTITION BY (toInt32(id / 2) % 3, id % 200) ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4218', () => {
    const query = `CREATE TABLE table3 (id Int64, v UInt64) ENGINE = MergeTree()
PARTITION BY (id % 200, (id % 200) % 10, toInt32(round((id % 200) / 2, 0))) ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4219', () => {
    const query = `CREATE TABLE table4 (id Int64, v UInt64, s String, INDEX a (id * 2, s) TYPE minmax GRANULARITY 3
) ENGINE = MergeTree() PARTITION BY id % 10 ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4220', () => {
    const query = `create database db_01870;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4221', () => {
    const query = `create table db_01870.a_data_01870 as system.numbers Engine=TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4222', () => {
    const query = `create table db_01870.z_buffer_01870 as system.numbers Engine=Buffer(db_01870, a_data_01870, 1, 100, 100, 
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4223', () => {
    const query = `create table replacing(    \`A\` Int64,    \`D\` DateTime64(9, 'Asia/Istanbul'),    \`S\` String)    ENGINE = ReplacingMergeTree(D) ORDER BY A;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4224', () => {
    const query = `CREATE TABLE mem_test (
\`a\` Int64,
\`b\` Int64
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4225', () => {
    const query = `CREATE OR REPLACE VIEW view_no_nulls AS SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1
FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2
USING a ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4226', () => {
    const query = `CREATE OR REPLACE VIEW view_nulls_set AS SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1
FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2
USING a ORDER BY a
SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4227', () => {
    const query = `CREATE OR REPLACE VIEW view_nulls AS SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1
FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2
USING a ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4228', () => {
    const query = `CREATE OR REPLACE VIEW view_no_nulls_set AS SELECT * FROM ( SELECT number + 1 AS a, number + 11 AS b FROM numbers(2) ) AS t1
FULL JOIN ( SELECT number + 2 AS a, number + 22 AS c FROM numbers(2) ) AS t2
USING a ORDER BY a
SETTINGS join_use_nulls = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4229', () => {
    const query = `CREATE TABLE dt64test (
\`dt64_column\` DateTime64(3),
\`dt_column\` DateTime DEFAULT toDateTime(dt64_column)
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(dt64_column)
ORDER BY dt64_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4230', () => {
    const query = `CREATE TABLE interval ( \`id\` String, \`start\` Int64, \`end\` Int64 ) ENGINE = MergeTree ORDER BY start;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4231', () => {
    const query = `CREATE TABLE fl_interval ( \`id\` String, \`start\` Float, \`end\` Float ) ENGINE = MergeTree ORDER BY start;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4232', () => {
    const query = `CREATE TABLE dt_interval ( \`id\` String, \`start\` DateTime, \`end\` DateTime ) ENGINE = MergeTree ORDER BY start;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4233', () => {
    const query = `CREATE TABLE date_interval ( \`id\` String, \`start\` Date, \`end\` Date ) ENGINE = MergeTree ORDER BY start;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4234', () => {
    const query = `CREATE TABLE test(a Int, b Int) Engine=ReplacingMergeTree order by a SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4235', () => {
    const query = `CREATE FUNCTION 01856_test_function_0 AS (a, b, c) -> a * b * c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4236', () => {
    const query = `CREATE FUNCTION 01856_test_function_1 AS (a, b) -> 01856_test_function_1(a, b) + 01856_test_function_1(a, b); --{serverError CANNOT_CREATE_RECURSIVE_FUNCTION} CREATE FUNCTION cast AS a -> a + 1; --{serverError FUNCTION_ALREADY_EXISTS}
CREATE FUNCTION sum AS (a, b) -> a + b; --{serverError FUNCTION_ALREADY_EXISTS}
CREATE FUNCTION 01856_test_function_2 AS (a, b) -> a + b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4237', () => {
    const query = `CREATE FUNCTION 01856_test_function_2 AS (a) -> a || '!!!'; --{serverError FUNCTION_ALREADY_EXISTS} DROP FUNCTION 01856_test_function_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4238', () => {
    const query = `CREATE TABLE test_table (a UInt64) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4239', () => {
    const query = `CREATE TABLE test_table (a UInt64, b ALIAS a, c ALIAS b) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4240', () => {
    const query = `CREATE TABLE v1 ( id Int32 ) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4241', () => {
    const query = `CREATE TABLE v2 ( value Int32 ) ENGINE = MergeTree() ORDER BY value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4242', () => {
    const query = `CREATE TABLE map_comb(a int, statusMap Map(UInt16, UInt32)) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4243', () => {
    const query = `CREATE TABLE sum_map_decimal(statusMap Map(UInt16,Decimal32(5))) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4244', () => {
    const query = `CREATE TABLE test_jit_nonnull (value UInt8) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4245', () => {
    const query = `CREATE TABLE test_jit_nullable (value Nullable(UInt8)) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4246', () => {
    const query = `CREATE TABLE simple_key_source_table_01862 (
id UInt64,
value String
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4247', () => {
    const query = `CREATE DICTIONARY simple_key_flat_dictionary_01862 (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'simple_key_source_table_01862'))
LAYOUT(FLAT())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4248', () => {
    const query = `CREATE DICTIONARY simple_key_direct_dictionary_01862 (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'simple_key_source_table_01862'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4249', () => {
    const query = `CREATE DICTIONARY simple_key_hashed_dictionary_01862 (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'simple_key_source_table_01862'))
LAYOUT(HASHED())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4250', () => {
    const query = `CREATE DICTIONARY simple_key_sparse_hashed_dictionary_01862 (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'simple_key_source_table_01862'))
LAYOUT(SPARSE_HASHED())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4251', () => {
    const query = `CREATE DICTIONARY simple_key_cache_dictionary_01862 (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'simple_key_source_table_01862'))
LAYOUT(CACHE(SIZE_IN_CELLS 100000))
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4252', () => {
    const query = `CREATE TABLE complex_key_source_table_01862 (
id UInt64,
id_key String,
value String
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4253', () => {
    const query = `CREATE DICTIONARY complex_key_hashed_dictionary_01862 (
id UInt64,
id_key String,
value String
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(TABLE 'complex_key_source_table_01862'))
LAYOUT(COMPLEX_KEY_HASHED())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4254', () => {
    const query = `CREATE DICTIONARY complex_key_direct_dictionary_01862 (
id UInt64,
id_key String,
value String
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(TABLE 'complex_key_source_table_01862'))
LAYOUT(COMPLEX_KEY_DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4255', () => {
    const query = `CREATE DICTIONARY complex_key_cache_dictionary_01862 (
id UInt64,
id_key String,
value String
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(TABLE 'complex_key_source_table_01862'))
LAYOUT(COMPLEX_KEY_CACHE(SIZE_IN_CELLS 100000))
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4256', () => {
    const query = `CREATE TABLE range_key_source_table_01862 (
id UInt64,
value String,
first Date,
last Date
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4257', () => {
    const query = `CREATE DICTIONARY simple_key_range_hashed_dictionary_01862 (
id UInt64,
value String,
first Date,
last Date
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(TABLE 'range_key_source_table_01862'))
LAYOUT(RANGE_HASHED())
RANGE(MIN first MAX last)
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4258', () => {
    const query = `CREATE TABLE ip_trie_source_table_01862 (
prefix String,
value String
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4259', () => {
    const query = `CREATE DICTIONARY ip_trie_dictionary_01862 (
prefix String,
value String
)
PRIMARY KEY prefix
SOURCE(CLICKHOUSE(TABLE 'ip_trie_source_table_01862'))
LAYOUT(IP_TRIE())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4260', () => {
    const query = `CREATE TABLE polygons_01862 ( key Array(Array(Array(Tuple(Float64, Float64)))),
name String
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4261', () => {
    const query = `CREATE TABLE points_01862 (x Float64, y Float64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4262', () => {
    const query = `CREATE DICTIONARY polygon_dictionary_01862 (
key Array(Array(Array(Tuple(Float64, Float64)))),
name String
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(USER 'default' TABLE 'polygons_01862'))
LIFETIME(0)
LAYOUT(POLYGON());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4263', () => {
    const query = `create row policy filter on tbl using (s = 'non_existing_domain') to all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4264', () => {
    const query = `CREATE TABLE \`01851_merge_tree\` (
\`n1\` Int8,
\`n2\` Int8,
\`n3\` Int8,
\`n4\` Int8
)
ENGINE = MergeTree
ORDER BY n1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4265', () => {
    const query = `CREATE MATERIALIZED VIEW \`01851_merge_tree_mv\` ENGINE = Memory AS
SELECT
n2,
n3
FROM \`01851_merge_tree\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4266', () => {
    const query = `create table shard_0.data_01850 (key Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4267', () => {
    const query = `create table dist_01850 (key Int) engine=Distributed('test_cluster_two_replicas_different_databases',  '', data_01850, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4268', () => {
    const query = `CREATE TABLE s2_indexes (s2_index UInt64, longitude Float64, latitude Float64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4269', () => {
    const query = `create table tbl(dt DateTime, i int, j String, v Float64) engine MergeTree partition by (toDate(dt), i % 2, length(j)) order by i settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4270', () => {
    const query = `create table tbl2(i int) engine MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4271', () => {
    const query = `CREATE TABLE test_null_as_default (a String DEFAULT 'WORLD') ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4272', () => {
    const query = `CREATE TABLE test_null_as_default (a String DEFAULT 'WORLD', b String DEFAULT 'PEOPLE') ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4273', () => {
    const query = `CREATE TABLE test_null_as_default (a Int8, b Int64 DEFAULT a + 1000) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4274', () => {
    const query = `CREATE TABLE test_null_as_default (a Int8, b Int64 DEFAULT c - 500, c Int32 DEFAULT a + 1000) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4275', () => {
    const query = `CREATE TABLE alter_test (a Int32, b DateTime) ENGINE = ReplacingMergeTree(b) ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4276', () => {
    const query = `CREATE TABLE test (\`key\` UInt32, \`arr\` ALIAS [1, 2], \`xx\` MATERIALIZED arr[1]) ENGINE = MergeTree PARTITION BY tuple() ORDER BY tuple(); `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4277', () => {
    const query = `CREATE TABLE test (\`key\` UInt32, \`arr\` Array(UInt32) ALIAS [1, 2], \`xx\` MATERIALIZED arr[1]) ENGINE = MergeTree PARTITION BY tuple() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4278', () => {
    const query = `CREATE TABLE test (\`key\` UInt32, \`arr\` Array(UInt32) ALIAS [1, 2], \`xx\` UInt32 MATERIALIZED arr[1]) ENGINE = MergeTree PARTITION BY tuple() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4279', () => {
    const query = `CREATE TABLE test (\`key\` UInt32, \`arr\` ALIAS [1, 2]) ENGINE = MergeTree PARTITION BY tuple() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4280', () => {
    const query = `CREATE DICTIONARY example_simple_key_dictionary ( id UInt64,
value UInt64
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE '' DATABASE currentDatabase()))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4281', () => {
    const query = `CREATE DICTIONARY example_complex_key_dictionary ( id UInt64,
id_key String,
value UInt64
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE '' DATABASE currentDatabase()))
LAYOUT(COMPLEX_KEY_DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4282', () => {
    const query = `CREATE DATABASE 01837_db ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4283', () => {
    const query = `CREATE TABLE 01837_db.simple_key_dictionary_source (
id UInt64,
value String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4284', () => {
    const query = `CREATE DICTIONARY 01837_db.simple_key_direct_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB '01837_db' TABLE 'simple_key_dictionary_source'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4285', () => {
    const query = `create table tt_null(p String) engine = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4286', () => {
    const query = `create table tt(p String,tmin AggregateFunction(min, DateTime))  engine = AggregatingMergeTree  order by p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4287', () => {
    const query = `create materialized view tt_mv to tt as  select p, minState(now() - interval 30 minute) as tmin
from tt_null group by p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4288', () => {
    const query = `CREATE TABLE tb (
date Date,
\`index\` Int32,
value Int32,
idx Int32 ALIAS \`index\`
)
ENGINE = MergeTree
PARTITION BY date
ORDER BY (date, \`index\`);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4289', () => {
    const query = `CREATE TABLE test_collation (
\`v\` String,
\`v2\` String
)
ENGINE = MergeTree
ORDER BY v
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4290', () => {
    const query = `create table data_01832 (key Int) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4291', () => {
    const query = `CREATE TABLE t_json_wide_parts (data Object('json')) ENGINE MergeTree ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4292', () => {
    const query = `CREATE TABLE t_json_sparse (data Object('json')) ENGINE = MergeTree ORDER BY tuple()
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.1,
min_bytes_for_wide_part = 0, index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4293', () => {
    const query = `CREATE TABLE t_json_partitions (id UInt32, obj Object('json')) ENGINE MergeTree ORDER BY id PARTITION BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4294', () => {
    const query = `CREATE TABLE t_json_parallel (data Object('json')) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4295', () => {
    const query = `CREATE TABLE t_json_null(id UInt64, data Object(Nullable('JSON'))) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4296', () => {
    const query = `CREATE TABLE t_json_mutations(id UInt32, s String, obj Object('json')) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4297', () => {
    const query = `CREATE TABLE t_json(id UInt64, obj Object('json')) ENGINE = MergeTree ORDER BY id
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4298', () => {
    const query = `CREATE TABLE type_json_src (id UInt32, data Object('json')) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4299', () => {
    const query = `CREATE TABLE type_json_dst AS type_json_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4300', () => {
    const query = `CREATE TABLE type_json_dst (data Object('json')) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4301', () => {
    const query = `CREATE TABLE type_json_src (data String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4302', () => {
    const query = `CREATE TABLE t_json_array (id UInt32, arr Array(Object('json'))) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4303', () => {
    const query = `CREATE TABLE t_json(id UInt64, obj Object('json')) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4304', () => {
    const query = `CREATE TABLE t_map(id UInt64, m Map(String, UInt64)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4305', () => {
    const query = `CREATE TABLE t_json_field (id UInt32, data Object('json')) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4306', () => {
    const query = `CREATE table t_github_json (
event_type LowCardinality(String) DEFAULT JSONExtractString(message_raw, 'type'),
repo_name LowCardinality(String) DEFAULT JSONExtractString(message_raw, 'repo', 'name'),
message Object('json') DEFAULT message_raw,
message_raw String EPHEMERAL
) ENGINE = MergeTree ORDER BY (event_type, repo_name);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4307', () => {
    const query = `CREATE TABLE t_json_empty_str(id UInt32, o Object('json')) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4308', () => {
    const query = `CREATE TABLE t_json_local(data Object('json')) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4309', () => {
    const query = `CREATE TABLE t_json_dist AS t_json_local ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), t_json_local);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4310', () => {
    const query = `CREATE TABLE t_json_desc (data Object('json')) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4311', () => {
    const query = `CREATE TABLE t_json_bools (data Object('json')) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4312', () => {
    const query = `CREATE TABLE t_json_str_5 (data String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4313', () => {
    const query = `CREATE TABLE t_json_5 (data Object('json')) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4314', () => {
    const query = `CREATE TABLE t_json_2(id UInt64, data Object('JSON')) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01825_2/t_json_2', 'r1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4315', () => {
    const query = `CREATE TABLE t_json_2(id UInt64, data Object('JSON')) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4316', () => {
    const query = `CREATE TABLE t_json_17(obj Object('json')) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4317', () => {
    const query = `CREATE FUNCTION hasValidSizes17 AS (arr1, arr2) -> length(arr1) = length(arr2) AND arrayAll((x, y) -> length(x) = length(y), arr1, arr2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4318', () => {
    const query = `CREATE TABLE t_json_14 (id UInt32, o Object('json')) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4319', () => {
    const query = `CREATE TABLE t_json_10 (o Object('json')) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4320', () => {
    const query = `CREATE TABLE t_json(id UInt64, data Object('JSON')) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4321', () => {
    const query = `CREATE TABLE replacing_table (a UInt32, b UInt32, c UInt32) ENGINE = ReplacingMergeTree ORDER BY a
SETTINGS vertical_merge_algorithm_min_rows_to_activate = 1,
vertical_merge_algorithm_min_columns_to_activate = 1,
index_granularity = 16,
min_bytes_for_wide_part = 0,
merge_max_block_size = 16;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4322', () => {
    const query = `CREATE TABLE replacing_table (
key UInt64,
value UInt64
)
ENGINE = ReplacingMergeTree
ORDER BY key
SETTINGS
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4323', () => {
    const query = `CREATE TABLE t_json_partitions (id UInt32, obj JSON) ENGINE MergeTree ORDER BY id PARTITION BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4324', () => {
    const query = `CREATE TABLE t_json_parallel (data JSON) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4325', () => {
    const query = `CREATE TABLE t_json_mutations(id UInt32, s String, obj JSON) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4326', () => {
    const query = `CREATE TABLE t_json(id UInt64, obj JSON) ENGINE = MergeTree ORDER BY id
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4327', () => {
    const query = `CREATE TABLE type_json_src (id UInt32, data JSON) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4328', () => {
    const query = `CREATE TABLE type_json_dst (data JSON) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4329', () => {
    const query = `CREATE TABLE t_json_array (id UInt32, arr Array(JSON)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4330', () => {
    const query = `CREATE table t_github_json (
event_type LowCardinality(String) DEFAULT JSONExtractString(message_raw, 'type'),
repo_name LowCardinality(String) DEFAULT JSONExtractString(message_raw, 'repo', 'name'),
message JSON DEFAULT empty(message_raw) ? '{}' : message_raw,
message_raw String EPHEMERAL
) ENGINE = MergeTree ORDER BY (event_type, repo_name);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4331', () => {
    const query = `CREATE TABLE t_json_local(data JSON) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4332', () => {
    const query = `CREATE TABLE t_json_bools (data JSON) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4333', () => {
    const query = `CREATE TABLE t_json(id UInt64, obj JSON) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4334', () => {
    const query = `CREATE TABLE t_json_2(id UInt64, data JSON) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01825_2/t_json_2', 'r1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4335', () => {
    const query = `CREATE TABLE t_json_2(id UInt64, data JSON) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4336', () => {
    const query = `CREATE TABLE t_json_10 (o JSON) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4337', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_01824;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4338', () => {
    const query = `create table t1_shard (id Int32) engine MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4339', () => {
    const query = `create table t2_shard (id Int32) engine MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4340', () => {
    const query = `create table t1_distr as t1_shard engine Distributed(test_cluster_two_shards_localhost, test_01824, t1_shard, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4341', () => {
    const query = `create table t2_distr as t2_shard engine Distributed(test_cluster_two_shards_localhost, test_01824, t2_shard, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4342', () => {
    const query = `CREATE TABLE t_move_to_prewhere (id UInt32, a UInt8, b UInt8, c UInt8, fat_string String) ENGINE = MergeTree ORDER BY id PARTITION BY id
SETTINGS min_rows_for_wide_part = 100, min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4343', () => {
    const query = `CREATE TABLE t_move_to_prewhere (id UInt32, a UInt8, b UInt8, c UInt8, fat_string String) ENGINE = MergeTree ORDER BY id PARTITION BY id
SETTINGS min_rows_for_wide_part = 10000, min_bytes_for_wide_part = 100000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4344', () => {
    const query = `create temporary table test ( arr Array(Array(LowCardinality(String)))
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4345', () => {
    const query = `CREATE TABLE t0 (c0 String) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4346', () => {
    const query = `CREATE TABLE t1 (
\`n\` Int8
)
ENGINE = Memory
COMMENT 'this is a temporary table';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4347', () => {
    const query = `CREATE TABLE t2 (
\`n\` Int8
)
ENGINE = MergeTree
ORDER BY n
COMMENT 'this is a MergeTree table';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4348', () => {
    const query = `CREATE TABLE t3 (
\`n\` Int8
)
ENGINE = Log
COMMENT 'this is a Log table';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4349', () => {
    const query = `CREATE TABLE t4 (
\`n\` Int8
)
ENGINE = Kafka
SETTINGS
kafka_broker_list = 'localhost:10000',
kafka_topic_list = 'test',
kafka_group_name = 'test',
kafka_format = 'JSONEachRow'
COMMENT 'this is a Kafka table';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4350', () => {
    const query = `CREATE TABLE t5 (
\`n\` Int8
)
ENGINE = EmbeddedRocksDB
PRIMARY KEY n
COMMENT 'this is a EmbeddedRocksDB table';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4351', () => {
    const query = `CREATE TABLE t6 (
\`n\` Int8
)
ENGINE = Executable('script.py', TabSeparated)
COMMENT 'this is a Executable table';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4352', () => {
    const query = `CREATE WINDOW VIEW t7 (
\`n\` Int8
)
ENGINE MergeTree
ORDER BY n
AS SELECT 1
GROUP BY tumble(now(), toIntervalDay('1'))
COMMENT 'this is a WindowView table';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4353', () => {
    const query = `CREATE TABLE join_table_mutation(id Int32, name String) ENGINE = Join(ANY, LEFT, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4354', () => {
    const query = `CREATE TABLE dictionary_primary_key_source_table (
identifier UInt64,
v UInt64
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4355', () => {
    const query = `CREATE DICTIONARY flat_dictionary (
identifier UInt64,
v UInt64
)
PRIMARY KEY v
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_primary_key_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4356', () => {
    const query = `CREATE TABLE main_table_01818 (
\`id\` UInt32,
\`advertiser_id\` String,
\`campaign_id\` String,
\`name\` String,
\`budget\` Float64,
\`budget_mode\` String,
\`landing_type\` String,
\`status\` String,
\`modify_time\` String,
\`campaign_type\` String,
\`campaign_create_time\` DateTime,
\`campaign_modify_time\` DateTime,
\`create_time\` DateTime,
\`update_time\` DateTime
)
ENGINE = MergeTree
PARTITION BY advertiser_id
ORDER BY campaign_id
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4357', () => {
    const query = `CREATE TABLE tmp_table_01818 (
\`id\` UInt32,
\`advertiser_id\` String,
\`campaign_id\` String,
\`name\` String,
\`budget\` Float64,
\`budget_mode\` String,
\`landing_type\` String,
\`status\` String,
\`modify_time\` String,
\`campaign_type\` String,
\`campaign_create_time\` DateTime,
\`campaign_modify_time\` DateTime,
\`create_time\` DateTime,
\`update_time\` DateTime
)
ENGINE = MergeTree
PARTITION BY advertiser_id
ORDER BY campaign_id
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4358', () => {
    const query = `create table data_01817 (key Int) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4359', () => {
    const query = `create table buffer_01817 (key Int) Engine=Buffer(currentDatabase(), data_01817, 0,
0
); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
drop table data_01817;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4360', () => {
    const query = `CREATE TABLE data (a Int64, b Int64) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4361', () => {
    const query = `CREATE TABLE data_distributed (a Int64, b Int64) ENGINE = Distributed(test_shard_localhost, currentDatabase(), 'data');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4362', () => {
    const query = `CREATE TABLE test_01344 (x String, INDEX idx (x) TYPE set(10) GRANULARITY 1) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4363', () => {
    const query = `create table data_01809 (i int) engine MergeTree order by i settings old_parts_lifetime = 10000000000, min_bytes_for_wide_part = 0, inactive_parts_to_throw_insert = 0, inactive_parts_to_delay_insert = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4364', () => {
    const query = `CREATE TABLE dictionary_decimal_source_table (
id UInt64,
decimal_value Decimal256(5)
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4365', () => {
    const query = `CREATE DICTIONARY flat_dictionary (
id UInt64,
decimal_value Decimal256(5)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_decimal_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4366', () => {
    const query = `CREATE DICTIONARY hashed_dictionary (
id UInt64,
decimal_value Decimal256(5)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_decimal_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4367', () => {
    const query = `CREATE DICTIONARY cache_dictionary (
id UInt64,
decimal_value Decimal256(5)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_decimal_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4368', () => {
    const query = `CREATE DICTIONARY direct_dictionary (
id UInt64,
decimal_value Decimal256(5)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_decimal_source_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4369', () => {
    const query = `CREATE TABLE ip_trie_dictionary_decimal_source_table (
prefix String,
decimal_value Decimal256(5)
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4370', () => {
    const query = `CREATE DICTIONARY ip_trie_dictionary (
prefix String,
decimal_value Decimal256(5)
)
PRIMARY KEY prefix
SOURCE(CLICKHOUSE(HOST 'localhost' port tcpPort() TABLE 'ip_trie_dictionary_decimal_source_table'))
LIFETIME(MIN 10 MAX 1000)
LAYOUT(IP_TRIE());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4371', () => {
    const query = `CREATE TABLE dictionary_decimal_polygons_source_table (
key Array(Array(Array(Tuple(Float64, Float64)))),
decimal_value Decimal256(5)
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4372', () => {
    const query = `CREATE DICTIONARY polygon_dictionary (
key Array(Array(Array(Tuple(Float64, Float64)))),
decimal_value Decimal256(5)
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_decimal_polygons_source_table'))
LIFETIME(MIN 0 MAX 1000)
LAYOUT(POLYGON());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4373', () => {
    const query = `CREATE TABLE t_map_null (a Map(String, String), b String) engine = MergeTree() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4374', () => {
    const query = `CREATE TABLE 01802_empsalary (
\`depname\` LowCardinality(String),
\`empno\` UInt64,
\`salary\` Int32,
\`enroll_date\` Date
)
ENGINE = MergeTree
ORDER BY enroll_date
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4375', () => {
    const query = `create table data_01801 (key Int) engine=MergeTree() order by key settings index_granularity=10 as select number/10 from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4376', () => {
    const query = `CREATE TABLE nested_01800_tiny_log (\`column\` Nested(name String, names Array(String), types Array(Enum8('PU' = 1, 'US' = 2, 'OTHER' = 3)))) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4377', () => {
    const query = `CREATE TABLE nested_01800_stripe_log (\`column\` Nested(name String, names Array(String), types Array(Enum8('PU' = 1, 'US' = 2, 'OTHER' = 3)))) ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4378', () => {
    const query = `CREATE TABLE nested_01800_log (\`column\` Nested(name String, names Array(String), types Array(Enum8('PU' = 1, 'US' = 2, 'OTHER' = 3)))) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4379', () => {
    const query = `CREATE TABLE test1 (
\`year\` String ,
\`uv\` AggregateFunction(uniqTheta, Int64)
)
ENGINE = AggregatingMergeTree()
ORDER BY (year);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4380', () => {
    const query = `CREATE TABLE test2 (
\`year\` String ,
\`uv\`  Int64
)
ENGINE = MergeTree()
ORDER BY (year);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4381', () => {
    const query = `CREATE TABLE stored_aggregates (
d Date,
Uniq AggregateFunction(uniq, UInt64),
UniqThetaSketch AggregateFunction(uniqTheta, UInt64)
)
ENGINE = AggregatingMergeTree(d, d, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4382', () => {
    const query = `CREATE TABLE stored_aggregates (
	d	Date,
	k1 	UInt64,
	k2 	String,
	Uniq 			AggregateFunction(uniq, UInt64),
UniqThetaSketch	AggregateFunction(uniqTheta, UInt64)
)
ENGINE = AggregatingMergeTree(d, (d, k1, k2), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4383', () => {
    const query = `create table summing_merge_tree_null ( d materialized today(),
k UInt64,
c UInt64,
u UInt64
) engine=Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4384', () => {
    const query = `create materialized view summing_merge_tree_aggregate_function ( d Date,
k UInt64,
c UInt64,
un AggregateFunction(uniq, UInt64),
ut AggregateFunction(uniqTheta, UInt64)
) engine=SummingMergeTree(d, k, 8192)
as select d, k, sum(c) as c, uniqState(u) as un, uniqThetaState(u) as ut
from summing_merge_tree_null
group by d, k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4385', () => {
    const query = `CREATE TABLE t_having (c0 Int32, c1 UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4386', () => {
    const query = `CREATE TABLE underlying_01797 (key UInt64) Engine=StripeLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4387', () => {
    const query = `CREATE TABLE underlying_01796 (key UInt64) Engine=Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4388', () => {
    const query = `CREATE TABLE underlying_01795 (key UInt64) Engine=TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4389', () => {
    const query = `CREATE TABLE tmp_01781 (n LowCardinality(String)) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4390', () => {
    const query = `CREATE TABLE dist_01781 (n LowCardinality(String)) Engine=Distributed(test_cluster_two_shards, currentDatabase(), tmp_01781, cityHash64(n));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4391', () => {
    const query = `CREATE TABLE test_wide_nested (
\`id\` Int,
\`info.id\` Array(Int),
\`info.name\` Array(String),
\`info.age\` Array(Int)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4392', () => {
    const query = `CREATE TABLE test_wide_not_nested (
\`id\` Int,
\`info.id\` Int,
\`info.name\` String,
\`info.age\` Int
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4393', () => {
    const query = `CREATE TABLE bug_repro_local (\`attributes\` Map(LowCardinality(String), String)) ENGINE = Log as select map('','');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4394', () => {
    const query = `CREATE TABLE group_by_pk (k UInt64, v UInt64) ENGINE = MergeTree ORDER BY k PARTITION BY v % 50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4395', () => {
    const query = `CREATE TABLE foo_lc (n LowCardinality(String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4396', () => {
    const query = `CREATE TABLE foo (n String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4397', () => {
    const query = `CREATE DATABASE 01785_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4398', () => {
    const query = `CREATE TABLE 01785_db.simple_key_source_table (
id UInt64,
value String
) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4399', () => {
    const query = `CREATE DICTIONARY 01785_db.simple_key_flat_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB '01785_db' TABLE 'simple_key_source_table'))
LAYOUT(FLAT())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4400', () => {
    const query = `CREATE DICTIONARY 01785_db.simple_key_hashed_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB '01785_db' TABLE 'simple_key_source_table'))
LAYOUT(HASHED())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4401', () => {
    const query = `CREATE DICTIONARY 01785_db.simple_key_cache_dictionary (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB '01785_db' TABLE 'simple_key_source_table'))
LAYOUT(CACHE(SIZE_IN_CELLS 100000))
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4402', () => {
    const query = `CREATE TABLE 01785_db.complex_key_source_table (
id UInt64,
id_key String,
value String
) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4403', () => {
    const query = `CREATE DICTIONARY 01785_db.complex_key_hashed_dictionary (
id UInt64,
id_key String,
value String
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB '01785_db' TABLE 'complex_key_source_table'))
LAYOUT(COMPLEX_KEY_HASHED())
LIFETIME(MIN 0 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4404', () => {
    const query = `CREATE TABLE t2 (Id Int32, Val Int32, X Int32) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4405', () => {
    const query = `CREATE TABLE bloom_filter (\`id\` UInt64, \`s\` String, INDEX tok_bf (s, lower(s)) TYPE tokenbf_v1(512, 3, 0) GRANULARITY 1) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 8, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4406', () => {
    const query = `CREATE TABLE merge_tree_deduplication (
key UInt64,
value String,
part UInt8 DEFAULT 77
)
ENGINE=MergeTree()
ORDER BY key
PARTITION BY part
SETTINGS non_replicated_deduplication_window=3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4407', () => {
    const query = `CREATE TABLE merge_tree_no_deduplication (
key UInt64,
value String
)
ENGINE=MergeTree()
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4408', () => {
    const query = `CREATE TABLE simple_key_dictionary_source_table (
id UInt64,
value String,
value_nullable Nullable(String)
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4409', () => {
    const query = `CREATE DICTIONARY simple_key_dictionary (
id UInt64,
value String,
value_nullable Nullable(String)
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'simple_key_dictionary_source_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4410', () => {
    const query = `CREATE TABLE complex_key_dictionary_source_table (
id UInt64,
id_key String,
value String,
value_nullable Nullable(String)
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4411', () => {
    const query = `CREATE DICTIONARY complex_key_dictionary (
id UInt64,
id_key String,
value String,
value_nullable Nullable(String)
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'complex_key_dictionary_source_table'))
LAYOUT(COMPLEX_KEY_DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4412', () => {
    const query = `CREATE TABLE range_key_dictionary_source_table (
key UInt64,
start_date Date,
end_date Date,
value String,
value_nullable Nullable(String)
)
ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4413', () => {
    const query = `CREATE DICTIONARY range_key_dictionary (
key UInt64,
start_date Date,
end_date Date,
value String,
value_nullable Nullable(String)
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'range_key_dictionary_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(RANGE_HASHED())
RANGE(MIN start_date MAX end_date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4414', () => {
    const query = `CREATE TABLE sparse_tuple (id UInt64, t Tuple(a UInt64, s String)) ENGINE = MergeTree ORDER BY tuple()
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4415', () => {
    const query = `CREATE TABLE sparse_tuple (id UInt64, t Tuple(a UInt64, b Tuple(u UInt32, s String))) ENGINE = MergeTree ORDER BY tuple()
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4416', () => {
    const query = `CREATE TABLE t_sparse_pk (k UInt64, s String) ENGINE = MergeTree ORDER BY k
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.0, index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4417', () => {
    const query = `CREATE TABLE t_sparse_pk (k UInt64, v UInt64 CODEC(NONE)) ENGINE = MergeTree ORDER BY k
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.0, index_granularity = 30;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4418', () => {
    const query = `CREATE TABLE t_full_pk (k UInt64, v UInt64) ENGINE = MergeTree ORDER BY k
SETTINGS ratio_of_defaults_for_sparse_serialization = 1.1, index_granularity = 30;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4419', () => {
    const query = `CREATE TABLE sparse_t ( id UInt64,
u UInt64,
s String,
arr1 Array(String),
arr2 Array(UInt64),
t Tuple(a UInt64, s String))
ENGINE = MergeTree ORDER BY tuple()
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4420', () => {
    const query = `CREATE TABLE t_sparse_full (id UInt64, u UInt64, s String) ENGINE = MergeTree ORDER BY id
SETTINGS index_granularity = 32, index_granularity_bytes = '10Mi',
ratio_of_defaults_for_sparse_serialization = 0.1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4421', () => {
    const query = `CREATE TABLE t_sparse (id UInt64, u UInt64, s String) ENGINE = MergeTree ORDER BY id
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9, index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4422', () => {
    const query = `CREATE TABLE t_sparse_distinct (id UInt32, v UInt64) ENGINE = MergeTree
ORDER BY id
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4423', () => {
    const query = `CREATE TABLE t_sparse_alter (id UInt64, u UInt64, s String) ENGINE = MergeTree ORDER BY id
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4424', () => {
    const query = `CREATE TABLE t_sparse (id UInt64, u UInt64, s String, arr1 Array(String), arr2 Array(UInt64)) ENGINE = MergeTree ORDER BY tuple()
SETTINGS ratio_of_defaults_for_sparse_serialization = 0.1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4425', () => {
    const query = `CREATE TABLE t_sparse_1 (id UInt64, v Int64) ENGINE = MergeTree ORDER BY tuple()
SETTINGS ratio_of_defaults_for_sparse_serialization = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4426', () => {
    const query = `CREATE DATABASE 01780_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4427', () => {
    const query = `CREATE DICTIONARY dict1 (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dict1'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4428', () => {
    const query = `CREATE DICTIONARY 01780_db.dict2 (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DATABASE '01780_db' TABLE 'dict2'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4429', () => {
    const query = `CREATE TABLE 01780_db.dict3_source (
id UInt64,
value String
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4430', () => {
    const query = `CREATE DICTIONARY 01780_db.dict3 (
id UInt64,
value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dict3_source' DATABASE '01780_db'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4431', () => {
    const query = `CREATE TABLE ttt01778 (\`1\` String, \`2\` INT) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4432', () => {
    const query = `CREATE TABLE test_01778 (
\`key\` LowCardinality(FixedString(3)),
\`d\` date
)
ENGINE = MergeTree(d, key, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4433', () => {
    const query = `CREATE DATABASE 01778_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4434', () => {
    const query = `CREATE TABLE 01778_db.hierarchy_source_table (id UInt64, parent_id UInt64) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4435', () => {
    const query = `CREATE DICTIONARY 01778_db.hierarchy_flat_dictionary (
id UInt64,
parent_id UInt64 HIERARCHICAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'hierarchy_source_table' DB '01778_db'))
LAYOUT(FLAT())
LIFETIME(MIN 1 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4436', () => {
    const query = `CREATE DICTIONARY 01778_db.hierarchy_hashed_dictionary (
id UInt64,
parent_id UInt64 HIERARCHICAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'hierarchy_source_table' DB '01778_db'))
LAYOUT(HASHED())
LIFETIME(MIN 1 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4437', () => {
    const query = `CREATE DICTIONARY 01778_db.hierarchy_cache_dictionary (
id UInt64,
parent_id UInt64 HIERARCHICAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'hierarchy_source_table' DB '01778_db'))
LAYOUT(CACHE(SIZE_IN_CELLS 10))
LIFETIME(MIN 1 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4438', () => {
    const query = `CREATE DICTIONARY 01778_db.hierarchy_direct_dictionary (
id UInt64,
parent_id UInt64 HIERARCHICAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'hierarchy_source_table' DB '01778_db'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4439', () => {
    const query = `CREATE TABLE test_data (cidr String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4440', () => {
    const query = `CREATE TABLE test (time DateTime64(3)) ENGINE = MergeTree ORDER BY tuple() PARTITION BY toStartOfInterval(time, INTERVAL 2 YEAR);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4441', () => {
    const query = `CREATE TABLE bloom_filter_null_array (v Array(Int32), INDEX idx v TYPE bloom_filter GRANULARITY 3) ENGINE = MergeTree() ORDER BY v SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4442', () => {
    const query = `CREATE TABLE test_aggregation (x Array(Int)) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4443', () => {
    const query = `CREATE TABLE test_aggregation (x Array(Decimal64(8))) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4444', () => {
    const query = `CREATE DATABASE 01766_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4445', () => {
    const query = `CREATE TABLE 01766_db.complex_key_simple_attributes_source_table (
id UInt64,
id_key String,
value_first String,
value_second String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4446', () => {
    const query = `CREATE DICTIONARY 01766_db.hashed_dictionary_complex_key_simple_attributes (
id UInt64,
id_key String,
value_first String DEFAULT 'value_first_default',
value_second String DEFAULT 'value_second_default'
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_simple_attributes_source_table' DB '01766_db'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(COMPLEX_KEY_HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4447', () => {
    const query = `CREATE TABLE 01766_db.complex_key_complex_attributes_source_table (
id UInt64,
id_key String,
value_first String,
value_second Nullable(String)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4448', () => {
    const query = `CREATE DICTIONARY 01766_db.hashed_dictionary_complex_key_complex_attributes (
id UInt64,
id_key String,
value_first String DEFAULT 'value_first_default',
value_second Nullable(String) DEFAULT 'value_second_default'
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_complex_attributes_source_table' DB '01766_db'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(COMPLEX_KEY_HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4449', () => {
    const query = `CREATE TABLE t_src (id UInt32, v UInt32) ENGINE = MergeTree ORDER BY id PARTITION BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4450', () => {
    const query = `CREATE TABLE t_dst (id UInt32, v UInt32) ENGINE = MergeTree ORDER BY id PARTITION BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4451', () => {
    const query = `CREATE DATABASE 01765_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4452', () => {
    const query = `CREATE TABLE 01765_db.simple_key_simple_attributes_source_table (
id UInt64,
value_first String,
value_second String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4453', () => {
    const query = `CREATE DICTIONARY 01765_db.hashed_dictionary_simple_key_simple_attributes (
id UInt64,
value_first String DEFAULT 'value_first_default',
value_second String DEFAULT 'value_second_default'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_simple_attributes_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(HASHED())
SETTINGS(dictionary_use_async_executor=1, max_threads=8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4454', () => {
    const query = `CREATE DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_simple_attributes (
id UInt64,
value_first String DEFAULT 'value_first_default',
value_second String DEFAULT 'value_second_default'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_simple_attributes_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(SPARSE_HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4455', () => {
    const query = `CREATE TABLE 01765_db.simple_key_complex_attributes_source_table (
id UInt64,
value_first String,
value_second Nullable(String)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4456', () => {
    const query = `CREATE DICTIONARY 01765_db.hashed_dictionary_simple_key_complex_attributes (
id UInt64,
value_first String DEFAULT 'value_first_default',
value_second Nullable(String) DEFAULT 'value_second_default'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_complex_attributes_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4457', () => {
    const query = `CREATE DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_complex_attributes (
id UInt64,
value_first String DEFAULT 'value_first_default',
value_second Nullable(String) DEFAULT 'value_second_default'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_complex_attributes_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4458', () => {
    const query = `CREATE TABLE 01765_db.simple_key_hierarchy_table (
id UInt64,
parent_id UInt64
) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4459', () => {
    const query = `CREATE DICTIONARY 01765_db.hashed_dictionary_simple_key_hierarchy (
id UInt64,
parent_id UInt64 HIERARCHICAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_hierarchy_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4460', () => {
    const query = `CREATE DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_hierarchy (
id UInt64,
parent_id UInt64 HIERARCHICAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_hierarchy_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4461', () => {
    const query = `CREATE TABLE table_function_dictionary_source_table (
id UInt64,
value UInt64
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4462', () => {
    const query = `CREATE DICTIONARY table_function_dictionary_test_dictionary (
id UInt64,
value UInt64 DEFAULT 0
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' DATABASE currentDatabase() TABLE 'table_function_dictionary_source_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4463', () => {
    const query = `CREATE TABLE IF NOT EXISTS mytable (start_ts UInt32, end_ts UInt32, uuid String) ENGINE = MergeTree() ORDER BY start_ts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4464', () => {
    const query = `CREATE TABLE collapsing_table (
key UInt64,
value UInt64,
Sign Int8
)
ENGINE = CollapsingMergeTree(Sign)
ORDER BY key
SETTINGS
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4465', () => {
    const query = `CREATE TABLE collapsing_suspicious_granularity (
key UInt64,
value UInt64,
Sign Int8
)
ENGINE = CollapsingMergeTree(Sign)
ORDER BY key
SETTINGS
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4466', () => {
    const query = `CREATE TABLE map_lc (
\`kv\` Map(LowCardinality(String), LowCardinality(String))
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4467', () => {
    const query = `CREATE TABLE tt6 (
	\`id\` UInt32,
	\`first_column\` UInt32,
	\`second_column\` UInt32,
	\`third_column\` UInt32,
	\`status\` String
)
ENGINE = Distributed('test_shard_localhost', '', 'tt7', rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4468', () => {
    const query = `CREATE TABLE tt7 as tt6 ENGINE = Distributed('test_shard_localhost', '', 'tt6', rand()); -- {serverError INFINITE_LOOP} DROP TABLE tt6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4469', () => {
    const query = `CREATE TABLE test_ttl_group_by01763 (key UInt32, ts DateTime, value UInt32, min_value UInt32 default value, max_value UInt32 default value)
ENGINE = MergeTree() PARTITION BY toYYYYMM(ts)
ORDER BY (key, toStartOfInterval(ts, toIntervalMinute(3)), ts) 
TTL ts + INTERVAL 5 MINUTE GROUP BY key, toStartOfInterval(ts, toIntervalMinute(3)) 
SET value = sum(value), min_value = min(min_value), max_value = max(max_value),  ts=min(toStartOfInterval(ts, toIntervalMinute(3)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4470', () => {
    const query = `CREATE TABLE Test ENGINE = MergeTree()
PRIMARY KEY (String1,String2)
ORDER BY (String1,String2)
SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi'
AS
SELECT
'String1_' || toString(number) as String1,
'String2_' || toString(number) as String2,
'String3_' || toString(number) as String3,
'String4_' || toString(number%4) as String4
FROM numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4471', () => {
    const query = `create table t(a UInt8) engine=MergeTree order by a SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4472', () => {
    const query = `CREATE TABLE t1 (id Int64, create_time DateTime) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4473', () => {
    const query = `CREATE TABLE t2 (delete_time DateTime) ENGINE = MergeTree ORDER BY delete_time SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4474', () => {
    const query = `CREATE TABLE test_alter_decimal (n UInt64, d Decimal(15, 8))
ENGINE = ReplicatedMergeTree('/clickhouse/{database}/01761_alter_decimal_zookeeper', 'r1')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4475', () => {
    const query = `CREATE DATABASE 01760_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4476', () => {
    const query = `CREATE TABLE 01760_db.example_simple_key_source (id UInt64, value UInt64) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4477', () => {
    const query = `CREATE DICTIONARY 01760_db.example_simple_key_dictionary ( id UInt64,
value UInt64
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'example_simple_key_source' DATABASE '01760_db'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4478', () => {
    const query = `CREATE TABLE 01760_db.example_complex_key_source (id UInt64, id_key String, value UInt64) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4479', () => {
    const query = `CREATE DICTIONARY 01760_db.example_complex_key_dictionary ( id UInt64,
id_key String,
value UInt64
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'example_complex_key_source' DATABASE '01760_db'))
LAYOUT(COMPLEX_KEY_DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4480', () => {
    const query = `CREATE TABLE 01760_db.polygons (key Array(Array(Array(Tuple(Float64, Float64)))), name String, value UInt64, value_nullable Nullable(UInt64)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4481', () => {
    const query = `CREATE TABLE 01760_db.points (x Float64, y Float64, def_i UInt64, def_s String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4482', () => {
    const query = `CREATE DICTIONARY 01760_db.dict_array (
key Array(Array(Array(Tuple(Float64, Float64)))),
name String DEFAULT 'qqq',
value UInt64 DEFAULT 10,
value_nullable Nullable(UInt64) DEFAULT 20
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'polygons' DB '01760_db'))
LIFETIME(0)
LAYOUT(POLYGON())
SETTINGS(dictionary_use_async_executor=1, max_threads=8)
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4483', () => {
    const query = `CREATE TABLE ddl_dictonary_test_source (
id UInt64,
value UInt64
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4484', () => {
    const query = `CREATE DICTIONARY ddl_dictionary_test (
id UInt64,
value UInt64 DEFAULT 0
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'ddl_dictonary_test_source'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4485', () => {
    const query = `CREATE DATABASE 01759_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4486', () => {
    const query = `CREATE TABLE 01759_db.dictionary_source_table (
key UInt64,
value1 UInt64,
value2 UInt64
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4487', () => {
    const query = `CREATE DICTIONARY 01759_db.test_dictionary(key UInt64, value1 UInt64, value1 UInt64) PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dictionary_source_table' DB '01759_db'))
LAYOUT(COMPLEX_KEY_DIRECT()); -- {serverError BAD_ARGUMENTS}
CREATE DICTIONARY 01759_db.test_dictionary(key UInt64, value1 UInt64, value2 UInt64)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dictionary_source_table' DB '01759_db'))
LAYOUT(COMPLEX_KEY_DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4488', () => {
    const query = `create table dist_01757 as system.one engine=Distributed(test_cluster_two_shards, system, one, dummy);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4489', () => {
    const query = `create table dist_01756 as system.one engine=Distributed(test_cluster_two_shards, system, one, intHash64(dummy));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4490', () => {
    const query = `create table data_01756_signed (key Int) engine=Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4491', () => {
    const query = `create table data_01756_str (key String) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4492', () => {
    const query = `create table dist_01756_str as data_01756_str engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01756_str, cityHash64(key));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4493', () => {
    const query = `create table dist_01756_column as system.one engine=Distributed(test_cluster_two_shards, system, one, dummy);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4494', () => {
    const query = `create table data_01755 (i Int) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4495', () => {
    const query = `create table dist_01755 as data_01755 Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01755, i);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4496', () => {
    const query = `CREATE DATABASE 01754_dictionary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4497', () => {
    const query = `CREATE TABLE 01754_dictionary_db.complex_key_simple_attributes_source_table (
id UInt64,
id_key String,
value_first String,
value_second String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4498', () => {
    const query = `CREATE DICTIONARY 01754_dictionary_db.direct_dictionary_complex_key_simple_attributes (
id UInt64,
id_key String DEFAULT 'test_default_id_key',
value_first String DEFAULT 'value_first_default',
value_second String DEFAULT 'value_second_default'
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_simple_attributes_source_table'))
LAYOUT(COMPLEX_KEY_DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4499', () => {
    const query = `CREATE TABLE 01754_dictionary_db.complex_key_complex_attributes_source_table (
id UInt64,
id_key String,
value_first String,
value_second Nullable(String)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4500', () => {
    const query = `CREATE DICTIONARY 01754_dictionary_db.direct_dictionary_complex_key_complex_attributes (
id UInt64,
id_key String,
value_first String DEFAULT 'value_first_default',
value_second Nullable(String) DEFAULT 'value_second_default'
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_complex_attributes_source_table'))
LAYOUT(COMPLEX_KEY_DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4501', () => {
    const query = `CREATE TABLE mmm ENGINE=MergeTree ORDER BY number AS SELECT number, rand() % 10 AS a FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4502', () => {
    const query = `CREATE DATABASE 01753_dictionary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4503', () => {
    const query = `CREATE TABLE 01753_dictionary_db.simple_key_simple_attributes_source_table (
id UInt64,
value_first String,
value_second String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4504', () => {
    const query = `CREATE DICTIONARY 01753_dictionary_db.direct_dictionary_simple_key_simple_attributes (
id UInt64,
value_first String DEFAULT 'value_first_default',
value_second String DEFAULT 'value_second_default'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_simple_attributes_source_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4505', () => {
    const query = `CREATE TABLE 01753_dictionary_db.simple_key_complex_attributes_source_table (
id UInt64,
value_first String,
value_second Nullable(String)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4506', () => {
    const query = `CREATE DICTIONARY 01753_dictionary_db.direct_dictionary_simple_key_complex_attributes (
id UInt64,
value_first String DEFAULT 'value_first_default',
value_second Nullable(String) DEFAULT 'value_second_default'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_complex_attributes_source_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4507', () => {
    const query = `CREATE TABLE 01753_dictionary_db.simple_key_hierarchy_table (
id UInt64,
parent_id UInt64
) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4508', () => {
    const query = `CREATE DICTIONARY 01753_dictionary_db.direct_dictionary_simple_key_hierarchy (
id UInt64,
parent_id UInt64 HIERARCHICAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_hierarchy_table'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4509', () => {
    const query = `create table x (i int, j int) engine MergeTree partition by i order by j settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4510', () => {
    const query = `create table mt (n UInt64) engine=MergeTree order by n partition by n % 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4511', () => {
    const query = `CREATE DATABASE test_01748;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4512', () => {
    const query = `CREATE TABLE \`test.txt\` (
\`key1\` UInt32,
\`key2\` UInt32,
\`value\` String
)
ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4513', () => {
    const query = `CREATE DICTIONARY test_dict (
\`key1\` UInt32,
\`key2\` UInt32,
\`value\` String
)
PRIMARY KEY key1, key2
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE \`test.txt\` PASSWORD '' DB currentDatabase()))
LIFETIME(MIN 1 MAX 3600)
LAYOUT(COMPLEX_KEY_HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4514', () => {
    const query = `CREATE TABLE summing_table01747 (
some_name               String,
user_id                 UInt64,
amount                  Int64,
currency                String
)
ENGINE = SummingMergeTree()
ORDER BY (some_name);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4515', () => {
    const query = `CREATE VIEW rates01747 AS SELECT 'USD' as from_currency, 'EUR' as to_currency, 1.2 as rates01747;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4516', () => {
    const query = `create table dictst01747(some_name String, field1 String, field2 UInt8) Engine = Memory as select 'name', 'test', 33;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4517', () => {
    const query = `CREATE DICTIONARY default.dict01747 (some_name String, field1 String, field2 UInt8) PRIMARY KEY some_name SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort()
TABLE dictst01747 DB currentDatabase() USER 'default'))
LIFETIME(MIN 0 MAX 0) LAYOUT(COMPLEX_KEY_HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4518', () => {
    const query = `CREATE VIEW agg_view01747 AS SELECT
summing_table01747.some_name as some_name,
dictGet('default.dict01747', 'field1', tuple(some_name)) as field1,
dictGet('default.dict01747', 'field2', tuple(some_name)) as field2,
rates01747.rates01747 as rates01747
FROM summing_table01747
ANY LEFT JOIN rates01747
ON rates01747.from_currency = summing_table01747.currency;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4519', () => {
    const query = `CREATE TABLE report (
\`product\` Enum8('IU' = 1, 'WS' = 2),
\`machine\` String,
\`branch\` String,
\`generated_time\` DateTime
)
ENGINE = MergeTree
PARTITION BY (product, toYYYYMM(generated_time))
ORDER BY (product, machine, branch, generated_time);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4520', () => {
    const query = `CREATE TABLE replicated_report (
\`product\` Enum8('IU' = 1, 'WS' = 2),
\`machine\` String,
\`branch\` String,
\`generated_time\` DateTime
)
ENGINE = ReplicatedMergeTree('/clickhouse/{database}/01747_alter_partition_key/t', '1')
PARTITION BY (product, toYYYYMM(generated_time))
ORDER BY (product, machine, branch, generated_time);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4521', () => {
    const query = `CREATE TABLE ttt01746 (d Date, n UInt64) ENGINE = MergeTree() PARTITION BY toMonday(d) ORDER BY n SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4522', () => {
    const query = `CREATE TABLE lc_test (
\`id\` LowCardinality(String)
)
ENGINE = MergeTree
PARTITION BY tuple()
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4523', () => {
    const query = `CREATE TABLE \`01746_merge_tree\` (
\`n1\` Int8,
\`n2\` Int8,
\`n3\` Int8,
\`n4\` Int8
)
ENGINE = MergeTree
ORDER BY n1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4524', () => {
    const query = `CREATE MATERIALIZED VIEW \`01746_merge_tree_mv\` ENGINE = Memory AS
SELECT
n2,
n3
FROM \`01746_merge_tree\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4525', () => {
    const query = `CREATE TABLE \`01746_null\` (
\`n1\` Int8,
\`n2\` Int8,
\`n3\` Int8
)
ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4526', () => {
    const query = `CREATE MATERIALIZED VIEW \`01746_null_mv\` ENGINE = Memory AS
SELECT
n1,
n2
FROM \`01746_null\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4527', () => {
    const query = `CREATE TABLE \`01746_local\` (
\`n1\` Int8,
\`n2\` Int8,
\`n3\` Int8
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4528', () => {
    const query = `CREATE TABLE \`01746_dist\` AS \`01746_local\` ENGINE = Distributed('test_shard_localhost', currentDatabase(), \`01746_local\`, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4529', () => {
    const query = `CREATE MATERIALIZED VIEW \`01746_dist_mv\` ENGINE = Memory AS
SELECT
n1,
n2
FROM \`01746_dist\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4530', () => {
    const query = `CREATE TABLE \`01746_merge_t\` (
\`n1\` Int8,
\`n2\` Int8,
\`n3\` Int8
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4531', () => {
    const query = `CREATE TABLE \`01746_merge\` AS \`01746_merge_t\` ENGINE = Merge(currentDatabase(), '01746_merge_t');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4532', () => {
    const query = `CREATE MATERIALIZED VIEW \`01746_merge_mv\` ENGINE = Memory AS
SELECT
n1,
n2
FROM \`01746_merge\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4533', () => {
    const query = `CREATE TABLE \`01746_buffer_t\` (
\`n1\` Int8,
\`n2\` Int8,
\`n3\` Int8
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4534', () => {
    const query = `CREATE TABLE \`01746_buffer\` AS \`01746_buffer_t\` ENGINE = Buffer(currentDatabase(), \`01746_buffer_t\`, 16, 10, 100, 10000, 1000000, 10000000, 100000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4535', () => {
    const query = `CREATE MATERIALIZED VIEW \`01746_buffer_mv\` ENGINE = Memory AS
SELECT
n1,
n2
FROM \`01746_buffer\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4536', () => {
    const query = `CREATE TABLE test_table (
f1 Int32,
f2 Int32,
pk Int32
)
ENGINE = MergeTree()
ORDER BY f1
PARTITION BY pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4537', () => {
    const query = `CREATE VIEW test_view AS SELECT f1, f2
FROM test_table
WHERE pk = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4538', () => {
    const query = `create table tbl (p Int64, t Int64, f Float64) Engine=MergeTree partition by p order by t settings index_granularity=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4539', () => {
    const query = `create table XXXX (t Int64, f Float64) Engine=MergeTree order by t settings index_granularity=128, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4540', () => {
    const query = `create table XXXX (t Int64, f Float64) Engine=MergeTree order by t settings index_granularity=8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4541', () => {
    const query = `CREATE TABLE XXXX (p Nullable(Int64), k Decimal(76, 39)) ENGINE = MergeTree PARTITION BY toDate(p) ORDER BY k SETTINGS index_granularity = 1, allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4542', () => {
    const query = `CREATE TABLE prewhere_move_select_final (x Int, y Int, z Int) ENGINE = ReplacingMergeTree() ORDER BY (x, y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4543', () => {
    const query = `create table test_enum (c Nullable(Enum16('A' = 1, 'B' = 2))) engine Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4544', () => {
    const query = `CREATE TABLE join_tbl (\`id\` String, \`name\` String, lcname LowCardinality(String)) ENGINE = Join(any, left, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4545', () => {
    const query = `CREATE TEMPORARY TABLE t (i UInt8, x DateTime64(3, 'UTC'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4546', () => {
    const query = `CREATE TEMPORARY TABLE decimal (
f dec(38, 38)
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4547', () => {
    const query = `CREATE TABLE bad_conversions (a UInt32) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4548', () => {
    const query = `CREATE TABLE bad_conversions_2 (e Enum('foo' = 1, 'bar' = 2)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4549', () => {
    const query = `create database db_01721;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4550', () => {
    const query = `CREATE TABLE db_01721.table_decimal_dict( KeyField UInt64,
Decimal32_ Decimal(5,4),
Decimal64_ Decimal(18,8),
Decimal128_ Decimal(25,8),
Decimal256_ Decimal(76,37)
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4551', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS db_01721.decimal_dict ( 	KeyField UInt64 DEFAULT 9999999,
	Decimal32_ Decimal(5,4) DEFAULT 0.11,
	Decimal64_ Decimal(18,8) DEFAULT 0.11,
	Decimal128_ Decimal(25,8) DEFAULT 0.11
)
PRIMARY KEY KeyField
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_decimal_dict' DB 'db_01721'))
LIFETIME(0) LAYOUT(SPARSE_HASHED);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4552', () => {
    const query = `CREATE TABLE constraint_constant_number_expression (
id UInt64,
CONSTRAINT \`c0\` CHECK 1,
CONSTRAINT \`c1\` CHECK 1 < 2,
CONSTRAINT \`c2\` CHECK isNull(cast(NULL, 'Nullable(UInt8)'))
) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4553', () => {
    const query = `CREATE TABLE constraint_constant_number_expression_non_uint8 (
id UInt64,
CONSTRAINT \`c0\` CHECK toUInt64(1)
) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4554', () => {
    const query = `CREATE TABLE constraint_constant_nullable_expression_that_contains_null (
id UInt64,
CONSTRAINT \`c0\` CHECK nullIf(1 % 2, 1)
) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4555', () => {
    const query = `CREATE TABLE table_map_with_key_integer (d DATE, m Map(Int8, Int8)) ENGINE = MergeTree() ORDER BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4556', () => {
    const query = `CREATE TABLE table_map_with_key_integer (d DATE, m Map(Int32, UInt16)) ENGINE = MergeTree() ORDER BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4557', () => {
    const query = `CREATE TABLE table_map_with_key_integer (d DATE, m Map(Date, Int32)) ENGINE = MergeTree() ORDER BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4558', () => {
    const query = `CREATE TABLE table_map_with_key_integer (d DATE, m Map(UUID, UInt16)) ENGINE = MergeTree() ORDER BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4559', () => {
    const query = `CREATE TABLE table_map_with_key_integer (d DATE, m Map(Int128, String)) ENGINE = MergeTree() ORDER BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4560', () => {
    const query = `CREATE TABLE table_map_with_key_integer (m Map(Float32, String)) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4561', () => {
    const query = `CREATE TABLE table_map_with_key_integer (m Map(Array(UInt32), String)) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4562', () => {
    const query = `CREATE TABLE file_engine_table (id UInt32) ENGINE=File(TSV);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4563', () => {
    const query = `CREATE DATABASE 01720_dictionary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4564', () => {
    const query = `CREATE TABLE 01720_dictionary_db.dictionary_source_table (
	key UInt8,
value String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4565', () => {
    const query = `CREATE DICTIONARY 01720_dictionary_db.dictionary (
key UInt64,
value String
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(DB '01720_dictionary_db' TABLE 'dictionary_source_table' HOST hostName() PORT tcpPort()))
LIFETIME(0)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4566', () => {
    const query = `CREATE TABLE constraint_on_nullable_type (
\`id\` Nullable(UInt64),
CONSTRAINT \`c0\` CHECK \`id\` = 1
)
ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4567', () => {
    const query = `CREATE TABLE constraint_on_low_cardinality_type (
\`id\` LowCardinality(UInt64),
CONSTRAINT \`c0\` CHECK \`id\` = 2
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4568', () => {
    const query = `CREATE TABLE constraint_on_low_cardinality_nullable_type (
\`id\` LowCardinality(Nullable(UInt64)),
CONSTRAINT \`c0\` CHECK \`id\` = 3
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4569', () => {
    const query = `CREATE TABLE test (timestamp DateTime('UTC'), i UInt8) Engine=MergeTree() PARTITION BY toYYYYMM(timestamp) ORDER BY (i);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4570', () => {
    const query = `CREATE TABLE signed_table ( k UInt32,
v String,
s Int8
) ENGINE CollapsingMergeTree(s) ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4571', () => {
    const query = `CREATE TABLE test_tuple (value Tuple(UInt8, UInt8)) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4572', () => {
    const query = `CREATE TABLE test_tuple_nested_in_array (value Array(Tuple(UInt8, UInt8))) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4573', () => {
    const query = `CREATE TABLE test_tuple_nested_in_array_nested_in_tuple (value Tuple(UInt8, Array(Tuple(UInt8, UInt8)))) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4574', () => {
    const query = `CREATE TABLE test_tuple_nested_in_map (value Map(String, Tuple(UInt8, UInt8))) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4575', () => {
    const query = `CREATE TABLE test_tuple_nested_in_map_nested_in_tuple (value Tuple(UInt8, Map(String, Tuple(UInt8, UInt8)))) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4576', () => {
    const query = `CREATE TABLE i20203_1 (a Int8) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/01715_background_checker_i20203', 'r1')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4577', () => {
    const query = `CREATE TABLE i20203_2 (a Int8) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/01715_background_checker_i20203', 'r2')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4578', () => {
    const query = `CREATE TABLE alter_drop_version (
\`key\` UInt64,
\`value\` String,
\`ver\` Int8
)
ENGINE = ReplacingMergeTree(ver)
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4579', () => {
    const query = `CREATE TABLE ttl_table (
date Date,
value UInt64
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01713_table_ttl', '1', date, date, 8192)
TTL date + INTERVAL 2 MONTH; --{ serverError BAD_ARGUMENTS }
CREATE TABLE ttl_table
(
date Date,
value UInt64
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01713_table_ttl', '1', date, date, 8192)
PARTITION BY date; --{ serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
CREATE TABLE ttl_table
(
date Date,
value UInt64
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01713_table_ttl', '1', date, date, 8192)
ORDER BY value; --{ serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4580', () => {
    const query = `CREATE TABLE old_school_table (
key UInt64,
value String
)
ENGINE = MergeTree()
ORDER BY key
SETTINGS index_granularity_bytes = 0, enable_mixed_granularity_parts = 0, min_bytes_for_wide_part = 0,
vertical_merge_algorithm_min_rows_to_activate = 1, vertical_merge_algorithm_min_columns_to_activate = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4581', () => {
    const query = `create table t engine = Memory as with cte as (select * from numbers(10)) select * from cte;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4582', () => {
    const query = `create view view1 as with t as (select number n from numbers(3)) select n from t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4583', () => {
    const query = `CREATE TABLE t (
\`id\` UInt64,
\`id2\` UInt64,
\`id3\` UInt64,
PROJECTION t_normal
(
SELECT
id,
id2,
id3
ORDER BY
id2,
id,
id3
),
PROJECTION t_agg
(
SELECT
sum(id3)
GROUP BY id2
)
)
ENGINE = MergeTree
ORDER BY id
SETTINGS index_granularity = 8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4584', () => {
    const query = `create table data_proj_order_by_incomp (t UInt64) ENGINE MergeTree() order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4585', () => {
    const query = `create table data_proj_order_by_comp (t UInt64, projection tSort (select * order by t)) ENGINE MergeTree() order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4586', () => {
    const query = `create table projection_test (dt DateTime, cost Int64, projection p (select toStartOfMinute(dt) dt_m, sum(cost) group by dt_m)) engine MergeTree partition by toDate(dt) order by dt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4587', () => {
    const query = `create table projection_test_d (dt DateTime, cost Int64) engine Distributed(test_cluster_two_shards, currentDatabase(), projection_test);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4588', () => {
    const query = `create table projection_without_key (key UInt32, PROJECTION x (SELECT sum(key) group by key % 3)) engine MergeTree order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4589', () => {
    const query = `CREATE TABLE projection_test__fuzz_0 (\`sum(block_count)\` UInt64, \`domain_alias\` UInt64 ALIAS length(domain), \`datetime\` DateTime, \`domain\` LowCardinality(String), \`x_id\` String, \`y_id\` String, \`block_count\` Int64, \`retry_count\` Int64, \`duration\` Decimal(76, 13), \`kbytes\` LowCardinality(Int64), \`buffer_time\` Int64, \`first_time\` UInt256, \`total_bytes\` LowCardinality(Nullable(UInt64)), \`valid_bytes\` Nullable(UInt64), \`completed_bytes\` Nullable(UInt64), \`fixed_bytes\` LowCardinality(Nullable(UInt64)), \`force_bytes\` Int256, PROJECTION p (SELECT toStartOfMinute(datetime) AS dt_m, countIf(first_time = 0) / count(), avg((kbytes * 8) / duration), count(), sum(block_count) / sum(duration), avg(block_count / duration), sum(buffer_time) / sum(duration), avg(buffer_time / duration), sum(valid_bytes) / sum(total_bytes), sum(completed_bytes) / sum(total_bytes), sum(fixed_bytes) / sum(total_bytes), sum(force_bytes) / sum(total_bytes), sum(valid_bytes) / sum(total_bytes), sum(retry_count) / sum(duration), avg(retry_count / duration), countIf(block_count > 0) / count(), countIf(first_time = 0) / count(), uniqHLL12(x_id), uniqHLL12(y_id) GROUP BY dt_m, domain)) ENGINE = MergeTree PARTITION BY toDate(datetime) ORDER BY (toStartOfTenMinutes(datetime), domain) SETTINGS index_granularity_bytes = 10000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4590', () => {
    const query = `create table projection_test (\`sum(block_count)\` UInt64, domain_alias UInt64 alias length(domain), datetime DateTime, domain LowCardinality(String), x_id String, y_id String, block_count Int64, retry_count Int64, duration Int64, kbytes Int64, buffer_time Int64, first_time Int64, total_bytes Nullable(UInt64), valid_bytes Nullable(UInt64), completed_bytes Nullable(UInt64), fixed_bytes Nullable(UInt64), force_bytes Nullable(UInt64), projection p (select toStartOfMinute(datetime) dt_m, countIf(first_time = 0) / count(), avg((kbytes * 8) / duration), count(), sum(block_count) / sum(duration), avg(block_count / duration), sum(buffer_time) / sum(duration), avg(buffer_time / duration), sum(valid_bytes) / sum(total_bytes), sum(completed_bytes) / sum(total_bytes), sum(fixed_bytes) / sum(total_bytes), sum(force_bytes) / sum(total_bytes), sum(valid_bytes) / sum(total_bytes), sum(retry_count) / sum(duration), avg(retry_count / duration), countIf(block_count > 0) / count(), countIf(first_time = 0) / count(), uniqHLL12(x_id), uniqHLL12(y_id) group by dt_m, domain)) engine MergeTree partition by toDate(datetime) order by toStartOfTenMinutes(datetime) settings index_granularity_bytes = 10000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4591', () => {
    const query = `create row policy filter on projection_test using (domain = 'non_existing_domain') to all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4592', () => {
    const query = `create table projection_without_key (key UInt32, PROJECTION x (SELECT max(key))) engine MergeTree order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4593', () => {
    const query = `CREATE TABLE sales (DATE_SOLD DateTime64(3, 'UTC'), PRODUCT_ID Nullable(String)) Engine MergeTree() PARTITION BY toYYYYMM(DATE_SOLD) ORDER BY DATE_SOLD;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4594', () => {
    const query = `create table t (x UInt32) engine = MergeTree order by tuple() settings index_granularity = 8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4595', () => {
    const query = `create table t (s UInt16, l UInt16, projection p (select s, l order by l)) engine MergeTree order by s;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4596', () => {
    const query = `create table mt (id1 Int8, id2 Int8) Engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4597', () => {
    const query = `create table j (id1 Int8, id2 Int8, projection p (select id1, id2 order by id2)) Engine=MergeTree order by id1 settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4598', () => {
    const query = `create table foo(bar String, projection p (select * apply groupUniqArray(100))) engine MergeTree order by bar;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4599', () => {
    const query = `CREATE TABLE aggregate_functions_null_for_empty (\`x\` UInt32, \`y\` UInt64, PROJECTION p (SELECT sum(y))) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4600', () => {
    const query = `CREATE TABLE transform_null_in (\`x\` UInt32, \`y\` UInt64, PROJECTION p (SELECT sum(y in (1,2,3)))) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4601', () => {
    const query = `CREATE TABLE legacy_column_name_of_tuple_literal (\`x\` UInt32, \`y\` UInt64, PROJECTION p (SELECT sum(y in (1,2,3)))) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4602', () => {
    const query = `create table t (i int, j int, projection p (select i order by i)) engine MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4603', () => {
    const query = `create table t (c1 Int64, c2 String, c3 DateTime, c4 Int8, c5 String, c6 String, c7 String, c8 String, c9 String, c10 String, c11 String, c12 String, c13 Int8, c14 Int64, c15 String, c16 String, c17 String, c18 Int64, c19 Int64, c20 Int64) engine MergeTree order by c18 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4604', () => {
    const query = `CREATE TABLE t(a UInt32, b UInt32) ENGINE = MergeTree PARTITION BY a ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4605', () => {
    const query = `CREATE ROW POLICY OR REPLACE rp ON t FOR SELECT USING 0 TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4606', () => {
    const query = `create table t (x Int32, codectest Int32) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4607', () => {
    const query = `create table x (i int) engine MergeTree order by i settings index_granularity = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4608', () => {
    const query = `create table tp (x Int32, y Int32, projection p (select x, y order by x)) engine = MergeTree order by y settings min_rows_for_wide_part = 4, min_bytes_for_wide_part = 32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4609', () => {
    const query = `create table tp (p Date, k UInt64, v1 UInt64, v2 Int64, projection p1 ( select p, sum(k), sum(v1), sum(v2) group by p) ) engine = MergeTree partition by toYYYYMM(p) order by k settings min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4610', () => {
    const query = `create table tp (x int, projection p (select sum(x))) engine = MergeTree order by x settings min_rows_for_wide_part = 2, min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4611', () => {
    const query = `create table z (pk Int64, d Date, id UInt64, c UInt64) Engine MergeTree partition by d order by pk settings ratio_of_defaults_for_sparse_serialization = 1.0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4612', () => {
    const query = `create table proj ( bool_value UInt8,
zero_integer_value Int32,
integer_value Int32,
float_value Float32,
datetime_value DateTime,
string_value String,
projection test_projection (
select
toStartOfDay (toDateTime (datetime_value)) as Day,
datetime_value,
float_value,
count(
distinct if(zero_integer_value = 1, string_value, NULL)
)
group by
Day,
datetime_value,
float_value
)
) engine MergeTree
partition by
toDate (datetime_value)
order by
bool_value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4613', () => {
    const query = `CREATE TABLE proj(date Date, PROJECTION maxdate( SELECT max(date) GROUP BY date )) ENGINE = MergeTree ORDER BY tuple() as select toDate('2012-10-24')-number%100 from numbers(1e2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4614', () => {
    const query = `CREATE TABLE t (\`key\` UInt32, \`created_at\` Date, \`value\` UInt32, PROJECTION xxx (SELECT key, created_at, sum(value) GROUP BY key, created_at)) ENGINE = MergeTree PARTITION BY toYYYYMM(created_at) ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4615', () => {
    const query = `create table x (i int) engine MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4616', () => {
    const query = `create table x (i UInt64, j UInt64, k UInt64, projection agg (select sum(j), avg(k) group by i), projection norm (select j, k order by i)) engine MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4617', () => {
    const query = `create table if not exists flows (SrcAS UInt32, Bytes UInt64) engine MergeTree() order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4618', () => {
    const query = `create table t (i int, j int, k int, projection p (select * order by j)) engine MergeTree order by i settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4619', () => {
    const query = `create table test (name String, time Int64) engine MergeTree order by time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4620', () => {
    const query = `create table tp (type Int32, eventcnt UInt64, projection p (select sum(eventcnt), type group by type order by sum(eventcnt))) engine = MergeTree order by type; -- { serverError ILLEGAL_PROJECTION } drop table if exists tp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4621', () => {
    const query = `create table tp_1 (x Int32, y Int32, projection p (select x, y order by x)) engine = ReplicatedMergeTree('/clickhouse/tables/{shard}/01710_projection_fetch_' || currentDatabase(), '1_{replica}') order by y settings min_rows_for_wide_part = 4, min_bytes_for_wide_part = 32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4622', () => {
    const query = `create table tp_2 (x Int32, y Int32, projection p (select x, y order by x)) engine = ReplicatedMergeTree('/clickhouse/tables/{shard}/01710_projection_fetch_' || currentDatabase(), '2_{replica}') order by y settings min_rows_for_wide_part = 4, min_bytes_for_wide_part = 32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4623', () => {
    const query = `CREATE TABLE agg (
\`key\` UInt32,
\`ts\` DateTime,
\`value\` UInt32,
PROJECTION aaaa
(
SELECT
ts,
key,
sum(value)
GROUP BY ts, key
)
)
ENGINE = MergeTree
ORDER BY (key, ts);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4624', () => {
    const query = `create table tp (x Int32, y Int32, projection p (select x, y order by x)) engine = MergeTree order by y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4625', () => {
    const query = `create table t (i int, j int, projection x (select * order by j)) engine MergeTree partition by i order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4626', () => {
    const query = `create table x (pk int, arr Array(int), projection p (select arr order by pk)) engine MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4627', () => {
    const query = `CREATE TABLE normal (
\`key\` UInt32,
\`ts\` DateTime,
\`value\` UInt32,
PROJECTION aaaa
(
SELECT
ts,
key,
value
ORDER BY ts, key
)
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4628', () => {
    const query = `CREATE TABLE agg (
\`key\` UInt32,
\`ts\` DateTime,
\`value\` UInt32,
PROJECTION aaaa
(
SELECT
ts,
key,
sum(value)
GROUP BY ts, key
)
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4629', () => {
    const query = `create table atf_p (x UInt64) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4630', () => {
    const query = `create table data_order_by_proj_incomp (t UInt64) ENGINE MergeTree() order by t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4631', () => {
    const query = `create table data_order_by_proj_comp (t UInt64, projection tSort (select * order by t)) ENGINE MergeTree() order by t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4632', () => {
    const query = `CREATE TABLE t (id UInt64, id2 UInt64, id3 UInt64, PROJECTION t_reverse (SELECT id, id2, id3 ORDER BY id2, id, id3)) ENGINE = MergeTree ORDER BY (id) settings index_granularity = 4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4633', () => {
    const query = `CREATE TABLE t1 (id UInt32, s String) Engine = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4634', () => {
    const query = `CREATE TABLE t2 (id1 UInt32, id2 UInt32) Engine = MergeTree ORDER BY id1 SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4635', () => {
    const query = `CREATE TABLE test (
uuid FixedString(16),
id int,
ns FixedString(16),
dt DateTime64(6),
)
ENGINE = MergeTree
ORDER BY (id, dt, uuid);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4636', () => {
    const query = `create table t (i int, j int) engine MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4637', () => {
    const query = `CREATE TABLE test (type Enum('x'), s String) ENGINE = MergeTree ORDER BY s PARTITION BY type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4638', () => {
    const query = `create table t (n int, s String) engine MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4639', () => {
    const query = `CREATE TABLE test (\`val\` LowCardinality(Nullable(String))) ENGINE = MergeTree ORDER BY tuple() SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4640', () => {
    const query = `create table t (n int) engine MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4641', () => {
    const query = `create table d (i int, j int) engine MergeTree partition by i % 2 order by tuple() settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4642', () => {
    const query = `create table has_final_mark (i int, j int) engine MergeTree partition by i % 2 order by j settings index_granularity = 10, write_final_mark = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4643', () => {
    const query = `create table mixed_final_mark (i int, j int) engine MergeTree partition by i % 2 order by j settings index_granularity = 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4644', () => {
    const query = `create table t (server_date Date, something String) engine MergeTree partition by (toYYYYMM(server_date), server_date) order by (server_date, something);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4645', () => {
    const query = `create table d (dt DateTime, j int) engine MergeTree partition by (toDate(dt), ceiling(j), toDate(dt), CEILING(j)) order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4646', () => {
    const query = `create table test (id Int64, d Int64, projection dummy(select * order by id)) engine MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4647', () => {
    const query = `create table tp (d1 Int32, d2 Int32, eventcnt Int64, projection p (select sum(eventcnt) group by d1)) engine = MergeTree order by (d1, d2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4648', () => {
    const query = `CREATE TABLE r ( x String,
a LowCardinality(String),
q AggregateFunction(quantilesTiming(0.5, 0.95, 0.99), Int64),
s Int64,
PROJECTION p
(SELECT a, quantilesTimingMerge(0.5, 0.95, 0.99)(q), sum(s) GROUP BY a)
) Engine=SummingMergeTree order by (x, a)
SETTINGS deduplicate_merge_projection_mode = 'drop';  -- should set it to rebuild once projection is supported with SummingMergeTree
insert into r
select number%100 x,
'x' a,
quantilesTimingState(0.5, 0.95, 0.99)(number::Int64) q,
sum(1) s
from numbers(1000)
group by x,a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4649', () => {
    const query = `CREATE TABLE t0 (c0 Int16, projection h (SELECT min(c0), max(c0), count() GROUP BY -c0)) ENGINE = MergeTree ORDER BY ();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4650', () => {
    const query = `create table t1 (c0 Int32) engine = MergeTree order by sin(c0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4651', () => {
    const query = `create table tp (type Int32, device UUID, cnt UInt64) engine = MergeTree order by (type, device);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4652', () => {
    const query = `create table test(dim1 String, dim2 String, projection p1 (select dim1, dim2, count() group by dim1, dim2)) engine MergeTree order by dim1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4653', () => {
    const query = `create table data_01709 (i int) engine MergeTree order by i settings old_parts_lifetime = 10000000000, min_bytes_for_wide_part = 0, inactive_parts_to_throw_insert = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4654', () => {
    const query = `CREATE TABLE X (id Int) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4655', () => {
    const query = `CREATE TABLE Y (id Int) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4656', () => {
    const query = `create table x(i int, index mm LOG2(i) type minmax granularity 1, projection p (select MAX(i))) engine ReplicatedMergeTree('/clickhouse/tables/{database}/x', 'r') order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4657', () => {
    const query = `CREATE DATABASE sqllt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4658', () => {
    const query = `CREATE TABLE sqllt.table (
i UInt8, s String
)
ENGINE = MergeTree PARTITION BY tuple() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4659', () => {
    const query = `CREATE VIEW sqllt.view AS SELECT i, s FROM sqllt.table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4660', () => {
    const query = `CREATE DICTIONARY sqllt.dictionary (key UInt64, value UInt64) PRIMARY KEY key SOURCE(CLICKHOUSE(DB 'sqllt' TABLE 'table' HOST 'localhost' PORT 9001)) LIFETIME(0) LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4661', () => {
    const query = `CREATE USER sqllt_user IDENTIFIED WITH PLAINTEXT_PASSWORD BY 'password';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4662', () => {
    const query = `CREATE ROLE sqllt_role;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4663', () => {
    const query = `CREATE POLICY sqllt_policy ON sqllt.table, sqllt.view, sqllt.dictionary AS PERMISSIVE TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4664', () => {
    const query = `CREATE POLICY sqllt_row_policy ON sqllt.table, sqllt.view, sqllt.dictionary AS PERMISSIVE TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4665', () => {
    const query = `CREATE QUOTA sqllt_quota KEYED BY user_name TO sqllt_role;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4666', () => {
    const query = `CREATE SETTINGS PROFILE sqllt_settings_profile SETTINGS interactive_delay = 200000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4667', () => {
    const query = `create table t(i8 Int8, i16 Int16, i32 Int32, i64 Int64) engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4668', () => {
    const query = `CREATE TABLE IF NOT EXISTS agg_table (
time DateTime CODEC(DoubleDelta, LZ4),
xxx String,
two_values Tuple(Array(UInt16), UInt32),
agg_simple SimpleAggregateFunction(sum, UInt64),
agg SimpleAggregateFunction(sumMap, Tuple(Array(Int16), Array(UInt64)))
)
ENGINE = AggregatingMergeTree()
ORDER BY (xxx, time);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4669', () => {
    const query = `create table tp_1 (x Int32, y Int32, projection p (select x, y order by x)) engine = MergeTree order by y partition by intDiv(y, 100) settings old_parts_lifetime=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4670', () => {
    const query = `CREATE TABLE sample_table ( key UInt64
)
ENGINE ReplicatedMergeTree('/clickhouse/{database}/01700_system_zookeeper_path_in/{shard}', '{replica}')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4671', () => {
    const query = `CREATE TABLE 01686_test (key UInt64, value String) Engine=EmbeddedRocksDB PRIMARY KEY(key) SETTINGS optimize_for_bulk_insert = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4672', () => {
    const query = `CREATE TABLE x AS system.numbers ENGINE = MergeTree ORDER BY number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4673', () => {
    const query = `CREATE TABLE y AS system.numbers ENGINE = MergeTree ORDER BY number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4674', () => {
    const query = `CREATE TABLE x_dist as x ENGINE = Distributed('test_cluster_two_shards', currentDatabase(), x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4675', () => {
    const query = `CREATE TABLE y_dist as y ENGINE = Distributed('test_cluster_two_shards_localhost', currentDatabase(), y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4676', () => {
    const query = `CREATE DATABASE 01681_database_for_flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4677', () => {
    const query = `CREATE TABLE 01681_database_for_flat_dictionary.simple_key_simple_attributes_source_table (
id UInt64,
value_first String,
value_second String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4678', () => {
    const query = `CREATE DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes (
id UInt64,
value_first String DEFAULT 'value_first_default',
value_second String DEFAULT 'value_second_default'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_simple_attributes_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4679', () => {
    const query = `CREATE TABLE 01681_database_for_flat_dictionary.simple_key_complex_attributes_source_table (
id UInt64,
value_first String,
value_second Nullable(String)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4680', () => {
    const query = `CREATE DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes (
id UInt64,
value_first String DEFAULT 'value_first_default',
value_second Nullable(String) DEFAULT 'value_second_default'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_complex_attributes_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4681', () => {
    const query = `CREATE TABLE 01681_database_for_flat_dictionary.simple_key_hierarchy_table (
id UInt64,
parent_id UInt64
) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4682', () => {
    const query = `CREATE DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_hierarchy (
id UInt64,
parent_id UInt64 HIERARCHICAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_hierarchy_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4683', () => {
    const query = `CREATE TABLE tmp_01683 (n Int8) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4684', () => {
    const query = `CREATE TABLE dist_01683 (n UInt64) Engine=Distributed(test_cluster_two_shards, currentDatabase(), tmp_01683, n);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4685', () => {
    const query = `CREATE TABLE encryption_test (i Int, s String Codec(AES_128_GCM_SIV)) ENGINE = MergeTree ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4686', () => {
    const query = `CREATE TABLE encryption_test (i Int, s String Codec(AES_256_GCM_SIV)) ENGINE = MergeTree ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4687', () => {
    const query = `CREATE DATABASE 01682_database_for_cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4688', () => {
    const query = `CREATE TABLE 01682_database_for_cache_dictionary.complex_key_simple_attributes_source_table (
id UInt64,
id_key String,
value_first String,
value_second String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4689', () => {
    const query = `CREATE DICTIONARY 01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes (
id UInt64,
id_key String,
value_first String DEFAULT 'value_first_default',
value_second String DEFAULT 'value_second_default'
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_simple_attributes_source_table' DB '01682_database_for_cache_dictionary'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(COMPLEX_KEY_CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4690', () => {
    const query = `CREATE TABLE 01682_database_for_cache_dictionary.complex_key_complex_attributes_source_table (
id UInt64,
id_key String,
value_first String,
value_second Nullable(String)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4691', () => {
    const query = `CREATE DICTIONARY 01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes (
id UInt64,
id_key String,
value_first String DEFAULT 'value_first_default',
value_second Nullable(String) DEFAULT 'value_second_default'
)
PRIMARY KEY id, id_key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_complex_attributes_source_table' DB '01682_database_for_cache_dictionary'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(COMPLEX_KEY_CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4692', () => {
    const query = `CREATE DATABASE 01681_database_for_cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4693', () => {
    const query = `CREATE TABLE 01681_database_for_cache_dictionary.simple_key_simple_attributes_source_table (
id UInt64,
value_first String,
value_second String
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4694', () => {
    const query = `CREATE DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes (
id UInt64,
value_first String DEFAULT 'value_first_default',
value_second String DEFAULT 'value_second_default'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_simple_attributes_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(CACHE(SIZE_IN_CELLS 10))
SETTINGS(dictionary_use_async_executor=1, max_threads=8)
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4695', () => {
    const query = `CREATE TABLE 01681_database_for_cache_dictionary.simple_key_complex_attributes_source_table (
id UInt64,
value_first String,
value_second Nullable(String)
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4696', () => {
    const query = `CREATE DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes (
id UInt64,
value_first String DEFAULT 'value_first_default',
value_second Nullable(String) DEFAULT 'value_second_default'
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_complex_attributes_source_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4697', () => {
    const query = `CREATE TABLE 01681_database_for_cache_dictionary.simple_key_hierarchy_table (
id UInt64,
parent_id UInt64
) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4698', () => {
    const query = `CREATE DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy (
id UInt64,
parent_id UInt64 HIERARCHICAL
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_hierarchy_table'))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4699', () => {
    const query = `CREATE TABLE bloom_filter_nullable_index (
order_key UInt64,
str Nullable(String),
INDEX idx (str) TYPE bloom_filter GRANULARITY 1
)
ENGINE = MergeTree() 
ORDER BY order_key SETTINGS index_granularity = 6, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4700', () => {
    const query = `CREATE TABLE nullable_string_value (value Nullable(String)) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4701', () => {
    const query = `CREATE TABLE date_table (
CountryID UInt64,
StartDate Date,
EndDate Date,
Tax Float64
)
ENGINE = MergeTree()
ORDER BY CountryID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4702', () => {
    const query = `CREATE DICTIONARY range_dictionary (
CountryID UInt64,
StartDate Date,
EndDate Date,
Tax Float64 DEFAULT 0.2
)
PRIMARY KEY CountryID
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'date_table' DB currentDatabase()))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(RANGE_HASHED())
RANGE(MIN StartDate MAX EndDate)
SETTINGS(dictionary_use_async_executor=1, max_threads=8)
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4703', () => {
    const query = `CREATE TABLE date_table (
CountryID UInt64,
StartDate Date,
EndDate Date,
Tax Nullable(Float64)
)
ENGINE = MergeTree()
ORDER BY CountryID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4704', () => {
    const query = `CREATE DICTIONARY range_dictionary_nullable (
CountryID UInt64,
StartDate Date,
EndDate Date,
Tax Nullable(Float64) DEFAULT 0.2
)
PRIMARY KEY CountryID
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'date_table' DB currentDatabase()))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(RANGE_HASHED())
RANGE(MIN StartDate MAX EndDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4705', () => {
    const query = `CREATE DATABASE test_01676;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4706', () => {
    const query = `CREATE TABLE test_01676.dict_data (key UInt64, value UInt64) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4707', () => {
    const query = `CREATE DICTIONARY test_01676.dict (key UInt64, value UInt64) PRIMARY KEY key SOURCE(CLICKHOUSE(DB 'test_01676' TABLE 'dict_data' HOST '127.0.0.1' PORT tcpPort())) LIFETIME(0) LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4708', () => {
    const query = `CREATE TABLE test_01676.table (x UInt64, y UInt64 DEFAULT dictGet('test_01676.dict', 'value', x)) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4709', () => {
    const query = `create table tab  (x UInt64, \`arr.a\` Array(UInt64), \`arr.b\` Array(UInt64)) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4710', () => {
    const query = `CREATE TABLE defaults (
stringColumn String
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4711', () => {
    const query = `CREATE TABLE t_filter(s String, a Array(FixedString(3)), u UInt64, f UInt8) ENGINE = MergeTree ORDER BY u;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4712', () => {
    const query = `CREATE TABLE table1(a String, b Date) ENGINE MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4713', () => {
    const query = `CREATE TABLE table2(c String, a String, d Date) ENGINE MergeTree order by c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4714', () => {
    const query = `CREATE TABLE group_bitmap_data_test (
\`pickup_date\` Date,
\`city_id\` UInt32,
\`uid\` UInt32
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4715', () => {
    const query = `CREATE TABLE test( 	n1 Int32,
	n2 UInt32,
	n3 Float32,
	n4 Float64,
	n5 Decimal32(5)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4716', () => {
    const query = `CREATE TABLE neighbor_test (
\`rowNr\` UInt8,
\`val_string\` String,
\`val_low\` LowCardinality(String)
)
ENGINE = MergeTree
PARTITION BY tuple()
ORDER BY rowNr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4717', () => {
    const query = `create table data_01670 (key Int) engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4718', () => {
    const query = `create table dist_01670 (key Int) engine=Distributed(test_shard_localhost, currentDatabase(), data_01670) settings bytes_to_throw_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4719', () => {
    const query = `CREATE DATABASE database_dictionary_test_key_expression;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4720', () => {
    const query = `CREATE TABLE database_dictionary_test_key_expression.test_for_dictionary (value String) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4721', () => {
    const query = `CREATE DICTIONARY database_dictionary_test_key_expression.test_query_log_dictionary_simple (
\`value_id\` UInt64 EXPRESSION cityHash64(value),
\`value\` String
)
PRIMARY KEY value_id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'test_for_dictionary' DB 'database_dictionary_test_key_expression'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4722', () => {
    const query = `CREATE DICTIONARY database_dictionary_test_key_expression.test_query_log_dictionary_complex (
\`value_id\` UInt64 EXPRESSION cityHash64(value),
\`value_length\` UInt64 EXPRESSION length(value),
\`value\` String
)
PRIMARY KEY value_id, value_length
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'test_for_dictionary' DB 'database_dictionary_test_key_expression'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(COMPLEX_KEY_HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4723', () => {
    const query = `CREATE TEMPORARY TABLE test ("\\\\" String DEFAULT '\\r\\n\\t\\\\' || ' ');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4724', () => {
    const query = `CREATE TABLE test (x UInt64, "\\\\" String DEFAULT '\\r\\n\\t\\\\' || ' ') ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4725', () => {
    const query = `CREATE TABLE test_r1 (x UInt64, "\\\\" String DEFAULT '\\r\\n\\t\\\\' || ' ') ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_01669', 'r1') ORDER BY "\\\\";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4726', () => {
    const query = `CREATE TABLE test_r2 (x UInt64, "\\\\" String DEFAULT '\\r\\n\\t\\\\' || ' ') ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_01669', 'r2') ORDER BY "\\\\";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4727', () => {
    const query = `CREATE TABLE test_r1 AS test ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_01666', 'r1') ORDER BY "\\\\" SETTINGS min_bytes_for_wide_part = '100G';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4728', () => {
    const query = `CREATE TABLE test_r2 AS test ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_01666', 'r2') ORDER BY "\\\\" SETTINGS min_bytes_for_wide_part = '100G';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4729', () => {
    const query = `CREATE TABLE data_01655 (key Int) Engine=MergeTree() ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4730', () => {
    const query = `CREATE TABLE tab (
d        Date,
dt       DateTime('UTC'),
dt64     DateTime64(6, 'UTC'),
str_d    String,
str_dt   String,
str_dt64 String,
invalid  String
) ENGINE MergeTree ORDER BY dt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4731', () => {
    const query = `create table tab2 (a2 Int32, b2 Int32) engine = MergeTree order by a2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4732', () => {
    const query = `create table tab3 (a3 Int32, b3 Int32) engine = MergeTree order by a3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4733', () => {
    const query = `CREATE TABLE data_01660 (key Int) Engine=MergeTree() ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4734', () => {
    const query = `CREATE TABLE t ( a String ) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4735', () => {
    const query = `CREATE VIEW t_v AS SELECT * FROM t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4736', () => {
    const query = `create table tab1 (a1 Int32, b1 Int32) engine = MergeTree order by a1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4737', () => {
    const query = `CREATE database test_query_log_factories_info1 ENGINE=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4738', () => {
    const query = `CREATE OR REPLACE TABLE test_query_log_factories_info1.memory_table (id BIGINT, date DATETIME) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4739', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_sequenceNextNode_Nullable (dt DateTime, id int, action Nullable(String)) ENGINE = MergeTree() PARTITION BY dt ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4740', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_sequenceNextNode (dt DateTime, id int, action String) ENGINE = MergeTree() PARTITION BY dt ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4741', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_base_condition (dt DateTime, id int, action String, referrer String) ENGINE = MergeTree() PARTITION BY dt ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4742', () => {
    const query = `CREATE TABLE table_key (keycol UInt16) ENGINE = MergeTree() ORDER BY (keycol) PARTITION BY tuple() as SELECT * FROM VALUES ( (1), (2), (3) );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4743', () => {
    const query = `CREATE TABLE table_with_enum (keycol UInt16, enum_col Enum8('First' = 1,'Second' = 2)) ENGINE = MergeTree() ORDER BY (keycol) PARTITION BY tuple() 
as SELECT * FROM VALUES ( (2, 'Second'), (4, 'Second') );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4744', () => {
    const query = `CREATE TABLE ttl_old_syntax (d Date, i Int) ENGINE = MergeTree(d, i, 8291);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4745', () => {
    const query = `CREATE TABLE lc_null_int8_defnull (val LowCardinality(Nullable(Int8)) DEFAULT NULL) ENGINE = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4746', () => {
    const query = `create table table_map (a Map(String, String), b String, c Array(String), d Array(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4747', () => {
    const query = `create table table_map (a Map(UInt8, Int), b UInt8, c UInt32, d Array(String), e Array(String)) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4748', () => {
    const query = `CREATE TABLE perf_lc_num(        num UInt8,        arr Array(LowCardinality(Int64)) default [num]        ) ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4749', () => {
    const query = `CREATE TABLE perf_lc_num(        num UInt8,        arr Array(LowCardinality(Int64)) default [num]        ) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4750', () => {
    const query = `CREATE TABLE perf_lc_num(        num UInt8,        arr Array(LowCardinality(Int64)) default [num]        ) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4751', () => {
    const query = `CREATE TABLE xp (\`A\` Date, \`B\` Int64, \`S\` String) ENGINE = MergeTree PARTITION BY toYYYYMM(A) ORDER BY B;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4752', () => {
    const query = `CREATE TABLE xp_d AS xp ENGINE = Distributed(test_shard_localhost, currentDatabase(), xp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4753', () => {
    const query = `CREATE TABLE trace_log (
\`event_date\` Date,
\`event_time\` DateTime,
\`event_time_microseconds\` DateTime64(6),
\`timestamp_ns\` UInt64,
\`revision\` UInt32,
\`trace_type\` Enum8('Real' = 0, 'CPU' = 1, 'Memory' = 2, 'MemorySample' = 3),
\`thread_id\` UInt64,
\`query_id\` String,
\`trace\` Array(UInt64),
\`size\` Int64
)
ENGINE = MergeTree
PARTITION BY toYYYYMM(event_date)
ORDER BY (event_date, event_time)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4754', () => {
    const query = `CREATE TABLE test_01640(i Int64, d Date, s String) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/{shard}/tables/test_01640','{replica}')
PARTITION BY toYYYYMM(d) ORDER BY i
SETTINGS allow_remote_fs_zero_copy_replication=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4755', () => {
    const query = `CREATE TABLE restore_01640(i Int64, d Date, s String) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/{shard}/tables/restore_01640','{replica}')
PARTITION BY toYYYYMM(d) ORDER BY i
SETTINGS allow_remote_fs_zero_copy_replication=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4756', () => {
    const query = `CREATE TABLE partitioned_table ( key UInt64,
partitioner UInt8,
value String
)
ENGINE ReplicatedMergeTree('/clickhouse/{database}/01650_drop_part_and_deduplication_partitioned_table', '1')
ORDER BY key
PARTITION BY partitioner;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4757', () => {
    const query = `create table alias_key_condition ( i int, j int ) engine MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4758', () => {
    const query = `CREATE TABLE mutations_and_escaping_1648 (d Date, e Enum8('foo'=1, 'bar'=2)) Engine = MergeTree(d, (d), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4759', () => {
    const query = `CREATE TABLE data_01646 (x Date, s String) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01646/data_01646', 'r') ORDER BY s PARTITION BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4760', () => {
    const query = `create table t( s String ) Engine=Memory as select arrayJoin (['a','b','c']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4761', () => {
    const query = `CREATE TABLE test_alias(\`a\` Int64, \`b\` Int64, \`c\` Int64, \`day\` Date, \`rtime\` DateTime) ENGINE = Memory as select 0, 0, 0, '2022-01-01', 0 from zeros(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4762', () => {
    const query = `CREATE TABLE trend (
\`event_date\` Date,
\`user_id\` Int32,
\`timestamp\` DateTime,
\`eventID\` Int32,
\`product\` String
)
ENGINE = MergeTree()
PARTITION BY toYYYYMM(event_date)
ORDER BY user_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4763', () => {
    const query = `create table data_01643 (key Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4764', () => {
    const query = `create table dist_01643 as data_01643 engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01643, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4765', () => {
    const query = `create table dist_01643 as data_01643 engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01643, key) settings fsync_after_insert=1, fsync_directories=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4766', () => {
    const query = `create table rep_fsync_r1 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r1') order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4767', () => {
    const query = `create table rep_fsync_r2 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r2') order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4768', () => {
    const query = `create table rep_fsync_r1 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r1') order by key settings min_rows_for_wide_part=2, fsync_after_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4769', () => {
    const query = `create table rep_fsync_r2 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r2') order by key settings min_rows_for_wide_part=2, fsync_after_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4770', () => {
    const query = `create table rep_fsync_r1 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r1') order by key settings min_rows_for_wide_part=2, fsync_after_insert=1, fsync_part_directory=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4771', () => {
    const query = `create table rep_fsync_r2 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r2') order by key settings min_rows_for_wide_part=2, fsync_after_insert=1, fsync_part_directory=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4772', () => {
    const query = `create table rep_fsync_r1 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r1') order by key settings min_bytes_for_wide_part=0, fsync_after_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4773', () => {
    const query = `create table rep_fsync_r2 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r2') order by key settings min_bytes_for_wide_part=0, fsync_after_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4774', () => {
    const query = `create table rep_fsync_r1 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r1') order by key settings min_bytes_for_wide_part=0, fsync_after_insert=1, fsync_part_directory=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4775', () => {
    const query = `create table rep_fsync_r2 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r2') order by key settings min_bytes_for_wide_part=0, fsync_after_insert=1, fsync_part_directory=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4776', () => {
    const query = `create table rep_fsync_r1 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r1') order by key settings min_bytes_for_wide_part=0, fsync_part_directory=1, enable_vertical_merge_algorithm=1, vertical_merge_algorithm_min_rows_to_activate=0, vertical_merge_algorithm_min_columns_to_activate=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4777', () => {
    const query = `create table rep_fsync_r2 (key Int) engine=ReplicatedMergeTree('/clickhouse/tables/{database}/rep_fsync', 'r2') order by key settings min_bytes_for_wide_part=0, fsync_part_directory=1, enable_vertical_merge_algorithm=1, vertical_merge_algorithm_min_rows_to_activate=0, vertical_merge_algorithm_min_columns_to_activate=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4778', () => {
    const query = `create table data_01643 (key Int) engine=MergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4779', () => {
    const query = `create table data_01643 (key Int) engine=MergeTree() order by key settings min_rows_for_wide_part=2, fsync_after_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4780', () => {
    const query = `create table data_01643 (key Int) engine=MergeTree() order by key settings min_rows_for_wide_part=2, fsync_after_insert=1, fsync_part_directory=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4781', () => {
    const query = `create table data_01643 (key Int) engine=MergeTree() order by key settings min_bytes_for_wide_part=0, fsync_after_insert=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4782', () => {
    const query = `create table data_01643 (key Int) engine=MergeTree() order by key settings min_bytes_for_wide_part=0, fsync_after_insert=1, fsync_part_directory=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4783', () => {
    const query = `create table data_01643 (key Int) engine=MergeTree() order by key settings min_bytes_for_wide_part=0, fsync_part_directory=1, enable_vertical_merge_algorithm=1, vertical_merge_algorithm_min_rows_to_activate=0, vertical_merge_algorithm_min_columns_to_activate=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4784', () => {
    const query = `create table data_01641 (key Int, value String) engine=MergeTree order by (key, repeat(value, 40)) settings old_parts_lifetime=0, min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4785', () => {
    const query = `CREATE TABLE adaptive_table( key UInt64,
value String
) ENGINE MergeTree()
ORDER BY key
SETTINGS
index_granularity_bytes=1048576,
min_bytes_for_wide_part=0,
old_parts_lifetime=0,
index_granularity=8192
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4786', () => {
    const query = `CREATE TABLE local (x UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4787', () => {
    const query = `CREATE TABLE distributed AS local ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), local, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4788', () => {
    const query = `CREATE TABLE t (\`item_id\` UInt64, \`price_sold\` Float32, \`date\` Date) ENGINE = MergeTree ORDER BY item_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4789', () => {
    const query = `CREATE TABLE open_events_tmp (\`APIKey\` UInt32, \`EventDate\` Date) ENGINE = MergeTree PARTITION BY toMonday(EventDate) ORDER BY (APIKey, EventDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4790', () => {
    const query = `CREATE TABLE tracking_events_tmp (\`APIKey\` UInt32, \`EventDate\` Date) ENGINE = MergeTree PARTITION BY toYYYYMM(EventDate) ORDER BY (APIKey, EventDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4791', () => {
    const query = `CREATE TABLE sum_map_overflow(events Array(UInt8), counts Array(UInt8)) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4792', () => {
    const query = `create table p(d Date, i int, j int) engine MergeTree partition by d order by i settings max_partitions_to_read = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4793', () => {
    const query = `create table dt_overflow(d Date, i int) engine MergeTree partition by d order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4794', () => {
    const query = `create table test_smt (id UInt32, sMap SimpleAggregateFunction(sumMap, Tuple(Array(UInt8), Array(Int64))), aMap AggregateFunction(sumMap, Tuple(Array(UInt8), Array(Int64)))) engine SummingMergeTree partition by tuple() order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4795', () => {
    const query = `create table simple_agf_summing_mt (a Int64, grp_aggreg AggregateFunction(groupUniqArrayArray, Array(UInt64)), grp_simple SimpleAggregateFunction(groupUniqArrayArray, Array(UInt64))) engine = SummingMergeTree() order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4796', () => {
    const query = `CREATE TABLE simple_agf_aggregating_mt (
a Int64,
min_aggreg AggregateFunction(min, UInt64),
min_simple SimpleAggregateFunction(min, UInt64),
max_aggreg AggregateFunction(max, UInt64),
max_simple SimpleAggregateFunction(max, UInt64),
sum_aggreg AggregateFunction(sum, UInt64),
sum_simple SimpleAggregateFunction(sum, UInt64),
sumov_aggreg AggregateFunction(sumWithOverflow, UInt64),
sumov_simple SimpleAggregateFunction(sumWithOverflow, UInt64),
gbitand_aggreg AggregateFunction(groupBitAnd, UInt64),
gbitand_simple SimpleAggregateFunction(groupBitAnd, UInt64),
gbitor_aggreg AggregateFunction(groupBitOr, UInt64),
gbitor_simple SimpleAggregateFunction(groupBitOr, UInt64),
gbitxor_aggreg AggregateFunction(groupBitXor, UInt64),
gbitxor_simple SimpleAggregateFunction(groupBitXor, UInt64),
gra_aggreg AggregateFunction(groupArrayArray, Array(UInt64)),
gra_simple SimpleAggregateFunction(groupArrayArray, Array(UInt64)),
grp_aggreg AggregateFunction(groupUniqArrayArray, Array(UInt64)),
grp_simple SimpleAggregateFunction(groupUniqArrayArray, Array(UInt64)),
aggreg_map AggregateFunction(sumMap, Tuple(Array(String), Array(UInt64))),
simple_map SimpleAggregateFunction(sumMap, Tuple(Array(String), Array(UInt64))),
aggreg_map_min AggregateFunction(minMap, Tuple(Array(String), Array(UInt64))),
simple_map_min SimpleAggregateFunction(minMap, Tuple(Array(String), Array(UInt64))),
aggreg_map_max AggregateFunction(maxMap, Tuple(Array(String), Array(UInt64))),
simple_map_max SimpleAggregateFunction(maxMap, Tuple(Array(String), Array(UInt64)))
)
ENGINE = AggregatingMergeTree
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4797', () => {
    const query = `CREATE TABLE simple_agf_summing_mt (
a Int64,
min_aggreg AggregateFunction(min, UInt64),
min_simple SimpleAggregateFunction(min, UInt64),
max_aggreg AggregateFunction(max, UInt64),
max_simple SimpleAggregateFunction(max, UInt64),
sum_aggreg AggregateFunction(sum, UInt64),
sum_simple SimpleAggregateFunction(sum, UInt64),
sumov_aggreg AggregateFunction(sumWithOverflow, UInt64),
sumov_simple SimpleAggregateFunction(sumWithOverflow, UInt64),
gbitand_aggreg AggregateFunction(groupBitAnd, UInt64),
gbitand_simple SimpleAggregateFunction(groupBitAnd, UInt64),
gbitor_aggreg AggregateFunction(groupBitOr, UInt64),
gbitor_simple SimpleAggregateFunction(groupBitOr, UInt64),
gbitxor_aggreg AggregateFunction(groupBitXor, UInt64),
gbitxor_simple SimpleAggregateFunction(groupBitXor, UInt64),
gra_aggreg AggregateFunction(groupArrayArray, Array(UInt64)),
gra_simple SimpleAggregateFunction(groupArrayArray, Array(UInt64)),
grp_aggreg AggregateFunction(groupUniqArrayArray, Array(UInt64)),
grp_simple SimpleAggregateFunction(groupUniqArrayArray, Array(UInt64)),
aggreg_map AggregateFunction(sumMap, Tuple(Array(String), Array(UInt64))),
simple_map SimpleAggregateFunction(sumMap, Tuple(Array(String), Array(UInt64))),
aggreg_map_min AggregateFunction(minMap, Tuple(Array(String), Array(UInt64))),
simple_map_min SimpleAggregateFunction(minMap, Tuple(Array(String), Array(UInt64))),
aggreg_map_max AggregateFunction(maxMap, Tuple(Array(String), Array(UInt64))),
simple_map_max SimpleAggregateFunction(maxMap, Tuple(Array(String), Array(UInt64)))
)
ENGINE = SummingMergeTree
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4798', () => {
    const query = `CREATE TABLE test (a Float32, b int) Engine = MergeTree() ORDER BY tuple() PARTITION BY a; -- { serverError BAD_ARGUMENTS } CREATE TABLE test (a Float32, b int) Engine = MergeTree() ORDER BY tuple() PARTITION BY a settings allow_floating_point_partition_key=true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4799', () => {
    const query = `CREATE TABLE test (a Float32, b int, c String, d Float64) Engine = MergeTree() ORDER BY tuple() PARTITION BY (b, c, d) settings allow_floating_point_partition_key=false; -- { serverError BAD_ARGUMENTS } CREATE TABLE test (a Float32, b int, c String, d Float64) Engine = MergeTree() ORDER BY tuple() PARTITION BY (b, c, d) settings allow_floating_point_partition_key=true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4800', () => {
    const query = `CREATE TABLE cnf_test (i Int64) ENGINE = MergeTree() ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4801', () => {
    const query = `CREATE DATABASE db_memory_01625 ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4802', () => {
    const query = `CREATE TABLE index_append_test_test (i Int64, a UInt32, b UInt64, CONSTRAINT c1 ASSUME i <= 2 * b AND i + 40 > a) ENGINE = MergeTree() ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4803', () => {
    const query = `CREATE TABLE column_swap_test_test (i Int64, a String, b UInt64, CONSTRAINT c1 ASSUME b = cityHash64(a)) ENGINE = MergeTree() ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4804', () => {
    const query = `CREATE TABLE column_swap_test_test (i Int64, a String, b String, CONSTRAINT c1 ASSUME a = substring(reverse(b), 1, 1)) ENGINE = MergeTree() ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4805', () => {
    const query = `CREATE TABLE t_bad_constraint(a UInt32, s String, CONSTRAINT c1 ASSUME a = toUInt32(s)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4806', () => {
    const query = `CREATE TABLE ttl_where (
\`d\` Date,
\`i\` UInt32
)
ENGINE = MergeTree
ORDER BY tuple()
TTL d + toIntervalYear(10) DELETE WHERE i % 3 = 0,
d + toIntervalYear(40) DELETE WHERE i % 3 = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4807', () => {
    const query = `CREATE TABLE ttl_group_by (
\`d\` Date,
\`i\` UInt32,
\`v\` UInt64
)
ENGINE = MergeTree
ORDER BY (toStartOfMonth(d), i % 10)
TTL d + toIntervalYear(10) GROUP BY toStartOfMonth(d), i % 10 SET d = any(toStartOfMonth(d)), i = any(i % 10), v = sum(v),
d + toIntervalYear(40) GROUP BY toStartOfMonth(d) SET d = any(toStartOfMonth(d)), v = sum(v);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4808', () => {
    const query = `create table json(a int, b int default 7, c default a + b) engine File(JSONEachRow, 'data1622.json');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4809', () => {
    const query = `CREATE TABLE t_constraints_where(a UInt32, b UInt32, CONSTRAINT c1 ASSUME b >= 5, CONSTRAINT c2 ASSUME b <= 10) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4810', () => {
    const query = `CREATE TABLE t_constraints_where(a UInt32, b UInt32, CONSTRAINT c1 ASSUME b < 10) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4811', () => {
    const query = `CREATE TABLE constraint_test_assumption (URL String, a Int32, CONSTRAINT c1 ASSUME domainWithoutWWW(URL) = 'bigmir.net', CONSTRAINT c2 ASSUME URL > 'zzz' AND startsWith(URL, 'test') = True) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4812', () => {
    const query = `CREATE TABLE constraint_test_transitivity (a Int64, b Int64, c Int64, d Int32, CONSTRAINT c1 ASSUME a = b AND c = d, CONSTRAINT c2 ASSUME b = c) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4813', () => {
    const query = `CREATE TABLE constraint_test_strong_connectivity (a String, b String, c String, d String, CONSTRAINT c1 ASSUME a <= b AND b <= c AND c <= d AND d <= a) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4814', () => {
    const query = `CREATE TABLE constraint_test_transitivity2 (a String, b String, c String, d String, CONSTRAINT c1 ASSUME a > b AND b >= c AND c > d AND a >= d) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4815', () => {
    const query = `CREATE TABLE constraint_test_transitivity3 (a Int64, b Int64, c Int64, CONSTRAINT c1 ASSUME b > 10 AND 1 > a) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4816', () => {
    const query = `CREATE TABLE constraint_test_constants_repl (a Int64, b Int64, c Int64, d Int64, CONSTRAINT c1 ASSUME a - b = 10 AND c + d = 20) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4817', () => {
    const query = `CREATE TABLE constraint_test_constants (a Int64, b Int64, c Int64, CONSTRAINT c1 ASSUME b > 10 AND a >= 10) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4818', () => {
    const query = `CREATE TABLE words(i Int, word String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4819', () => {
    const query = `CREATE TABLE zstd_1_00(n Int, b String CODEC(ZSTD(1))) ENGINE = MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4820', () => {
    const query = `CREATE TABLE zstd_1_24(n Int, b String CODEC(ZSTD(1,24))) ENGINE = MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4821', () => {
    const query = `CREATE TABLE zstd_9_00(n Int, b String CODEC(ZSTD(9))) ENGINE = MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4822', () => {
    const query = `CREATE TABLE zstd_9_24(n Int, b String CODEC(ZSTD(9,24))) ENGINE = MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4823', () => {
    const query = `create table test_byte_size_number0 (
key Int32,
u8 UInt8,
u16 UInt16,
u32 UInt32,
u64 UInt64,
u256 UInt256,
i8 Int8,
i16 Int16,
i32 Int32,
i64 Int64,
i128 Int128,
i256 Int256,
f32 Float32,
f64 Float64
) engine MergeTree order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4824', () => {
    const query = `create table test_byte_size_number1 (
key Int32,
date Date,
dt DateTime,
dt64 DateTime64(3),
en8 Enum8('a'=1, 'b'=2, 'c'=3, 'd'=4),
en16 Enum16('c'=100, 'l'=101, 'i'=102, 'ck'=103, 'h'=104, 'o'=105, 'u'=106, 's'=107, 'e'=108),
dec32 Decimal32(4),
dec64 Decimal64(8),
dec128 Decimal128(16),
dec256 Decimal256(16),
uuid UUID
) engine MergeTree order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4825', () => {
    const query = `create table test_byte_size_string (
key Int32,
str1 String,
str2 String,
fstr1 FixedString(8),
fstr2 FixedString(8)
) engine MergeTree order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4826', () => {
    const query = `create table test_byte_size_array (
key Int32,
uints8 Array(UInt8),
ints8 Array(Int8),
ints32 Array(Int32),
floats32 Array(Float32),
decs32 Array(Decimal32(4)),
dates Array(Date),
uuids Array(UUID)
) engine MergeTree order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4827', () => {
    const query = `create table test_byte_size_complex_array (
key Int32,
ints Array(Int32),
int_ints Array(Array(Int32)),
strs Array(String),
str_strs Array(Array(String))
) engine MergeTree order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4828', () => {
    const query = `create table test_byte_size_other (
key Int32,
opt_int32 Nullable(Int32),
opt_str Nullable(String),
tuple Tuple(Int32, Nullable(String)),
strings LowCardinality(String)
) engine MergeTree order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4829', () => {
    const query = `create table test_byte_size_more_complex (
key Int32,
complex1 Array(Tuple(Nullable(FixedString(4)), Array(Tuple(Nullable(String), String))))
) engine MergeTree order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4830', () => {
    const query = `CREATE TEMPORARY TABLE sum_map_overflow (events Array(UInt8), counts Array(UInt8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4831', () => {
    const query = `create table ay engine AggregatingMergeTree order by i as select 1 i, sumSimpleState(10) group by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4832', () => {
    const query = `create table bad_date_time (time Datetime('Asia/Istanbul'), count UInt16) Engine = MergeTree() ORDER BY (time);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4833', () => {
    const query = `create table shard_0.tbl (number UInt64) engine = MergeTree order by number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4834', () => {
    const query = `create table shard_1.tbl (number UInt64) engine = MergeTree order by number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4835', () => {
    const query = `create table distr (number UInt64) engine = Distributed(test_cluster_two_shards_different_databases, '', tbl);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4836', () => {
    const query = `CREATE TABLE table_with_lc_key (
enum_key Enum8('x' = 2, 'y' = 1),
lc_key LowCardinality(String),
value String
)
ENGINE MergeTree()
ORDER BY (enum_key, lc_key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4837', () => {
    const query = `CREATE TABLE table_with_string_key (
int_key Int8,
str_key String,
value String
)
ENGINE MergeTree()
ORDER BY (int_key, str_key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4838', () => {
    const query = `CREATE TABLE wide_to_comp (a Int, b Int, c Int) ENGINE = MergeTree ORDER BY a
settings vertical_merge_algorithm_min_rows_to_activate = 1,
vertical_merge_algorithm_min_columns_to_activate = 1,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0,
index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4839', () => {
    const query = `CREATE TABLE skip_idx_comp_parts (a Int, b Int, index b_idx b TYPE minmax GRANULARITY 4) ENGINE = MergeTree ORDER BY a
SETTINGS index_granularity=256, index_granularity_bytes = '10Mi', merge_max_block_size=100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4840', () => {
    const query = `create table enum engine MergeTree order by enum as select cast(1, 'Enum8(\\'zero\\'=0, \\'one\\'=1)') AS enum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4841', () => {
    const query = `CREATE USER OR REPLACE 'test_01605';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4842', () => {
    const query = `CREATE SETTINGS PROFILE OR REPLACE 'test_01605';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4843', () => {
    const query = `CREATE TABLE distinct_two_level ( time DateTime64(3),
domain String,
subdomain String
) ENGINE = MergeTree ORDER BY time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4844', () => {
    const query = `CREATE TABLE adaptive_table( key UInt64,
value String
) ENGINE MergeTree()
ORDER BY key
SETTINGS index_granularity_bytes = 1048576,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0,
enable_vertical_merge_algorithm = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4845', () => {
    const query = `create database test_1603_rename_bug_ordinary engine=Ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4846', () => {
    const query = `create table test_1603_rename_bug_ordinary.foo engine=Memory as select * from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4847', () => {
    const query = `create table test_1603_rename_bug_ordinary.bar engine=Log as select * from numbers(200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4848', () => {
    const query = `create database test_1603_rename_bug_atomic engine=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4849', () => {
    const query = `create table test_1603_rename_bug_atomic.foo engine=Memory as select * from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4850', () => {
    const query = `create table test_1603_rename_bug_atomic.bar engine=Log as select * from numbers(200);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4851', () => {
    const query = `CREATE TABLE table_with_column_ttl (
EventTime DateTime,
UserID UInt64,
Age UInt8 TTL EventTime + INTERVAL 3 MONTH
)
ENGINE MergeTree()
ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0; -- column TTL doesn't work for compact parts
INSERT INTO table_with_column_ttl VALUES (now(), 1, 32);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4852', () => {
    const query = `create table t (x UInt64, s String) engine = MergeTree order by x SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4853', () => {
    const query = `CREATE TABLE IF NOT EXISTS test01603 ( f64 Float64,
d Decimal64(3) DEFAULT toDecimal32(f64, 3),
f32 Float32 DEFAULT f64
) ENGINE=MergeTree() ORDER BY f32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4854', () => {
    const query = `CREATE TEMPORARY TABLE test_01602a(x UInt32);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4855', () => {
    const query = `CREATE TEMPORARY TABLE test_01602b(y Float64, z String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4856', () => {
    const query = `CREATE DATABASE test_1602;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4857', () => {
    const query = `CREATE TABLE test_1602.tbl (\`EventDate\` DateTime, \`CounterID\` UInt32, \`UserID\` UInt32) ENGINE = MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4858', () => {
    const query = `CREATE VIEW test_1602.v AS SELECT * FROM test_1602.tbl; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4859', () => {
    const query = `CREATE VIEW test_1602.DATABASE AS SELECT * FROM test_1602.tbl; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4860', () => {
    const query = `CREATE VIEW test_1602.DICTIONARY AS SELECT * FROM test_1602.tbl; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4861', () => {
    const query = `CREATE VIEW test_1602.TABLE AS SELECT * FROM test_1602.tbl; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4862', () => {
    const query = `CREATE MATERIALIZED VIEW test_1602.vv (\`EventDate\` DateTime, \`CounterID\` UInt32, \`UserID\` UInt32) ENGINE = MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) SETTINGS index_granularity = 8192 AS SELECT * FROM test_1602.tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4863', () => {
    const query = `CREATE VIEW test_1602.VIEW AS SELECT * FROM test_1602.tbl; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4864', () => {
    const query = `CREATE TABLE runningConcurrency_test(begin Date, end Date) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4865', () => {
    const query = `CREATE TABLE runningConcurrency_test(begin DateTime, end DateTime) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4866', () => {
    const query = `CREATE TABLE runningConcurrency_test(begin DateTime64(3), end DateTime64(3)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4867', () => {
    const query = `CREATE DATABASE test1601_detach_permanently_atomic Engine=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4868', () => {
    const query = `create table test1601_detach_permanently_atomic.test_name_reuse (number UInt64) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4869', () => {
    const query = `create table test1601_detach_permanently_atomic.test_name_reuse (number UInt64) engine=MergeTree order by tuple(); -- { serverError TABLE_ALREADY_EXISTS } SELECT 'can not detach twice';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4870', () => {
    const query = `CREATE DATABASE test1601_detach_permanently_ordinary Engine=Ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4871', () => {
    const query = `create table test1601_detach_permanently_ordinary.test_name_reuse (number UInt64) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4872', () => {
    const query = `create table test1601_detach_permanently_ordinary.test_name_reuse (number UInt64) engine=MergeTree order by tuple(); -- { serverError TABLE_ALREADY_EXISTS } SELECT 'can not detach twice';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4873', () => {
    const query = `CREATE DATABASE test1601_detach_permanently_lazy Engine=Lazy(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4874', () => {
    const query = `create table test1601_detach_permanently_lazy.test_name_reuse (number UInt64) engine=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4875', () => {
    const query = `create table test1601_detach_permanently_lazy.test_name_reuse (number UInt64) engine=Log; -- { serverError TABLE_ALREADY_EXISTS } SELECT 'can not detach twice';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4876', () => {
    const query = `CREATE TABLE select_in_test(value UInt8) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4877', () => {
    const query = `CREATE TABLE select_in_test(value Int8) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4878', () => {
    const query = `CREATE TABLE base (
\`id\` UInt64,
\`id2\` UInt64,
\`d\` UInt64,
\`value\` UInt64
)
ENGINE=MergeTree()
PARTITION BY d
ORDER BY (id,id2,d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4879', () => {
    const query = `CREATE TABLE derived1 (
\`id1\` UInt64,
\`d1\` UInt64,
\`value1\` UInt64
)
ENGINE = MergeTree()
PARTITION BY d1
ORDER BY (id1, d1)
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4880', () => {
    const query = `CREATE TABLE derived2 (
\`id2\` UInt64,
\`d2\` UInt64,
\`value2\` UInt64
)
ENGINE = MergeTree()
PARTITION BY d2
ORDER BY (id2, d2)
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4881', () => {
    const query = `CREATE TABLE ms (n Int32) ENGINE = MergeTree() ORDER BY n SETTINGS min_compress_block_size = 1024, max_compress_block_size = 10240;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4882', () => {
    const query = `CREATE TEMPORARY TABLE t (x Nullable(String) DEFAULT 'Hello', y String DEFAULT 'World');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4883', () => {
    const query = `CREATE TABLE IF NOT EXISTS joint (
id    UUID,
value LowCardinality(String)
)
ENGINE = Join (ANY, LEFT, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4884', () => {
    const query = `CREATE TABLE IF NOT EXISTS t (
id    UUID,
d     DateTime
)
ENGINE = MergeTree
PARTITION BY toDate(d)
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4885', () => {
    const query = `create table data_01593 (key Int) engine=MergeTree() order by key partition by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4886', () => {
    const query = `create table stack(item_id Int64, brand_id Int64, rack_id Int64, dt DateTime, expiration_dt DateTime, quantity UInt64) Engine = MergeTree
partition by toYYYYMM(dt)
order by (brand_id, toStartOfHour(dt)) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4887', () => {
    const query = `create table window_mt engine MergeTree order by number as select number, mod(number, 3) p from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4888', () => {
    const query = `CREATE TABLE low_card (
\`lc\` LowCardinality(String)
)
ENGINE = Join(ANY, LEFT, lc);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4889', () => {
    const query = `CREATE TABLE replicated_mutations_empty_partitions (
key UInt64,
value String
)
ENGINE = ReplicatedMergeTree('/clickhouse/test/'||currentDatabase()||'/01586_replicated_mutations_empty_partitions/{shard}', '{replica}')
ORDER BY key
PARTITION by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4890', () => {
    const query = `create table xp(i Nullable(UInt64), j UInt64) engine MergeTree order by i settings index_granularity = 1, allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4891', () => {
    const query = `create table xp_d as xp engine Distributed(test_shard_localhost, currentDatabase(), xp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4892', () => {
    const query = `create table xp(i UInt64, j UInt64) engine MergeTree order by i settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4893', () => {
    const query = `CREATE TABLE realtimedrep(amount Int64,transID String,userID String,appID String,appName String,transType String,orderSource String,nau String,fau String,transactionType String,supplier String,fMerchant String,bankConnCode String,reqDate DateTime) ENGINE = MergeTree PARTITION BY toDate(reqDate) ORDER BY transID SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4894', () => {
    const query = `CREATE TABLE realtimedistributed(amount Int64,transID String,userID String,appID String,appName String,transType String,orderSource String,nau String,fau String,transactionType String,supplier String,fMerchant String,bankConnCode String,reqDate DateTime) ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), realtimedrep, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4895', () => {
    const query = `CREATE TABLE realtimebuff(amount Int64,transID String,userID String,appID String,appName String,transType String,orderSource String,nau String,fau String,transactionType String,supplier String,fMerchant String,bankConnCode String,reqDate DateTime) ENGINE = Buffer(currentDatabase(), 'realtimedistributed', 16, 3600, 36000, 10000, 1000000, 10000000, 100000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4896', () => {
    const query = `create table insub (i int, j int) engine MergeTree order by i settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4897', () => {
    const query = `CREATE TABLE prewhere_move (x Int, y String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4898', () => {
    const query = `CREATE TABLE prewhere_move (x1 Int, x2 Int, x3 Int, x4 String CODEC(NONE)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4899', () => {
    const query = `CREATE TABLE t (a String, b Int) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4900', () => {
    const query = `CREATE TABLE d (a String, b Int) ENGINE = Distributed(test_shard_localhost, currentDatabase(), t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4901', () => {
    const query = `CREATE TABLE d (a String, b Int) ENGINE = Distributed(test_cluster_two_shards_localhost, currentDatabase(), t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4902', () => {
    const query = `CREATE TABLE foo (server_date Date, server_time Datetime('Asia/Istanbul'), dimension_1 String) ENGINE = MergeTree() PARTITION BY toYYYYMM(server_date) ORDER BY (server_date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4903', () => {
    const query = `CREATE TABLE bar (server_date Date, dimension_1 String) ENGINE = MergeTree() PARTITION BY toYYYYMM(server_date) ORDER BY (server_date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4904', () => {
    const query = `CREATE TABLE IF NOT EXISTS replicated_deduplicate_by_columns_r1 ( id Int32, val UInt32, unique_value UInt64 MATERIALIZED rowNumberInBlock()
) ENGINE=ReplicatedMergeTree('/clickhouse/tables/{database}/test_01581/replicated_deduplicate', 'r1') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4905', () => {
    const query = `CREATE TABLE IF NOT EXISTS replicated_deduplicate_by_columns_r2 ( id Int32, val UInt32, unique_value UInt64 MATERIALIZED rowNumberInBlock()
) ENGINE=ReplicatedMergeTree('/clickhouse/tables/{database}/test_01581/replicated_deduplicate', 'r2') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4906', () => {
    const query = `CREATE TABLE source_data ( pk Int32, sk Int32, val UInt32, partition_key UInt32 DEFAULT 1,
PRIMARY KEY (pk)
) ENGINE=MergeTree
ORDER BY (pk, sk);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4907', () => {
    const query = `CREATE TABLE full_duplicates  ( pk Int32, sk Int32, val UInt32, partition_key UInt32, mat UInt32 MATERIALIZED 12345, alias UInt32 ALIAS 2,
PRIMARY KEY (pk)
) ENGINE=MergeTree
PARTITION BY (partition_key + 1) -- ensure that column in expression is properly handled when deduplicating. See [1] below.
ORDER BY (pk, toString(sk * 10)); -- silly order key to ensure that key column is checked even when it is a part of expression. See [1] below.
OPTIMIZE TABLE full_duplicates DEDUPLICATE BY pk, sk, val, mat, alias; -- { serverError NO_SUCH_COLUMN_IN_TABLE } -- alias column is present
OPTIMIZE TABLE full_duplicates DEDUPLICATE BY sk, val; -- { serverError THERE_IS_NO_COLUMN } -- primary key column is missing
OPTIMIZE TABLE full_duplicates DEDUPLICATE BY * EXCEPT(pk, sk, val, mat, alias, partition_key); -- { serverError EMPTY_LIST_OF_COLUMNS_QUERIED } -- list is empty
OPTIMIZE TABLE full_duplicates DEDUPLICATE BY * EXCEPT(pk); -- { serverError THERE_IS_NO_COLUMN } -- primary key column is missing [1]
OPTIMIZE TABLE full_duplicates DEDUPLICATE BY * EXCEPT(sk); -- { serverError THERE_IS_NO_COLUMN } -- sorting key column is missing [1]
OPTIMIZE TABLE full_duplicates DEDUPLICATE BY * EXCEPT(partition_key); -- { serverError THERE_IS_NO_COLUMN } -- partitioning column is missing [1]
OPTIMIZE TABLE full_duplicates DEDUPLICATE BY; -- { clientError SYNTAX_ERROR } -- empty list is a syntax error
OPTIMIZE TABLE partial_duplicates DEDUPLICATE BY pk,sk,val,mat EXCEPT mat; -- { clientError SYNTAX_ERROR } -- invalid syntax
OPTIMIZE TABLE partial_duplicates DEDUPLICATE BY pk APPLY(pk + 1); -- { clientError SYNTAX_ERROR } -- APPLY column transformer is not supported
OPTIMIZE TABLE partial_duplicates DEDUPLICATE BY pk REPLACE(pk + 1); -- { clientError SYNTAX_ERROR } -- REPLACE column transformer is not supported
SELECT 'OLD DEDUPLICATE';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4908', () => {
    const query = `CREATE TABLE partial_duplicates  ( pk Int32, sk Int32, val UInt32, partition_key UInt32 DEFAULT 1, mat UInt32 MATERIALIZED rand(), alias UInt32 ALIAS 2,
PRIMARY KEY (pk)
) ENGINE=MergeTree
ORDER BY (pk, sk);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4909', () => {
    const query = `create table test_index(date Date) engine MergeTree partition by toYYYYMM(date) order by date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4910', () => {
    const query = `CREATE TABLE test_table (
\`timestamp\` DateTime,
\`value\` UInt64,
\`day\` Date ALIAS toDate(timestamp),
\`day1\` Date ALIAS day + 1,
\`day2\` Date ALIAS day1 + 1,
\`time\` DateTime ALIAS timestamp
)
ENGINE = MergeTree
PARTITION BY toYYYYMMDD(timestamp)
ORDER BY timestamp SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4911', () => {
    const query = `CREATE TABLE test_index (
\`key_string\` String,
\`key_uint32\` ALIAS toUInt32(key_string),
INDEX idx toUInt32(key_string) TYPE set(0) GRANULARITY 1
)
ENGINE = MergeTree
PARTITION BY tuple()
PRIMARY KEY tuple()
ORDER BY key_string SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4912', () => {
    const query = `create table pd (dt DateTime, i int, dt_m DateTime alias toStartOfMinute(dt)) engine Distributed(test_shard_localhost, currentDatabase(), 'pl');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4913', () => {
    const query = `create table pl (dt DateTime, i int, projection p (select sum(i) group by toStartOfMinute(dt))) engine MergeTree order by dt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4914', () => {
    const query = `create temporary table t (x UInt64, y alias x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4915', () => {
    const query = `CREATE DATABASE database_for_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4916', () => {
    const query = `CREATE TABLE database_for_dict.table_for_dict (k UInt64, v UInt8) ENGINE = MergeTree ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4917', () => {
    const query = `CREATE DICTIONARY database_for_dict.dict1 (k UInt64 DEFAULT 0, v UInt8 DEFAULT 1) PRIMARY KEY k SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB 'database_for_dict'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4918', () => {
    const query = `CREATE TABLE order_by_const (
\`a\` UInt64,
\`b\` UInt64,
\`c\` UInt64,
\`d\` UInt64
)
ENGINE = MergeTree
ORDER BY (a, b)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4919', () => {
    const query = `create table t_01568 engine Memory as select intDiv(number, 3) p, modulo(number, 3) o, number
from numbers(9);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4920', () => {
    const query = `create table values_01564( a int,
constraint c1 check a < 10) engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4921', () => {
    const query = `CREATE TABLE empty1 (key UInt32, val UInt32, date Datetime) ENGINE=ReplicatedSummingMergeTree('/clickhouse/tables/{database}/test_01560_optimize_on_insert', '1', val)
PARTITION BY date ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4922', () => {
    const query = `CREATE TABLE empty2 (key UInt32, val UInt32, date Datetime) ENGINE=ReplicatedSummingMergeTree('/clickhouse/tables/{database}/test_01560_optimize_on_insert', '2', val)
PARTITION BY date ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4923', () => {
    const query = `CREATE TABLE replacing_merge_tree (key UInt32, date Datetime) ENGINE=ReplacingMergeTree() PARTITION BY date ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4924', () => {
    const query = `CREATE TABLE collapsing_merge_tree (key UInt32, sign Int8, date Datetime) ENGINE=CollapsingMergeTree(sign) PARTITION BY date ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4925', () => {
    const query = `CREATE TABLE versioned_collapsing_merge_tree (key UInt32, sign Int8, version Int32, date Datetime) ENGINE=VersionedCollapsingMergeTree(sign, version) PARTITION BY date ORDER BY (key, version);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4926', () => {
    const query = `CREATE TABLE summing_merge_tree (key UInt32, val UInt32, date Datetime) ENGINE=SummingMergeTree(val) PARTITION BY date ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4927', () => {
    const query = `CREATE TABLE aggregating_merge_tree (key UInt32, val SimpleAggregateFunction(max, UInt32), date Datetime) ENGINE=AggregatingMergeTree() PARTITION BY date ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4928', () => {
    const query = `CREATE TABLE empty (key UInt32, val UInt32, date Datetime) ENGINE=SummingMergeTree(val) PARTITION BY date ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4929', () => {
    const query = `CREATE TABLE cat_hist (categoryId UUID, categoryName String) ENGINE Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4930', () => {
    const query = `CREATE TABLE prod_hist (categoryId UUID, productId UUID) ENGINE = MergeTree ORDER BY productId;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4931', () => {
    const query = `CREATE TABLE products_l AS prod_hist ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), prod_hist);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4932', () => {
    const query = `CREATE TABLE products as prod_hist ENGINE = Merge(currentDatabase(), '^products_');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4933', () => {
    const query = `CREATE TABLE mann_whitney_test (left Float64, right UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4934', () => {
    const query = `CREATE TABLE t (c CODEC(NONE)) ENGINE = Memory -- { clientError SYNTAX_ERROR }`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4935', () => {
    const query = `CREATE TABLE welch_ttest (left Float64, right UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4936', () => {
    const query = `CREATE TABLE welch_ttest (left Float64, right Float64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4937', () => {
    const query = `CREATE TABLE student_ttest (left Float64, right Float64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4938', () => {
    const query = `CREATE TABLE null_in_1 (u UInt32, n Nullable(UInt32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4939', () => {
    const query = `CREATE TABLE null_in_1 (a Nullable(UInt32), b Nullable(UInt32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4940', () => {
    const query = `CREATE TABLE enum_as_num ( Id Int32,
Value Enum('a' = 1, '3' = 2, 'b' = 3)
) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4941', () => {
    const query = `CREATE TABLE t (x String) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4942', () => {
    const query = `CREATE TABLE t (x String) ENGINE = MergeTree ORDER BY cityHash64(x) SAMPLE BY cityHash64(x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4943', () => {
    const query = `create table data_01555 (key Int) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4944', () => {
    const query = `create table dist_01555 (key Int) Engine=Distributed(test_cluster_with_incorrect_pw, currentDatabase(), data_01555, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4945', () => {
    const query = `create table dist_01555 (key Int) Engine=Distributed(test_shard_localhost, currentDatabase(), data_01555, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4946', () => {
    const query = `CREATE TABLE 01154_test (x Int128, INDEX ix_x x TYPE bloom_filter(0.01) GRANULARITY 1) ENGINE = MergeTree() ORDER BY x SETTINGS index_granularity=8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4947', () => {
    const query = `CREATE TABLE 01154_test (x Int256, INDEX ix_x x TYPE bloom_filter(0.01) GRANULARITY 1) ENGINE = MergeTree() ORDER BY x SETTINGS index_granularity=8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4948', () => {
    const query = `CREATE TABLE 01154_test (x UInt256, INDEX ix_x x TYPE bloom_filter(0.01) GRANULARITY 1) ENGINE = MergeTree() ORDER BY x SETTINGS index_granularity=8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4949', () => {
    const query = `CREATE TABLE 01154_test (x UUID, INDEX ix_x x TYPE bloom_filter(0.01) GRANULARITY 1) ENGINE = MergeTree() ORDER BY x SETTINGS index_granularity=8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4950', () => {
    const query = `CREATE TABLE datetime64_cmp (
	dt6 DateTime64(6, 'UTC'),
	dt3 DateTime64(3, 'UTC')
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4951', () => {
    const query = `create table test_bm( 	dim UInt64,
	id UInt64 ) 
ENGINE = MergeTree()
ORDER BY( dim, id )
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4952', () => {
    const query = `create table test_bm_join(  dim UInt64,
id UInt64 )
ENGINE = MergeTree()
ORDER BY(dim,id)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4953', () => {
    const query = `CREATE TABLE src (k UInt64, s FixedString(11)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4954', () => {
    const query = `CREATE DICTIONARY dict (
k UInt64,
s String
)
PRIMARY KEY k
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER default TABLE 'src'))
LAYOUT(FLAT)
LIFETIME(MIN 10 MAX 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4955', () => {
    const query = `CREATE TABLE test(test String DEFAULT 'test', test_tmp Int DEFAULT 1)ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4956', () => {
    const query = `CREATE TABLE data_01551 (
key        UInt32
) engine=AggregatingMergeTree()
PARTITION BY key%2
ORDER BY (key, key/2)
SETTINGS index_granularity=10, index_granularity_bytes='10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4957', () => {
    const query = `create table f(s String) engine File(TSV, '/dev/null');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4958', () => {
    const query = `create view v as (select * from f);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4959', () => {
    const query = `CREATE TABLE map_formats (m Map(String, UInt32), m1 Map(String, Date), m2 Map(String, Array(UInt32))) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4960', () => {
    const query = `CREATE TABLE t(\`id\` String, \`dealer_id\` String) ENGINE = MergeTree() ORDER BY id SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4961', () => {
    const query = `create table table_map (a Map(String, String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4962', () => {
    const query = `create table table_map (a Map(String, UInt64)) engine = MergeTree() order by a SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4963', () => {
    const query = `create table table_map (a Map(String, String), b String) engine = MergeTree() order by a SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4964', () => {
    const query = `create table table_map (d DATE, m Map(Int8, UInt256)) ENGINE = MergeTree() order by d SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4965', () => {
    const query = `create table table_map (d DATE, m Map(Int8, Int8)) ENGINE = MergeTree() order by d SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4966', () => {
    const query = `create table table_map(a Map(UInt8, UInt64), b UInt8) Engine = MergeTree() order by b SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4967', () => {
    const query = `create table table_map(a Map(String, Array(UInt8))) Engine = MergeTree() order by a SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4968', () => {
    const query = `CREATE TABLE table_map (n UInt32, m Map(String, Int)) ENGINE = MergeTree ORDER BY n SETTINGS min_bytes_for_wide_part = 0, index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4969', () => {
    const query = `CREATE TABLE table_map (n UInt32, m Map(String, Int)) ENGINE = MergeTree ORDER BY n SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4970', () => {
    const query = `CREATE TABLE HASH_TEST_INSERT (\`STR_VAL\` String) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4971', () => {
    const query = `CREATE MATERIALIZED VIEW HASH_MV (\`HASH_VAL\` UInt64, \`STR_VAL\` LowCardinality(String)) ENGINE = ReplacingMergeTree ORDER BY HASH_VAL AS SELECT xxHash64(STR_VAL) AS HASH_VAL, toLowCardinality(STR_VAL) AS STR_VAL FROM HASH_TEST_INSERT;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4972', () => {
    const query = `CREATE TABLE HASH_TEST_INSERT (STR_VAL String) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4973', () => {
    const query = `CREATE MATERIALIZED VIEW HASH_MV (HASH_VAL UInt64, STR_VAL LowCardinality(String)) ENGINE = ReplacingMergeTree ORDER BY HASH_VAL AS SELECT xxHash64(STR_VAL) AS HASH_VAL, toLowCardinality(STR_VAL) AS STR_VAL FROM HASH_TEST_INSERT;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4974', () => {
    const query = `CREATE TABLE foo (id UInt64, key AggregateFunction(max, UInt64)) ENGINE MergeTree ORDER BY key; --{serverError DATA_TYPE_CANNOT_BE_USED_IN_KEY} CREATE TABLE foo (id UInt64, key AggregateFunction(max, UInt64)) ENGINE MergeTree PARTITION BY key; --{serverError DATA_TYPE_CANNOT_BE_USED_IN_KEY}
CREATE TABLE foo (id UInt64, key AggregateFunction(max, UInt64)) ENGINE MergeTree ORDER BY (key) SAMPLE BY key; --{serverError DATA_TYPE_CANNOT_BE_USED_IN_KEY}
DROP TABLE IF EXISTS uncomparable_keys;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4975', () => {
    const query = `create table fct_rt_dc_shop_sku_vender_day (
stat_year UInt16,
stat_month UInt32,
stat_day Date,
out_buid UInt8,
out_shop_id String,
in_shop_id LowCardinality(String),
datasource UInt8,
venderid String,
categorytreeid UInt8,
categoryid String,
goodsid LowCardinality(String),
logistics UInt8,
buntype UInt8,
dctype UInt8,
shopformid UInt8,
rt_qty Decimal(18,4),
rt_cost Decimal(18,4),
rt_taxcost Decimal(18,4),
rt_boxes Decimal(18,4),
rt_shops Nullable(String),
rt_drygood_qty Decimal(18,4),
rt_drygood_cost Decimal(18,4),
rt_drygood_boxes Decimal(18,4),
rt_drygood_shops LowCardinality(Nullable(String)),
rt_fresh_qty Decimal(18,4),
rt_fresh_cost Decimal(18,4),
rt_fresh_shops LowCardinality(Nullable(String)),
rt_supshop_cost Decimal(18,4),
rt_supshop_qty Decimal(18,4),
rt_supshop_boxes Decimal(18,4),
rt_supshop_shops LowCardinality(Nullable(String)),
rt_smallshop_cost Decimal(18,4),
rt_smallshop_qty Decimal(18,4),
rt_smallshop_boxes Decimal(18,4),
rt_smallshop_shops LowCardinality(Nullable(String)),
rt_dc_cost Decimal(18,4),
rt_dc_qty Decimal(18,4),
rt_dc_boxes Decimal(18,4),
rt_dc_shops LowCardinality(Nullable(String)),
rt_drygood_supshop_cost Decimal(18,4),
rt_drygood_supshop_qty Decimal(18,4),
rt_drygood_supshop_boxes Decimal(18,4),
rt_drygood_supshop_shops LowCardinality(Nullable(String)),
rt_drygood_smallshop_cost Decimal(18,4),
rt_drygood_smallshop_qty Decimal(18,4),
rt_drygood_smallshop_boxes Decimal(18,4),
rt_drygood_smallshop_shops LowCardinality(Nullable(String)),
rt_drygood_dc_cost Decimal(18,4),
rt_drygood_dc_qty Decimal(18,4),
rt_drygood_dc_boxes Decimal(18,4),
rt_drygood_dc_shops LowCardinality(Nullable(String)),
rt_fresh_supshop_cost Decimal(18,4),
rt_fresh_supshop_qty Decimal(18,4),
rt_fresh_supshop_shops LowCardinality(Nullable(String)),
rt_fresh_smallshop_cost Decimal(18,4),
rt_fresh_smallshop_qty Decimal(18,4),
rt_fresh_smallshop_shops LowCardinality(Nullable(String)),
rt_fresh_dc_cost Decimal(18,4),
rt_fresh_dc_qty Decimal(18,4),
rt_fresh_dc_shops LowCardinality(Nullable(String)),
stat_day_num String default formatDateTime(stat_day, '%F')
)
engine = MergeTree PARTITION BY toYYYYMM(stat_day) ORDER BY (stat_day, out_shop_id) SETTINGS index_granularity = 8192
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4976', () => {
    const query = `create table file_delim(a int, b int) engine File(CSV, '01545_url_file_format_settings.csv') settings format_csv_delimiter = '|';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4977', () => {
    const query = `create table url_delim(a int, b int) engine URL('http://127.0.0.1:8123/?query=select%201%2C%202%20format%20CSV%20settings%20format_csv_delimiter%3D%27/%27%3B%0A', CSV) settings format_csv_delimiter = '/';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4978', () => {
    const query = `CREATE TABLE fromModifiedJulianDay_test (d Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4979', () => {
    const query = `CREATE TABLE toModifiedJulianDay_test (d String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4980', () => {
    const query = `CREATE TABLE toModifiedJulianDay_test (d FixedString(10)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4981', () => {
    const query = `CREATE TABLE collate_test1 (x UInt32, s Tuple(UInt32, String)) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4982', () => {
    const query = `CREATE TABLE collate_test2 (x UInt32, s Tuple(UInt32, LowCardinality(Nullable(String)))) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4983', () => {
    const query = `CREATE TABLE collate_test3 (x UInt32, s Tuple(UInt32, Tuple(UInt32, Array(String)))) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4984', () => {
    const query = `CREATE TABLE collate_test1 (x UInt32, s Array(String)) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4985', () => {
    const query = `CREATE TABLE collate_test2 (x UInt32, s Array(LowCardinality(Nullable(String)))) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4986', () => {
    const query = `CREATE TABLE collate_test3 (x UInt32, s Array(Array(String))) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4987', () => {
    const query = `create table xy(x int, y int) engine MergeTree partition by intHash64(x) % 2 order by y settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4988', () => {
    const query = `create table xyz(x int, y int, z int) engine MergeTree partition by if(toUInt8(x), y, z) order by x settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4989', () => {
    const query = `create table test(d Date, k Int64, s String) Engine=MergeTree partition by (toYYYYMM(d),k) order by (d, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4990', () => {
    const query = `CREATE TABLE myTable (myDay Date, myOrder Int32, someData String) ENGINE = ReplacingMergeTree PARTITION BY floor(toYYYYMMDD(myDay), -1) ORDER BY (myOrder);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4991', () => {
    const query = `create table T(a Nullable(Int64)) engine = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4992', () => {
    const query = `CREATE TABLE optimize_final(t DateTime, x Int32) ENGINE = MergeTree() PARTITION BY toYYYYMM(t) ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4993', () => {
    const query = `CREATE TABLE nested (
col1 Nested(a UInt32, s String),
col2 Nested(a UInt32, n Nested(s String, b UInt32)),
col3 Nested(n1 Nested(a UInt32, b UInt32), n2 Nested(s String, t String))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4994', () => {
    const query = `CREATE TABLE nested (
id UInt32,
col1 Nested(a UInt32, n Nested(s String, b UInt32))
)
ENGINE = MergeTree
ORDER BY id
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4995', () => {
    const query = `CREATE TABLE bug_14144 ( meta_source_req_uuid Nullable(UUID),
a Int64,
meta_source_type String
)
ENGINE = MergeTree
ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4996', () => {
    const query = `CREATE TABLE bug_13492 (\`d\` DateTime) ENGINE = MergeTree PARTITION BY toYYYYMMDD(d) ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4997', () => {
    const query = `CREATE TABLE test_collate (x UInt32, s Nullable(String)) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4998', () => {
    const query = `CREATE TABLE test_01532_1 (a Tuple(key String, value String)) ENGINE Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 4999', () => {
    const query = `CREATE TABLE test_01532_2 (a Tuple(Tuple(key String, value String))) ENGINE Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5000', () => {
    const query = `CREATE TABLE test_01532_3 (a Array(Tuple(key String, value String))) ENGINE Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5001', () => {
    const query = `CREATE TABLE test_01532_4 (a Tuple(UInt8, Tuple(key String, value String))) ENGINE Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5002', () => {
    const query = `CREATE TABLE merge_tree_pk (
key UInt64,
value String
)
ENGINE = ReplacingMergeTree()
PRIMARY KEY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5003', () => {
    const query = `CREATE TABLE merge_tree_pk_sql (
key UInt64,
value String,
PRIMARY KEY (key)
)
ENGINE = ReplacingMergeTree();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5004', () => {
    const query = `CREATE TABLE replicated_merge_tree_pk_sql (
key UInt64,
value String,
PRIMARY KEY (key)
)
ENGINE = ReplicatedReplacingMergeTree('/clickhouse/tables/{database}/01532_primary_key_without', 'r1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5005', () => {
    const query = `create table local_t engine Log as select 1 a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5006', () => {
    const query = `CREATE TABLE test_collate (x UInt32, s LowCardinality(String)) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5007', () => {
    const query = `CREATE TABLE test_collate_null (x UInt32, s LowCardinality(Nullable(String))) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5008', () => {
    const query = `create database db_01530_atomic Engine=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5009', () => {
    const query = `create table db_01530_atomic.data (key Int) Engine=ReplicatedMergeTree('/clickhouse/tables/{database}/db_01530_atomic/data', 'test') order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5010', () => {
    const query = `create table db_01530_atomic.data (key Int) Engine=ReplicatedMergeTree('/clickhouse/tables/{database}/db_01530_atomic/data', 'test') order by key; -- { serverError REPLICA_ALREADY_EXISTS } set database_atomic_wait_for_drop_and_detach_synchronously=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5011', () => {
    const query = `CREATE TABLE to_uuid_test (value String) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5012', () => {
    const query = `CREATE TABLE defaults (
	n Int8
)ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5013', () => {
    const query = `create table dist_01528 as system.one engine=Distributed('test_cluster_two_shards', system, one, rand()+dummy);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5014', () => {
    const query = `CREATE TABLE t (c String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5015', () => {
    const query = `CREATE MATERIALIZED VIEW v to v AS SELECT c FROM t; -- { serverError BAD_ARGUMENTS } CREATE MATERIALIZED VIEW v to t AS SELECT * FROM v; -- { serverError UNKNOWN_TABLE }
DROP TABLE IF EXISTS t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5016', () => {
    const query = `CREATE TABLE t1 (c String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5017', () => {
    const query = `CREATE TABLE t2 (c String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5018', () => {
    const query = `CREATE MATERIALIZED VIEW v1 to t1 AS SELECT * FROM t2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5019', () => {
    const query = `CREATE MATERIALIZED VIEW v2 to t2 AS SELECT * FROM t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5020', () => {
    const query = `create database db_01527_ranges;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5021', () => {
    const query = `create table data_01527 engine=Memory() as select toUInt64(number) key from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5022', () => {
    const query = `create table dist_01527 as data_01527 engine=Distributed('test_cluster_two_shards', currentDatabase(), data_01527, dictGetUInt64('db_01527_ranges.dict', 'shard', key));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5023', () => {
    const query = `create table db_01527_ranges.data engine=Memory() as select number key, number shard from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5024', () => {
    const query = `create dictionary db_01527_ranges.dict (key UInt64, shard UInt64) primary key key source(clickhouse(host '127.0.0.1' port tcpPort() table 'data' db 'db_01527_ranges' user 'default' password '')) lifetime(0) layout(hashed());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5025', () => {
    const query = `create table db_01527_ranges.data engine=Memory() as select number key, number+1 shard from numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5026', () => {
    const query = `CREATE DATABASE db_01526;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5027', () => {
    const query = `CREATE TABLE db_01526.table_for_dict1 (
key_column UInt64,
second_column UInt64,
third_column String
)
ENGINE = MergeTree()
ORDER BY (key_column, second_column);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5028', () => {
    const query = `CREATE DICTIONARY db_01526.dict1 (
key_column UInt64 DEFAULT 0,
second_column UInt64 DEFAULT 0,
third_column String DEFAULT 'qqq'
)
PRIMARY KEY key_column, second_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict1' PASSWORD '' DB 'db_01526'))
LAYOUT(COMPLEX_KEY_DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5029', () => {
    const query = `CREATE TABLE table_for_alter (
\`d\` Date,
\`a\` String,
\`b\` UInt8,
\`x\` String,
\`y\` Int8,
\`version\` UInt64,
\`sign\` Int8 DEFAULT 1
)
ENGINE = ReplicatedVersionedCollapsingMergeTree('/clickhouse/tables/{database}/01526_alter_add/t1', '1', sign, version)
PARTITION BY y
ORDER BY d
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5030', () => {
    const query = `CREATE TABLE test_fetch(a Int32, b Int32) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5031', () => {
    const query = `CREATE TABLE select_final (t DateTime, x Int32, string String) ENGINE = ReplacingMergeTree() PARTITION BY toYYYYMM(t) ORDER BY (x, t) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5032', () => {
    const query = `CREATE TABLE test(timestamp DateTime) ENGINE = MergeTree ORDER BY timestamp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5033', () => {
    const query = `CREATE TABLE test(timestamp DateTime64) ENGINE = MergeTree ORDER BY timestamp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5034', () => {
    const query = `CREATE TABLE table2 (
EventDate Date,
Id Int32,
Value Int32
)
Engine = MergeTree()
PARTITION BY toYYYYMM(EventDate)
ORDER BY Id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5035', () => {
    const query = `CREATE TABLE max_length_alias_14053 (\`a\` Date,\`b\` UInt16,\`c.d\` Array(Date),\`dcount\` UInt16 ALIAS length(c.d))
ENGINE = MergeTree PARTITION BY toMonday(a) ORDER BY (a, b)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5036', () => {
    const query = `create table xp(A Date, B Int64, S String) Engine=MergeTree partition by toYYYYMM(A) order by B;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5037', () => {
    const query = `create table xp_d as xp Engine=Distributed(test_shard_localhost, currentDatabase(), xp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5038', () => {
    const query = `CREATE TABLE enum_test(timestamp DateTime, host String, e Enum8('IU' = 1, 'WS' = 2)) Engine = MergeTree PARTITION BY toDate(timestamp) ORDER BY (timestamp, host);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5039', () => {
    const query = `CREATE TABLE IF NOT EXISTS topXtest(A Int64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5040', () => {
    const query = `CREATE TABLE t1 (\`cA\` String, \`c1\` String) ENGINE = MergeTree ORDER BY (cA, c1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5041', () => {
    const query = `CREATE TABLE testNullableStates ( ts DateTime,
id String,
string Nullable(String),
float64 Nullable(Float64),
float32 Nullable(Float32),
decimal325 Nullable(Decimal32(5)),
date Nullable(Date),
datetime Nullable(DateTime),
datetime64 Nullable(DateTime64),
int64 Nullable(Int64),
int32 Nullable(Int32),
int16 Nullable(Int16),
int8 Nullable(Int8))
ENGINE=MergeTree PARTITION BY toStartOfDay(ts) ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5042', () => {
    const query = `CREATE TABLE testNullableStatesAgg (
\`ts\` DateTime,
\`id\` String,
\`stringMin\` AggregateFunction(min, Nullable(String)),
\`stringMax\` AggregateFunction(max, Nullable(String)),
\`float64Min\` AggregateFunction(min, Nullable(Float64)),
\`float64Max\` AggregateFunction(max, Nullable(Float64)),
\`float64Avg\` AggregateFunction(avg, Nullable(Float64)),
\`float64Sum\` AggregateFunction(sum, Nullable(Float64)),
\`float32Min\` AggregateFunction(min, Nullable(Float32)),
\`float32Max\` AggregateFunction(max, Nullable(Float32)),
\`float32Avg\` AggregateFunction(avg, Nullable(Float32)),
\`float32Sum\` AggregateFunction(sum, Nullable(Float32)),
\`decimal325Min\` AggregateFunction(min, Nullable(Decimal32(5))),
\`decimal325Max\` AggregateFunction(max, Nullable(Decimal32(5))),
\`decimal325Avg\` AggregateFunction(avg, Nullable(Decimal32(5))),
\`decimal325Sum\` AggregateFunction(sum, Nullable(Decimal32(5))),
\`dateMin\` AggregateFunction(min, Nullable(Date)),
\`dateMax\` AggregateFunction(max, Nullable(Date)),
\`datetimeMin\` AggregateFunction(min, Nullable(DateTime)),
\`datetimeMax\` AggregateFunction(max, Nullable(DateTime)),
\`datetime64Min\` AggregateFunction(min, Nullable(datetime64)),
\`datetime64Max\` AggregateFunction(max, Nullable(datetime64)),
\`int64Min\` AggregateFunction(min, Nullable(Int64)),
\`int64Max\` AggregateFunction(max, Nullable(Int64)),
\`int64Avg\` AggregateFunction(avg, Nullable(Int64)),
\`int64Sum\` AggregateFunction(sum, Nullable(Int64)),
\`int32Min\` AggregateFunction(min, Nullable(Int32)),
\`int32Max\` AggregateFunction(max, Nullable(Int32)),
\`int32Avg\` AggregateFunction(avg, Nullable(Int32)),
\`int32Sum\` AggregateFunction(sum, Nullable(Int32)),
\`int16Min\` AggregateFunction(min, Nullable(Int16)),
\`int16Max\` AggregateFunction(max, Nullable(Int16)),
\`int16Avg\` AggregateFunction(avg, Nullable(Int16)),
\`int16Sum\` AggregateFunction(sum, Nullable(Int16)),
\`int8Min\` AggregateFunction(min, Nullable(Int8)),
\`int8Max\` AggregateFunction(max, Nullable(Int8)),
\`int8Avg\` AggregateFunction(avg, Nullable(Int8)),
\`int8Sum\` AggregateFunction(sum, Nullable(Int8))
)
ENGINE = AggregatingMergeTree()
PARTITION BY toStartOfDay(ts)
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5043', () => {
    const query = `CREATE TABLE logs(  date_visited DateTime, 
date Date MATERIALIZED toDate(date_visited)
) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5044', () => {
    const query = `CREATE TABLE test5346 (\`Id\` String, \`Timestamp\` DateTime, \`updated\` DateTime)  ENGINE = ReplacingMergeTree(updated) PARTITION BY tuple() ORDER BY (Timestamp, Id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5045', () => {
    const query = `create database db_01517_atomic Engine=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5046', () => {
    const query = `create table db_01517_atomic.source (key Int) engine=Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5047', () => {
    const query = `create materialized view db_01517_atomic.mv engine=Null as select * from db_01517_atomic.source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5048', () => {
    const query = `create database db_01517_atomic_sync Engine=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5049', () => {
    const query = `create table db_01517_atomic_sync.source (key Int) engine=Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5050', () => {
    const query = `create materialized view db_01517_atomic_sync.mv engine=Null as select * from db_01517_atomic_sync.source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5051', () => {
    const query = `create database db_01517_ordinary Engine=Ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5052', () => {
    const query = `create table db_01517_ordinary.source (key Int) engine=Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5053', () => {
    const query = `create materialized view db_01517_ordinary.mv engine=Null as select * from db_01517_ordinary.source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5054', () => {
    const query = `CREATE TABLE test_datetime(timestamp DateTime('Asia/Istanbul')) ENGINE=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5055', () => {
    const query = `CREATE TABLE test_datetime(timestamp DateTime64(3, 'Asia/Istanbul')) Engine=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5056', () => {
    const query = `CREATE DATABASE test_01516 ENGINE=Ordinary;     -- Full ATTACH requires UUID with Atomic USE test_01516;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5057', () => {
    const query = `CREATE TABLE primary_key_test(v Int32, PRIMARY KEY(v)) ENGINE=ReplacingMergeTree ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5058', () => {
    const query = `CREATE TABLE primary_key_test(v Int32) ENGINE=ReplacingMergeTree ORDER BY v PRIMARY KEY(v);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5059', () => {
    const query = `CREATE TABLE primary_key_test(v1 Int32, v2 Int32, PRIMARY KEY(v1, v2)) ENGINE=ReplacingMergeTree ORDER BY (v1, v2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5060', () => {
    const query = `CREATE TABLE primary_key_test(v1 Int32, v2 Int32) ENGINE=ReplacingMergeTree ORDER BY (v1, v2) PRIMARY KEY(v1, v2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5061', () => {
    const query = `CREATE TABLE primary_key_test(v1 Int64, v2 Int32, v3 String, PRIMARY KEY(v1, gcd(v1, v2))) ENGINE=ReplacingMergeTree ORDER BY v1; -- { serverError BAD_ARGUMENTS } CREATE TABLE primary_key_test(v1 Int64, v2 Int32, v3 String, PRIMARY KEY(v1, gcd(v1, v2))) ENGINE=ReplacingMergeTree ORDER BY (v1, gcd(v1, v2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5062', () => {
    const query = `CREATE TABLE visits (
\`CounterID\` UInt32,
\`StartDate\` Date,
\`StartTime\` DateTime,
\`GoalsID\` Array(UInt32),
\`Sign\` Int8
)
ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5063', () => {
    const query = `CREATE MATERIALIZED VIEW goal_view TO goal (
\`CounterID\` UInt32,
\`StartDate\` Date,
\`GoalID\` UInt32,
\`Visits\` AggregateFunction(sumIf, Int8, UInt8),
\`GoalReaches\` AggregateFunction(sum, Int8)
) AS
SELECT
CounterID,
StartDate,
GoalID,
sumIfState(Sign, _uniq = 1) AS Visits,
sumState(Sign) AS GoalReaches
FROM visits
ARRAY JOIN
GoalsID AS GoalID,
arrayEnumerateUniq(GoalsID) AS _uniq
GROUP BY
CounterID,
StartDate,
GoalID
ORDER BY
CounterID ASC,
StartDate ASC,
GoalID ASC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5064', () => {
    const query = `CREATE TABLE goal (
\`CounterID\` UInt32,
\`StartDate\` Date,
\`GoalID\` UInt32,
\`Visits\` AggregateFunction(sumIf, Int8, UInt8),
\`GoalReaches\` AggregateFunction(sum, Int8)
) ENGINE = AggregatingMergeTree PARTITION BY toStartOfMonth(StartDate) ORDER BY (CounterID, StartDate, GoalID) SETTINGS index_granularity = 256, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5065', () => {
    const query = `CREATE TABLE data_01515 (
key Int,
d1 Int,
d1_null Nullable(Int),
INDEX d1_idx d1 TYPE minmax GRANULARITY 1,
INDEX d1_null_idx assumeNotNull(d1_null) TYPE minmax GRANULARITY 1
)
Engine=MergeTree()
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5066', () => {
    const query = `create table tsv(a int, b int default 7) engine File(TSV);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5067', () => {
    const query = `CREATE TABLE table_with_enum_column_for_tsv_insert ( Id Int32,
Value Enum('ef' = 1, 'es' = 2)
) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5068', () => {
    const query = `CREATE TABLE table_with_enum_column_for_json_insert ( Id Int32,
Value Enum('ef' = 1, 'es' = 2)
) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5069', () => {
    const query = `CREATE TABLE table_with_enum_column_for_csv_insert ( Id Int32,
Value Enum('ef' = 1, 'es' = 2)
) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5070', () => {
    const query = `CREATE TABLE merge_tree_table1 (\`s\` LowCardinality(String), x UInt32) ENGINE = MergeTree ORDER BY x settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5071', () => {
    const query = `CREATE TABLE buffer_table1 ( \`s\` String , x UInt32) ENGINE = Buffer(currentDatabase(), 'merge_tree_table1', 16, 10, 60, 10, 1000, 1048576, 2097152);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5072', () => {
    const query = `create table data_01513 (key String) engine=MergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5073', () => {
    const query = `CREATE TABLE defaults_on_defaults ( key UInt64
)
ENGINE = MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5074', () => {
    const query = `CREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_01513/sequence_consistency', '1') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5075', () => {
    const query = `CREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_01513/sequence_consistency', '2') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5076', () => {
    const query = `CREATE TABLE quorum3(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_01513/sequence_consistency', '3') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5077', () => {
    const query = `CREATE TABLE mt (v UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01497/mt') ORDER BY tuple() -- { serverError BAD_ARGUMENTS }
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5078', () => {
    const query = `CREATE TABLE test_not_found_column_nothing (
col001 UInt8,
col002 UInt8
) Engine=MergeTree ORDER BY tuple() PARTITION BY col001 % 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5079', () => {
    const query = `CREATE TABLE repro_hits ( date Date, metric Float64) ENGINE = MergeTree() ORDER BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5080', () => {
    const query = `CREATE TABLE table_with_version_replicated_1 (
key UInt64,
value String,
version UInt8,
sign Int8
)
ENGINE ReplicatedVersionedCollapsingMergeTree('/clickhouse/' || currentDatabase() || '/test_01511/{shard}/t', '1_{replica}', sign, version)
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5081', () => {
    const query = `CREATE TABLE table_with_version_replicated_2 (
key UInt64,
value String,
version UInt8,
sign Int8
)
ENGINE ReplicatedVersionedCollapsingMergeTree('/clickhouse/' || currentDatabase() || '/test_01511/{shard}/t', '2_{replica}', sign, version)
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5082', () => {
    const query = `CREATE TABLE table_with_version (
key UInt64,
value String,
version UInt8,
sign Int8
)
ENGINE VersionedCollapsingMergeTree(sign, version)
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5083', () => {
    const query = `CREATE TABLE r1 ( key UInt64, value String
)
ENGINE = ReplicatedMergeTree('/clickhouse/{database}/01509_parallel_quorum_insert_no_replicas', '1')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5084', () => {
    const query = `CREATE TABLE r2 ( key UInt64, value String
)
ENGINE = ReplicatedMergeTree('/clickhouse/{database}/01509_parallel_quorum_insert_no_replicas', '2')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5085', () => {
    const query = `CREATE TABLE defaults (
	n Int32
)ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5086', () => {
    const query = `CREATE TABLE derived_metrics_local (
timestamp DateTime,
bytes UInt64
)
ENGINE=SummingMergeTree()
PARTITION BY toYYYYMMDD(timestamp)
ORDER BY (toStartOfHour(timestamp), timestamp)
TTL toStartOfHour(timestamp) + INTERVAL 1 HOUR GROUP BY toStartOfHour(timestamp)
SET bytes=max(bytes);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5087', () => {
    const query = `CREATE TABLE derived_metrics_local  (
timestamp DateTime,
timestamp_h DateTime materialized toStartOfHour(timestamp),
bytes UInt64
)
ENGINE=SummingMergeTree()
PARTITION BY toYYYYMMDD(timestamp)
ORDER BY (timestamp_h, timestamp)
TTL toStartOfHour(timestamp) + INTERVAL 1 HOUR GROUP BY timestamp_h
SET bytes=max(bytes), timestamp = toStartOfHour(any(timestamp));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5088', () => {
    const query = `CREATE TABLE derived_metrics_local (
timestamp DateTime,
bytes UInt64 TTL toStartOfHour(timestamp) + INTERVAL 1 HOUR
)
ENGINE=MergeTree()
ORDER BY (toStartOfHour(timestamp), timestamp)
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5089', () => {
    const query = `CREATE TABLE derived_metrics_local (
timestamp DateTime,
bytes UInt64
)
ENGINE=MergeTree()
PARTITION BY toYYYYMMDD(timestamp)
ORDER BY (toStartOfHour(timestamp), timestamp)
TTL toStartOfHour(timestamp) + INTERVAL 1 HOUR
SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5090', () => {
    const query = `CREATE TABLE buf_dest (timestamp DateTime) ENGINE = MergeTree PARTITION BY toYYYYMMDD(timestamp)
ORDER BY (timestamp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5091', () => {
    const query = `CREATE TABLE buf (timestamp DateTime) Engine = Buffer(currentDatabase(), buf_dest, 16, 86400, 86400, 2000000, 20000000, 100000000, 300000000);;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5092', () => {
    const query = `CREATE TABLE buf (timestamp DateTime) Engine = Buffer(currentDatabase(), buf_dest, 16, 3, 20, 2000000, 20000000, 100000000, 300000000);;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5093', () => {
    const query = `create table test1(p DateTime, k int) engine MergeTree partition by toDate(p) order by k settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5094', () => {
    const query = `create table test_tuple(p DateTime, i int, j int) engine MergeTree partition by (toDate(p), i) order by j settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5095', () => {
    const query = `create table test_two_args(i int, j int, k int) engine MergeTree partition by i + j order by k settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5096', () => {
    const query = `create table t_local(a int) engine Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5097', () => {
    const query = `create table t_dist (a int) engine Distributed(test_shard_localhost, currentDatabase(), 't_local', cityHash64(a));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5098', () => {
    const query = `CREATE TABLE t (x Enum8('abc' = 0, 'def' = 1, 'ghi' = 2)) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5099', () => {
    const query = `CREATE TABLE d (x Enum8('abc' = 0, 'def' = 1, 'xyz' = 2)) ENGINE = Distributed(test_shard_localhost, currentDatabase(), t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5100', () => {
    const query = `CREATE TABLE d (x Enum8('abc' = 0, 'def' = 1, 'xyz' = 2)) ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5101', () => {
    const query = `CREATE TABLE d (x Enum8('abc' = 0, 'def' = 1, 'xyz' = 2)) ENGINE = Distributed(test_cluster_two_shards_localhost, currentDatabase(), t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5102', () => {
    const query = `create view testv(a UInt32) as select number a from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5103', () => {
    const query = `create view testv(a String) as select number a from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5104', () => {
    const query = `CREATE TABLE 01504_test (key String, value UInt32) Engine=EmbeddedRocksDB; -- { serverError BAD_ARGUMENTS } CREATE TABLE 01504_test (key String, value UInt32) Engine=EmbeddedRocksDB PRIMARY KEY(key2); -- { serverError UNKNOWN_IDENTIFIER }
CREATE TABLE 01504_test (key String, value UInt32) Engine=EmbeddedRocksDB PRIMARY KEY(key, value); -- { serverError BAD_ARGUMENTS }
CREATE TABLE 01504_test (key Tuple(String, UInt32), value UInt64) Engine=EmbeddedRocksDB PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5105', () => {
    const query = `CREATE TABLE 01504_test (key String, value UInt32) Engine=EmbeddedRocksDB PRIMARY KEY(key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5106', () => {
    const query = `CREATE TABLE 01504_test (k UInt32, value UInt64, dummy Tuple(UInt32, Float64), bm AggregateFunction(groupBitmap, UInt64)) Engine=EmbeddedRocksDB PRIMARY KEY(k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5107', () => {
    const query = `CREATE TABLE 01504_test_memory AS 01504_test Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5108', () => {
    const query = `CREATE TEMPORARY TABLE keys AS SELECT * FROM system.numbers LIMIT 1 OFFSET 4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5109', () => {
    const query = `CREATE TABLE columns_with_multiple_streams ( field0 Nullable(Int64) CODEC(Delta(2), LZ4),
field1 Nullable(Int64) CODEC(Delta, LZ4),
field2 Array(Array(Int64)) CODEC(Delta, LZ4),
field3 Tuple(UInt32, Array(UInt64)) CODEC(T64, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5110', () => {
    const query = `CREATE TABLE columns_with_multiple_streams_compact ( field0 Nullable(Int64) CODEC(Delta(2), LZ4),
field1 Nullable(Int64) CODEC(Delta, LZ4),
field2 Array(Array(Int64)) CODEC(Delta, LZ4),
field3 Tuple(UInt32, Array(UInt64)) CODEC(Delta, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5111', () => {
    const query = `CREATE TABLE columns_with_multiple_streams_bad_case ( field0 Nullable(String) CODEC(Delta, LZ4)
)
ENGINE = MergeTree
ORDER BY tuple(); --{serverError BAD_ARGUMENTS}
CREATE TABLE columns_with_multiple_streams_bad_case (
field0 Tuple(Array(UInt64), String) CODEC(T64, LZ4)
)
ENGINE = MergeTree
ORDER BY tuple(); --{serverError ILLEGAL_SYNTAX_FOR_CODEC_TYPE}
SET allow_suspicious_codecs = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5112', () => {
    const query = `CREATE TABLE columns_with_multiple_streams_bad_case ( field0 Nullable(UInt64) CODEC(Delta)
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5113', () => {
    const query = `CREATE TABLE test(key FixedString(10)) ENGINE=MergeTree() PARTITION BY tuple() ORDER BY (key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5114', () => {
    const query = `create database db_01501;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5115', () => {
    const query = `CREATE TABLE db_01501.table_cache_dict( KeyField UInt64,
UInt8_ UInt8,
UInt16_ UInt16,
UInt32_ UInt32,
UInt64_ UInt64,
Int8_ Int8,
Int16_ Int16,
Int32_ Int32,
Int64_ Int64,
UUID_ UUID,
Date_ Date,
DateTime_ DateTime,
String_ String,
Float32_ Float32,
Float64_ Float64,
Decimal32_ Decimal32(5),
Decimal64_ Decimal64(15),
Decimal128_ Decimal128(35),
ParentKeyField UInt64)
ENGINE = MergeTree() ORDER BY KeyField;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5116', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS db_01501.cache_dict ( 	KeyField UInt64 DEFAULT 9999999,
	UInt8_ UInt8 DEFAULT 55,
	UInt16_ UInt16 DEFAULT 65535,
	UInt32_ UInt32 DEFAULT 4294967295,
	UInt64_ UInt64 DEFAULT 18446744073709551615,
	Int8_ Int8 DEFAULT -128,
	Int16_ Int16 DEFAULT -32768,
	Int32_ Int32 DEFAULT -2147483648,
	Int64_ Int64 DEFAULT -9223372036854775808,
	UUID_ UUID DEFAULT '550e8400-0000-0000-0000-000000000000',
	Date_ Date DEFAULT '2018-12-30',
	DateTime_ DateTime DEFAULT '2018-12-30 00:00:00',
	String_ String DEFAULT 'hi',
	Float32_ Float32 DEFAULT 111.11,
	Float64_ Float64 DEFAULT 222.11,
	Decimal32_ Decimal32(5) DEFAULT 333.11,
	Decimal64_ Decimal64(15) DEFAULT 444.11,
	Decimal128_ Decimal128(35) DEFAULT 555.11,
	ParentKeyField UInt64 DEFAULT 444)
PRIMARY KEY KeyField
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_cache_dict' DB 'db_01501'))
LIFETIME(5) LAYOUT(CACHE(SIZE_IN_CELLS 20));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5117', () => {
    const query = `CREATE TABLE t (x UInt8) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5118', () => {
    const query = `CREATE TABLE t (x UInt8) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5119', () => {
    const query = `CREATE TABLE t (x UInt8) ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5120', () => {
    const query = `create table named_tuples engine File(JSONEachRow) settings output_format_json_named_tuples_as_objects = 1
as select cast(tuple(number, number * 2), 'Tuple(a int, b int)') c
from numbers(3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5121', () => {
    const query = `CREATE TABLE defaults (
	n Int32,
	s String
)ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5122', () => {
    const query = `CREATE TABLE test_new_col (
\`_csv\` String,
\`csv_as_array\` Array(String) ALIAS splitByChar(';',_csv),
\`csv_col1\` String DEFAULT csv_as_array[1],
\`csv_col2\` String DEFAULT csv_as_array[2]
)
ENGINE = MergeTree
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5123', () => {
    const query = `create table test1 (i Int64) engine MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5124', () => {
    const query = `CREATE TABLE cte1(a Int64) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5125', () => {
    const query = `CREATE TABLE cte2(a Int64) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5126', () => {
    const query = `CREATE TABLE test1(i int, j int) ENGINE Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5127', () => {
    const query = `create table with_test engine=Memory as select cast(number-1 as Nullable(Int64))  n from numbers(10000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5128', () => {
    const query = `CREATE TABLE join (k UInt64, s String) ENGINE = Join(ANY, LEFT, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5129', () => {
    const query = `CREATE TABLE join (k UInt64, s String) ENGINE = Join(ANY, LEFT, k) SETTINGS persistent=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5130', () => {
    const query = `CREATE TABLE join (k UInt64, s String) ENGINE = Join(ANY, LEFT, k) SETTINGS persistent=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5131', () => {
    const query = `CREATE TABLE number (number UInt64) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5132', () => {
    const query = `CREATE TABLE set (val UInt64) ENGINE = Set();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5133', () => {
    const query = `CREATE TABLE set (val UInt64) ENGINE = Set() SETTINGS persistent=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5134', () => {
    const query = `CREATE TABLE set (val UInt64) ENGINE = Set() SETTINGS persistent=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5135', () => {
    const query = `CREATE TABLE default_table ( key UInt64 DEFAULT 42,
value1 UInt64 MATERIALIZED key * key,
value2 ALIAS value1 * key
)
ENGINE = MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5136', () => {
    const query = `CREATE TABLE r_prop_table1 (
column_default UInt64 DEFAULT 42,
column_codec String CODEC(ZSTD(10)),
column_comment Date COMMENT 'Some comment',
column_ttl UInt64 TTL column_comment + INTERVAL 1 MONTH
)
ENGINE ReplicatedMergeTree('/clickhouse/{database}/test_01493/r_prop_table', '1')
ORDER BY tuple()
TTL column_comment + INTERVAL 2 MONTH;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5137', () => {
    const query = `CREATE TABLE r_prop_table2 (
column_default UInt64 DEFAULT 42,
column_codec String CODEC(ZSTD(10)),
column_comment Date COMMENT 'Some comment',
column_ttl UInt64 TTL column_comment + INTERVAL 1 MONTH
)
ENGINE ReplicatedMergeTree('/clickhouse/{database}/test_01493/r_prop_table', '2')
ORDER BY tuple()
TTL column_comment + INTERVAL 2 MONTH;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5138', () => {
    const query = `CREATE TABLE prop_table (
column_default UInt64 DEFAULT 42,
column_materialized UInt64 MATERIALIZED column_default * 42,
column_alias UInt64 ALIAS column_default + 1,
column_codec String CODEC(ZSTD(10)),
column_comment Date COMMENT 'Some comment',
column_ttl UInt64 TTL column_comment + INTERVAL 1 MONTH
)
ENGINE MergeTree()
ORDER BY tuple()
TTL column_comment + INTERVAL 2 MONTH;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5139', () => {
    const query = `CREATE TABLE no_prop_table (
some_column UInt64
)
ENGINE MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5140', () => {
    const query = `CREATE TABLE r_no_prop_table (
some_column UInt64
)
ENGINE ReplicatedMergeTree('/clickhouse/{database}/test/01493_r_no_prop_table', '1')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5141', () => {
    const query = `CREATE TABLE t_enum(x Enum8('hello' = 1, 'world' = 2)) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5142', () => {
    const query = `CREATE TABLE t_source(x Nullable(String)) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5143', () => {
    const query = `CREATE TABLE a (key UInt32) ENGINE = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5144', () => {
    const query = `CREATE TABLE b (key UInt32, ID UInt32) ENGINE = MergeTree ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5145', () => {
    const query = `CREATE TABLE m (key UInt32) ENGINE = Merge(currentDatabase(), 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5146', () => {
    const query = `CREATE TABLE APPLICATION ( \`Name\` LowCardinality(String),
\`Base\` LowCardinality(String)
) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5147', () => {
    const query = `CREATE TABLE DATABASE_IO ( \`Application\` LowCardinality(String),
\`Base\` LowCardinality(String),
\`Date\` DateTime,
\`Ios\` UInt32  ) 
ENGINE = MergeTree()
ORDER BY Date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5148', () => {
    const query = `create table t1 (
col UInt64,
x UInt64 MATERIALIZED col + 1
) Engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5149', () => {
    const query = `create table t2 (
x UInt64
) Engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5150', () => {
    const query = `CREATE TABLE binary_op_mono1(i int, j int) ENGINE MergeTree PARTITION BY toDate(i / 1000) ORDER BY j;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5151', () => {
    const query = `CREATE TABLE binary_op_mono2(i int, j int) ENGINE MergeTree PARTITION BY 1000 / i ORDER BY j settings allow_floating_point_partition_key=true;;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5152', () => {
    const query = `CREATE TABLE binary_op_mono3(i int, j int) ENGINE MergeTree PARTITION BY i + 1000 ORDER BY j;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5153', () => {
    const query = `CREATE TABLE binary_op_mono4(i int, j int) ENGINE MergeTree PARTITION BY 1000 + i ORDER BY j;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5154', () => {
    const query = `CREATE TABLE binary_op_mono5(i int, j int) ENGINE MergeTree PARTITION BY i - 1000 ORDER BY j;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5155', () => {
    const query = `CREATE TABLE binary_op_mono6(i int, j int) ENGINE MergeTree PARTITION BY 1000 - i ORDER BY j;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5156', () => {
    const query = `CREATE TABLE binary_op_mono7(i int, j int) ENGINE MergeTree PARTITION BY i / 1000.0 ORDER BY j settings allow_floating_point_partition_key=true;;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5157', () => {
    const query = `CREATE TABLE binary_op_mono8(i int, j int) ENGINE MergeTree PARTITION BY 1000.0 / i ORDER BY j settings allow_floating_point_partition_key=true;;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5158', () => {
    const query = `create table x (i int, j int) engine MergeTree order by i / 10 settings index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5159', () => {
    const query = `CREATE TABLE nr (\`x\` Nullable(UInt32), \`s\` Nullable(String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5160', () => {
    const query = `CREATE TABLE null_subcolumns (id UInt32, n Nullable(String)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5161', () => {
    const query = `CREATE TABLE map_subcolumns (id UInt32, m Map(String, UInt32)) ENGINE = MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5162', () => {
    const query = `CREATE TABLE subcolumns (
t Tuple
(
a Array(Nullable(UInt32)),
u UInt32,
s Nullable(String)
),
arr Array(Nullable(String)),
arr2 Array(Array(Nullable(String))),
lc LowCardinality(String),
nested Nested(col1 String, col2 Nullable(UInt32))
)
ENGINE = MergeTree order by tuple() SETTINGS min_bytes_for_wide_part = '10M';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5163', () => {
    const query = `CREATE TABLE subcolumns (
t Tuple
(
a Array(Nullable(UInt32)),
u UInt32,
s Nullable(String)
),
arr Array(Nullable(String)),
arr2 Array(Array(Nullable(String))),
lc LowCardinality(String),
nested Nested(col1 String, col2 Nullable(UInt32))
)
ENGINE = MergeTree order by tuple() SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5164', () => {
    const query = `CREATE TABLE t_arr (a Array(UInt32)) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5165', () => {
    const query = `CREATE TABLE t_tup (t Tuple(s String, u UInt32)) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5166', () => {
    const query = `CREATE TABLE t_nul (n Nullable(UInt32)) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5167', () => {
    const query = `CREATE TABLE t_map (m Map(String, UInt32)) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5168', () => {
    const query = `CREATE TABLE mutation_table ( id int,
price Nullable(Int32)
)
ENGINE = MergeTree()
PARTITION BY id
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5169', () => {
    const query = `create table mutation_table (  dt Nullable(Date), name Nullable(String)) engine MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5170', () => {
    const query = `CREATE TABLE local_table (id UInt64, val String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5171', () => {
    const query = `CREATE TABLE dist_table AS local_table ENGINE = Distributed('test_cluster_two_shards_localhost', currentDatabase(), local_table);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5172', () => {
    const query = `CREATE TABLE table_for_ttl( d DateTime,
key UInt64,
value String)
ENGINE = MergeTree()
ORDER BY tuple()
PARTITION BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5173', () => {
    const query = `CREATE TABLE insert_select_dst (i int, middle_a int, middle_b int, j int) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5174', () => {
    const query = `CREATE TABLE insert_select_src (i int, j int) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5175', () => {
    const query = `create database if not exists test_01470;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5176', () => {
    const query = `CREATE TABLE columns_transformers (i int, j int, k int, a_bytes int, b_bytes int, c_bytes int) Engine=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5177', () => {
    const query = `CREATE TABLE columns_transformers (i Int64, j Int16, k Int64) Engine=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5178', () => {
    const query = `CREATE TABLE recompression_table (
dt DateTime,
key UInt64,
value String
) ENGINE MergeTree()
ORDER BY tuple()
PARTITION BY key
TTL dt + INTERVAL 1 MONTH RECOMPRESS CODEC(ZSTD(17)), dt + INTERVAL 1 YEAR RECOMPRESS CODEC(LZ4HC(10))
SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5179', () => {
    const query = `CREATE TABLE recompression_table_compact (
dt DateTime,
key UInt64,
value String
) ENGINE MergeTree()
ORDER BY tuple()
PARTITION BY key
TTL dt + INTERVAL 1 MONTH RECOMPRESS CODEC(ZSTD(17)), dt + INTERVAL 1 YEAR RECOMPRESS CODEC(LZ4HC(10))
SETTINGS min_rows_for_wide_part = 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5180', () => {
    const query = `CREATE TABLE compression_codec_on_alias ( \`c0\` ALIAS c1 CODEC(ZSTD),
c1 UInt64
) ENGINE = MergeTree() PARTITION BY c0 ORDER BY c1; -- { serverError BAD_ARGUMENTS }
select 'create table compression_codec_on_alias with proper CODEC';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5181', () => {
    const query = `CREATE TABLE compression_codec_on_alias ( c0 UInt64 CODEC(ZSTD),
c1 UInt64
) ENGINE = MergeTree() PARTITION BY c0 ORDER BY c1; -- success
select 'alter table compression_codec_on_alias add column (ALIAS type) with CODEC';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5182', () => {
    const query = `CREATE TABLE table_from_remote AS remote('localhost', 'system', 'numbers');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5183', () => {
    const query = `CREATE TABLE table_from_numbers AS numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5184', () => {
    const query = `CREATE TABLE table_from_select ENGINE = MergeTree() ORDER BY tuple() AS SELECT number from system.numbers LIMIT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5185', () => {
    const query = `CREATE TABLE pk (d Date DEFAULT '2000-01-01', x DateTime, y UInt64, z UInt64) ENGINE = MergeTree() PARTITION BY d ORDER BY (toStartOfMinute(x), y, z) SETTINGS index_granularity_bytes=19, min_index_granularity_bytes=1, write_final_mark = 0; -- one row granule INSERT INTO pk (x, y, z) VALUES (1, 11, 1235), (2, 11, 4395), (3, 22, 3545), (4, 22, 6984), (5, 33, 4596), (61, 11, 4563), (62, 11, 4578), (63, 11, 3572), (64, 22, 5786), (65, 22, 5786), (66, 22, 2791), (67, 22, 2791), (121, 33, 2791), (122, 33, 2791), (123, 33, 1235), (124, 44, 4935), (125, 44, 4578), (126, 55, 5786), (127, 55, 2791), (128, 55, 1235);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5186', () => {
    const query = `CREATE TABLE tuple (
\`j\` Tuple(a Int8, b String)
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5187', () => {
    const query = `CREATE TABLE tuple ENGINE = Memory AS SELECT CAST((1, 'Test'), 'Tuple(a Int8,  b String)') AS j;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5188', () => {
    const query = `CREATE TABLE  order_by_nulls_first (diff Nullable(Int16), traf UInt64)
ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5189', () => {
    const query = `create table order_by_another (a Nullable(UInt64), b UInt64) Engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5190', () => {
    const query = `CREATE TABLE invalid_min_index_granularity_bytes_setting (
id UInt64,
value String
) ENGINE MergeTree()
ORDER BY id SETTINGS index_granularity_bytes = 1, min_index_granularity_bytes = 1024; -- { serverError BAD_ARGUMENTS }
DROP TABLE IF EXISTS valid_min_index_granularity_bytes_setting;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5191', () => {
    const query = `CREATE TABLE valid_min_index_granularity_bytes_setting (
id UInt64,
value String
) ENGINE MergeTree()
ORDER BY id SETTINGS index_granularity_bytes = 2024, min_index_granularity_bytes = 1024;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5192', () => {
    const query = `CREATE DATABASE test_01457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5193', () => {
    const query = `CREATE TABLE tmp (n Int8) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5194', () => {
    const query = `CREATE TABLE test_01457.tf_remote AS remote('localhost', currentDatabase(), 'tmp');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5195', () => {
    const query = `CREATE TABLE test_01457.tf_remote_explicit_structure (n UInt64) AS remote('localhost', currentDatabase(), 'tmp');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5196', () => {
    const query = `CREATE TABLE test_01457.tf_numbers (number String) AS numbers(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5197', () => {
    const query = `CREATE TABLE test_01457.tf_merge AS merge(currentDatabase(), 'tmp');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5198', () => {
    const query = `CREATE TABLE tbl(a String, b UInt32, c Float64, d Int64, e UInt8) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5199', () => {
    const query = `create table order_test1 (
timestamp DateTime64(3),
color     LowCardinality(String)
) engine = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5200', () => {
    const query = `CREATE TABLE local_table (number UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5201', () => {
    const query = `CREATE TABLE dist AS local_table ENGINE = Distributed(test_cluster_two_shards_localhost, currentDatabase(), local_table);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5202', () => {
    const query = `CREATE TABLE test_local (date Date, value UInt32) ENGINE = MergeTree(date, date, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5203', () => {
    const query = `CREATE TABLE test_distributed AS test_local ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), test_local, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5204', () => {
    const query = `CREATE DATABASE IF NOT EXISTS db_01455_rank_correlation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5205', () => {
    const query = `CREATE TABLE moons(a Float64, b Float64) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5206', () => {
    const query = `CREATE TABLE circles(a Float64, b Float64) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5207', () => {
    const query = `CREATE TABLE t (x UInt64) ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5208', () => {
    const query = `CREATE TABLE compress_table (
key UInt64,
value1 String CODEC(Default),
value2 UInt64 CODEC(Delta, Default),
value3 String CODEC(ZSTD(10))
)
ENGINE = MergeTree()
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5209', () => {
    const query = `CREATE TABLE IF NOT EXISTS badFixedStringSort (uuid5_old FixedString(16), subitem String) engine=MergeTree order by  tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5210', () => {
    const query = `CREATE TABLE replica1 (v UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/'||currentDatabase()||'test/01451/attach', 'r1') order by tuple() settings max_replicated_merges_in_queue = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5211', () => {
    const query = `CREATE TABLE replica2 (v UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/'||currentDatabase()||'test/01451/attach', 'r2') order by tuple() settings max_replicated_merges_in_queue = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5212', () => {
    const query = `CREATE TABLE replica1 (v UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test/01451/quorum', 'r1') order by tuple() settings max_replicated_merges_in_queue = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5213', () => {
    const query = `CREATE TABLE replica2 (v UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test/01451/quorum', 'r2') order by tuple() settings max_replicated_merges_in_queue = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5214', () => {
    const query = `CREATE TABLE mt_01451 (v UInt8) ENGINE = MergeTree() order by tuple() SETTINGS old_parts_lifetime=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5215', () => {
    const query = `CREATE TABLE test_mtree (\`x\` String, INDEX idx x TYPE set(10) GRANULARITY 1) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5216', () => {
    const query = `CREATE TABLE test (a DateTime, b DateTime(), c DateTime(2), d DateTime('Asia/Istanbul'), e DateTime(3, 'Asia/Istanbul'), f DateTime32, g DateTime32('Asia/Istanbul'), h DateTime(0)) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5217', () => {
    const query = `CREATE TABLE t_01411( str LowCardinality(String),
arr Array(LowCardinality(String)) default [str]
) ENGINE = MergeTree()
ORDER BY tuple() SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5218', () => {
    const query = `CREATE TABLE t_01411_num( num UInt8,
arr Array(LowCardinality(Int64)) default [num]
) ENGINE = MergeTree()
ORDER BY tuple() SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5219', () => {
    const query = `CREATE TABLE tdm (x DateTime('Asia/Istanbul')) ENGINE = MergeTree ORDER BY x SETTINGS write_final_mark = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5220', () => {
    const query = `CREATE TABLE tdm2 (timestamp UInt32) ENGINE = MergeTree ORDER BY timestamp SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5221', () => {
    const query = `CREATE TABLE t (x UInt64, i256 Int256, u256 UInt256, d256 Decimal256(2)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5222', () => {
    const query = `CREATE TABLE test1 (id Int64, name String) ENGINE MergeTree PARTITION BY (id) ORDER BY (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5223', () => {
    const query = `CREATE TABLE test1_distributed AS test1 ENGINE = Distributed(test_cluster_two_shards_localhost, default, test1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5224', () => {
    const query = `CREATE TABLE test_merge AS test1 ENGINE = Merge('default', 'test1_distributed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5225', () => {
    const query = `CREATE TABLE test_merge AS test1 ENGINE = Merge('default', 'test1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5226', () => {
    const query = `CREATE TEMPORARY TABLE t (x Float64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5227', () => {
    const query = `CREATE TABLE pk_func (\`d\` DateTime, \`ui\` UInt32 ) ENGINE = MergeTree ORDER BY toDate(d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5228', () => {
    const query = `CREATE TABLE modify_sample (d Date DEFAULT '2000-01-01', x UInt8) ENGINE = MergeTree PARTITION BY d ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5229', () => {
    const query = `CREATE TABLE modify_sample_replicated (d Date DEFAULT '2000-01-01', x UInt8, y UInt64) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01430', 'modify_sample') PARTITION BY d ORDER BY (x, y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5230', () => {
    const query = `CREATE TABLE modify_sample_old (d Date DEFAULT '2000-01-01', x UInt8, y UInt64) ENGINE = MergeTree(d, (x, y), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5231', () => {
    const query = `CREATE TABLE pk (x DateTime) ENGINE = MergeTree ORDER BY toStartOfMinute(x) SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5232', () => {
    const query = `CREATE TABLE index_compact(a UInt32, b UInt32, index i1 b type minmax granularity 1) ENGINE = MergeTree ORDER BY a
SETTINGS min_rows_for_wide_part = 1000, index_granularity = 128, merge_max_block_size = 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5233', () => {
    const query = `CREATE TABLE mytable_local (
created          DateTime,
eventday         Date,
user_id          UInt32
)
ENGINE = MergeTree()
PARTITION BY toYYYYMM(eventday)
ORDER BY (eventday, user_id)
SETTINGS number_of_free_entries_in_pool_to_execute_mutation = 100; -- { serverError BAD_ARGUMENTS }
CREATE TABLE mytable_local
(
created          DateTime,
eventday         Date,
user_id          UInt32
)
ENGINE = MergeTree()
PARTITION BY toYYYYMM(eventday)
ORDER BY (eventday, user_id)
SETTINGS number_of_free_entries_in_pool_to_lower_max_size_of_merge = 100; -- { serverError BAD_ARGUMENTS }
CREATE TABLE mytable_local
(
created          DateTime,
eventday         Date,
user_id          UInt32
)
ENGINE = MergeTree()
PARTITION BY toYYYYMM(eventday)
ORDER BY (eventday, user_id)
SETTINGS number_of_free_entries_in_pool_to_execute_optimize_entire_partition = 100; -- { serverError BAD_ARGUMENTS }
CREATE TABLE mytable_local
(
created          DateTime,
eventday         Date,
user_id          UInt32
)
ENGINE = MergeTree()
PARTITION BY toYYYYMM(eventday)
ORDER BY (eventday, user_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5234', () => {
    const query = `CREATE TABLE mytable_local ( created          DateTime,
eventday         Date,
user_id          UInt32
)
ENGINE = MergeTree()
PARTITION BY toYYYYMM(eventday)
ORDER BY (eventday, user_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5235', () => {
    const query = `CREATE TABLE table_float (
f Float64,
u UInt32
)
ENGINE = MergeTree
ORDER BY (f, u);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5236', () => {
    const query = `CREATE SETTINGS PROFILE s1_01418 SETTINGS custom_compound.identifier.v2 = 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5237', () => {
    const query = `CREATE SETTINGS PROFILE s2_01418 SETTINGS custom_null = NULL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5238', () => {
    const query = `CREATE TABLE tableCommon (\`key\` FixedString(15), \`value\` Nullable(Int8)) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5239', () => {
    const query = `CREATE TABLE tableTrees (\`key\` FixedString(15), \`name\` Nullable(Int8), \`name2\` Nullable(Int8)) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5240', () => {
    const query = `CREATE TABLE tableFlowers (\`key\` FixedString(15), \`name\` Nullable(Int8)) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5241', () => {
    const query = `CREATE TABLE table_with_pk_clear( key1 UInt64,
key2 String,
value1 String,
value2 String
)
ENGINE = MergeTree()
ORDER by (key1, key2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5242', () => {
    const query = `CREATE TABLE t (x UInt8, s String) ENGINE = MergeTree ORDER BY x SETTINGS number_of_free_entries_in_pool_to_execute_mutation = 15;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5243', () => {
    const query = `CREATE TABLE numbers_indexed Engine=MergeTree ORDER BY number PARTITION BY bitShiftRight(number,8) SETTINGS index_granularity=8 AS SELECT * FROM numbers(16384);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5244', () => {
    const query = `CREATE VIEW squares AS WITH number*2 AS square_number SELECT number, square_number FROM numbers_indexed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5245', () => {
    const query = `CREATE TABLE mutation_table (
date Date,
key UInt64,
value String
)
ENGINE = MergeTree()
PARTITION BY date
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5246', () => {
    const query = `CREATE TABLE lc_nullable ( order_key   Array(LowCardinality(Nullable(UInt64))),
i8  Array(LowCardinality(Nullable(Int8))),
i16 Array(LowCardinality(Nullable(Int16))),
i32 Array(LowCardinality(Nullable(Int32))),
i64 Array(LowCardinality(Nullable(Int64))),
u8  Array(LowCardinality(Nullable(UInt8))),
u16 Array(LowCardinality(Nullable(UInt16))),
u32 Array(LowCardinality(Nullable(UInt32))),
u64 Array(LowCardinality(Nullable(UInt64))),
f32 Array(LowCardinality(Nullable(Float32))),
f64 Array(LowCardinality(Nullable(Float64))),
date Array(LowCardinality(Nullable(Date))),
date_time Array(LowCardinality(Nullable(DateTime('Asia/Istanbul')))),
str Array(LowCardinality(Nullable(String))),
fixed_string Array(LowCardinality(Nullable(FixedString(5))))
) ENGINE = MergeTree() ORDER BY order_key SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5247', () => {
    const query = `CREATE TABLE t (k UInt64, s String) ENGINE = MergeTree ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5248', () => {
    const query = `CREATE TABLE test_bloom_filter_index(\`WatchID\` UInt64, \`JavaEnable\` UInt8, \`Title\` String, \`GoodEvent\` Int16, \`EventTime\` DateTime, \`EventDate\` Date, \`CounterID\` UInt32, \`ClientIP\` UInt32, \`ClientIP6\` FixedString(16), \`RegionID\` UInt32, \`UserID\` UInt64, \`CounterClass\` Int8, \`OS\` UInt8, \`UserAgent\` UInt8, \`URL\` String, \`Referer\` String, \`URLDomain\` String, \`RefererDomain\` String, \`Refresh\` UInt8, \`IsRobot\` UInt8, \`RefererCategories\` Array(UInt16), \`URLCategories\` Array(UInt16), \`URLRegions\` Array(UInt32), \`RefererRegions\` Array(UInt32), \`ResolutionWidth\` UInt16, \`ResolutionHeight\` UInt16, \`ResolutionDepth\` UInt8, \`FlashMajor\` UInt8, \`FlashMinor\` UInt8, \`FlashMinor2\` String, \`NetMajor\` UInt8, \`NetMinor\` UInt8, \`UserAgentMajor\` UInt16, \`UserAgentMinor\` FixedString(2), \`CookieEnable\` UInt8, \`JavascriptEnable\` UInt8, \`IsMobile\` UInt8, \`MobilePhone\` UInt8, \`MobilePhoneModel\` String, \`Params\` String, \`IPNetworkID\` UInt32, \`TraficSourceID\` Int8, \`SearchEngineID\` UInt16, \`SearchPhrase\` String, \`AdvEngineID\` UInt8, \`IsArtifical\` UInt8, \`WindowClientWidth\` UInt16, \`WindowClientHeight\` UInt16, \`ClientTimeZone\` Int16, \`ClientEventTime\` DateTime, \`SilverlightVersion1\` UInt8, \`SilverlightVersion2\` UInt8, \`SilverlightVersion3\` UInt32, \`SilverlightVersion4\` UInt16, \`PageCharset\` String, \`CodeVersion\` UInt32, \`IsLink\` UInt8, \`IsDownload\` UInt8, \`IsNotBounce\` UInt8, \`FUniqID\` UInt64, \`HID\` UInt32, \`IsOldCounter\` UInt8, \`IsEvent\` UInt8, \`IsParameter\` UInt8, \`DontCountHits\` UInt8, \`WithHash\` UInt8, \`HitColor\` FixedString(1), \`UTCEventTime\` DateTime, \`Age\` UInt8, \`Sex\` UInt8, \`Income\` UInt8, \`Interests\` UInt16, \`Robotness\` UInt8, \`GeneralInterests\` Array(UInt16), \`RemoteIP\` UInt32, \`RemoteIP6\` FixedString(16), \`WindowName\` Int32, \`OpenerName\` Int32, \`HistoryLength\` Int16, \`BrowserLanguage\` FixedString(2), \`BrowserCountry\` FixedString(2), \`SocialNetwork\` String, \`SocialAction\` String, \`HTTPError\` UInt16, \`SendTiming\` Int32, \`DNSTiming\` Int32, \`ConnectTiming\` Int32, \`ResponseStartTiming\` Int32, \`ResponseEndTiming\` Int32, \`FetchTiming\` Int32, \`RedirectTiming\` Int32, \`DOMInteractiveTiming\` Int32, \`DOMContentLoadedTiming\` Int32, \`DOMCompleteTiming\` Int32, \`LoadEventStartTiming\` Int32, \`LoadEventEndTiming\` Int32, \`NSToDOMContentLoadedTiming\` Int32, \`FirstPaintTiming\` Int32, \`RedirectCount\` Int8, \`SocialSourceNetworkID\` UInt8, \`SocialSourcePage\` String, \`ParamPrice\` Int64, \`ParamOrderID\` String, \`ParamCurrency\` FixedString(3), \`ParamCurrencyID\` UInt16, \`GoalsReached\` Array(UInt32), \`OpenstatServiceName\` String, \`OpenstatCampaignID\` String, \`OpenstatAdID\` String, \`OpenstatSourceID\` String, \`UTMSource\` String, \`UTMMedium\` String, \`UTMCampaign\` String, \`UTMContent\` String, \`UTMTerm\` String, \`FromTag\` String, \`HasGCLID\` UInt8, \`RefererHash\` UInt64, \`URLHash\` UInt64, \`CLID\` UInt32, \`YCLID\` UInt64, \`ShareService\` String, \`ShareURL\` String, \`ShareTitle\` String, \`ParsedParams.Key1\` Array(String), \`ParsedParams.Key2\` Array(String), \`ParsedParams.Key3\` Array(String), \`ParsedParams.Key4\` Array(String), \`ParsedParams.Key5\` Array(String), \`ParsedParams.ValueDouble\` Array(Float64), \`IslandID\` FixedString(16), \`RequestNum\` UInt32, \`RequestTry\` UInt8, INDEX test1 RegionID TYPE bloom_filter GRANULARITY 8129) ENGINE = MergeTree() PARTITION BY toYYYYMM(EventDate) ORDER BY (CounterID, EventDate, intHash32(UserID)) SAMPLE BY intHash32(UserID) SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5249', () => {
    const query = `CREATE TABLE test_bloom_filter_index(\`uint8\` UInt8, \`uint16\` UInt16, \`index_column\` UInt64,  INDEX test1 \`index_column\` TYPE bloom_filter GRANULARITY 1) ENGINE = MergeTree() PARTITION BY tuple() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5250', () => {
    const query = `CREATE TABLE truncate_test(uint8 UInt8) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5251', () => {
    const query = `CREATE TABLE rows_events_test (k UInt32, v UInt32) ENGINE = MergeTree ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5252', () => {
    const query = `CREATE TABLE t (x UInt64) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5253', () => {
    const query = `CREATE TABLE non_metadata_alters ( key UInt64,
value1 String,
value2 Enum8('Hello' = 1, 'World' = 2),
value3 UInt16,
value4 DateTime,
value5 Date
)
ENGINE = MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5254', () => {
    const query = `create table tesd_dedupl (x UInt32, y UInt32) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5255', () => {
    const query = `CREATE TABLE test_23634 (id Nullable(String), s Nullable(String), s1 Nullable(String)) ENGINE = MergeTree() ORDER BY (id,s) SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5256', () => {
    const query = `CREATE TABLE nullable_key (k Nullable(int), v int) ENGINE MergeTree ORDER BY k SETTINGS allow_nullable_key = 1, index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5257', () => {
    const query = `CREATE TABLE nullable_key_without_final_mark (s Nullable(String)) ENGINE MergeTree ORDER BY s SETTINGS allow_nullable_key = 1, write_final_mark = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5258', () => {
    const query = `CREATE TABLE nullable_minmax_index (k int, v Nullable(int), INDEX v_minmax v TYPE minmax GRANULARITY 4) ENGINE MergeTree ORDER BY k SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5259', () => {
    const query = `CREATE TABLE xxxx_null (\`ts\` Nullable(DateTime)) ENGINE = MergeTree ORDER BY toStartOfHour(ts) SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5260', () => {
    const query = `CREATE TABLE l (luid Nullable(Int16), name String) ENGINE=MergeTree order by luid settings allow_nullable_key=1 as
select * from VALUES ((1231, 'John'),(6666, 'Ksenia'),(Null, '---'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5261', () => {
    const query = `CREATE TABLE r (ruid Nullable(Int16), name String) ENGINE=MergeTree order by ruid  settings allow_nullable_key=1 as
select * from VALUES ((1231, 'John'),(1232, 'Johny'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5262', () => {
    const query = `CREATE TABLE l (luid Nullable(Int16), name String) ENGINE=MergeTree order by tuple() as select * from VALUES ((1231, 'John'),(6666, 'Ksenia'),(Null, '---'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5263', () => {
    const query = `CREATE TABLE r (ruid Nullable(Int16), name String) ENGINE=MergeTree order by tuple()  as select * from VALUES ((1231, 'John'),(1232, 'Johny'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5264', () => {
    const query = `create table data_01409 engine=Memory as select * from numbers(20);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5265', () => {
    const query = `CREATE TABLE test_joinGet(a String, b String, c Float64) ENGINE = Join(any, left, a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5266', () => {
    const query = `CREATE TABLE test_lc(a LowCardinality(String), b LowCardinality(String), c Float64) ENGINE = Join(any, left, a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5267', () => {
    const query = `CREATE TABLE test (
id   UInt32,
code LowCardinality(FixedString(2)) DEFAULT '--'
) ENGINE = MergeTree() PARTITION BY id ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5268', () => {
    const query = `CREATE TABLE tableConversion (conversionId String, value Nullable(Double)) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5269', () => {
    const query = `CREATE TABLE tableClick (clickId String, conversionId String, value Nullable(Double)) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5270', () => {
    const query = `CREATE TABLE leftjoin (id String) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5271', () => {
    const query = `CREATE TEMPORARY TABLE a (a UInt64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5272', () => {
    const query = `CREATE TABLE t (click_city_id UInt32, click_country_id UInt32) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5273', () => {
    const query = `CREATE TABLE d_src (id UInt64, country_id UInt8, name String) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5274', () => {
    const query = `CREATE DICTIONARY d (id UInt32, country_id UInt8, name String) PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' DB currentDatabase() table 'd_src'))
LIFETIME(MIN 1 MAX 1)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5275', () => {
    const query = `CREATE TABLE check_codec(a Int, b Int CODEC(Delta, ZSTD)) ENGINE = MergeTree ORDER BY a SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5276', () => {
    const query = `CREATE TABLE check_codec(a Int, b Int CODEC(Delta, ZSTD)) ENGINE = MergeTree ORDER BY a SETTINGS min_bytes_for_wide_part = '10M';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5277', () => {
    const query = `CREATE TABLE test (x UInt8) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5278', () => {
    const query = `CREATE TABLE test (x UInt8, y UInt8) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5279', () => {
    const query = `CREATE TABLE test (x UInt8, y UInt8 DEFAULT x + 1) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5280', () => {
    const query = `CREATE TABLE test (x UInt8, y UInt8 MATERIALIZED x + 1) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5281', () => {
    const query = `CREATE TABLE test (x UInt8, y UInt8 ALIAS x + 1, z String DEFAULT 'Hello') ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5282', () => {
    const query = `create table Test (impression_id String,impression_id_compressed FixedString(16) DEFAULT UUIDStringToNum(substring(impression_id, 1, 36)), impression_id_hashed UInt16 DEFAULT reinterpretAsUInt16(impression_id_compressed), event_date Date ) ENGINE = MergeTree(event_date, impression_id_hashed, (event_date, impression_id_hashed), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5283', () => {
    const query = `CREATE TABLE t0 (
\`c0\` Int32,
\`c1\` Int32 CODEC(NONE)
)
ENGINE = MergeTree()
ORDER BY tuple()
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5284', () => {
    const query = `CREATE DATABASE test_01383;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5285', () => {
    const query = `create table test_01383.fact (id1 Int64, id2 Int64, value Int64) ENGINE = MergeTree() ORDER BY id1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5286', () => {
    const query = `create table test_01383.dimension (id1 Int64, name String) ENGINE = MergeTree() ORDER BY id1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5287', () => {
    const query = `CREATE TABLE delta_codec_synthetic (\`id\` Decimal(38, 10) CODEC(Delta, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError BAD_ARGUMENTS } CREATE TABLE delta_codec_synthetic (\`id\` Decimal(38, 10) CODEC(DoubleDelta, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE delta_codec_synthetic (\`id\` Decimal(38, 10) CODEC(Gorilla, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE delta_codec_synthetic (\`id\` UInt64 CODEC(DoubleDelta(3), ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_CODEC_PARAMETER }
CREATE TABLE delta_codec_synthetic (\`id\` UInt64 CODEC(Gorilla('hello, world'), ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_CODEC_PARAMETER }
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5288', () => {
    const query = `CREATE TABLE table_rename_with_ttl (
date1 Date,
value1 String
)
ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test/table_rename_with_ttl_01378', '1')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5289', () => {
    const query = `create temporary table t1(a String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5290', () => {
    const query = `create temporary table t2(a LowCardinality(String));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5291', () => {
    const query = `CREATE TEMPORARY TABLE a (x String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5292', () => {
    const query = `CREATE TEMPORARY TABLE b (x LowCardinality(String));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5293', () => {
    const query = `CREATE TEMPORARY TABLE c (x Nullable(String));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5294', () => {
    const query = `CREATE TEMPORARY TABLE d (x LowCardinality(Nullable(String)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5295', () => {
    const query = `CREATE DATABASE dictdb_01376;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5296', () => {
    const query = `CREATE TABLE dictdb_01376.table_for_dict (
key_column UInt64,
value Float64
)
ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5297', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS dictdb_01376.dict_exists (
key_column UInt64,
value Float64 DEFAULT 77.77 INJECTIVE
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' DB 'dictdb_01376'))
LIFETIME(1)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5298', () => {
    const query = `CREATE TABLE tmp_01375 (n UInt32, s String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5299', () => {
    const query = `CREATE TABLE table_tsv_01375 AS tmp_01375 ENGINE = File(TSVWithNames);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5300', () => {
    const query = `CREATE TABLE table_csv_01375 AS tmp_01375 ENGINE = File(CSVWithNames);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5301', () => {
    const query = `CREATE TABLE null_issue_3767 (value Nullable(String)) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5302', () => {
    const query = `CREATE TABLE codecs (id UInt32, val UInt32, s String) ENGINE = MergeTree ORDER BY id
SETTINGS min_rows_for_wide_part = 10000, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5303', () => {
    const query = `CREATE TABLE codecs (id UInt32 CODEC(NONE), val UInt32 CODEC(NONE), s String CODEC(NONE)) ENGINE = MergeTree ORDER BY id
SETTINGS min_rows_for_wide_part = 10000, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5304', () => {
    const query = `CREATE TABLE codecs (id UInt32, val UInt32 CODEC(Delta, ZSTD), s String CODEC(ZSTD)) ENGINE = MergeTree ORDER BY id
SETTINGS min_rows_for_wide_part = 10000, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5305', () => {
    const query = `CREATE TABLE tt_error_1373 ( a   Int64, d   Int64, val Int64 ) 
ENGINE = SummingMergeTree((a, val)) PARTITION BY (a) ORDER BY (d); -- { serverError BAD_ARGUMENTS }
DROP TABLE IF EXISTS tt_error_1373;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5306', () => {
    const query = `CREATE TABLE tt_01373 (a Int64, d Int64, val Int64) 
ENGINE = SummingMergeTree PARTITION BY (a) ORDER BY (d) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5307', () => {
    const query = `CREATE TEMPORARY TABLE test (x String NULL);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5308', () => {
    const query = `CREATE TEMPORARY TABLE moving_sum_num (
\`k\` String,
\`dt\` DateTime,
\`v\` UInt64
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5309', () => {
    const query = `CREATE TABLE t1_01361 ( i UInt32,
time DateTime
) ENGINE = MergeTree()
PARTITION BY time
ORDER BY time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5310', () => {
    const query = `CREATE TABLE t2_01361 ( i UInt32,
time DateTime
) ENGINE = MergeTree()
PARTITION BY time
ORDER BY time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5311', () => {
    const query = `CREATE MATERIALIZED VIEW mv1_01361 TO t2_01361
AS SELECT * FROM (SELECT * FROM t1_01361);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5312', () => {
    const query = `CREATE TABLE b1_01361 AS t1_01361 ENGINE = Buffer(currentDatabase(), t1_01361, 1, 0, 0, 1, 1, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5313', () => {
    const query = `CREATE TABLE expected_times (QUERY_GROUP_ID String, max_query_duration_ms UInt64) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5314', () => {
    const query = `CREATE MATERIALIZED VIEW slow_log Engine=Memory AS (
SELECT * FROM
(
SELECT
extract(query,'/\\\\*\\\\s*QUERY_GROUP_ID:(.*?)\\\\s*\\\\*/') as QUERY_GROUP_ID,
*
FROM system.query_log
WHERE type<>1 and event_date >= yesterday()
) as ql
INNER JOIN expected_times USING (QUERY_GROUP_ID)
WHERE query_duration_ms > max_query_duration_ms
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5315', () => {
    const query = `CREATE TABLE mutation_delete_null_rows (
\`EventDate\` Date,
\`CounterID\` Nullable(String),
\`UserID\` Nullable(UInt32)
)
ENGINE = MergeTree()
ORDER BY EventDate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5316', () => {
    const query = `CREATE TEMPORARY TABLE constrained (
\`URL\` String,
CONSTRAINT identity CHECK domainWithoutWWW(URL) = domainWithoutWWW(URL),
CONSTRAINT is_utf8 CHECK isValidUTF8(URL)
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5317', () => {
    const query = `CREATE TEMPORARY TABLE constrained (x UInt8, CONSTRAINT bogus CHECK 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5318', () => {
    const query = `CREATE TABLE versioned_collapsing_table( d Date,
key1 UInt64,
key2 UInt32,
value String,
sign Int8,
version UInt16
)
ENGINE = ReplicatedVersionedCollapsingMergeTree('/clickhouse/{database}/versioned_collapsing_table/{shard}', '{replica}', sign, version)
PARTITION BY d
ORDER BY (key1, key2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5319', () => {
    const query = `CREATE TABLE t0 (\`c0\` String, \`c1\` Int32 CODEC(NONE), \`c2\` Int32) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5320', () => {
    const query = `create view table_01356_view_threads as select number % 10 as g, sum(number) as s from numbers_mt(1000000) group by g;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5321', () => {
    const query = `CREATE TABLE test1 (x UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5322', () => {
    const query = `CREATE TABLE test2 (x UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5323', () => {
    const query = `CREATE TABLE alter_01355 (CounterID UInt32, StartDate Date, UserID UInt32, VisitID UInt32, NestedColumn Nested(A UInt8, S String), ToDrop UInt32) ENGINE = MergeTree(StartDate, intHash32(UserID), (CounterID, StartDate, intHash32(UserID), VisitID), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5324', () => {
    const query = `CREATE TABLE table (id Int32, values Array(Tuple(LowCardinality(String), Int32)), date Date) ENGINE MergeTree() PARTITION BY toYYYYMM(date) ORDER BY (id, date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5325', () => {
    const query = `CREATE TABLE cdp_orders (
\`order_id\` String,
\`order_status\` String,
\`order_time\` DateTime
)
ENGINE = ReplacingMergeTree()
PARTITION BY toYYYYMMDD(order_time)
ORDER BY (order_time, order_id)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5326', () => {
    const query = `CREATE TABLE test_datetime (time DateTime) ENGINE=MergeTree PARTITION BY time ORDER BY time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5327', () => {
    const query = `CREATE TABLE test ( a Date,
b UInt32,
c UInt64,
p Nested (
at1 String,
at2 String
)
) ENGINE = MergeTree()
PARTITION BY a
ORDER BY b
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5328', () => {
    const query = `CREATE TABLE test (x Enum('hello' = 1, 'world' = 2), y String) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_01346/table', 'r1') PARTITION BY x ORDER BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5329', () => {
    const query = `CREATE TABLE test2 (x Enum('hello' = 1, 'world' = 2), y String) ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_01346/table', 'r2') PARTITION BY x ORDER BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5330', () => {
    const query = `CREATE TABLE index (d Date) ENGINE = MergeTree ORDER BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5331', () => {
    const query = `CREATE TABLE test (
\`id\` Nullable(String),
\`status\` Nullable(Enum8('NEW' = 0, 'CANCEL' = 1)),
\`nested.nestedType\` Array(Nullable(String)),
\`partition\` Date
) ENGINE = MergeTree() PARTITION BY partition
ORDER BY
partition SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5332', () => {
    const query = `CREATE TABLE test (x Enum('hello' = 1, 'world' = 2), y String) ENGINE = MergeTree PARTITION BY x ORDER BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5333', () => {
    const query = `CREATE TABLE test_01343 (x String) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5334', () => {
    const query = `CREATE TABLE t_uuid (x UInt8, y UUID, z String) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5335', () => {
    const query = `CREATE TABLE mt (x String, y UInt64, INDEX idx (y) TYPE minmax GRANULARITY 1) ENGINE = MergeTree ORDER BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5336', () => {
    const query = `create table tsv_raw (strval String, intval Int64, b1 String, b2 String, b3 String, b4 String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5337', () => {
    const query = `create table table_01323_many_parts (x UInt64) engine = MergeTree order by x partition by x % 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5338', () => {
    const query = `CREATE TABLE test (key UInt64, a UInt8, b String, c Float64) ENGINE = MergeTree() ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5339', () => {
    const query = `CREATE TABLE t1 (id UInt64) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5340', () => {
    const query = `CREATE TABLE t2 (id UInt64) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5341', () => {
    const query = `CREATE TABLE test_nullable_float_issue7347 (ne UInt64,test Nullable(Float64)) ENGINE = MergeTree() PRIMARY KEY (ne) ORDER BY (ne);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5342', () => {
    const query = `CREATE TABLE tags ( id String,
seqs Array(UInt8),
create_time DateTime DEFAULT now()
) engine=ReplacingMergeTree()
ORDER BY (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5343', () => {
    const query = `create table TestTable (column String, start DateTime, end DateTime) engine MergeTree order by start;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5344', () => {
    const query = `CREATE TABLE aaa ( id UInt16,
data String
)
ENGINE = MergeTree()
PARTITION BY tuple()
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5345', () => {
    const query = `CREATE TABLE bbb ( id UInt16,
data String
)
ENGINE = MergeTree()
PARTITION BY tuple()
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5346', () => {
    const query = `create table data_01320 (key Int) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5347', () => {
    const query = `create table dist_01320 as data_01320 Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01320, key + rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5348', () => {
    const query = `create table data_01319 (key Int, sub_key Int) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5349', () => {
    const query = `create table dist_layer_01319 as data_01319 Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01319, sub_key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5350', () => {
    const query = `create table dist_01319 as data_01319 Engine=Distributed(test_unavailable_shard, currentDatabase(), dist_layer_01319, key+1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5351', () => {
    const query = `CREATE TABLE local_table_1 (id String) ENGINE = MergeTree ORDER BY (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5352', () => {
    const query = `CREATE TABLE local_table_2(id String) ENGINE = MergeTree ORDER BY (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5353', () => {
    const query = `CREATE TABLE local_table_merged (id String) ENGINE = Merge('default', 'local_table_1|local_table_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5354', () => {
    const query = `CREATE TABLE distributed_table_1 (id String) ENGINE = Distributed(test_shard_localhost, default, local_table_1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5355', () => {
    const query = `CREATE TABLE distributed_table_2 (id String) ENGINE = Distributed(test_shard_localhost, default, local_table_2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5356', () => {
    const query = `CREATE TABLE distributed_table_merged (id String) ENGINE = Merge('default', 'distributed_table_1|distributed_table_2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5357', () => {
    const query = `CREATE TABLE r1 (x String) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/r', 'r1') ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5358', () => {
    const query = `CREATE TABLE r2 (x String) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/r', 'r2') ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5359', () => {
    const query = `create table final_bug (x UInt64, y UInt8) engine = ReplacingMergeTree(y) order by x settings index_granularity = 8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5360', () => {
    const query = `create table map_test engine=TinyLog() as (select (number + 1) as n, ([1, number], [1,2]) as map from numbers(1, 5));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5361', () => {
    const query = `create table tab engine=Memory() as (select map(1, toInt32(2), number, 2) as m from numbers(1, 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5362', () => {
    const query = `create table tab engine=Memory() as (select ([1, number], [toInt32(2),2]) as map from numbers(1, 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5363', () => {
    const query = `CREATE TABLE encryption_test (
input String,
key String DEFAULT unhex('fb9958e2e897ef3fdb49067b51a24af645b3626eed2f9ea1dc7fd4dd71b7e38f9a68db2a3184f952382c783785f9d77bf923577108a88adaacae5c141b1576b0'),
iv String DEFAULT unhex('8CA3554377DFF8A369BC50A89780DD85'),
key32 String DEFAULT substring(key, 1, 32),
key24 String DEFAULT substring(key, 1, 24),
key16 String DEFAULT substring(key, 1, 16)
) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5364', () => {
    const query = `CREATE TABLE decrypt_null ( dt DateTime,
user_id UInt32,
encrypted String,
iv String
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5365', () => {
    const query = `CREATE TABLE add_table (
key UInt64,
value1 String
)
ENGINE = MergeTree()
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5366', () => {
    const query = `CREATE TABLE test (x UInt8, y String, z Array(String)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5367', () => {
    const query = `CREATE TABLE test (x UInt64) ENGINE = MergeTree ORDER BY x SETTINGS index_granularity = 1000, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5368', () => {
    const query = `CREATE TEMPORARY TABLE enum (x Enum('hello' = 1, 'world' = 2));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5369', () => {
    const query = `CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5370', () => {
    const query = `CREATE ROW POLICY filter ON t USING (x % 2 = 1) TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5371', () => {
    const query = `CREATE TABLE test_01307 (id UInt64, val String, INDEX ind val TYPE bloom_filter() GRANULARITY 1) ENGINE = MergeTree() ORDER BY id SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5372', () => {
    const query = `CREATE TABLE data (ts DateTime, field String, num_field Nullable(Float64)) ENGINE = MergeTree() PARTITION BY ts ORDER BY ts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5373', () => {
    const query = `create table t (x UInt64) engine = MergeTree order by (x, intHash64(x)) sample by intHash64(x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5374', () => {
    const query = `create table t_buf as t engine = Buffer(currentDatabase(), 't', 16, 20, 100, 100000, 10000000, 50000000, 250000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5375', () => {
    const query = `create table h (EventDate Date, CounterID UInt64, WatchID UInt64) engine = MergeTree order by (CounterID, EventDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5376', () => {
    const query = `create table polygon_01302 (x Array(Array(Array(Tuple(Float64, Float64)))), y Array(Array(Array(Tuple(Float64, Float64))))) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5377', () => {
    const query = `CREATE TABLE geo (p Tuple(Float64, Float64), id Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5378', () => {
    const query = `CREATE TABLE geo (p Array(Tuple(Float64, Float64)), id Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5379', () => {
    const query = `CREATE TABLE geo (p Array(Array(Tuple(Float64, Float64))), id Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5380', () => {
    const query = `CREATE TABLE geo (p Array(Array(Array(Tuple(Float64, Float64)))), id Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5381', () => {
    const query = `CREATE TABLE geo (p Tuple(Float64, Float64), s String, id Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5382', () => {
    const query = `CREATE TABLE geo (p Array(Tuple(Float64, Float64)), s String, id Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5383', () => {
    const query = `CREATE TABLE geo (p Array(Array(Tuple(Float64, Float64))), s String, id Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5384', () => {
    const query = `CREATE TABLE geo (p Array(Array(Array(Tuple(Float64, Float64)))), s String, id Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5385', () => {
    const query = `CREATE TABLE geo (s String, id Int) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5386', () => {
    const query = `create table merge_tree ( CounterID UInt32,  StartDate Date,  Sign Int8,  VisitID UInt64,  UserID UInt64,  StartTime DateTime,   ClickLogID UInt64) ENGINE = CollapsingMergeTree(StartDate, intHash32(UserID), tuple(CounterID, StartDate, intHash32(UserID), VisitID, ClickLogID), 8192, Sign);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5387', () => {
    const query = `create table merge1 ( CounterID UInt32,  StartDate Date,  Sign Int8,  VisitID UInt64,  UserID UInt64,  StartTime DateTime,   ClickLogID UInt64) ENGINE = CollapsingMergeTree(StartDate, intHash32(UserID), tuple(CounterID, StartDate, intHash32(UserID), VisitID, ClickLogID), 8192, Sign);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5388', () => {
    const query = `create table merge2 ( CounterID UInt32,  StartDate Date,  Sign Int8,  VisitID UInt64,  UserID UInt64,  StartTime DateTime,   ClickLogID UInt64) ENGINE = CollapsingMergeTree(StartDate, intHash32(UserID), tuple(CounterID, StartDate, intHash32(UserID), VisitID, ClickLogID), 8192, Sign);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5389', () => {
    const query = `create table merge ( CounterID UInt32,  StartDate Date,  Sign Int8,  VisitID UInt64,  UserID UInt64,  StartTime DateTime,   ClickLogID UInt64) ENGINE = Merge(currentDatabase(), 'merge\\[0-9\\]');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5390', () => {
    const query = `CREATE QUOTA q1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5391', () => {
    const query = `CREATE QUOTA q2_01297 TO NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5392', () => {
    const query = `CREATE QUOTA q3_01297 FOR INTERVAL 1 HOUR NO LIMITS NOT KEYED TO NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5393', () => {
    const query = `CREATE QUOTA q4_01297 KEYED BY none FOR 1 hour NO LIMITS;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5394', () => {
    const query = `CREATE QUOTA q1_01297 NOT KEYED;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5395', () => {
    const query = `CREATE QUOTA q2_01297 KEY BY user_name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5396', () => {
    const query = `CREATE QUOTA q3_01297 KEY BY ip_address;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5397', () => {
    const query = `CREATE QUOTA q4_01297 KEY BY client_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5398', () => {
    const query = `CREATE QUOTA q5_01297 KEY BY client_key, user_name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5399', () => {
    const query = `CREATE QUOTA q6_01297 KEY BY client_key, ip_address;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5400', () => {
    const query = `CREATE QUOTA q7_01297 KEYED BY 'none';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5401', () => {
    const query = `CREATE QUOTA q8_01297 KEYED BY 'user name';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5402', () => {
    const query = `CREATE QUOTA q9_01297 KEYED BY 'IP_ADDRESS';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5403', () => {
    const query = `CREATE QUOTA q10_01297 KEYED BY CLIENT_KEY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5404', () => {
    const query = `CREATE QUOTA q11_01297 KEYED BY 'client key or user name';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5405', () => {
    const query = `CREATE QUOTA q12_01297 KEYED BY 'client key or ip address';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5406', () => {
    const query = `CREATE QUOTA q1_01297 FOR INTERVAL 5 DAY MAX ERRORS = 3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5407', () => {
    const query = `CREATE QUOTA q2_01297 FOR INTERVAL 30 minute MAX ERRORS 4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5408', () => {
    const query = `CREATE QUOTA q3_01297 FOR 1 HOUR errors MAX 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5409', () => {
    const query = `CREATE QUOTA q4_01297 FOR 2000 SECOND errors MAX 5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5410', () => {
    const query = `CREATE QUOTA q5_01297 FOR RANDOMIZED INTERVAL 1 YEAR MAX errors = 11, MAX queries = 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5411', () => {
    const query = `CREATE QUOTA q6_01297 FOR 2 MONTH MAX errors = 11, queries = 100, result_rows = 1000, result_bytes = 10000, read_rows = 1001, read_bytes = 10001, execution_time=2.5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5412', () => {
    const query = `CREATE QUOTA q7_01297 FOR 1 QUARTER MAX errors 11, queries 100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5413', () => {
    const query = `CREATE QUOTA q8_01297 FOR 0.5 year ERRORS MAX 11, QUERIES MAX 100, FOR 2 MONTH RESULT ROWS MAX 1002;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5414', () => {
    const query = `CREATE ROLE r1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5415', () => {
    const query = `CREATE USER u1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5416', () => {
    const query = `CREATE QUOTA q1_01297 TO NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5417', () => {
    const query = `CREATE QUOTA q2_01297 TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5418', () => {
    const query = `CREATE QUOTA q3_01297 TO r1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5419', () => {
    const query = `CREATE QUOTA q4_01297 TO u1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5420', () => {
    const query = `CREATE QUOTA q5_01297 TO r1_01297, u1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5421', () => {
    const query = `CREATE QUOTA q6_01297 TO ALL EXCEPT r1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5422', () => {
    const query = `CREATE QUOTA q7_01297 TO ALL EXCEPT r1_01297, u1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5423', () => {
    const query = `CREATE QUOTA q1_01297, q2_01297 FOR 1 day MAX errors=5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5424', () => {
    const query = `CREATE QUOTA q1_01297 KEYED BY user_name TO r1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5425', () => {
    const query = `CREATE QUOTA q2_01297 FOR 2 MONTH MAX errors = 11, queries = 100, result_rows = 1000, result_bytes = 10000, read_rows = 1001, read_bytes = 10001, execution_time=2.5 TO r1_01297, u1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5426', () => {
    const query = `CREATE QUOTA q3_01297 KEYED BY client_key, user_name FOR 0.5 YEAR ERRORS MAX 11, QUERIES MAX 100, FOR 2 MONTH RESULT ROWS MAX 1002;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5427', () => {
    const query = `CREATE QUOTA q4_01297 FOR 1 WEEK TRACKING ONLY TO ALL EXCEPT u1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5428', () => {
    const query = `CREATE QUOTA q1_01297 KEYED BY user_name FOR INTERVAL 1 minute MAX query_selects = 1 TO r1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5429', () => {
    const query = `CREATE QUOTA q2_01297 KEYED BY user_name FOR INTERVAL 1 minute MAX query_inserts = 1 TO r1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5430', () => {
    const query = `CREATE QUOTA q1_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '12K';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5431', () => {
    const query = `CREATE QUOTA q2_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '12Ki';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5432', () => {
    const query = `CREATE QUOTA q3_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '12M';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5433', () => {
    const query = `CREATE QUOTA q4_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '12Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5434', () => {
    const query = `CREATE QUOTA q5_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '12G';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5435', () => {
    const query = `CREATE QUOTA q6_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '12Gi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5436', () => {
    const query = `CREATE QUOTA q7_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '12T';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5437', () => {
    const query = `CREATE QUOTA q8_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '12Ti';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5438', () => {
    const query = `CREATE QUOTA q9_01297 FOR INTERVAL 1 MINUTE MAX execution_time = '12K';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5439', () => {
    const query = `CREATE QUOTA q10_01297 FOR INTERVAL 1 MINUTE MAX execution_time = '12Ki';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5440', () => {
    const query = `CREATE QUOTA q11_01297 FOR INTERVAL 1 MINUTE MAX execution_time = '12M';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5441', () => {
    const query = `CREATE QUOTA q12_01297 FOR INTERVAL 1 MINUTE MAX execution_time = '12Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5442', () => {
    const query = `CREATE QUOTA q13_01297 FOR INTERVAL 1 MINUTE MAX execution_time = '12G';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5443', () => {
    const query = `CREATE QUOTA q14_01297 FOR INTERVAL 1 MINUTE MAX execution_time = '12Gi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5444', () => {
    const query = `CREATE QUOTA q15_01297 FOR INTERVAL 1 MINUTE MAX query_selects = 1.5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5445', () => {
    const query = `CREATE QUOTA q16_01297 FOR INTERVAL 1 MINUTE MAX execution_time = 1.5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5446', () => {
    const query = `CREATE QUOTA q17_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '1.5'; -- { clientError CANNOT_PARSE_INPUT_ASSERTION_FAILED } CREATE QUOTA q18_01297 FOR INTERVAL 1 MINUTE MAX execution_time = '1.5'; -- { clientError CANNOT_PARSE_INPUT_ASSERTION_FAILED }
SHOW CREATE QUOTA q1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5447', () => {
    const query = `CREATE QUOTA q1_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '18446744073709551615';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5448', () => {
    const query = `CREATE QUOTA q2_01297 FOR INTERVAL 1 MINUTE MAX execution_time = '18446744073';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5449', () => {
    const query = `CREATE QUOTA q1_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '0';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5450', () => {
    const query = `CREATE QUOTA q2_01297 FOR INTERVAL 1 MINUTE MAX execution_time = '0';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5451', () => {
    const query = `CREATE QUOTA q1_01297 FOR INTERVAL 1 MINUTE MAX query_selects = '-1'; -- { clientError CANNOT_PARSE_NUMBER } CREATE QUOTA q2_01297 FOR INTERVAL 1 MINUTE MAX execution_time = '-1'; -- { clientError CANNOT_PARSE_NUMBER }
SELECT '-- syntax test';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5452', () => {
    const query = `CREATE QUOTA q1_01297 FOR INTERVAL 1 MINUTE MAX query_selects = ' 12 ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5453', () => {
    const query = `CREATE QUOTA q2_01297 FOR INTERVAL 1 MINUTE MAX execution_time = ' 12 ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5454', () => {
    const query = `CREATE QUOTA q3_01297 FOR INTERVAL 1 MINUTE MAX query_selects = ' 12k ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5455', () => {
    const query = `CREATE QUOTA q4_01297 FOR INTERVAL 1 MINUTE MAX execution_time = ' 12k ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5456', () => {
    const query = `CREATE QUOTA q5_01297 FOR INTERVAL 1 MINUTE MAX execution_time = ' 00 ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5457', () => {
    const query = `CREATE QUOTA q6_01297 FOR INTERVAL 1 MINUTE MAX execution_time = ' 00 ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5458', () => {
    const query = `CREATE QUOTA q7_01297 FOR INTERVAL 1 MINUTE MAX execution_time = ' 00k ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5459', () => {
    const query = `CREATE QUOTA q8_01297 FOR INTERVAL 1 MINUTE MAX execution_time = ' 00k ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5460', () => {
    const query = `CREATE QUOTA q9_01297 FOR INTERVAL 1 MINUTE MAX execution_time = ' 00123k ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5461', () => {
    const query = `CREATE QUOTA q10_01297 FOR INTERVAL 1 MINUTE MAX execution_time = ' 00123k ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5462', () => {
    const query = `create table merge_distributed1 ( CounterID UInt32,  StartDate Date,  Sign Int8,  VisitID UInt64,  UserID UInt64,  StartTime DateTime,   ClickLogID UInt64) ENGINE = CollapsingMergeTree(StartDate, intHash32(UserID), tuple(CounterID, StartDate, intHash32(UserID), VisitID, ClickLogID), 8192, Sign);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5463', () => {
    const query = `create table merge_distributed ( CounterID UInt32,  StartDate Date,  Sign Int8,  VisitID UInt64,  UserID UInt64,  StartTime DateTime,   ClickLogID UInt64) ENGINE = Distributed(test_shard_localhost, currentDatabase(), merge_distributed1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5464', () => {
    const query = `create table data_01295 (key Int) Engine=AggregatingMergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5465', () => {
    const query = `CREATE DATABASE db_01296;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5466', () => {
    const query = `CREATE POLICY p1_01296 ON table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5467', () => {
    const query = `CREATE ROW POLICY p1_01296, p2_01296 ON table USING 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5468', () => {
    const query = `CREATE USER u1_01296;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5469', () => {
    const query = `CREATE ROW POLICY p3_01296 ON table, table2 TO u1_01296;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5470', () => {
    const query = `CREATE ROW POLICY p4_01296 ON table, p5_01296 ON table2 USING a=b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5471', () => {
    const query = `CREATE TABLE delta_table (\`id\` UInt64 CODEC(Delta(tuple()))) ENGINE = MergeTree() ORDER BY tuple(); --{serverError ILLEGAL_CODEC_PARAMETER} CREATE TABLE zstd_table (\`id\` UInt64 CODEC(ZSTD(tuple()))) ENGINE = MergeTree() ORDER BY tuple(); --{serverError ILLEGAL_CODEC_PARAMETER}
CREATE TABLE lz4_table (\`id\` UInt64 CODEC(LZ4HC(tuple()))) ENGINE = MergeTree() ORDER BY tuple(); --{serverError ILLEGAL_CODEC_PARAMETER}
CREATE TABLE lz4_table (\`id\` UInt64 CODEC(LZ4(tuple()))) ENGINE = MergeTree() ORDER BY tuple(); --{serverError DATA_TYPE_CANNOT_HAVE_ARGUMENTS}
SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5472', () => {
    const query = `CREATE ROW POLICY p1_01295 ON db.table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5473', () => {
    const query = `CREATE ROW POLICY p2_01295 ON db.table USING NONE TO NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5474', () => {
    const query = `CREATE POLICY p3_01295 ON db.table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5475', () => {
    const query = `CREATE ROW POLICY p1_01295 ON db.table USING a<b AND c>d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5476', () => {
    const query = `CREATE ROW POLICY p2_01295 ON db.table USING id=currentUser() AS RESTRICTIVE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5477', () => {
    const query = `CREATE ROW POLICY p3_01295 ON db.table USING 1 AS PERMISSIVE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5478', () => {
    const query = `CREATE ROLE r1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5479', () => {
    const query = `CREATE USER u1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5480', () => {
    const query = `CREATE POLICY p1_01295 ON db.table TO NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5481', () => {
    const query = `CREATE POLICY p2_01295 ON db.table TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5482', () => {
    const query = `CREATE POLICY p3_01295 ON db.table TO r1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5483', () => {
    const query = `CREATE POLICY p4_01295 ON db.table TO u1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5484', () => {
    const query = `CREATE POLICY p5_01295 ON db.table TO r1_01295, u1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5485', () => {
    const query = `CREATE POLICY p6_01295 ON db.table TO ALL EXCEPT r1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5486', () => {
    const query = `CREATE POLICY p7_01295 ON db.table TO ALL EXCEPT r1_01295, u1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5487', () => {
    const query = `CREATE ROW POLICY p1_01295, p2_01295 ON db.table USING 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5488', () => {
    const query = `CREATE ROW POLICY p3_01295 ON db.table, db2.table2 TO u1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5489', () => {
    const query = `CREATE ROW POLICY p4_01295 ON db.table, p5_01295 ON db2.table2 USING a=b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5490', () => {
    const query = `CREATE ROW POLICY p2_01295 ON db.table USING id=currentUser() AS RESTRICTIVE TO u1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5491', () => {
    const query = `CREATE ROW POLICY p3_01295 ON db.table USING 1 AS PERMISSIVE TO ALL EXCEPT r1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5492', () => {
    const query = `create database db_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5493', () => {
    const query = `create table db_01294.dist_01294 as system.one engine=Distributed(test_shard_localhost, system, one);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5494', () => {
    const query = `CREATE SETTINGS PROFILE s1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5495', () => {
    const query = `CREATE SETTINGS PROFILE s2_01294 SETTINGS NONE TO NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5496', () => {
    const query = `CREATE PROFILE s3_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5497', () => {
    const query = `CREATE PROFILE s1_01294 SETTINGS NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5498', () => {
    const query = `CREATE PROFILE s2_01294 SETTINGS INHERIT 'default';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5499', () => {
    const query = `CREATE PROFILE s3_01294 SETTINGS max_memory_usage=5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5500', () => {
    const query = `CREATE PROFILE s4_01294 SETTINGS max_memory_usage MIN=5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5501', () => {
    const query = `CREATE PROFILE s5_01294 SETTINGS max_memory_usage MAX=5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5502', () => {
    const query = `CREATE PROFILE s6_01294 SETTINGS max_memory_usage CONST;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5503', () => {
    const query = `CREATE PROFILE s7_01294 SETTINGS max_memory_usage WRITABLE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5504', () => {
    const query = `CREATE PROFILE s8_01294 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 CONST;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5505', () => {
    const query = `CREATE PROFILE s9_01294 SETTINGS INHERIT 'default', max_memory_usage=5000000 WRITABLE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5506', () => {
    const query = `CREATE PROFILE s10_01294 SETTINGS INHERIT s1_01294, s3_01294, INHERIT default, readonly=0, max_memory_usage MAX 6000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5507', () => {
    const query = `CREATE ROLE r1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5508', () => {
    const query = `CREATE USER u1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5509', () => {
    const query = `CREATE PROFILE s1_01294 TO NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5510', () => {
    const query = `CREATE PROFILE s2_01294 TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5511', () => {
    const query = `CREATE PROFILE s3_01294 TO r1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5512', () => {
    const query = `CREATE PROFILE s4_01294 TO u1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5513', () => {
    const query = `CREATE PROFILE s5_01294 TO r1_01294, u1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5514', () => {
    const query = `CREATE PROFILE s6_01294 TO ALL EXCEPT r1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5515', () => {
    const query = `CREATE PROFILE s7_01294 TO ALL EXCEPT r1_01294, u1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5516', () => {
    const query = `CREATE SETTINGS PROFILE s1_01294 SETTINGS readonly=0 TO r1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5517', () => {
    const query = `CREATE PROFILE s1_01294, s2_01294 SETTINGS max_memory_usage=5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5518', () => {
    const query = `CREATE PROFILE s3_01294, s4_01294 TO ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5519', () => {
    const query = `CREATE PROFILE s1_01294 SETTINGS readonly=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5520', () => {
    const query = `CREATE PROFILE s2_01294 SETTINGS readonly readonly;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5521', () => {
    const query = `CREATE PROFILE s3_01294 SETTINGS profile readonly;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5522', () => {
    const query = `CREATE PROFILE s4_01294 SETTINGS profile readonly, readonly;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5523', () => {
    const query = `CREATE PROFILE s5_01294 SETTINGS profile readonly, readonly=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5524', () => {
    const query = `CREATE PROFILE s6_01294 SETTINGS profile readonly, readonly readonly;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5525', () => {
    const query = `CREATE PROFILE s1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5526', () => {
    const query = `CREATE PROFILE s2_01294 SETTINGS readonly=0 TO r1_01294;;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5527', () => {
    const query = `CREATE PROFILE s3_01294 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 CONST TO r1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5528', () => {
    const query = `CREATE PROFILE s4_01294 SETTINGS max_memory_usage=5000000 TO r1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5529', () => {
    const query = `CREATE PROFILE s5_01294 SETTINGS INHERIT default, readonly=0, max_memory_usage MAX 6000000 WRITABLE TO u1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5530', () => {
    const query = `CREATE PROFILE s6_01294 TO ALL EXCEPT u1_01294, r1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5531', () => {
    const query = `create table null_01293 (key Int) engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5532', () => {
    const query = `create table dist_01293 as null_01293 engine=Distributed(test_cluster_two_shards, currentDatabase(), null_01293, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5533', () => {
    const query = `CREATE ROLE r1_01293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5534', () => {
    const query = `CREATE ROLE r2_01293 SETTINGS NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5535', () => {
    const query = `CREATE ROLE r1_01293@'%';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5536', () => {
    const query = `CREATE ROLE r2_01293@'%.myhost.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5537', () => {
    const query = `CREATE ROLE r1_01293 SETTINGS NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5538', () => {
    const query = `CREATE ROLE r2_01293 SETTINGS PROFILE 'default';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5539', () => {
    const query = `CREATE ROLE r3_01293 SETTINGS max_memory_usage=5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5540', () => {
    const query = `CREATE ROLE r4_01293 SETTINGS max_memory_usage MIN=5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5541', () => {
    const query = `CREATE ROLE r5_01293 SETTINGS max_memory_usage MAX=5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5542', () => {
    const query = `CREATE ROLE r6_01293 SETTINGS max_memory_usage CONST;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5543', () => {
    const query = `CREATE ROLE r7_01293 SETTINGS max_memory_usage WRITABLE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5544', () => {
    const query = `CREATE ROLE r8_01293 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 CONST;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5545', () => {
    const query = `CREATE ROLE r9_01293 SETTINGS PROFILE 'default', max_memory_usage=5000000 WRITABLE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5546', () => {
    const query = `CREATE ROLE r1_01293, r2_01293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5547', () => {
    const query = `CREATE ROLE r1_01293 SETTINGS readonly=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5548', () => {
    const query = `CREATE ROLE r3_01293 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 WRITABLE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5549', () => {
    const query = `CREATE ROLE r4_01293 SETTINGS PROFILE 'default', max_memory_usage=5000000, readonly=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5550', () => {
    const query = `CREATE ROLE r5_01293 SETTINGS NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5551', () => {
    const query = `create table data_01292 ( key Int,
index key_idx (key) type minmax granularity 1
) Engine=MergeTree() ORDER BY (key+0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5552', () => {
    const query = `CREATE USER u1_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5553', () => {
    const query = `CREATE USER u2_01292 NOT IDENTIFIED HOST ANY SETTINGS NONE DEFAULT ROLE ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5554', () => {
    const query = `CREATE USER u3_01292 DEFAULT ROLE ALL IDENTIFIED WITH no_password SETTINGS NONE HOST ANY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5555', () => {
    const query = `CREATE USER u1_01292 NOT IDENTIFIED;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5556', () => {
    const query = `CREATE USER u2_01292 IDENTIFIED WITH plaintext_password BY 'qwe123';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5557', () => {
    const query = `CREATE USER u3_01292 IDENTIFIED BY 'qwe123';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5558', () => {
    const query = `CREATE USER u4_01292 IDENTIFIED WITH sha256_password BY 'qwe123';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5559', () => {
    const query = `CREATE USER u5_01292 IDENTIFIED WITH sha256_hash BY '18138372FAD4B94533CD4881F03DC6C69296DD897234E0CEE83F727E2E6B1F63';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5560', () => {
    const query = `CREATE USER u6_01292 IDENTIFIED WITH double_sha1_password BY 'qwe123';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5561', () => {
    const query = `CREATE USER u7_01292 IDENTIFIED WITH double_sha1_hash BY '8DCDD69CE7D121DE8013062AEAEB2A148910D50E';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5562', () => {
    const query = `CREATE USER u8_01292 IDENTIFIED WITH bcrypt_password BY 'qwe123';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5563', () => {
    const query = `CREATE USER u9_01292 IDENTIFIED WITH bcrypt_hash BY '\$2a\$12\$rz5iy2LhuwBezsM88ZzWiemOVUeJ94xHTzwAlLMDhTzwUxOHaY64q';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5564', () => {
    const query = `CREATE USER u1_01292 HOST ANY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5565', () => {
    const query = `CREATE USER u2_01292 HOST NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5566', () => {
    const query = `CREATE USER u3_01292 HOST LOCAL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5567', () => {
    const query = `CREATE USER u4_01292 HOST NAME 'myhost.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5568', () => {
    const query = `CREATE USER u5_01292 HOST NAME 'myhost.com', LOCAL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5569', () => {
    const query = `CREATE USER u6_01292 HOST LOCAL, NAME 'myhost.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5570', () => {
    const query = `CREATE USER u7_01292 HOST REGEXP '.*\\\\.myhost\\\\.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5571', () => {
    const query = `CREATE USER u8_01292 HOST LIKE '%';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5572', () => {
    const query = `CREATE USER u9_01292 HOST LIKE '%.myhost.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5573', () => {
    const query = `CREATE USER u10_01292 HOST LIKE '%.myhost.com', '%.myhost2.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5574', () => {
    const query = `CREATE USER u11_01292 HOST IP '127.0.0.1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5575', () => {
    const query = `CREATE USER u12_01292 HOST IP '192.168.1.1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5576', () => {
    const query = `CREATE USER u13_01292 HOST IP '192.168.0.0/16';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5577', () => {
    const query = `CREATE USER u14_01292 HOST IP '::1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5578', () => {
    const query = `CREATE USER u15_01292 HOST IP '2001:0db8:11a3:09d7:1f34:8a2e:07a0:765d';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5579', () => {
    const query = `CREATE USER u16_01292 HOST IP '65:ff0c::/96', '::1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5580', () => {
    const query = `CREATE USER u1_01292@'%';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5581', () => {
    const query = `CREATE USER u2_01292@'%.myhost.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5582', () => {
    const query = `CREATE USER u3_01292@'192.168.%.%';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5583', () => {
    const query = `CREATE USER u4_01292@'::1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5584', () => {
    const query = `CREATE USER u5_01292@'65:ff0c::/96';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5585', () => {
    const query = `CREATE USER u1_01292 SETTINGS NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5586', () => {
    const query = `CREATE USER u2_01292 SETTINGS PROFILE 'default';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5587', () => {
    const query = `CREATE USER u3_01292 SETTINGS max_memory_usage=5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5588', () => {
    const query = `CREATE USER u4_01292 SETTINGS max_memory_usage MIN=5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5589', () => {
    const query = `CREATE USER u5_01292 SETTINGS max_memory_usage MAX=5000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5590', () => {
    const query = `CREATE USER u6_01292 SETTINGS max_memory_usage CONST;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5591', () => {
    const query = `CREATE USER u7_01292 SETTINGS max_memory_usage WRITABLE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5592', () => {
    const query = `CREATE USER u8_01292 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 CONST;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5593', () => {
    const query = `CREATE USER u9_01292 SETTINGS PROFILE 'default', max_memory_usage=5000000 WRITABLE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5594', () => {
    const query = `CREATE ROLE r1_01292, r2_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5595', () => {
    const query = `CREATE USER u1_01292 DEFAULT ROLE ALL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5596', () => {
    const query = `CREATE USER u2_01292 DEFAULT ROLE NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5597', () => {
    const query = `CREATE USER u3_01292 DEFAULT ROLE r1_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5598', () => {
    const query = `CREATE USER u4_01292 DEFAULT ROLE r1_01292, r2_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5599', () => {
    const query = `CREATE USER u5_01292 DEFAULT ROLE ALL EXCEPT r2_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5600', () => {
    const query = `CREATE USER u6_01292 DEFAULT ROLE ALL EXCEPT r1_01292, r2_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5601', () => {
    const query = `CREATE USER u1_01292 IDENTIFIED WITH plaintext_password BY 'qwe123' HOST LOCAL SETTINGS readonly=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5602', () => {
    const query = `CREATE USER IF NOT EXISTS u1_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5603', () => {
    const query = `CREATE USER OR REPLACE u1_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5604', () => {
    const query = `CREATE USER IF NOT EXISTS u2_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5605', () => {
    const query = `CREATE USER u1_01292, u2_01292 DEFAULT ROLE NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5606', () => {
    const query = `CREATE USER u3_01292, u4_01292 HOST LIKE '%.%.myhost.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5607', () => {
    const query = `CREATE USER u5_01292@'%.host.com', u6_01292@'%.host.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5608', () => {
    const query = `CREATE USER u7_01292@'%.host.com', u8_01292@'%.otherhost.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5609', () => {
    const query = `CREATE USER u1_01292 IDENTIFIED WITH plaintext_password BY 'qwe123' HOST LOCAL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5610', () => {
    const query = `CREATE USER u2_01292 NOT IDENTIFIED HOST LIKE '%.%.myhost.com' DEFAULT ROLE NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5611', () => {
    const query = `CREATE USER u3_01292 IDENTIFIED BY 'qwe123' HOST IP '192.168.0.0/16', '192.169.1.1', '::1' DEFAULT ROLE r1_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5612', () => {
    const query = `CREATE USER u4_01292 IDENTIFIED WITH double_sha1_password BY 'qwe123' HOST ANY DEFAULT ROLE ALL EXCEPT r1_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5613', () => {
    const query = `CREATE USER u1_01292 SETTINGS readonly=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5614', () => {
    const query = `CREATE USER u3_01292 SETTINGS max_memory_usage=5000000 MIN 4000000 MAX 6000000 WRITABLE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5615', () => {
    const query = `CREATE USER u4_01292 SETTINGS PROFILE 'default', max_memory_usage=5000000, readonly=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5616', () => {
    const query = `CREATE USER u5_01292 SETTINGS NONE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5617', () => {
    const query = `CREATE TABLE geo (a Point, b Ring, c Polygon, d MultiPolygon) ENGINE=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5618', () => {
    const query = `create table data (key String) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5619', () => {
    const query = `create table dist (key LowCardinality(String)) engine=Distributed(test_cluster_two_shards, currentDatabase(), data);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5620', () => {
    const query = `CREATE TABLE pk_order(a UInt64, b UInt64, c UInt64, d UInt64) ENGINE=MergeTree() ORDER BY (a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5621', () => {
    const query = `CREATE TABLE pk_order (d DateTime, a Int32, b Int32) ENGINE = MergeTree ORDER BY (d, a) PARTITION BY toDate(d) SETTINGS index_granularity=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5622', () => {
    const query = `CREATE TEMPORARY TABLE times (t DateTime);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5623', () => {
    const query = `CREATE TABLE count_lc_test (
\`s\` LowCardinality(String),
\`arr\` Array(LowCardinality(String)),
\`num\` UInt64
)
ENGINE = MergeTree
ORDER BY (s, arr);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5624', () => {
    const query = `CREATE TABLE count_lc_test (
\`s\` LowCardinality(String),
\`arr\` Array(String),
\`num\` UInt64
)
ENGINE = MergeTree
ORDER BY (s, arr);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5625', () => {
    const query = `create table ES(A String) Engine=MergeTree order by tuple() SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5626', () => {
    const query = `CREATE TABLE default_constraints (
x UInt8,
y UInt8 DEFAULT x + 1,
CONSTRAINT c CHECK y < 5
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5627', () => {
    const query = `CREATE TEMPORARY TABLE default_constraints (
x UInt8,
y UInt8 DEFAULT x + 1,
CONSTRAINT c CHECK y < 5
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5628', () => {
    const query = `CREATE TABLE date_datetime_key_condition (dt DateTime) ENGINE = MergeTree() ORDER BY dt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5629', () => {
    const query = `CREATE TABLE data_01285 ( key   Int,
value SimpleAggregateFunction(max, Nullable(Int)),
INDEX value_idx assumeNotNull(value) TYPE minmax GRANULARITY 1
)
ENGINE=AggregatingMergeTree()
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5630', () => {
    const query = `CREATE VIEW view_bug_const AS SELECT 'World' AS hello FROM (SELECT number FROM system.numbers LIMIT 1) AS n1 JOIN (SELECT number FROM system.numbers LIMIT 1) AS n2 USING (number);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5631', () => {
    const query = `create table num_10m (number UInt64) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5632', () => {
    const query = `CREATE TABLE data_01283 engine=MergeTree() ORDER BY key
PARTITION BY key
AS SELECT number key FROM numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5633', () => {
    const query = `CREATE TABLE ttl (d DateTime) ENGINE = MergeTree ORDER BY tuple() TTL d + INTERVAL 10 DAY SETTINGS remove_empty_parts=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5634', () => {
    const query = `CREATE TABLE current_failed_query_metrics (event LowCardinality(String), value UInt64) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5635', () => {
    const query = `CREATE TABLE to_insert (value UInt64) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5636', () => {
    const query = `create table t (x UInt8, id UInt8) ENGINE = MergeTree() order by (id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5637', () => {
    const query = `CREATE TABLE rename_table_multiple (key Int32, value1 String, value2 Int32) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5638', () => {
    const query = `CREATE TABLE rename_table_multiple_compact (key Int32, value1 String, value2 Int32) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_rows_for_wide_part = 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5639', () => {
    const query = `create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by x set y = max(y); -- { serverError BAD_TTL_EXPRESSION} create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by b set y = max(y); -- { serverError BAD_TTL_EXPRESSION}
create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by a, b, x set y = max(y); -- { serverError BAD_TTL_EXPRESSION}
create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by a, b set y = max(y), y = max(y); -- { serverError BAD_TTL_EXPRESSION}
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5640', () => {
    const query = `create table data_01279 (key String) Engine=TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5641', () => {
    const query = `CREATE TABLE rename_table (key Int32, value1 Int32, value2 Int32) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5642', () => {
    const query = `CREATE TABLE rename_table_polymorphic ( key Int32,
value1 Int32,
value2 Int32
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 10000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5643', () => {
    const query = `create table out_01277 (
k1 Int,
k2 Int,
a1 Int,
a2 Int,
b1 Int,
b2 Int,
c  Int
) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5644', () => {
    const query = `create table buffer_01277 as out_01277 Engine=Buffer(currentDatabase(), out_01277, 1, 86400, 86400,
1e5, 1e6,
10e6, 100e6);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5645', () => {
    const query = `create table in_01277 as out_01277 Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5646', () => {
    const query = `create materialized view mv_01277_1 to buffer_01277 as select k1, k2, a1, a2, b1, b2, c from in_01277;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5647', () => {
    const query = `create materialized view mv_01277_2 to buffer_01277 as select a1, a2, k1, k2, b1, b2, c from in_01277;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5648', () => {
    const query = `CREATE TABLE table_for_rename1 (
date Date,
key UInt64,
value1 String,
value2 String,
value3 String,
CONSTRAINT cs_value1 CHECK toInt64(value1) < toInt64(value2),
CONSTRAINT cs_value2 CHECK toInt64(value2) < toInt64(value3)
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01277/test_for_rename', '1')
PARTITION BY date
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5649', () => {
    const query = `CREATE TABLE table_for_rename (
date Date,
key UInt64,
value1 String,
value2 String,
value3 String,
CONSTRAINT cs_value1 CHECK toInt64(value1) < toInt64(value2),
CONSTRAINT cs_value2 CHECK toInt64(value2) < toInt64(value3)
)
ENGINE = MergeTree()
PARTITION BY date
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5650', () => {
    const query = `CREATE TABLE table_for_rename (
date Date,
key UInt64,
value1 String,
value2 String,
value3 String MATERIALIZED concat(value1, ' + ', value2) 
)
ENGINE = MergeTree()
PARTITION BY date
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5651', () => {
    const query = `CREATE TABLE table_for_rename (
date Date,
key UInt64,
value1 String,
value2 String,
value3 String DEFAULT concat(value1, ' + ', value2) 
)
ENGINE = MergeTree()
PARTITION BY date
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5652', () => {
    const query = `CREATE TABLE visits(StartDate Date, Name String) ENGINE MergeTree ORDER BY(StartDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5653', () => {
    const query = `CREATE TABLE visits_dist AS visits ENGINE Distributed(test_cluster_two_shards_localhost,  currentDatabase(), 'visits', rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5654', () => {
    const query = `CREATE TABLE t (
\`d\` Date,
\`s\` LowCardinality(FixedString(3)),
\`c\` UInt32
)
ENGINE = SummingMergeTree()
PARTITION BY d
ORDER BY (d, s);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5655', () => {
    const query = `CREATE TABLE foo (server_date Date, dimension_1 String, metric_1 UInt32) ENGINE = MergeTree() PARTITION BY toYYYYMM(server_date) ORDER BY (server_date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5656', () => {
    const query = `CREATE TABLE bar (server_date Date, dimension_1 String, metric_2 UInt32) ENGINE = MergeTree() PARTITION BY toYYYYMM(server_date) ORDER BY (server_date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5657', () => {
    const query = `CREATE TABLE codecs (
a UInt8 CODEC(LZ4),
b UInt16 CODEC(ZSTD),
c Float32 CODEC(Gorilla),
d UInt8 CODEC(Delta, LZ4),
e Float64 CODEC(Gorilla, ZSTD),
f UInt32 CODEC(Delta, Delta, T64),
g DateTime CODEC(DoubleDelta),
h DateTime64 CODEC(DoubleDelta, LZ4),
i String CODEC(NONE)
) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5658', () => {
    const query = `CREATE TABLE codecs (a UInt8 CODEC(NONE, NONE)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS } CREATE TABLE codecs (a UInt8 CODEC(NONE, LZ4)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE codecs (a UInt8 CODEC(LZ4, NONE)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE codecs (a UInt8 CODEC(LZ4, LZ4)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE codecs (a UInt8 CODEC(LZ4, ZSTD)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE codecs (a UInt8 CODEC(Delta)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE codecs (a UInt8 CODEC(Delta, Delta)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE codecs (a UInt8 CODEC(LZ4, Delta)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE codecs (a UInt8 CODEC(Gorilla)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE codecs (a FixedString(2) CODEC(Gorilla)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE codecs (a Decimal(15,5) CODEC(Gorilla)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE codecs (a Float64 CODEC(Delta, Gorilla)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE codecs (a Float32 CODEC(DoubleDelta, FPC)) ENGINE = MergeTree ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
DROP TABLE IF EXISTS codecs1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5659', () => {
    const query = `CREATE TABLE codecs1 (a UInt8 CODEC(NONE, NONE)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5660', () => {
    const query = `CREATE TABLE codecs2 (a UInt8 CODEC(NONE, LZ4)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5661', () => {
    const query = `CREATE TABLE codecs3 (a UInt8 CODEC(LZ4, NONE)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5662', () => {
    const query = `CREATE TABLE codecs4 (a UInt8 CODEC(LZ4, LZ4)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5663', () => {
    const query = `CREATE TABLE codecs5 (a UInt8 CODEC(LZ4, ZSTD)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5664', () => {
    const query = `CREATE TABLE codecs6 (a UInt8 CODEC(Delta)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5665', () => {
    const query = `CREATE TABLE codecs7 (a UInt8 CODEC(Delta, Delta)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5666', () => {
    const query = `CREATE TABLE codecs8 (a UInt8 CODEC(LZ4, Delta)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5667', () => {
    const query = `CREATE TABLE codecs9 (a UInt8 CODEC(Gorilla)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5668', () => {
    const query = `CREATE TABLE codecs10 (a FixedString(2) CODEC(Gorilla)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5669', () => {
    const query = `CREATE TABLE codecs11 (a Decimal(15,5) CODEC(Gorilla)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5670', () => {
    const query = `CREATE TABLE offset_without_limit ( value UInt32
) Engine = MergeTree()
PRIMARY KEY value
ORDER BY value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5671', () => {
    const query = `create table data_01270 (key LowCardinality(Int)) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5672', () => {
    const query = `create table dist_01270 as data_01270 Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01270, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5673', () => {
    const query = `CREATE TABLE data_null ( a INT NULL,
b INT NOT NULL,
c Nullable(INT),
d INT
) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5674', () => {
    const query = `CREATE TABLE data_null_error ( a Nullable(INT) NULL,
b INT NOT NULL,
c Nullable(INT)
) engine=Memory();  --{serverError ILLEGAL_SYNTAX_FOR_DATA_TYPE}
CREATE TABLE data_null_error (
a INT NULL,
b Nullable(INT) NOT NULL,
c Nullable(INT)
) engine=Memory();  --{serverError ILLEGAL_SYNTAX_FOR_DATA_TYPE}
SET data_type_default_nullable='true';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5675', () => {
    const query = `CREATE TABLE set_null ( a INT NULL,
b INT NOT NULL,
c Nullable(INT),
d INT,
f DEFAULT 1
) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5676', () => {
    const query = `CREATE TABLE cannot_be_nullable (n Int8, a Array(UInt8)) ENGINE=Memory; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } CREATE TABLE cannot_be_nullable (n Int8, a Array(UInt8) NOT NULL) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5677', () => {
    const query = `CREATE TABLE data_01269 (
key     Int32,
value   Nullable(Int32),
alias   UInt8 ALIAS value>0
)
ENGINE = MergeTree()
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5678', () => {
    const query = `CREATE TABLE dummy(foo Int64) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5679', () => {
    const query = `create table src_table Engine=Memory as system.numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5680', () => {
    const query = `CREATE MATERIALIZED VIEW dst_mv Engine=Memory as select *, (SELECT count() FROM src_table) AS cnt FROM src_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5681', () => {
    const query = `CREATE TABLE dest_table (\`Date\` Date, \`Id\` UInt64, \`Units\` Float32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5682', () => {
    const query = `create table left_table as dest_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5683', () => {
    const query = `create table right_table as dest_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5684', () => {
    const query = `CREATE MATERIALIZED VIEW dest_table_mv TO dest_table as select * FROM (SELECT * FROM left_table) AS t1 INNER JOIN (WITH (SELECT DISTINCT Date FROM left_table LIMIT 1) AS dt SELECT * FROM right_table WHERE Date = dt) AS t2 USING (Date, Id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5685', () => {
    const query = `CREATE TABLE tab (x UInt32, y UInt32) ENGINE = MergeTree() ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5686', () => {
    const query = `CREATE DATABASE database_for_dict_01268;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5687', () => {
    const query = `CREATE TABLE database_for_dict_01268.table_for_dict1 (
key_column UInt64,
second_column UInt64,
third_column String
)
ENGINE = MergeTree()
ORDER BY key_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5688', () => {
    const query = `CREATE TABLE database_for_dict_01268.table_for_dict2 (
region_id UInt64,
parent_region UInt64,
region_name String
)
ENGINE = MergeTree()
ORDER BY region_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5689', () => {
    const query = `CREATE TABLE database_for_dict_01268.table_for_dict3 (
region_id UInt64,
parent_region Float32,
region_name String
)
ENGINE = MergeTree()
ORDER BY region_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5690', () => {
    const query = `CREATE DATABASE db_01268;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5691', () => {
    const query = `CREATE DICTIONARY db_01268.dict1 (
key_column UInt64 DEFAULT 0,
second_column UInt64 DEFAULT 1,
third_column String DEFAULT 'qqq'
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict1' PASSWORD '' DB 'database_for_dict_01268'))
LAYOUT(DIRECT()) SETTINGS(max_result_bytes=1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5692', () => {
    const query = `CREATE DICTIONARY db_01268.dict2 (
region_id UInt64 DEFAULT 0,
parent_region UInt64 DEFAULT 0 HIERARCHICAL,
region_name String DEFAULT ''
)
PRIMARY KEY region_id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict2' PASSWORD '' DB 'database_for_dict_01268'))
LAYOUT(DIRECT()) SETTINGS(dictionary_use_async_executor=1, max_threads=8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5693', () => {
    const query = `CREATE DICTIONARY db_01268.dict3 (
region_id UInt64 DEFAULT 0,
parent_region Float32 DEFAULT 0,
region_name String DEFAULT ''
)
PRIMARY KEY region_id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict3' PASSWORD '' DB 'database_for_dict_01268'))
LAYOUT(DIRECT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5694', () => {
    const query = `CREATE TABLE ints ( a TINYINT,
b TINYINT(8),
c SMALLINT,
d SMALLINT(16),
e INT,
f INT(32),
g BIGINT,
h BIGINT(64)
) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5695', () => {
    const query = `CREATE TABLE floats ( a FLOAT,
b FLOAT(12),
c FLOAT(15, 22),
d DOUBLE,
e DOUBLE(12),
f DOUBLE(4, 18)
) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5696', () => {
    const query = `CREATE TABLE strings ( a VARCHAR,
b VARCHAR(11)
) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5697', () => {
    const query = `CREATE TABLE test_alter (x Date, s String) ENGINE = MergeTree ORDER BY s PARTITION BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5698', () => {
    const query = `CREATE TABLE test_alter_r1 (x Date, s String) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01267/alter', 'r1') ORDER BY s PARTITION BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5699', () => {
    const query = `CREATE TABLE test_alter_r2 (x Date, s String) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01267/alter', 'r2') ORDER BY s PARTITION BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5700', () => {
    const query = `CREATE TABLE t1 (
date Date, 
s1 String,
s2 String
) ENGINE = MergeTree() PARTITION BY toYYYYMMDD(date) ORDER BY (date, s1)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5701', () => {
    const query = `CREATE TABLE tztest (
timeBerlin DateTime('Europe/Berlin'), 
timeLA DateTime('America/Los_Angeles')
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5702', () => {
    const query = `CREATE TABLE LOG_T (
\`fingerprint\` UInt64, 
\`fields\` Nested(
name LowCardinality(String), 
value String)
)
ENGINE = MergeTree
ORDER BY fingerprint;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5703', () => {
    const query = `CREATE TABLE m (
\`v\` UInt8
)
ENGINE = MergeTree()
PARTITION BY tuple()
ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5704', () => {
    const query = `CREATE TABLE d (
\`v\` UInt16
)
ENGINE = Distributed('test_cluster_two_shards', currentDatabase(), m, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5705', () => {
    const query = `CREATE TABLE m (
\`v\` Enum8('a' = 1, 'b' = 2)
)
ENGINE = MergeTree()
PARTITION BY tuple()
ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5706', () => {
    const query = `CREATE TABLE d (
\`v\` Enum8('a' = 1)
)
ENGINE = Distributed('test_cluster_two_shards', currentDatabase(), m, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5707', () => {
    const query = `CREATE TABLE IF NOT EXISTS testTable ( A LowCardinality(String), -- like voter
B Int64
) ENGINE MergeTree()
ORDER BY (A);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5708', () => {
    const query = `CREATE VIEW testView AS  SELECT
A as ALow, -- like account
B
FROM
testTable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5709', () => {
    const query = `CREATE TABLE IF NOT EXISTS testTable ( A String, -- like voter
B Int64
) ENGINE MergeTree()
ORDER BY (A);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5710', () => {
    const query = `CREATE TABLE table_for_dict (
key_column UInt64,
second_column UInt64,
third_column String
)
ENGINE = MergeTree()
ORDER BY key_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5711', () => {
    const query = `CREATE DATABASE ordinary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5712', () => {
    const query = `CREATE DICTIONARY ordinary_db.dict1 (
key_column UInt64 DEFAULT 0,
second_column UInt64 DEFAULT 1,
third_column String DEFAULT 'qqq'
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB currentDatabase()))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT()) SETTINGS(max_result_bytes=1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5713', () => {
    const query = `create table x( id UInt64, t  AggregateFunction(argMax, Enum8('<Empty>' = -1, 'Male' = 1, 'Female' = 2), UInt64) DEFAULT arrayReduce('argMaxState', ['cast(-1, \\'Enum8(\\'<Empty>\\' = -1, \\'Male\\' = 1, \\'Female\\' = 2)'], [toUInt64(0)]) ) Engine=MergeTree ORDER BY id; -- { serverError CANNOT_CONVERT_TYPE } `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5714', () => {
    const query = `CREATE DATABASE test_dict_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5715', () => {
    const query = `CREATE TABLE test_dict_db.table1 (
\`col1\` String,
\`col2\` Int16,
\`col3\` String,
\`col4\` Int32,
\`col5\` String,
\`col6\` Nullable(Float64),
\`col7\` Nullable(Float64),
\`col8\` Nullable(DateTime('UTC')),
\`col9\` Nullable(String),
\`col10\` Nullable(String),
\`col11\` Nullable(String),
\`col12\` Nullable(String),
\`col13\` Nullable(Int32),
\`col14\` Nullable(DateTime('UTC')),
\`col15\` Nullable(DateTime('UTC')),
\`col16\` Nullable(DateTime('UTC')),
\`col17\` Nullable(DateTime('UTC')),
\`col18\` Nullable(DateTime('UTC')),
\`col19\` Nullable(DateTime('UTC')),
\`col20\` Nullable(String)
)
ENGINE = MergeTree
ORDER BY (col1, col2, col3, col4, col5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5716', () => {
    const query = `CREATE DICTIONARY test_dict_db.table1_dict (
col1 String,
col2 Int16,
col3 String,
col4 Int32,
col5 String,
col6 Float64,
col7 Float64,
col8 DateTime('UTC'),
col9 String,
col10 String,
col11 String,
col12 String,
col13 Int32,
col14 DateTime('UTC'),
col15 DateTime('UTC'),
col16 DateTime('UTC'),
col17 DateTime('UTC'),
col18 DateTime('UTC'),
col19 DateTime('UTC'),
col20 String
)
PRIMARY KEY col1,col2,col3,col4,col5
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB test_dict_db TABLE table1 USER 'default'))
LIFETIME(MIN 0 MAX 0) LAYOUT(COMPLEX_KEY_HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5717', () => {
    const query = `CREATE TABLE test_dict_db.table1 (
\`col1\` String,
\`col2\` Int16,
\`col3\` String,
\`col4\` Int32,
\`col5\` String,
\`col6\` Float64,
\`col7\` Float64,
\`col8\` DateTime('UTC'),
\`col9\` String,
\`col10\` String,
\`col11\` String,
\`col12\` String,
\`col13\` Int32,
\`col14\` DateTime('UTC'),
\`col15\` DateTime('UTC'),
\`col16\` DateTime('UTC'),
\`col17\` DateTime('UTC'),
\`col18\` DateTime('UTC'),
\`col19\` DateTime('UTC'),
\`col20\` String
)
ENGINE = MergeTree
ORDER BY (col1, col2, col3, col4, col5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5718', () => {
    const query = `CREATE DICTIONARY testip (
\`network\` String, 
\`test_field\` String
)
PRIMARY KEY network
SOURCE(FILE(PATH '/tmp/test.csv' FORMAT CSVWithNames))
LIFETIME(MIN 0 MAX 300)
LAYOUT(IPTRIE()); -- { serverError UNKNOWN_ELEMENT_IN_CONFIG }
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5719', () => {
    const query = `create table tutorial ( inner_poly  Array(Tuple(Int32, Int32)), outer_poly  Array(Tuple(Int32, Int32)) ) engine = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5720', () => {
    const query = `CREATE TABLE dict_data (key UInt64, val UInt64) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5721', () => {
    const query = `CREATE DICTIONARY dict (
key UInt64 DEFAULT 0,
val UInt64 DEFAULT 10
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dict_data' PASSWORD '' DB currentDatabase()))
LIFETIME(MIN 0 MAX 0)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5722', () => {
    const query = `CREATE TABLE mass_table_457 (key Array(Tuple(Float64, Float64)), name String, value UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5723', () => {
    const query = `create table test_table_sharded(
date Date,
text String,
hash UInt64
)
engine=MergeTree(date, (hash, date), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5724', () => {
    const query = `create table test_table as test_table_sharded engine=Distributed(test_cluster_two_shards, currentDatabase(), test_table_sharded, hash);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5725', () => {
    const query = `CREATE TABLE database_for_dict.dict_source (id UInt64, parent_id UInt64, value String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5726', () => {
    const query = `CREATE DICTIONARY database_for_dict.dictionary_with_hierarchy (
id UInt64, parent_id UInt64 HIERARCHICAL, value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(host 'localhost' port tcpPort() user 'default' db 'database_for_dict' table 'dict_source'))
LAYOUT(HASHED())
LIFETIME(MIN 1 MAX 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5727', () => {
    const query = `CREATE DICTIONARY database_for_dict.dictionary_with_hierarchy (
id UInt64, parent_id UInt64 HIERARCHICAL, value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(host 'localhost' port tcpPort() user 'default' db 'database_for_dict' table 'dict_source'))
LAYOUT(FLAT())
LIFETIME(MIN 1 MAX 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5728', () => {
    const query = `CREATE DICTIONARY database_for_dict.dictionary_with_hierarchy (
id UInt64, parent_id UInt64 HIERARCHICAL, value String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(host 'localhost' port tcpPort() user 'default' db 'database_for_dict' table 'dict_source'))
LAYOUT(CACHE(SIZE_IN_CELLS 10))
LIFETIME(MIN 1 MAX 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5729', () => {
    const query = `CREATE DATABASE test_01249 ENGINE=Ordinary;     -- Full ATTACH requires UUID with Atomic USE test_01249;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5730', () => {
    const query = `CREATE TABLE bloom_filter_idx_good(\`u64\` UInt64, \`i32\` Int32, \`f64\` Float64, \`d\` Decimal(10, 2), \`s\` String, \`e\` Enum8('a' = 1, 'b' = 2, 'c' = 3), \`dt\` Date, INDEX bloom_filter_a i32 TYPE bloom_filter(0, 1) GRANULARITY 1) ENGINE = MergeTree() ORDER BY u64 SETTINGS index_granularity = 8192; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH } CREATE TABLE bloom_filter_idx_good(\`u64\` UInt64, \`i32\` Int32, \`f64\` Float64, \`d\` Decimal(10, 2), \`s\` String, \`e\` Enum8('a' = 1, 'b' = 2, 'c' = 3), \`dt\` Date, INDEX bloom_filter_a i32 TYPE bloom_filter(-0.1) GRANULARITY 1) ENGINE = MergeTree() ORDER BY u64 SETTINGS index_granularity = 8192; -- { serverError BAD_ARGUMENTS }
CREATE TABLE bloom_filter_idx_good(\`u64\` UInt64, \`i32\` Int32, \`f64\` Float64, \`d\` Decimal(10, 2), \`s\` String, \`e\` Enum8('a' = 1, 'b' = 2, 'c' = 3), \`dt\` Date, INDEX bloom_filter_a i32 TYPE bloom_filter(1.01) GRANULARITY 1) ENGINE = MergeTree() ORDER BY u64 SETTINGS index_granularity = 8192; -- { serverError BAD_ARGUMENTS }
DROP TABLE IF EXISTS bloom_filter_idx_good;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5731', () => {
    const query = `create table data_01247 as system.numbers engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5732', () => {
    const query = `create table dist_layer_01247 as data_01247 engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01247, number);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5733', () => {
    const query = `create table dist_01247 as data_01247 engine=Distributed(test_cluster_two_shards, currentDatabase(), dist_layer_01247, number);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5734', () => {
    const query = `create table dist_01247 as data_01247 engine=Distributed(test_cluster_two_shards, currentDatabase(), dist_layer_01247, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5735', () => {
    const query = `create table dist_layer_01247 as data_01247 engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01247, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5736', () => {
    const query = `create table test_quantile (x AggregateFunction(quantileTiming(0.2), UInt64)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5737', () => {
    const query = `create table dist_01247 as data_01247 engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01247, number);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5738', () => {
    const query = `create table data_01247 engine=Memory() as select number key, 0 value from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5739', () => {
    const query = `create table dist_01247 as data_01247 engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01247, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5740', () => {
    const query = `CREATE TABLE join_test (id UInt16, num UInt16) engine = Join(ANY, LEFT, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5741', () => {
    const query = `CREATE TABLE join_test (id UInt16, num Nullable(UInt16)) engine = Join(ANY, LEFT, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5742', () => {
    const query = `CREATE TABLE join_test (id UInt16, num Array(UInt16)) engine = Join(ANY, LEFT, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5743', () => {
    const query = `create table test (x Date, y String) engine Join(ANY, LEFT, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5744', () => {
    const query = `create table test_graphite (key UInt32, Path String, Time DateTime('UTC'), Value Float64, Version UInt32, col UInt64) engine = GraphiteMergeTree('graphite_rollup') order by key settings index_granularity=10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5745', () => {
    const query = `CREATE TABLE test1 (s String) ENGINE = MergeTree ORDER BY s SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5746', () => {
    const query = `CREATE TABLE test2 (s LowCardinality(String)) ENGINE = MergeTree ORDER BY s SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5747', () => {
    const query = `create table kv (key int, v1 int, v2 int, v3 int, v4 int, v5 int) engine MergeTree order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5748', () => {
    const query = `create table shard_0.num_01232 (number UInt64) engine = MergeTree order by number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5749', () => {
    const query = `create table shard_1.num_01232 (number UInt64) engine = MergeTree order by number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5750', () => {
    const query = `create table distr (number UInt64) engine = Distributed(test_cluster_two_shards_different_databases, '', num_01232);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5751', () => {
    const query = `create table shard_0.num2_01232 (number UInt64) engine = MergeTree order by number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5752', () => {
    const query = `create table shard_1.num2_01232 (number UInt64) engine = MergeTree order by number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5753', () => {
    const query = `create table distr2 (number UInt64) engine = Distributed(test_cluster_two_shards_different_databases, '', num2_01232);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5754', () => {
    const query = `CREATE TABLE null_in (dt DateTime, idx int, i Nullable(int), s Nullable(String)) ENGINE = MergeTree() PARTITION BY dt ORDER BY idx SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5755', () => {
    const query = `CREATE TABLE test_set2 (i Nullable(int)) ENGINE = Set();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5756', () => {
    const query = `CREATE TABLE null_in_subquery (dt DateTime, idx int, i Nullable(UInt64)) ENGINE = MergeTree() PARTITION BY dt ORDER BY idx SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5757', () => {
    const query = `CREATE TABLE null_in_tuple (dt DateTime, idx int, t Tuple(Nullable(UInt64), Nullable(String))) ENGINE = MergeTree() PARTITION BY dt ORDER BY idx SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5758', () => {
    const query = `CREATE TABLE markdown (id UInt32, name String, array Array(Int32), nullable Nullable(String), low_cardinality LowCardinality(String), decimal Decimal32(6)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5759', () => {
    const query = `create table shard_0.shard_01231_distributed_aggregation_memory_efficient (x UInt64) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5760', () => {
    const query = `create table shard_1.shard_01231_distributed_aggregation_memory_efficient (x UInt64) engine = MergeTree order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5761', () => {
    const query = `create table ma_dist (x UInt64) ENGINE =  Distributed(test_cluster_two_shards_different_databases, '', 'shard_01231_distributed_aggregation_memory_efficient');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5762', () => {
    const query = `CREATE TABLE join_test (id UInt16, num UInt16) engine = Join(ANY, LEFT, id) settings join_any_take_last_row = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5763', () => {
    const query = `CREATE TABLE test_local (name String)  ENGINE = MergeTree
ORDER BY name as select 'x';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5764', () => {
    const query = `CREATE TABLE test_distributed as test_local ENGINE = Distributed(test_shard_localhost, currentDatabase(), test_local);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5765', () => {
    const query = `CREATE TABLE test_merge as test_local ENGINE = Merge(currentDatabase(), 'test_local');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5766', () => {
    const query = `CREATE TABLE test_merge_distributed as test_local ENGINE = Distributed(test_shard_localhost, currentDatabase(), test_merge);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5767', () => {
    const query = `CREATE TABLE test_distributed_merge as test_local ENGINE = Merge(currentDatabase(), 'test_distributed');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5768', () => {
    const query = `create table data_01227 (key Int) Engine=MergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5769', () => {
    const query = `CREATE DATABASE dict_db_01225 ENGINE=Ordinary;    -- Different internal dictionary name with Atomic CREATE DATABASE dict_db_01225_dictionary Engine=Dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5770', () => {
    const query = `CREATE TABLE dict_db_01225.dict_data (key UInt64, val UInt64) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5771', () => {
    const query = `CREATE DICTIONARY dict_db_01225.dict (
key UInt64 DEFAULT 0,
val UInt64 DEFAULT 10
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dict_data' PASSWORD '' DB 'dict_db_01225'))
LIFETIME(MIN 0 MAX 0)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5772', () => {
    const query = `CREATE DATABASE dict_db_01224 ENGINE=Ordinary;  -- Different internal dictionary name with Atomic CREATE DATABASE dict_db_01224_dictionary Engine=Dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5773', () => {
    const query = `CREATE TABLE dict_db_01224.dict_data (key UInt64, val UInt64) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5774', () => {
    const query = `CREATE DICTIONARY dict_db_01224.dict (
key UInt64 DEFAULT 0,
val UInt64 DEFAULT 10
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dict_data' PASSWORD '' DB 'dict_db_01224'))
LIFETIME(MIN 0 MAX 0)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5775', () => {
    const query = `create table data_01223 (key Int) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5776', () => {
    const query = `create table dist_layer_01223 as data_01223 Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01223);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5777', () => {
    const query = `create table dist_01223 as data_01223 Engine=Distributed(test_cluster_two_shards, currentDatabase(), dist_layer_01223);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5778', () => {
    const query = `create table dist_layer_01223 as data_01223 Engine=Distributed(test_shard_localhost, currentDatabase(), data_01223);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5779', () => {
    const query = `create table merge_dist_01223 as dist_01223 engine=Merge(currentDatabase(), 'dist_01223');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5780', () => {
    const query = `create table cdp_segments (seg_id String, mid_seqs AggregateFunction(groupBitmap, UInt32)) engine=ReplacingMergeTree() order by (seg_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5781', () => {
    const query = `create table cdp_customers (mid String, mid_seq UInt32) engine=ReplacingMergeTree() order by (mid_seq);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5782', () => {
    const query = `CREATE TABLE tt1 (a UInt32, b UInt32 ALIAS a) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5783', () => {
    const query = `CREATE TABLE tt2 (a UInt32, b UInt32 ALIAS a * 2) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5784', () => {
    const query = `CREATE TABLE tt3 (a UInt32, b UInt32 ALIAS c, c UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5785', () => {
    const query = `CREATE TABLE tt4 (a UInt32, b UInt32 ALIAS 12) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5786', () => {
    const query = `CREATE TABLE tt_m (a UInt32, b UInt32) ENGINE = Merge(currentDatabase(), 'tt1|tt2|tt3|tt4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5787', () => {
    const query = `CREATE TABLE IF NOT EXISTS local_01213 (id Int) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5788', () => {
    const query = `CREATE TABLE IF NOT EXISTS dist_01213 AS local_01213 ENGINE = Distributed(test_cluster_two_shards_localhost, currentDatabase(), local_01213, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5789', () => {
    const query = `CREATE TABLE table_for_rename_nested (
date Date,
key UInt64,
n Nested(x UInt32, y String),
value1 String
)
ENGINE = MergeTree()
PARTITION BY date
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5790', () => {
    const query = `CREATE TABLE table_rename_with_default (
date Date,
key UInt64,
value1 String,
value2 String DEFAULT concat('Hello ', value1),
value3 String ALIAS concat('Word ', value1)
)
ENGINE = MergeTree()
PARTITION BY date
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5791', () => {
    const query = `CREATE TABLE table_rename_with_ttl (
date1 Date,
date2 Date,
value1 String,
value2 String TTL date1 + INTERVAL 500 MONTH
)
ENGINE = ReplicatedMergeTree('/clickhouse/{database}/test_01213/table_rename_with_ttl', '1')
ORDER BY tuple()
TTL date2 + INTERVAL 500 MONTH;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5792', () => {
    const query = `CREATE TABLE table_for_rename_pk (
date Date,
key1 UInt64,
key2 UInt64,
key3 UInt64,
value1 String,
value2 String
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01213/table_for_rename_pk1', '1')
PARTITION BY date
ORDER BY (key1, pow(key2, 2), key3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5793', () => {
    const query = `CREATE TABLE table_for_rename_with_primary_key (
date Date,
key1 UInt64,
key2 UInt64,
key3 UInt64,
value1 String,
value2 String,
INDEX idx (value1) TYPE set(1) GRANULARITY 1
)
ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01213/table_for_rename_pk2', '1')
PARTITION BY date
ORDER BY (key1, key2, key3)
PRIMARY KEY (key1, key2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5794', () => {
    const query = `CREATE TABLE table_for_rename_nested (
date Date,
key UInt64,
n Nested(x UInt32, y String),
value1 Array(Array(LowCardinality(String))) -- column with several files
)
ENGINE = MergeTree()
PARTITION BY date
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5795', () => {
    const query = `CREATE TABLE table_with_compact_parts (
date Date,
key UInt64,
value1 String,
value2 String,
value3 String
)
ENGINE = MergeTree()
PARTITION BY date
ORDER BY key
settings index_granularity = 8,
min_rows_for_wide_part = 10,
min_bytes_for_wide_part = '10G';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5796', () => {
    const query = `CREATE TABLE table_for_rename (
date Date,
key UInt64,
value1 String,
value2 String,
value3 String
)
ENGINE = MergeTree()
PARTITION BY date
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5797', () => {
    const query = `create table data_02000 (key Int) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5798', () => {
    const query = `create table dist_02000 as data_02000 Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_02000, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5799', () => {
    const query = `CREATE VIEW IF NOT EXISTS v_01210 AS SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5800', () => {
    const query = `CREATE MATERIALIZED VIEW IF NOT EXISTS mv_01210 ENGINE Log AS SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5801', () => {
    const query = `CREATE TABLE t (
number UInt64
)
ENGINE = MergeTree
ORDER BY number
SETTINGS index_granularity = 128, ratio_of_defaults_for_sparse_serialization = 1.0, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5802', () => {
    const query = `create table mt_compact(a UInt64, b UInt64 DEFAULT a * a, s String, n Nested(x UInt32, y String), lc LowCardinality(String)) engine = ReplicatedMergeTree('/clickhouse/{database}/test_01201/mt_compact_replicated', '1')
order by a partition by a % 10
settings index_granularity = 8,
min_rows_for_wide_part = 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5803', () => {
    const query = `CREATE TABLE table_with_single_pk (
key UInt8,
value String
)
ENGINE = MergeTree
ORDER BY key
SETTINGS min_compress_block_size=65536, max_compress_block_size=65536;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5804', () => {
    const query = `CREATE TABLE table_with_multi_pk (
key1 UInt8,
key2 UInt32,
key3 DateTime64(6, 'UTC'),
value String
)
ENGINE = MergeTree
ORDER BY (key1, key2, key3)
SETTINGS min_compress_block_size=65536, max_compress_block_size=65536;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5805', () => {
    const query = `CREATE TABLE table_with_function_pk (
key1 UInt8,
key2 UInt32,
key3 DateTime64(6, 'UTC'),
value String
)
ENGINE = MergeTree
ORDER BY (cast(value as UInt64), key2)
SETTINGS min_compress_block_size=65536, max_compress_block_size=65536;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5806', () => {
    const query = `CREATE TABLE table_without_pk (
key1 UInt8,
key2 UInt32,
key3 DateTime64(6, 'UTC'),
value String
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_compress_block_size=65536, max_compress_block_size=65536;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5807', () => {
    const query = `CREATE TABLE summing (k String, x UInt64, e Enum('hello' = 1, 'world' = 2)) ENGINE = SummingMergeTree ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5808', () => {
    const query = `CREATE DATABASE test_01191 ENGINE=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5809', () => {
    const query = `CREATE TABLE test_01191._ (n UInt64, s String) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5810', () => {
    const query = `CREATE TABLE test_01191.t (n UInt64, s String) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5811', () => {
    const query = `CREATE DICTIONARY test_01191.dict (n UInt64, s String) PRIMARY KEY n
LAYOUT(DIRECT())
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE '_' DB 'test_01191'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5812', () => {
    const query = `CREATE DATABASE dummy_db ENGINE=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5813', () => {
    const query = `CREATE TABLE table2 AS numbers(5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5814', () => {
    const query = `CREATE TABLE table3 AS table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5815', () => {
    const query = `create or replace table t1 (n UInt64, s String) engine=MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5816', () => {
    const query = `create or replace table t1 (n UInt64, s Nullable(String)) engine=MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5817', () => {
    const query = `CREATE TABLE test_table (key UInt32, value Decimal(16, 6)) ENGINE = SummingMergeTree() ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5818', () => {
    const query = `CREATE TABLE numbers (number UInt64) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5819', () => {
    const query = `CREATE MATERIALIZED VIEW test_mv TO test_table (number UInt64, value Decimal(38, 6)) AS SELECT number, sum(number) AS value FROM (SELECT *, toDecimal64(number, 6) AS val FROM numbers) GROUP BY number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5820', () => {
    const query = `CREATE TABLE src (n UInt64, s FixedString(16)) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5821', () => {
    const query = `CREATE TABLE dst (n UInt8, s String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5822', () => {
    const query = `CREATE MATERIALIZED VIEW mv TO dst (n String) AS SELECT * FROM src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5823', () => {
    const query = `CREATE TABLE dist (n Int128) ENGINE=Distributed(test_cluster_two_shards, currentDatabase(), mv);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5824', () => {
    const query = `CREATE TABLE test_repl ON CLUSTER test_shard_localhost (n UInt64) ENGINE ReplicatedMergeTree('/clickhouse/test_01181/{database}/test_repl','r1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5825', () => {
    const query = `create table mt1 (n Int64) engine=MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5826', () => {
    const query = `create table mt2 (n Int64) engine=MergeTree order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5827', () => {
    const query = `create table m (n int) engine=Memory; -- { serverError NOT_IMPLEMENTED } commit; -- { serverError INVALID_TRANSACTION } -- after 48
rollback;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5828', () => {
    const query = `create table txn_counters (n Int64, creation_tid DEFAULT transactionID()) engine=MergeTree order by n SETTINGS old_parts_lifetime=3600;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5829', () => {
    const query = `create table trunc (n int, primary key n) engine=ReplicatedMergeTree('/test/1166/{database}', '1') partition by n % 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5830', () => {
    const query = `create table trunc (n int, primary key n) partition by n % 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5831', () => {
    const query = `create table rmt1 (d DateTime, n int) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '1') order by n partition by toYYYYMMDD(d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5832', () => {
    const query = `create table rmt2 (d DateTime, n int) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '2') order by n partition by toYYYYMMDD(d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5833', () => {
    const query = `create table rmt1 (d DateTime, n int) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '1') order by n partition by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5834', () => {
    const query = `create table rmt2 (d DateTime, n int) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '2') order by n partition by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5835', () => {
    const query = `create table rmt1 (n UInt8, m Int32, d Date, t DateTime) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '1') order by n partition by (n, m, d, t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5836', () => {
    const query = `create table rmt2 (n UInt8, m Int32, d Date, t DateTime) engine=ReplicatedMergeTree('/test/01165/{database}/rmt', '2') order by n partition by (n, m, d, t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5837', () => {
    const query = `create database test_1164_memory engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5838', () => {
    const query = `create table test_1164_memory.r1 (n int) engine=ReplicatedMergeTree('/test/01164/{database}/t', '1') order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5839', () => {
    const query = `create table test_1164_memory.r2 (n int) engine=ReplicatedMergeTree('/test/01164/{database}/t', '2') order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5840', () => {
    const query = `CREATE TABLE t (n UInt64, f Float32, s String, fs FixedString(42), d Decimal(9, 6)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5841', () => {
    const query = `CREATE VIEW v (n Nullable(Int32), f Float64) AS SELECT n, f FROM t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5842', () => {
    const query = `CREATE MATERIALIZED VIEW mv ENGINE = Null AS SELECT * FROM system.one;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5843', () => {
    const query = `CREATE TEMPORARY TABLE tmp (d Date, dt DateTime, dtms DateTime64(3));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5844', () => {
    const query = `CREATE TABLE kcu1 (i UInt32, s String) ENGINE MergeTree ORDER BY i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5845', () => {
    const query = `CREATE TABLE kcu2 (i UInt32, d Date, u UUID) ENGINE MergeTree ORDER BY (u, d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5846', () => {
    const query = `CREATE TEMPORARY TABLE t0 AS SELECT quantileArrayState(0.10)([number]) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5847', () => {
    const query = `CREATE TEMPORARY TABLE t1 AS SELECT quantileDistinctState(0.10)(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5848', () => {
    const query = `CREATE TEMPORARY TABLE t2 AS SELECT quantileForEachState(0.10)([number]) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5849', () => {
    const query = `CREATE TEMPORARY TABLE t3 AS SELECT quantileIfState(0.10)(number, number % 2) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5850', () => {
    const query = `CREATE TEMPORARY TABLE t4 AS SELECT quantileMergeState(0.10)(state) FROM (SELECT quantileState(0.10)(number) as state FROM numbers(100));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5851', () => {
    const query = `CREATE TEMPORARY TABLE t5 AS SELECT quantileOrNullState(0.10)(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5852', () => {
    const query = `CREATE TEMPORARY TABLE t6 AS SELECT quantileOrDefaultState(0.10)(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5853', () => {
    const query = `CREATE TEMPORARY TABLE t7 AS SELECT quantileResampleState(0.10, 1, 2, 42)(number, number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5854', () => {
    const query = `CREATE TEMPORARY TABLE t8 AS SELECT quantileState(0.10)(number) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5855', () => {
    const query = `CREATE TEMPORARY TABLE t9 AS SELECT quantileArrayResampleOrDefaultIfState(0.10, 1, 2, 42)([number], number, number % 2) FROM numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5856', () => {
    const query = `create table rmt (n int) engine=ReplicatedMergeTree('/test/01158/{database}/rmt', '1') order by n
settings
cleanup_delay_period=86400,
max_cleanup_delay_period=86400,
replicated_can_become_leader=0,
allow_remote_fs_zero_copy_replication=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5857', () => {
    const query = `create table t (n UInt64, s String default 's' || toString(n)) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5858', () => {
    const query = `create table dist (n int) engine=Distributed(test_shard_localhost, currentDatabase(), t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5859', () => {
    const query = `create table buf (n int) engine=Buffer(currentDatabase(), dist, 1, 10, 100, 10, 100, 1000, 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5860', () => {
    const query = `create or replace table join engine=Join(ANY, INNER, n) as select * from t where throwIf(n); -- { serverError FUNCTION_THROW_IF_VALUE_IS_NON_ZERO } select count() from system.tables where database=currentDatabase() and name='join';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5861', () => {
    const query = `create or replace table join engine=Join(ANY, INNER, n) as select * from t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5862', () => {
    const query = `CREATE DATABASE test_01155_ordinary ENGINE=Ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5863', () => {
    const query = `CREATE DATABASE test_01155_atomic ENGINE=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5864', () => {
    const query = `CREATE TABLE src (s String, x String DEFAULT 'a') ENGINE=MergeTree() PARTITION BY tuple() ORDER BY s;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5865', () => {
    const query = `CREATE MATERIALIZED VIEW mv1 (s String, x String DEFAULT 'b') ENGINE=MergeTree() PARTITION BY tuple() ORDER BY s AS SELECT (*,).1 || 'mv1' as s FROM src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5866', () => {
    const query = `CREATE TABLE dst (s String, x String DEFAULT 'c') ENGINE=MergeTree() PARTITION BY tuple() ORDER BY s;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5867', () => {
    const query = `CREATE MATERIALIZED VIEW mv2 TO dst (s String, x String DEFAULT 'd') AS SELECT (*,).1 || 'mv2' as s FROM src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5868', () => {
    const query = `CREATE TABLE dist (s String, x String DEFAULT 'asdf') ENGINE=Distributed(test_shard_localhost, test_01155_ordinary, src);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5869', () => {
    const query = `CREATE DICTIONARY dict (s String, x String DEFAULT 'qwerty') PRIMARY KEY s SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dist' DB 'test_01155_ordinary'))
LIFETIME(MIN 0 MAX 2) LAYOUT(COMPLEX_KEY_CACHE(SIZE_IN_CELLS 123));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5870', () => {
    const query = `CREATE TABLE src (n UInt64) ENGINE=MergeTree ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5871', () => {
    const query = `CREATE MATERIALIZED VIEW mv (n Int32, n2 Int64) ENGINE = MergeTree PARTITION BY n % 10 ORDER BY n AS SELECT n, n * n AS n2 FROM src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5872', () => {
    const query = `CREATE TABLE ".inner_id.e15f3ab5-6cae-4df3-b879-f40deafd82c2" (n Int32, n2 Int64) ENGINE = MergeTree PARTITION BY n % 10 ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5873', () => {
    const query = `CREATE TABLE ".inner_id.e15f3ab5-6cae-4df3-b879-f40deafd82c2" UUID '3bd68e3c-2693-4352-ad66-a66eba9e345e' (n Int32, n2 Int64) ENGINE = MergeTree PARTITION BY n % 10 ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5874', () => {
    const query = `CREATE DATABASE shard_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5875', () => {
    const query = `CREATE DATABASE shard_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5876', () => {
    const query = `CREATE TABLE demo_loan_01568 ON CLUSTER test_cluster_two_shards_different_databases ( \`id\` Int64 COMMENT 'id', \`date_stat\` Date COMMENT 'date of stat', \`customer_no\` String COMMENT 'customer no', \`loan_principal\` Float64 COMMENT 'loan principal' ) ENGINE=ReplacingMergeTree() ORDER BY id PARTITION BY toYYYYMM(date_stat); -- { serverError NOT_IMPLEMENTED } SET distributed_ddl_entry_format_version = 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5877', () => {
    const query = `CREATE TABLE demo_loan_01568 ON CLUSTER test_cluster_two_shards_different_databases ( \`id\` Int64 COMMENT 'id', \`date_stat\` Date COMMENT 'date of stat', \`customer_no\` String COMMENT 'customer no', \`loan_principal\` Float64 COMMENT 'loan principal' ) ENGINE=ReplacingMergeTree() ORDER BY id PARTITION BY toYYYYMM(date_stat); -- { serverError INCONSISTENT_CLUSTER_DEFINITION } SET distributed_ddl_output_mode='throw';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5878', () => {
    const query = `CREATE TABLE shard_0.demo_loan_01568 ON CLUSTER test_cluster_two_shards_different_databases ( \`id\` Int64 COMMENT 'id', \`date_stat\` Date COMMENT 'date of stat', \`customer_no\` String COMMENT 'customer no', \`loan_principal\` Float64 COMMENT 'loan principal' ) ENGINE=ReplacingMergeTree() ORDER BY id PARTITION BY toYYYYMM(date_stat);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5879', () => {
    const query = `CREATE TABLE shard_1.demo_loan_01568 ON CLUSTER test_cluster_two_shards_different_databases ( \`id\` Int64 COMMENT 'id', \`date_stat\` Date COMMENT 'date of stat', \`customer_no\` String COMMENT 'customer no', \`loan_principal\` Float64 COMMENT 'loan principal' ) ENGINE=ReplacingMergeTree() ORDER BY id PARTITION BY toYYYYMM(date_stat);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5880', () => {
    const query = `CREATE TABLE demo_loan_01568_dist AS shard_0.demo_loan_01568 ENGINE=Distributed('test_cluster_two_shards_different_databases', '', 'demo_loan_01568', id % 2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5881', () => {
    const query = `create table src_table_1 (n UInt64) engine=Memory as select * from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5882', () => {
    const query = `create table src_table_2 (n UInt64) engine=Log as select number * 10 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5883', () => {
    const query = `create table src_table_3 (n UInt64) engine=MergeTree order by n as select number * 100 from numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5884', () => {
    const query = `create table set (s String) engine=Set as select arrayJoin(['src_table_1', 'src_table_2']);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5885', () => {
    const query = `create temporary table tmp (s String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5886', () => {
    const query = `create table mt (n UInt64, s String) engine = MergeTree partition by intDiv(n, 10) order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5887', () => {
    const query = `create table rmt (n UInt64, s String) engine = ReplicatedMergeTree('/clickhouse/test_01149_{database}/rmt', 'r1') partition by intDiv(n, 10) order by n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5888', () => {
    const query = `CREATE TABLE rmt (n UInt64, s String) ENGINE = ReplicatedMergeTree('/clickhouse/test_01148/{shard}/{database}/{table}', '{replica}') ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5889', () => {
    const query = `CREATE TABLE rmt (n UInt64, s String) ENGINE = ReplicatedMergeTree('{default_path_test}{uuid}', '{default_name_test}') ORDER BY n;    -- { serverError BAD_ARGUMENTS } CREATE TABLE rmt (n UInt64, s String) ENGINE = ReplicatedMergeTree('{default_path_test}test_01148', '{default_name_test}') ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5890', () => {
    const query = `CREATE DATABASE test_01148_atomic ENGINE=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5891', () => {
    const query = `CREATE TABLE test_01148_atomic.rmt2 ON CLUSTER test_shard_localhost (n int, PRIMARY KEY n) ENGINE=ReplicatedMergeTree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5892', () => {
    const query = `CREATE TABLE test_01148_atomic.rmt3 AS test_01148_atomic.rmt2; -- { serverError BAD_ARGUMENTS } CREATE TABLE test_01148_atomic.rmt4 ON CLUSTER test_shard_localhost AS test_01148_atomic.rmt2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5893', () => {
    const query = `CREATE DATABASE test_01148_ordinary ENGINE=Ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5894', () => {
    const query = `CREATE DATABASE imdb_01148 ENGINE = Replicated('/test/databases/imdb_01148', '{shard}', '{replica}');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5895', () => {
    const query = `CREATE TABLE imdb_01148.movie_directors (\`director_id\` UInt64, \`movie_id\` UInt64) ENGINE = ReplicatedMergeTree ORDER BY (director_id, movie_id) SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5896', () => {
    const query = `CREATE TABLE imdb_01148.anything AS imdb_01148.movie_directors;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5897', () => {
    const query = `CREATE TABLE t0 (x UInt32, y UInt64) engine = MergeTree ORDER BY (x,y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5898', () => {
    const query = `CREATE TABLE t1 (x UInt32, y UInt64) engine = MergeTree ORDER BY (x,y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5899', () => {
    const query = `CREATE TABLE t2 (x UInt32, y UInt64) engine = MergeTree ORDER BY (x,y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5900', () => {
    const query = `CREATE TABLE multiword_types ( a DOUBLE,
b DOUBLE PRECISION,
c CHAR DEFAULT 'str',
d CHAR VARYING,
e CHAR LARGE OBJECT COMMENT 'comment',
f CHARACTER VARYING(123),
g ChArAcTeR   large    OBJECT,
h nchar varying (456) default toString(a) comment 'comment',
i NCHAR LARGE OBJECT,
j BINARY LARGE OBJECT,
k BINARY VARYING,
l NATIONAL CHAR,
m NATIONAL CHARACTER,
n NATIONAL CHARACTER LARGE OBJECT,
o NATIONAL CHARACTER VARYING,
p NATIONAL CHAR VARYING
) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5901', () => {
    const query = `CREATE TABLE unsigned_types ( a TINYINT  SIGNED,
b INT1     SIGNED,
c SMALLINT SIGNED,
d INT      SIGNED,
e INTEGER  SIGNED,
f BIGINT   SIGNED,
g TINYINT  UNSIGNED,
h INT1     UNSIGNED,
i SMALLINT UNSIGNED,
j INT      UNSIGNED,
k INTEGER  UNSIGNED,
l BIGINT   UNSIGNED
) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5902', () => {
    const query = `create table table(query String, test String, run UInt32, metrics Array(UInt32), version UInt32) engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5903', () => {
    const query = `CREATE TABLE t1 (id UInt32, value1 String) ENGINE MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5904', () => {
    const query = `CREATE TABLE t2 (id UInt32, value2 String) ENGINE MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5905', () => {
    const query = `CREATE TABLE t3 (id UInt32, value3 String) ENGINE MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5906', () => {
    const query = `CREATE VIEW IF NOT EXISTS view1 AS SELECT t1.id AS id, t1.value1 AS value1, t2.value2 AS value2, t3.value3 AS value3
FROM t1
LEFT JOIN t2 ON t1.id = t2.id
LEFT JOIN t3 ON t1.id = t3.id
WHERE t1.id > 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5907', () => {
    const query = `create table t engine Memory as select * from numbers(2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5908', () => {
    const query = `create table wt (a Int, b Int) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5909', () => {
    const query = `CREATE TABLE t (\`x\` UInt32, \`lc\` LowCardinality(String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5910', () => {
    const query = `CREATE TABLE nr (\`x\` Nullable(UInt32), \`lc\` Nullable(String)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5911', () => {
    const query = `CREATE TABLE t1 (\`s\` String, \`x\` Array(UInt8), \`k\` UInt64) ENGINE = Join(ANY, LEFT, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5912', () => {
    const query = `CREATE TABLE t2 (\`s\` String, \`x\` Array(UInt8), \`k\` UInt64) ENGINE = Join(ANY, INNER, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5913', () => {
    const query = `CREATE TABLE t1 (id String, name String, value UInt32) ENGINE = Join(ANY, LEFT, id)
SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5914', () => {
    const query = `CREATE TABLE t2 (id String, name String, value UInt32) ENGINE = Join(ANY, LEFT, id)
SETTINGS join_use_nulls = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5915', () => {
    const query = `CREATE TABLE t3 (id Nullable(String), name String, value UInt32) ENGINE = Join(ANY, LEFT, id)
SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5916', () => {
    const query = `CREATE TABLE t4 (id String, name Nullable(String), value UInt32) ENGINE = Join(ANY, LEFT, id)
SETTINGS join_use_nulls = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5917', () => {
    const query = `CREATE TABLE foo_local (bar UInt64) ENGINE = MergeTree()
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5918', () => {
    const query = `CREATE TABLE foo_distributed AS foo_local ENGINE = Distributed('test_cluster_two_shards_localhost', currentDatabase(), foo_local);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5919', () => {
    const query = `CREATE TEMPORARY TABLE _tmp_baz (qux UInt64);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5920', () => {
    const query = `create table tab (x UInt64, v UInt64) engine = ReplacingMergeTree(v) order by (x, sipHash64(x)) sample by sipHash64(x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5921', () => {
    const query = `CREATE TABLE pk_func(d DateTime, ui UInt32) ENGINE = SummingMergeTree ORDER BY toDate(d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5922', () => {
    const query = `CREATE TABLE pk_func(d DateTime, ui UInt32) ENGINE = MergeTree ORDER BY toDate(d) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5923', () => {
    const query = `CREATE TABLE nORX (\`A\` Int64, \`B\` Int64, \`V\` Int64) ENGINE = MergeTree ORDER BY (A, negate(B)) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5924', () => {
    const query = `create table test (project LowCardinality(String)) engine=MergeTree() order by project;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5925', () => {
    const query = `CREATE TABLE default_table (
id UInt64,
enum_column Enum8('undefined' = 0, 'fox' = 1, 'index' = 2)
)
ENGINE ReplicatedMergeTree('/clickhouse/{database}/test_01135/default_table', '1')
ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5926', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS system.dict1 (
bytes_allocated UInt64,
element_count Int32,
loading_start_time DateTime
)
PRIMARY KEY bytes_allocated
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' PASSWORD '' TABLE 'dictionaries' DB 'system'))
LIFETIME(0)
LAYOUT(hashed());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5927', () => {
    const query = `CREATE TABLE mass_table_312 (d Date DEFAULT '2000-01-01', x UInt64, n Nested(a String, b String)) ENGINE = MergeTree(d, x, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5928', () => {
    const query = `CREATE TABLE mt (d Date, x String) ENGINE = MergeTree(d, x, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5929', () => {
    const query = `CREATE TABLE mt (d Date, x UInt8) ENGINE = MergeTree(d, x, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5930', () => {
    const query = `CREATE TABLE mass_table_117 (\`dt\` Date, \`site_id\` Int32, \`site_key\` String) ENGINE = MergeTree(dt, (site_id, site_key, dt), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5931', () => {
    const query = `CREATE TABLE date_table (
id UInt32,
val String,
start Date,
end Date
) Engine = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5932', () => {
    const query = `CREATE DICTIONARY somedict (
id UInt32,
val String,
start Date,
end Date
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'date_table' DB currentDatabase()))
LAYOUT(RANGE_HASHED())
RANGE (MIN start MAX end)
LIFETIME(MIN 300 MAX 360);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5933', () => {
    const query = `CREATE TABLE source_table (x UInt16) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5934', () => {
    const query = `CREATE VIEW dest_view (x UInt64) AS SELECT * FROM source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5935', () => {
    const query = `CREATE TABLE rollup_having ( a Nullable(String),
b Nullable(String)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5936', () => {
    const query = `create user "       ";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5937', () => {
    const query = `create user '   spaces';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5938', () => {
    const query = `create user 'spaces    ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5939', () => {
    const query = `create user \` INTERSERVER SECRET \`;  -- { serverError BAD_ARGUMENTS } create user '';  -- { clientError SYNTAX_ERROR }
create user 'test 01119';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5940', () => {
    const query = `create user "无名氏 ";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5941', () => {
    const query = `create user "🙈 🙉 🙊";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5942', () => {
    const query = `create table t(n int, a Int64, s String) engine = MergeTree() order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5943', () => {
    const query = `CREATE TEMPORARY TABLE sessions (date DateTime, visitorId String, sessionId String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5944', () => {
    const query = `CREATE TEMPORARY TABLE orders (date DateTime, visitorId String, orderId String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5945', () => {
    const query = `CREATE TABLE prewhere (light UInt8, heavy String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5946', () => {
    const query = `CREATE TABLE testtable (DT Datetime, Label1 String, Value UInt64) ENGINE = MergeTree() PARTITION BY DT ORDER BY Label1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5947', () => {
    const query = `CREATE TABLE t1 (key UInt64, a UInt8, b String, c Float64) ENGINE = MergeTree() ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5948', () => {
    const query = `CREATE DICTIONARY dict_flat (key UInt64 DEFAULT 0, a UInt8 DEFAULT 42, b String DEFAULT 'x', c Float64 DEFAULT 42.0) PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE 't1'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5949', () => {
    const query = `CREATE DICTIONARY dict_hashed (key UInt64 DEFAULT 0, a UInt8 DEFAULT 42, b String DEFAULT 'x', c Float64 DEFAULT 42.0) PRIMARY KEY key
SOURCE(CLICKHOUSE(TABLE 't1'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5950', () => {
    const query = `CREATE DICTIONARY dict_complex_cache (key UInt64 DEFAULT 0, a UInt8 DEFAULT 42, b String DEFAULT 'x', c Float64 DEFAULT 42.0) PRIMARY KEY key, b
SOURCE(CLICKHOUSE(TABLE 't1'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(COMPLEX_KEY_CACHE(SIZE_IN_CELLS 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5951', () => {
    const query = `CREATE TABLE minmax_compact (
u64 UInt64,
i64 Int64,
i32 Int32
) ENGINE = MergeTree()
PARTITION BY i32
ORDER BY u64
SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi', min_rows_for_wide_part = 1000000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5952', () => {
    const query = `CREATE TABLE clear_column(x UInt32, y UInt32) ENGINE MergeTree ORDER BY x PARTITION by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5953', () => {
    const query = `CREATE TABLE mt_compact (d Date, id UInt32, s String) ENGINE = MergeTree ORDER BY id PARTITION BY d
SETTINGS min_bytes_for_wide_part = 10000000, index_granularity = 128;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5954', () => {
    const query = `CREATE TABLE table_for_dict ( CompanyID String,
OSType Enum('UNKNOWN' = 0, 'WINDOWS' = 1, 'LINUX' = 2, 'ANDROID' = 3, 'MAC' = 4),
SomeID Int32
)
ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5955', () => {
    const query = `CREATE DICTIONARY dict_with_conversion (
CompanyID String DEFAULT '',
OSType String DEFAULT '',
SomeID Int32 DEFAULT 0
)
PRIMARY KEY CompanyID
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' DB currentDatabase()))
LIFETIME(MIN 1 MAX 20)
LAYOUT(COMPLEX_KEY_HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5956', () => {
    const query = `CREATE TABLE check_table_with_indices ( id UInt64,
data String,
INDEX a (id) type minmax GRANULARITY 3
) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5957', () => {
    const query = `CREATE DATABASE db_for_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5958', () => {
    const query = `CREATE TABLE db_for_dict.table_for_dict (
key1 UInt64,
value String
)
ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5959', () => {
    const query = `CREATE DICTIONARY db_for_dict.dict_with_hashed_layout (
key1 UInt64,
value String
)
PRIMARY KEY key1
LAYOUT(HASHED)
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' DB 'db_for_dict'))
LIFETIME(MIN 1 MAX 10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5960', () => {
    const query = `CREATE DATABASE test_01109 ENGINE=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5961', () => {
    const query = `CREATE TABLE t0 ENGINE=MergeTree() ORDER BY tuple() AS SELECT rowNumberInAllBlocks(), * FROM (SELECT toLowCardinality(arrayJoin(['exchange', 'tables'])));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5962', () => {
    const query = `CREATE TABLE t1 ENGINE=Log() AS SELECT * FROM system.tables AS t JOIN system.databases AS d ON t.database=d.name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5963', () => {
    const query = `CREATE TABLE t2 ENGINE=MergeTree() ORDER BY tuple() AS SELECT rowNumberInAllBlocks() + (SELECT count() FROM t0), * FROM (SELECT arrayJoin(['hello', 'world']));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5964', () => {
    const query = `CREATE DATABASE test_01109_other_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5965', () => {
    const query = `CREATE DATABASE test_01109_ordinary ENGINE=Ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5966', () => {
    const query = `CREATE TABLE test_01109_other_atomic.t3 ENGINE=MergeTree() ORDER BY tuple() AS SELECT rowNumberInAllBlocks() + (SELECT max((*,*).1.1) + 1 FROM (SELECT (*,) FROM t1 UNION ALL SELECT (*,) FROM t2)), *
FROM (SELECT arrayJoin(['another', 'db']));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5967', () => {
    const query = `CREATE TABLE test_01109_ordinary.t4 AS t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5968', () => {
    const query = `CREATE DATABASE test_01109_rename_exists ENGINE=Atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5969', () => {
    const query = `CREATE TABLE t0 ENGINE=Log() AS SELECT * FROM system.numbers limit 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5970', () => {
    const query = `CREATE TABLE t (item_id UInt64, price_sold Float32, date Date) ENGINE MergeTree ORDER BY item_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5971', () => {
    const query = `CREATE TABLE d_one (dummy UInt8) ENGINE = Distributed(test_cluster_two_shards, system, one, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5972', () => {
    const query = `CREATE TABLE d_numbers (number UInt32) ENGINE = Distributed(test_cluster_two_shards, system, numbers, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5973', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_01103;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5974', () => {
    const query = `create table t1_distr as t1_shard engine Distributed(test_cluster_two_shards_localhost, test_01103, t1_shard, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5975', () => {
    const query = `create table t2_distr as t2_shard engine Distributed(test_cluster_two_shards_localhost, test_01103, t2_shard, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5976', () => {
    const query = `CREATE TABLE visits(StartDate Date) ENGINE MergeTree ORDER BY(StartDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5977', () => {
    const query = `CREATE TABLE hits(EventDate Date, WatchID UInt8) ENGINE MergeTree ORDER BY(EventDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5978', () => {
    const query = `CREATE TABLE visits_layer(StartDate Date) ENGINE Distributed(test_cluster_two_shards_localhost,  currentDatabase(), 'visits');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5979', () => {
    const query = `CREATE TABLE hits_layer(EventDate Date, WatchID UInt8) ENGINE Distributed(test_cluster_two_shards_localhost,  currentDatabase(), 'hits');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5980', () => {
    const query = `CREATE TABLE test_a (
OldColumn String DEFAULT '',
EventDate Date DEFAULT toDate(EventTime),
EventTime DateTime
) ENGINE = MergeTree(EventDate, EventTime, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5981', () => {
    const query = `CREATE TABLE test_b (
OldColumn String DEFAULT '',
NewColumn String DEFAULT '',
EventDate Date DEFAULT toDate(EventTime),
EventTime DateTime
) ENGINE = MergeTree(EventDate, EventTime, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5982', () => {
    const query = `CREATE TABLE local_01099_a (number UInt64) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5983', () => {
    const query = `CREATE TABLE local_01099_b (number UInt64) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5984', () => {
    const query = `CREATE TABLE distributed_01099_a AS local_01099_a ENGINE = Distributed('test_shard_localhost', currentDatabase(), local_01099_a, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5985', () => {
    const query = `CREATE TABLE distributed_01099_b AS local_01099_b ENGINE = Distributed('test_shard_localhost', currentDatabase(), local_01099_b, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5986', () => {
    const query = `CREATE TABLE distributed_01099_a AS local_01099_a ENGINE = Distributed('test_cluster_two_shards_localhost', currentDatabase(), local_01099_a, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5987', () => {
    const query = `CREATE TABLE distributed_01099_b AS local_01099_b ENGINE = Distributed('test_cluster_two_shards_localhost', currentDatabase(), local_01099_b, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5988', () => {
    const query = `CREATE TABLE distributed_01099_a AS local_01099_a ENGINE = Distributed('test_cluster_two_shards', currentDatabase(), local_01099_a, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5989', () => {
    const query = `CREATE TABLE distributed_01099_b AS local_01099_b ENGINE = Distributed('test_cluster_two_shards', currentDatabase(), local_01099_b, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5990', () => {
    const query = `CREATE TABLE local_01099_a (number UInt64) ENGINE = MergeTree() ORDER BY number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5991', () => {
    const query = `CREATE TABLE local_01099_b (number UInt64) ENGINE = MergeTree() ORDER BY number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5992', () => {
    const query = `CREATE TABLE distributed_01099_a AS local_01099_a ENGINE = Distributed('test_cluster_1_shard_3_replicas_1_unavailable', currentDatabase(), local_01099_a, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5993', () => {
    const query = `CREATE TABLE distributed_01099_b AS local_01099_b ENGINE = Distributed('test_cluster_1_shard_3_replicas_1_unavailable', currentDatabase(), local_01099_b, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5994', () => {
    const query = `create table t (id UInt32, a Int) engine = MergeTree order by id settings min_bytes_for_wide_part=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5995', () => {
    const query = `create table t (id UInt32, a Int) engine = MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5996', () => {
    const query = `CREATE TABLE table_with_cyclic_defaults (a DEFAULT b, b DEFAULT a) ENGINE = Memory; --{serverError CYCLIC_ALIASES} CREATE TABLE table_with_cyclic_defaults (a DEFAULT b + 1, b DEFAULT a * a) ENGINE = Memory; --{serverError CYCLIC_ALIASES}
CREATE TABLE table_with_cyclic_defaults (a DEFAULT b, b DEFAULT toString(c), c DEFAULT concat(a, '1')) ENGINE = Memory; --{serverError CYCLIC_ALIASES}
CREATE TABLE table_with_cyclic_defaults (a DEFAULT b, b DEFAULT c, c DEFAULT a * b) ENGINE = Memory; --{serverError CYCLIC_ALIASES}
CREATE TABLE table_with_cyclic_defaults (a String DEFAULT b, b String DEFAULT a) ENGINE = Memory; --{serverError CYCLIC_ALIASES}
CREATE TABLE table_with_cyclic_defaults (a String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5997', () => {
    const query = `CREATE TABLE part (
p_partkey       Int32,  -- PK
p_name          String, -- variable text, size 55
p_mfgr          FixedString(25),
p_brand         FixedString(10),
p_type          String, -- variable text, size 25
p_size          Int32,  -- integer
p_container     FixedString(10),
p_retailprice   Decimal(18,2),
p_comment       String, -- variable text, size 23
CONSTRAINT pk CHECK p_partkey >= 0,
CONSTRAINT positive CHECK (p_size >= 0 AND p_retailprice >= 0)
) engine = MergeTree ORDER BY (p_partkey);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5998', () => {
    const query = `CREATE TABLE supplier (
s_suppkey       Int32,  -- PK
s_name          FixedString(25),
s_address       String, -- variable text, size 40
s_nationkey     Int32,  -- FK n_nationkey
s_phone         FixedString(15),
s_acctbal       Decimal(18,2),
s_comment       String, -- variable text, size 101
CONSTRAINT pk CHECK s_suppkey >= 0
) engine = MergeTree ORDER BY (s_suppkey);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 5999', () => {
    const query = `CREATE TABLE partsupp (
ps_partkey      Int32,  -- PK(1), FK p_partkey
ps_suppkey      Int32,  -- PK(2), FK s_suppkey
ps_availqty     Int32,  -- integer
ps_supplycost   Decimal(18,2),
ps_comment      String, -- variable text, size 199
CONSTRAINT pk CHECK ps_partkey >= 0,
CONSTRAINT c1 CHECK (ps_availqty >= 0 AND ps_supplycost >= 0)
) engine = MergeTree ORDER BY (ps_partkey, ps_suppkey);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6000', () => {
    const query = `CREATE TABLE customer (
c_custkey       Int32,  -- PK
c_name          String, -- variable text, size 25
c_address       String, -- variable text, size 40
c_nationkey     Int32,  -- FK n_nationkey
c_phone         FixedString(15),
c_acctbal       Decimal(18,2),
c_mktsegment    FixedString(10),
c_comment       String, -- variable text, size 117
CONSTRAINT pk CHECK c_custkey >= 0
) engine = MergeTree ORDER BY (c_custkey);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6001', () => {
    const query = `CREATE TABLE orders (
o_orderkey      Int32,  -- PK
o_custkey       Int32,  -- FK c_custkey
o_orderstatus   FixedString(1),
o_totalprice    Decimal(18,2),
o_orderdate     Date,
o_orderpriority FixedString(15),
o_clerk         FixedString(15),
o_shippriority  Int32,  -- integer
o_comment       String, -- variable text, size 79
CONSTRAINT c1 CHECK o_totalprice >= 0
) engine = MergeTree ORDER BY (o_orderdate, o_orderkey);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6002', () => {
    const query = `CREATE TABLE lineitem (
l_orderkey      Int32,  -- PK(1), FK o_orderkey
l_partkey       Int32,  -- FK ps_partkey
l_suppkey       Int32,  -- FK ps_suppkey
l_linenumber    Int32,  -- PK(2)
l_quantity      Decimal(18,2),
l_extendedprice Decimal(18,2),
l_discount      Decimal(18,2),
l_tax           Decimal(18,2),
l_returnflag    FixedString(1),
l_linestatus    FixedString(1),
l_shipdate      Date,
l_commitdate    Date,
l_receiptdate   Date,
l_shipinstruct  FixedString(25),
l_shipmode      FixedString(10),
l_comment       String, -- variable text size 44
CONSTRAINT c1 CHECK (l_quantity >= 0 AND l_extendedprice >= 0 AND l_tax >= 0 AND l_shipdate <= l_receiptdate)
) engine = MergeTree ORDER BY (l_shipdate, l_receiptdate, l_orderkey, l_linenumber);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6003', () => {
    const query = `CREATE TABLE nation (
n_nationkey     Int32,  -- PK
n_name          FixedString(25),
n_regionkey     Int32,  -- FK r_regionkey
n_comment       String, -- variable text, size 152
CONSTRAINT pk CHECK n_nationkey >= 0
) Engine = MergeTree ORDER BY (n_nationkey);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6004', () => {
    const query = `CREATE TABLE region (
r_regionkey     Int32,  -- PK
r_name          FixedString(25),
r_comment       String, -- variable text, size 152
CONSTRAINT pk CHECK r_regionkey >= 0
) engine = MergeTree ORDER BY (r_regionkey);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6005', () => {
    const query = `create view revenue0 as select
l_suppkey,
sum(l_extendedprice * (1 - l_discount))
from
lineitem
where
l_shipdate >= date '1996-01-01'
and l_shipdate < date '1996-01-01' + interval '3' month
group by
l_suppkey;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6006', () => {
    const query = `CREATE TABLE test (
\`a0\` UInt64 DEFAULT a1 + 1,
\`a1\` UInt64 DEFAULT a0 + 1,
\`a2\` UInt64 DEFAULT a3 + a4,
\`a3\` UInt64 DEFAULT a2 + 1,
\`a4\` UInt64 ALIAS a3 + 1
)
ENGINE = Log; -- { serverError CYCLIC_ALIASES }
CREATE TABLE pythagoras
(
\`a\` Float64 DEFAULT sqrt((c * c) - (b * b)),
\`b\` Float64 DEFAULT sqrt((c * c) - (a * a)),
\`c\` Float64 DEFAULT sqrt((a * a) + (b * b))
)
ENGINE = Log; -- { serverError CYCLIC_ALIASES }
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6007', () => {
    const query = `CREATE TABLE table_with_complex_default (i Int8, n UInt8 DEFAULT 42, s String DEFAULT concat('test', CAST(n, 'String'))) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6008', () => {
    const query = `CREATE TABLE test_default_using_alias (
what String,
a String DEFAULT concat(c, ' is great'),
b String DEFAULT concat(c, ' is fast'),
c String ALIAS concat(what, 'House')
)
ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6009', () => {
    const query = `CREATE TABLE mutations_and_quorum1 (\`server_date\` Date, \`something\` String) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01090/mutations_and_quorum', '1') PARTITION BY toYYYYMM(server_date) ORDER BY (server_date, something);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6010', () => {
    const query = `CREATE TABLE mutations_and_quorum2 (\`server_date\` Date, \`something\` String) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01090/mutations_and_quorum', '2') PARTITION BY toYYYYMM(server_date) ORDER BY (server_date, something);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6011', () => {
    const query = `CREATE TABLE old_format_mt ( event_date Date,
key UInt64,
value1 UInt64,
value2 String
)
ENGINE = MergeTree(event_date, (key, value1), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6012', () => {
    const query = `CREATE TABLE test_table(a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3, 'UTC'), UUID)) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6013', () => {
    const query = `CREATE TABLE test_table_2(a Array(Int8), b UInt32, c Nullable(String), d Decimal32(4), e Nullable(Enum16('h' = 1, 'w' = 5 , 'o' = -200)), f Float64, g Tuple(Date, DateTime('UTC'), DateTime64(3, 'UTC'), UUID), h FixedString(2)) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6014', () => {
    const query = `CREATE TABLE test_table(a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3), UUID)) ENGINE = GenerateRandom();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6015', () => {
    const query = `CREATE TABLE test_table_2(a Array(Int8), d Decimal32(4), c Tuple(DateTime64(3, 'UTC'), UUID)) ENGINE = GenerateRandom(10, 5, 3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6016', () => {
    const query = `create table t (i Int, a Int, s String, index ind_s (s) type set(1) granularity 1) engine = MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6017', () => {
    const query = `CREATE DATABASE {CLICKHOUSE_DATABASE:Identifier} ENGINE=Ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6018', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.mt(a Int32, market Int32, timestamp DateTime) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6019', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv ENGINE Memory WATERMARK=ASCENDING AS SELECT count(a) AS count, market, tumbleEnd(wid) AS w_end FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY tumble(timestamp, INTERVAL '5' SECOND) AS wid, market;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6020', () => {
    const query = `CREATE TABLE t (x UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6021', () => {
    const query = `CREATE TABLE table_with_defaults_on_aliases (col1 UInt32, col2 ALIAS col1, col3 DEFAULT col2) Engine = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6022', () => {
    const query = `CREATE TABLE test_alias (a UInt8 ALIAS b, b UInt8) ENGINE Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6023', () => {
    const query = `CREATE TABLE IF NOT EXISTS functional_index_mergetree (x Float64) ENGINE = MergeTree ORDER BY round(x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6024', () => {
    const query = `CREATE TABLE file (n Int8) ENGINE = File(upper('tsv') || 'WithNames' || 'AndTypes');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6025', () => {
    const query = `CREATE TABLE buffer (n Int8) ENGINE = Buffer(currentDatabase(), file, 16, 10, 200, 10000, 1000000, 10000000, 1000000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6026', () => {
    const query = `CREATE TABLE merge (n Int8) ENGINE = Merge('', lower('DISTRIBUTED'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6027', () => {
    const query = `CREATE TABLE merge_tf as merge(currentDatabase(), '.*');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6028', () => {
    const query = `CREATE TABLE distributed (n Int8) ENGINE = Distributed(test_shard_localhost, currentDatabase(), 'fi' || 'le');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6029', () => {
    const query = `CREATE TABLE distributed_tf as cluster('test' || '_' || 'shard_localhost', '', 'buf' || 'fer');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6030', () => {
    const query = `CREATE TABLE url (n UInt64, col String) ENGINE=URL (
replace
(
'https://localhost:' || getServerPort('https_port') || '/?query='  || 'select n, _table from ' || currentDatabase() || '.merge format CSV', ' ', '+'
),
CSV
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6031', () => {
    const query = `CREATE VIEW view AS SELECT toInt64(n) as n FROM (SELECT toString(n) as n from merge WHERE _table != 'qwerty' ORDER BY _table) UNION ALL SELECT * FROM file;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6032', () => {
    const query = `CREATE TABLE rich_syntax as remote (
'localhos{x|y|t}',
cluster
(
'test' || '_' || 'shard_localhost',
remote
(
'127.0.0.{1..4}',
if
(
toString(40 + 2) NOT IN ('hello', dictGetString(currentDatabase() || '.dict', 'col', toUInt64('0001'))),
currentDatabase(),
'FAIL'
),
extract('123view456', '[a-z]+')
)
)
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6033', () => {
    const query = `CREATE TABLE n (k UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6034', () => {
    const query = `CREATE TABLE r (k UInt32, name String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6035', () => {
    const query = `create table ax (A Int64, B Int64) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6036', () => {
    const query = `create table bx (A Int64) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6037', () => {
    const query = `create table da_memory_efficient_shard(A Int64, B Int64) Engine=MergeTree order by A partition by B % 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6038', () => {
    const query = `create table test_01081 (key Int) engine=MergeTree() order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6039', () => {
    const query = `CREATE TABLE test_joinGet(user_id Nullable(Int32), name String) Engine = Join(ANY, LEFT, user_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6040', () => {
    const query = `CREATE TABLE A1( a DateTime ) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6041', () => {
    const query = `CREATE TABLE A_M as A1 ENGINE = Merge(currentDatabase(), '^A1\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6042', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.test_table_01080 (dim_key Int64, dim_id String) ENGINE = MergeTree Order by (dim_key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6043', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.test_dict_01080 ( dim_key Int64, dim_id String ) PRIMARY KEY dim_key
source(clickhouse(host 'localhost' port tcpPort() user 'default' password '' db currentDatabase() table 'test_table_01080'))
LIFETIME(MIN 0 MAX 0) LAYOUT(complex_key_hashed());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6044', () => {
    const query = `CREATE TABLE mt_pk ENGINE = MergeTree PARTITION BY d ORDER BY x SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi' AS SELECT toDate(number % 32) AS d, number AS x FROM system.numbers LIMIT 10000010;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6045', () => {
    const query = `create table t (a Int) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6046', () => {
    const query = `CREATE TABLE alter_default (
date Date,
key UInt64
)
ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_01079/alter_default', '1')
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6047', () => {
    const query = `create table t (a Int, b Int) engine = MergeTree order by (a, b) settings index_granularity = 400;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6048', () => {
    const query = `CREATE TABLE bloom_filter_not_has (ary Array(LowCardinality(Nullable(String))), d Date, INDEX idx_ary ary TYPE bloom_filter(0.01) GRANULARITY 1024) ENGINE = MergeTree() PARTITION BY d ORDER BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6049', () => {
    const query = `create table t50 (a Int, b Int, s String) engine = MergeTree order by a settings index_granularity = 50, index_granularity_bytes=1000, min_index_granularity_bytes=500;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6050', () => {
    const query = `CREATE TABLE t (a Int, b Int, c Int) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6051', () => {
    const query = `CREATE TABLE test(date Date, id Int8, name String, value Int64) ENGINE = MergeTree(date, (id, date), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6052', () => {
    const query = `CREATE VIEW test_view AS SELECT * FROM test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6053', () => {
    const query = `CREATE USER test_user_01075;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6054', () => {
    const query = `CREATE USER test_user_01075_x@localhost;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6055', () => {
    const query = `CREATE USER test_user_01074;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6056', () => {
    const query = `CREATE USER test_user_01073;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6057', () => {
    const query = `CREATE ROLE test_role_01073;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6058', () => {
    const query = `CREATE TABLE test_01073_crlf_end_of_line (value UInt8, word String) ENGINE = MergeTree() ORDER BY value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6059', () => {
    const query = `CREATE TABLE merge_tree (d Date) ENGINE = MergeTree ORDER BY d PARTITION BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6060', () => {
    const query = `CREATE TABLE aine (a Int) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6061', () => {
    const query = `create table data_01072 (key Int, value Int, str String) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6062', () => {
    const query = `create table dist_01072 (key Int, value Int, str String) Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01072, key%2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6063', () => {
    const query = `create table dist_01072 (key Int, value Nullable(Int), str String) Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01072, key%2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6064', () => {
    const query = `create table dist_01072 (key Int, value LowCardinality(Int), str String) Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01072, key%2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6065', () => {
    const query = `create table dist_01072 (key Int, value LowCardinality(Nullable(Int)), str String) Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01072, key%2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6066', () => {
    const query = `CREATE TABLE foo ( id UInt32,
a Float64,
b Float64,
c Float64,
d Float64
) Engine = MergeTree()
PARTITION BY id
ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6067', () => {
    const query = `CREATE TABLE json_square_brackets (id UInt32, name String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6068', () => {
    const query = `CREATE TABLE table_to_drop(x Int8) ENGINE=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6069', () => {
    const query = `CREATE TEMPORARY TABLE table_to_drop(x Int8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6070', () => {
    const query = `CREATE TABLE old_syntax_01071_test (date Date, id UInt8) ENGINE = MergeTree(date, id, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6071', () => {
    const query = `create table data_01071 (key Int) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6072', () => {
    const query = `create table dist_01071 as data_01071 Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01071);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6073', () => {
    const query = `create table dist_01071 as data_01071 Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01071, key%2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6074', () => {
    const query = `create table dist_01071 as data_01071 Engine=Distributed(test_cluster_two_shards, currentDatabase(), data_01071, key + rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6075', () => {
    const query = `create table data2_01071 (key Int, sub_key Int) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6076', () => {
    const query = `create table dist2_layer_01071 as data2_01071 Engine=Distributed(test_cluster_two_shards, currentDatabase(), data2_01071, sub_key%2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6077', () => {
    const query = `create table dist2_01071 as data2_01071 Engine=Distributed(test_cluster_two_shards, currentDatabase(), dist2_layer_01071, key%2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6078', () => {
    const query = `create table ttl (i Int, a Int, s String) engine = MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6079', () => {
    const query = `create table ttl (i Int, a Int, s String default 'b' ttl a % 2 = 0 ? today() - 10 : toDate('2100-01-01'), index ind_s (s) type set(1) granularity 1) engine = MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6080', () => {
    const query = `create table ttl (i Int, s String) engine = MergeTree order by i ttl toDate('2000-01-01') TO DISK 'default';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6081', () => {
    const query = `create table ttl (a Int, b Int, c Int default 42 ttl d, d Date, index ind (b * c) type minmax granularity 1) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6082', () => {
    const query = `create table ttl (d Date, a Int) engine = MergeTree order by a partition by toDayOfMonth(d) SETTINGS max_number_of_merges_with_ttl_in_pool=0,materialize_ttl_recalculate_only=true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6083', () => {
    const query = `create table ttl (i Int, s String) engine = MergeTree order by i SETTINGS max_number_of_merges_with_ttl_in_pool=0,materialize_ttl_recalculate_only=true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6084', () => {
    const query = `create table ttl (d Date, i Int, s String) engine = MergeTree order by i SETTINGS max_number_of_merges_with_ttl_in_pool=0,materialize_ttl_recalculate_only=true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6085', () => {
    const query = `create table ttl (i Int, s String, t String) engine = MergeTree order by i SETTINGS max_number_of_merges_with_ttl_in_pool=0,materialize_ttl_recalculate_only=true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6086', () => {
    const query = `create table ttl (i Int, s String ttl toDate('2000-01-02')) engine = MergeTree order by i SETTINGS max_number_of_merges_with_ttl_in_pool=0,materialize_ttl_recalculate_only=true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6087', () => {
    const query = `create table ttl (d Date, a Int) engine = MergeTree order by a partition by toDayOfMonth(d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6088', () => {
    const query = `create table ttl (i Int, s String) engine = MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6089', () => {
    const query = `create table ttl (d Date, i Int, s String) engine = MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6090', () => {
    const query = `create table ttl (i Int, s String, t String) engine = MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6091', () => {
    const query = `create table ttl (i Int, s String ttl toDate('2000-01-02')) engine = MergeTree order by i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6092', () => {
    const query = `CREATE TABLE h3_indexes (h3_index UInt64, res UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6093', () => {
    const query = `create table alter_ttl(i Int) engine = MergeTree order by i ttl toDate('2020-05-05');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6094', () => {
    const query = `create table alter_ttl(d Date, s String) engine = MergeTree order by d ttl d + interval 1 month;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6095', () => {
    const query = `CREATE TABLE testmt (\`CounterID\` UInt64, \`value\` String) ENGINE = MergeTree() ORDER BY CounterID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6096', () => {
    const query = `CREATE TABLE mv_source (\`a\` UInt64) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6097', () => {
    const query = `CREATE TABLE mv_target (\`a\` UInt64) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6098', () => {
    const query = `CREATE MATERIALIZED VIEW mv TO mv_target AS SELECT * FROM mv_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6099', () => {
    const query = `create temporary table t1 (a Nullable(UInt8));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6100', () => {
    const query = `create temporary table t2 (a UInt8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6101', () => {
    const query = `CREATE DATABASE memory_01069 ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6102', () => {
    const query = `CREATE TABLE memory_01069.mt (n UInt8) ENGINE = MergeTree() ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6103', () => {
    const query = `CREATE TABLE memory_01069.file (n UInt8) ENGINE = File(CSV);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6104', () => {
    const query = `CREATE TABLE target_table Engine=SummingMergeTree() ORDER BY id SETTINGS index_granularity=128, index_granularity_bytes = '10Mi'
AS
SELECT
number as id,
maxState( toDateTime(0, 'UTC') ) as latest_login_time,
maxState( toDateTime(0, 'UTC') ) as latest_checkout_time,
minState( toUInt64(-1) ) as fastest_session,
maxState( toUInt64(0) ) as biggest_inactivity_period
FROM numbers(50000)
GROUP BY id
SETTINGS max_insert_threads=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6105', () => {
    const query = `CREATE TABLE logins ( id UInt64,
ts DateTime('UTC')
) Engine=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6106', () => {
    const query = `CREATE MATERIALIZED VIEW mv_logins2target TO target_table AS
SELECT
id,
maxState( ts ) as latest_login_time,
maxState( toDateTime(0, 'UTC') ) as latest_checkout_time,
minState( toUInt64(-1) ) as fastest_session,
if(max(current_latest_checkout_time) > 0, maxState(toUInt64(ts - current_latest_checkout_time)), maxState( toUInt64(0) ) ) as biggest_inactivity_period
FROM logins
LEFT JOIN (
SELECT
id,
maxMerge(latest_checkout_time) as current_latest_checkout_time
FROM target_table
WHERE id IN (SELECT id FROM logins)
GROUP BY id
) USING (id)
GROUP BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6107', () => {
    const query = `CREATE TABLE checkouts ( id UInt64,
ts DateTime('UTC')
) Engine=MergeTree ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6108', () => {
    const query = `CREATE MATERIALIZED VIEW mv_checkouts2target TO target_table AS
SELECT
id,
maxState( toDateTime(0, 'UTC') ) as latest_login_time,
maxState( ts ) as latest_checkout_time,
if(max(current_latest_login_time) > 0, minState( toUInt64(ts - current_latest_login_time)), minState( toUInt64(-1) ) ) as fastest_session,
maxState( toUInt64(0) ) as biggest_inactivity_period
FROM checkouts
LEFT JOIN (SELECT id, maxMerge(latest_login_time) as current_latest_login_time FROM target_table WHERE id IN (SELECT id FROM checkouts) GROUP BY id) USING (id)
GROUP BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6109', () => {
    const query = `CREATE TABLE mt (x UInt8, y Date) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6110', () => {
    const query = `CREATE TABLE test_alter_on_mutation (
date Date,
key UInt64,
value String
)
ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_01062/alter_on_mutation', '1')
ORDER BY key PARTITION BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6111', () => {
    const query = `CREATE TABLE nested_alter (\`d\` Date, \`k\` UInt64, \`i32\` Int32, \`dt\` DateTime, \`n.ui8\` Array(UInt8), \`n.s\` Array(String), \`n.d\` Array(Date), \`s\` String DEFAULT '0') ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01062/nested_alter', 'r2', d, k, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6112', () => {
    const query = `create table alter_bug ( epoch UInt64 CODEC(Delta,LZ4),
_time_dec Float64
) Engine = MergeTree ORDER BY (epoch);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6113', () => {
    const query = `CREATE TABLE test Engine = MergeTree ORDER BY number SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi' AS SELECT number, toString(rand()) x from numbers(10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6114', () => {
    const query = `CREATE TABLE defaults_all_columns (n UInt8 DEFAULT 42, s String DEFAULT concat('test', CAST(n, 'String'))) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6115', () => {
    const query = `CREATE TABLE t1 (id UInt32, value1 String ) ENGINE ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6116', () => {
    const query = `CREATE TABLE t2 (id UInt32, value2 String ) ENGINE ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6117', () => {
    const query = `CREATE TABLE t3 (id UInt32, value3 String ) ENGINE ReplacingMergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6118', () => {
    const query = `CREATE VIEW IF NOT EXISTS view1 AS SELECT t1.id AS id, t1.value1 AS value1, t2.value2 AS value2, t3.value3 AS value3 FROM t1 LEFT JOIN t2 ON t1.id = t2.id LEFT JOIN t3 ON t1.id = t3.id WHERE t1.id > 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6119', () => {
    const query = `CREATE TABLE A (ts DateTime, id String, id_b String) ENGINE = MergeTree PARTITION BY toStartOfHour(ts) ORDER BY (ts,id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6120', () => {
    const query = `CREATE TABLE B (ts DateTime, id String, id_c String) ENGINE = MergeTree PARTITION BY toStartOfHour(ts) ORDER BY (ts,id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6121', () => {
    const query = `CREATE TABLE test ( A Int32, B Int32 ) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6122', () => {
    const query = `CREATE TABLE test (\`int8\` Int8, \`int16\` Int16, \`int32\` Int32, \`int64\` Int64, INDEX idx (\`int8\`, \`int16\`, \`int32\`, \`int64\`) TYPE bloom_filter(0.01) GRANULARITY 8192 ) ENGINE = MergeTree() ORDER BY \`int8\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6123', () => {
    const query = `CREATE TABLE t1 (key Int) Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6124', () => {
    const query = `CREATE TABLE t2 AS t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6125', () => {
    const query = `CREATE TABLE t2 Engine=Memory AS t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6126', () => {
    const query = `CREATE TABLE t2 AS t1 Engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6127', () => {
    const query = `CREATE TABLE t3 AS numbers(10);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6128', () => {
    const query = `CREATE VIEW v AS SELECT * FROM t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6129', () => {
    const query = `CREATE TABLE t3 AS v; -- { serverError INCORRECT_QUERY } DROP TABLE v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6130', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE_1:Identifier}.dict_data (key Int, value UInt16) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6131', () => {
    const query = `CREATE DICTIONARY dict (
\`key\` UInt64,
\`value\` UInt16
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(
HOST '127.0.0.1' PORT tcpPort()
TABLE 'dict_data' DB concat(currentDatabase(), '_1') USER 'default' PASSWORD ''))
LIFETIME(MIN 0 MAX 0)
LAYOUT(SPARSE_HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6132', () => {
    const query = `CREATE TABLE t3 AS dict; -- { serverError INCORRECT_QUERY } DROP TABLE IF EXISTS t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6133', () => {
    const query = `CREATE TABLE t1 (x String) ENGINE = Memory AS SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6134', () => {
    const query = `CREATE TABLE test_prewhere_default_column (APIKey UInt8, SessionType UInt8) ENGINE = MergeTree() PARTITION BY APIKey ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6135', () => {
    const query = `CREATE TABLE test_prewhere_column_type (\`a\` LowCardinality(String), \`x\` Nullable(Int32)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6136', () => {
    const query = `create table mt_compact (a Int, s String) engine = MergeTree order by a partition by a settings index_granularity_bytes = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6137', () => {
    const query = `create table mt_compact_2 (a Int, s String) engine = MergeTree order by a partition by a settings min_rows_for_wide_part = 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6138', () => {
    const query = `create table mt_compact (a Int, s String) engine = MergeTree order by a partition by a settings index_granularity_bytes = 0, min_rows_for_wide_part = 1000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6139', () => {
    const query = `create table mt_compact(a UInt64, b UInt64 DEFAULT a * a, s String, n Nested(x UInt32, y String), lc LowCardinality(String)) engine = MergeTree
order by a partition by a % 10
settings index_granularity = 8,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6140', () => {
    const query = `create database if not exists test_01054_overflow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6141', () => {
    const query = `create table test_01054_overflow.ints (key UInt64, i8 Int8, i16 Int16, i32 Int32, i64 Int64, u8 UInt8, u16 UInt16, u32 UInt32, u64 UInt64) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6142', () => {
    const query = `CREATE DATABASE {CLICKHOUSE_DATABASE:Identifier} ENGINE=Ordinary; -- Different inner table name with Atomic set allow_deprecated_syntax_for_merge_tree=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6143', () => {
    const query = `create table {CLICKHOUSE_DATABASE:Identifier}.my_table ENGINE = MergeTree(day, (day), 8192) as select today() as day, 'mystring' as str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6144', () => {
    const query = `create materialized view {CLICKHOUSE_DATABASE:Identifier}.my_materialized_view ENGINE = MergeTree(day, (day), 8192) as select * from {CLICKHOUSE_DATABASE:Identifier}.my_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6145', () => {
    const query = `CREATE TABLE mt(a Int32, timestamp DateTime) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6146', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory WATERMARK=INTERVAL '1' SECOND AS SELECT count(a), hopStart(wid) AS w_start, hopEnd(wid) AS w_end FROM mt GROUP BY hop(timestamp, INTERVAL '3' SECOND, INTERVAL '5' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6147', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS SELECT count(a), hopStart(wid) AS w_start, hopEnd(wid) AS w_end FROM mt GROUP BY hop(timestamp, INTERVAL '3' SECOND, INTERVAL '5' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6148', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS SELECT count(a), hopStart(wid) AS w_start FROM mt GROUP BY hop(timestamp, INTERVAL '3' SECOND, INTERVAL '5' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6149', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS WITH toDateTime('2018-01-01 00:00:00') AS date_time SELECT count(a), hopStart(wid) AS w_start, hopEnd(wid) AS w_end, date_time FROM mt GROUP BY hop(timestamp, INTERVAL '3' SECOND, INTERVAL '5' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6150', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS SELECT count(a), hopStart(wid) AS w_start FROM mt WHERE a != 1 GROUP BY hop(timestamp, INTERVAL '3' SECOND, INTERVAL '5' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6151', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS SELECT count(a), hopStart(wid) AS w_start FROM mt WHERE a != 1 GROUP BY hop(timestamp, INTERVAL '3' SECOND, INTERVAL '5' SECOND) AS wid ORDER BY w_start;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6152', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS SELECT count(a), hopStart(wid) AS w_start, hopEnd(hop(now(), INTERVAL '1' SECOND, INTERVAL '3' SECOND)) as w_end FROM mt GROUP BY hop(now(), INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6153', () => {
    const query = `CREATE TABLE a (x UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6154', () => {
    const query = `CREATE TABLE b (x UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6155', () => {
    const query = `CREATE TABLE c (x UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6156', () => {
    const query = `CREATE TABLE t1 (x UInt32, str String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6157', () => {
    const query = `CREATE TABLE any_left_join (x UInt32, s String) engine = Join(ANY, LEFT, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6158', () => {
    const query = `CREATE TABLE any_inner_join (x UInt32, s String) engine = Join(ANY, INNER, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6159', () => {
    const query = `CREATE TABLE any_right_join (x UInt32, s String) engine = Join(ANY, RIGHT, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6160', () => {
    const query = `CREATE TABLE semi_left_join (x UInt32, s String) engine = Join(SEMI, LEFT, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6161', () => {
    const query = `CREATE TABLE semi_right_join (x UInt32, s String) engine = Join(SEMI, RIGHT, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6162', () => {
    const query = `CREATE TABLE anti_left_join (x UInt32, s String) engine = Join(ANTI, LEFT, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6163', () => {
    const query = `CREATE TABLE anti_right_join (x UInt32, s String) engine = Join(ANTI, RIGHT, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6164', () => {
    const query = `CREATE TABLE left_join (x UInt32, s String) engine = Join(ALL, LEFT, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6165', () => {
    const query = `CREATE TABLE inner_join (x UInt32, s String) engine = Join(ALL, INNER, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6166', () => {
    const query = `CREATE TABLE right_join (x UInt32, s String) engine = Join(ALL, RIGHT, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6167', () => {
    const query = `CREATE TABLE full_join (x UInt32, s String) engine = Join(ALL, FULL, x);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6168', () => {
    const query = `CREATE TABLE left_join (x UInt32, s String) engine = Join(ALL, LEFT, x) SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6169', () => {
    const query = `CREATE TABLE inner_join (x UInt32, s String) engine = Join(ALL, INNER, x) SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6170', () => {
    const query = `CREATE TABLE right_join (x UInt32, s String) engine = Join(ALL, RIGHT, x) SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6171', () => {
    const query = `CREATE TABLE full_join (x UInt32, s String) engine = Join(ALL, FULL, x) SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6172', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory WATERMARK=INTERVAL '1' SECOND AS SELECT count(a), tumbleStart(wid) AS w_start, tumbleEnd(wid) AS w_end FROM mt GROUP BY tumble(timestamp, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6173', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS SELECT count(a), tumbleStart(tumble(timestamp, INTERVAL '3' SECOND)) AS w_start, tumbleEnd(wid) AS w_end FROM mt GROUP BY tumble(timestamp, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6174', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS SELECT count(a), tumbleStart(wid) AS w_start FROM mt GROUP BY tumble(timestamp, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6175', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS WITH toDateTime('2018-01-01 00:00:00') AS date_time SELECT count(a), tumbleStart(wid) AS w_start, tumbleEnd(wid) AS w_end, date_time FROM mt GROUP BY tumble(timestamp, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6176', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS SELECT count(a), tumbleStart(wid) AS w_start FROM mt WHERE a != 1 GROUP BY tumble(timestamp, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6177', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS SELECT count(a), tumbleStart(wid) AS w_start FROM mt WHERE a != 1 GROUP BY tumble(timestamp, INTERVAL '3' SECOND) AS wid ORDER BY w_start;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6178', () => {
    const query = `CREATE WINDOW VIEW wv ENGINE Memory AS SELECT count(a), tumbleStart(wid) AS w_start, tumbleEnd(tumble(now(), INTERVAL '3' SECOND)) AS w_end FROM mt GROUP BY tumble(now(), INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6179', () => {
    const query = `CREATE TABLE a(\`id1\` UInt32, \`id2\` UInt32, \`valA\` UInt32) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6180', () => {
    const query = `CREATE TABLE id1(\`id1\` UInt32, \`val1\` UInt8) ENGINE = Join(ANY, LEFT, id1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6181', () => {
    const query = `CREATE TABLE id2(\`id2\` UInt32, \`val2\` UInt8) ENGINE = Join(ANY, LEFT, id2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6182', () => {
    const query = `create view b as (SELECT * from (SELECT * FROM a ANY LEFT OUTER JOIN id1 USING id1) js1 ANY LEFT OUTER JOIN id2 USING id2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6183', () => {
    const query = `CREATE TABLE testJoinTable (number UInt64, data String) ENGINE = Join(ANY, INNER, number) SETTINGS any_join_distinct_right_table_keys = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6184', () => {
    const query = `CREATE TABLE transaction (id Int32, value Float64, master_id Int32) ENGINE = MergeTree() ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6185', () => {
    const query = `CREATE TABLE master (id Int32, name String) ENGINE = Join (ANY, LEFT, id) SETTINGS any_join_distinct_right_table_keys = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6186', () => {
    const query = `CREATE TABLE tbl (eventDate Date, id String) ENGINE = MergeTree() PARTITION BY tuple() ORDER BY eventDate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6187', () => {
    const query = `CREATE TABLE some_join (id String, value String) ENGINE = Join(ANY, LEFT, id) SETTINGS any_join_distinct_right_table_keys = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6188', () => {
    const query = `create table {CLICKHOUSE_DATABASE:Identifier}.test_01051_d (key UInt64, value String) engine = MergeTree order by key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6189', () => {
    const query = `create view {CLICKHOUSE_DATABASE:Identifier}.test_view_01051_d (key UInt64, value String) as select k2 + 1 as key, v2 || '_x' as value from (select key + 2 as k2, value || '_y' as v2 from test_01051_d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6190', () => {
    const query = `create dictionary {CLICKHOUSE_DATABASE:Identifier}.test_dict_01051_d (key UInt64, value String) primary key key source(clickhouse(host 'localhost' port '9000' user 'default' password '' db currentDatabase() table 'test_view_01051_d')) layout(flat()) lifetime(100500);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6191', () => {
    const query = `CREATE TABLE table_for_synchronous_mutations1(k UInt32, v1 UInt64) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_01049/table_for_synchronous_mutations', '1') ORDER BY k SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6192', () => {
    const query = `CREATE TABLE table_for_synchronous_mutations2(k UInt32, v1 UInt64) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_01049/table_for_synchronous_mutations', '2') ORDER BY k SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6193', () => {
    const query = `CREATE TABLE table_for_synchronous_mutations_no_replication(k UInt32, v1 UInt64) ENGINE MergeTree ORDER BY k SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6194', () => {
    const query = `CREATE TABLE Alpha (foo String, bar UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6195', () => {
    const query = `CREATE TABLE Beta (foo LowCardinality(String), baz UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6196', () => {
    const query = `CREATE DATABASE test_01048 ENGINE=Ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6197', () => {
    const query = `CREATE TABLE test_01048.mt(a Int32, b Int32, timestamp DateTime) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6198', () => {
    const query = `CREATE TABLE test_01048.mt_2(a Int32, b Int32, timestamp DateTime) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6199', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count, tumbleEnd(wid) as wend FROM test_01048.mt GROUP BY tumble(timestamp, INTERVAL 1 SECOND) as wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6200', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count, tumble(timestamp, INTERVAL '1' SECOND) AS wid FROM test_01048.mt GROUP BY wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6201', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count FROM test_01048.mt GROUP BY b, tumble(timestamp, INTERVAL '1' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6202', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count FROM test_01048.mt GROUP BY tumble(timestamp, INTERVAL '1' SECOND) AS wid, b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6203', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count FROM test_01048.mt GROUP BY plus(a, b) as _type, tumble(timestamp, INTERVAL '1' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6204', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count FROM test_01048.mt GROUP BY tumble(timestamp, INTERVAL '1' SECOND) AS wid, plus(a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6205', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count, tumble(timestamp, INTERVAL '1' SECOND, 'Asia/Shanghai') AS wid FROM test_01048.mt GROUP BY wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6206', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count, b as id FROM test_01048.mt GROUP BY id, tumble(timestamp, INTERVAL '1' SECOND);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6207', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(test_01048.mt.a), count(test_01048.mt_2.b), wid FROM test_01048.mt JOIN test_01048.mt_2 ON test_01048.mt.timestamp = test_01048.mt_2.timestamp GROUP BY tumble(test_01048.mt.timestamp, INTERVAL '1' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6208', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory POPULATE AS SELECT count(test_01048.mt.a), count(test_01048.mt_2.b), wid FROM test_01048.mt JOIN test_01048.mt_2 ON test_01048.mt.timestamp = test_01048.mt_2.timestamp GROUP BY tumble(test_01048.mt.timestamp, INTERVAL '1' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6209', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count, hopEnd(wid) as wend FROM test_01048.mt GROUP BY hop(timestamp, INTERVAL 1 SECOND, INTERVAL 3 SECOND) as wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6210', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count, hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid FROM test_01048.mt GROUP BY wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6211', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count FROM test_01048.mt GROUP BY b, hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6212', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count FROM test_01048.mt GROUP BY hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid, b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6213', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count FROM test_01048.mt GROUP BY plus(a, b) as _type, hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6214', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count FROM test_01048.mt GROUP BY hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid, plus(a, b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6215', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count, hopEnd(wid) as wend FROM test_01048.mt GROUP BY hop(timestamp, INTERVAL 1 SECOND, INTERVAL 3 SECOND, 'Asia/Shanghai') as wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6216', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(a) AS count, b as id FROM test_01048.mt GROUP BY id, hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6217', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory AS SELECT count(test_01048.mt.a), count(test_01048.mt_2.b), wid FROM test_01048.mt JOIN test_01048.mt_2 ON test_01048.mt.timestamp = test_01048.mt_2.timestamp GROUP BY hop(test_01048.mt.timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6218', () => {
    const query = `CREATE WINDOW VIEW test_01048.wv ENGINE Memory POPULATE AS SELECT count(test_01048.mt.a), count(test_01048.mt_2.b), wid FROM test_01048.mt JOIN test_01048.mt_2 ON test_01048.mt.timestamp = test_01048.mt_2.timestamp GROUP BY hop(test_01048.mt.timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6219', () => {
    const query = `CREATE DATABASE db_01048;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6220', () => {
    const query = `CREATE TABLE db_01048.t_01048 (x UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6221', () => {
    const query = `CREATE TEMPORARY TABLE t_01048 (x UInt8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6222', () => {
    const query = `CREATE DICTIONARY db_01048.t_01048 (k UInt64, v String) PRIMARY KEY k LAYOUT(FLAT()) SOURCE(HTTP(URL 'http://example.test/' FORMAT 'TSV')) LIFETIME(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6223', () => {
    const query = `CREATE TABLE db_01048.t_01048_2 (x UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6224', () => {
    const query = `CREATE VIEW db_01048.v_01048 AS SELECT * FROM db_01048.t_01048_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6225', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.mt(a Int32, b Int32, timestamp DateTime) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6226', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.mt_2(a Int32, b Int32, timestamp DateTime) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6227', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY tumble(timestamp, INTERVAL '1' SECOND) ENGINE Memory AS SELECT count(a), tumbleEnd(wid) AS count FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY tumble(timestamp, INTERVAL '1' SECOND) as wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6228', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY wid ENGINE Memory AS SELECT count(a) AS count, tumble(timestamp, INTERVAL '1' SECOND) AS wid FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6229', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY id ENGINE Memory AS SELECT count(a) AS count, b as id FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY id, tumble(timestamp, INTERVAL '1' SECOND);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6230', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY (tumble(timestamp, INTERVAL '1' SECOND), b) PRIMARY KEY tumble(timestamp, INTERVAL '1' SECOND) ENGINE Memory AS SELECT count(a) AS count FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY b, tumble(timestamp, INTERVAL '1' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6231', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY (tumble(timestamp, INTERVAL '1' SECOND), plus(a, b)) PRIMARY KEY tumble(timestamp, INTERVAL '1' SECOND) ENGINE Memory AS SELECT count(a) AS count FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY plus(a, b) as _type, tumble(timestamp, INTERVAL '1' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6232', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY wid PARTITION BY wid ENGINE Memory AS SELECT count(a) AS count, tumble(now(), INTERVAL '1' SECOND) AS wid FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6233', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY tumble({CLICKHOUSE_DATABASE:Identifier}.mt.timestamp, INTERVAL '1' SECOND) ENGINE Memory AS SELECT count({CLICKHOUSE_DATABASE:Identifier}.mt.a), count({CLICKHOUSE_DATABASE:Identifier}.mt_2.b), wid FROM {CLICKHOUSE_DATABASE:Identifier}.mt JOIN {CLICKHOUSE_DATABASE:Identifier}.mt_2 ON {CLICKHOUSE_DATABASE:Identifier}.mt.timestamp = {CLICKHOUSE_DATABASE:Identifier}.mt_2.timestamp GROUP BY tumble({CLICKHOUSE_DATABASE:Identifier}.mt.timestamp, INTERVAL '1' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6234', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY wid ENGINE Memory AS SELECT count({CLICKHOUSE_DATABASE:Identifier}.mt.a), count({CLICKHOUSE_DATABASE:Identifier}.mt_2.b), wid FROM {CLICKHOUSE_DATABASE:Identifier}.mt JOIN {CLICKHOUSE_DATABASE:Identifier}.mt_2 ON {CLICKHOUSE_DATABASE:Identifier}.mt.timestamp = {CLICKHOUSE_DATABASE:Identifier}.mt_2.timestamp GROUP BY tumble({CLICKHOUSE_DATABASE:Identifier}.mt.timestamp, INTERVAL '1' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6235', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) ENGINE Memory AS SELECT count(a) AS count, hopEnd(wid) FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) as wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6236', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY wid ENGINE Memory AS SELECT count(a) AS count, hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6237', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY id ENGINE Memory AS SELECT count(a) AS count, b as id FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY id, hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6238', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY (hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND), b) PRIMARY KEY hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) ENGINE Memory AS SELECT count(a) AS count FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY b, hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6239', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY (hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND), plus(a, b)) PRIMARY KEY hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) ENGINE Memory AS SELECT count(a) AS count FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY plus(a, b) as _type, hop(timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6240', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY wid PARTITION BY wid ENGINE Memory AS SELECT count(a) AS count, hopEnd(wid) FROM {CLICKHOUSE_DATABASE:Identifier}.mt GROUP BY hop(now(), INTERVAL '1' SECOND, INTERVAL '3' SECOND) as wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6241', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY hop({CLICKHOUSE_DATABASE:Identifier}.mt.timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) ENGINE Memory AS SELECT count({CLICKHOUSE_DATABASE:Identifier}.mt.a), count({CLICKHOUSE_DATABASE:Identifier}.mt_2.b), wid FROM {CLICKHOUSE_DATABASE:Identifier}.mt JOIN {CLICKHOUSE_DATABASE:Identifier}.mt_2 ON {CLICKHOUSE_DATABASE:Identifier}.mt.timestamp = {CLICKHOUSE_DATABASE:Identifier}.mt_2.timestamp GROUP BY hop({CLICKHOUSE_DATABASE:Identifier}.mt.timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6242', () => {
    const query = `CREATE WINDOW VIEW {CLICKHOUSE_DATABASE:Identifier}.wv INNER ENGINE AggregatingMergeTree ORDER BY wid ENGINE Memory AS SELECT count({CLICKHOUSE_DATABASE:Identifier}.mt.a), count({CLICKHOUSE_DATABASE:Identifier}.mt_2.b), wid FROM {CLICKHOUSE_DATABASE:Identifier}.mt JOIN {CLICKHOUSE_DATABASE:Identifier}.mt_2 ON {CLICKHOUSE_DATABASE:Identifier}.mt.timestamp = {CLICKHOUSE_DATABASE:Identifier}.mt_2.timestamp GROUP BY hop({CLICKHOUSE_DATABASE:Identifier}.mt.timestamp, INTERVAL '1' SECOND, INTERVAL '3' SECOND) AS wid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6243', () => {
    const query = `CREATE TABLE column_size_bug (date_time DateTime, value SimpleAggregateFunction(sum,UInt64)) ENGINE = AggregatingMergeTree PARTITION BY toStartOfInterval(date_time, INTERVAL 1 DAY) ORDER BY (date_time) SETTINGS remove_empty_parts = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6244', () => {
    const query = `CREATE TABLE requests ( event_time DateTime,
event_date Date MATERIALIZED toDate(event_time),
event_tm DateTime ALIAS event_time
) ENGINE = MergeTree ORDER BY (event_time);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6245', () => {
    const query = `CREATE TABLE test_count (\`pt\` Date) ENGINE = MergeTree PARTITION BY pt ORDER BY pt SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6246', () => {
    const query = `CREATE TABLE t (\`A\` Int64) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6247', () => {
    const query = `CREATE TABLE t_d AS t ENGINE = Distributed(test_shard_localhost, currentDatabase(), t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6248', () => {
    const query = `CREATE MATERIALIZED VIEW t_v ENGINE = MergeTree() ORDER BY tuple() AS SELECT A FROM t LEFT JOIN ( SELECT toInt64(dummy) AS A FROM system.one ) js2 USING (A);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6249', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.restricted_dict ( key UInt64,
value String
)
PRIMARY KEY key
SOURCE(EXECUTABLE(COMMAND 'echo -E "1\\thello"' FORMAT TabSeparated))
LIFETIME(MIN 0 MAX 1)
LAYOUT(CACHE(SIZE_IN_CELLS 10));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6250', () => {
    const query = `CREATE TABLE bloom_filter_null_array (v Array(LowCardinality(Nullable(String))), INDEX idx v TYPE bloom_filter(0.1) GRANULARITY 1) ENGINE = MergeTree() ORDER BY v SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6251', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.dicttbl(key Int64, value_default String, value_expression String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6252', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict (
key Int64 DEFAULT -1,
value_default String DEFAULT 'world',
value_expression String DEFAULT 'xxx' EXPRESSION 'toString(127 * 172)'
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dicttbl' DB currentDatabase()))
LAYOUT(FLAT())
LIFETIME(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6253', () => {
    const query = `CREATE TABLE check_query_test (SomeKey UInt64, SomeValue String) ENGINE = MergeTree() ORDER BY SomeKey SETTINGS min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6254', () => {
    const query = `CREATE TABLE check_query_test_non_adaptive (SomeKey UInt64, SomeValue String) ENGINE = MergeTree() ORDER BY SomeKey SETTINGS index_granularity_bytes = 0, min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6255', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.table_for_dict (
key_column UInt64,
value Float64
)
ENGINE = MergeTree()
ORDER BY key_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6256', () => {
    const query = `CREATE DICTIONARY IF NOT EXISTS {CLICKHOUSE_DATABASE:Identifier}.dict_exists (
key_column UInt64,
value Float64 DEFAULT 77.77
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' DB currentDatabase()))
LIFETIME(1)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6257', () => {
    const query = `CREATE TABLE test_01040 (key UInt64) ENGINE=TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6258', () => {
    const query = `CREATE TABLE dist_test_01040 AS test_01040 Engine=Distributed(test_cluster_two_shards, currentDatabase(), test_01040, key) SETTINGS background_insert_batch=1,
background_insert_sleep_time_ms=10,
background_insert_max_sleep_time_ms=100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6259', () => {
    const query = `CREATE TABLE dist_test_01040 AS test_01040 Engine=Distributed(test_cluster_two_shards_internal_replication, currentDatabase(), test_01040, key) SETTINGS background_insert_batch=1,
background_insert_sleep_time_ms=10,
background_insert_max_sleep_time_ms=100;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6260', () => {
    const query = `create table tab (A Int64) Engine=MergeTree order by tuple() SETTINGS min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6261', () => {
    const query = `CREATE TABLE array_of_tuples  (
f Array(Tuple(Float64, Float64)), 
s Array(Tuple(UInt8, UInt16, UInt32))
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6262', () => {
    const query = `CREATE TABLE mt_without_pk (SomeField1 Int64, SomeField2 Double) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6263', () => {
    const query = `CREATE TABLE replicated_mt_without_pk (SomeField1 Int64, SomeField2 Double) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_01037/replicated_mt_without_pk', '1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6264', () => {
    const query = `CREATE DATABASE \`foo 1234\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6265', () => {
    const query = `CREATE TABLE \`foo 1234\`.dict_data (key UInt64, val UInt64) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6266', () => {
    const query = `CREATE DICTIONARY \`foo 1234\`.dict (
key UInt64 DEFAULT 0,
val UInt64 DEFAULT 10
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dict_data' PASSWORD '' DB 'foo 1234'))
LIFETIME(MIN 0 MAX 0)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6267', () => {
    const query = `CREATE DATABASE \`foo 123\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6268', () => {
    const query = `CREATE DATABASE IF NOT EXISTS empty_db_01036;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6269', () => {
    const query = `CREATE TABLE test (a UInt8, b UInt8, c UInt16 ALIAS a + b) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6270', () => {
    const query = `create table audience_local (
Date Date,
AudienceType Enum8('other' = 0, 'client' = 1, 'group' = 2),
UMA UInt64,
APIKey String,
TrialNameID UInt32,
TrialGroupID UInt32,
AppVersion String,
Arch Enum8('other' = 0, 'x32' = 1, 'x64' = 2),
UserID UInt32,
GroupID UInt8,
OSName Enum8('other' = 0, 'Android' = 1, 'iOS' = 2, 'macOS' = 3, 'Windows' = 4, 'Linux' = 5),
Channel Enum8('other' = 0, 'Canary' = 1, 'Dev' = 2, 'Beta' = 3, 'Stable' = 4),
Hits UInt64,
Sum Int64,
Release String alias splitByChar('-', AppVersion)[1]
)
engine = SummingMergeTree
PARTITION BY (toISOYear(Date), toISOWeek(Date))
ORDER BY (AudienceType, UMA, APIKey, Date, TrialNameID, TrialGroupID, AppVersion, Arch, UserID, GroupID, OSName, Channel)
SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6271', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_01035_avg ( i8 Int8         DEFAULT i64,
i16 Int16       DEFAULT i64,
i32 Int32       DEFAULT i64,
i64 Int64       DEFAULT if(u64 % 2 = 0, toInt64(u64), toInt64(-u64)),
i128 Int128     DEFAULT i64,
i256 Int256     DEFAULT i64,
u8 UInt8        DEFAULT u64,
u16 UInt16      DEFAULT u64,
u32 UInt32      DEFAULT u64,
u64 UInt64,
u128 UInt128    DEFAULT u64,
u256 UInt256    DEFAULT u64,
f32 Float32     DEFAULT u64,
f64 Float64     DEFAULT u64,
d32 Decimal32(4)    DEFAULT toDecimal32(i32 / 1000, 4),
d64 Decimal64(18)   DEFAULT toDecimal64(u64 / 1000000, 8),
d128 Decimal128(20) DEFAULT toDecimal128(i128 / 100000, 20),
d256 Decimal256(40) DEFAULT toDecimal256(i256 / 100000, 40)
) ENGINE = MergeTree() ORDER BY i64 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6272', () => {
    const query = `create table sample_final (CounterID UInt32, EventDate Date, EventTime DateTime, UserID UInt64, Sign Int8) engine = CollapsingMergeTree(Sign) order by (CounterID, EventDate, intHash32(UserID), EventTime) sample by intHash32(UserID) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6273', () => {
    const query = `CREATE TABLE test_max_parallel_replicas_lr (timestamp UInt64) ENGINE = MergeTree ORDER BY (intHash32(timestamp)) SAMPLE BY intHash32(timestamp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6274', () => {
    const query = `CREATE TABLE test_table (n Int32, s String) ENGINE = MergeTree() PARTITION BY n % 10 ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6275', () => {
    const query = `CREATE TABLE BannerDict (\`BannerID\` UInt64, \`CompaignID\` UInt64) ENGINE = ODBC('DSN=pgconn;Database=postgres', bannerdict); -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH} CREATE TABLE BannerDict (\`BannerID\` UInt64, \`CompaignID\` UInt64) ENGINE = ODBC('DSN=pgconn;Database=postgres', somedb, bannerdict);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6276', () => {
    const query = `CREATE TABLE tab(e8 Enum8('hello' = -5, 'world' = 15), e16 Enum16('shark' = -999, 'eagle' = 9999)) ENGINE MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6277', () => {
    const query = `CREATE TABLE tab (s String, l Int8, r Int8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6278', () => {
    const query = `CREATE TABLE tab (s FixedString(8), l Int8, r Int8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6279', () => {
    const query = `CREATE TABLE t (
s String,
l Int8,
r Int8
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6280', () => {
    const query = `CREATE TABLE t( s FixedString(8),
l Int8,
r Int8
) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6281', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.table_for_dict (
key_column UInt64,
second_column UInt8,
third_column String
)
ENGINE = MergeTree()
ORDER BY key_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6282', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE_1:Identifier}.dict1 (
key_column UInt64 DEFAULT 0,
second_column UInt8 DEFAULT 1,
third_column String DEFAULT 'qqq'
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB currentDatabase()))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6283', () => {
    const query = `CREATE TABLE sometable ( date Date,
time Int64,
value UInt64
) ENGINE=MergeTree()
ORDER BY time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6284', () => {
    const query = `CREATE TABLE t_uuid (x UUID) ENGINE=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6285', () => {
    const query = `CREATE TABLE t1 (x UInt32, s String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6286', () => {
    const query = `CREATE TABLE t2 (x UInt32, s String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6287', () => {
    const query = `create table test_table_url_syntax (id UInt32) ENGINE = URL('') ; -- { serverError UNSUPPORTED_URI_SCHEME }
create table test_table_url_syntax (id UInt32) ENGINE = URL('','','','')
; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
drop table if exists test_table_url_syntax
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6288', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint') ; -- { serverError CANNOT_DETECT_FORMAT }
create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint.json');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6289', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'ErrorFormat') ; -- { serverError UNKNOWN_FORMAT }
create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow', 'gzip');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6290', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow', 'gz');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6291', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow', 'deflate');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6292', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow', 'brotli');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6293', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow', 'lzma');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6294', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow', 'zstd');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6295', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow', 'lz4');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6296', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow', 'bz2');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6297', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow', 'snappy');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6298', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow', 'none');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6299', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow', 'auto');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6300', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint.gz', 'JSONEachRow');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6301', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint.fr', 'JSONEachRow');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6302', () => {
    const query = `create table test_table_url(id UInt32) ENGINE = URL('http://localhost/endpoint', 'JSONEachRow');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6303', () => {
    const query = `CREATE TABLE userid_test (userid UInt64) ENGINE = MergeTree() PARTITION BY (intDiv(userid, 500)) ORDER BY (userid) SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6304', () => {
    const query = `CREATE TABLE userid_set(userid UInt64) ENGINE = Set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6305', () => {
    const query = `create table test_table_hdfs_syntax (id UInt32) ENGINE = HDFS('') ; -- { serverError BAD_ARGUMENTS }
create table test_table_hdfs_syntax (id UInt32) ENGINE = HDFS('','','', '')
; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
drop table if exists test_table_hdfs_syntax
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6306', () => {
    const query = `create table tst (timestamp DateTime, val Nullable(Int8)) engine SummingMergeTree partition by toYYYYMM(timestamp) ORDER by (timestamp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6307', () => {
    const query = `create table tst (timestamp DateTime, val Int8) engine SummingMergeTree partition by toYYYYMM(timestamp) ORDER by (timestamp);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6308', () => {
    const query = `CREATE TABLE empty_pk (x UInt64) ENGINE = MergeTree ORDER BY tuple() SETTINGS index_granularity = 256, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6309', () => {
    const query = `CREATE TABLE foo (key String, macro String MATERIALIZED __getScalar(key)) Engine=Null(); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT } `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6310', () => {
    const query = `CREATE DATABASE dict_in_01023;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6311', () => {
    const query = `CREATE TABLE dict_in_01023.input (key UInt64, val UInt64) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6312', () => {
    const query = `CREATE DICTIONARY dict_in_01023.dict (
key UInt64 DEFAULT 0,
val UInt64 DEFAULT 1
)
PRIMARY KEY key
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'input' PASSWORD '' DB 'dict_in_01023'))
LIFETIME(MIN 0 MAX 0)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6313', () => {
    const query = `CREATE TABLE input    (key UInt64) Engine=Distributed(test_shard_localhost, currentDatabase(), buffer_, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6314', () => {
    const query = `CREATE TABLE null_    (key UInt64) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6315', () => {
    const query = `CREATE TABLE buffer_  (key UInt64) Engine=Buffer(currentDatabase(), dist_out, 1, 0, 0, 0, 0, 0, 0);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6316', () => {
    const query = `CREATE TABLE dist_out (key UInt64) Engine=Distributed(test_shard_localhost, currentDatabase(), null_, key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6317', () => {
    const query = `CREATE TABLE output (key UInt64, val UInt64) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6318', () => {
    const query = `CREATE MATERIALIZED VIEW mv TO output AS SELECT key, dictGetUInt64('dict_in_01023.dict', 'val', key) val FROM dist_out;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6319', () => {
    const query = `CREATE TABLE tuple_values (t Tuple(int)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6320', () => {
    const query = `CREATE TABLE test (
\`x\` Tuple(UInt64, UInt64)
)
ENGINE = MergeTree
ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6321', () => {
    const query = `CREATE TABLE create_as_select_01021 engine=Memory AS (SELECT (1, 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6322', () => {
    const query = `CREATE TABLE mv_extra_columns_dst ( v UInt64
) ENGINE = MergeTree()
PARTITION BY tuple()
ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6323', () => {
    const query = `CREATE TABLE mv_extra_columns_src ( v1 UInt64,
v2 UInt64
) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6324', () => {
    const query = `CREATE MATERIALIZED VIEW mv_extra_columns_view TO mv_extra_columns_dst AS SELECT
v1 as v,
v2 as v2
FROM mv_extra_columns_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6325', () => {
    const query = `CREATE TABLE src_01019(v UInt64) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6326', () => {
    const query = `CREATE TABLE dest_01019(v UInt64) Engine = MergeTree() ORDER BY v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6327', () => {
    const query = `CREATE MATERIALIZED VIEW pipe_01019 TO dest_01019 AS SELECT v FROM src_01019;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6328', () => {
    const query = `CREATE TABLE null_ (key UInt64) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6329', () => {
    const query = `CREATE TABLE buffer_ (key UInt64) Engine=Buffer(currentDatabase(), null_, 1,    
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6330', () => {
    const query = `CREATE TABLE TESTTABLE4 (_id UInt64, pt String, l String )  ENGINE = MergeTree() PARTITION BY (pt) ORDER BY (_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6331', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie (
prefix String,
asn UInt32,
cca2 String
)
engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6332', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict_ipv4_trie (
prefix String,
asn UInt32,
cca2 String
)
PRIMARY KEY prefix
SOURCE(CLICKHOUSE(host 'localhost' port 9000 user 'default' db currentDatabase() table 'table_ipv4_trie'))
LAYOUT(IP_TRIE())
LIFETIME(MIN 10 MAX 100)
SETTINGS(dictionary_use_async_executor=1, max_threads=8)
;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6333', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.table_from_ipv4_trie_dict (
prefix String,
asn UInt32,
cca2 String
) ENGINE = Dictionary({CLICKHOUSE_DATABASE:Identifier}.dict_ipv4_trie);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6334', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie (
prefix String,
val UInt32
)
engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6335', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict_ipv4_trie (
prefix String,
val UInt32
)
PRIMARY KEY prefix
SOURCE(CLICKHOUSE(host 'localhost' port 9000 user 'default' db currentDatabase() table 'table_ipv4_trie'))
LAYOUT(IP_TRIE())
LIFETIME(MIN 10 MAX 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6336', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie ( prefix String, val UInt32 ) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6337', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict_ipv4_trie ( prefix String, val UInt32 ) PRIMARY KEY prefix
SOURCE(CLICKHOUSE(host 'localhost' port 9000 user 'default' db currentDatabase() table 'table_ipv4_trie'))
LAYOUT(IP_TRIE(ACCESS_TO_KEY_FROM_ATTRIBUTES 1))
LIFETIME(MIN 10 MAX 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6338', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.table_ip_trie (
prefix String,
val String
)
engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6339', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict_ip_trie (
prefix String,
val String
)
PRIMARY KEY prefix
SOURCE(CLICKHOUSE(host 'localhost' port 9000 user 'default' db currentDatabase() table 'table_ip_trie'))
LAYOUT(IP_TRIE(ACCESS_TO_KEY_FROM_ATTRIBUTES 1))
LIFETIME(MIN 10 MAX 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6340', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.table_from_ip_trie_dict (
prefix String,
val String
) ENGINE = Dictionary({CLICKHOUSE_DATABASE:Identifier}.dict_ip_trie);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6341', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict_ip_trie (
prefix String,
val String
)
PRIMARY KEY prefix
SOURCE(CLICKHOUSE(host 'localhost' port 9000 user 'default' db currentDatabase() table 'table_ip_trie'))
LAYOUT(IP_TRIE())
LIFETIME(MIN 10 MAX 100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6342', () => {
    const query = `CREATE TABLE database_for_dict.table_for_dict (
key_column UInt64,
second_column UInt8,
third_column String,
fourth_column Float64
)
ENGINE = MergeTree()
ORDER BY key_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6343', () => {
    const query = `CREATE DICTIONARY database_for_dict.dict1 (
key_column UInt64 DEFAULT 0,
second_column UInt8 DEFAULT 1,
third_column String DEFAULT 'qqq',
fourth_column Float64 DEFAULT 42.0
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' DB 'database_for_dict'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6344', () => {
    const query = `CREATE DICTIONARY database_for_dict.dict2 (
key_column UInt64 DEFAULT 0,
second_column UInt8 DEFAULT 1,
third_column String DEFAULT 'qqq',
fourth_column Float64 DEFAULT 42.0
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dict1' DB 'database_for_dict'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6345', () => {
    const query = `CREATE DICTIONARY database_for_dict.dict3 (
key_column UInt64 DEFAULT 0,
second_column UInt8 DEFAULT 1,
third_column String DEFAULT 'qqq',
fourth_column Float64 DEFAULT 42.0
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dict2' DB 'database_for_dict'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6346', () => {
    const query = `CREATE DICTIONARY database_for_dict.dict4 (
key_column UInt64 DEFAULT 0,
second_column UInt8 DEFAULT 1,
third_column String DEFAULT 'qqq',
fourth_column Float64 DEFAULT 42.0
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'non_existing_table' DB 'database_for_dict'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6347', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.date_table (
CountryID UInt64,
StartDate Date,
EndDate Date,
Tax Float64
)
ENGINE = MergeTree()
ORDER BY CountryID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6348', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict1 (
CountryID UInt64,
StartDate Date,
EndDate Date,
Tax Float64
)
PRIMARY KEY CountryID
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'date_table' DB currentDatabase()))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(RANGE_HASHED())
RANGE(MIN StartDate MAX EndDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6349', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.datetime_table (
CountryID UInt64,
StartDate DateTime,
EndDate DateTime,
Tax Float64
)
ENGINE = MergeTree()
ORDER BY CountryID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6350', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict2 (
CountryID UInt64,
StartDate DateTime,
EndDate DateTime,
Tax Float64
)
PRIMARY KEY CountryID
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'datetime_table' DB currentDatabase()))
LIFETIME(MIN 1 MAX 1000)
LAYOUT(RANGE_HASHED())
RANGE(MIN StartDate MAX EndDate);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6351', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.table_with_hierarchy (
RegionID UInt64,
ParentRegionID UInt64,
RegionName String
)
ENGINE = MergeTree()
ORDER BY RegionID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6352', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dictionary_with_hierarchy (
RegionID UInt64,
ParentRegionID UInt64 HIERARCHICAL,
RegionName String
)
PRIMARY KEY RegionID
SOURCE(CLICKHOUSE(host 'localhost' port tcpPort() user 'default' db currentDatabase() table 'table_with_hierarchy'))
LAYOUT(HASHED())
LIFETIME(MIN 1 MAX 1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6353', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.table_for_dict (
key_column UInt64,
second_column UInt8,
third_column String,
fourth_column Float64
)
ENGINE = MergeTree()
ORDER BY key_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6354', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict1 (
key_column UInt64 DEFAULT 0,
second_column UInt8 DEFAULT 1,
third_column String DEFAULT 'qqq',
fourth_column Float64 DEFAULT 42.0
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB currentDatabase()))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6355', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict1 (
key_column UInt64 DEFAULT 0,
second_column UInt8 DEFAULT 1,
third_column String DEFAULT 'qqq',
fourth_column Float64 DEFAULT 42.0
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(TABLE 'table_for_dict' DB currentDatabase()))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6356', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict1 (
key_column UInt64 DEFAULT 0,
second_column UInt8 DEFAULT 1,
third_column String DEFAULT 'qqq',
fourth_column Float64 DEFAULT 42.0
)
PRIMARY KEY key_column, third_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' DB currentDatabase()))
LIFETIME(MIN 1 MAX 10)
LAYOUT(COMPLEX_KEY_CACHE(SIZE_IN_CELLS 1));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6357', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict2 (
key_column UInt64 DEFAULT 0,
some_column String EXPRESSION toString(fourth_column),
fourth_column Float64 DEFAULT 42.0
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' DB currentDatabase()))
LIFETIME(MIN 1 MAX 10)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6358', () => {
    const query = `CREATE DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict3 (
key_column UInt64 DEFAULT 0,
some_column String EXPRESSION toString(fourth_column),
fourth_column Float64 DEFAULT 42.0
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' DB currentDatabase()))
LIFETIME(0)
LAYOUT(HASHED());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6359', () => {
    const query = `CREATE DATABASE database_for_dict_01018;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6360', () => {
    const query = `CREATE TABLE database_for_dict_01018.table_for_dict (
key_column UInt64,
second_column UInt8,
third_column String
)
ENGINE = MergeTree()
ORDER BY key_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6361', () => {
    const query = `CREATE DATABASE db_01018;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6362', () => {
    const query = `CREATE DICTIONARY db_01018.dict1 (
key_column UInt64 DEFAULT 0,
second_column UInt8 DEFAULT 1,
third_column String DEFAULT 'qqq'
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB 'database_for_dict_01018'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6363', () => {
    const query = `CREATE DATABASE memory_db ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6364', () => {
    const query = `CREATE DICTIONARY memory_db.dict2 (
key_column UInt64 DEFAULT 0 INJECTIVE,
second_column UInt8 DEFAULT 1 EXPRESSION rand() % 222,
third_column String DEFAULT 'qqq'
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB 'database_for_dict_01018'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6365', () => {
    const query = `CREATE DATABASE lazy_db ENGINE = Lazy(1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6366', () => {
    const query = `CREATE DICTIONARY lazy_db.dict3 (
key_column UInt64 DEFAULT 0 INJECTIVE,
second_column UInt8 DEFAULT 1 EXPRESSION rand() % 222,
third_column String DEFAULT 'qqq'
)
PRIMARY KEY key_column, second_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB 'database_for_dict_01018'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(COMPLEX_KEY_HASHED()); --{serverError UNSUPPORTED_METHOD}
DROP DATABASE IF EXISTS lazy_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6367', () => {
    const query = `CREATE DICTIONARY db_01018.dict4 (
key_column UInt64 DEFAULT 0,
second_column UInt8 DEFAULT 1,
third_column String DEFAULT 'qqq'
)
PRIMARY KEY key_column
SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB 'database_for_dict_01018'))
LIFETIME(MIN 1 MAX 10)
LAYOUT(FLAT());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6368', () => {
    const query = `CREATE TABLE mem1 (key Int) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6369', () => {
    const query = `CREATE TABLE dist_1 AS mem1 Engine=Distributed(test_shard_localhost, currentDatabase(), mem1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6370', () => {
    const query = `CREATE TABLE mem2 (key Int) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6371', () => {
    const query = `CREATE TABLE dist_2 AS mem2 Engine=Distributed(test_cluster_two_shards_localhost, currentDatabase(), mem2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6372', () => {
    const query = `CREATE TABLE mem3 (key Int, _shard_num String) Engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6373', () => {
    const query = `CREATE TABLE dist_3 AS mem3 Engine=Distributed(test_shard_localhost, currentDatabase(), mem3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6374', () => {
    const query = `CREATE TABLE defaults (
	t1 Tuple(UInt16, UInt16),
	t2 Tuple(UInt32, UInt32),
	t3 Tuple(Int64, Int64)
)ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6375', () => {
    const query = `CREATE TABLE defaults (
	n1 UInt8,
	n2 UInt16,
	n3 UInt32,
	n4 UInt64
)ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6376', () => {
    const query = `CREATE TABLE test_string (
	s1 String,
	s2 String,
	s3 FixedString(10),
	s4 FixedString(10),
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6377', () => {
    const query = `CREATE TABLE defaults (
s String
)ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6378', () => {
    const query = `create table if not exists null_01016 (x Nullable(String)) engine MergeTree order by ifNull(x, 'order-null') partition by ifNull(x, 'partition-null');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6379', () => {
    const query = `CREATE TABLE tuple_01016(a Tuple(DateTime, Int32)) ENGINE = MergeTree() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6380', () => {
    const query = `CREATE TABLE table_01 ( date Date,
n Int32
) ENGINE = MergeTree()
PARTITION BY date
ORDER BY date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6381', () => {
    const query = `CREATE TABLE new_table_test(name String) ENGINE = MergeTree ORDER BY name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6382', () => {
    const query = `CREATE TABLE check_table_test(value1 UInt64, value2 UInt64) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6383', () => {
    const query = `CREATE TABLE defaults (
strings String,
i8 Int8,
u16 UInt16,
u32 UInt32,
u64 UInt64
)ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6384', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.test1 (test UInt8) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6385', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.test2 (test UInt8) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6386', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.test3 (test UInt8) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6387', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.test4 (test UInt8) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6388', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.test5 (test UInt8) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6389', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.test6 (test UInt8) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6390', () => {
    const query = `CREATE TABLE foo (key int, INDEX i1 key TYPE minmax GRANULARITY 1) Engine=MergeTree() ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6391', () => {
    const query = `CREATE TABLE as_foo AS foo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6392', () => {
    const query = `CREATE TABLE dist (key int, INDEX i1 key TYPE minmax GRANULARITY 1) Engine=Distributed(test_shard_localhost, currentDatabase(), 'foo'); -- { serverError BAD_ARGUMENTS } CREATE TABLE dist_as_foo Engine=Distributed(test_shard_localhost, currentDatabase(), 'foo') AS foo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6393', () => {
    const query = `CREATE TABLE ints (i64 Int64, i32 Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6394', () => {
    const query = `CREATE TABLE test_insert_t1 (\`dt\` Date, \`uid\` String, \`name\` String, \`city\` String) ENGINE = MergeTree PARTITION BY toYYYYMMDD(dt) ORDER BY name SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6395', () => {
    const query = `CREATE TABLE test_insert_t2 (\`dt\` Date, \`uid\` String) ENGINE = MergeTree PARTITION BY toYYYYMMDD(dt) ORDER BY uid SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6396', () => {
    const query = `CREATE TABLE test_insert_t3 (\`dt\` Date, \`uid\` String, \`name\` String, \`city\` String) ENGINE = MergeTree PARTITION BY toYYYYMMDD(dt) ORDER BY name SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6397', () => {
    const query = `create table tab (x UInt64) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6398', () => {
    const query = `CREATE TABLE test1 (a UInt8, b Array(DateTime)) ENGINE Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6399', () => {
    const query = `CREATE TABLE test2 as test1 ENGINE Distributed(test_shard_localhost, currentDatabase(), test1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6400', () => {
    const query = `create table foo (ddate Date, id Int64, n String) ENGINE = ReplacingMergeTree(ddate, (id), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6401', () => {
    const query = `create table bar (ddate Date, id Int64, n String, foo_id Int64) ENGINE = ReplacingMergeTree(ddate, (id), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6402', () => {
    const query = `create MATERIALIZED view view_foo_bar ENGINE = ReplacingMergeTree(ddate, (bar_id), 8192) as select ddate, bar_id, bar_n, foo_id, foo_n from (select ddate, id as bar_id, n as bar_n, foo_id from bar) js1 any left join (select id as foo_id, n as foo_n from foo) js2 using foo_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6403', () => {
    const query = `CREATE TABLE ttl_with_default (d DateTime, a Int default 777 ttl d + interval 5 SECOND) ENGINE = MergeTree ORDER BY d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6404', () => {
    const query = `CREATE TABLE enums AS VALUES('x Enum8(\\'hello\\' = 0, \\'world\\' = 1, \\'foo\\' = -1), y String', ('hello', 'find me'), (0, 'and me'), (-1, 'also me'), ('world', 'don\\'t find me'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6405', () => {
    const query = `CREATE TABLE bad_skip_idx (
id UInt64,
value String
) ENGINE MergeTree()
ORDER BY id SETTINGS index_granularity_bytes = 64, min_index_granularity_bytes = 10, vertical_merge_algorithm_min_rows_to_activate = 0, vertical_merge_algorithm_min_columns_to_activate = 0; -- actually vertical merge is not required condition for this bug, but it's more easy to reproduce (becuse we don't recalc granularities)
INSERT INTO bad_skip_idx SELECT number, concat('x', toString(number)) FROM numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6406', () => {
    const query = `CREATE TABLE test_vertical_merge ( k UInt64,
val1 UInt64,
val2 UInt64,
INDEX idx1 val1 * val2 TYPE minmax GRANULARITY 1,
INDEX idx2 val1 * k TYPE minmax GRANULARITY 1
) ENGINE MergeTree()
ORDER BY k
SETTINGS vertical_merge_algorithm_min_rows_to_activate = 1, vertical_merge_algorithm_min_columns_to_activate = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6407', () => {
    const query = `CREATE TABLE l (a String, b Tuple(String, String)) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6408', () => {
    const query = `CREATE TABLE r (a String, c Tuple(String, String)) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6409', () => {
    const query = `CREATE TABLE l (a String, b String) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6410', () => {
    const query = `CREATE TABLE r (a String, c Array(String)) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6411', () => {
    const query = `create table X (id Int64) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6412', () => {
    const query = `create table Y (id Int64) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6413', () => {
    const query = `CREATE TABLE constrained (URL String, CONSTRAINT is_censor CHECK domainWithoutWWW(URL) = 'censor.net', CONSTRAINT is_utf8 CHECK isValidUTF8(URL)) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6414', () => {
    const query = `CREATE TABLE constrained (URL String, CONSTRAINT is_censor CHECK domainWithoutWWW(URL) = 'censor.net', CONSTRAINT is_utf8 CHECK isValidUTF8(URL)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6415', () => {
    const query = `CREATE TABLE constrained (URL String, CONSTRAINT is_censor CHECK domainWithoutWWW(URL) = 'censor.net', CONSTRAINT is_utf8 CHECK isValidUTF8(URL)) ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6416', () => {
    const query = `CREATE TABLE constrained (URL String, CONSTRAINT is_censor CHECK domainWithoutWWW(URL) = 'censor.net', CONSTRAINT is_utf8 CHECK isValidUTF8(URL)) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6417', () => {
    const query = `CREATE TABLE constrained (URL String, CONSTRAINT is_censor CHECK domainWithoutWWW(URL) = 'censor.net', CONSTRAINT is_utf8 CHECK isValidUTF8(URL)) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6418', () => {
    const query = `CREATE TABLE constrained2 AS constrained;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6419', () => {
    const query = `CREATE TABLE set_array (
primary_key String,
index_array Array(UInt64),
INDEX additional_index_array (index_array) TYPE set(10000) GRANULARITY 1
) ENGINE = MergeTree()
ORDER BY (primary_key);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6420', () => {
    const query = `CREATE TABLE ties (a Int) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6421', () => {
    const query = `CREATE TABLE fill (date Date, val Int, str String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6422', () => {
    const query = `CREATE TABLE fill (a UInt32, b Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6423', () => {
    const query = `CREATE TABLE order_with_aggr(a Int) ENGINE = MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6424', () => {
    const query = `CREATE TABLE bloom_filter (
id UInt64,
s String,
INDEX tok_bf (s, lower(s)) TYPE tokenbf_v1(512, 3, 0) GRANULARITY 1
) ENGINE = MergeTree() ORDER BY id SETTINGS index_granularity = 8, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6425', () => {
    const query = `create table bloom_filter2 (
id UInt64,
s String,
index tok_bf3 (s, lower(s)) type tokenbf_v1(512, 3, 0) GRANULARITY 1
) engine = MergeTree() order by id settings index_granularity = 8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6426', () => {
    const query = `CREATE TABLE tab (row_id UInt32, str String, INDEX idx str TYPE tokenbf_v1(256, 2, 0)) ENGINE = MergeTree ORDER BY row_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6427', () => {
    const query = `CREATE TABLE mt (x UInt64) ENGINE = MergeTree ORDER BY x SETTINGS parts_to_delay_insert = 100000, parts_to_throw_insert = 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6428', () => {
    const query = `CREATE TABLE mt (x UInt64) ENGINE = MergeTree ORDER BY x SETTINGS cleanup_delay_period = 1, cleanup_delay_period_random_add = 0,
cleanup_thread_preferred_points_per_iteration=0, old_parts_lifetime = 1, parts_to_delay_insert = 100000, parts_to_throw_insert = 100000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6429', () => {
    const query = `CREATE TABLE replicated_constraints1 (
a UInt32,
b UInt32,
CONSTRAINT a_constraint CHECK a < 10
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00988/alter_constraints', 'r1') ORDER BY (a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6430', () => {
    const query = `CREATE TABLE replicated_constraints2 (
a UInt32,
b UInt32,
CONSTRAINT a_constraint CHECK a < 10
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00988/alter_constraints', 'r2') ORDER BY (a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6431', () => {
    const query = `CREATE TABLE distr (x UInt8) ENGINE = Distributed(test_shard_localhost, currentDatabase(), distr); -- { serverError INFINITE_LOOP } CREATE TABLE distr0 (x UInt8) ENGINE = Distributed(test_shard_localhost, '', distr0); -- { serverError INFINITE_LOOP }
CREATE TABLE distr1 (x UInt8) ENGINE = Distributed(test_shard_localhost, currentDatabase(), distr2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6432', () => {
    const query = `CREATE TABLE distr2 (x UInt8) ENGINE = Distributed(test_shard_localhost, currentDatabase(), distr1); -- { serverError INFINITE_LOOP } DROP TABLE distr1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6433', () => {
    const query = `CREATE TABLE test1 (a UInt8) ENGINE MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6434', () => {
    const query = `CREATE TABLE test2 (a UInt8) ENGINE MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6435', () => {
    const query = `CREATE MATERIALIZED VIEW mv1 TO test1 AS SELECT a FROM test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6436', () => {
    const query = `CREATE MATERIALIZED VIEW mv2 TO test2 AS SELECT a FROM test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6437', () => {
    const query = `CREATE TABLE IF NOT EXISTS merge1 (x UInt64) ENGINE = Merge(currentDatabase(), '^merge\\\\d\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6438', () => {
    const query = `CREATE TABLE IF NOT EXISTS merge2 (x UInt64) ENGINE = Merge(currentDatabase(), '^merge\\\\d\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6439', () => {
    const query = `CREATE TABLE test1 (a UInt8, b String) ENGINE MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6440', () => {
    const query = `CREATE TABLE test2 (c UInt8, d String) ENGINE MergeTree ORDER BY c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6441', () => {
    const query = `CREATE MATERIALIZED VIEW mv TO test1 (b String, a UInt8) AS SELECT d AS b, c AS a FROM test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6442', () => {
    const query = `CREATE TABLE xx (
\`date\` Date, 
\`id\` Int64, 
\`clicks\` Int64, 
\`price\` Float64, 
\`spend\` Float64
)
ENGINE = SummingMergeTree([price, spend])
PARTITION BY toYYYYMM(date)
ORDER BY id
SAMPLE BY id
SETTINGS index_granularity = 8192; -- { serverError UNEXPECTED_AST_STRUCTURE }
`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6443', () => {
    const query = `CREATE TABLE test1 (a LowCardinality(String)) ENGINE=MergeTree() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6444', () => {
    const query = `CREATE TABLE test2 (a UInt64) engine=MergeTree() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6445', () => {
    const query = `CREATE MATERIALIZED VIEW test_mv TO test2 AS SELECT toUInt64(a = 'test') AS a FROM test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6446', () => {
    const query = `CREATE TABLE topk (val1 String, val2 UInt32) ENGINE = MergeTree ORDER BY val1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6447', () => {
    const query = `CREATE TABLE merge_a (x UInt8) ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6448', () => {
    const query = `CREATE TABLE merge_b (x UInt8) ENGINE = StripeLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6449', () => {
    const query = `CREATE TABLE merge_ab AS merge(currentDatabase(), '^merge_[ab]\$');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6450', () => {
    const query = `CREATE TABLE replicated_table_for_alter1 ( id UInt64,
Data String
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/test_00980_{database}/replicated_table_for_alter', '1') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6451', () => {
    const query = `CREATE TABLE replicated_table_for_alter2 ( id UInt64,
Data String
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/test_00980_{database}/replicated_table_for_alter', '2') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6452', () => {
    const query = `CREATE TABLE replicated_table_for_reset_setting1 ( id UInt64,
Data String
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/test_00980_{database}/replicated_table_for_reset_setting', '1') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6453', () => {
    const query = `CREATE TABLE replicated_table_for_reset_setting2 ( id UInt64,
Data String
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/test_00980_{database}/replicated_table_for_reset_setting', '2') ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6454', () => {
    const query = `CREATE TABLE t_local (a Int) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6455', () => {
    const query = `CREATE TABLE t_distr (a Int) ENGINE = Distributed(test_shard_localhost, currentDatabase(), 't_local');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6456', () => {
    const query = `CREATE VIEW numbers500k AS SELECT number FROM system.numbers LIMIT 500000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6457', () => {
    const query = `CREATE TABLE log_for_alter ( id UInt64,
Data String
) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6458', () => {
    const query = `CREATE TABLE table_for_alter ( id UInt64,
Data String
) ENGINE = MergeTree() ORDER BY id SETTINGS index_granularity=4096, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6459', () => {
    const query = `CREATE TABLE table_for_reset_setting ( id UInt64,
Data String
) ENGINE = MergeTree() ORDER BY id SETTINGS index_granularity=4096, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6460', () => {
    const query = `create table test_join (date Date, id Int32, name Nullable(String)) engine = MergeTree partition by date order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6461', () => {
    const query = `CREATE TABLE test1 (n UInt64) ENGINE = MergeTree ORDER BY n SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6462', () => {
    const query = `CREATE TABLE test3 (d Decimal(4, 3)) ENGINE = MergeTree ORDER BY d SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6463', () => {
    const query = `CREATE TABLE set_index_not (   name String, status Enum8('alive' = 0, 'rip' = 1),
INDEX idx_status status TYPE set(2) GRANULARITY 1
)
ENGINE = MergeTree()  ORDER BY name  SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6464', () => {
    const query = `CREATE TABLE num AS numbers(1000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6465', () => {
    const query = `create table t(a Int64, b Int64, c String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6466', () => {
    const query = `create table s(a Int64, b Int64, c String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6467', () => {
    const query = `create table t(a Int64, b Int64, c Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6468', () => {
    const query = `create table s(a Int64, b Int64, c Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6469', () => {
    const query = `create table t(a Int64, b Nullable(Int64), c String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6470', () => {
    const query = `create table s(a Int64, b Nullable(Int64), c String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6471', () => {
    const query = `create table t(a Int64, b Nullable(Int64), c Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6472', () => {
    const query = `create table s(a Int64, b Nullable(Int64), c Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6473', () => {
    const query = `create table t(a Nullable(Int64), b Nullable(Int64), c Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6474', () => {
    const query = `create table s(a Nullable(Int64), b Nullable(Int64), c Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6475', () => {
    const query = `create table ttl (d Date, a Int) engine = MergeTree order by a partition by toDayOfMonth(d) settings remove_empty_parts = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6476', () => {
    const query = `create table ttl (d Date, a Int) engine = MergeTree order by a partition by toDayOfMonth(d) ttl d + interval 1 day;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6477', () => {
    const query = `CREATE TABLE han_1 (k Int32, date_dt LowCardinality(Nullable(String)))  ENGINE = MergeTree() PARTITION BY k ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6478', () => {
    const query = `CREATE TABLE values_list AS VALUES('a UInt64, s String', (1, 'one'), (2, 'two'), (3, 'three'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6479', () => {
    const query = `create table if not exists sample_prewhere (date Date, id Int32, time Int64) engine = MergeTree partition by date order by (id, time, intHash64(time)) sample by intHash64(time);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6480', () => {
    const query = `CREATE TABLE src (x UInt8) ENGINE Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6481', () => {
    const query = `CREATE TABLE dst1 (x UInt8) ENGINE Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6482', () => {
    const query = `CREATE MATERIALIZED VIEW src_to_dst1 TO dst1 AS SELECT x + 1 as x FROM src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6483', () => {
    const query = `CREATE MATERIALIZED VIEW dst2 ENGINE Memory AS SELECT x + 1 as x FROM dst1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6484', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_move_partition_src ( pk UInt8,
val UInt32
) Engine = MergeTree()
PARTITION BY pk
ORDER BY (pk, val) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6485', () => {
    const query = `CREATE TABLE IF NOT EXISTS test_move_partition_dest ( pk UInt8,
val UInt32
) Engine = MergeTree()
PARTITION BY pk
ORDER BY (pk, val) SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6486', () => {
    const query = `create table t1 (a UInt32, b String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6487', () => {
    const query = `create table t2 (c UInt32, d String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6488', () => {
    const query = `create table t3 (a UInt32) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6489', () => {
    const query = `CREATE TABLE test_00974 (
date Date,
x Int32,
ver UInt64
)
ENGINE = ReplacingMergeTree(date, x, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6490', () => {
    const query = `CREATE TABLE source_table1 (a Int64, b String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6491', () => {
    const query = `CREATE TABLE source_table2 (c Int64, d String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6492', () => {
    const query = `CREATE TABLE distributed_table1 AS source_table1 ENGINE = Distributed('test_shard_localhost', currentDatabase(), source_table1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6493', () => {
    const query = `CREATE TABLE distributed_table2 AS source_table2 ENGINE = Distributed('test_shard_localhost', currentDatabase(), source_table2);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6494', () => {
    const query = `CREATE TABLE test (num UInt64, str String) ENGINE = MergeTree ORDER BY num;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6495', () => {
    const query = `CREATE TABLE indexed_table (
\`tm\` DateTime,
\`log_message\` String,
INDEX log_message log_message TYPE tokenbf_v1(4096, 2, 0) GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY (tm)
SETTINGS index_granularity_bytes = 50, min_index_granularity_bytes = 40;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6496', () => {
    const query = `CREATE TABLE another_indexed_table (
\`tm\` DateTime,
\`log_message\` String,
INDEX log_message log_message TYPE tokenbf_v1(4096, 2, 0) GRANULARITY 1
)
ENGINE = MergeTree
ORDER BY (tm)
SETTINGS index_granularity_bytes = 50,
min_index_granularity_bytes = 40,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6497', () => {
    const query = `CREATE TABLE t1 AS remote('127.0.0.1', system.one);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6498', () => {
    const query = `CREATE TABLE t2 AS remote('127.0.0.1', system.numbers);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6499', () => {
    const query = `CREATE TABLE t3 AS remote('127.0.0.1', numbers(100));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6500', () => {
    const query = `CREATE TABLE t4 AS numbers(100);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6501', () => {
    const query = `CREATE TABLE upyachka (x UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6502', () => {
    const query = `CREATE TABLE merge_tree (x UInt8) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6503', () => {
    const query = `CREATE TABLE ColumnsClauseTest (product_price Int64, product_weight Int16, amount Int64) Engine=TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6504', () => {
    const query = `CREATE TABLE tableFile_00968(number UInt64) ENGINE = File('TSV');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6505', () => {
    const query = `CREATE TABLE tableMergeTree_00968(id UInt64) ENGINE = MergeTree() PARTITION BY id ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6506', () => {
    const query = `CREATE TABLE dist_00967 (key UInt64) Engine=Distributed('test_shard_localhost', currentDatabase(), underlying_00967);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6507', () => {
    const query = `CREATE TABLE underlying_00967 (key Nullable(UInt64)) Engine=TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6508', () => {
    const query = `CREATE TABLE test_startsWith (a String) Engine = MergeTree PARTITION BY tuple() ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6509', () => {
    const query = `CREATE TABLE t_enum8( x Enum('hello' = 1, 'world' = 2) ) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6510', () => {
    const query = `CREATE TABLE t_enum16( x Enum('hello' = 1, 'world' = 128) ) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6511', () => {
    const query = `CREATE TABLE test_00961 (d Date, a String, b UInt8, x String, y Int8, z UInt32) ENGINE = MergeTree PARTITION BY d ORDER BY (a, b)
SETTINGS index_granularity = 111,
min_bytes_for_wide_part = 0,
compress_marks = 0,
compress_primary_key = 0,
index_granularity_bytes = '10Mi',
ratio_of_defaults_for_sparse_serialization = 1,
replace_long_file_name_to_hash = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6512', () => {
    const query = `CREATE TABLE mt_table (d Date, key UInt64, data String) ENGINE = MergeTree() PARTITION BY toYYYYMM(d) ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6513', () => {
    const query = `CREATE TABLE segfault_table (id UInt16 CODEC(Delta(2))) ENGINE MergeTree() order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6514', () => {
    const query = `CREATE TABLE mt_with_pk ( d Date DEFAULT '2000-01-01',
x DateTime,
y Array(UInt64),
z UInt64,
n Nested (Age UInt8, Name String),
w Int16 DEFAULT 10
) ENGINE = MergeTree()
PARTITION BY toYYYYMM(d) ORDER BY (x, z) SETTINGS index_granularity_bytes=10000; -- write_final_mark=1 by default
SELECT '===test insert===';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6515', () => {
    const query = `CREATE TABLE alter_attach (x UInt64, p UInt8) ENGINE = MergeTree ORDER BY tuple() PARTITION BY p  SETTINGS index_granularity_bytes=10000, write_final_mark=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6516', () => {
    const query = `CREATE TABLE alter_update_00806 (d Date, e Enum8('foo'=1, 'bar'=2)) Engine = MergeTree PARTITION BY d ORDER BY (d) SETTINGS index_granularity_bytes=10000, write_final_mark=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6517', () => {
    const query = `CREATE TABLE mt_without_pk ( d Date DEFAULT '2000-01-01',
x DateTime,
y Array(UInt64),
z UInt64,
n Nested (Age UInt8, Name String),
w Int16 DEFAULT 10
) ENGINE = MergeTree()
PARTITION BY toYYYYMM(d) ORDER BY tuple() SETTINGS index_granularity_bytes=10000, write_final_mark=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6518', () => {
    const query = `CREATE TABLE mt_with_small_granularity ( d Date DEFAULT '2000-01-01',
x DateTime,
y Array(UInt64),
z UInt64,
n Nested (Age UInt8, Name String),
w Int16 DEFAULT 10
) ENGINE = MergeTree()
PARTITION BY toYYYYMM(d) ORDER BY (x, z) SETTINGS index_granularity_bytes=30, min_index_granularity_bytes=20, write_final_mark=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6519', () => {
    const query = `CREATE TABLE moving_sum_num ( k String,
dt DateTime,
v UInt64
)
ENGINE = MergeTree ORDER BY (k, dt);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6520', () => {
    const query = `CREATE TABLE moving_sum_dec ENGINE = Memory AS SELECT k, dt, toDecimal64(v, 2) as v
FROM moving_sum_num;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6521', () => {
    const query = `CREATE TABLE part_info (t DateTime) ENGINE = MergeTree PARTITION BY toDate(t) ORDER BY (t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6522', () => {
    const query = `CREATE TABLE local_00952 (date Date, value Date MATERIALIZED toDate('2017-08-01')) ENGINE = MergeTree(date, date, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6523', () => {
    const query = `CREATE TABLE distributed_00952 AS local_00952 ENGINE = Distributed('test_cluster_two_shards', currentDatabase(), local_00952, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6524', () => {
    const query = `create table test_entry_distance (Title String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6525', () => {
    const query = `CREATE TABLE codecTest ( key      UInt64,
ref_valueU64 UInt64,
ref_valueU32 UInt32,
ref_valueU16 UInt16,
ref_valueU8  UInt8,
ref_valueI64 Int64,
ref_valueI32 Int32,
ref_valueI16 Int16,
ref_valueI8  Int8,
ref_valueDT  DateTime,
ref_valueD   Date,
valueU64 UInt64   CODEC(DoubleDelta),
valueU32 UInt32   CODEC(DoubleDelta),
valueU16 UInt16   CODEC(DoubleDelta),
valueU8  UInt8    CODEC(DoubleDelta),
valueI64 Int64    CODEC(DoubleDelta),
valueI32 Int32    CODEC(DoubleDelta),
valueI16 Int16    CODEC(DoubleDelta),
valueI8  Int8     CODEC(DoubleDelta),
valueDT  DateTime CODEC(DoubleDelta),
valueD   Date     CODEC(DoubleDelta)
) Engine = MergeTree ORDER BY key SETTINGS min_bytes_for_wide_part = 0, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6526', () => {
    const query = `create table ints (key UInt64, i8 Int8, i16 Int16, i32 Int32, i64 Int64, u8 UInt8, u16 UInt16, u32 UInt32, u64 UInt64) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6527', () => {
    const query = `create table strings (key UInt64, str String) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6528', () => {
    const query = `create table decimals (key UInt64, d32 Decimal32(4), d64 Decimal64(6), d128 Decimal128(1)) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6529', () => {
    const query = `CREATE TABLE test_generic_events_all (APIKey UInt8, SessionType UInt8) ENGINE = MergeTree() PARTITION BY APIKey ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6530', () => {
    const query = `CREATE TABLE join_test (number UInt8, value Float32) Engine = Join(ANY, LEFT, number);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6531', () => {
    const query = `CREATE TABLE type_names (n UInt8, s1 String, s2 String, s3 String) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6532', () => {
    const query = `CREATE TABLE values_template (d Date, s String, u UInt8, i Int64, f Float64, a Array(UInt8)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6533', () => {
    const query = `CREATE TABLE values_template_nullable (d Date, s Nullable(String), u Nullable(UInt8), a Array(Nullable(Float32))) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6534', () => {
    const query = `CREATE TABLE values_template_fallback (n UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6535', () => {
    const query = `CREATE TABLE IF NOT EXISTS defaults (
param1 Float64,
param2 Float64,
target Float64,
predict1 Float64,
predict2 Float64
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6536', () => {
    const query = `create table model engine = Memory as select stochasticLinearRegressionState(0.03, 0.00001, 2, 'Nesterov')(target, param1, param2) as state from defaults;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6537', () => {
    const query = `CREATE TABLE IF NOT EXISTS grouptest (
user_id UInt32,
p1 Float64,
p2 Float64,
target Float64
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6538', () => {
    const query = `CREATE TABLE IF NOT EXISTS defaults (
param1 Float64,
param2 Float64,
param3 Float64,
param4 Float64,
param5 Float64,
param6 Float64,
param7 Float64,
target Float64,
predict1 Float64,
predict2 Float64,
predict3 Float64,
predict4 Float64,
predict5 Float64,
predict6 Float64,
predict7 Float64
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6539', () => {
    const query = `create table model engine = Memory as select stochasticLinearRegressionState(0.1, 0.0, 5, 'SGD')(target, param1, param2, param3, param4, param5, param6, param7) as state from defaults;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6540', () => {
    const query = `create table model engine = Memory as select stochasticLogisticRegressionState(0.1, 0.0, 1.0, 'SGD')(target, param1, param2) as state from defaults;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6541', () => {
    const query = `CREATE TABLE single_column_bloom_filter (u64 UInt64, i32 Int32, i64 UInt64, INDEX idx (i32) TYPE bloom_filter GRANULARITY 1) ENGINE = MergeTree() ORDER BY u64 SETTINGS index_granularity = 6, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6542', () => {
    const query = `CREATE TABLE bloom_filter_types_test (order_key   UInt64, i8 Int8, i16 Int16, i32 Int32, i64 Int64, u8 UInt8, u16 UInt16, u32 UInt32, u64 UInt64, f32 Float32, f64 Float64, date Date, date_time DateTime('Asia/Istanbul'), str String, fixed_string FixedString(5), INDEX idx (i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, date, date_time, str, fixed_string) TYPE bloom_filter GRANULARITY 1) ENGINE = MergeTree() ORDER BY order_key SETTINGS index_granularity = 6, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6543', () => {
    const query = `CREATE TABLE bloom_filter_array_types_test (order_key   Array(UInt64), i8 Array(Int8), i16 Array(Int16), i32 Array(Int32), i64 Array(Int64), u8 Array(UInt8), u16 Array(UInt16), u32 Array(UInt32), u64 Array(UInt64), f32 Array(Float32), f64 Array(Float64), date Array(Date), date_time Array(DateTime('Asia/Istanbul')), str Array(String), fixed_string Array(FixedString(5)), INDEX idx (i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, date, date_time, str, fixed_string) TYPE bloom_filter GRANULARITY 1) ENGINE = MergeTree() ORDER BY order_key SETTINGS index_granularity = 6, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6544', () => {
    const query = `CREATE TABLE bloom_filter_null_types_test (order_key UInt64, i8 Nullable(Int8), i16 Nullable(Int16), i32 Nullable(Int32), i64 Nullable(Int64), u8 Nullable(UInt8), u16 Nullable(UInt16), u32 Nullable(UInt32), u64 Nullable(UInt64), f32 Nullable(Float32), f64 Nullable(Float64), date Nullable(Date), date_time Nullable(DateTime('Asia/Istanbul')), str Nullable(String), fixed_string Nullable(FixedString(5)), INDEX idx (i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, date, date_time, str, fixed_string) TYPE bloom_filter GRANULARITY 1) ENGINE = MergeTree() ORDER BY order_key SETTINGS index_granularity = 6, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6545', () => {
    const query = `CREATE TABLE bloom_filter_lc_null_types_test (order_key UInt64, str LowCardinality(Nullable(String)), fixed_string LowCardinality(Nullable(FixedString(5))), INDEX idx (str, fixed_string) TYPE bloom_filter GRANULARITY 1) ENGINE = MergeTree() ORDER BY order_key SETTINGS index_granularity = 6, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6546', () => {
    const query = `CREATE TABLE bloom_filter_array_lc_null_types_test ( order_key   Array(LowCardinality(Nullable(UInt64))),
i8 Array(LowCardinality(Nullable(Int8))),
i16 Array(LowCardinality(Nullable(Int16))),
i32 Array(LowCardinality(Nullable(Int32))),
i64 Array(LowCardinality(Nullable(Int64))),
u8 Array(LowCardinality(Nullable(UInt8))),
u16 Array(LowCardinality(Nullable(UInt16))),
u32 Array(LowCardinality(Nullable(UInt32))),
u64 Array(LowCardinality(Nullable(UInt64))),
f32 Array(LowCardinality(Nullable(Float32))),
f64 Array(LowCardinality(Nullable(Float64))),
date Array(LowCardinality(Nullable(Date))),
date_time Array(LowCardinality(Nullable(DateTime('Asia/Istanbul')))),
str Array(LowCardinality(Nullable(String))),
fixed_string Array(LowCardinality(Nullable(FixedString(5)))),
INDEX idx (i8, i16, i32, i64, u8, u16, u32, u64, f32, f64, date, date_time, str, fixed_string)
TYPE bloom_filter GRANULARITY 1)
ENGINE = MergeTree() ORDER BY order_key SETTINGS index_granularity = 6, index_granularity_bytes = '10Mi', allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6547', () => {
    const query = `CREATE TABLE bloom_filter_array_offsets_lc_str (order_key int, str Array(LowCardinality(String)), INDEX idx str TYPE bloom_filter(1.) GRANULARITY 1024) ENGINE = MergeTree() ORDER BY order_key SETTINGS index_granularity = 1024, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6548', () => {
    const query = `CREATE TABLE bloom_filter_array_offsets_str (order_key int, str Array(String), INDEX idx str TYPE bloom_filter(1.) GRANULARITY 1024) ENGINE = MergeTree() ORDER BY order_key SETTINGS index_granularity = 1024, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6549', () => {
    const query = `CREATE TABLE bloom_filter_array_offsets_i (order_key int, i Array(int), INDEX idx i TYPE bloom_filter(1.) GRANULARITY 1024) ENGINE = MergeTree() ORDER BY order_key SETTINGS index_granularity = 1024, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6550', () => {
    const query = `CREATE TABLE test_bf_indexOf ( \`id\` int, \`ary\` Array(LowCardinality(Nullable(String))), INDEX idx_ary ary TYPE bloom_filter(0.01) GRANULARITY 1) ENGINE = MergeTree() ORDER BY id SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6551', () => {
    const query = `CREATE TABLE test_bf_cast (c Int32, INDEX x1 (c) type bloom_filter) ENGINE = MergeTree ORDER BY c AS SELECT 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6552', () => {
    const query = `CREATE TABLE defaults (
param1 Float64,
param2 Float64,
target Float64,
predict1 Float64,
predict2 Float64
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6553', () => {
    const query = `create table model engine = Memory as select stochasticLinearRegressionState(0.1, 0.0, 2, 'SGD')(target, param1, param2) as state from defaults;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6554', () => {
    const query = `CREATE TABLE min_max_with_nullable_string ( t DateTime,
nullable_str Nullable(String),
INDEX nullable_str_min_max nullable_str TYPE minmax GRANULARITY 1
) ENGINE = MergeTree ORDER BY (t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6555', () => {
    const query = `CREATE TABLE src (x UInt8) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6556', () => {
    const query = `CREATE MATERIALIZED VIEW original_mv TO dst AS SELECT * FROM src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6557', () => {
    const query = `CREATE TABLE src_00942 (x UInt8) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6558', () => {
    const query = `CREATE MATERIALIZED VIEW view_table_00942 Engine = Memory AS SELECT * FROM src_00942;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6559', () => {
    const query = `CREATE TABLE pk_order (a Int, b Int) ENGINE = MergeTree ORDER BY (a / b);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6560', () => {
    const query = `create table max_parts_in_total (x UInt64) ENGINE = MergeTree PARTITION BY x ORDER BY x SETTINGS max_parts_in_total = 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6561', () => {
    const query = `CREATE TABLE nullt (c1 Nullable(UInt32), c2 Nullable(String))ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6562', () => {
    const query = `create table limit_by(id Int, val Int) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6563', () => {
    const query = `CREATE TABLE retention_test(date Date, uid Int32)ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6564', () => {
    const query = `CREATE TABLE ipv6_range(ip IPv6, cidr UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6565', () => {
    const query = `create table model engine = Memory as select stochasticLinearRegressionState(0.03, 0.00001, 2, 'Momentum')(target, param1, param2) as state from defaults;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6566', () => {
    const query = `CREATE TABLE ipv4_range(ip IPv4, cidr UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6567', () => {
    const query = `CREATE TABLE samples (key UInt32, value UInt32) ENGINE = MergeTree() ORDER BY key PRIMARY KEY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6568', () => {
    const query = `CREATE TABLE table1 (str1 String, str2 String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6569', () => {
    const query = `create table ttl_00933_2 (d DateTime, a Int default 111 ttl d + interval 1 DAY) engine = MergeTree order by tuple() partition by toDayOfMonth(d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6570', () => {
    const query = `create table ttl_00933_2 (d DateTime, a Int, b default a * 2 ttl d + interval 1 DAY) engine = MergeTree order by tuple() partition by toDayOfMonth(d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6571', () => {
    const query = `create table ttl_00933_2 (d DateTime, a Int, b default 222 ttl d + interval 1 DAY) engine = MergeTree order by tuple() partition by toDayOfMonth(d);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6572', () => {
    const query = `create table ttl_00933_1 (d DateTime, a Int ttl d + interval 1 second, b Int ttl d + interval 1 second) engine = MergeTree order by tuple() partition by toMinute(d) settings min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6573', () => {
    const query = `create table ttl_00933_1 (d DateTime, a Int, b Int) engine = MergeTree order by toDate(d) partition by tuple() ttl d + interval 1 second
settings remove_empty_parts = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6574', () => {
    const query = `create table ttl_00933_1 (d DateTime, a Int ttl d + interval 1 DAY) engine = MergeTree order by tuple() partition by toDayOfMonth(d) settings min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6575', () => {
    const query = `create table ttl_00933_1 (d DateTime, a Int) engine = MergeTree order by tuple() partition by tuple() ttl d + interval 1 day
settings remove_empty_parts = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6576', () => {
    const query = `create table ttl_00933_1 (d Date, a Int) engine = MergeTree order by a partition by toDayOfMonth(d) ttl d + interval 1 day
settings remove_empty_parts = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6577', () => {
    const query = `create table ttl_00933_1 (b Int, a Int ttl '2000-10-10 00:00:00'::DateTime) engine = MergeTree order by tuple() partition by tuple() settings min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6578', () => {
    const query = `create table ttl_00933_1 (b Int, a Int ttl '2100-10-10 00:00:00'::DateTime) engine = MergeTree order by tuple() partition by tuple() settings min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6579', () => {
    const query = `create table ttl_00933_1 (b Int, a Int ttl '2000-10-10'::Date) engine = MergeTree order by tuple() partition by tuple() settings min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6580', () => {
    const query = `create table ttl_00933_1 (b Int, a Int ttl '2100-10-10'::Date) engine = MergeTree order by tuple() partition by tuple() settings min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6581', () => {
    const query = `create table ttl_00933_1 (d DateTime ttl d) engine = MergeTree order by tuple() partition by toSecond(d); -- { serverError ILLEGAL_COLUMN} create table ttl_00933_1 (d DateTime, a Int ttl d) engine = MergeTree order by a partition by toSecond(d); -- { serverError ILLEGAL_COLUMN}
create table ttl_00933_1 (d DateTime, a Int ttl 2 + 2) engine = MergeTree order by tuple() partition by toSecond(d); -- { serverError BAD_TTL_EXPRESSION }
create table ttl_00933_1 (d DateTime, a Int ttl d - d) engine = MergeTree order by tuple() partition by toSecond(d); -- { serverError BAD_TTL_EXPRESSION }
create table ttl_00933_1 (d DateTime, a Int  ttl d + interval 1 day) engine = Log; -- { serverError BAD_ARGUMENTS }
create table ttl_00933_1 (d DateTime, a Int) engine = Log ttl d + interval 1 day; -- { serverError BAD_ARGUMENTS }
drop table if exists ttl_00933_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6582', () => {
    const query = `CREATE TABLE reserved_word_table (\`index\` UInt8) ENGINE = MergeTree ORDER BY \`index\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6583', () => {
    const query = `create table ttl (d Date, a Int) engine = MergeTree order by tuple() partition by toDayOfMonth(d) settings remove_empty_parts = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6584', () => {
    const query = `create table geohash_test_data ( 	latitude  Float64,
	longitude Float64,
	encoded   String
) engine = MergeTree order by (latitude, longitude, encoded);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6585', () => {
    const query = `create table test_in (a LowCardinality(String)) Engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6586', () => {
    const query = `CREATE TABLE lc_00931 ( key UInt64,
value Array(LowCardinality(String)))
ENGINE = MergeTree
ORDER BY key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6587', () => {
    const query = `CREATE TABLE lc (\`date\` Date, \`name\` LowCardinality(Nullable(String)), \`clicks\` Nullable(Int32)) ENGINE = MergeTree() ORDER BY date SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6588', () => {
    const query = `CREATE TABLE partitions (x UInt64) ENGINE = MergeTree ORDER BY x PARTITION BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6589', () => {
    const query = `create table array_intersect (date Date, arr Array(UInt8)) engine=MergeTree partition by date order by date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6590', () => {
    const query = `CREATE TABLE md(key UInt32, t DateTime, bid Float64, ask Float64) ENGINE = MergeTree() ORDER BY (key, t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6591', () => {
    const query = `CREATE TABLE tv(key UInt32, t DateTime, tv Float64) ENGINE = MergeTree() ORDER BY (key, t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6592', () => {
    const query = `CREATE TABLE A(k UInt32, t DateTime, a Float64) ENGINE = MergeTree() ORDER BY (k, t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6593', () => {
    const query = `CREATE TABLE tvs(k UInt32, t UInt32, tv UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6594', () => {
    const query = `CREATE TABLE A(k UInt32, t UInt32, a UInt64) ENGINE = MergeTree() ORDER BY (k, t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6595', () => {
    const query = `CREATE TABLE B1(k UInt32, t UInt32, b UInt64) ENGINE = MergeTree() ORDER BY (k, t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6596', () => {
    const query = `CREATE TABLE B2(t UInt32, k UInt32, b UInt64) ENGINE = MergeTree() ORDER BY (k, t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6597', () => {
    const query = `CREATE TABLE B3(k UInt32, b UInt64, t UInt32) ENGINE = MergeTree() ORDER BY (k, t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6598', () => {
    const query = `CREATE TABLE zero_rows_per_granule1 ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00926/zero_rows_in_granule', '1') PARTITION BY toYYYYMM(p) ORDER BY k SETTINGS index_granularity_bytes = 20, min_index_granularity_bytes = 10, write_final_mark = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6599', () => {
    const query = `CREATE TABLE zero_rows_per_granule2 ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00926/zero_rows_in_granule', '2') PARTITION BY toYYYYMM(p) ORDER BY k SETTINGS index_granularity_bytes = 20, min_index_granularity_bytes = 10, write_final_mark = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6600', () => {
    const query = `CREATE TABLE four_rows_per_granule1 ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00926/four_rows_in_granule', '1') PARTITION BY toYYYYMM(p) ORDER BY k SETTINGS index_granularity_bytes = 110, min_index_granularity_bytes = 100, write_final_mark = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6601', () => {
    const query = `CREATE TABLE four_rows_per_granule2 ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00926/four_rows_in_granule', '2') PARTITION BY toYYYYMM(p) ORDER BY k SETTINGS index_granularity_bytes = 110, min_index_granularity_bytes = 100 ,write_final_mark = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6602', () => {
    const query = `CREATE TABLE adaptive_granularity_alter1 ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00926/adaptive_granularity_alter', '1') PARTITION BY toYYYYMM(p) ORDER BY k SETTINGS index_granularity_bytes = 110, min_index_granularity_bytes = 100, write_final_mark = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6603', () => {
    const query = `CREATE TABLE adaptive_granularity_alter2 ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00926/adaptive_granularity_alter', '2') PARTITION BY toYYYYMM(p) ORDER BY k SETTINGS index_granularity_bytes = 110, min_index_granularity_bytes = 100, write_final_mark = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6604', () => {
    const query = `CREATE TABLE table1 (lat Float64, lon Float64, resolution UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6605', () => {
    const query = `CREATE TABLE zero_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64,
Sign Int8,
Version UInt8
) ENGINE VersionedCollapsingMergeTree(Sign, Version) PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes = 20,
min_index_granularity_bytes = 10,
write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6606', () => {
    const query = `CREATE TABLE four_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64,
Sign Int8,
Version UInt8
) ENGINE VersionedCollapsingMergeTree(Sign, Version) PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes=120,
min_index_granularity_bytes = 100,
write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6607', () => {
    const query = `CREATE TABLE six_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64,
Sign Int8,
Version UInt8
) ENGINE VersionedCollapsingMergeTree(Sign, Version) PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes=170,
min_index_granularity_bytes = 100,
write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6608', () => {
    const query = `CREATE TABLE zero_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE ReplacingMergeTree() PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes=20,
min_index_granularity_bytes = 10,
write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6609', () => {
    const query = `CREATE TABLE two_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE ReplacingMergeTree() PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes = 40,
min_index_granularity_bytes = 10,
write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6610', () => {
    const query = `CREATE TABLE four_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE ReplacingMergeTree() PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes = 110,
min_index_granularity_bytes=100,
write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6611', () => {
    const query = `CREATE TABLE huge_granularity_small_blocks ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE ReplacingMergeTree() PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes=1000000, write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6612', () => {
    const query = `CREATE TABLE adaptive_granularity_alter ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE ReplacingMergeTree() PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes=110,
min_index_granularity_bytes=40,
write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6613', () => {
    const query = `CREATE TABLE pk (d Date DEFAULT '2000-01-01', x DateTime, y UInt64, z UInt64) ENGINE = MergeTree() PARTITION BY d ORDER BY (toStartOfMinute(x, 'UTC'), y, z) SETTINGS index_granularity_bytes=19, min_index_granularity_bytes=9, write_final_mark = 0; -- one row granule INSERT INTO pk (x, y, z) VALUES (1, 11, 1235), (2, 11, 4395), (3, 22, 3545), (4, 22, 6984), (5, 33, 4596), (61, 11, 4563), (62, 11, 4578), (63, 11, 3572), (64, 22, 5786), (65, 22, 5786), (66, 22, 2791), (67, 22, 2791), (121, 33, 2791), (122, 33, 2791), (123, 33, 1235), (124, 44, 4935), (125, 44, 4578), (126, 55, 5786), (127, 55, 2791), (128, 55, 1235);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6614', () => {
    const query = `CREATE TABLE merge_tree (x UInt32) ENGINE = MergeTree ORDER BY x SETTINGS index_granularity_bytes = 4, min_index_granularity_bytes=1, write_final_mark = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6615', () => {
    const query = `CREATE TABLE large_alter_table_00926 ( somedate Date CODEC(ZSTD, ZSTD, ZSTD(12), LZ4HC(12)),
id UInt64 CODEC(LZ4, ZSTD, NONE, LZ4HC),
data String CODEC(ZSTD(2), LZ4HC, NONE, LZ4, LZ4)
) ENGINE = MergeTree() PARTITION BY somedate ORDER BY id SETTINGS min_index_granularity_bytes=30, write_final_mark = 0, min_bytes_for_wide_part = '10M', min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6616', () => {
    const query = `CREATE TABLE store_of_hash_00926 (hash UInt64) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6617', () => {
    const query = `CREATE TABLE zero_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE MergeTree() PARTITION BY toYYYYMM(p) ORDER BY k SETTINGS index_granularity_bytes = 20, min_index_granularity_bytes = 10, write_final_mark = 0, min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6618', () => {
    const query = `CREATE TABLE two_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE MergeTree() PARTITION BY toYYYYMM(p) ORDER BY k SETTINGS index_granularity_bytes = 40, min_index_granularity_bytes = 10, write_final_mark = 0, min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6619', () => {
    const query = `CREATE TABLE four_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE MergeTree() PARTITION BY toYYYYMM(p) ORDER BY k SETTINGS index_granularity_bytes = 110, min_index_granularity_bytes = 10, write_final_mark = 0, min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6620', () => {
    const query = `CREATE TABLE huge_granularity_small_blocks ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE MergeTree() PARTITION BY toYYYYMM(p) ORDER BY k SETTINGS index_granularity_bytes = 1000000, write_final_mark = 0, min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6621', () => {
    const query = `CREATE TABLE adaptive_granularity_alter ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE MergeTree() PARTITION BY toYYYYMM(p) ORDER BY k SETTINGS index_granularity_bytes = 110, min_index_granularity_bytes = 100, write_final_mark = 0, min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6622', () => {
    const query = `CREATE TABLE zero_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE MergeTree() PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes = 20,
min_index_granularity_bytes = 10,
write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6623', () => {
    const query = `CREATE TABLE two_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE MergeTree() PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes=40,
min_index_granularity_bytes = 10,
write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6624', () => {
    const query = `CREATE TABLE four_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE MergeTree() PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes = 110,
min_index_granularity_bytes = 10,
write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6625', () => {
    const query = `CREATE TABLE huge_granularity_small_blocks ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE MergeTree() PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes=1000000, write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6626', () => {
    const query = `CREATE TABLE adaptive_granularity_alter ( p Date,
k UInt64,
v1 UInt64,
v2 Int64
) ENGINE MergeTree() PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes=110,
min_index_granularity_bytes = 100,
write_final_mark = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6627', () => {
    const query = `CREATE TABLE zero_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64,
Sign Int8
) ENGINE CollapsingMergeTree(Sign) PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes=20, min_index_granularity_bytes=10, write_final_mark = 0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6628', () => {
    const query = `CREATE TABLE four_rows_per_granule ( p Date,
k UInt64,
v1 UInt64,
v2 Int64,
Sign Int8
) ENGINE CollapsingMergeTree(Sign) PARTITION BY toYYYYMM(p) ORDER BY k
SETTINGS index_granularity_bytes=110, min_index_granularity_bytes=100, write_final_mark = 0,
min_bytes_for_wide_part = 0,
min_rows_for_wide_part = 0,
enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6629', () => {
    const query = `CREATE TABLE ANIMAL ( ANIMAL Nullable(String) ) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6630', () => {
    const query = `CREATE OR REPLACE VIEW t (number UInt64) AS SELECT number FROM system.numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6631', () => {
    const query = `CREATE OR REPLACE VIEW t AS SELECT number+1 AS next_number FROM system.numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6632', () => {
    const query = `CREATE TABLE add_materialized_column_after (x UInt32, z UInt64) ENGINE MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6633', () => {
    const query = `create table simple (id UInt64,val SimpleAggregateFunction(sum,Double)) engine=AggregatingMergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6634', () => {
    const query = `create table simple ( id UInt64,
nullable_str SimpleAggregateFunction(anyLast,Nullable(String)),
low_str SimpleAggregateFunction(anyLast,LowCardinality(Nullable(String))),
ip SimpleAggregateFunction(anyLast,IPv4),
status SimpleAggregateFunction(groupBitOr, UInt32),
tup SimpleAggregateFunction(sumMap, Tuple(Array(Int32), Array(Int64))),
tup_min SimpleAggregateFunction(minMap, Tuple(Array(Int32), Array(Int64))),
tup_max SimpleAggregateFunction(maxMap, Tuple(Array(Int32), Array(Int64))),
arr SimpleAggregateFunction(groupArrayArray, Array(Int32)),
uniq_arr SimpleAggregateFunction(groupUniqArrayArray, Array(Int32))
) engine=AggregatingMergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6635', () => {
    const query = `create table with_overflow ( id UInt64,
s SimpleAggregateFunction(sumWithOverflow, UInt8)
) engine AggregatingMergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6636', () => {
    const query = `CREATE TABLE table1 (A String, B String, ts DateTime) ENGINE = MergeTree PARTITION BY toStartOfDay(ts)  ORDER BY (ts, A, B);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6637', () => {
    const query = `CREATE TABLE table2 (B String, ts DateTime) ENGINE = MergeTree PARTITION BY toStartOfDay(ts) ORDER BY (ts, B);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6638', () => {
    const query = `CREATE TABLE alter_compression_codec1 ( somedate Date CODEC(LZ4),
id UInt64 CODEC(NONE)
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00910/'||currentDatabase()||'alter_compression_codecs/{shard}', '1_{replica}') PARTITION BY somedate ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6639', () => {
    const query = `CREATE TABLE alter_compression_codec2 ( somedate Date CODEC(LZ4),
id UInt64 CODEC(NONE)
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00910/'||currentDatabase()||'alter_compression_codecs/{shard}', '2_{replica}') PARTITION BY somedate ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6640', () => {
    const query = `CREATE TABLE compression_codec_replicated1( id UInt64 CODEC(LZ4),
data String CODEC(ZSTD),
ddd Date CODEC(NONE),
somenum Float64 CODEC(ZSTD(2)),
somestr FixedString(3) CODEC(LZ4HC(7)),
othernum Int64 CODEC(Delta)
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00910/compression_codec_replicated', '1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6641', () => {
    const query = `CREATE TABLE compression_codec_replicated2( id UInt64 CODEC(LZ4),
data String CODEC(ZSTD),
ddd Date CODEC(NONE),
somenum Float64 CODEC(ZSTD(2)),
somestr FixedString(3) CODEC(LZ4HC(7)),
othernum Int64 CODEC(Delta)
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00910/compression_codec_replicated', '2') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6642', () => {
    const query = `CREATE TABLE compression_codec_multiple_replicated1 ( id UInt64 CODEC(LZ4, ZSTD, NONE, LZ4HC, Delta(4)),
data String CODEC(ZSTD(2), NONE, Delta(2), LZ4HC, LZ4, LZ4, Delta(8)),
ddd Date CODEC(NONE, NONE, NONE, Delta(1), LZ4, ZSTD, LZ4HC, LZ4HC),
somenum Float64 CODEC(Delta(4), LZ4, LZ4, ZSTD(2), LZ4HC(5), ZSTD(3), ZSTD)
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00910/compression_codec_multiple', '1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6643', () => {
    const query = `CREATE TABLE compression_codec_multiple_replicated2 ( id UInt64 CODEC(LZ4, ZSTD, NONE, LZ4HC, Delta(4)),
data String CODEC(ZSTD(2), NONE, Delta(2), LZ4HC, LZ4, LZ4, Delta(8)),
ddd Date CODEC(NONE, NONE, NONE, Delta(1), LZ4, ZSTD, LZ4HC, LZ4HC),
somenum Float64 CODEC(Delta(4), LZ4, LZ4, ZSTD(2), LZ4HC(5), ZSTD(3), ZSTD)
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00910/compression_codec_multiple', '2') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6644', () => {
    const query = `CREATE TABLE compression_codec_multiple_more_types_replicated ( id Decimal128(13) CODEC(ZSTD, LZ4, ZSTD, ZSTD, Delta(2), Delta(4), Delta(1), LZ4HC),
data FixedString(12) CODEC(ZSTD, ZSTD, Delta(1), Delta(1), Delta(1), NONE, NONE, NONE, LZ4HC),
ddd Nested (age UInt8, Name String) CODEC(LZ4, LZ4HC, NONE, NONE, NONE, ZSTD, Delta(8))
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00910/compression_codec_multiple_more_types_replicated', '1') ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6645', () => {
    const query = `CREATE TABLE compression_codec_multiple_with_key_replicated ( somedate Date CODEC(ZSTD, ZSTD, ZSTD(12), LZ4HC(12), Delta, Delta),
id UInt64 CODEC(LZ4, ZSTD, Delta, NONE, LZ4HC, Delta),
data String CODEC(ZSTD(2), Delta(1), LZ4HC, NONE, LZ4, LZ4)
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00910/compression_codec_multiple_with_key_replicated', '1') PARTITION BY somedate ORDER BY id SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6646', () => {
    const query = `CREATE TABLE sensor_value ( received_at DateTime('Asia/Istanbul'),
device_id UUID,
sensor_id UUID,
value Nullable(Decimal(18, 4)),
low_warning Nullable(Decimal(18, 4)),
low_critical Nullable(Decimal(18, 4)),
high_warning Nullable(Decimal(18, 4)),
high_critical Nullable(Decimal(18, 4))
) ENGINE = MergeTree
PARTITION BY toDate(received_at)
ORDER BY (device_id, sensor_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6647', () => {
    const query = `CREATE TABLE union1 ( date Date, a Int32, b Int32, c Int32, d Int32) ENGINE = MergeTree(date, (a, date), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6648', () => {
    const query = `CREATE TABLE union2 ( date Date, a Int32, b Int32, c Int32, d Int32) ENGINE = Distributed(test_shard_localhost, currentDatabase(), 'union1');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6649', () => {
    const query = `CREATE TABLE merge_tree_table1 (\`x\` UInt32) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6650', () => {
    const query = `CREATE TABLE buffer_table1__fuzz_24 (\`s\` Nullable(Int128), \`x\` Nullable(FixedString(17))) ENGINE = Buffer(currentDatabase(), 'merge_tree_table1', 16, 10, 60, 10, 1000, 1048576, 2097152);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6651', () => {
    const query = `CREATE TABLE buffer_table1__fuzz_28 (\`x\` Nullable(UInt32)) ENGINE = Buffer(currentDatabase(), 'merge_tree_table1', 16, 10, 60, 10, 1000, 1048576, 2097152);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6652', () => {
    const query = `CREATE ROW POLICY rp ON buffer_table1__fuzz_28 FOR SELECT USING x = toLowCardinality(1) TO default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6653', () => {
    const query = `CREATE TABLE mt (uid UInt64, ts DateTime, val Float64) ENGINE = MergeTree PARTITION BY toDate(ts) ORDER BY (uid, ts);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6654', () => {
    const query = `CREATE TABLE buf as mt ENGINE = Buffer({CLICKHOUSE_DATABASE:Identifier}, mt, 2, 10, 60, 10000, 100000, 1000000, 10000000);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6655', () => {
    const query = `create table test_distance (Title String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6656', () => {
    const query = `CREATE TABLE arrays_test (a1 Array(UInt16), a2 Array(UInt16), a3 Array(Array(UInt16)), a4 Array(Array(UInt16)) ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6657', () => {
    const query = `CREATE TABLE arrays_test (a3 Array(Array(UInt8)), a4 Array(Array(UInt32)) ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6658', () => {
    const query = `CREATE TABLE arrays_test (a1 Array(UInt8), a2 Array(UInt32) ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6659', () => {
    const query = `CREATE TABLE arr_tests_visits (
CounterID        UInt32,
StartDate        Date,
Sign             Int8,
VisitID          UInt64,
UserID           UInt64,
VisitVersion     UInt16,
\`Test.BannerID\` Array(UInt64),
\`Test.Load\`     Array(UInt8),
\`Test.PuidKey\`  Array(Array(UInt8)),
\`Test.PuidVal\`  Array(Array(UInt32))
) ENGINE = MergeTree() PARTITION BY toMonday(StartDate) ORDER BY (CounterID, StartDate, intHash32(UserID), VisitID) SAMPLE BY intHash32(UserID) SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6660', () => {
    const query = `CREATE TABLE a (a UInt8, b UInt8) ENGINE MergeTree ORDER BY a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6661', () => {
    const query = `CREATE TABLE null_lc_set_index ( timestamp         DateTime,
action            LowCardinality(Nullable(String)),
user              LowCardinality(Nullable(String)),
INDEX test_user_idx (user) TYPE set(0) GRANULARITY 8192
) ENGINE=MergeTree
PARTITION BY toYYYYMMDD(timestamp)
ORDER BY (timestamp, action, cityHash64(user)) SETTINGS allow_nullable_key = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6662', () => {
    const query = `create table nullable_set_index (a UInt64, b Nullable(String), INDEX b_index b TYPE set(0) GRANULARITY 8192) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6663', () => {
    const query = `create table nullable_set_index (a UInt64, b Nullable(String), INDEX b_index b TYPE set(1) GRANULARITY 8192) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6664', () => {
    const query = `create table nullable_set_index (a UInt64, b LowCardinality(Nullable(String)), INDEX b_index b TYPE set(0) GRANULARITY 8192) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6665', () => {
    const query = `create table nullable_set_index (a UInt64, b LowCardinality(Nullable(String)), INDEX b_index b TYPE set(1) GRANULARITY 8192) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6666', () => {
    const query = `CREATE TABLE lc (a LowCardinality(Nullable(String)), b LowCardinality(Nullable(String))) ENGINE = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6667', () => {
    const query = `create table lc_00906 (b LowCardinality(String)) engine=MergeTree order by b SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6668', () => {
    const query = `CREATE TABLE foo_c(d DateTime) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6669', () => {
    const query = `CREATE TABLE IF NOT EXISTS defaults (
vals String
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6670', () => {
    const query = `CREATE TABLE IF NOT EXISTS defaults (
vals UInt64
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6671', () => {
    const query = `CREATE TABLE IF NOT EXISTS defaults (
vals UInt32
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6672', () => {
    const query = `CREATE TABLE IF NOT EXISTS defaults (
vals Int32
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6673', () => {
    const query = `CREATE TABLE IF NOT EXISTS defaults (
vals DateTime
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6674', () => {
    const query = `CREATE TABLE index_memory (x UInt64) ENGINE = MergeTree ORDER BY x SETTINGS index_granularity = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6675', () => {
    const query = `create table t(a Int64, b Int64) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6676', () => {
    const query = `create table s(a Int64, b Int64) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6677', () => {
    const query = `create table y(a Int64, b Int64) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6678', () => {
    const query = `CREATE TABLE t1 (str String, dec Decimal64(8)) ENGINE = MergeTree ORDER BY str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6679', () => {
    const query = `CREATE TABLE t2 (str String, dec Decimal64(8)) ENGINE = MergeTree ORDER BY dec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6680', () => {
    const query = `CREATE TABLE visits (str String) ENGINE = MergeTree ORDER BY (str);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6681', () => {
    const query = `CREATE TABLE t (x String) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6682', () => {
    const query = `CREATE TABLE nt (x Nullable(String)) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6683', () => {
    const query = `CREATE TABLE ntxy (x Nullable(String), y Nullable(String)) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6684', () => {
    const query = `create table t (a Int8, val Float32) engine = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6685', () => {
    const query = `CREATE TABLE t64 (
date16 Date,
t_date16 Date Codec(T64, ZSTD),
date_32 Date32,
t_date32 Date32 Codec(T64, ZSTD)
) ENGINE MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6686', () => {
    const query = `CREATE TABLE t64 (
u8 UInt8,
t_u8 UInt8 Codec(T64('bit'), LZ4),
u16 UInt16,
t_u16 UInt16 Codec(T64('bit'), LZ4),
u32 UInt32,
t_u32 UInt32 Codec(T64('bit'), LZ4),
u64 UInt64,
t_u64 UInt64 Codec(T64('bit'), LZ4)
) ENGINE MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6687', () => {
    const query = `CREATE TABLE t64 (
i8 Int8,
t_i8 Int8 Codec(T64, LZ4),
i16 Int16,
t_i16 Int16 Codec(T64, LZ4),
i32 Int32,
t_i32 Int32 Codec(T64, LZ4),
i64 Int64,
t_i64 Int64 Codec(T64, LZ4)
) ENGINE MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6688', () => {
    const query = `CREATE TABLE t64 (
u8 UInt8,
t_u8 UInt8 Codec(T64, ZSTD),
u16 UInt16,
t_u16 UInt16 Codec(T64, ZSTD),
u32 UInt32,
t_u32 UInt32 Codec(T64, ZSTD),
u64 UInt64,
t_u64 UInt64 Codec(T64, ZSTD)
) ENGINE MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6689', () => {
    const query = `create table test1_00863 (id UInt64, code String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6690', () => {
    const query = `create table test3_00863 (id UInt64, code String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6691', () => {
    const query = `create table test2_00863 (id UInt64, code String, test1_id UInt64, test3_id UInt64) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6692', () => {
    const query = `CREATE TABLE temp (
x Decimal(38, 2),
y Nullable(Decimal(38, 2))
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6693', () => {
    const query = `CREATE TABLE test_00861 (key UInt64, d32 Decimal32(2), d64 Decimal64(2), d128 Decimal128(2)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6694', () => {
    const query = `CREATE TABLE appointment_events (
_appointment_id UInt32,
_id String,
_status String,
_set_by_id String,
_company_id String,
_client_id String,
_type String,
_at String,
_vacancy_id String,
_set_at UInt32,
_job_requisition_id String
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6695', () => {
    const query = `create table fooL (a Int32, v String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6696', () => {
    const query = `create table fooR (a Int32, v String) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6697', () => {
    const query = `create table shard1 (id Int32) engine = MergeTree order by cityHash64(id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6698', () => {
    const query = `create table shard2 (id Int32) engine = MergeTree order by cityHash64(id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6699', () => {
    const query = `create table distr1 as shard1 engine Distributed (test_cluster_two_shards_localhost, currentDatabase(), shard1, cityHash64(id));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6700', () => {
    const query = `create table distr2 as shard2 engine Distributed (test_cluster_two_shards_localhost, currentDatabase(), shard2, cityHash64(id));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6701', () => {
    const query = `CREATE TABLE local_table (
id Int32,
name String,
ts DateTime,
oth_id Int32
) ENGINE = MergeTree() PARTITION BY toMonday(ts) ORDER BY (ts, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6702', () => {
    const query = `CREATE TABLE other_table (
id Int32,
name String,
ts DateTime,
trd_id Int32
) ENGINE = MergeTree() PARTITION BY toMonday(ts) ORDER BY (ts, id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6703', () => {
    const query = `CREATE TABLE t1_00856 (n Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6704', () => {
    const query = `CREATE TABLE t2_00856 (a Int32, n Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6705', () => {
    const query = `CREATE TABLE f (\`d_ids\` Array(Int64) ) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6706', () => {
    const query = `CREATE TABLE d (\`id\` Int64, \`name\` String ) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6707', () => {
    const query = `CREATE TABLE table_a ( event_id UInt64,
something String,
other Nullable(String)
) ENGINE = MergeTree ORDER BY (event_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6708', () => {
    const query = `CREATE TABLE table_b ( event_id UInt64,
something Nullable(String),
other String
) ENGINE = MergeTree ORDER BY (event_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6709', () => {
    const query = `CREATE TABLE table1 ( id String ) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6710', () => {
    const query = `CREATE TABLE table2 ( parent_id String ) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6711', () => {
    const query = `CREATE TABLE t_local (dummy UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6712', () => {
    const query = `CREATE TABLE t1_00850 (dummy UInt8) ENGINE = Distributed(test_shard_localhost, currentDatabase(), 't_local');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6713', () => {
    const query = `CREATE TABLE t2_00850 (dummy UInt8) ENGINE = Distributed(test_shard_localhost, currentDatabase(), 't_local');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6714', () => {
    const query = `CREATE TABLE t1 (a UInt32, b Nullable(Int32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6715', () => {
    const query = `CREATE TABLE t2 (a UInt32, b Nullable(Int32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6716', () => {
    const query = `CREATE TABLE t3 (a UInt32, b Nullable(Int32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6717', () => {
    const query = `CREATE TABLE t4 (a UInt32, b Nullable(Int32)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6718', () => {
    const query = `CREATE TABLE t1_00848 ( id String ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6719', () => {
    const query = `CREATE TABLE t2_00848 ( id Nullable(String) ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6720', () => {
    const query = `CREATE TABLE t3_00848 ( id Nullable(String), not_id Nullable(String) ) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6721', () => {
    const query = `create table t(a Int64, b Int64) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6722', () => {
    const query = `create table s(a Int64, b Int64) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6723', () => {
    const query = `create table y(a Int64, b Int64) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6724', () => {
    const query = `CREATE TABLE table1 (a UInt32, b UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6725', () => {
    const query = `CREATE TABLE table2 (a UInt32, b UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6726', () => {
    const query = `CREATE TABLE IF NOT EXISTS t1_00844 ( f1 UInt32,
f2 String
) ENGINE = MergeTree ORDER BY (f1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6727', () => {
    const query = `CREATE TABLE IF NOT EXISTS t2_00844 ( f1 String,
f3 String
) ENGINE = MergeTree ORDER BY (f1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6728', () => {
    const query = `CREATE TABLE test1_00843 (a UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6729', () => {
    const query = `CREATE VIEW view_00843 AS SELECT * FROM test1_00843;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6730', () => {
    const query = `CREATE TEMPORARY TABLE t1_00841 (x UInt8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6731', () => {
    const query = `CREATE TABLE minmax_idx1 (
u64 UInt64,
i32 Int32,
f64 Float64,
d Decimal(10, 2),
s String,
e Enum8('a' = 1, 'b' = 2, 'c' = 3),
dt Date,
INDEX
idx_all (i32, i32 + f64, d, s, e, dt) TYPE minmax GRANULARITY 1,
INDEX
idx_2 (u64 + toYear(dt), substring(s, 2, 4)) TYPE minmax GRANULARITY 3
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00837/minmax', 'r1')
ORDER BY u64
SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6732', () => {
    const query = `CREATE TABLE minmax_idx2 (
u64 UInt64,
i32 Int32,
f64 Float64,
d Decimal(10, 2),
s String,
e Enum8('a' = 1, 'b' = 2, 'c' = 3),
dt Date,
INDEX
idx_all (i32, i32 + f64, d, s, e, dt) TYPE minmax GRANULARITY 1,
INDEX
idx_2 (u64 + toYear(dt), substring(s, 2, 4)) TYPE minmax GRANULARITY 3
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00837/minmax', 'r2')
ORDER BY u64
SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6733', () => {
    const query = `CREATE TABLE file (s String, n UInt32) ENGINE = File(CSVWithNames);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6734', () => {
    const query = `CREATE TEMPORARY TABLE file2 AS SELECT * FROM file;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6735', () => {
    const query = `CREATE TABLE minmax_idx (
u64 UInt64,
i32 Int32
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00836/indices_alter1', 'r1')
ORDER BY u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6736', () => {
    const query = `CREATE TABLE minmax_idx_r (
u64 UInt64,
i32 Int32
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00836/indices_alter1', 'r2')
ORDER BY u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6737', () => {
    const query = `CREATE TABLE minmax_idx2 (
u64 UInt64,
i32 Int32,
INDEX idx1 u64 + i32 TYPE minmax GRANULARITY 10,
INDEX idx2 u64 * i32 TYPE minmax GRANULARITY 10
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00836/indices_alter2', 'r1')
ORDER BY u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6738', () => {
    const query = `CREATE TABLE minmax_idx2_r (
u64 UInt64,
i32 Int32,
INDEX idx1 u64 + i32 TYPE minmax GRANULARITY 10,
INDEX idx2 u64 * i32 TYPE minmax GRANULARITY 10
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00836/indices_alter2', 'r2')
ORDER BY u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6739', () => {
    const query = `CREATE TABLE minmax_idx (
u64 UInt64,
i32 Int32
) ENGINE = MergeTree()
ORDER BY u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6740', () => {
    const query = `CREATE TABLE minmax_idx2 (
u64 UInt64,
i32 Int32,
INDEX idx1 (u64 + i32) TYPE minmax GRANULARITY 10,
INDEX idx2 u64 * i32 TYPE minmax GRANULARITY 10
) ENGINE = MergeTree()
ORDER BY u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6741', () => {
    const query = `CREATE TABLE file (number UInt64) ENGINE = File(TSV);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6742', () => {
    const query = `CREATE TABLE kv (k UInt32, v UInt32) ENGINE Join(Any, Left, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6743', () => {
    const query = `CREATE TABLE kv_overwrite (k UInt32, v UInt32) ENGINE Join(Any, Left, k) SETTINGS join_any_take_last_row = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6744', () => {
    const query = `CREATE TABLE t2 (k UInt32, v UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6745', () => {
    const query = `CREATE TABLE bitmap_test(pickup_date Date, city_id UInt32, uid UInt32)ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6746', () => {
    const query = `CREATE TABLE bitmap_state_test (
	pickup_date Date,
	city_id UInt32,
uv AggregateFunction( groupBitmap, UInt32 )
)
ENGINE = AggregatingMergeTree( pickup_date, ( pickup_date, city_id ), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6747', () => {
    const query = `CREATE TABLE bitmap_column_expr_test (
t DateTime,
z AggregateFunction(groupBitmap, UInt32)
)
ENGINE = MergeTree
PARTITION BY toYYYYMMDD(t)
ORDER BY t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6748', () => {
    const query = `CREATE TABLE bitmap_column_expr_test2 (
tag_id String,
z AggregateFunction(groupBitmap, UInt32)
)
ENGINE = MergeTree
ORDER BY tag_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6749', () => {
    const query = `CREATE TABLE bitmap_column_expr_test3 (
tag_id String,
z AggregateFunction(groupBitmap, UInt64),
replace Nested (
from UInt16,
to UInt64
)
)
ENGINE = MergeTree
ORDER BY tag_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6750', () => {
    const query = `CREATE VIEW numbers10 AS SELECT number FROM system.numbers LIMIT 10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6751', () => {
    const query = `CREATE TABLE bitmap_test(pickup_date Date, city_id UInt32, uid UInt64)ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6752', () => {
    const query = `CREATE TABLE bitmap_state_test (
	pickup_date Date,
	city_id UInt32,
uv AggregateFunction( groupBitmap, UInt64 )
)
ENGINE = AggregatingMergeTree() PARTITION BY toYYYYMM(pickup_date) ORDER BY (pickup_date, city_id);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6753', () => {
    const query = `CREATE TABLE t1_00826 (a Int8, b Nullable(Int8)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6754', () => {
    const query = `CREATE TABLE t2_00826 (a Int8, b Nullable(Int8)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6755', () => {
    const query = `CREATE TABLE sequence (
userID UInt64,
eventType Enum8('A' = 1, 'B' = 2, 'C' = 3, 'D' = 4),
EventTime UInt64
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6756', () => {
    const query = `CREATE TABLE table1 AS system.columns ENGINE = Distributed('test_shard_localhost', system, columns);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6757', () => {
    const query = `CREATE TABLE table2 AS system.tables ENGINE = Distributed('test_shard_localhost', system, tables);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6758', () => {
    const query = `CREATE TABLE table1 (a UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6759', () => {
    const query = `CREATE TABLE table3 (b UInt32, c UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6760', () => {
    const query = `CREATE TABLE table5 (a UInt32, b UInt32, c UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6761', () => {
    const query = `CREATE TABLE table_set ( x UInt32 ) ENGINE = Set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6762', () => {
    const query = `CREATE TABLE visits1 (
Sign Int8,
Arr Array(Int8),
\`ParsedParams.Key1\` Array(String),
\`ParsedParams.Key2\` Array(String),
CounterID UInt32
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6763', () => {
    const query = `create table t_00818(a Nullable(Int64), b Nullable(Int64), c Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6764', () => {
    const query = `create table s_00818(a Nullable(Int64), b Nullable(Int64), c Nullable(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6765', () => {
    const query = `CREATE TABLE test_00818 (field String, not_field String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6766', () => {
    const query = `create table t1_00816 (a Int8, val Float32) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6767', () => {
    const query = `create table t2_00816 (a Int8, val Float32) engine=Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6768', () => {
    const query = `CREATE TABLE fact_cpc_clicks (model_id UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6769', () => {
    const query = `CREATE TABLE dim_model (model_id UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6770', () => {
    const query = `CREATE TABLE prewhere (x Array(UInt64), y ALIAS x, s String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6771', () => {
    const query = `CREATE TABLE test_00808(date Date, id Int8, name String, value Int64, sign Int8) ENGINE = CollapsingMergeTree(sign) ORDER BY (id, date);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6772', () => {
    const query = `CREATE TABLE test_00808_push_down_with_finalizeAggregation ENGINE = AggregatingMergeTree ORDER BY n AS
SELECT
intDiv(number, 25) AS n,
avgState(number) AS s
FROM numbers(2500)
GROUP BY n
ORDER BY n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6773', () => {
    const query = `CREATE TABLE alter_update_00806 (d Date, e Enum8('foo'=1, 'bar'=2)) Engine = MergeTree(d, (d), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6774', () => {
    const query = `CREATE TABLE compression_codec(id UInt64 CODEC(ZSTD_QAT(0))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_CODEC_PARAMETER } CREATE TABLE compression_codec(id UInt64 CODEC(ZSTD_QAT(13))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_CODEC_PARAMETER }
CREATE TABLE compression_codec(
id UInt64 CODEC(ZSTD_QAT),
data String CODEC(ZSTD_QAT),
ddd Date CODEC(ZSTD_QAT),
ddd32 Date32 CODEC(ZSTD_QAT),
somenum Float64 CODEC(ZSTD_QAT),
somestr FixedString(3) CODEC(ZSTD_QAT),
othernum Int64 CODEC(ZSTD_QAT),
somearray Array(UInt8) CODEC(ZSTD_QAT),
somemap Map(String, UInt32) CODEC(ZSTD_QAT),
sometuple Tuple(UInt16, UInt64) CODEC(ZSTD_QAT),
) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6775', () => {
    const query = `CREATE TABLE delta_codec_for_alter (date Date, x UInt32 Codec(Delta), s FixedString(128)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6776', () => {
    const query = `CREATE TABLE delta_codec_synthetic (
id UInt64 Codec(Delta, ZSTD(3))
) ENGINE MergeTree() ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0, compress_marks = false, compress_primary_key = false, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6777', () => {
    const query = `CREATE TABLE default_codec_synthetic (
id UInt64 Codec(ZSTD(3))
) ENGINE MergeTree() ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0, compress_marks = false, compress_primary_key = false, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6778', () => {
    const query = `CREATE TABLE delta_codec_float (
id Float64 Codec(Delta, LZ4HC)
) ENGINE MergeTree() ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0, compress_marks = false, compress_primary_key = false, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6779', () => {
    const query = `CREATE TABLE default_codec_float (
id Float64 Codec(LZ4HC)
) ENGINE MergeTree() ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0, compress_marks = false, compress_primary_key = false, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6780', () => {
    const query = `CREATE TABLE delta_codec_string (
id Float64 Codec(Delta, LZ4)
) ENGINE MergeTree() ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0, compress_marks = false, compress_primary_key = false, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6781', () => {
    const query = `CREATE TABLE default_codec_string (
id Float64 Codec(LZ4)
) ENGINE MergeTree() ORDER BY tuple() SETTINGS min_bytes_for_wide_part = 0, compress_marks = false, compress_primary_key = false, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6782', () => {
    const query = `CREATE TABLE compression_codec( id UInt64 CODEC(DEFLATE_QPL),
data String CODEC(DEFLATE_QPL),
ddd Date CODEC(DEFLATE_QPL),
ddd32 Date32 CODEC(DEFLATE_QPL),
somenum Float64 CODEC(DEFLATE_QPL),
somestr FixedString(3) CODEC(DEFLATE_QPL),
othernum Int64 CODEC(DEFLATE_QPL),
somearray Array(UInt8) CODEC(DEFLATE_QPL),
somemap Map(String, UInt32) CODEC(DEFLATE_QPL),
sometuple Tuple(UInt16, UInt64) CODEC(DEFLATE_QPL),
) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6783', () => {
    const query = `CREATE TABLE compression_codec_log( id UInt64 CODEC(LZ4),
data String CODEC(ZSTD),
ddd Date CODEC(NONE),
somenum Float64 CODEC(ZSTD(2)),
somestr FixedString(3) CODEC(LZ4HC(7)),
othernum Int64 CODEC(Delta)
) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6784', () => {
    const query = `CREATE TABLE compression_codec_multiple_log ( id UInt64 CODEC(LZ4, ZSTD, NONE, LZ4HC, Delta(4)),
data String CODEC(ZSTD(2), NONE, Delta(2), LZ4HC, LZ4, LZ4, Delta(8)),
ddd Date CODEC(NONE, NONE, NONE, Delta(1), LZ4, ZSTD, LZ4HC, LZ4HC),
somenum Float64 CODEC(Delta(4), LZ4, LZ4, ZSTD(2), LZ4HC(5), ZSTD(3), ZSTD)
) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6785', () => {
    const query = `CREATE TABLE compression_codec_tiny_log( id UInt64 CODEC(LZ4),
data String CODEC(ZSTD),
ddd Date CODEC(NONE),
somenum Float64 CODEC(ZSTD(2)),
somestr FixedString(3) CODEC(LZ4HC(7)),
othernum Int64 CODEC(Delta)
) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6786', () => {
    const query = `CREATE TABLE compression_codec_multiple_tiny_log ( id UInt64 CODEC(LZ4, ZSTD, NONE, LZ4HC, Delta(4)),
data String CODEC(ZSTD(2), NONE, Delta(2), LZ4HC, LZ4, LZ4, Delta(8)),
ddd Date CODEC(NONE, NONE, NONE, Delta(1), LZ4, ZSTD, LZ4HC, LZ4HC),
somenum Float64 CODEC(Delta(4), LZ4, LZ4, ZSTD(2), LZ4HC(5), ZSTD(3), ZSTD)
) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6787', () => {
    const query = `CREATE TABLE compression_codec( id UInt64 CODEC(LZ4),
data String CODEC(ZSTD),
ddd Date CODEC(NONE),
somenum Float64 CODEC(ZSTD(2)),
somestr FixedString(3) CODEC(LZ4HC(7)),
othernum Int64 CODEC(Delta)
) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6788', () => {
    const query = `CREATE TABLE bad_codec(id UInt64 CODEC(adssadads)) ENGINE = MergeTree() order by tuple(); -- { serverError UNKNOWN_CODEC } CREATE TABLE too_many_params(id UInt64 CODEC(ZSTD(2,3,4,5))) ENGINE = MergeTree() order by tuple(); -- { serverError ILLEGAL_SYNTAX_FOR_CODEC_TYPE }
CREATE TABLE params_when_no_params(id UInt64 CODEC(LZ4(1))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError DATA_TYPE_CANNOT_HAVE_ARGUMENTS }
CREATE TABLE codec_multiple_direct_specification_1(id UInt64 CODEC(MULTIPLE(LZ4, ZSTD))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError UNKNOWN_CODEC }
CREATE TABLE codec_multiple_direct_specification_2(id UInt64 CODEC(multiple(LZ4, ZSTD))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError UNKNOWN_CODEC }
CREATE TABLE delta_bad_params1(id UInt64 CODEC(Delta(3))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_CODEC_PARAMETER }
CREATE TABLE delta_bad_params2(id UInt64 CODEC(Delta(16))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_CODEC_PARAMETER }
DROP TABLE IF EXISTS bad_codec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6789', () => {
    const query = `CREATE TABLE compression_codec_multiple ( id UInt64 CODEC(LZ4, ZSTD, NONE, LZ4HC, Delta(4)),
data String CODEC(ZSTD(2), NONE, Delta(2), LZ4HC, LZ4, LZ4, Delta(8)),
ddd Date CODEC(NONE, NONE, NONE, Delta(1), LZ4, ZSTD, LZ4HC, LZ4HC),
somenum Float64 CODEC(Delta(4), LZ4, LZ4, ZSTD(2), LZ4HC(5), ZSTD(3), ZSTD)
) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6790', () => {
    const query = `CREATE TABLE compression_codec_multiple_more_types ( id Decimal128(13) CODEC(ZSTD, LZ4, ZSTD, ZSTD, Delta(2), Delta(4), Delta(1), LZ4HC),
data FixedString(12) CODEC(ZSTD, ZSTD, Delta, Delta, Delta, NONE, NONE, NONE, LZ4HC),
ddd Nested (age UInt8, Name String) CODEC(LZ4, LZ4HC, NONE, NONE, NONE, ZSTD, Delta(8))
) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError BAD_ARGUMENTS }
CREATE TABLE compression_codec_multiple_more_types (
id Decimal128(13) CODEC(ZSTD, LZ4, ZSTD, ZSTD, Delta(2), Delta(4), Delta(1), LZ4HC),
data FixedString(12) CODEC(ZSTD, ZSTD, NONE, NONE, NONE, LZ4HC),
ddd Nested (age UInt8, Name String) CODEC(LZ4, LZ4HC, NONE, NONE, NONE, ZSTD, Delta(8))
) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6791', () => {
    const query = `CREATE TABLE compression_codec_multiple_with_key ( somedate Date CODEC(ZSTD, ZSTD, ZSTD(12), LZ4HC(12), Delta, Delta),
id UInt64 CODEC(LZ4, ZSTD, Delta, NONE, LZ4HC, Delta),
data String CODEC(ZSTD(2), Delta(1), LZ4HC, NONE, LZ4, LZ4)
) ENGINE = MergeTree() PARTITION BY somedate ORDER BY id SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6792', () => {
    const query = `CREATE TABLE test_default_delta( id UInt64 CODEC(Delta),
data String CODEC(Delta(1)),
somedate Date CODEC(Delta),
somenum Float64 CODEC(Delta),
somestr FixedString(3) CODEC(Delta(1)),
othernum Int64 CODEC(Delta),
yetothernum Float32 CODEC(Delta),
ddd Nested (age UInt8, Name String, OName String, BName String) CODEC(Delta(1))
) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6793', () => {
    const query = `CREATE TABLE alter_compression_codec ( somedate Date CODEC(LZ4),
id UInt64 CODEC(NONE)
) ENGINE = MergeTree() PARTITION BY somedate ORDER BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6794', () => {
    const query = `CREATE TABLE alter_bad_codec ( somedate Date CODEC(LZ4),
id UInt64 CODEC(NONE)
) ENGINE = MergeTree() ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6795', () => {
    const query = `CREATE TABLE large_alter_table_00804 ( somedate Date CODEC(ZSTD, ZSTD, ZSTD(12), LZ4HC(12)),
id UInt64 CODEC(LZ4, ZSTD, NONE, LZ4HC),
data String CODEC(ZSTD(2), LZ4HC, NONE, LZ4, LZ4)
) ENGINE = MergeTree() PARTITION BY somedate ORDER BY id SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi', min_bytes_for_wide_part = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6796', () => {
    const query = `CREATE TABLE store_of_hash_00804 (hash UInt64) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6797', () => {
    const query = `CREATE TABLE datetime_table (
t DateTime('UTC'),
name String,
value UInt32
) ENGINE = MergeTree()
ORDER BY (t, name)
	PARTITION BY value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6798', () => {
    const query = `CREATE TABLE datetime_table (
t DateTime('UTC'),
name String,
value UInt32
) ENGINE = MergeTree()
ORDER BY (t, name)
	PARTITION BY toStartOfDay(t);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6799', () => {
    const query = `CREATE TABLE datetime_table (
t DateTime('UTC'),
name String,
value UInt32
) ENGINE = MergeTree()
ORDER BY (t, name)
PARTITION BY (name, toUInt32(toUnixTimestamp(t)/(60*60*24)) );`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6800', () => {
    const query = `CREATE TABLE join_any_inner (s String, x Array(UInt8), k UInt64) ENGINE = Join(ANY, INNER, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6801', () => {
    const query = `CREATE TABLE join_any_left (s String, x Array(UInt8), k UInt64) ENGINE = Join(ANY, LEFT, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6802', () => {
    const query = `CREATE TABLE join_all_inner (s String, x Array(UInt8), k UInt64) ENGINE = Join(ALL, INNER, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6803', () => {
    const query = `CREATE TABLE join_all_left (s String, x Array(UInt8), k UInt64) ENGINE = Join(ALL, LEFT, k);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6804', () => {
    const query = `CREATE TABLE join_any_left_null (s String, k UInt64) ENGINE = Join(ANY, LEFT, k) SETTINGS join_use_nulls = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6805', () => {
    const query = `CREATE TABLE join_string_key (s String, x Array(UInt8), k UInt64) ENGINE = Join(ANY, LEFT, s);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6806', () => {
    const query = `CREATE TABLE {CLICKHOUSE_DATABASE:Identifier}.join_test (a UInt8, b UInt8) Engine = Join(ANY, LEFT, a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6807', () => {
    const query = `create table lc_00800_1 (names Array(LowCardinality(String))) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6808', () => {
    const query = `CREATE TABLE low_cardinality (d Date, x UInt32, s LowCardinality(String)) ENGINE = MergeTree(d, x, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6809', () => {
    const query = `CREATE TABLE low_cardinality_all (d Date, x UInt32, s LowCardinality(String)) ENGINE = Distributed(test_shard_localhost, currentDatabase(), low_cardinality, sipHash64(s));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6810', () => {
    const query = `create table lc_00800_2 (val LowCardinality(UInt64)) engine = MergeTree order by val;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6811', () => {
    const query = `CREATE TABLE table1 (
dt Date,
id Int32,
arr Array(LowCardinality(String))
) ENGINE = MergeTree PARTITION BY toMonday(dt)
ORDER BY (dt, id) SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6812', () => {
    const query = `CREATE TABLE table2 (
dt Date,
id Int32,
arr Array(LowCardinality(String))
) ENGINE = MergeTree PARTITION BY toMonday(dt)
ORDER BY (dt, id) SETTINGS index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6813', () => {
    const query = `CREATE TABLE bm (amount float, business_dttm DateTime) engine Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6814', () => {
    const query = `CREATE TABLE source_table ( date Date,
datetime DateTime,
zoneId UInt64,
test1 ALIAS zoneId == 1,
test2 DEFAULT zoneId * 3,
test3 MATERIALIZED zoneId * 5
) ENGINE = MergeTree(date, (date, zoneId), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6815', () => {
    const query = `CREATE MATERIALIZED VIEW table_view ENGINE = MergeTree(date, (date, zoneId), 8192)
AS SELECT
date,
zoneId,
test1,
test2,
test3
FROM source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6816', () => {
    const query = `create table td engine = Distributed(test_shard_localhost, currentDatabase(), 't') as t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6817', () => {
    const query = `CREATE TABLE defaults (
x UInt32,
y UInt32,
a DEFAULT x + y,
b Float32 DEFAULT round(log(1 + x + y), 5),
c UInt32 DEFAULT 42,
e MATERIALIZED x + y,
f ALIAS x + y
) ENGINE = MergeTree ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6818', () => {
    const query = `CREATE TABLE auto_assign_enum (x enum('a', 'b')) ENGINE=MergeTree() order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6819', () => {
    const query = `CREATE TABLE auto_assign_enum1 (x enum('a' = -1000, 'b')) ENGINE=MergeTree() order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6820', () => {
    const query = `CREATE TABLE auto_assign_enum2 (x enum('a' = -1000, 'b', 'c' = -99)) ENGINE=MergeTree() order by x; -- { serverError UNEXPECTED_AST_STRUCTURE } CREATE TABLE auto_assign_enum2 (x Enum8(
'00' = -128 ,'01','02','03','04','05','06','07','08','09','0A','0B','0C','0D','0E','0F',
'10','11','12','13','14','15','16','17','18','19','1A','1B','1C','1D','1E','1F',
'20','21','22','23','24','25','26','27','28','29','2A','2B','2C','2D','2E','2F',
'30','31','32','33','34','35','36','37','38','39','3A','3B','3C','3D','3E','3F',
'40','41','42','43','44','45','46','47','48','49','4A','4B','4C','4D','4E','4F',
'50','51','52','53','54','55','56','57','58','59','5A','5B','5C','5D','5E','5F',
'60','61','62','63','64','65','66','67','68','69','6A','6B','6C','6D','6E','6F',
'70','71','72','73','74','75','76','77','78','79','7A','7B','7C','7D','7E','7F'
)) ENGINE=MergeTree() order by x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6821', () => {
    const query = `CREATE TABLE auto_assign_enum3 (x enum('a', 'b', NULL)) ENGINE=MergeTree() order by x; -- { serverError UNEXPECTED_AST_STRUCTURE } DROP TABLE auto_assign_enum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6822', () => {
    const query = `CREATE TABLE size_hint (s Array(String)) ENGINE = MergeTree ORDER BY tuple() SETTINGS index_granularity = 1000, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6823', () => {
    const query = `CREATE TABLE old_style(d Date, x UInt32) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00754/old_style', 'r1', d, x, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6824', () => {
    const query = `CREATE TABLE summing_r1(x UInt32, y UInt32, val UInt32) ENGINE ReplicatedSummingMergeTree('/clickhouse/tables/{database}/test_00754/summing', 'r1') ORDER BY (x, y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6825', () => {
    const query = `CREATE TABLE summing_r2(x UInt32, y UInt32, val UInt32) ENGINE ReplicatedSummingMergeTree('/clickhouse/tables/{database}/test_00754/summing', 'r2') ORDER BY (x, y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6826', () => {
    const query = `CREATE TABLE no_order(a UInt32, b UInt32) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6827', () => {
    const query = `CREATE TABLE old_style(d Date, x UInt32) ENGINE MergeTree(d, x, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6828', () => {
    const query = `CREATE TABLE summing(x UInt32, y UInt32, val UInt32) ENGINE SummingMergeTree ORDER BY (x, y);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6829', () => {
    const query = `CREATE TABLE alter_column(x UInt32, y Int32) ENGINE MergeTree PARTITION BY x ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6830', () => {
    const query = `CREATE TABLE check_system_tables (
name1 UInt8,
name2 UInt8,
name3 UInt8
) ENGINE = MergeTree()
ORDER BY name1
PARTITION BY name2
SAMPLE BY name1
SETTINGS min_bytes_for_wide_part = 0, compress_marks = false, compress_primary_key = false, ratio_of_defaults_for_sparse_serialization = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6831', () => {
    const query = `CREATE TABLE check_system_tables (
date Date,
value String,
version UInt64,
sign Int8
) ENGINE = VersionedCollapsingMergeTree(sign, version)
PARTITION BY date
ORDER BY date
SETTINGS compress_marks=false, compress_primary_key=false;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6832', () => {
    const query = `CREATE TABLE check_system_tables (
Event Date,
UserId UInt32,
Counter UInt32
) ENGINE = MergeTree(Event, intHash32(UserId), (Counter, Event, intHash32(UserId)), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6833', () => {
    const query = `CREATE TABLE check_system_tables (key UInt8) ENGINE = TinyLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6834', () => {
    const query = `CREATE TABLE check_system_tables (key UInt8) ENGINE = Log();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6835', () => {
    const query = `CREATE TABLE check_system_tables (key UInt8) ENGINE = StripeLog();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6836', () => {
    const query = `CREATE TABLE check_system_tables (key UInt16) ENGINE = Memory();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6837', () => {
    const query = `CREATE TABLE check_system_tables_null (key UInt16) ENGINE = Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6838', () => {
    const query = `CREATE TABLE check_system_tables (key UInt16) ENGINE = Buffer( currentDatabase(),
check_system_tables_null,
2,
0,   100, 
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6839', () => {
    const query = `CREATE TABLE check_system_tables Engine=Set() AS SELECT * FROM numbers(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6840', () => {
    const query = `CREATE TABLE check_system_tables Engine=Join(ANY, LEFT, number) AS SELECT * FROM numbers(50);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6841', () => {
    const query = `CREATE MATERIALIZED VIEW check_system_tables_mv ENGINE = MergeTree() ORDER BY name2 AS SELECT name1, name2, name3 FROM check_system_tables;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6842', () => {
    const query = `CREATE TABLE datetime (d DateTime('UTC')) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6843', () => {
    const query = `CREATE TABLE check_system_tables_null (key Int) Engine=Null();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6844', () => {
    const query = `CREATE TABLE check_system_tables AS check_system_tables_null Engine=Distributed(test_shard_localhost, currentDatabase(), check_system_tables_null);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6845', () => {
    const query = `CREATE TABLE check_comments (
column_name1 UInt8 DEFAULT 1 COMMENT 'comment',
column_name2 UInt8 COMMENT 'non default comment'
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_00753/comments', 'r1')
ORDER BY column_name1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6846', () => {
    const query = `CREATE TABLE dst_00753 (x UInt64, y UInt64) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6847', () => {
    const query = `CREATE TABLE buffer_00753 (x UInt64, y UInt64) ENGINE = Buffer(currentDatabase(), dst_00753, 1, 99999, 99999, 1, 1, 99999, 99999);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6848', () => {
    const query = `CREATE TABLE alter_attach (x UInt64, p UInt8) ENGINE = MergeTree ORDER BY tuple() PARTITION BY p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6849', () => {
    const query = `CREATE TABLE detach_all_no_partition (x UInt64, p UInt8) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6850', () => {
    const query = `CREATE TABLE replicated_table_detach_all1 ( id UInt64,
Data String
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/test_00753_{database}/replicated_table_detach_all', '1') ORDER BY id PARTITION BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6851', () => {
    const query = `CREATE TABLE replicated_table_detach_all2 ( id UInt64,
Data String
) ENGINE = ReplicatedMergeTree('/clickhouse/tables/test_00753_{database}/replicated_table_detach_all', '2') ORDER BY id PARTITION BY id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6852', () => {
    const query = `CREATE TABLE partition_all (x UInt64, p UInt8, q UInt8) ENGINE = MergeTree ORDER BY tuple() PARTITION BY p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6853', () => {
    const query = `CREATE TABLE partition_all2 (x UInt64, p UInt8, q UInt8) ENGINE = MergeTree ORDER BY tuple() PARTITION BY p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6854', () => {
    const query = `CREATE TABLE partition_attach_all (x UInt64, p UInt8) ENGINE = MergeTree ORDER BY x PARTITION BY p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6855', () => {
    const query = `CREATE TABLE replicated_partition_attach_all (x UInt64, p UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/test_00753_{database}/replicated_partition_attach_all', '1')
ORDER BY x
PARTITION BY p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6856', () => {
    const query = `create table lc_perm (val UInt32, str LowCardinality(String)) engine = MergeTree order by val;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6857', () => {
    const query = `CREATE TABLE radacct ( radacctid UInt64, f3gppchargingid Nullable(String), f3gppggsnaddress Nullable(String), f3gppggsnmccmnc Nullable(String), f3gppgprsqos Nullable(String), f3gppimeisv Nullable(String), f3gppimsi Nullable(UInt64), f3gppimsimccmnc Nullable(String), f3gpploci Nullable(String), f3gppnsapi Nullable(String), f3gpprattype Nullable(String), f3gppsgsnaddress Nullable(String), f3gppsgsnmccmnc Nullable(String), acctdelaytime Nullable(UInt32), acctinputoctets Nullable(UInt64), acctinputpackets Nullable(UInt64), acctoutputoctets Nullable(UInt64), acctoutputpackets Nullable(UInt64), acctsessionid String, acctstatustype Nullable(String), acctuniqueid String, calledstationid Nullable(String), callingstationid Nullable(String), framedipaddress Nullable(String), nasidentifier Nullable(String), nasipaddress Nullable(String), acctstarttime Nullable(DateTime), acctstoptime Nullable(DateTime), acctsessiontime Nullable(UInt32), acctterminatecause Nullable(String), acctstartdelay Nullable(UInt32), acctstopdelay Nullable(UInt32), connectinfo_start Nullable(String), connectinfo_stop Nullable(String), timestamp DateTime, username Nullable(String), realm Nullable(String), f3gppimsi_int UInt64, f3gppsgsnaddress_int Nullable(UInt32), timestamp_date Date, tac Nullable(String), mnc Nullable(String), tadig LowCardinality(String), country LowCardinality(String), tadig_op_ip Nullable(String) DEFAULT CAST('TADIG NOT FOUND', 'Nullable(String)'), mcc Nullable(UInt16) MATERIALIZED toUInt16OrNull(substring(f3gppsgsnmccmnc, 1, 6))) ENGINE = MergeTree(timestamp_date, (timestamp, radacctid, acctuniqueid), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6858', () => {
    const query = `create materialized view mv_traffic_by_tadig15min Engine=AggregatingMergeTree partition by tadig order by (ts,tadig) populate as select toStartOfFifteenMinutes(timestamp) ts,toDayOfWeek(timestamp) dow, tadig, sumState(acctinputoctets+acctoutputoctets) traffic_bytes,maxState(timestamp) last_stop, minState(radacctid) min_radacctid,maxState(radacctid) max_radacctid from radacct where acctstatustype='Stop' and acctinputoctets+acctoutputoctets > 0 group by tadig,ts,dow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6859', () => {
    const query = `create table lc_00752 (str LowCardinality(String)) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6860', () => {
    const query = `CREATE MATERIALIZED VIEW lc_mv_00752 ENGINE = AggregatingMergeTree() ORDER BY tuple() populate AS SELECT substring(str, 1, 1) as letter, min(length(str)) AS min_len, max(length(str)) AS max_len FROM lc_00752 GROUP BY substring(str, 1, 1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6861', () => {
    const query = `CREATE TABLE lc_left_aj (
str Array(LowCardinality(String)), 
null_str Array(LowCardinality(Nullable(String))), 
val Array(LowCardinality(Float64)), 
null_val Array(LowCardinality(Nullable(Float64)))
)
ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6862', () => {
    const query = `create table lc_lambda (arr Array(LowCardinality(UInt64))) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6863', () => {
    const query = `CREATE TABLE test_array(resources_host Array(LowCardinality(String))) ENGINE = MergeTree() ORDER BY (resources_host);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6864', () => {
    const query = `CREATE TABLE low_null_float (a LowCardinality(Nullable(Float64))) ENGINE = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6865', () => {
    const query = `CREATE TABLE t_00751 (
date Date,
platform Enum8('a' = 0, 'b' = 1),
app Enum8('a' = 0, 'b' = 1)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6866', () => {
    const query = `CREATE TABLE u_00751 (app Enum8('a' = 0, 'b' = 1)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6867', () => {
    const query = `CREATE TABLE v_00751 (platform Enum8('a' = 0, 'b' = 1)) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6868', () => {
    const query = `CREATE MATERIALIZED VIEW t_mv_00751 ENGINE = MergeTree ORDER BY date AS SELECT date, platform, app FROM t_00751
WHERE app = (SELECT min(app) from u_00751) AND platform = (SELECT (SELECT min(platform) from v_00751));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6869', () => {
    const query = `CREATE TABLE sample_merge_tree (dt DateTime, x UInt64) ENGINE = MergeTree PARTITION BY toYYYYMMDD(dt) ORDER BY x SETTINGS min_merge_bytes_to_use_direct_io=1, index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6870', () => {
    const query = `CREATE TABLE left_table(APIKey Int32, SomeColumn String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6871', () => {
    const query = `CREATE TABLE right_table(APIKey Int32, EventValueForPostback String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6872', () => {
    const query = `CREATE TABLE arraytest ( created_date Date DEFAULT toDate(created_at), created_at DateTime DEFAULT now(), strings Array(String) DEFAULT emptyArrayString()) ENGINE = MergeTree(created_date, cityHash64(created_at), (created_date, cityHash64(created_at)), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6873', () => {
    const query = `CREATE TABLE time_table(timecol DateTime, value Int32) ENGINE = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6874', () => {
    const query = `CREATE TABLE dt(tkey Int32) ENGINE = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6875', () => {
    const query = `CREATE TABLE testx(t Int32, a UInt8) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6876', () => {
    const query = `CREATE TEMPORARY TABLE test_00744 (
x Int32
);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6877', () => {
    const query = `CREATE TABLE installation_stats (message String, info String, message_type String) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6878', () => {
    const query = `CREATE TEMPORARY TABLE Accounts (AccountID UInt64, Currency String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6879', () => {
    const query = `CREATE TEMPORARY TABLE commententry1 (created_date Date, link_id String, subreddit String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6880', () => {
    const query = `CREATE DATABASE IF NOT EXISTS test_00741; -- foo DROP DATABASE test_00741;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6881', () => {
    const query = `CREATE TABLE perf (site String, user_id UInt64, z Float64) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6882', () => {
    const query = `CREATE VIEW test_00740 AS SELECT 1 AS N;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6883', () => {
    const query = `CREATE VIEW test_view_00740 AS SELECT * FROM test_00740;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6884', () => {
    const query = `CREATE VIEW test_nested_view_00740 AS SELECT * FROM (SELECT * FROM test_00740);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6885', () => {
    const query = `CREATE VIEW test_joined_view_00740 AS SELECT *, N AS x FROM test_00740 ANY LEFT JOIN test_00740 USING N;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6886', () => {
    const query = `create temporary table wups (a Array(Nullable(String)));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6887', () => {
    const query = `CREATE TABLE sites (Domain UInt8, \`Users.UserID\` Array(UInt64), \`Users.Dates\` Array(Array(Date))) ENGINE = MergeTree ORDER BY Domain SETTINGS vertical_merge_algorithm_min_rows_to_activate = 0, vertical_merge_algorithm_min_columns_to_activate = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6888', () => {
    const query = `CREATE TABLE IF NOT EXISTS decimal (
A UInt64,
B Decimal128(18),
C Decimal128(18)
) Engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6889', () => {
    const query = `CREATE TABLE IF NOT EXISTS bug(k UInt64, s UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6890', () => {
    const query = `CREATE TABLE or_expr_bug (a UInt64, b UInt64) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6891', () => {
    const query = `CREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum2', '1') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6892', () => {
    const query = `CREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum2', '2') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6893', () => {
    const query = `CREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum1', '1') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6894', () => {
    const query = `CREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum1', '2') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6895', () => {
    const query = `CREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_old_data', '1') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6896', () => {
    const query = `CREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_old_data', '2') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6897', () => {
    const query = `CREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_lost', '1') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6898', () => {
    const query = `CREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_lost', '2') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6899', () => {
    const query = `CREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_lost_alive', '1') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6900', () => {
    const query = `CREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_lost_alive', '2') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6901', () => {
    const query = `CREATE TABLE quorum1(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_have_data', '1') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6902', () => {
    const query = `CREATE TABLE quorum2(x UInt32, y Date) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00732/quorum_have_data', '2') ORDER BY x PARTITION BY y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6903', () => {
    const query = `CREATE TABLE decimal_sum (
date Date,
sum32 Decimal32(4),
sum64 Decimal64(8),
sum128 Decimal128(10)
) Engine = SummingMergeTree(date, (date), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6904', () => {
    const query = `CREATE TABLE unicode(c1 String, c2 String) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6905', () => {
    const query = `create table t1_00729 (id UInt64, val Array(String),nid UInt64, eDate Date)ENGINE = MergeTree(eDate, (id, eDate), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6906', () => {
    const query = `create table t1_00729 (id UInt64, val Array(String),nid UInt64, eDate Date) ENGINE = MergeTree(eDate, (id, eDate), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6907', () => {
    const query = `CREATE TABLE concat_saf_test(x SimpleAggregateFunction(max, Int32)) ENGINE=MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6908', () => {
    const query = `CREATE TABLE concat_nested_test(attrs Nested(k String, v String)) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6909', () => {
    const query = `CREATE TABLE src_00726 (x UInt8) ENGINE = Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6910', () => {
    const query = `CREATE MATERIALIZED VIEW mv1_00726 ENGINE = Memory AS SELECT x FROM src_00726 WHERE x % 2 = 0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6911', () => {
    const query = `CREATE MATERIALIZED VIEW mv2_00726 ENGINE = Memory AS SELECT x FROM src_00726 WHERE x % 2 = 1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6912', () => {
    const query = `create table t_00725_4(a Int64, b Int64, c String) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6913', () => {
    const query = `create table s_00725_4(a Int64, b Int64, c String) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6914', () => {
    const query = `create table t_00725_3(a Int64, b Int64) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6915', () => {
    const query = `create table z_00725_3(c Int64, d Int64, e Int64) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6916', () => {
    const query = `create table t_00725_2(a Int64, b Int64) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6917', () => {
    const query = `create table s_00725_2(a Int64, b Int64) engine = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6918', () => {
    const query = `CREATE TABLE a1(a UInt8, b UInt8) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6919', () => {
    const query = `CREATE TABLE a2(a UInt8, b UInt8) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6920', () => {
    const query = `CREATE TABLE ipv4_test (ipv4_ IPv4) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6921', () => {
    const query = `CREATE TABLE ipv6_test (ipv6_ IPv6) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6922', () => {
    const query = `CREATE TABLE check_query_comment_column (
first_column UInt8 DEFAULT 1 COMMENT 'comment 1',
second_column UInt8 MATERIALIZED first_column COMMENT 'comment 2',
third_column UInt8 ALIAS second_column COMMENT 'comment 3',
fourth_column UInt8 COMMENT 'comment 4',
fifth_column UInt8
) ENGINE = TinyLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6923', () => {
    const query = `CREATE TABLE check_query_comment_column (
first_column UInt8 COMMENT 'comment 1',
second_column UInt8 COMMENT 'comment 2',
third_column UInt8 COMMENT 'comment 3'
) ENGINE = MergeTree()
ORDER BY first_column
PARTITION BY second_column
SAMPLE BY first_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6924', () => {
    const query = `CREATE TEMPORARY TABLE test_00724 (d Date, dt DateTime);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6925', () => {
    const query = `CREATE TABLE one(dummy UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6926', () => {
    const query = `CREATE TABLE byte_identical_r1(x UInt32) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00721/byte_identical', 'r1') ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6927', () => {
    const query = `CREATE TABLE byte_identical_r2(x UInt32) ENGINE ReplicatedMergeTree('/clickhouse/tables/{database}/test_00721/byte_identical', 'r2') ORDER BY x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6928', () => {
    const query = `CREATE TABLE cube(a String, b Int32, s Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6929', () => {
    const query = `create table tab_00718 (a String, b LowCardinality(UInt32)) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6930', () => {
    const query = `CREATE TABLE test_local_1 (date Date, value UInt32) ENGINE = MergeTree(date, date, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6931', () => {
    const query = `CREATE TABLE test_local_2 (date Date, value UInt32) ENGINE = MergeTree(date, date, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6932', () => {
    const query = `CREATE TABLE test_distributed_1 AS test_local_1 ENGINE = Distributed('test_shard_localhost', currentDatabase(), test_local_1, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6933', () => {
    const query = `CREATE TABLE test_distributed_2 AS test_local_2 ENGINE = Distributed('test_shard_localhost', currentDatabase(), test_local_2, rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6934', () => {
    const query = `CREATE TABLE test_s64_local (date Date, value Int64) ENGINE = MergeTree(date, date, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6935', () => {
    const query = `CREATE TABLE test_u64_local (date Date, value UInt64) ENGINE = MergeTree(date, date, 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6936', () => {
    const query = `create table tab_00717 (a String, b LowCardinality(String)) engine = MergeTree order by a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6937', () => {
    const query = `CREATE TABLE test_low_null_float (a LowCardinality(Nullable(Float64))) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6938', () => {
    const query = `CREATE TABLE dist_00717 (a LowCardinality(Nullable(Float64))) ENGINE = Distributed('test_cluster_two_shards_localhost', currentDatabase(), 'test_low_null_float', rand());`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6939', () => {
    const query = `CREATE TABLE default_join1(a Int64, b Int64) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6940', () => {
    const query = `CREATE TABLE default_join2(a Int64, b Int64) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6941', () => {
    const query = `create table rate_test (timestamp UInt32, event UInt32) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6942', () => {
    const query = `create table rate_test2 (timestamp UInt32, event UInt32) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6943', () => {
    const query = `create table rate_test2 (uid UInt32 default 1,timestamp DateTime, event UInt32) engine=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6944', () => {
    const query = `CREATE TABLE test_merge_1(id UInt64) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6945', () => {
    const query = `CREATE TABLE test_merge_2(id UInt64) ENGINE = Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6946', () => {
    const query = `CREATE TEMPORARY TABLE temporary_table AS SELECT * FROM numbers(1) WHERE number NOT IN (SELECT id FROM merge(currentDatabase(), 'test_merge_1|test_merge_2'));`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6947', () => {
    const query = `CREATE TABLE IF NOT EXISTS uuid (
created_at DateTime,
id0 String,
id1 FixedString(36)
)
ENGINE = MergeTree
PARTITION BY toDate(created_at)
ORDER BY (created_at);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6948', () => {
    const query = `CREATE TABLE IF NOT EXISTS uuid (
created_at DateTime,
id0 String,
id1 FixedString(36)
)
ENGINE = MergeTree
PARTITION BY toDate(created_at)
ORDER BY (created_at, id0, id1);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6949', () => {
    const query = `CREATE TABLE collapsing(key String, value String, sign Int8) ENGINE CollapsingMergeTree(sign) ORDER BY key
SETTINGS enable_vertical_merge_algorithm=1,
vertical_merge_algorithm_min_rows_to_activate=0,
vertical_merge_algorithm_min_columns_to_activate=0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6950', () => {
    const query = `create table t_00712_2 (date Date, counter UInt64, sampler UInt64, alias_col alias date + 1) engine = MergeTree(date, intHash32(sampler), (counter, date, intHash32(sampler)), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6951', () => {
    const query = `create table tab_00712_2 (a UInt32, b UInt32) engine = MergeTree order by b % 2 sample by b % 2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6952', () => {
    const query = `CREATE TABLE sample_prewhere (CounterID UInt32, UserID UInt64) ENGINE = MergeTree ORDER BY UserID SAMPLE BY UserID;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6953', () => {
    const query = `create table t_00712_1 (a Int32, b Int32) engine = MergeTree partition by (a,b) order by (a);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6954', () => {
    const query = `CREATE TABLE mergetree_00712 (x UInt8, s String) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6955', () => {
    const query = `create table trepl(d Date,a Int32, b Int32) engine = ReplacingMergeTree(d, (a,b), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6956', () => {
    const query = `create table versioned_collapsing(d Date, x UInt32, sign Int8, version UInt32) engine = VersionedCollapsingMergeTree(d, x, 8192, sign, version);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6957', () => {
    const query = `CREATE TABLE table (a UInt32,  date Date, b UInt64,  c UInt64, str String, d Int8, arr Array(UInt64), arr_alias Array(UInt64) ALIAS arr) ENGINE = MergeTree(date, intHash32(c), (a, date, intHash32(c), b), 8192);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6958', () => {
    const query = `create table prewhere_alias (a Int32, b Int32, c alias a + b) engine = MergeTree order by b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6959', () => {
    const query = `create table tab_00712_1 (a UInt32, b UInt32 alias a + 1, c UInt32) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6960', () => {
    const query = `CREATE TABLE prewhere_alias (a UInt8,  b Int32,  c UInt8 ALIAS a,  d Int64 ALIAS b + 1, e Int32 alias a + b) ENGINE = MergeTree ORDER BY tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6961', () => {
    const query = `CREATE TABLE IF NOT EXISTS partition_id (d Date DEFAULT '2000-01-01', x UInt64) ENGINE = MergeTree(d, x, 5);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6962', () => {
    const query = `CREATE TEMPORARY TABLE test_00707 (x Float32, y Float64, z UInt64, s String);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6963', () => {
    const query = `CREATE TABLE add_aggregate(a UInt32, b UInt32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6964', () => {
    const query = `CREATE TABLE test(a Array(Int64), b Array(Float64), c Array(UInt64)) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6965', () => {
    const query = `create table tab1_copy (a1 Int32, b1 Int32) engine = MergeTree order by a1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6966', () => {
    const query = `CREATE TABLE where_qualified(a UInt32, b UInt8) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6967', () => {
    const query = `create table X (id Int32, x_name String) engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6968', () => {
    const query = `create table Y (id Int32, y_name String) engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6969', () => {
    const query = `CREATE TABLE using1(a UInt8, b UInt8) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6970', () => {
    const query = `CREATE TABLE using2(a UInt8, b UInt8) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6971', () => {
    const query = `create table persons (id String, name String) engine MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6972', () => {
    const query = `create table children (id String, childName String) engine MergeTree order by id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6973', () => {
    const query = `create table X (id Int32, x_a String, x_b Nullable(Int32)) engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6974', () => {
    const query = `create table Y (id Int32, y_a String, y_b Nullable(String)) engine Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6975', () => {
    const query = `CREATE TABLE rollup(a String, b Int32, s Int32) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6976', () => {
    const query = `CREATE TABLE IF NOT EXISTS decimal (
d1 DECIMAL(9, 8),
d2 DECIMAL(18),
d3 DECIMAL
)
ENGINE = MergeTree
PARTITION BY toInt32(d1)
ORDER BY (d2, d3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6977', () => {
    const query = `CREATE TABLE IF NOT EXISTS decimal (
a DEC(9, 2),
b DEC(18, 5),
c DEC(38, 5),
d Nullable(DEC(9, 4)),
e Nullable(DEC(18, 8)),
f Nullable(DEC(38, 8))
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6978', () => {
    const query = `CREATE TABLE IF NOT EXISTS decimal (
d1 DECIMAL(9, 8),
d2 DECIMAL(18, 8),
d3 DECIMAL(38, 8)
)
ENGINE = MergeTree
PARTITION BY toInt32(d1)
ORDER BY (d2, d3);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6979', () => {
    const query = `CREATE TABLE IF NOT EXISTS decimal (
a DEC(9, 3),
b DEC(18, 9),
c DEC(38, 18)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6980', () => {
    const query = `CREATE TABLE decimal (
a Decimal(6, 4),
b Decimal(16, 7),
c Decimal(20, 8)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6981', () => {
    const query = `CREATE TABLE IF NOT EXISTS decimal (
a DECIMAL(9,4) DEFAULT 0,
b DECIMAL(18,4) DEFAULT a / 2,
c DECIMAL(38,4) DEFAULT b / 3,
d MATERIALIZED a + toDecimal32('0.2', 1),
e ALIAS b * 2,
f ALIAS c * 6
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6982', () => {
    const query = `CREATE TABLE decimal (
a Array(Decimal32(3)),
b Array(Decimal64(3)),
c Array(Decimal128(3)),
nest Nested
(
a Decimal(9,2),
b Decimal(18,2),
c Decimal(38,2)
),
tup Tuple(Decimal32(1), Decimal64(1), Decimal128(1))
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6983', () => {
    const query = `CREATE TABLE IF NOT EXISTS decimal (
a DECIMAL(9,0),
b DECIMAL(18,0),
c DECIMAL(38,0),
d DECIMAL(9, 9),
e Decimal64(18),
f Decimal128(38),
g Decimal32(5),
h Decimal64(9),
i Decimal128(18),
j dec(4,2)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6984', () => {
    const query = `CREATE TABLE IF NOT EXISTS decimal (x DECIMAL(10, -2)) ENGINE = Memory; -- { serverError ARGUMENT_OUT_OF_BOUND } CREATE TABLE IF NOT EXISTS decimal (x DECIMAL(10, 15)) ENGINE = Memory; -- { serverError ARGUMENT_OUT_OF_BOUND }
CREATE TABLE IF NOT EXISTS decimal (x DECIMAL(0, 0)) ENGINE = Memory; -- { serverError ARGUMENT_OUT_OF_BOUND }
CREATE TABLE IF NOT EXISTS decimal
(
a DECIMAL(9,0),
b DECIMAL(18,0),
c DECIMAL(38,0),
d DECIMAL(9, 9),
e DECIMAL(18, 18),
f DECIMAL(38, 38),
g Decimal(9, 5),
h decimal(18, 9),
i deciMAL(38, 18),
j DECIMAL(1,0)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6985', () => {
    const query = `CREATE TABLE IF NOT EXISTS decimal (
a DECIMAL(9,0),
b DECIMAL(18,0),
c DECIMAL(38,0),
d DECIMAL(9, 9),
e DEC(18, 18),
f dec(38, 38),
g Decimal(9, 3),
h decimal(18, 9),
i deciMAL(38, 18),
j dec(4, 2),
k NumEriC(23, 4),
l numeric(9, 3),
m NUMEric(18, 9),
n FixED(12, 6),
o fixed(8, 6)
) ENGINE = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6986', () => {
    const query = `CREATE TABLE Issue_2231_Invalid_Nested_Columns_Size ( Date Date,
NestedColumn Nested(
ID    Int32,
Count Int64
)
) Engine = MergeTree 
PARTITION BY tuple()
ORDER BY Date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6987', () => {
    const query = `CREATE TABLE mergetree_00698 (k UInt32, \`n.x\` Array(UInt64), \`n.y\` Array(UInt64)) ENGINE = MergeTree ORDER BY k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6988', () => {
    const query = `CREATE TEMPORARY TABLE t_00693 (x UInt8);`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6989', () => {
    const query = `create table lc_str_0 (str LowCardinality(String)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6990', () => {
    const query = `create table lc_null_str_0 (str LowCardinality(Nullable(String))) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6991', () => {
    const query = `create table lc_int8_0 (val LowCardinality(Int8)) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6992', () => {
    const query = `create table lc_null_int8_0 (val LowCardinality(Nullable(Int8))) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6993', () => {
    const query = `create table lc_fix_str_0 (str LowCardinality(FixedString(2))) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6994', () => {
    const query = `create table lc_null_fix_str_0 (str LowCardinality(Nullable(FixedString(2)))) engine = Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6995', () => {
    const query = `create table lc_str_uuid(str1 String, str2 LowCardinality(String), str3 LowCardinality(String)) ENGINE=Memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6996', () => {
    const query = `create table lc_small_dict (str LowCardinality(String)) engine = MergeTree order by str SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6997', () => {
    const query = `create table lc_big_dict (str LowCardinality(String)) engine = MergeTree order by str SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6998', () => {
    const query = `create table lc_prewhere (key UInt64, val UInt64, str LowCardinality(String), s String) engine = MergeTree order by key settings index_granularity = 8192;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 6999', () => {
    const query = `create table lc_00688 (str LowCardinality(String), val LowCardinality(UInt8)) engine = MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('should pass without errors create: 7000', () => {
    const query = `CREATE TABLE ary_lc_null (i int, v Array(LowCardinality(Nullable(String)))) ENGINE = MergeTree() ORDER BY i ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});
