/* eslint no-useless-escape: "off" */
/* eslint filenames/match-regex: "off" */
/* eslint no-irregular-whitespace: "off" */
import {parseClickHouseQueryWithoutCursor} from '../../index';

test('[DROP] should pass without errors: 1', () => {
    const query = `DROP TABLE IF EXISTS id_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2', () => {
    const query = `DROP TABLE IF EXISTS test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3', () => {
    const query = `drop table if exists test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4', () => {
    const query = `drop table test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5', () => {
    const query = `DROP TABLE IF EXISTS checks SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 6', () => {
    const query = `DROP TABLE checks SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 7', () => {
    const query = `DROP TABLE IF EXISTS ANIMAL SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 8', () => {
    const query = `DROP TABLE ANIMAL SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 9', () => {
    const query = `DROP TABLE IF EXISTS test_table SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 10', () => {
    const query = `DROP TABLE IF EXISTS test_table_for_in SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 11', () => {
    const query = `DROP TABLE test_table SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 12', () => {
    const query = `DROP TABLE test_table_for_in SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 13', () => {
    const query = `DROP TABLE IF EXISTS t0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 14', () => {
    const query = `DROP TABLE IF EXISTS t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 15', () => {
    const query = `DROP TABLE t0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 16', () => {
    const query = `DROP TABLE t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 17', () => {
    const query = `DROP TABLE IF EXISTS a SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 18', () => {
    const query = `DROP TABLE IF EXISTS projections;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 19', () => {
    const query = `DROP TABLE IF EXISTS projections_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 20', () => {
    const query = `DROP TABLE projections;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 21', () => {
    const query = `DROP TABLE projections_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 22', () => {
    const query = `DROP TABLE IF EXISTS rawtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 23', () => {
    const query = `DROP TABLE IF EXISTS raw_to_attributes_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 24', () => {
    const query = `DROP TABLE IF EXISTS attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 25', () => {
    const query = `DROP DICTIONARY IF EXISTS uk_mortgage_rates_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 26', () => {
    const query = `DROP TABLE IF EXISTS uk_mortgage_rates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 27', () => {
    const query = `DROP VIEW IF EXISTS uk_prices_aggs_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 28', () => {
    const query = `DROP TABLE IF EXISTS uk_prices_aggs_dest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 29', () => {
    const query = `DROP VIEW IF EXISTS prices_by_year_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 30', () => {
    const query = `DROP TABLE IF EXISTS prices_by_year_dest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 31', () => {
    const query = `DROP TABLE IF EXISTS uk_price_paid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 32', () => {
    const query = `DROP DICTIONARY uk_mortgage_rates_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 33', () => {
    const query = `DROP TABLE uk_mortgage_rates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 34', () => {
    const query = `DROP VIEW uk_prices_aggs_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 35', () => {
    const query = `DROP TABLE uk_prices_aggs_dest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 36', () => {
    const query = `DROP VIEW prices_by_year_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 37', () => {
    const query = `DROP TABLE prices_by_year_dest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 38', () => {
    const query = `DROP TABLE uk_price_paid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 39', () => {
    const query = `DROP TABLE IF EXISTS t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 40', () => {
    const query = `DROP TABLE IF EXISTS test_new_json_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 41', () => {
    const query = `DROP TABLE test_new_json_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 42', () => {
    const query = `DROP TABLE IF EXISTS t_async_insert_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 43', () => {
    const query = `DROP TABLE t_async_insert_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 44', () => {
    const query = `DROP TABLE IF EXISTS t_local_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 45', () => {
    const query = `DROP TABLE IF EXISTS t_local_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 46', () => {
    const query = `DROP TABLE IF EXISTS t_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 47', () => {
    const query = `DROP TABLE IF EXISTS t_distr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 48', () => {
    const query = `DROP TABLE IF EXISTS view1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 49', () => {
    const query = `DROP TABLE IF EXISTS table1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 50', () => {
    const query = `DROP TABLE view1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 51', () => {
    const query = `DROP TABLE table1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 52', () => {
    const query = `drop table if exists test_left;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 53', () => {
    const query = `drop table if exists test_right;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 54', () => {
    const query = `drop table test_left;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 55', () => {
    const query = `drop table test_right;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 56', () => {
    const query = `DROP TABLE IF EXISTS multi_col_ivt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 57', () => {
    const query = `DROP TABLE tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 58', () => {
    const query = `DROP TABLE IF EXISTS t_async_insert_params;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 59', () => {
    const query = `DROP TABLE t_async_insert_params;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 60', () => {
    const query = `DROP TABLE table_name;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 61', () => {
    const query = `drop table if exists test_json_dynamic_aggregate_functions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 62', () => {
    const query = `drop table if exists null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 63', () => {
    const query = `drop table if exists dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 64', () => {
    const query = `drop table if exists rocksdb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 65', () => {
    const query = `drop table if exists mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 66', () => {
    const query = `drop table if exists rep1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 67', () => {
    const query = `drop table if exists rep2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 68', () => {
    const query = `DROP TABLE IF EXISTS test__fuzz_22 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 69', () => {
    const query = `DROP TABLE IF EXISTS t2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 70', () => {
    const query = `DROP TABLE t2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 71', () => {
    const query = `DROP TABLE test__fuzz_22 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 72', () => {
    const query = `DROP TABLE IF EXISTS test_00808;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 73', () => {
    const query = `DROP TABLE IF EXISTS table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 74', () => {
    const query = `DROP TABLE table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 75', () => {
    const query = `drop table if exists shard_0.dt64_03222;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 76', () => {
    const query = `drop table if exists shard_1.dt64_03222;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 77', () => {
    const query = `drop table if exists distr_03222_dt64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 78', () => {
    const query = `drop database shard_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 79', () => {
    const query = `drop database shard_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 80', () => {
    const query = `DROP TABLE 03221_rmv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 81', () => {
    const query = `DROP TABLE IF EXISTS t_merge_profile_events_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 82', () => {
    const query = `DROP TABLE IF EXISTS t_merge_profile_events_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 83', () => {
    const query = `DROP TABLE IF EXISTS t_merge_profile_events_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 84', () => {
    const query = `DROP TABLE report_metrics_v2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 85', () => {
    const query = `DROP TABLE IF EXISTS example_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 86', () => {
    const query = `DROP DATABASE IF EXISTS example_database;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 87', () => {
    const query = `DROP TABLE IF EXISTS t_primary_index_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 88', () => {
    const query = `DROP TABLE t_primary_index_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 89', () => {
    const query = `DROP FUNCTION IF EXISTS 03215_udf_with_union;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 90', () => {
    const query = `DROP FUNCTION 03215_udf_with_union;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 91', () => {
    const query = `DROP TABLE IF EXISTS test_parquet;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 92', () => {
    const query = `DROP TABLE IF EXISTS test__fuzz_21;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 93', () => {
    const query = `DROP TABLE IF EXISTS a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 94', () => {
    const query = `DROP TABLE IF EXISTS b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 95', () => {
    const query = `DROP TABLE IF EXISTS testnull;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 96', () => {
    const query = `drop table if exists product_groups;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 97', () => {
    const query = `drop table if exists products;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 98', () => {
    const query = `drop table product_groups;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 99', () => {
    const query = `drop table products;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 100', () => {
    const query = `drop table t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 101', () => {
    const query = `DROP TABLE IF EXISTS source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 102', () => {
    const query = `DROP TABLE IF EXISTS test_agg_variant;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 103', () => {
    const query = `DROP TABLE test_agg_variant;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 104', () => {
    const query = `DROP TABLE source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 105', () => {
    const query = `DROP TABLE IF EXISTS user_country;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 106', () => {
    const query = `DROP TABLE IF EXISTS user_transactions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 107', () => {
    const query = `DROP TABLE user_country;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 108', () => {
    const query = `DROP TABLE user_transactions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 109', () => {
    const query = `drop table if exists date_table_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 110', () => {
    const query = `drop view if exists date_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 111', () => {
    const query = `drop table if exists date32_table_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 112', () => {
    const query = `drop view if exists date32_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 113', () => {
    const query = `drop table if exists uuid_table_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 114', () => {
    const query = `drop view if exists uuid_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 115', () => {
    const query = `drop view if exists date_pv2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 116', () => {
    const query = `drop table if exists ipv4_table_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 117', () => {
    const query = `drop view if exists ipv4_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 118', () => {
    const query = `drop view date_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 119', () => {
    const query = `drop view date_pv2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 120', () => {
    const query = `drop view date32_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 121', () => {
    const query = `drop view uuid_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 122', () => {
    const query = `drop view ipv4_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 123', () => {
    const query = `drop table date_table_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 124', () => {
    const query = `drop table date32_table_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 125', () => {
    const query = `drop table uuid_table_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 126', () => {
    const query = `drop table ipv4_table_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 127', () => {
    const query = `DROP TABLE IF EXISTS order_by_all SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 128', () => {
    const query = `DROP TABLE order_by_all SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 129', () => {
    const query = `DROP TABLE IF EXISTS t_03209 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 130', () => {
    const query = `DROP TABLE t_03209 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 131', () => {
    const query = `DROP TABLE IF EXISTS mem;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 132', () => {
    const query = `DROP TABLE IF EXISTS mem2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 133', () => {
    const query = `DROP TABLE IF EXISTS mem3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 134', () => {
    const query = `DROP TABLE IF EXISTS mem4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 135', () => {
    const query = `DROP TABLE IF EXISTS grouparray;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 136', () => {
    const query = `DROP TABLE IF EXISTS grouparray_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 137', () => {
    const query = `DROP TABLE IF EXISTS realtimedrep;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 138', () => {
    const query = `DROP TABLE IF EXISTS realtimedistributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 139', () => {
    const query = `DROP TABLE IF EXISTS realtimebuff__fuzz_19;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 140', () => {
    const query = `DROP TABLE IF EXISTS realtimebuff__fuzz_20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 141', () => {
    const query = `DROP DATABASE rdb1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 142', () => {
    const query = `DROP DATABASE rdb2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 143', () => {
    const query = `DROP TABLE IF EXISTS tp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 144', () => {
    const query = `DROP TABLE tp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 145', () => {
    const query = `DROP TABLE IF EXISTS t1__fuzz_26;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 146', () => {
    const query = `DROP TABLE t1__fuzz_26;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 147', () => {
    const query = `DROP TABLE dict_03204;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 148', () => {
    const query = `DROP TABLE IF EXISTS t_c3oollc8r;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 149', () => {
    const query = `DROP TABLE t_c3oollc8r;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 150', () => {
    const query = `DROP TABLE IF EXISTS bugcheck1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 151', () => {
    const query = `DROP TABLE bugcheck1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 152', () => {
    const query = `DROP TABLE IF EXISTS t_missed_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 153', () => {
    const query = `DROP TABLE t_missed_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 154', () => {
    const query = `DROP TABLE IF EXISTS t_03203;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 155', () => {
    const query = `DROP TABLE IF EXISTS t_subcolumns_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 156', () => {
    const query = `DROP TABLE t_subcolumns_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 157', () => {
    const query = `DROP TABLE IF EXISTS table_with_materialized;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 158', () => {
    const query = `DROP TABLE table_with_materialized;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 159', () => {
    const query = `DROP TABLE IF EXISTS 03199_fixedstring_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 160', () => {
    const query = `DROP TABLE 03199_fixedstring_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 161', () => {
    const query = `DROP TABLE IF EXISTS test_numbers__fuzz_29;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 162', () => {
    const query = `DROP TABLE test_numbers__fuzz_29;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 163', () => {
    const query = `DROP TABLE IF EXISTS test_dynamic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 164', () => {
    const query = `DROP TABLE test_dynamic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 165', () => {
    const query = `DROP TABLE IF EXISTS my_events;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 166', () => {
    const query = `DROP TABLE IF EXISTS test_serialization;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 167', () => {
    const query = `DROP TABLE IF EXISTS t_bloom_filter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 168', () => {
    const query = `DROP TABLE IF EXISTS test_projection_deduplicate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 169', () => {
    const query = `DROP TABLE test_projection_deduplicate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 170', () => {
    const query = `DROP TABLE IF EXISTS 03173_single_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 171', () => {
    const query = `DROP TABLE IF EXISTS 03173_nested_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 172', () => {
    const query = `DROP TABLE IF EXISTS 03173_nested_function_lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 173', () => {
    const query = `DROP TABLE IF EXISTS 03173_nested_function_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 174', () => {
    const query = `DROP TABLE IF EXISTS 03173_nested_function_lc_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 175', () => {
    const query = `DROP TABLE IF EXISTS 03173_nonsafe_cast;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 176', () => {
    const query = `DROP TABLE IF EXISTS 03173_multiple_partition_cols;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 177', () => {
    const query = `DROP TABLE IF EXISTS 03173_base_data_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 178', () => {
    const query = `DROP TABLE IF EXISTS 03173_low_cardinality_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 179', () => {
    const query = `DROP TABLE IF EXISTS 03173_nullable_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 180', () => {
    const query = `DROP TABLE IF EXISTS 03173_lc_nullable_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 181', () => {
    const query = `DROP TABLE IF EXISTS 03173_date_parsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 182', () => {
    const query = `DROP TABLE IF EXISTS 03173_nested_date_parsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 183', () => {
    const query = `DROP TABLE IF EXISTS 03173_empty_transform;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 184', () => {
    const query = `drop table if exists test_qualify;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 185', () => {
    const query = `DROP DICTIONARY IF EXISTS test_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 186', () => {
    const query = `DROP TABLE IF EXISTS view_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 187', () => {
    const query = `DROP VIEW IF EXISTS view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 188', () => {
    const query = `DROP VIEW view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 189', () => {
    const query = `DROP TABLE view_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 190', () => {
    const query = `DROP USER IF EXISTS 03172_user_invalid_bcrypt_hash;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 191', () => {
    const query = `DROP TABLE IF EXISTS test_hilbert_encode_hilbert_encode;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 192', () => {
    const query = `DROP TABLE test_hilbert_encode;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 193', () => {
    const query = `DROP TABLE IF EXISTS t_func_to_subcolumns_map_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 194', () => {
    const query = `DROP TABLE t_func_to_subcolumns_map_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 195', () => {
    const query = `DROP TABLE IF EXISTS t_func_to_subcolumns_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 196', () => {
    const query = `DROP TABLE t_func_to_subcolumns_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 197', () => {
    const query = `DROP TABLE IF EXISTS t_func_to_subcolumns_use_nulls;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 198', () => {
    const query = `DROP TABLE t_func_to_subcolumns_use_nulls;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 199', () => {
    const query = `DROP DICTIONARY IF EXISTS direct_dictionary_simple_key_simple_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 200', () => {
    const query = `DROP TABLE IF EXISTS simple_key_simple_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 201', () => {
    const query = `DROP TABLE IF EXISTS column_modify_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 202', () => {
    const query = `DROP TABLE IF EXISTS complex_key_simple_attributes_source_short_circuit_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 203', () => {
    const query = `DROP DICTIONARY IF EXISTS cache_dictionary_complex_key_simple_attributes_short_circuit;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 204', () => {
    const query = `DROP TABLE IF EXISTS t_read_in_order_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 205', () => {
    const query = `DROP TABLE t_read_in_order_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 206', () => {
    const query = `DROP TABLE IF EXISTS t_read_in_order_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 207', () => {
    const query = `DROP TABLE t_read_in_order_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 208', () => {
    const query = `DROP DATABASE IF EXISTS 03147_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 209', () => {
    const query = `DROP TABLE IF EXISTS mv_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 210', () => {
    const query = `DROP TABLE IF EXISTS null_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 211', () => {
    const query = `DROP TABLE IF EXISTS t_ind_merge_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 212', () => {
    const query = `DROP TABLE t_ind_merge_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 213', () => {
    const query = `DROP TABLE IF EXISTS t_ind_merge_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 214', () => {
    const query = `DROP TABLE t_ind_merge_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 215', () => {
    const query = `DROP TABLE IF EXISTS tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 216', () => {
    const query = `DROP TABLE IF EXISTS 03165_token_bf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 217', () => {
    const query = `DROP TABLE IF EXISTS 03165_token_ft;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 218', () => {
    const query = `DROP TABLE IF EXISTS ids;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 219', () => {
    const query = `DROP TABLE IF EXISTS data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 220', () => {
    const query = `DROP TABLE IF EXISTS data2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 221', () => {
    const query = `DROP TABLE IF EXISTS atable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 222', () => {
    const query = `DROP TABLE atable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 223', () => {
    const query = `DROP TABLE IF EXISTS t_compact_bytes_s3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 224', () => {
    const query = `DROP TABLE IF EXISTS range_filter_custom_range_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 225', () => {
    const query = `DROP TABLE range_filter_custom_range_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 226', () => {
    const query = `DROP TABLE IF EXISTS range_filter_custom_range_test_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 227', () => {
    const query = `DROP TABLE range_filter_custom_range_test_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 228', () => {
    const query = `DROP TABLE IF EXISTS range_filter_custom_range_test_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 229', () => {
    const query = `DROP TABLE range_filter_custom_range_test_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 230', () => {
    const query = `DROP TABLE IF EXISTS 03164_users;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 231', () => {
    const query = `DROP TABLE IF EXISTS 03164_multi_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 232', () => {
    const query = `DROP TABLE IF EXISTS t_skip_index_insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 233', () => {
    const query = `DROP TABLE IF EXISTS src_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 234', () => {
    const query = `DROP TABLE IF EXISTS copied_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 235', () => {
    const query = `DROP TABLE src_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 236', () => {
    const query = `DROP TABLE copied_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 237', () => {
    const query = `DROP TABLE IF EXISTS users_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 238', () => {
    const query = `DROP TABLE users_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 239', () => {
    const query = `DROP TABLE users_wide;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 240', () => {
    const query = `DROP TABLE IF EXISTS base_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 241', () => {
    const query = `DROP TABLE IF EXISTS target_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 242', () => {
    const query = `DROP TABLE IF EXISTS mv_from_base_to_target;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 243', () => {
    const query = `DROP TABLE IF EXISTS mv_with_storage;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 244', () => {
    const query = `DROP TABLE IF EXISTS other_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 245', () => {
    const query = `DROP TABLE IF EXISTS other_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 246', () => {
    const query = `DROP TABLE IF EXISTS 03161_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 247', () => {
    const query = `DROP TABLE IF EXISTS 03161_reproducer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 248', () => {
    const query = `DROP TABLE IF EXISTS test_deep_nested_json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 249', () => {
    const query = `DROP TABLE test_deep_nested_json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 250', () => {
    const query = `DROP TABLE IF EXISTS t_map_lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 251', () => {
    const query = `DROP TABLE t_map_lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 252', () => {
    const query = `DROP TEMPORARY TABLE test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 253', () => {
    const query = `DROP TABLE IF EXISTS test_groupConcat;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 254', () => {
    const query = `DROP TABLE test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 255', () => {
    const query = `DROP TABLE IF EXISTS test_null_empty;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 256', () => {
    const query = `DROP TABLE test_null_empty;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 257', () => {
    const query = `DROP TABLE IF EXISTS users;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 258', () => {
    const query = `DROP TABLE IF EXISTS users2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 259', () => {
    const query = `DROP TABLE users;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 260', () => {
    const query = `DROP TABLE users2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 261', () => {
    const query = `DROP TABLE IF EXISTS test_max_types;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 262', () => {
    const query = `DROP TABLE IF EXISTS test_nested_dynamic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 263', () => {
    const query = `DROP TABLE IF EXISTS test_rapid_schema;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 264', () => {
    const query = `DROP TABLE test_max_types;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 265', () => {
    const query = `DROP TABLE test_nested_dynamic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 266', () => {
    const query = `DROP TABLE test_rapid_schema;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 267', () => {
    const query = `DROP TABLE IF EXISTS tab_v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 268', () => {
    const query = `drop table if exists to_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 269', () => {
    const query = `DROP VIEW IF EXISTS test_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 270', () => {
    const query = `DROP VIEW test_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 271', () => {
    const query = `DROP TABLE IF EXISTS test_grouping_sets_predicate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 272', () => {
    const query = `DROP VIEW IF EXISTS dummy_rmv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 273', () => {
    const query = `DROP TABLE null_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 274', () => {
    const query = `DROP VIEW dummy_rmv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 275', () => {
    const query = `DROP TABLE to_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 276', () => {
    const query = `DROP TABLE IF EXISTS events0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 277', () => {
    const query = `DROP TABLE IF EXISTS probe0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 278', () => {
    const query = `DROP DICTIONARY IF EXISTS 03148_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 279', () => {
    const query = `DROP TABLE IF EXISTS t_mut_virtuals;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 280', () => {
    const query = `DROP TABLE t_mut_virtuals;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 281', () => {
    const query = `DROP TABLE IF EXISTS events;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 282', () => {
    const query = `drop table if exists table_pv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 283', () => {
    const query = `DROP TABLE IF EXISTS t_index_3146;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 284', () => {
    const query = `DROP TABLE t_index_3146;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 285', () => {
    const query = `DROP TABLE IF EXISTS probes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 286', () => {
    const query = `DROP TABLE IF EXISTS test_03143;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 287', () => {
    const query = `DROP DICTIONARY IF EXISTS d2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 288', () => {
    const query = `DROP DICTIONARY d2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 289', () => {
    const query = `DROP TABLE IF EXISTS tmp_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 290', () => {
    const query = `DROP TABLE IF EXISTS tmp_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 291', () => {
    const query = `DROP TABLE IF EXISTS build;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 292', () => {
    const query = `DROP TABLE IF EXISTS skewed_probe;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 293', () => {
    const query = `DROP TABLE error_win_func;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 294', () => {
    const query = `DROP TABLE IF EXISTS test_table_comment;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 295', () => {
    const query = `DROP TABLE test_table_comment;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 296', () => {
    const query = `DROP TABLE IF EXISTS t3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 297', () => {
    const query = `DROP TABLE IF EXISTS t4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 298', () => {
    const query = `DROP TABLE IF EXISTS test1_00395;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 299', () => {
    const query = `DROP TABLE test1_00395;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 300', () => {
    const query = `drop table if exists hilbert_numbers_03131;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 301', () => {
    const query = `drop table if exists hilbert_numbers_1_03131;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 302', () => {
    const query = `DROP TABLE IF EXISTS test_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 303', () => {
    const query = `DROP TABLE IF EXISTS test_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 304', () => {
    const query = `DROP TABLE test_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 305', () => {
    const query = `DROP TABLE test_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 306', () => {
    const query = `DROP TABLE IF EXISTS small;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 307', () => {
    const query = `DROP TABLE small;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 308', () => {
    const query = `DROP TABLE IF EXISTS test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 309', () => {
    const query = `DROP TABLE IF EXISTS t_index_lazy_load;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 310', () => {
    const query = `DROP TABLE t_index_lazy_load;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 311', () => {
    const query = `DROP TABLE IF EXISTS combinator_argMin_table_r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 312', () => {
    const query = `DROP TABLE IF EXISTS combinator_argMin_table_r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 313', () => {
    const query = `DROP TABLE IF EXISTS argmax_comb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 314', () => {
    const query = `drop table if exists test_subquery;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 315', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 316', () => {
    const query = `DROP TABLE IF EXISTS my_first_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 317', () => {
    const query = `DROP TABLE IF EXISTS event;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 318', () => {
    const query = `DROP TABLE IF EXISTS user;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 319', () => {
    const query = `DROP TABLE IF EXISTS mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 320', () => {
    const query = `DROP TABLE IF EXISTS test_table_01;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 321', () => {
    const query = `DROP TABLE IF EXISTS test_table_02;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 322', () => {
    const query = `DROP TABLE IF EXISTS test_view_01;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 323', () => {
    const query = `DROP TABLE IF EXISTS loans;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 324', () => {
    const query = `DROP DATABASE IF EXISTS {CLICKHOUSE_DATABASE:Identifier};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 325', () => {
    const query = `DROP DATABASE IF EXISTS db1_03101;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 326', () => {
    const query = `DROP DATABASE IF EXISTS db2_03101;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 327', () => {
    const query = `DROP TABLE IF EXISTS clickhouse_alias_issue_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 328', () => {
    const query = `DROP TABLE IF EXISTS clickhouse_alias_issue_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 329', () => {
    const query = `DROP TABLE IF EXISTS test_03096;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 330', () => {
    const query = `DROP TABLE IF EXISTS mt1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 331', () => {
    const query = `DROP TABLE IF EXISTS mt2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 332', () => {
    const query = `DROP TABLE IF EXISTS t1__fuzz_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 333', () => {
    const query = `DROP TABLE IF EXISTS left_join__fuzz_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 334', () => {
    const query = `DROP TABLE t1__fuzz_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 335', () => {
    const query = `DROP TABLE left_join__fuzz_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 336', () => {
    const query = `DROP TABLE IF EXISTS users_03094;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 337', () => {
    const query = `DROP TABLE IF EXISTS test_03093;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 338', () => {
    const query = `DROP DATABASE IF EXISTS {CLICKHOUSE_DATABASE_1:Identifier};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 339', () => {
    const query = `DROP TABLE IF EXISTS fact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 340', () => {
    const query = `DROP TABLE IF EXISTS animals;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 341', () => {
    const query = `DROP TABLE IF EXISTS colors;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 342', () => {
    const query = `DROP TABLE IF EXISTS ab_12_aaa;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 343', () => {
    const query = `DROP TABLE IF EXISTS ab_12_bbb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 344', () => {
    const query = `DROP TABLE IF EXISTS nested_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 345', () => {
    const query = `DROP TABLE IF EXISTS join_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 346', () => {
    const query = `DROP TABLE IF EXISTS repl_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 347', () => {
    const query = `drop table if exists fill_ex;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 348', () => {
    const query = `DROP TABLE IF EXISTS parent;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 349', () => {
    const query = `DROP TABLE IF EXISTS join_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 350', () => {
    const query = `DROP TABLE IF EXISTS join_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 351', () => {
    const query = `DROP TABLE IF EXISTS 03040_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 352', () => {
    const query = `DROP TABLE IF EXISTS graph;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 353', () => {
    const query = `drop table if exists test;;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 354', () => {
    const query = `DROP TABLE IF EXISTS move_partition_to_oneself;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 355', () => {
    const query = `DROP TABLE IF EXISTS 03038_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 356', () => {
    const query = `DROP TABLE IF EXISTS broken_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 357', () => {
    const query = `DROP TABLE IF EXISTS broken_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 358', () => {
    const query = `DROP TABLE IF EXISTS tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 359', () => {
    const query = `DROP TABLE IF EXISTS department;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 360', () => {
    const query = `DROP VIEW IF EXISTS test_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 361', () => {
    const query = `DROP VIEW IF EXISTS test_mv_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 362', () => {
    const query = `DROP TABLE IF EXISTS alias_bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 363', () => {
    const query = `DROP TABLE IF EXISTS alias_bug_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 364', () => {
    const query = `DROP TABLE tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 365', () => {
    const query = `DROP TABLE IF EXISTS department__fuzz_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 366', () => {
    const query = `DROP TABLE IF EXISTS department__fuzz_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 367', () => {
    const query = `DROP TABLE department__fuzz_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 368', () => {
    const query = `DROP TABLE department__fuzz_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 369', () => {
    const query = `DROP TABLE IF EXISTS 03033_example_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 370', () => {
    const query = `DROP TABLE IF EXISTS override_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 371', () => {
    const query = `DROP TABLE IF EXISTS test_tmp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 372', () => {
    const query = `DROP TABLE IF EXISTS dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 373', () => {
    const query = `DROP TABLE IF EXISTS view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 374', () => {
    const query = `DROP TABLE test_tmp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 375', () => {
    const query = `DROP TABLE dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 376', () => {
    const query = `DROP TABLE view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 377', () => {
    const query = `DROP TABLE IF EXISTS t_lightweight_deletes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 378', () => {
    const query = `DROP TABLE t_lightweight_deletes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 379', () => {
    const query = `DROP FUNCTION IF EXISTS test_func_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 380', () => {
    const query = `DROP TABLE IF EXISTS t4_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 381', () => {
    const query = `DROP TABLE IF EXISTS account_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 382', () => {
    const query = `DROP TABLE IF EXISTS dt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 383', () => {
    const query = `DROP TABLE IF EXISTS base;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 384', () => {
    const query = `DROP TABLE IF EXISTS copy_without_comment;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 385', () => {
    const query = `DROP TABLE IF EXISTS copy_with_comment;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 386', () => {
    const query = `DROP TABLE IF EXISTS memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 387', () => {
    const query = `DROP TABLE memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 388', () => {
    const query = `drop table if exists data_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 389', () => {
    const query = `drop table if exists data_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 390', () => {
    const query = `drop table if exists ephemeral;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 391', () => {
    const query = `drop table if exists dist_in;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 392', () => {
    const query = `drop table if exists dist_out;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 393', () => {
    const query = `DROP TABLE mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 394', () => {
    const query = `drop table data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 395', () => {
    const query = `drop table data_rep;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 396', () => {
    const query = `DROP TABLE IF EXISTS test_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 397', () => {
    const query = `DROP TABLE test_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 398', () => {
    const query = `drop table test_memory settings ignore_drop_queries_probability=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 399', () => {
    const query = `drop table test_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 400', () => {
    const query = `drop table test_merge_tree settings ignore_drop_queries_probability=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 401', () => {
    const query = `drop table test_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 402', () => {
    const query = `drop table test_join settings ignore_drop_queries_probability=1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 403', () => {
    const query = `drop table test_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 404', () => {
    const query = `DROP TABLE IF EXISTS v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 405', () => {
    const query = `DROP TABLE v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 406', () => {
    const query = `DROP DICTIONARY IF EXISTS range_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 407', () => {
    const query = `DROP TABLE IF EXISTS range_dictionary_nullable_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 408', () => {
    const query = `DROP TABLE IF EXISTS t_nullable_keys_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 409', () => {
    const query = `DROP TABLE t_nullable_keys_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 410', () => {
    const query = `DROP TABLE IF EXISTS t_nullable_keys_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 411', () => {
    const query = `DROP TABLE t_nullable_keys_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 412', () => {
    const query = `DROP TABLE IF EXISTS t_nullable_keys_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 413', () => {
    const query = `DROP TABLE t_nullable_keys_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 414', () => {
    const query = `DROP TABLE IF EXISTS t_nullable_keys_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 415', () => {
    const query = `DROP TABLE t_nullable_keys_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 416', () => {
    const query = `DROP TABLE IF EXISTS t_nullable_keys_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 417', () => {
    const query = `DROP TABLE t_nullable_keys_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 418', () => {
    const query = `DROP TABLE IF EXISTS t_nullable_keys_6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 419', () => {
    const query = `DROP TABLE t_nullable_keys_6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 420', () => {
    const query = `DROP TABLE IF EXISTS t_uniq_exact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 421', () => {
    const query = `DROP TABLE t_uniq_exact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 422', () => {
    const query = `DROP TABLE IF EXISTS t_optimize_equal_ranges;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 423', () => {
    const query = `DROP TABLE t_optimize_equal_ranges;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 424', () => {
    const query = `DROP TABLE IF EXISTS src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 425', () => {
    const query = `DROP TABLE IF EXISTS dst_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 426', () => {
    const query = `DROP TABLE IF EXISTS mv_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 427', () => {
    const query = `DROP TABLE src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 428', () => {
    const query = `DROP TABLE mv_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 429', () => {
    const query = `DROP TABLE dst_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 430', () => {
    const query = `DROP TABLE IF EXISTS partitioned_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 431', () => {
    const query = `DROP TABLE partitioned_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 432', () => {
    const query = `DROP TABLE mv_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 433', () => {
    const query = `DROP TABLE IF EXISTS mv_first;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 434', () => {
    const query = `DROP TABLE IF EXISTS mv_second;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 435', () => {
    const query = `DROP TABLE mv_second;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 436', () => {
    const query = `DROP TABLE mv_first;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 437', () => {
    const query = `DROP POLICY IF EXISTS url_na_log_policy0 ON url_na_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 438', () => {
    const query = `DROP TABLE IF EXISTS url_na_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 439', () => {
    const query = `DROP POLICY url_na_log_policy0 ON url_na_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 440', () => {
    const query = `DROP TABLE url_na_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 441', () => {
    const query = `DROP TABLE IF EXISTS numbers_1e6__fuzz_34;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 442', () => {
    const query = `DROP TABLE IF EXISTS numbers_1e6__fuzz_33;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 443', () => {
    const query = `DROP TABLE numbers_1e6__fuzz_34;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 444', () => {
    const query = `DROP TABLE numbers_1e6__fuzz_33;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 445', () => {
    const query = `DROP TABLE IF EXISTS 02985_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 446', () => {
    const query = `DROP TABLE IF EXISTS t_length_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 447', () => {
    const query = `DROP TABLE IF EXISTS t_length_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 448', () => {
    const query = `DROP TABLE t_length_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 449', () => {
    const query = `DROP TABLE t_length_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 450', () => {
    const query = `DROP TABLE IF EXISTS t_sample_factor;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 451', () => {
    const query = `DROP TABLE t_sample_factor;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 452', () => {
    const query = `DROP TABLE mv_03002;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 453', () => {
    const query = `DROP TABLE table_03002;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 454', () => {
    const query = `DROP TABLE t__fuzz_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 455', () => {
    const query = `drop table if exists test_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 456', () => {
    const query = `DROP TABLE IF EXISTS landing SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 457', () => {
    const query = `DROP TABLE IF EXISTS landing_dist SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 458', () => {
    const query = `DROP TABLE IF EXISTS ds SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 459', () => {
    const query = `DROP TABLE IF EXISTS t_data_version;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 460', () => {
    const query = `DROP TABLE t_data_version;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 461', () => {
    const query = `DROP TABLE IF EXISTS lwd_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 462', () => {
    const query = `DROP TABLE IF EXISTS t_block_offset;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 463', () => {
    const query = `DROP TABLE t_block_offset;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 464', () => {
    const query = `drop table if exists x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 465', () => {
    const query = `drop table x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 466', () => {
    const query = `DROP TABLE IF EXISTS 03000_traverse_shadow_system_data_path_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 467', () => {
    const query = `DROP TABLE IF EXISTS skip_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 468', () => {
    const query = `DROP TABLE skip_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 469', () => {
    const query = `drop table if exists target1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 470', () => {
    const query = `drop table if exists target2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 471', () => {
    const query = `drop table if exists v_heavy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 472', () => {
    const query = `drop table if exists t_table_select;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 473', () => {
    const query = `DROP TABLE IF EXISTS visits_order;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 474', () => {
    const query = `DROP TABLE IF EXISTS visits_order_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 475', () => {
    const query = `DROP TABLE IF EXISTS too_many_parts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 476', () => {
    const query = `DROP TABLE IF EXISTS test_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 477', () => {
    const query = `DROP TABLE test_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 478', () => {
    const query = `DROP TABLE IF EXISTS test_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 479', () => {
    const query = `DROP TABLE test_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 480', () => {
    const query = `DROP TABLE IF EXISTS test_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 481', () => {
    const query = `DROP TABLE test_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 482', () => {
    const query = `DROP TABLE IF EXISTS test_6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 483', () => {
    const query = `DROP TABLE test_6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 484', () => {
    const query = `DROP TABLE IF EXISTS test_9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 485', () => {
    const query = `DROP TABLE test_9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 486', () => {
    const query = `DROP TABLE b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 487', () => {
    const query = `DROP TABLE table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 488', () => {
    const query = `DROP TABLE IF EXISTS tags;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 489', () => {
    const query = `DROP TABLE IF EXISTS test_temporary_table_02989;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 490', () => {
    const query = `DROP TABLE test_temporary_table_02989;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 491', () => {
    const query = `DROP TABLE IF EXISTS test_table_replicated;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 492', () => {
    const query = `DROP TABLE test_table_replicated;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 493', () => {
    const query = `DROP TABLE IF EXISTS test_table_replicated_second;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 494', () => {
    const query = `DROP TABLE test_table_replicated_second;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 495', () => {
    const query = `DROP TABLE IF EXISTS tabc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 496', () => {
    const query = `DROP TABLE IF EXISTS ta;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 497', () => {
    const query = `DROP TABLE IF EXISTS tb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 498', () => {
    const query = `DROP TABLE IF EXISTS tc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 499', () => {
    const query = `DROP DATABASE IF EXISTS 02988_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 500', () => {
    const query = `DROP TABLE IF EXISTS test_empty;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 501', () => {
    const query = `DROP TABLE test_empty;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 502', () => {
    const query = `DROP TABLE IF EXISTS test_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 503', () => {
    const query = `DROP TABLE test_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 504', () => {
    const query = `DROP TABLE IF EXISTS test_nested_arrays;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 505', () => {
    const query = `DROP TABLE test_nested_arrays;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 506', () => {
    const query = `DROP TABLE IF EXISTS test_numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 507', () => {
    const query = `DROP TABLE test_numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 508', () => {
    const query = `DROP TABLE IF EXISTS test_big_numbers_sep;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 509', () => {
    const query = `DROP TABLE test_big_numbers_sep;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 510', () => {
    const query = `DROP TABLE IF EXISTS test_big_numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 511', () => {
    const query = `DROP TABLE test_big_numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 512', () => {
    const query = `DROP TABLE IF EXISTS test_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 513', () => {
    const query = `DROP TABLE test_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 514', () => {
    const query = `DROP TABLE IF EXISTS test_big_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 515', () => {
    const query = `DROP TABLE test_big_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 516', () => {
    const query = `DROP TABLE IF EXISTS test_datetime;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 517', () => {
    const query = `DROP TABLE test_datetime;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 518', () => {
    const query = `DROP TABLE IF EXISTS test_date32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 519', () => {
    const query = `DROP TABLE test_date32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 520', () => {
    const query = `DROP TABLE IF EXISTS test_date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 521', () => {
    const query = `DROP TABLE test_date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 522', () => {
    const query = `DROP TABLE IF EXISTS sharded_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 523', () => {
    const query = `DROP TABLE IF EXISTS t_index_agg_func;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 524', () => {
    const query = `DROP TABLE t_index_agg_func;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 525', () => {
    const query = `DROP TABLE IF EXISTS shared_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 526', () => {
    const query = `DROP TABLE IF EXISTS distributed_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 527', () => {
    const query = `DROP TABLE distributed_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 528', () => {
    const query = `DROP TABLE shared_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 529', () => {
    const query = `DROP DATABASE IF EXISTS shard_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 530', () => {
    const query = `DROP DATABASE IF EXISTS shard_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 531', () => {
    const query = `DROP TABLE t_distr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 532', () => {
    const query = `DROP TABLE IF EXISTS test_unexpected_cluster;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 533', () => {
    const query = `DROP TABLE IF EXISTS mv_indexes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 534', () => {
    const query = `DROP TABLE IF EXISTS mv_no_indexes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 535', () => {
    const query = `DROP TABLE IF EXISTS mv_projections;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 536', () => {
    const query = `DROP TABLE IF EXISTS mv_primary_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 537', () => {
    const query = `DROP TABLE IF EXISTS mv_primary_key_from_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 538', () => {
    const query = `DROP TABLE IF EXISTS t_vertical_merge_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 539', () => {
    const query = `DROP TABLE IF EXISTS table_with_some_columns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 540', () => {
    const query = `DROP TABLE IF EXISTS pr_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 541', () => {
    const query = `DROP TABLE IF EXISTS pr_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 542', () => {
    const query = `DROP TABLE IF EXISTS numbers_1e6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 543', () => {
    const query = `DROP TABLE IF EXISTS landing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 544', () => {
    const query = `DROP TABLE IF EXISTS ds_1_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 545', () => {
    const query = `DROP VIEW IF EXISTS mv_1_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 546', () => {
    const query = `DROP VIEW IF EXISTS mv_1_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 547', () => {
    const query = `DROP TABLE landing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 548', () => {
    const query = `DROP TABLE ds_1_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 549', () => {
    const query = `DROP VIEW mv_1_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 550', () => {
    const query = `DROP VIEW mv_1_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 551', () => {
    const query = `DROP TABLE IF EXISTS ds_1_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 552', () => {
    const query = `DROP TABLE IF EXISTS ds_2_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 553', () => {
    const query = `DROP VIEW IF EXISTS mv_2_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 554', () => {
    const query = `DROP VIEW IF EXISTS mv_2_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 555', () => {
    const query = `DROP TABLE IF EXISTS ds_3_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 556', () => {
    const query = `DROP VIEW IF EXISTS mv_3_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 557', () => {
    const query = `DROP TABLE ds_1_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 558', () => {
    const query = `DROP TABLE ds_2_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 559', () => {
    const query = `DROP VIEW mv_2_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 560', () => {
    const query = `DROP VIEW mv_2_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 561', () => {
    const query = `DROP TABLE ds_3_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 562', () => {
    const query = `DROP VIEW mv_3_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 563', () => {
    const query = `drop table if exists tlb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 564', () => {
    const query = `DROP TABLE tlb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 565', () => {
    const query = `DROP TABLE IF EXISTS t_func_to_subcolumns_variant;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 566', () => {
    const query = `DROP TABLE t_func_to_subcolumns_variant;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 567', () => {
    const query = `DROP TABLE IF EXISTS t_func_to_subcolumns_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 568', () => {
    const query = `DROP TABLE t_func_to_subcolumns_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 569', () => {
    const query = `DROP TABLE IF EXISTS t_column_names;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 570', () => {
    const query = `DROP TABLE t_column_names;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 571', () => {
    const query = `DROP TABLE IF EXISTS t_subcolumns_if;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 572', () => {
    const query = `DROP TABLE IF EXISTS im;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 573', () => {
    const query = `DROP TABLE IF EXISTS ts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 574', () => {
    const query = `DROP TABLE IF EXISTS async_insert_mt_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 575', () => {
    const query = `DROP TABLE IF EXISTS t1__fuzz_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 576', () => {
    const query = `DROP TABLE IF EXISTS t0__fuzz_29;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 577', () => {
    const query = `DROP TABLE t1__fuzz_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 578', () => {
    const query = `DROP TABLE t0__fuzz_29;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 579', () => {
    const query = `DROP TABLE IF EXISTS f32_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 580', () => {
    const query = `DROP TABLE f32_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 581', () => {
    const query = `drop table a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 582', () => {
    const query = `DROP TABLE IF EXISTS r;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 583', () => {
    const query = `DROP TABLE IF EXISTS test_parallel_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 584', () => {
    const query = `DROP TABLE test_parallel_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 585', () => {
    const query = `DROP DATABASE IF EXISTS 02961_db1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 586', () => {
    const query = `DROP DATABASE IF EXISTS 02961_db2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 587', () => {
    const query = `DROP TABLE 02961_db1.02961_tb1, 02961_db1.02961_tb2, 02961_db2.02961_tb3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 588', () => {
    const query = `DROP TABLE 02961_db2.02961_tb4, 02961_db1.02961_tb1, 02961_db2.02961_tb5; -- { serverError UNKNOWN_TABLE } SELECT '-- check which tables exist in 02961_db1';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 589', () => {
    const query = `DROP TABLE IF EXISTS tab1, tab2, tab3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 590', () => {
    const query = `DROP TABLE IF EMPTY tab1, tab2, tab3; -- { serverError TABLE_NOT_EMPTY } SELECT 'Test when deletion of not empty table fails';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 591', () => {
    const query = `DROP DATABASE IF EXISTS test2960_valid_database_engine;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 592', () => {
    const query = `DROP FUNCTION IF EXISTS f1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 593', () => {
    const query = `DROP TABLE hit;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 594', () => {
    const query = `DROP TABLE IF EXISTS spark_bar_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 595', () => {
    const query = `drop view if exists slow_view1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 596', () => {
    const query = `DROP TABLE IF EXISTS 02952_disjunction_optimization;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 597', () => {
    const query = `DROP TABLE 02952_disjunction_optimization;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 598', () => {
    const query = `DROP TABLE part_log_bytes_uncompressed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 599', () => {
    const query = `DROP TABLE IF EXISTS dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 600', () => {
    const query = `DROP DICTIONARY IF EXISTS flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 601', () => {
    const query = `DROP DICTIONARY flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 602', () => {
    const query = `DROP DICTIONARY IF EXISTS hashed_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 603', () => {
    const query = `DROP DICTIONARY hashed_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 604', () => {
    const query = `DROP DICTIONARY IF EXISTS hashed_array_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 605', () => {
    const query = `DROP TABLE IF EXISTS range_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 606', () => {
    const query = `DROP DICTIONARY IF EXISTS range_hashed_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 607', () => {
    const query = `DROP DICTIONARY range_hashed_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 608', () => {
    const query = `DROP TABLE range_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 609', () => {
    const query = `DROP DICTIONARY IF EXISTS cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 610', () => {
    const query = `DROP DICTIONARY cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 611', () => {
    const query = `DROP DICTIONARY IF EXISTS direct_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 612', () => {
    const query = `DROP DICTIONARY direct_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 613', () => {
    const query = `DROP TABLE dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 614', () => {
    const query = `DROP TABLE IF EXISTS ip_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 615', () => {
    const query = `DROP DICTIONARY IF EXISTS ip_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 616', () => {
    const query = `DROP DICTIONARY ip_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 617', () => {
    const query = `DROP TABLE IF EXISTS polygon_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 618', () => {
    const query = `DROP DICTIONARY IF EXISTS polygon_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 619', () => {
    const query = `DROP TABLE IF EXISTS points;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 620', () => {
    const query = `DROP TABLE points;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 621', () => {
    const query = `DROP DICTIONARY polygon_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 622', () => {
    const query = `DROP TABLE polygon_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 623', () => {
    const query = `DROP TABLE IF EXISTS regexp_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 624', () => {
    const query = `DROP DICTIONARY IF EXISTS regexp_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 625', () => {
    const query = `DROP TABLE regexp_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 626', () => {
    const query = `DROP TABLE IF EXISTS ttl_group_by_bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 627', () => {
    const query = `DROP TABLE IF EXISTS merge_tree_in_subqueries;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 628', () => {
    const query = `DROP TABLE IF EXISTS t_merge_tree_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 629', () => {
    const query = `DROP TABLE t_merge_tree_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 630', () => {
    const query = `DROP TABLE IF EXISTS 02947_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 631', () => {
    const query = `DROP TABLE IF EXISTS 02947_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 632', () => {
    const query = `DROP TABLE 02947_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 633', () => {
    const query = `DROP TABLE 02947_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 634', () => {
    const query = `DROP TABLE IF EXISTS t1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 635', () => {
    const query = `DROP TABLE IF EXISTS t2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 636', () => {
    const query = `DROP TABLE IF EXISTS t3 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 637', () => {
    const query = `DROP TABLE t2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 638', () => {
    const query = `DROP TABLE t3 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 639', () => {
    const query = `DROP TABLE test_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 640', () => {
    const query = `DROP TABLE IF EXISTS literal_alias_misclassification;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 641', () => {
    const query = `DROP TABLE IF EXISTS tokenbf_v1_hasany_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 642', () => {
    const query = `DROP TABLE IF EXISTS ngrambf_v1_hasany_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 643', () => {
    const query = `DROP TABLE tokenbf_v1_hasany_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 644', () => {
    const query = `DROP TABLE ngrambf_v1_hasany_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 645', () => {
    const query = `DROP TABLE IF EXISTS tokenbf_tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 646', () => {
    const query = `DROP TABLE IF EXISTS ngrambf_tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 647', () => {
    const query = `DROP TABLE tokenbf_tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 648', () => {
    const query = `DROP TABLE ngrambf_tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 649', () => {
    const query = `DROP TABLE IF EXISTS order_by_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 650', () => {
    const query = `DROP TABLE order_by_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 651', () => {
    const query = `DROP TABLE IF EXISTS test_group_by_with_rollup_order;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 652', () => {
    const query = `DROP TABLE IF EXISTS regex_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 653', () => {
    const query = `DROP VIEW test_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 654', () => {
    const query = `DROP TABLE IF EXISTS t_proj_external;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 655', () => {
    const query = `DROP TABLE IF EXISTS data_sparse_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 656', () => {
    const query = `DROP TABLE IF EXISTS test_parallel_replicas_settings;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 657', () => {
    const query = `DROP TABLE test_parallel_replicas_settings;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 658', () => {
    const query = `DROP TABLE IF EXISTS format_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 659', () => {
    const query = `DROP TABLE format_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 660', () => {
    const query = `DROP TABLE IF EXISTS test_max_mt_projections_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 661', () => {
    const query = `DROP TABLE IF EXISTS test_max_mt_projections_create;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 662', () => {
    const query = `DROP VIEW parse_mv_eph;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 663', () => {
    const query = `DROP TABLE parsed_eph;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 664', () => {
    const query = `DROP TABLE raw;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 665', () => {
    const query = `DROP TABLE t_temp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 666', () => {
    const query = `DROP TABLE test_max_size_drop SETTINGS max_table_size_to_drop = 1; -- { serverError TABLE_SIZE_EXCEEDS_MAX_DROP_SIZE_LIMIT } DROP TABLE test_max_size_drop;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 667', () => {
    const query = `DROP TABLE test_max_size_drop;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 668', () => {
    const query = `drop table if exists from_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 669', () => {
    const query = `drop table from_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 670', () => {
    const query = `drop view mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 671', () => {
    const query = `DROP TABLE IF EXISTS t_lwd_mutations;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 672', () => {
    const query = `DROP TABLE IF EXISTS t_materialize_delete;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 673', () => {
    const query = `DROP TABLE t_materialize_delete;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 674', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_02931;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 675', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 676', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 677', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 678', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 679', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 680', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 681', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 682', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 683', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 684', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 685', () => {
    const query = `DROP DATABASE IF EXISTS test_max_num_to_warn_11;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 686', () => {
    const query = `DROP TABLE IF EXISTS pipe;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 687', () => {
    const query = `DROP TABLE IF EXISTS dest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 688', () => {
    const query = `DROP TABLE IF EXISTS 02919_test_table_noarg;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 689', () => {
    const query = `DROP TABLE IF EXISTS 02919_test_table_valid_args;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 690', () => {
    const query = `DROP TABLE IF EXISTS 02919_test_table_reuse_args;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 691', () => {
    const query = `DROP TABLE IF EXISTS 02919_test_table_invalid_col_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 692', () => {
    const query = `DROP TABLE IF EXISTS 02919_test_multi_col;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 693', () => {
    const query = `DROP TABLE IF EXISTS crash_02919;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 694', () => {
    const query = `DROP TABLE crash_02919;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 695', () => {
    const query = `DROP TABLE IF EXISTS t_hardware_error NO DELAY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 696', () => {
    const query = `DROP TABLE t_hardware_error NO DELAY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 697', () => {
    const query = `DROP TABLE IF EXISTS alter_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 698', () => {
    const query = `DROP DICTIONARY IF EXISTS id_value_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 699', () => {
    const query = `DROP TABLE IF EXISTS source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 700', () => {
    const query = `DROP TABLE source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 701', () => {
    const query = `DROP TABLE IF EXISTS 02918_parallel_replicas;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 702', () => {
    const query = `DROP TABLE 02918_parallel_replicas;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 703', () => {
    const query = `DROP TABLE IF EXISTS merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 704', () => {
    const query = `DROP TABLE IF EXISTS mt3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 705', () => {
    const query = `DROP NAMED COLLECTION IF EXISTS 02918_json_fuzzer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 706', () => {
    const query = `DROP TABLE IF EXISTS 02918_table_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 707', () => {
    const query = `DROP TABLE IF EXISTS 02918_table_obj1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 708', () => {
    const query = `DROP TABLE IF EXISTS 02918_table_obj2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 709', () => {
    const query = `DROP TABLE alter_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 710', () => {
    const query = `DROP VIEW IF EXISTS v1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 711', () => {
    const query = `DROP VIEW v1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 712', () => {
    const query = `drop table tableIn;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 713', () => {
    const query = `drop table tableOut;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 714', () => {
    const query = `DROP TABLE IF EXISTS table_02916;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 715', () => {
    const query = `DROP TABLE IF EXISTS table_02916_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 716', () => {
    const query = `DROP TABLE table_02916_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 717', () => {
    const query = `DROP TABLE table_02916;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 718', () => {
    const query = `drop table if exists shard_0.from_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 719', () => {
    const query = `drop table if exists shard_1.from_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 720', () => {
    const query = `drop table if exists shard_0.to;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 721', () => {
    const query = `drop table if exists shard_1.to;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 722', () => {
    const query = `DROP TABLE IF EXISTS nested_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 723', () => {
    const query = `DROP TABLE nested_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 724', () => {
    const query = `drop table if exists shard_0.from_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 725', () => {
    const query = `drop table if exists shard_1.from_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 726', () => {
    const query = `DROP TABLE IF EXISTS mv SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 727', () => {
    const query = `drop database if exists 02911_support_alias_column_in_indices;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 728', () => {
    const query = `drop database 02911_support_alias_column_in_indices;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 729', () => {
    const query = `DROP ROW POLICY IF EXISTS 02911_rowpolicy ON default.* ON CLUSTER test_shard_localhost;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 730', () => {
    const query = `DROP USER IF EXISTS 02911_user ON CLUSTER test_shard_localhost;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 731', () => {
    const query = `DROP ROW POLICY 02911_rowpolicy ON default.* ON CLUSTER test_shard_localhost;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 732', () => {
    const query = `DROP USER 02911_user ON CLUSTER test_shard_localhost;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 733', () => {
    const query = `DROP TABLE IF EXISTS t1n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 734', () => {
    const query = `DROP TABLE IF EXISTS t2n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 735', () => {
    const query = `drop table t3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 736', () => {
    const query = `drop table if exists tab2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 737', () => {
    const query = `drop table if exists tab3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 738', () => {
    const query = `drop table if exists tab4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 739', () => {
    const query = `drop table if exists tab5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 740', () => {
    const query = `DROP TABLE IF EXISTS index_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 741', () => {
    const query = `drop table index_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 742', () => {
    const query = `drop table if exists prefetched_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 743', () => {
    const query = `DROP TABLE IF EXISTS test02910;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 744', () => {
    const query = `DROP TABLE IF EXISTS test02910_second;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 745', () => {
    const query = `drop table if exists test_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 746', () => {
    const query = `drop table test_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 747', () => {
    const query = `drop table if exists test_array_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 748', () => {
    const query = `drop table test_array_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 749', () => {
    const query = `DROP TABLE null_02902;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 750', () => {
    const query = `drop table test_02902; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 751', () => {
    const query = `DROP TABLE IF EXISTS test_apply_deleted_mask;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 752', () => {
    const query = `DROP TABLE test_apply_deleted_mask;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 753', () => {
    const query = `DROP TABLE t1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 754', () => {
    const query = `DROP TABLE IF EXISTS 02898_parallel_replicas_final;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 755', () => {
    const query = `DROP TABLE 02898_parallel_replicas_final;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 756', () => {
    const query = `DROP TABLE IF EXISTS test3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 757', () => {
    const query = `DROP TABLE IF EXISTS test4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 758', () => {
    const query = `DROP TABLE IF EXISTS test5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 759', () => {
    const query = `DROP TABLE IF EXISTS test6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 760', () => {
    const query = `DROP TABLE IF EXISTS or_bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 761', () => {
    const query = `DROP TABLE IF EXISTS forms;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 762', () => {
    const query = `DROP TABLE IF EXISTS t_leading_zeroes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 763', () => {
    const query = `DROP TABLE IF EXISTS t_leading_zeroes_f;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 764', () => {
    const query = `DROP TABLE IF EXISTS foo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 765', () => {
    const query = `DROP TABLE IF EXISTS bar;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 766', () => {
    const query = `DROP TABLE IF EXISTS view_without_sample;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 767', () => {
    const query = `DROP TABLE view_without_sample;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 768', () => {
    const query = `drop table if exists nested_smt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 769', () => {
    const query = `drop table nested_smt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 770', () => {
    const query = `DROP TABLE IF EXISTS e;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 771', () => {
    const query = `DROP TABLE e;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 772', () => {
    const query = `drop table if exists tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 773', () => {
    const query = `drop table tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 774', () => {
    const query = `DROP TABLE IF EXISTS t_describe_options;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 775', () => {
    const query = `DROP TABLE t_describe_options;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 776', () => {
    const query = `DROP TABLE IF EXISTS t_parts_columns_filenames;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 777', () => {
    const query = `DROP TABLE IF EXISTS t_mutations_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 778', () => {
    const query = `DROP TABLE t_mutations_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 779', () => {
    const query = `DROP TABLE IF EXISTS quorum1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 780', () => {
    const query = `DROP TABLE IF EXISTS quorum2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 781', () => {
    const query = `DROP TABLE quorum1 NO DELAY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 782', () => {
    const query = `DROP TABLE quorum2 NO DELAY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 783', () => {
    const query = `DROP TABLE IF EXISTS dist_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 784', () => {
    const query = `DROP TABLE IF EXISTS local_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 785', () => {
    const query = `DROP TABLE dist_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 786', () => {
    const query = `DROP TABLE local_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 787', () => {
    const query = `DROP TABLE IF EXISTS test_dup_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 788', () => {
    const query = `DROP TABLE IF EXISTS t_async_insert_skip_settings SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 789', () => {
    const query = `DROP TABLE t_async_insert_skip_settings SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 790', () => {
    const query = `DROP TABLE IF EXISTS t_reverse_order_virt_col;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 791', () => {
    const query = `DROP TABLE my_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 792', () => {
    const query = `DROP TABLE IF EXISTS checksums_r3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 793', () => {
    const query = `DROP TABLE IF EXISTS checksums_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 794', () => {
    const query = `DROP TABLE IF EXISTS checksums_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 795', () => {
    const query = `DROP TABLE IF EXISTS all_valid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 796', () => {
    const query = `DROP TABLE IF EXISTS some_invalid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 797', () => {
    const query = `DROP TABLE all_valid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 798', () => {
    const query = `DROP TABLE some_invalid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 799', () => {
    const query = `DROP TABLE IF EXISTS tt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 800', () => {
    const query = `DROP TABLE tt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 801', () => {
    const query = `DROP TABLE max_length_alias_14053__fuzz_45;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 802', () => {
    const query = `drop table t_json_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 803', () => {
    const query = `DROP TABLE IF EXISTS table_gcd_codec_one_hundred_zeros;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 804', () => {
    const query = `DROP TABLE IF EXISTS table_gcd_codec_one_hundred_ones;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 805', () => {
    const query = `DROP TABLE table_gcd_codec_one_hundred_zeros;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 806', () => {
    const query = `DROP TABLE table_gcd_codec_one_hundred_ones;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 807', () => {
    const query = `DROP TABLE IF EXISTS t_collisions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 808', () => {
    const query = `drop table test_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 809', () => {
    const query = `drop table if exists test_rewrite_uniq_to_count;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 810', () => {
    const query = `DROP TABLE IF EXISTS tnul SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 811', () => {
    const query = `DROP TABLE IF EXISTS tlc SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 812', () => {
    const query = `DROP TABLE tnul SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 813', () => {
    const query = `DROP TABLE tlc SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 814', () => {
    const query = `DROP USER IF EXISTS test_user_02867;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 815', () => {
    const query = `DROP USER test_user_02867;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 816', () => {
    const query = `DROP TABLE test_skip_idx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 817', () => {
    const query = `DROP TABLE IF EXISTS tab SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 818', () => {
    const query = `DROP TABLE IF EXISTS bug_67742;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 819', () => {
    const query = `DROP TABLE bug_67742;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 820', () => {
    const query = `DROP TABLE IF EXISTS random_mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 821', () => {
    const query = `DROP TABLE IF EXISTS Dates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 822', () => {
    const query = `drop table if exists child;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 823', () => {
    const query = `drop table child3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 824', () => {
    const query = `drop table child2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 825', () => {
    const query = `drop table child;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 826', () => {
    const query = `drop table parent;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 827', () => {
    const query = `DROP TABLE IF EXISTS 02863_delayed_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 828', () => {
    const query = `DROP TABLE 02863_delayed_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 829', () => {
    const query = `DROP TABLE IF EXISTS t_uuid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 830', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_distinct;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 831', () => {
    const query = `DROP TABLE t_sparse_distinct;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 832', () => {
    const query = `DROP TABLE IF EXISTS 02861_interpolate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 833', () => {
    const query = `DROP TABLE 02861_interpolate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 834', () => {
    const query = `DROP TABLE IF EXISTS set_index__fuzz_41;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 835', () => {
    const query = `drop table dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 836', () => {
    const query = `DROP TABLE IF EXISTS 02845_prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 837', () => {
    const query = `drop table if exists t02845;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 838', () => {
    const query = `drop table if exists data_01072;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 839', () => {
    const query = `drop table if exists dist_01072;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 840', () => {
    const query = `DROP DICTIONARY IF EXISTS 02843_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 841', () => {
    const query = `DROP TABLE IF EXISTS 02843_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 842', () => {
    const query = `DROP TABLE IF EXISTS 02843_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 843', () => {
    const query = `DROP DICTIONARY 02843_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 844', () => {
    const query = `DROP TABLE 02843_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 845', () => {
    const query = `DROP TABLE 02843_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 846', () => {
    const query = `DROP DATABASE IF EXISTS test_truncate_database;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 847', () => {
    const query = `DROP DATABASE test_truncate_database;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 848', () => {
    const query = `DROP TABLE IF EXISTS t_mutations_nondeterministic SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 849', () => {
    const query = `DROP TABLE t_mutations_nondeterministic SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 850', () => {
    const query = `DROP TABLE IF EXISTS t_02848_mt1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 851', () => {
    const query = `DROP TABLE IF EXISTS t_02848_mt2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 852', () => {
    const query = `DROP TABLE t_02848_mt1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 853', () => {
    const query = `DROP TABLE t_02848_mt2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 854', () => {
    const query = `drop table if exists largestTriangleThreeBucketsTestFloat64Float64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 855', () => {
    const query = `drop table largestTriangleThreeBucketsTestFloat64Float64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 856', () => {
    const query = `drop table if exists largestTriangleThreeBucketsTestDecimal64Decimal64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 857', () => {
    const query = `drop table largestTriangleThreeBucketsTestDecimal64Decimal64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 858', () => {
    const query = `drop table if exists largestTriangleThreeBucketsTestDateTime64Float64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 859', () => {
    const query = `drop table largestTriangleThreeBucketsTestDateTime64Float64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 860', () => {
    const query = `DROP TABLE largestTriangleTreeBucketsBucketSizeTest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 861', () => {
    const query = `DROP TABLE IF EXISTS test_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 862', () => {
    const query = `DROP TABLE tab2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 863', () => {
    const query = `DROP TABLE IF EXISTS test2_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 864', () => {
    const query = `DROP TABLE IF EXISTS cool_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 865', () => {
    const query = `DROP TABLE IF EXISTS numbers500k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 866', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_sort_limit;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 867', () => {
    const query = `DROP TABLE IF EXISTS nulls_first_sort_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 868', () => {
    const query = `DROP TABLE nulls_first_sort_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 869', () => {
    const query = `DROP TABLE IF EXISTS 02834_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 870', () => {
    const query = `DROP TABLE IF EXISTS alter_02834;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 871', () => {
    const query = `DROP TABLE IF EXISTS t_02833;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 872', () => {
    const query = `DROP TABLE t_02833;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 873', () => {
    const query = `DROP TABLE IF EXISTS series;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 874', () => {
    const query = `DROP TABLE series;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 875', () => {
    const query = `drop table if exists t_tuple_sparse;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 876', () => {
    const query = `drop table if exists t_multi_prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 877', () => {
    const query = `drop row policy if exists policy_02834 on t_multi_prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 878', () => {
    const query = `drop table if exists test_array_joins;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 879', () => {
    const query = `drop table if exists v4test_array_joins;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 880', () => {
    const query = `drop table if exists t_delete_skip_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 881', () => {
    const query = `drop table if exists t_delete_projection;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 882', () => {
    const query = `DROP TABLE IF EXISTS rdb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 883', () => {
    const query = `DROP DICTIONARY IF EXISTS dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 884', () => {
    const query = `drop table if exists 02815_first_line_vector;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 885', () => {
    const query = `DROP TABLE IF EXISTS null_table_buffer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 886', () => {
    const query = `DROP TABLE IF EXISTS null_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 887', () => {
    const query = `DROP VIEW IF EXISTS number_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 888', () => {
    const query = `DROP TABLE IF EXISTS tb1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 889', () => {
    const query = `DROP TABLE IF EXISTS tb2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 890', () => {
    const query = `DROP TABLE IF EXISTS pk_test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 891', () => {
    const query = `DROP TABLE IF EXISTS pk_test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 892', () => {
    const query = `DROP TABLE IF EXISTS pk_test3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 893', () => {
    const query = `DROP TABLE IF EXISTS pk_test4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 894', () => {
    const query = `DROP TABLE IF EXISTS pk_test5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 895', () => {
    const query = `DROP TABLE IF EXISTS pk_test6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 896', () => {
    const query = `DROP TABLE IF EXISTS pk_test7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 897', () => {
    const query = `DROP TABLE IF EXISTS pk_test8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 898', () => {
    const query = `DROP TABLE IF EXISTS pk_test9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 899', () => {
    const query = `DROP TABLE IF EXISTS pk_test10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 900', () => {
    const query = `DROP TABLE IF EXISTS pk_test11;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 901', () => {
    const query = `DROP TABLE IF EXISTS pk_test12;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 902', () => {
    const query = `DROP TABLE IF EXISTS pk_test13;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 903', () => {
    const query = `DROP TABLE IF EXISTS pk_test14;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 904', () => {
    const query = `DROP TABLE IF EXISTS pk_test15;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 905', () => {
    const query = `DROP TABLE IF EXISTS pk_test16;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 906', () => {
    const query = `DROP TABLE IF EXISTS pk_test17;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 907', () => {
    const query = `DROP TABLE IF EXISTS pk_test18;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 908', () => {
    const query = `DROP TABLE IF EXISTS pk_test19;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 909', () => {
    const query = `DROP TABLE IF EXISTS pk_test20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 910', () => {
    const query = `DROP TABLE IF EXISTS pk_test21;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 911', () => {
    const query = `DROP TABLE IF EXISTS pk_test22;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 912', () => {
    const query = `DROP TABLE IF EXISTS pk_test23;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 913', () => {
    const query = `DROP DICTIONARY dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 914', () => {
    const query = `DROP TABLE IF EXISTS test_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 915', () => {
    const query = `DROP TABLE IF EXISTS null_in__fuzz_6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 916', () => {
    const query = `DROP TABLE null_in__fuzz_6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 917', () => {
    const query = `DROP TABLE IF EXISTS t_02809;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 918', () => {
    const query = `DROP TABLE t_02809;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 919', () => {
    const query = `DROP TABLE t_02809_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 920', () => {
    const query = `DROP TABLE t_02809_aux;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 921', () => {
    const query = `DROP TABLE IF EXISTS t10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 922', () => {
    const query = `DROP TABLE t10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 923', () => {
    const query = `DROP TABLE IF EXISTS numbers_10_00223;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 924', () => {
    const query = `DROP TABLE numbers_10_00223;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 925', () => {
    const query = `DROP TABLE IF EXISTS test_xy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 926', () => {
    const query = `DROP TABLE IF EXISTS updates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 927', () => {
    const query = `DROP TABLE test_xy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 928', () => {
    const query = `DROP TABLE updates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 929', () => {
    const query = `DROP TABLE IF EXISTS fx_1m;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 930', () => {
    const query = `DROP TABLE IF EXISTS fx_5m;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 931', () => {
    const query = `DROP TABLE fx_5m;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 932', () => {
    const query = `DROP TABLE fx_1m;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 933', () => {
    const query = `DROP TABLE IF EXISTS t_projections_lwd;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 934', () => {
    const query = `DROP TABLE t_projections_lwd;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 935', () => {
    const query = `DROP TABLE t SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 936', () => {
    const query = `DROP TABLE IF EXISTS outer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 937', () => {
    const query = `DROP TABLE IF EXISTS inner;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 938', () => {
    const query = `DROP TABLE IF EXISTS outer_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 939', () => {
    const query = `DROP TABLE IF EXISTS inner_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 940', () => {
    const query = `drop table if exists test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 941', () => {
    const query = `DROP TABLE IF EXISTS session_events;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 942', () => {
    const query = `DROP TABLE IF EXISTS event_types;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 943', () => {
    const query = `DROP TABLE session_events;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 944', () => {
    const query = `DROP TABLE event_types;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 945', () => {
    const query = `DROP TABLE IF EXISTS summing_merge_tree_datetime64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 946', () => {
    const query = `DROP TABLE summing_merge_tree_datetime64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 947', () => {
    const query = `DROP TABLE IF EXISTS test_table__fuzz_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 948', () => {
    const query = `drop table if exists local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 949', () => {
    const query = `drop table if exists distr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 950', () => {
    const query = `DROP TABLE IF EXISTS date_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 951', () => {
    const query = `DROP TABLE date_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 952', () => {
    const query = `DROP TABLE IF EXISTS datetime_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 953', () => {
    const query = `DROP TABLE datetime_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 954', () => {
    const query = `DROP TABLE IF EXISTS date32_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 955', () => {
    const query = `DROP TABLE date32_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 956', () => {
    const query = `DROP TABLE IF EXISTS datetime64_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 957', () => {
    const query = `DROP TABLE datetime64_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 958', () => {
    const query = `DROP TABLE IF EXISTS t_02784;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 959', () => {
    const query = `DROP TABLE t_02784;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 960', () => {
    const query = `DROP TABLE IF EXISTS t7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 961', () => {
    const query = `DROP TABLE t7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 962', () => {
    const query = `DROP TABLE t4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 963', () => {
    const query = `DROP DATABASE IF EXISTS test_02771;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 964', () => {
    const query = `DROP TABLE IF EXISTS join_inner_table__fuzz_146_replicated;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 965', () => {
    const query = `DROP TABLE join_inner_table__fuzz_146_replicated;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 966', () => {
    const query = `DROP TABLE IF EXISTS test_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 967', () => {
    const query = `DROP TABLE test_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 968', () => {
    const query = `DROP TABLE IF EXISTS data_02771;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 969', () => {
    const query = `DROP TABLE data_02771;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 970', () => {
    const query = `DROP TABLE IF EXISTS test_parallel_replicas_unavailable_shards;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 971', () => {
    const query = `DROP TABLE test_parallel_replicas_unavailable_shards;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 972', () => {
    const query = `DROP TABLE IF EXISTS t5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 973', () => {
    const query = `DROP TABLE t5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 974', () => {
    const query = `DROP TABLE IF EXISTS parallel_replicas_plain;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 975', () => {
    const query = `DROP TABLE parallel_replicas_plain;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 976', () => {
    const query = `DROP TABLE IF EXISTS defaults;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 977', () => {
    const query = `DROP TABLE defaults;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 978', () => {
    const query = `DROP TABLE IF EXISTS 02751_query_log_test_partitions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 979', () => {
    const query = `DROP TABLE IF EXISTS test_table_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 980', () => {
    const query = `DROP TABLE IF EXISTS test_table_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 981', () => {
    const query = `DROP TABLE IF EXISTS test_table_complex;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 982', () => {
    const query = `DROP DICTIONARY IF EXISTS test_sparse_dictionary_load_factor;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 983', () => {
    const query = `DROP DICTIONARY test_sparse_dictionary_load_factor;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 984', () => {
    const query = `DROP DICTIONARY IF EXISTS test_dictionary_load_factor;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 985', () => {
    const query = `DROP DICTIONARY test_dictionary_load_factor;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 986', () => {
    const query = `DROP DICTIONARY IF EXISTS test_dictionary_load_factor_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 987', () => {
    const query = `DROP DICTIONARY test_dictionary_load_factor_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 988', () => {
    const query = `DROP DICTIONARY IF EXISTS test_complex_dictionary_load_factor;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 989', () => {
    const query = `DROP DICTIONARY test_complex_dictionary_load_factor;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 990', () => {
    const query = `DROP DICTIONARY IF EXISTS test_dictionary_load_factor_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 991', () => {
    const query = `DROP TABLE test_table_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 992', () => {
    const query = `DROP TABLE test_table_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 993', () => {
    const query = `DROP TABLE test_table_complex;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 994', () => {
    const query = `DROP TABLE IF EXISTS array_jaccard_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 995', () => {
    const query = `DROP TABLE array_jaccard_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 996', () => {
    const query = `DROP TABLE IF EXISTS test_zk_connection_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 997', () => {
    const query = `drop table if exists basic_types_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 998', () => {
    const query = `drop table basic_types_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 999', () => {
    const query = `drop table if exists nullables_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1000', () => {
    const query = `drop table nullables_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1001', () => {
    const query = `drop table if exists arrays_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1002', () => {
    const query = `drop table if exists arrays_out_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1003', () => {
    const query = `drop table arrays_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1004', () => {
    const query = `drop table arrays_out_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1005', () => {
    const query = `drop table if exists madness_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1006', () => {
    const query = `drop table madness_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1007', () => {
    const query = `drop table if exists other_encoders_02735;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1008', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_short_circuit;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1009', () => {
    const query = `DROP TABLE t_sparse_short_circuit;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1010', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_mutation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1011', () => {
    const query = `DROP TABLE t_sparse_mutation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1012', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_reload;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1013', () => {
    const query = `DROP TABLE t_sparse_reload;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1014', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1015', () => {
    const query = `DROP TABLE IF EXISTS rdst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1016', () => {
    const query = `DROP TABLE IF EXISTS join_inner_table SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1017', () => {
    const query = `DROP TABLE IF EXISTS join_outer_table SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1018', () => {
    const query = `DROP DICTIONARY IF EXISTS dict_flat_simple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1019', () => {
    const query = `DROP DICTIONARY IF EXISTS dict_hashed_simple_Decimal128;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1020', () => {
    const query = `DROP DICTIONARY IF EXISTS dict_hashed_simple_Float32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1021', () => {
    const query = `DROP DICTIONARY IF EXISTS dict_hashed_simple_String;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1022', () => {
    const query = `DROP DICTIONARY IF EXISTS dict_hashed_simple_auto_convert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1023', () => {
    const query = `DROP TABLE IF EXISTS dict_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1024', () => {
    const query = `DROP DICTIONARY dict_flat_simple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1025', () => {
    const query = `DROP DICTIONARY dict_hashed_simple_Decimal128;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1026', () => {
    const query = `DROP DICTIONARY dict_hashed_simple_Float32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1027', () => {
    const query = `DROP DICTIONARY dict_hashed_simple_String;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1028', () => {
    const query = `DROP DICTIONARY dict_hashed_simple_auto_convert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1029', () => {
    const query = `DROP TABLE dict_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1030', () => {
    const query = `DROP DICTIONARY IF EXISTS dict_sharded;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1031', () => {
    const query = `DROP DICTIONARY IF EXISTS dict_sharded_multi;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1032', () => {
    const query = `DROP DICTIONARY dict_sharded;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1033', () => {
    const query = `DROP DICTIONARY dict_sharded_multi;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1034', () => {
    const query = `DROP TABLE IF EXISTS t_async_inserts_flush;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1035', () => {
    const query = `DROP TABLE t_async_inserts_flush;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1036', () => {
    const query = `DROP TABLE IF EXISTS t_to;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1037', () => {
    const query = `DROP TABLE IF EXISTS t_from;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1038', () => {
    const query = `DROP TABLE t_from;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1039', () => {
    const query = `DROP TABLE IF EXISTS group_by_null_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1040', () => {
    const query = `DROP TABLE group_by_null_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1041', () => {
    const query = `DROP TABLE IF EXISTS 02725_memory_for_merges SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1042', () => {
    const query = `DROP TABLE IF EXISTS 02725_cnf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1043', () => {
    const query = `DROP TABLE 02725_cnf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1044', () => {
    const query = `DROP TABLE IF EXISTS join_test_right;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1045', () => {
    const query = `drop table if exists alias_column_should_not_allow_compression;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1046', () => {
    const query = `DROP TABLE IF EXISTS \`\$4@^7\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1047', () => {
    const query = `DROP TABLE \`\$4@^7\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1048', () => {
    const query = `DROP TABLE NULL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1049', () => {
    const query = `DROP DATABASE IF EXISTS \`'\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1050', () => {
    const query = `DROP DATABASE \`'\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1051', () => {
    const query = `DROP DATABASE IF EXISTS database_123456789abcde;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1052', () => {
    const query = `DROP DATABASE database_123456789abcde;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1053', () => {
    const query = `DROP TABLE IF EXISTS \`tab.with.dots\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1054', () => {
    const query = `DROP TABLE \`tab.with.dots\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1055', () => {
    const query = `DROP TABLE IF EXISTS saved_intervals_tmp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1056', () => {
    const query = `DROP TABLE IF EXISTS saved_intervals_mgt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1057', () => {
    const query = `drop table if exists dummy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1058', () => {
    const query = `drop table dummy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1059', () => {
    const query = `DROP TABLE table_with_dot_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1060', () => {
    const query = `drop table if exists test ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1061', () => {
    const query = `DROP TABLE IF EXISTS data_02716_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1062', () => {
    const query = `DROP TABLE IF EXISTS data_02716_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1063', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE_1:Identifier}.data_02716_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1064', () => {
    const query = `DROP TABLE IF EMPTY data_02716_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1065', () => {
    const query = `DROP TABLE IF EMPTY data_02716_1; -- { serverError TABLE_NOT_EMPTY } TRUNCATE TABLE data_02716_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1066', () => {
    const query = `DROP TABLE IF EMPTY data_02716_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1067', () => {
    const query = `DROP DATABASE IF EMPTY {CLICKHOUSE_DATABASE_1:Identifier}; -- { serverError NOT_IMPLEMENTED } SELECT count() FROM system.tables WHERE database = {CLICKHOUSE_DATABASE_1:String};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1068', () => {
    const query = `DROP TABLE test SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1069', () => {
    const query = `DROP TABLE IF EXISTS 02713_seqt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1070', () => {
    const query = `DROP TABLE IF EXISTS 02713_seqt_distr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1071', () => {
    const query = `DROP TABLE IF EXISTS t_2710_show_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1072', () => {
    const query = `DROP TABLE t_2710_show_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1073', () => {
    const query = `DROP DATABASE IF EXISTS t_2710_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1074', () => {
    const query = `DROP DATABASE t_2710_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1075', () => {
    const query = `DROP DATABASE IF EXISTS replicated_database_params;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1076', () => {
    const query = `DROP DATABASE replicated_database_params;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1077', () => {
    const query = `DROP TABLE IF EXISTS summing_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1078', () => {
    const query = `DROP TABLE summing_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1079', () => {
    const query = `DROP TABLE IF EXISTS t_memory_compressed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1080', () => {
    const query = `DROP TABLE t_memory_compressed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1081', () => {
    const query = `DROP TABLE t_02708;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1082', () => {
    const query = `DROP TABLE IF EXISTS t_skip_index_in;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1083', () => {
    const query = `DROP TABLE IF EXISTS 02707_keepermap_delete_update;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1084', () => {
    const query = `DROP TABLE IF EXISTS kstest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1085', () => {
    const query = `DROP TABLE IF EXISTS 02706_keeper_map_insert_strict SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1086', () => {
    const query = `DROP TABLE 02706_keeper_map_insert_strict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1087', () => {
    const query = `DROP TABLE IF EXISTS foo2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1088', () => {
    const query = `DROP TABLE IF EXISTS foo2_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1089', () => {
    const query = `DROP TABLE IF EXISTS merge1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1090', () => {
    const query = `DROP TABLE IF EXISTS 02702_logical_optimizer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1091', () => {
    const query = `DROP TABLE 02702_logical_optimizer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1092', () => {
    const query = `DROP TABLE IF EXISTS 02702_logical_optimizer_with_null_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1093', () => {
    const query = `DROP TABLE 02702_logical_optimizer_with_null_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1094', () => {
    const query = `DROP TABLE IF EXISTS 25400_dropped_tables;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1095', () => {
    const query = `DROP TABLE 25400_dropped_tables;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1096', () => {
    const query = `DROP TABLE IF EXISTS test_table_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1097', () => {
    const query = `DROP TABLE IF EXISTS s;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1098', () => {
    const query = `DROP TABLE s;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1099', () => {
    const query = `DROP TABLE IF EXISTS store;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1100', () => {
    const query = `DROP TABLE IF EXISTS location;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1101', () => {
    const query = `DROP TABLE IF EXISTS sales;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1102', () => {
    const query = `DROP TABLE store;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1103', () => {
    const query = `DROP TABLE location;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1104', () => {
    const query = `DROP TABLE sales;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1105', () => {
    const query = `DROP TABLE IF EXISTS 02691_drop_column_replicated;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1106', () => {
    const query = `DROP TABLE 02691_drop_column_replicated;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1107', () => {
    const query = `DROP TABLE IF EXISTS t_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1108', () => {
    const query = `DROP TABLE t_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1109', () => {
    const query = `DROP TABLE IF EXISTS decimal_insert_cast_issue;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1110', () => {
    const query = `DROP TABLE decimal_insert_cast_issue;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1111', () => {
    const query = `drop table if exists 02681_undrop_mergetree sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1112', () => {
    const query = `drop table 02681_undrop_mergetree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1113', () => {
    const query = `drop table 02681_undrop_mergetree sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1114', () => {
    const query = `drop table if exists 02681_undrop_detach sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1115', () => {
    const query = `drop table 02681_undrop_detach sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1116', () => {
    const query = `drop table if exists 02681_undrop_uuid_on_cluster on cluster test_shard_localhost sync format Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1117', () => {
    const query = `drop table 02681_undrop_uuid_on_cluster on cluster test_shard_localhost format Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1118', () => {
    const query = `drop table 02681_undrop_uuid_on_cluster sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1119', () => {
    const query = `drop table if exists 02681_undrop_no_uuid_on_cluster on cluster test_shard_localhost sync format Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1120', () => {
    const query = `drop table 02681_undrop_no_uuid_on_cluster on cluster test_shard_localhost format Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1121', () => {
    const query = `drop table 02681_undrop_no_uuid_on_cluster on cluster test_shard_localhost sync format Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1122', () => {
    const query = `drop table if exists 02681_undrop_replicatedmergetree sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1123', () => {
    const query = `drop table 02681_undrop_replicatedmergetree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1124', () => {
    const query = `drop table 02681_undrop_replicatedmergetree sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1125', () => {
    const query = `drop table if exists 02681_undrop_log sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1126', () => {
    const query = `drop table 02681_undrop_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1127', () => {
    const query = `drop table 02681_undrop_log sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1128', () => {
    const query = `drop table if exists 02681_undrop_distributed sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1129', () => {
    const query = `drop table 02681_undrop_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1130', () => {
    const query = `drop table 02681_undrop_distributed sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1131', () => {
    const query = `drop table if exists 02681_undrop_multiple sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1132', () => {
    const query = `drop table 02681_undrop_multiple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1133', () => {
    const query = `drop table if exists test_null_as_default__fuzz_46;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1134', () => {
    const query = `drop table test_null_as_default__fuzz_46;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1135', () => {
    const query = `DROP TABLE IF EXISTS 02680_datetime64_monotonic_check;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1136', () => {
    const query = `DROP TABLE IF EXISTS 02680_datetime_monotonic_check_lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1137', () => {
    const query = `DROP TABLE 02680_datetime64_monotonic_check;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1138', () => {
    const query = `DROP ROW POLICY IF EXISTS test_row_policy ON test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1139', () => {
    const query = `DROP ROW POLICY test_row_policy ON test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1140', () => {
    const query = `DROP TABLE IF EXISTS test_grace_hash;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1141', () => {
    const query = `DROP TABLE test_grace_hash;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1142', () => {
    const query = `DROP TABLE IF EXISTS t_get_subcolumn;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1143', () => {
    const query = `DROP TABLE t_get_subcolumn;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1144', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_columns_clear;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1145', () => {
    const query = `DROP TABLE t_sparse_columns_clear SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1146', () => {
    const query = `DROP TABLE test_table_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1147', () => {
    const query = `drop table if exists m3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1148', () => {
    const query = `drop table if exists replacing_m3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1149', () => {
    const query = `drop table m3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1150', () => {
    const query = `drop table replacing_m3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1151', () => {
    const query = `DROP TABLE IF EXISTS t_constant_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1152', () => {
    const query = `DROP TABLE t_constant_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1153', () => {
    const query = `DROP TABLE IF EXISTS t_modify_to_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1154', () => {
    const query = `DROP TABLE t_modify_to_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1155', () => {
    const query = `DROP TABLE IF EXISTS 02668_logical_optimizer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1156', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_mutations_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1157', () => {
    const query = `DROP TABLE t_sparse_mutations_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1158', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_mutations_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1159', () => {
    const query = `DROP TABLE t_sparse_mutations_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1160', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_mutations_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1161', () => {
    const query = `DROP TABLE t_sparse_mutations_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1162', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_mutations_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1163', () => {
    const query = `DROP TABLE t_sparse_mutations_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1164', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_mutations_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1165', () => {
    const query = `DROP TABLE t_sparse_mutations_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1166', () => {
    const query = `DROP TABLE IF EXISTS 02581_trips;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1167', () => {
    const query = `DROP TABLE 02581_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1168', () => {
    const query = `DROP TABLE 02581_trips;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1169', () => {
    const query = `DROP DATABASE IF EXISTS 02661_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1170', () => {
    const query = `DROP DATABASE IF EXISTS 02661_db1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1171', () => {
    const query = `DROP TABLE IF EXISTS 02661_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1172', () => {
    const query = `DROP TABLE IF EXISTS 02661_t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1173', () => {
    const query = `DROP DICTIONARY IF EXISTS 02661_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1174', () => {
    const query = `DROP DICTIONARY IF EXISTS 02661_d1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1175', () => {
    const query = `DROP DATABASE {new_db_name:Identifier};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1176', () => {
    const query = `DROP TABLE IF EXISTS ipv4_t64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1177', () => {
    const query = `DROP TABLE IF EXISTS 02577_keepermap_delete_update;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1178', () => {
    const query = `DROP TABLE IF EXISTS m;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1179', () => {
    const query = `DROP TABLE m;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1180', () => {
    const query = `DROP TABLE IF EXISTS table1__fuzz_19;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1181', () => {
    const query = `DROP TABLE table1__fuzz_19;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1182', () => {
    const query = `drop table if exists log_proxy_02572;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1183', () => {
    const query = `drop table if exists push_to_logs_proxy_mv_02572;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1184', () => {
    const query = `drop table log_proxy_02572;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1185', () => {
    const query = `drop table push_to_logs_proxy_mv_02572;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1186', () => {
    const query = `drop table if exists data_02572;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1187', () => {
    const query = `drop table if exists proxy_02572;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1188', () => {
    const query = `drop table if exists push_to_proxy_mv_02572;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1189', () => {
    const query = `drop table if exists receiver_02572;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1190', () => {
    const query = `DROP TABLE IF EXISTS t_update_empty_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1191', () => {
    const query = `DROP TABLE t_update_empty_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1192', () => {
    const query = `DROP TABLE IF EXISTS mytable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1193', () => {
    const query = `DROP DATABASE IF EXISTS 02563_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1194', () => {
    const query = `DROP TABLE IF EXISTS 02563_db.test_merge_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1195', () => {
    const query = `DROP TABLE IF EXISTS 02563_db.test_merge_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1196', () => {
    const query = `DROP TABLE IF EXISTS 02563_db.test_merge_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1197', () => {
    const query = `DROP TABLE 02563_db.test_merge_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1198', () => {
    const query = `DROP TABLE 02563_db.test_merge_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1199', () => {
    const query = `DROP TABLE 02563_db.test_merge_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1200', () => {
    const query = `DROP TABLE 02563_db.t_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1201', () => {
    const query = `DROP TABLE 02563_db.dist_t_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1202', () => {
    const query = `DROP TABLE 02563_db.m;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1203', () => {
    const query = `DROP DATABASE 02563_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1204', () => {
    const query = `drop table if exists tvm;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1205', () => {
    const query = `drop table tvm;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1206', () => {
    const query = `DROP TABLE IF EXISTS nums;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1207', () => {
    const query = `DROP TABLE nums;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1208', () => {
    const query = `DROP VIEW IF EXISTS test_materialized_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1209', () => {
    const query = `DROP TABLE IF EXISTS test_table_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1210', () => {
    const query = `DROP TABLE test_table_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1211', () => {
    const query = `DROP VIEW test_materialized_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1212', () => {
    const query = `DROP TABLE IF EXISTS data_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1213', () => {
    const query = `DROP TABLE IF EXISTS data_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1214', () => {
    const query = `DROP TABLE IF EXISTS data_wide;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1215', () => {
    const query = `DROP TABLE IF EXISTS t_02559;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1216', () => {
    const query = `DROP TABLE t_02559;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1217', () => {
    const query = `DROP TABLE IF EXISTS test_02559;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1218', () => {
    const query = `DROP TABLE test_02559;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1219', () => {
    const query = `DROP ROW POLICY IF EXISTS 02559_filter_1 ON test_02559;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1220', () => {
    const query = `DROP ROW POLICY IF EXISTS 02559_filter_2 ON test_02559;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1221', () => {
    const query = `DROP TABLE IF EXISTS ip_bloom;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1222', () => {
    const query = `DROP TABLE ip_bloom;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1223', () => {
    const query = `DROP TABLE IF EXISTS check_system_tables;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1224', () => {
    const query = `DROP TABLE IF EXISTS test_2554_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1225', () => {
    const query = `DROP TABLE test_2554_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1226', () => {
    const query = `DROP TABLE IF EXISTS test_2554_tinylog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1227', () => {
    const query = `DROP TABLE test_2554_tinylog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1228', () => {
    const query = `DROP TABLE IF EXISTS test_2554_stripelog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1229', () => {
    const query = `DROP TABLE test_2554_stripelog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1230', () => {
    const query = `DROP TABLE IF EXISTS json_columns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1231', () => {
    const query = `DROP TABLE test_grouping_sets_predicate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1232', () => {
    const query = `DROP TABLE IF EXISTS t_json_analyzer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1233', () => {
    const query = `DROP TABLE t_json_analyzer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1234', () => {
    const query = `DROP TABLE IF EXISTS t_json_attach_partition;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1235', () => {
    const query = `DROP TABLE t_json_attach_partition;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1236', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_intersect;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1237', () => {
    const query = `DROP TABLE t_sparse_intersect;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1238', () => {
    const query = `DROP TABLE IF EXISTS sipHashKeyed_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1239', () => {
    const query = `DROP TABLE sipHashKeyed_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1240', () => {
    const query = `DROP TABLE IF EXISTS sipHashKeyed_keys;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1241', () => {
    const query = `DROP TABLE sipHashKeyed_keys;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1242', () => {
    const query = `DROP TABLE src; -- { serverError HAVE_DEPENDENT_OBJECTS } DROP TABLE dst; -- { serverError HAVE_DEPENDENT_OBJECTS }
DROP TABLE mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1243', () => {
    const query = `DROP TABLE ip4test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1244', () => {
    const query = `DROP TABLE IF EXISTS test_tuple_element;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1245', () => {
    const query = `DROP TABLE test_tuple_element;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1246', () => {
    const query = `DROP TABLE IF EXISTS 02540_date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1247', () => {
    const query = `DROP TABLE IF EXISTS t_compact_vertical_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1248', () => {
    const query = `DROP TABLE t_compact_vertical_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1249', () => {
    const query = `DROP TABLE IF EXISTS 02538_bf_ngrambf_map_values_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1250', () => {
    const query = `DROP TABLE 02538_bf_ngrambf_map_values_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1251', () => {
    const query = `DROP TABLE IF EXISTS wrong_metadata;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1252', () => {
    const query = `DROP TABLE IF EXISTS wrong_metadata_wide;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1253', () => {
    const query = `DROP TABLE IF EXISTS test_tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1254', () => {
    const query = `DROP TABLE test_dist_02536;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1255', () => {
    const query = `drop table if exists bug_delta_gorilla;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1256', () => {
    const query = `DROP TABLE IF EXISTS users_02534;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1257', () => {
    const query = `DROP TABLE users_02534;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1258', () => {
    const query = `DROP TABLE IF EXISTS t1__fuzz_8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1259', () => {
    const query = `DROP TABLE IF EXISTS full_join__fuzz_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1260', () => {
    const query = `DROP TABLE IF EXISTS ip_part_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1261', () => {
    const query = `DROP TABLE IF EXISTS merge2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1262', () => {
    const query = `DROP TABLE merge2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1263', () => {
    const query = `DROP TABLE merge1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1264', () => {
    const query = `DROP TABLE foo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1265', () => {
    const query = `DROP TABLE IF EXISTS foo1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1266', () => {
    const query = `DROP TABLE IF EXISTS foo_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1267', () => {
    const query = `DROP TABLE IF EXISTS 02526_keeper_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1268', () => {
    const query = `DROP TABLE IF EXISTS 02526_rocksdb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1269', () => {
    const query = `DROP TABLE 02526_keeper_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1270', () => {
    const query = `DROP TABLE 02526_rocksdb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1271', () => {
    const query = `DROP DICTIONARY IF EXISTS test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1272', () => {
    const query = `DROP DICTIONARY test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1273', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS table_merge_tree_02525;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1274', () => {
    const query = `DROP TEMPORARY TABLE table_merge_tree_02525;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1275', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS table_log_02525;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1276', () => {
    const query = `DROP TEMPORARY TABLE table_log_02525;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1277', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS table_stripe_log_02525;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1278', () => {
    const query = `DROP TEMPORARY TABLE table_stripe_log_02525;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1279', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS table_tiny_log_02525;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1280', () => {
    const query = `DROP TEMPORARY TABLE table_tiny_log_02525;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1281', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS table_replicated_merge_tree_02525;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1282', () => {
    const query = `DROP TABLE IF EXISTS data_a_02187;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1283', () => {
    const query = `DROP TABLE data_a_02187;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1284', () => {
    const query = `DROP TABLE IF EXISTS lwd_test_02521;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1285', () => {
    const query = `DROP TABLE lwd_test_02521;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1286', () => {
    const query = `drop table t6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1287', () => {
    const query = `drop table t8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1288', () => {
    const query = `drop table t9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1289', () => {
    const query = `drop table t11;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1290', () => {
    const query = `drop table t12;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1291', () => {
    const query = `drop table t13;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1292', () => {
    const query = `drop table t14;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1293', () => {
    const query = `drop table t15;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1294', () => {
    const query = `drop table t16;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1295', () => {
    const query = `drop table t17;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1296', () => {
    const query = `drop table t18;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1297', () => {
    const query = `drop table t19;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1298', () => {
    const query = `drop table t20;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1299', () => {
    const query = `drop table t21;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1300', () => {
    const query = `drop table t22;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1301', () => {
    const query = `drop table if exists simple_agg_groupArrayLastArray;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1302', () => {
    const query = `DROP TABLE IF EXISTS test_table_join_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1303', () => {
    const query = `DROP TABLE IF EXISTS test_table_join_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1304', () => {
    const query = `DROP TABLE IF EXISTS test_table_join_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1305', () => {
    const query = `DROP TABLE test_table_join_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1306', () => {
    const query = `DROP TABLE test_table_join_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1307', () => {
    const query = `DROP TABLE test_table_join_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1308', () => {
    const query = `DROP TABLE IF EXISTS foo__fuzz_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1309', () => {
    const query = `DROP TABLE IF EXISTS kek;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1310', () => {
    const query = `DROP TABLE IF EXISTS kekv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1311', () => {
    const query = `DROP TABLE local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1312', () => {
    const query = `DROP TABLE alias_local10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1313', () => {
    const query = `DROP TABLE alias10__fuzz_13;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1314', () => {
    const query = `DROP TABLE IF EXISTS video_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1315', () => {
    const query = `DROP TABLE IF EXISTS video_log_result__fuzz_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1316', () => {
    const query = `DROP TABLE IF EXISTS rng;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1317', () => {
    const query = `DROP TABLE video_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1318', () => {
    const query = `DROP TABLE video_log_result__fuzz_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1319', () => {
    const query = `DROP TABLE rng;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1320', () => {
    const query = `DROP TABLE IF EXISTS test1__fuzz_37;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1321', () => {
    const query = `DROP TABLE IF EXISTS fh;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1322', () => {
    const query = `DROP DICTIONARY IF EXISTS null_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1323', () => {
    const query = `DROP DICTIONARY IF EXISTS null_ip_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1324', () => {
    const query = `DROP TABLE IF EXISTS c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1325', () => {
    const query = `DROP TABLE IF EXISTS d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1326', () => {
    const query = `DROP TABLE IF EXISTS table_02513;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1327', () => {
    const query = `DROP TABLE IF EXISTS data_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1328', () => {
    const query = `DROP TABLE data_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1329', () => {
    const query = `DROP TABLE IF EXISTS table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1330', () => {
    const query = `DROP TABLE IF EXISTS test_graphite;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1331', () => {
    const query = `DROP DICTIONARY IF EXISTS regexp_dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1332', () => {
    const query = `DROP table IF EXISTS needle_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1333', () => {
    const query = `DROP TABLE IF EXISTS test_02504;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1334', () => {
    const query = `DROP TABLE IF EXISTS test54378;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1335', () => {
    const query = `DROP TABLE test54378;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1336', () => {
    const query = `DROP TABLE IF EXISTS 02501_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1337', () => {
    const query = `DROP TABLE IF EXISTS 02501_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1338', () => {
    const query = `DROP VIEW IF EXISTS 02501_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1339', () => {
    const query = `DROP TABLE IF EXISTS 02500_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1340', () => {
    const query = `DROP TABLE 02500_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1341', () => {
    const query = `DROP TABLE IF EXISTS t_source_part_is_intact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1342', () => {
    const query = `DROP TABLE t_source_part_is_intact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1343', () => {
    const query = `DROP TABLE IF EXISTS t_s3_events_02496;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1344', () => {
    const query = `DROP TABLE t_s3_events_02496;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1345', () => {
    const query = `DROP TABLE IF EXISTS t_s3_filter_02495;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1346', () => {
    const query = `DROP TABLE t_s3_filter_02495;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1347', () => {
    const query = `DROP TABLE IF EXISTS tj;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1348', () => {
    const query = `DROP TABLE IF EXISTS wikistat1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1349', () => {
    const query = `DROP TABLE IF EXISTS wikistat2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1350', () => {
    const query = `DROP TABLE wikistat1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1351', () => {
    const query = `DROP TABLE wikistat2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1352', () => {
    const query = `DROP TABLE system;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1353', () => {
    const query = `DROP TABLE IF EXISTS system.system;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1354', () => {
    const query = `DROP TABLE IF EXISTS t_cache_sparse;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1355', () => {
    const query = `DROP TABLE t_cache_sparse;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1356', () => {
    const query = `DROP DATABASE IF EXISTS db1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1357', () => {
    const query = `DROP DATABASE IF EXISTS db2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1358', () => {
    const query = `DROP DATABASE db1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1359', () => {
    const query = `DROP DATABASE db2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1360', () => {
    const query = `DROP TABLE IF EXISTS eligible_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1361', () => {
    const query = `DROP TABLE IF EXISTS eligible_test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1362', () => {
    const query = `DROP TABLE eligible_test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1363', () => {
    const query = `drop table data_02491;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1364', () => {
    const query = `DROP TABLE IF EXISTS testCleanupR1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1365', () => {
    const query = `DROP TABLE IF EXISTS testSettingsR1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1366', () => {
    const query = `drop table rmt1 sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1367', () => {
    const query = `DROP TABLE IF EXISTS 02484_substitute_udf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1368', () => {
    const query = `DROP FUNCTION IF EXISTS 02484_plusone;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1369', () => {
    const query = `DROP FUNCTION IF EXISTS 02484_plustwo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1370', () => {
    const query = `DROP FUNCTION IF EXISTS 02484_plusthree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1371', () => {
    const query = `DROP FUNCTION IF EXISTS 02484_plusthreemonths;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1372', () => {
    const query = `DROP FUNCTION IF EXISTS 02484_plusthreedays;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1373', () => {
    const query = `DROP TABLE 02484_substitute_udf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1374', () => {
    const query = `DROP FUNCTION 02484_plusone;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1375', () => {
    const query = `DROP FUNCTION 02484_plustwo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1376', () => {
    const query = `DROP FUNCTION 02484_plusthree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1377', () => {
    const query = `DROP FUNCTION 02484_plusthreemonths;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1378', () => {
    const query = `DROP FUNCTION 02484_plusthreedays;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1379', () => {
    const query = `DROP TABLE IF EXISTS 02483_substitute_udf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1380', () => {
    const query = `DROP FUNCTION IF EXISTS 02483_plusone;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1381', () => {
    const query = `DROP FUNCTION IF EXISTS 02483_plustwo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1382', () => {
    const query = `DROP FUNCTION IF EXISTS 02483_plusthree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1383', () => {
    const query = `DROP TABLE 02483_substitute_udf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1384', () => {
    const query = `DROP FUNCTION 02483_plusone;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1385', () => {
    const query = `DROP FUNCTION 02483_plustwo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1386', () => {
    const query = `DROP FUNCTION 02483_plusthree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1387', () => {
    const query = `DROP DATABASE IF EXISTS replicated_database_test; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1388', () => {
    const query = `DROP DATABASE IF EXISTS replicated_database_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1389', () => {
    const query = `DROP TABLE IF EXISTS tmp_02482;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1390', () => {
    const query = `DROP TABLE IF EXISTS dist_02482;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1391', () => {
    const query = `DROP TABLE tmp_02482;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1392', () => {
    const query = `DROP TABLE dist_02482;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1393', () => {
    const query = `drop table if exists test_02481_mismatch_files;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1394', () => {
    const query = `DROP TABLE IF EXISTS test_filter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1395', () => {
    const query = `DROP TABLE test_filter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1396', () => {
    const query = `DROP TABLE IF EXISTS 02481_mergetree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1397', () => {
    const query = `DROP TABLE IF EXISTS 02481_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1398', () => {
    const query = `DROP TABLE 02481_mergetree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1399', () => {
    const query = `DROP TABLE 02481_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1400', () => {
    const query = `drop table if exists issue_46128;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1401', () => {
    const query = `drop table issue_46128;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1402', () => {
    const query = `DROP TABLE IF EXISTS test_rlp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1403', () => {
    const query = `DROP POLICY IF EXISTS test_rlp_policy ON test_rlp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1404', () => {
    const query = `DROP POLICY test_rlp_policy ON test_rlp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1405', () => {
    const query = `DROP TABLE test_rlp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1406', () => {
    const query = `DROP TABLE IF EXISTS arrays_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1407', () => {
    const query = `drop table if exists test_02480_support_wildcard_write;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1408', () => {
    const query = `drop table if exists test_02480_support_wildcard_write2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1409', () => {
    const query = `drop table test_02480_support_wildcard_write;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1410', () => {
    const query = `drop table test_02480_support_wildcard_write2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1411', () => {
    const query = `DROP TABLE IF EXISTS dm_metric_small2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1412', () => {
    const query = `DROP TABLE dm_metric_small2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1413', () => {
    const query = `DROP TABLE IF EXISTS lc_00906__fuzz_46;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1414', () => {
    const query = `DROP TABLE lc_00906__fuzz_46;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1415', () => {
    const query = `DROP TABLE IF EXISTS testing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1416', () => {
    const query = `DROP TABLE testing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1417', () => {
    const query = `drop table aggr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1418', () => {
    const query = `DROP TABLE IF EXISTS t_logical_expressions_optimizer_low_cardinality;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1419', () => {
    const query = `DROP TABLE t_logical_expressions_optimizer_low_cardinality;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1420', () => {
    const query = `DROP TABLE IF EXISTS fuse_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1421', () => {
    const query = `DROP TABLE fuse_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1422', () => {
    const query = `DROP TABLE IF EXISTS 02476_query_parameters_insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1423', () => {
    const query = `DROP TABLE 02476_query_parameters_insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1424', () => {
    const query = `DROP TABLE IF EXISTS tab1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1425', () => {
    const query = `drop table if exists unhex_in_fix_string_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1426', () => {
    const query = `DROP TABLE IF EXISTS prewhere_int128;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1427', () => {
    const query = `DROP TABLE IF EXISTS prewhere_int256;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1428', () => {
    const query = `DROP TABLE IF EXISTS prewhere_uint128;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1429', () => {
    const query = `DROP TABLE IF EXISTS prewhere_uint256;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1430', () => {
    const query = `DROP TABLE IF EXISTS tdm__fuzz_23;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1431', () => {
    const query = `DROP TABLE tdm__fuzz_23;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1432', () => {
    const query = `DROP TABLE IF EXISTS alias_2__fuzz_25;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1433', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_nullable_index__fuzz_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1434', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_nullable_index__fuzz_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1435', () => {
    const query = `DROP TABLE IF EXISTS nullable_string_value__fuzz_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1436', () => {
    const query = `DROP TABLE IF EXISTS t_max_rows_to_read;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1437', () => {
    const query = `DROP TABLE IF EXISTS series__fuzz_35;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1438', () => {
    const query = `DROP TABLE series__fuzz_35;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1439', () => {
    const query = `DROP TABLE IF EXISTS welch_ttest__fuzz_7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1440', () => {
    const query = `DROP TABLE IF EXISTS t1__fuzz_13;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1441', () => {
    const query = `DROP TABLE IF EXISTS t2__fuzz_47;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1442', () => {
    const query = `DROP TABLE IF EXISTS row_level_policy_prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1443', () => {
    const query = `DROP ROW POLICY IF EXISTS row_level_policy_prewhere_policy0 ON row_level_policy_prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1444', () => {
    const query = `DROP TABLE row_level_policy_prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1445', () => {
    const query = `DROP TABLE IF EXISTS session;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1446', () => {
    const query = `DROP TABLE IF EXISTS queue;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1447', () => {
    const query = `DROP TABLE IF EXISTS forward;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1448', () => {
    const query = `DROP TABLE session;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1449', () => {
    const query = `DROP TABLE queue;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1450', () => {
    const query = `DROP TABLE forward;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1451', () => {
    const query = `DROP TABLE IF EXISTS group_by_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1452', () => {
    const query = `drop table if exists morton_numbers_mask_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1453', () => {
    const query = `drop table if exists morton_numbers_mask_1_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1454', () => {
    const query = `drop table if exists morton_numbers_mask_2_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1455', () => {
    const query = `drop table if exists morton_numbers_mask_3_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1456', () => {
    const query = `drop table if exists morton_numbers_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1457', () => {
    const query = `drop table if exists morton_numbers_1_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1458', () => {
    const query = `drop table if exists morton_numbers_2_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1459', () => {
    const query = `drop table if exists morton_numbers_3_02457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1460', () => {
    const query = `DROP TABLE IF EXISTS mutation_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1461', () => {
    const query = `DROP TABLE IF EXISTS mutation_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1462', () => {
    const query = `DROP TABLE mutation_1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1463', () => {
    const query = `DROP TABLE IF EXISTS t_summing_lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1464', () => {
    const query = `DROP TABLE t_summing_lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1465', () => {
    const query = `DROP TABLE IF EXISTS keeper_retries_r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1466', () => {
    const query = `DROP TABLE IF EXISTS keeper_retries_r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1467', () => {
    const query = `DROP TABLE keeper_retries_r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1468', () => {
    const query = `DROP TABLE keeper_retries_r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1469', () => {
    const query = `DROP TABLE IF EXISTS test_fixed_string_nested_json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1470', () => {
    const query = `DROP TABLE test_fixed_string_nested_json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1471', () => {
    const query = `drop table if exists t_row_exists;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1472', () => {
    const query = `drop table t_row_exists;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1473', () => {
    const query = `drop table if exists cc sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1474', () => {
    const query = `DROP TABLE IF EXISTS test_low_cardinality_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1475', () => {
    const query = `DROP TABLE IF EXISTS test_low_cardinality_uuid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1476', () => {
    const query = `DROP TABLE IF EXISTS test_low_cardinality_int;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1477', () => {
    const query = `DROP TABLE test_low_cardinality_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1478', () => {
    const query = `DROP TABLE test_low_cardinality_uuid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1479', () => {
    const query = `DROP TABLE test_low_cardinality_int;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1480', () => {
    const query = `DROP TABLE view; -- {serverError HAVE_DEPENDENT_OBJECTS} INSERT INTO view VALUES (2, 'a');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1481', () => {
    const query = `DROP DICTIONARY dict; -- {serverError HAVE_DEPENDENT_OBJECTS} SELECT * FROM dictionary('dict');`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1482', () => {
    const query = `drop table if exists rmt2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1483', () => {
    const query = `drop table rmt1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1484', () => {
    const query = `drop table rmt2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1485', () => {
    const query = `drop table if exists t1_r1 sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1486', () => {
    const query = `drop table if exists t1_r2 sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1487', () => {
    const query = `drop table t1_r1 sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1488', () => {
    const query = `drop table t1_r2 sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1489', () => {
    const query = `drop table if exists rmt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1490', () => {
    const query = `drop table rmt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1491', () => {
    const query = `DROP TABLE mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1492', () => {
    const query = `DROP TABLE IF EXISTS dep;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1493', () => {
    const query = `DROP TABLE IF EXISTS dep2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1494', () => {
    const query = `DROP TABLE IF EXISTS id_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1495', () => {
    const query = `DROP TABLE dep2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1496', () => {
    const query = `DROP TABLE id_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1497', () => {
    const query = `drop view v2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1498', () => {
    const query = `drop view v3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1499', () => {
    const query = `drop table if exists test_null_filter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1500', () => {
    const query = `drop table test_null_filter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1501', () => {
    const query = `DROP TABLE IF EXISTS decimal_in_float_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1502', () => {
    const query = `DROP TABLE IF EXISTS mutate_and_zero_copy_replication1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1503', () => {
    const query = `DROP TABLE IF EXISTS mutate_and_zero_copy_replication2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1504', () => {
    const query = `DROP TABLE mutate_and_zero_copy_replication1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1505', () => {
    const query = `DROP TABLE IF EXISTS table_one;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1506', () => {
    const query = `DROP TABLE IF EXISTS table_two;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1507', () => {
    const query = `DROP TABLE IF EXISTS store_returns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1508', () => {
    const query = `DROP TABLE IF EXISTS catalog_sales;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1509', () => {
    const query = `DROP TABLE IF EXISTS catalog_returns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1510', () => {
    const query = `DROP TABLE IF EXISTS date_dim;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1511', () => {
    const query = `DROP TABLE IF EXISTS customer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1512', () => {
    const query = `DROP TABLE IF EXISTS customer_demographics;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1513', () => {
    const query = `DROP TABLE IF EXISTS promotion;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1514', () => {
    const query = `DROP TABLE IF EXISTS household_demographics;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1515', () => {
    const query = `DROP TABLE IF EXISTS customer_address;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1516', () => {
    const query = `DROP TABLE IF EXISTS income_band;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1517', () => {
    const query = `DROP TABLE IF EXISTS item;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1518', () => {
    const query = `DROP TABLE IF EXISTS dtest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1519', () => {
    const query = `DROP TABLE IF EXISTS table_to_merge_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1520', () => {
    const query = `DROP TABLE IF EXISTS table_to_merge_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1521', () => {
    const query = `DROP TABLE IF EXISTS table_to_merge_c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1522', () => {
    const query = `DROP TABLE IF EXISTS merge_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1523', () => {
    const query = `drop table if exists left_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1524', () => {
    const query = `drop table if exists middle_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1525', () => {
    const query = `drop table if exists right_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1526', () => {
    const query = `DROP TABLE IF EXISTS constCondOptimization;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1527', () => {
    const query = `DROP TABLE constCondOptimization;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1528', () => {
    const query = `DROP TABLE IF EXISTS 02418_test SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1529', () => {
    const query = `DROP TABLE 02418_test SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1530', () => {
    const query = `DROP TABLE 02418_test_another SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1531', () => {
    const query = `DROP TABLE IF EXISTS 02417_test SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1532', () => {
    const query = `DROP TABLE 02417_test SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1533', () => {
    const query = `DROP TABLE 02417_test_another SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1534', () => {
    const query = `drop row policy if exists filter on tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1535', () => {
    const query = `drop row policy filter on tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1536', () => {
    const query = `DROP TABLE IF EXISTS 02416_rocksdb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1537', () => {
    const query = `DROP TABLE IF EXISTS 02416_test SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1538', () => {
    const query = `DROP TABLE IF EXISTS 02416_test_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1539', () => {
    const query = `DROP TABLE IF EXISTS test02416;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1540', () => {
    const query = `DROP TABLE test02416;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1541', () => {
    const query = `DROP TABLE IF EXISTS data_02411;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1542', () => {
    const query = `drop table if exists pr_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1543', () => {
    const query = `drop table if exists dist_t_different_dbs;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1544', () => {
    const query = `drop table if exists shard_1.t_different_dbs;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1545', () => {
    const query = `drop table if exists t_different_dbs;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1546', () => {
    const query = `drop table if exists dist_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1547', () => {
    const query = `DROP TABLE IF EXISTS lwd_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1548', () => {
    const query = `DROP TABLE lwd_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1549', () => {
    const query = `DROP TABLE IF EXISTS ttl_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1550', () => {
    const query = `DROP TABLE IF EXISTS test_inserts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1551', () => {
    const query = `DROP TABLE test_inserts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1552', () => {
    const query = `drop table if exists local_t_l5ydey;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1553', () => {
    const query = `DROP DICTIONARY IF EXISTS test_dictionary_10_shards;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1554', () => {
    const query = `DROP DICTIONARY test_dictionary_10_shards;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1555', () => {
    const query = `DROP DICTIONARY IF EXISTS test_dictionary_10_shards_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1556', () => {
    const query = `DROP DICTIONARY test_dictionary_10_shards_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1557', () => {
    const query = `DROP DICTIONARY IF EXISTS test_complex_dictionary_10_shards;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1558', () => {
    const query = `DROP DICTIONARY test_complex_dictionary_10_shards;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1559', () => {
    const query = `DROP DICTIONARY IF EXISTS test_dictionary_10_shards_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1560', () => {
    const query = `DROP DICTIONARY test_dictionary_10_shards_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1561', () => {
    const query = `DROP DICTIONARY IF EXISTS test_dictionary_10_shards_incremental;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1562', () => {
    const query = `DROP TABLE IF EXISTS userid_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1563', () => {
    const query = `DROP TABLE IF EXISTS userid_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1564', () => {
    const query = `DROP TABLE IF EXISTS userid_set2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1565', () => {
    const query = `DROP TABLE userid_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1566', () => {
    const query = `DROP TABLE userid_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1567', () => {
    const query = `DROP TABLE userid_set2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1568', () => {
    const query = `DROP TABLE IF EXISTS t_parse_tuples;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1569', () => {
    const query = `drop table if exists test_02381;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1570', () => {
    const query = `drop table if exists test_02381_compress;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1571', () => {
    const query = `drop table if exists test_02381_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1572', () => {
    const query = `DROP TABLE IF EXISTS part_log_profile_events_r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1573', () => {
    const query = `DROP TABLE IF EXISTS part_log_profile_events_r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1574', () => {
    const query = `DROP TABLE part_log_profile_events_r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1575', () => {
    const query = `DROP TABLE part_log_profile_events_r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1576', () => {
    const query = `DROP TABLE IF EXISTS test_table_in;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1577', () => {
    const query = `DROP TABLE IF EXISTS test_table_compound;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1578', () => {
    const query = `DROP TABLE test_table_compound;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1579', () => {
    const query = `DROP TABLE IF EXISTS optimize_sorting;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1580', () => {
    const query = `DROP TABLE IF EXISTS t_nested_modify;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1581', () => {
    const query = `DROP TABLE t_nested_modify;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1582', () => {
    const query = `DROP TABLE IF EXISTS t_modify_from_lc_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1583', () => {
    const query = `DROP TABLE IF EXISTS t_modify_from_lc_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1584', () => {
    const query = `DROP TABLE IF EXISTS quorum3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1585', () => {
    const query = `DROP TABLE quorum1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1586', () => {
    const query = `DROP TABLE quorum2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1587', () => {
    const query = `DROP TABLE quorum3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1588', () => {
    const query = `drop table if exists test_02377;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1589', () => {
    const query = `drop table test_02377;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1590', () => {
    const query = `DROP TABLE IF EXISTS special_set_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1591', () => {
    const query = `DROP TABLE special_set_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1592', () => {
    const query = `DROP TABLE IF EXISTS test_table_for_in;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1593', () => {
    const query = `DROP TABLE test_table_for_in;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1594', () => {
    const query = `DROP TABLE IF EXISTS t_in_tuple_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1595', () => {
    const query = `DROP TABLE IF EXISTS video_log_result;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1596', () => {
    const query = `DROP TABLE test_02327;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1597', () => {
    const query = `DROP TABLE IF EXISTS Customers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1598', () => {
    const query = `drop table if exists EventLog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1599', () => {
    const query = `DROP TABLE IF EXISTS mv_expand_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1600', () => {
    const query = `DROP TABLE IF EXISTS Versions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1601', () => {
    const query = `DROP TABLE IF EXISTS Bin_at_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1602', () => {
    const query = `DROP TABLE IF EXISTS array_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1603', () => {
    const query = `DROP TABLE IF EXISTS Ledger;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1604', () => {
    const query = `DROP TABLE IF EXISTS kql_table1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1605', () => {
    const query = `DROP TABLE IF EXISTS kql_table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1606', () => {
    const query = `DROP TABLE IF EXISTS test_lookup_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1607', () => {
    const query = `DROP TABLE test_lookup_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1608', () => {
    const query = `drop table if exists consumer_02366;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1609', () => {
    const query = `drop table if exists producer_02366;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1610', () => {
    const query = `drop table if exists mv_02366;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1611', () => {
    const query = `drop table consumer_02366;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1612', () => {
    const query = `drop table producer_02366;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1613', () => {
    const query = `drop table mv_02366;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1614', () => {
    const query = `DROP TABLE IF EXISTS map_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1615', () => {
    const query = `DROP TABLE map_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1616', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1617', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS t2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1618', () => {
    const query = `DROP TABLE tab1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1619', () => {
    const query = `DROP TABLE tab_f64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1620', () => {
    const query = `DROP TABLE tab_f32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1621', () => {
    const query = `DROP TABLE tab_f16;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1622', () => {
    const query = `DROP TABLE tab_bf16;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1623', () => {
    const query = `DROP TABLE tab_i8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1624', () => {
    const query = `drop table if exists order;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1625', () => {
    const query = `DROP TABLE IF EXISTS t_2354_dist_with_external_aggr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1626', () => {
    const query = `DROP TABLE t_2354_dist_with_external_aggr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1627', () => {
    const query = `drop table if exists n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1628', () => {
    const query = `drop table n;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1629', () => {
    const query = `DROP TABLE IF EXISTS replicated_table_r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1630', () => {
    const query = `DROP TABLE IF EXISTS replicated_table_r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1631', () => {
    const query = `DROP TABLE IF EXISTS t_light_r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1632', () => {
    const query = `DROP TABLE IF EXISTS t_light_r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1633', () => {
    const query = `DROP TABLE IF EXISTS t_light_sync_r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1634', () => {
    const query = `DROP TABLE IF EXISTS t_light_sync_r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1635', () => {
    const query = `DROP TABLE IF EXISTS t_merge_tree SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1636', () => {
    const query = `DROP TABLE IF EXISTS t_replicated_merge_tree SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1637', () => {
    const query = `DROP TABLE t_merge_tree SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1638', () => {
    const query = `DROP TABLE t_replicated_merge_tree SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1639', () => {
    const query = `DROP TABLE IF EXISTS t_obj SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1640', () => {
    const query = `DROP TABLE t_obj SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1641', () => {
    const query = `drop table if exists t_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1642', () => {
    const query = `drop table if exists test_tz_hour;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1643', () => {
    const query = `drop table test_tz_hour;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1644', () => {
    const query = `DROP TABLE IF EXISTS nnd;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1645', () => {
    const query = `DROP TABLE IF EXISTS tab_x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1646', () => {
    const query = `drop table if exists dist_02346;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1647', () => {
    const query = `drop table if exists shard_0.data_02346;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1648', () => {
    const query = `drop table if exists shard_1.data_02346;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1649', () => {
    const query = `drop table if exists table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1650', () => {
    const query = `drop table if exists table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1651', () => {
    const query = `drop table if exists v_numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1652', () => {
    const query = `DROP TABLE IF EXISTS trailing_comma_1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1653', () => {
    const query = `DROP TABLE trailing_comma_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1654', () => {
    const query = `DROP TABLE IF EXISTS trailing_comma_2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1655', () => {
    const query = `DROP TABLE trailing_comma_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1656', () => {
    const query = `DROP TABLE IF EXISTS trailing_comma_3 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1657', () => {
    const query = `DROP TABLE trailing_comma_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1658', () => {
    const query = `drop table if exists t_distinct_limit;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1659', () => {
    const query = `DROP TABLE IF EXISTS t_s3_compressed_blocks;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1660', () => {
    const query = `DROP TABLE t_s3_compressed_blocks;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1661', () => {
    const query = `DROP TABLE IF EXISTS test_table_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1662', () => {
    const query = `DROP TABLE test_table_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1663', () => {
    const query = `DROP TABLE IF EXISTS proj_agg_02343;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1664', () => {
    const query = `DROP TABLE IF EXISTS data_02342;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1665', () => {
    const query = `DROP TABLE IF EXISTS window_view_02342;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1666', () => {
    const query = `DROP TABLE data_02342;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1667', () => {
    const query = `DROP TABLE window_view_02342;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1668', () => {
    const query = `DROP DATABASE IF EXISTS 02339_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1669', () => {
    const query = `DROP TABLE IF EXISTS 02339_db.test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1670', () => {
    const query = `DROP TABLE 02339_db.test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1671', () => {
    const query = `DROP DATABASE 02339_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1672', () => {
    const query = `DROP DATABASE IF EXISTS 02337_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1673', () => {
    const query = `DROP TABLE IF EXISTS 02337_db.test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1674', () => {
    const query = `DROP TABLE 02337_db.test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1675', () => {
    const query = `DROP DATABASE 02337_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1676', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_s3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1677', () => {
    const query = `DROP TABLE t_sparse_s3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1678', () => {
    const query = `DROP TABLE IF EXISTS segfault;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1679', () => {
    const query = `DROP TABLE IF EXISTS segfault_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1680', () => {
    const query = `drop table if exists t_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1681', () => {
    const query = `drop index i_a on t_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1682', () => {
    const query = `drop index if exists i_a on t_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1683', () => {
    const query = `drop table t_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1684', () => {
    const query = `DROP TABLE IF EXISTS decimal;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1685', () => {
    const query = `DROP ROW POLICY IF EXISTS test_filter_policy ON test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1686', () => {
    const query = `DROP ROW POLICY IF EXISTS test_filter_policy_2 ON test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1687', () => {
    const query = `DROP ROW POLICY test_filter_policy ON test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1688', () => {
    const query = `DROP ROW POLICY test_filter_policy_2 ON test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1689', () => {
    const query = `DROP TABLE IF EXISTS merge_table_standard_delete;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1690', () => {
    const query = `DROP TABLE merge_table_standard_delete;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1691', () => {
    const query = `drop table if exists t_light;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1692', () => {
    const query = `drop table t_light;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1693', () => {
    const query = `DROP TABLE  t_large;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1694', () => {
    const query = `DROP TABLE t_proj;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1695', () => {
    const query = `drop table if exists distinct_in_order sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1696', () => {
    const query = `drop table if exists distinct_cardinality_low sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1697', () => {
    const query = `drop table if exists ordinary_distinct sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1698', () => {
    const query = `drop table if exists distinct_in_order;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1699', () => {
    const query = `drop table if exists ordinary_distinct;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1700', () => {
    const query = `drop table if exists distinct_cardinality_low;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1701', () => {
    const query = `drop table if exists sorting_key_empty_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1702', () => {
    const query = `drop table if exists sorting_key_contain_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1703', () => {
    const query = `drop table sorting_key_empty_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1704', () => {
    const query = `drop table sorting_key_contain_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1705', () => {
    const query = `DROP TABLE IF EXISTS ipv4_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1706', () => {
    const query = `DROP TABLE ipv4_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1707', () => {
    const query = `DROP TABLE IF EXISTS ipv6_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1708', () => {
    const query = `DROP TABLE ipv6_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1709', () => {
    const query = `DROP TABLE IF EXISTS test02315;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1710', () => {
    const query = `DROP TABLE test02315;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1711', () => {
    const query = `DROP TABLE IF EXISTS codecTest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1712', () => {
    const query = `DROP TABLE IF EXISTS test02313;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1713', () => {
    const query = `DROP TABLE test02313;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1714', () => {
    const query = `drop table if exists test_02312;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1715', () => {
    const query = `drop table test_02312;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1716', () => {
    const query = `DROP TABLE IF EXISTS bug_36995;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1717', () => {
    const query = `DROP TABLE bug_36995;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1718', () => {
    const query = `drop table if exists test_zkinsert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1719', () => {
    const query = `drop table if exists id_val;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1720', () => {
    const query = `drop table id_val;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1721', () => {
    const query = `DROP TABLE IF EXISTS t_parts_profile_events;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1722', () => {
    const query = `DROP TABLE t_parts_profile_events;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1723', () => {
    const query = `drop table if exists test_02302;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1724', () => {
    const query = `drop table test_02302;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1725', () => {
    const query = `drop table if exists test_agg_proj_02302;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1726', () => {
    const query = `drop table test_agg_proj_02302;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1727', () => {
    const query = `DROP TABLE IF EXISTS lc_nullable_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1728', () => {
    const query = `DROP TABLE lc_nullable_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1729', () => {
    const query = `DROP TABLE IF EXISTS null_before SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1730', () => {
    const query = `DROP TABLE IF EXISTS t_ttl_non_deterministic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1731', () => {
    const query = `drop table if exists data_02295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1732', () => {
    const query = `drop table data_02295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1733', () => {
    const query = `drop table if exists non_const_needle;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1734', () => {
    const query = `drop table if exists data_02294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1735', () => {
    const query = `drop table data_02294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1736', () => {
    const query = `DROP SETTINGS PROFILE IF EXISTS 02294_profile1, 02294_profile2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1737', () => {
    const query = `DROP TABLE IF EXISTS test_hierarchy_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1738', () => {
    const query = `DROP DICTIONARY IF EXISTS hierarchy_flat_dictionary_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1739', () => {
    const query = `DROP DICTIONARY hierarchy_flat_dictionary_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1740', () => {
    const query = `DROP DICTIONARY IF EXISTS hierarchy_hashed_dictionary_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1741', () => {
    const query = `DROP DICTIONARY hierarchy_hashed_dictionary_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1742', () => {
    const query = `DROP DICTIONARY IF EXISTS hierarchy_hashed_array_dictionary_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1743', () => {
    const query = `DROP DICTIONARY hierarchy_hashed_array_dictionary_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1744', () => {
    const query = `DROP TABLE test_hierarchy_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1745', () => {
    const query = `drop table if exists data_02293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1746', () => {
    const query = `drop table data_02293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1747', () => {
    const query = `DROP TABLE IF EXISTS h3_indexes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1748', () => {
    const query = `DROP TABLE h3_indexes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1749', () => {
    const query = `DROP TABLE IF EXISTS ignore_auto_increment SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1750', () => {
    const query = `DROP TABLE IF EXISTS t_nested_detach;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1751', () => {
    const query = `DROP TABLE IF EXISTS test_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1752', () => {
    const query = `DROP TABLE IF EXISTS test_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1753', () => {
    const query = `DROP TABLE IF EXISTS user_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1754', () => {
    const query = `DROP TABLE IF EXISTS user_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1755', () => {
    const query = `DROP TABLE IF EXISTS test_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1756', () => {
    const query = `DROP TABLE IF EXISTS test_dictionary_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1757', () => {
    const query = `DROP VIEW test_dictionary_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1758', () => {
    const query = `DROP TABLE test_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1759', () => {
    const query = `DROP TABLE IF EXISTS t_object_convert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1760', () => {
    const query = `DROP TABLE t_object_convert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1761', () => {
    const query = `DROP TABLE t_object_convert2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1762', () => {
    const query = `DROP TABLE IF EXISTS t_vertical_merges;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1763', () => {
    const query = `DROP TABLE IF EXISTS t_tuple_numeric;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1764', () => {
    const query = `DROP TABLE t_tuple_numeric;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1765', () => {
    const query = `DROP TABLE IF EXISTS issue32107;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1766', () => {
    const query = `DROP TABLE IF EXISTS vec1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1767', () => {
    const query = `DROP TABLE IF EXISTS vec1f;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1768', () => {
    const query = `DROP TABLE IF EXISTS vec1d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1769', () => {
    const query = `DROP TABLE vec1f;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1770', () => {
    const query = `DROP TABLE vec1d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1771', () => {
    const query = `DROP TABLE IF EXISTS vec2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1772', () => {
    const query = `DROP TABLE IF EXISTS vec2f;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1773', () => {
    const query = `DROP TABLE IF EXISTS vec2d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1774', () => {
    const query = `DROP TABLE vec2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1775', () => {
    const query = `DROP TABLE vec2f;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1776', () => {
    const query = `DROP TABLE vec2d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1777', () => {
    const query = `DROP TABLE IF EXISTS table_for_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1778', () => {
    const query = `DROP TABLE IF EXISTS replace_partition_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1779', () => {
    const query = `DROP TABLE IF EXISTS replace_partition_dest1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1780', () => {
    const query = `DROP TABLE IF EXISTS replace_partition_dest1_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1781', () => {
    const query = `DROP TABLE IF EXISTS replace_partition_dest2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1782', () => {
    const query = `DROP TABLE IF EXISTS replace_partition_dest2_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1783', () => {
    const query = `DROP TABLE IF EXISTS github_events;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1784', () => {
    const query = `DROP TABLE t_02267_collation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1785', () => {
    const query = `DROP TABLE IF EXISTS 02267_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1786', () => {
    const query = `DROP TABLE 02267_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1787', () => {
    const query = `DROP TABLE IF EXISTS t_02267;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1788', () => {
    const query = `DROP TABLE IF EXISTS 02266_auto_add_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1789', () => {
    const query = `DROP DATABASE IF EXISTS 02265_atomic_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1790', () => {
    const query = `DROP DATABASE IF EXISTS 02265_ordinary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1791', () => {
    const query = `drop table if exists per_table_ttl_02265;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1792', () => {
    const query = `drop table per_table_ttl_02265;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1793', () => {
    const query = `drop table if exists ttl_02265;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1794', () => {
    const query = `drop table if exists ttl_02265_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1795', () => {
    const query = `DROP TABLE IF EXISTS most_ordinary_mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1796', () => {
    const query = `DROP TABLE IF EXISTS alter_enum_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1797', () => {
    const query = `drop table if exists test_02250;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1798', () => {
    const query = `drop table test_02250;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1799', () => {
    const query = `drop table if exists test_02249;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1800', () => {
    const query = `drop table test_02249;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1801', () => {
    const query = `DROP TABLE IF EXISTS t_flatten_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1802', () => {
    const query = `DROP TABLE IF EXISTS t_flatten_object;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1803', () => {
    const query = `DROP TABLE IF EXISTS weird_partitions_02245;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1804', () => {
    const query = `DROP TABLE weird_partitions_02245;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1805', () => {
    const query = `drop table if exists test_02245;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1806', () => {
    const query = `drop table if exists test_02245_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1807', () => {
    const query = `drop table if exists test_02245_s3_nested_parquet1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1808', () => {
    const query = `drop table if exists test_02245_s3_nested_parquet2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1809', () => {
    const query = `drop table if exists test_02245_s3_nested_arrow1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1810', () => {
    const query = `drop table if exists test_02245_s3_nested_arrow2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1811', () => {
    const query = `drop table if exists test_02245_s3_nested_orc1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1812', () => {
    const query = `drop table if exists test_02245_s3_nested_orc2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1813', () => {
    const query = `drop table if exists with_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1814', () => {
    const query = `drop table if exists without_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1815', () => {
    const query = `drop table with_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1816', () => {
    const query = `drop table without_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1817', () => {
    const query = `DROP TABLE IF EXISTS lc_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1818', () => {
    const query = `DROP TABLE IF EXISTS test_table_ipv4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1819', () => {
    const query = `DROP TABLE test_table_ipv4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1820', () => {
    const query = `DROP TABLE IF EXISTS test_table_ipv4_materialized;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1821', () => {
    const query = `DROP TABLE test_table_ipv4_materialized;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1822', () => {
    const query = `DROP TABLE IF EXISTS test_table_ipv6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1823', () => {
    const query = `DROP TABLE test_table_ipv6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1824', () => {
    const query = `DROP TABLE IF EXISTS test_table_ipv6_materialized;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1825', () => {
    const query = `DROP TABLE test_table_ipv6_materialized;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1826', () => {
    const query = `DROP TABLE IF EXISTS t_subcolumns_sizes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1827', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_02235;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1828', () => {
    const query = `DROP TABLE t_sparse_02235;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1829', () => {
    const query = `DROP TABLE IF EXISTS t_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1830', () => {
    const query = `DROP TABLE IF EXISTS t_random_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1831', () => {
    const query = `DROP TABLE IF EXISTS dict_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1832', () => {
    const query = `DROP TABLE dict_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1833', () => {
    const query = `DROP TABLE IF EXISTS ev;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1834', () => {
    const query = `DROP TABLE IF EXISTS idx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1835', () => {
    const query = `drop table if exists data_02233;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1836', () => {
    const query = `drop table data_02233;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1837', () => {
    const query = `DROP TABLE IF EXISTS t_inter_02233;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1838', () => {
    const query = `DROP TABLE IF EXISTS lower_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1839', () => {
    const query = `DROP TABLE lower_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1840', () => {
    const query = `DROP TABLE IF EXISTS broken;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1841', () => {
    const query = `DROP TABLE broken;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1842', () => {
    const query = `DROP TABLE IF EXISTS t_functions_to_subcolumns_alias;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1843', () => {
    const query = `DROP TABLE t_functions_to_subcolumns_alias;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1844', () => {
    const query = `DROP TABLE IF EXISTS hierarchy_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1845', () => {
    const query = `DROP DICTIONARY IF EXISTS hierarchy_flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1846', () => {
    const query = `DROP DICTIONARY hierarchy_flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1847', () => {
    const query = `DROP TABLE hierarchy_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1848', () => {
    const query = `drop table if exists buffer_02231;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1849', () => {
    const query = `drop table if exists out_02231;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1850', () => {
    const query = `drop table if exists in_02231;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1851', () => {
    const query = `drop table if exists mv_02231;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1852', () => {
    const query = `drop table buffer_02231;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1853', () => {
    const query = `drop table out_02231;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1854', () => {
    const query = `drop table in_02231;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1855', () => {
    const query = `drop table mv_02231;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1856', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_sizing_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1857', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_sizing_sec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1858', () => {
    const query = `drop table if exists data_02230_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1859', () => {
    const query = `drop table if exists null_02230_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1860', () => {
    const query = `drop table data_02230_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1861', () => {
    const query = `drop table null_02230_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1862', () => {
    const query = `drop table if exists data_02230_column_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1863', () => {
    const query = `drop table if exists null_02230_column_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1864', () => {
    const query = `drop table data_02230_column_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1865', () => {
    const query = `drop table null_02230_column_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1866', () => {
    const query = `drop table if exists data_rep_02228 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1867', () => {
    const query = `DROP TABLE IF EXISTS bf_tokenbf_lowcard_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1868', () => {
    const query = `DROP TABLE IF EXISTS bf_ngram_lowcard_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1869', () => {
    const query = `DROP TABLE bf_tokenbf_lowcard_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1870', () => {
    const query = `DROP TABLE bf_ngram_lowcard_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1871', () => {
    const query = `DROP TABLE IF EXISTS calendar;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1872', () => {
    const query = `DROP TABLE IF EXISTS events32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1873', () => {
    const query = `DROP TABLE IF EXISTS t_async_insert_table_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1874', () => {
    const query = `DROP TABLE t_async_insert_table_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1875', () => {
    const query = `drop table if exists dst_02224;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1876', () => {
    const query = `drop table if exists src_02224;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1877', () => {
    const query = `drop table src_02224;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1878', () => {
    const query = `drop table dst_02224;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1879', () => {
    const query = `DROP TABLE IF EXISTS data_02222;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1880', () => {
    const query = `DROP TABLE data_02222;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1881', () => {
    const query = `DROP TABLE IF EXISTS t_ttl_move_if_exists;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1882', () => {
    const query = `DROP TABLE IF EXISTS t_key_condition_float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1883', () => {
    const query = `DROP TABLE t_key_condition_float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1884', () => {
    const query = `DROP TABLE IF EXISTS minimum_sample_size_continuos;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1885', () => {
    const query = `DROP TABLE IF EXISTS minimum_sample_size_conversion;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1886', () => {
    const query = `DROP TABLE IF EXISTS 02005_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1887', () => {
    const query = `DROP TABLE 02005_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1888', () => {
    const query = `DROP TABLE IF EXISTS t_ephemeral_02205_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1889', () => {
    const query = `DROP TABLE IF EXISTS t_async_insert_02193_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1890', () => {
    const query = `DROP TABLE IF EXISTS t_nested_with_dots;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1891', () => {
    const query = `DROP TABLE IF EXISTS 02188_test_dictionary_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1892', () => {
    const query = `DROP DICTIONARY IF EXISTS 02188_test_dictionary_simple_primary_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1893', () => {
    const query = `DROP DICTIONARY 02188_test_dictionary_simple_primary_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1894', () => {
    const query = `DROP DICTIONARY IF EXISTS 02188_test_dictionary_complex_primary_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1895', () => {
    const query = `DROP DICTIONARY 02188_test_dictionary_complex_primary_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1896', () => {
    const query = `DROP TABLE 02188_test_dictionary_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1897', () => {
    const query = `DROP TABLE IF EXISTS test_02187;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1898', () => {
    const query = `DROP TABLE IF EXISTS 02186_range_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1899', () => {
    const query = `DROP DICTIONARY IF EXISTS 02186_range_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1900', () => {
    const query = `DROP DICTIONARY 02186_range_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1901', () => {
    const query = `DROP TABLE 02186_range_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1902', () => {
    const query = `DROP TABLE IF EXISTS 02185_range_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1903', () => {
    const query = `DROP DICTIONARY IF EXISTS 02185_range_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1904', () => {
    const query = `DROP DICTIONARY 02185_range_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1905', () => {
    const query = `DROP TABLE 02185_range_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1906', () => {
    const query = `DROP TABLE IF EXISTS mergeTree_02184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1907', () => {
    const query = `DROP TABLE IF EXISTS distributed_02184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1908', () => {
    const query = `DROP TABLE IF EXISTS buffer_02184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1909', () => {
    const query = `DROP TABLE IF EXISTS merge_02184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1910', () => {
    const query = `DROP TABLE IF EXISTS null_02184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1911', () => {
    const query = `DROP TABLE IF EXISTS file_02184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1912', () => {
    const query = `DROP TABLE IF EXISTS memory_02184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1913', () => {
    const query = `DROP TABLE IF EXISTS log_02184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1914', () => {
    const query = `DROP TABLE IF EXISTS ting_log_02184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1915', () => {
    const query = `DROP TABLE IF EXISTS stripe_log_02184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1916', () => {
    const query = `DROP TABLE IF EXISTS 02184_range_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1917', () => {
    const query = `DROP DICTIONARY IF EXISTS 02184_range_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1918', () => {
    const query = `DROP DICTIONARY 02184_range_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1919', () => {
    const query = `DROP TABLE 02184_range_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1920', () => {
    const query = `DROP TABLE IF EXISTS t_nested_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1921', () => {
    const query = `DROP TABLE t_nested_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1922', () => {
    const query = `drop table if exists ips_v6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1923', () => {
    const query = `drop table ips_v6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1924', () => {
    const query = `drop table if exists ipv6_test26473;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1925', () => {
    const query = `drop table ipv6_test26473;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1926', () => {
    const query = `DROP TABLE table_02184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1927', () => {
    const query = `DROP TABLE test_optimize_exception;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1928', () => {
    const query = `DROP TABLE numbers1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1929', () => {
    const query = `DROP TABLE numbers2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1930', () => {
    const query = `DROP TABLE numbers3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1931', () => {
    const query = `DROP TABLE test_view_filtered;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1932', () => {
    const query = `DROP TABLE log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1933', () => {
    const query = `DROP TABLE log1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1934', () => {
    const query = `DROP TABLE mem;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1935', () => {
    const query = `DROP TABLE val;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1936', () => {
    const query = `DROP TABLE val2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1937', () => {
    const query = `DROP TABLE IF EXISTS lol;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1938', () => {
    const query = `DROP TABLE kek;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1939', () => {
    const query = `DROP TABLE lol;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1940', () => {
    const query = `DROP TABLE IF EXISTS 02183_dictionary_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1941', () => {
    const query = `DROP DICTIONARY IF EXISTS 02183_flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1942', () => {
    const query = `DROP DICTIONARY 02183_flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1943', () => {
    const query = `DROP DICTIONARY IF EXISTS 02183_hashed_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1944', () => {
    const query = `DROP DICTIONARY 02183_hashed_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1945', () => {
    const query = `DROP DICTIONARY IF EXISTS 02183_hashed_array_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1946', () => {
    const query = `DROP DICTIONARY 02183_hashed_array_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1947', () => {
    const query = `DROP DICTIONARY IF EXISTS 02183_cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1948', () => {
    const query = `DROP DICTIONARY 02183_cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1949', () => {
    const query = `DROP DICTIONARY IF EXISTS 02183_direct_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1950', () => {
    const query = `DROP DICTIONARY 02183_direct_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1951', () => {
    const query = `DROP TABLE 02183_dictionary_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1952', () => {
    const query = `DROP TABLE IF EXISTS ip_trie_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1953', () => {
    const query = `DROP DICTIONARY IF EXISTS 02183_ip_trie_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1954', () => {
    const query = `DROP DICTIONARY 02183_ip_trie_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1955', () => {
    const query = `DROP TABLE ip_trie_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1956', () => {
    const query = `DROP TABLE IF EXISTS 02183_polygon_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1957', () => {
    const query = `DROP DICTIONARY IF EXISTS 02183_polygon_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1958', () => {
    const query = `DROP DICTIONARY 02183_polygon_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1959', () => {
    const query = `DROP TABLE 02183_polygon_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1960', () => {
    const query = `DROP TABLE IF EXISTS 02183_range_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1961', () => {
    const query = `DROP DICTIONARY IF EXISTS 02183_range_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1962', () => {
    const query = `DROP DICTIONARY 02183_range_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1963', () => {
    const query = `DROP TABLE 02183_range_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1964', () => {
    const query = `DROP TABLE IF EXISTS 02183_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1965', () => {
    const query = `DROP TABLE 02183_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1966', () => {
    const query = `DROP TABLE IF EXISTS 02183_ip_trie_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1967', () => {
    const query = `DROP TABLE 02183_ip_trie_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1968', () => {
    const query = `DROP TABLE IF EXISTS 02181_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1969', () => {
    const query = `DROP DICTIONARY IF EXISTS 02181_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1970', () => {
    const query = `DROP DICTIONARY 02181_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1971', () => {
    const query = `DROP TABLE 02181_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1972', () => {
    const query = `drop table if exists t_group_by_lowcardinality;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1973', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_detach;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1974', () => {
    const query = `DROP TABLE t_sparse_detach;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1975', () => {
    const query = `DROP TABLE IF EXISTS 02179_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1976', () => {
    const query = `DROP DICTIONARY IF EXISTS 02179_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1977', () => {
    const query = `DROP DICTIONARY 02179_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1978', () => {
    const query = `DROP TABLE 02179_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1979', () => {
    const query = `DROP DATABASE IF EXISTS dict_db_02179;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1980', () => {
    const query = `DROP DATABASE IF EXISTS empty_db_02179;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1981', () => {
    const query = `DROP DICTIONARY dict_db_02179.dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1982', () => {
    const query = `DROP TABLE dict_db_02179.dict_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1983', () => {
    const query = `DROP DATABASE dict_db_02179;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1984', () => {
    const query = `DROP DATABASE empty_db_02179;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1985', () => {
    const query = `DROP TABLE IF EXISTS test_degs_to_rads;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1986', () => {
    const query = `DROP TABLE test_degs_to_rads;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1987', () => {
    const query = `DROP TABLE IF EXISTS test_rads_to_degs;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1988', () => {
    const query = `DROP TABLE test_rads_to_degs;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1989', () => {
    const query = `DROP TABLE IF EXISTS TESTTABLE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1990', () => {
    const query = `DROP TABLE TESTTABLE;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1991', () => {
    const query = `DROP TABLE IF EXISTS agg;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1992', () => {
    const query = `DROP TABLE agg;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1993', () => {
    const query = `drop table if exists data_02177;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1994', () => {
    const query = `drop table data_02177;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1995', () => {
    const query = `DROP TABLE IF EXISTS left;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1996', () => {
    const query = `DROP TABLE IF EXISTS right;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1997', () => {
    const query = `DROP TABLE IF EXISTS t02176;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1998', () => {
    const query = `DROP TABLE t02176;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 1999', () => {
    const query = `drop table if exists data_02176;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2000', () => {
    const query = `drop table data_02176;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2001', () => {
    const query = `DROP TABLE IF EXISTS 02176_test_simple_key_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2002', () => {
    const query = `DROP DICTIONARY IF EXISTS 02176_test_simple_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2003', () => {
    const query = `DROP TABLE 02176_test_simple_key_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2004', () => {
    const query = `DROP TABLE IF EXISTS 02176_test_complex_key_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2005', () => {
    const query = `DROP DICTIONARY IF EXISTS 02176_test_complex_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2006', () => {
    const query = `DROP DICTIONARY 02176_test_complex_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2007', () => {
    const query = `DROP TABLE 02176_test_complex_key_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2008', () => {
    const query = `drop table if exists local_02175;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2009', () => {
    const query = `drop table if exists dist_02175;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2010', () => {
    const query = `drop table local_02175;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2011', () => {
    const query = `drop table dist_02175;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2012', () => {
    const query = `DROP TABLE mv1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2013', () => {
    const query = `DROP TABLE mv2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2014', () => {
    const query = `DROP TABLE mv3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2015', () => {
    const query = `DROP TABLE IF EXISTS table_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2016', () => {
    const query = `DROP TABLE IF EXISTS counter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2017', () => {
    const query = `DROP TABLE IF EXISTS vcounter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2018', () => {
    const query = `DROP TABLE vcounter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2019', () => {
    const query = `DROP TABLE counter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2020', () => {
    const query = `DROP TABLE IF EXISTS test_nested_default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2021', () => {
    const query = `DROP TABLE test_nested_default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2022', () => {
    const query = `DROP TABLE IF EXISTS test_tb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2023', () => {
    const query = `DROP VIEW IF EXISTS test_view_tb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2024', () => {
    const query = `DROP TABLE IF EXISTS 02162_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2025', () => {
    const query = `DROP DICTIONARY IF EXISTS 02162_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2026', () => {
    const query = `DROP DICTIONARY 02162_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2027', () => {
    const query = `DROP TABLE 02162_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2028', () => {
    const query = `DROP TABLE IF EXISTS mean_ztest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2029', () => {
    const query = `DROP TABLE IF EXISTS proportions_ztest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2030', () => {
    const query = `DROP TABLE IF EXISTS t_02156_ololo_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2031', () => {
    const query = `DROP TABLE IF EXISTS t_02156_ololo_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2032', () => {
    const query = `DROP TABLE IF EXISTS t_02156_ololo_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2033', () => {
    const query = `DROP TABLE IF EXISTS t_02156_mt2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2034', () => {
    const query = `DROP TABLE IF EXISTS t_02156_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2035', () => {
    const query = `DROP TABLE IF EXISTS t_02156_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2036', () => {
    const query = `DROP TABLE IF EXISTS t_02156_merge1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2037', () => {
    const query = `DROP TABLE IF EXISTS t_02156_merge2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2038', () => {
    const query = `DROP TABLE IF EXISTS t_02156_merge3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2039', () => {
    const query = `DROP TABLE IF EXISTS t_02156_mt1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2040', () => {
    const query = `DROP TABLE IF EXISTS 02155_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2041', () => {
    const query = `DROP DICTIONARY IF EXISTS 02155_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2042', () => {
    const query = `DROP TABLE IF EXISTS 02155_test_dictionary_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2043', () => {
    const query = `DROP TABLE 02155_test_dictionary_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2044', () => {
    const query = `DROP DICTIONARY 02155_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2045', () => {
    const query = `DROP TABLE 02155_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2046', () => {
    const query = `drop table t02155_t64_tz;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2047', () => {
    const query = `drop table t02155_t_tz;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2048', () => {
    const query = `drop table if exists test_02152;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2049', () => {
    const query = `drop table test_02152;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2050', () => {
    const query = `drop table if exists table_02152;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2051', () => {
    const query = `drop table if exists tab_lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2052', () => {
    const query = `DROP TABLE IF EXISTS t_read_in_order;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2053', () => {
    const query = `DROP TABLE t_read_in_order;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2054', () => {
    const query = `DROP FUNCTION IF EXISTS 02148_test_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2055', () => {
    const query = `DROP FUNCTION 02148_test_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2056', () => {
    const query = `DROP FUNCTION IF EXISTS 02148_test_function_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2057', () => {
    const query = `DROP FUNCTION 02148_test_function_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2058', () => {
    const query = `DROP TABLE IF EXISTS 02148_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2059', () => {
    const query = `DROP TABLE 02148_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2060', () => {
    const query = `drop table if exists mv_02146;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2061', () => {
    const query = `DROP TABLE mv_to_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2062', () => {
    const query = `DROP TABLE destination_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2063', () => {
    const query = `DROP TABLE mv_to_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2064', () => {
    const query = `DROP TABLE destination_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2065', () => {
    const query = `DROP TABLE main;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2066', () => {
    const query = `DROP TABLE IF EXISTS errors_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2067', () => {
    const query = `DROP TABLE errors_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2068', () => {
    const query = `drop table if exists a8x;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2069', () => {
    const query = `DROP TABLE IF EXISTS 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2070', () => {
    const query = `DROP ROW POLICY IF EXISTS 02131_filter_1 ON 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2071', () => {
    const query = `DROP ROW POLICY IF EXISTS 02131_filter_2 ON 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2072', () => {
    const query = `DROP ROW POLICY IF EXISTS 02131_filter_3 ON 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2073', () => {
    const query = `DROP ROW POLICY IF EXISTS 02131_filter_4 ON 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2074', () => {
    const query = `DROP ROW POLICY IF EXISTS 02131_filter_5 ON 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2075', () => {
    const query = `DROP ROW POLICY 02131_filter_1 ON 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2076', () => {
    const query = `DROP ROW POLICY 02131_filter_2 ON 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2077', () => {
    const query = `DROP ROW POLICY 02131_filter_3 ON 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2078', () => {
    const query = `DROP ROW POLICY 02131_filter_4 ON 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2079', () => {
    const query = `DROP ROW POLICY 02131_filter_5 ON 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2080', () => {
    const query = `DROP TABLE 02131_rqtable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2081', () => {
    const query = `DROP TABLE IF EXISTS t_index_non_materialized;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2082', () => {
    const query = `DROP TABLE t_index_non_materialized;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2083', () => {
    const query = `DROP TABLE IF EXISTS 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2084', () => {
    const query = `DROP ROW POLICY IF EXISTS 02131_filter_1 ON 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2085', () => {
    const query = `DROP ROW POLICY IF EXISTS 02131_filter_2 ON 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2086', () => {
    const query = `DROP ROW POLICY IF EXISTS 02131_filter_3 ON 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2087', () => {
    const query = `DROP ROW POLICY IF EXISTS 02131_filter_4 ON 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2088', () => {
    const query = `DROP ROW POLICY IF EXISTS 02131_filter_5 ON 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2089', () => {
    const query = `DROP ROW POLICY 02131_filter_1 ON 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2090', () => {
    const query = `DROP ROW POLICY 02131_filter_2 ON 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2091', () => {
    const query = `DROP ROW POLICY 02131_filter_3 ON 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2092', () => {
    const query = `DROP ROW POLICY 02131_filter_4 ON 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2093', () => {
    const query = `DROP ROW POLICY 02131_filter_5 ON 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2094', () => {
    const query = `DROP TABLE 02131_rptable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2095', () => {
    const query = `DROP TABLE IF EXISTS t_materialize_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2096', () => {
    const query = `DROP TABLE t_materialize_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2097', () => {
    const query = `drop table if exists ttl_test_02129;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2098', () => {
    const query = `drop table ttl_test_02129;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2099', () => {
    const query = `DROP TABLE IF EXISTS 02127_join_settings_with_persistency_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2100', () => {
    const query = `DROP TABLE IF EXISTS 02127_join_settings_with_persistency_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2101', () => {
    const query = `DROP FUNCTION IF EXISTS 02126_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2102', () => {
    const query = `DROP FUNCTION 02126_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2103', () => {
    const query = `DROP TABLE IF EXISTS alter_column_02126;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2104', () => {
    const query = `DROP FUNCTION IF EXISTS 02125_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2105', () => {
    const query = `DROP FUNCTION 02125_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2106', () => {
    const query = `DROP FUNCTION IF EXISTS 02125_function_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2107', () => {
    const query = `DROP FUNCTION IF EXISTS 02125_function_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2108', () => {
    const query = `DROP FUNCTION 02125_function_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2109', () => {
    const query = `DROP FUNCTION 02125_function_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2110', () => {
    const query = `drop table if exists mv1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2111', () => {
    const query = `drop table if exists mv2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2112', () => {
    const query = `DROP TABLE IF EXISTS 02125_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2113', () => {
    const query = `DROP DICTIONARY IF EXISTS 02125_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2114', () => {
    const query = `DROP TABLE IF EXISTS t_uncompressed_cache;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2115', () => {
    const query = `DROP TABLE t_uncompressed_cache;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2116', () => {
    const query = `DROP TABLE IF EXISTS insert_dedup_token1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2117', () => {
    const query = `DROP TABLE IF EXISTS insert_dedup_token2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2118', () => {
    const query = `DROP TABLE insert_dedup_token1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2119', () => {
    const query = `DROP TABLE insert_dedup_token2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2120', () => {
    const query = `drop table if exists test  sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2121', () => {
    const query = `drop table if exists test_mv_a sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2122', () => {
    const query = `drop table if exists test_mv_b sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2123', () => {
    const query = `drop table if exists test_mv_c sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2124', () => {
    const query = `drop table test_mv_a sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2125', () => {
    const query = `drop table test_mv_b sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2126', () => {
    const query = `drop table test_mv_c sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2127', () => {
    const query = `DROP TABLE IF EXISTS insert_dedup_token SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2128', () => {
    const query = `DROP TABLE insert_dedup_token SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2129', () => {
    const query = `DROP TABLE IF EXISTS table_MySQLWire;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2130', () => {
    const query = `DROP TABLE table_MySQLWire;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2131', () => {
    const query = `DROP TABLE IF EXISTS t_tuple_element;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2132', () => {
    const query = `DROP TABLE IF EXISTS t1_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2133', () => {
    const query = `DROP TABLE IF EXISTS t2_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2134', () => {
    const query = `DROP TABLE IF EXISTS t1_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2135', () => {
    const query = `DROP TABLE IF EXISTS t2_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2136', () => {
    const query = `DROP TABLE t1_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2137', () => {
    const query = `DROP TABLE t2_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2138', () => {
    const query = `DROP TABLE t1_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2139', () => {
    const query = `DROP TABLE t2_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2140', () => {
    const query = `DROP DATABASE test_02115;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2141', () => {
    const query = `DROP TABLE IF EXISTS t_map_contains;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2142', () => {
    const query = `DROP TABLE t_map_contains;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2143', () => {
    const query = `DROP TABLE IF EXISTS bool_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2144', () => {
    const query = `DROP TABLE IF EXISTS tabl_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2145', () => {
    const query = `DROP TABLE IF EXISTS tabl_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2146', () => {
    const query = `DROP TABLE tabl_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2147', () => {
    const query = `DROP TABLE tabl_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2148', () => {
    const query = `DROP TABLE IF EXISTS with_fill_date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2149', () => {
    const query = `DROP TABLE with_fill_date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2150', () => {
    const query = `drop table if exists set_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2151', () => {
    const query = `DROP DATABASE IF EXISTS 02111_modify_table_comment;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2152', () => {
    const query = `DROP DATABASE 02111_modify_table_comment;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2153', () => {
    const query = `DROP TABLE IF EXISTS map_extractKeyLike_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2154', () => {
    const query = `DROP TABLE map_extractKeyLike_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2155', () => {
    const query = `DROP FUNCTION 02103_test_function_with_nested_function_empty_args;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2156', () => {
    const query = `DROP FUNCTION 02103_test_function_with_nested_function_arg;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2157', () => {
    const query = `DROP FUNCTION 02103_test_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2158', () => {
    const query = `DROP FUNCTION 02102_test_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2159', () => {
    const query = `DROP FUNCTION 02101_test_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2160', () => {
    const query = `DROP FUNCTION 02101_test_function; --{serverError UNKNOWN_FUNCTION} DROP FUNCTION IF EXISTS 02101_test_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2161', () => {
    const query = `drop table if exists tbl_repr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2162', () => {
    const query = `DROP FUNCTION 02099_lambda_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2163', () => {
    const query = `DROP FUNCTION 02098_alias_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2164', () => {
    const query = `DROP TABLE IF EXISTS t_remove_sample_by;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2165', () => {
    const query = `DROP TABLE t_remove_sample_by;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2166', () => {
    const query = `DROP TABLE IF EXISTS polygons_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2167', () => {
    const query = `DROP DICTIONARY IF EXISTS polygons_test_dictionary_no_option;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2168', () => {
    const query = `DROP DICTIONARY polygons_test_dictionary_no_option;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2169', () => {
    const query = `DROP DICTIONARY polygons_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2170', () => {
    const query = `DROP TABLE polygons_test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2171', () => {
    const query = `DROP DATABASE IF EXISTS 02097_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2172', () => {
    const query = `DROP TABLE test_table_default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2173', () => {
    const query = `DROP FUNCTION 02096_test_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2174', () => {
    const query = `drop database if exists db_hang;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2175', () => {
    const query = `drop database if exists db_hang_temp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2176', () => {
    const query = `drop database db_hang;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2177', () => {
    const query = `drop table if exists utf8_overlap;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2178', () => {
    const query = `DROP TABLE IF EXISTS join_on_disk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2179', () => {
    const query = `DROP TABLE join_on_disk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2180', () => {
    const query = `DROP TABLE IF EXISTS partslost_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2181', () => {
    const query = `DROP TABLE IF EXISTS partslost_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2182', () => {
    const query = `DROP TABLE IF EXISTS partslost_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2183', () => {
    const query = `DROP TABLE IF EXISTS remote_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2184', () => {
    const query = `DROP TABLE remote_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2185', () => {
    const query = `DROP TABLE IF EXISTS alter_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2186', () => {
    const query = `DROP TABLE IF EXISTS test_tuple_filter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2187', () => {
    const query = `DROP TABLE IF EXISTS map_containsKeyLike_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2188', () => {
    const query = `DROP TABLE map_containsKeyLike_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2189', () => {
    const query = `DROP DATABASE IF EXISTS 02028_db ON CLUSTER test_shard_localhost;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2190', () => {
    const query = `DROP DATABASE 02028_db ON CLUSTER test_shard_localhost;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2191', () => {
    const query = `DROP TABLE IF EXISTS t_desc_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2192', () => {
    const query = `DROP TABLE t_desc_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2193', () => {
    const query = `DROP TABLE IF EXISTS t_comp_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2194', () => {
    const query = `DROP TABLE t_comp_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2195', () => {
    const query = `DROP DATABASE IF EXISTS 2025_test_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2196', () => {
    const query = `DROP TABLE IF EXISTS 2025_test_db.test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2197', () => {
    const query = `DROP TABLE IF EXISTS 2025_test_db.view_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2198', () => {
    const query = `DROP VIEW IF EXISTS test_view_different_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2199', () => {
    const query = `DROP DICTIONARY 2025_test_db.test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2200', () => {
    const query = `DROP TABLE 2025_test_db.test_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2201', () => {
    const query = `DROP TABLE 2025_test_db.view_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2202', () => {
    const query = `DROP VIEW test_view_different_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2203', () => {
    const query = `DROP DATABASE 2025_test_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2204', () => {
    const query = `DROP DICTIONARY IF EXISTS 2024_dictionary_with_comment;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2205', () => {
    const query = `DROP TABLE IF EXISTS t_transform_or;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2206', () => {
    const query = `DROP TABLE t_transform_or;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2207', () => {
    const query = `DROP TABLE IF EXISTS bf_tokenbf_array_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2208', () => {
    const query = `DROP TABLE IF EXISTS bf_ngram_array_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2209', () => {
    const query = `DROP TABLE bf_tokenbf_array_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2210', () => {
    const query = `DROP TABLE bf_ngram_array_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2211', () => {
    const query = `drop table if exists data_02021;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2212', () => {
    const query = `drop table data_02021;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2213', () => {
    const query = `DROP TABLE IF EXISTS test_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2214', () => {
    const query = `DROP TABLE test_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2215', () => {
    const query = `DROP TABLE IF EXISTS map_test_index_map_keys;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2216', () => {
    const query = `DROP TABLE map_test_index_map_keys;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2217', () => {
    const query = `DROP TABLE IF EXISTS map_test_index_map_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2218', () => {
    const query = `DROP TABLE map_test_index_map_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2219', () => {
    const query = `drop table if exists td1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2220', () => {
    const query = `drop table if exists td2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2221', () => {
    const query = `drop table if exists td3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2222', () => {
    const query = `drop table if exists td1; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2223', () => {
    const query = `drop table if exists td2; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2224', () => {
    const query = `drop table if exists td3; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2225', () => {
    const query = `DROP TABLE IF EXISTS t_with_dots;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2226', () => {
    const query = `DROP TABLE t_with_dots;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2227', () => {
    const query = `DROP TABLE IF EXISTS test_bit_shift_left_string_integer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2228', () => {
    const query = `DROP TABLE IF EXISTS summing_mt_aggregating_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2229', () => {
    const query = `DROP TABLE IF EXISTS test_bit_shift_right_string_integer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2230', () => {
    const query = `DROP TABLE IF EXISTS nullable_division;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2231', () => {
    const query = `DROP TABLE nullable_division;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2232', () => {
    const query = `DROP TABLE IF EXISTS short;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2233', () => {
    const query = `DROP TABLE IF EXISTS long;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2234', () => {
    const query = `DROP TABLE IF EXISTS merged;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2235', () => {
    const query = `DROP TABLE IF EXISTS t_map_02014;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2236', () => {
    const query = `DROP TABLE IF EXISTS dictionary_non_nullable_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2237', () => {
    const query = `DROP DICTIONARY IF EXISTS test_dictionary_non_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2238', () => {
    const query = `DROP DICTIONARY test_dictionary_non_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2239', () => {
    const query = `DROP TABLE dictionary_non_nullable_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2240', () => {
    const query = `DROP TABLE IF EXISTS dictionary_nullable_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2241', () => {
    const query = `DROP DICTIONARY IF EXISTS test_dictionary_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2242', () => {
    const query = `DROP DICTIONARY test_dictionary_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2243', () => {
    const query = `DROP TABLE dictionary_nullable_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2244', () => {
    const query = `drop table if exists test_uint64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2245', () => {
    const query = `drop table if exists test_float64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2246', () => {
    const query = `DROP TABLE IF EXISTS bftest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2247', () => {
    const query = `drop table if exists enum_alter_issue;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2248', () => {
    const query = `drop table enum_alter_issue;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2249', () => {
    const query = `DROP TABLE IF EXISTS table_with_range;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2250', () => {
    const query = `DROP TABLE IF EXISTS normalize_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2251', () => {
    const query = `DROP TABLE IF EXISTS test02008;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2252', () => {
    const query = `DROP TABLE IF EXISTS tmp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2253', () => {
    const query = `DROP TABLE tmp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2254', () => {
    const query = `DROP TABLE IF EXISTS date_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2255', () => {
    const query = `DROP DICTIONARY range_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2256', () => {
    const query = `DROP TABLE date_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2257', () => {
    const query = `DROP DICTIONARY range_dictionary_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2258', () => {
    const query = `DROP TABLE IF EXISTS click_storage;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2259', () => {
    const query = `DROP TABLE IF EXISTS click_storage_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2260', () => {
    const query = `DROP TABLE IF EXISTS t02006 on cluster test_shard_localhost format Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2261', () => {
    const query = `DROP TABLE IF EXISTS m02006 on cluster test_shard_localhost format Null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2262', () => {
    const query = `drop table if exists tp2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2263', () => {
    const query = `DROP TABLE IF EXISTS rep_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2264', () => {
    const query = `drop table if exists sessions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2265', () => {
    const query = `DROP TABLE IF EXISTS t_map_int_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2266', () => {
    const query = `DROP TABLE t_map_int_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2267', () => {
    const query = `drop user if exists u_02001;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2268', () => {
    const query = `DROP TABLE IF EXISTS bf_tokenbf_map_keys_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2269', () => {
    const query = `DROP TABLE IF EXISTS bf_ngrambf_map_keys_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2270', () => {
    const query = `DROP TABLE bf_tokenbf_map_keys_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2271', () => {
    const query = `DROP TABLE bf_tokenbf_map_values_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2272', () => {
    const query = `DROP TABLE bf_ngrambf_map_keys_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2273', () => {
    const query = `DROP TABLE bf_ngrambf_map_values_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2274', () => {
    const query = `DROP USER IF EXISTS test_user_01999;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2275', () => {
    const query = `DROP ROLE IF EXISTS test_role_01999;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2276', () => {
    const query = `DROP ROLE IF EXISTS test_role_01999_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2277', () => {
    const query = `DROP DATABASE IF EXISTS \`01945.db\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2278', () => {
    const query = `DROP DICTIONARY \`01945.db\`.test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2279', () => {
    const query = `DROP DICTIONARY \`01945.db\`.\`test_dictionary.test\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2280', () => {
    const query = `DROP TABLE \`01945.db\`.test_dictionary_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2281', () => {
    const query = `DROP DATABASE \`01945.db\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2282', () => {
    const query = `DROP TABLE src2dst_true;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2283', () => {
    const query = `DROP TABLE src2dst_false;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2284', () => {
    const query = `DROP TABLE sleep_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2285', () => {
    const query = `DROP TABLE IF EXISTS test_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2286', () => {
    const query = `DROP TABLE test_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2287', () => {
    const query = `DROP TABLE sample_correct;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2288', () => {
    const query = `DROP TABLE IF EXISTS test_dictionary_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2289', () => {
    const query = `DROP TABLE test_dictionary_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2290', () => {
    const query = `DROP TABLE IF EXISTS totimezone_op_mono;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2291', () => {
    const query = `DROP TABLE IF EXISTS "/t0";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2292', () => {
    const query = `DROP TABLE IF EXISTS "/t1";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2293', () => {
    const query = `DROP TABLE "/t0";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2294', () => {
    const query = `DROP TABLE "/t1";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2295', () => {
    const query = `DROP TABLE IF EXISTS orders;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2296', () => {
    const query = `DROP TABLE orders;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2297', () => {
    const query = `DROP TABLE IF EXISTS alter_index_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2298', () => {
    const query = `DROP TABLE matview_a_to_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2299', () => {
    const query = `DROP TABLE matview_b_to_c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2300', () => {
    const query = `DROP TABLE matview_join_d_e;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2301', () => {
    const query = `DROP TABLE table_f;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2302', () => {
    const query = `DROP TABLE table_e;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2303', () => {
    const query = `DROP TABLE table_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2304', () => {
    const query = `DROP TABLE table_c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2305', () => {
    const query = `DROP TABLE table_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2306', () => {
    const query = `DROP TABLE table_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2307', () => {
    const query = `DROP TABLE IF EXISTS order_by_desc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2308', () => {
    const query = `DROP TABLE IF EXISTS predicate_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2309', () => {
    const query = `drop table if exists alias_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2310', () => {
    const query = `drop table if exists alias_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2311', () => {
    const query = `DROP TABLE IF EXISTS x_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2312', () => {
    const query = `DROP TABLE IF EXISTS x_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2313', () => {
    const query = `DROP TABLE x_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2314', () => {
    const query = `DROP TABLE x_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2315', () => {
    const query = `DROP TABLE IF EXISTS json_square_brackets;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2316', () => {
    const query = `DROP TABLE IF EXISTS broken_partition;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2317', () => {
    const query = `DROP TABLE IF EXISTS old_partition_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2318', () => {
    const query = `DROP TABLE old_partition_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2319', () => {
    const query = `DROP TABLE IF EXISTS t_ttl_modify_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2320', () => {
    const query = `DROP TABLE IF EXISTS distributed_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2321', () => {
    const query = `DROP TABLE IF EXISTS merge_tree_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2322', () => {
    const query = `DROP TABLE IF EXISTS t_array_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2323', () => {
    const query = `DROP TABLE IF EXISTS data_01917;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2324', () => {
    const query = `DROP TABLE IF EXISTS data_01917_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2325', () => {
    const query = `DROP TABLE data_01917;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2326', () => {
    const query = `DROP TABLE data_01917_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2327', () => {
    const query = `DROP TABLE IF EXISTS j;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2328', () => {
    const query = `DROP TABLE j;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2329', () => {
    const query = `DROP TABLE IF EXISTS abc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2330', () => {
    const query = `DROP TABLE abc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2331', () => {
    const query = `DROP DATABASE IF EXISTS test_01915_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2332', () => {
    const query = `DROP TABLE IF EXISTS test_01915_db.test_source_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2333', () => {
    const query = `DROP DICTIONARY IF EXISTS test_01915_db.test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2334', () => {
    const query = `DROP TABLE IF EXISTS test_01915_db.test_source_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2335', () => {
    const query = `DROP DICTIONARY test_01915_db.test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2336', () => {
    const query = `DROP TABLE test_01915_db.test_source_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2337', () => {
    const query = `DROP TABLE test_01915_db.test_source_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2338', () => {
    const query = `DROP DATABASE test_01915_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2339', () => {
    const query = `DROP DATABASE IF EXISTS 01914_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2340', () => {
    const query = `DROP TABLE IF EXISTS 01914_db.table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2341', () => {
    const query = `DROP TABLE IF EXISTS 01914_db.table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2342', () => {
    const query = `DROP DICTIONARY IF EXISTS 01914_db.dictionary_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2343', () => {
    const query = `DROP DICTIONARY IF EXISTS 01914_db.dictionary_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2344', () => {
    const query = `DROP DICTIONARY 01914_db.dictionary_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2345', () => {
    const query = `DROP DICTIONARY 01914_db.dictionary_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2346', () => {
    const query = `DROP TABLE 01914_db.table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2347', () => {
    const query = `DROP TABLE 01914_db.table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2348', () => {
    const query = `DROP DATABASE 01914_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2349', () => {
    const query = `drop table if exists smta;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2350', () => {
    const query = `DROP DATABASE IF EXISTS 01913_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2351', () => {
    const query = `DROP TABLE IF EXISTS 01913_db.test_source_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2352', () => {
    const query = `DROP DICTIONARY IF EXISTS 01913_db.test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2353', () => {
    const query = `DROP TABLE IF EXISTS 01913_db.test_source_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2354', () => {
    const query = `DROP DICTIONARY 01913_db.test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2355', () => {
    const query = `DROP TABLE 01913_db.test_source_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2356', () => {
    const query = `DROP TABLE 01913_db.test_source_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2357', () => {
    const query = `DROP DATABASE 01913_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2358', () => {
    const query = `drop table if exists my_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2359', () => {
    const query = `drop view if exists my_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2360', () => {
    const query = `drop view my_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2361', () => {
    const query = `drop table if exists test_rows_compact_part;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2362', () => {
    const query = `drop table if exists test_rows_wide_part;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2363', () => {
    const query = `DROP TABLE codecTest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2364', () => {
    const query = `DROP DICTIONARY IF EXISTS TestTblDict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2365', () => {
    const query = `DROP VIEW IF EXISTS TestTbl_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2366', () => {
    const query = `DROP TABLE IF EXISTS TestTbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2367', () => {
    const query = `DROP TABLE IF EXISTS dictionary_source_en;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2368', () => {
    const query = `DROP TABLE IF EXISTS dictionary_source_ru;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2369', () => {
    const query = `DROP TABLE IF EXISTS dictionary_source_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2370', () => {
    const query = `DROP TABLE dictionary_source_en;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2371', () => {
    const query = `DROP TABLE dictionary_source_ru;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2372', () => {
    const query = `DROP TABLE dictionary_source_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2373', () => {
    const query = `DROP TABLE IF EXISTS DATE_INFO_DICT;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2374', () => {
    const query = `DROP TABLE DATE_INFO_DICT;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2375', () => {
    const query = `DROP TABLE IF EXISTS t_01906;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2376', () => {
    const query = `DROP TABLE t_01906;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2377', () => {
    const query = `DROP TABLE IF EXISTS h3_geo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2378', () => {
    const query = `DROP TABLE h3_geo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2379', () => {
    const query = `DROP TABLE IF EXISTS dictionary_nullable_default_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2380', () => {
    const query = `DROP DICTIONARY IF EXISTS ip_trie_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2381', () => {
    const query = `DROP TABLE dictionary_nullable_default_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2382', () => {
    const query = `DROP TABLE IF EXISTS polygon_dictionary_nullable_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2383', () => {
    const query = `DROP TABLE IF EXISTS polygon_dictionary_nullable_default_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2384', () => {
    const query = `DROP TABLE polygon_dictionary_nullable_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2385', () => {
    const query = `DROP TABLE polygon_dictionary_nullable_default_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2386', () => {
    const query = `DROP TABLE IF EXISTS range_dictionary_nullable_default_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2387', () => {
    const query = `DROP TABLE range_dictionary_nullable_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2388', () => {
    const query = `DROP TABLE range_dictionary_nullable_default_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2389', () => {
    const query = `DROP DATABASE IF EXISTS 01902_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2390', () => {
    const query = `DROP DATABASE IF EXISTS 01902_db1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2391', () => {
    const query = `DROP DATABASE IF EXISTS 01902_db2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2392', () => {
    const query = `DROP DATABASE IF EXISTS 01902_db3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2393', () => {
    const query = `DROP DATABASE 01902_db1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2394', () => {
    const query = `DROP DATABASE 01902_db2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2395', () => {
    const query = `DROP DATABASE 01902_db3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2396', () => {
    const query = `DROP DATABASE IF EXISTS 01902_db_params;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2397', () => {
    const query = `DROP DATABASE 01902_db_params;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2398', () => {
    const query = `DROP TABLE IF EXISTS dictionary_array_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2399', () => {
    const query = `DROP TABLE IF EXISTS ip_trie_dictionary_array_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2400', () => {
    const query = `DROP TABLE dictionary_array_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2401', () => {
    const query = `DROP DICTIONARY ip_trie_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2402', () => {
    const query = `DROP TABLE ip_trie_dictionary_array_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2403', () => {
    const query = `DROP TABLE IF EXISTS polygon_dictionary_array_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2404', () => {
    const query = `DROP TABLE polygon_dictionary_array_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2405', () => {
    const query = `DROP TABLE IF EXISTS range_dictionary_array_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2406', () => {
    const query = `DROP TABLE range_dictionary_array_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2407', () => {
    const query = `DROP TABLE IF EXISTS test_alter_attach_01901S;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2408', () => {
    const query = `DROP TABLE IF EXISTS test_alter_attach_01901D;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2409', () => {
    const query = `DROP TABLE test_alter_attach_01901S;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2410', () => {
    const query = `DROP TABLE test_alter_attach_01901D;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2411', () => {
    const query = `drop table if exists dp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2412', () => {
    const query = `DROP TABLE IF EXISTS test_table_unsigned_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2413', () => {
    const query = `DROP TABLE test_table_unsigned_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2414', () => {
    const query = `DROP TABLE IF EXISTS test_table_signed_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2415', () => {
    const query = `DROP TABLE test_table_signed_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2416', () => {
    const query = `DROP TABLE IF EXISTS test_table_float_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2417', () => {
    const query = `DROP TABLE test_table_float_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2418', () => {
    const query = `DROP TABLE IF EXISTS test_table_nullable_unsigned_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2419', () => {
    const query = `DROP TABLE test_table_nullable_unsigned_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2420', () => {
    const query = `DROP TABLE IF EXISTS test_table_nullable_signed_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2421', () => {
    const query = `DROP TABLE test_table_nullable_signed_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2422', () => {
    const query = `DROP TABLE IF EXISTS test_table_nullable_float_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2423', () => {
    const query = `DROP TABLE test_table_nullable_float_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2424', () => {
    const query = `DROP TABLE IF EXISTS test_table_null_specifics;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2425', () => {
    const query = `drop table test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2426', () => {
    const query = `DROP TABLE IF EXISTS 01889_sql_json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2427', () => {
    const query = `DROP TABLE 01889_sql_json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2428', () => {
    const query = `DROP TABLE IF EXISTS grouping_sets;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2429', () => {
    const query = `DROP TABLE IF EXISTS t_subcolumns_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2430', () => {
    const query = `DROP TABLE IF EXISTS t_subcolumns_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2431', () => {
    const query = `DROP TABLE t_subcolumns_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2432', () => {
    const query = `DROP TABLE t_subcolumns_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2433', () => {
    const query = `drop table if exists nums_in_mem;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2434', () => {
    const query = `drop table if exists nums_in_mem_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2435', () => {
    const query = `drop table nums_in_mem_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2436', () => {
    const query = `DROP TABLE IF EXISTS limited_merge_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2437', () => {
    const query = `DROP TABLE IF EXISTS test_buffer_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2438', () => {
    const query = `DROP TABLE test_buffer_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2439', () => {
    const query = `drop table if exists test_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2440', () => {
    const query = `drop table test_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2441', () => {
    const query = `DROP TABLE IF EXISTS t_create_as_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2442', () => {
    const query = `DROP TABLE t_create_as_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2443', () => {
    const query = `DROP TABLE IF EXISTS test_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2444', () => {
    const query = `DROP TABLE IF EXISTS test_input;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2445', () => {
    const query = `DROP TABLE test_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2446', () => {
    const query = `DROP TABLE test_input;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2447', () => {
    const query = `DROP TABLE IF EXISTS t_func_to_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2448', () => {
    const query = `DROP TABLE t_func_to_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2449', () => {
    const query = `DROP TABLE IF EXISTS t_tuple_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2450', () => {
    const query = `DROP TABLE t_tuple_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2451', () => {
    const query = `DROP TABLE IF EXISTS data_01875_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2452', () => {
    const query = `DROP TABLE IF EXISTS data_01875_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2453', () => {
    const query = `DROP TABLE IF EXISTS data_01875_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2454', () => {
    const query = `DROP TABLE data_01875_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2455', () => {
    const query = `DROP TABLE data_01875_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2456', () => {
    const query = `DROP TABLE data_01875_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2457', () => {
    const query = `DROP TABLE IF EXISTS table1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2458', () => {
    const query = `DROP TABLE IF EXISTS table2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2459', () => {
    const query = `DROP TABLE IF EXISTS table3 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2460', () => {
    const query = `DROP TABLE IF EXISTS table4 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2461', () => {
    const query = `DROP TABLE table1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2462', () => {
    const query = `DROP TABLE table2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2463', () => {
    const query = `DROP TABLE table3 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2464', () => {
    const query = `DROP TABLE table4 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2465', () => {
    const query = `drop database if exists db_01870;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2466', () => {
    const query = `drop database db_01870;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2467', () => {
    const query = `drop table if exists replacing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2468', () => {
    const query = `drop table replacing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2469', () => {
    const query = `DROP TABLE IF EXISTS mem_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2470', () => {
    const query = `DROP TABLE mem_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2471', () => {
    const query = `DROP TABLE IF EXISTS view_no_nulls;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2472', () => {
    const query = `DROP TABLE IF EXISTS view_no_nulls_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2473', () => {
    const query = `DROP TABLE IF EXISTS view_nulls_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2474', () => {
    const query = `DROP TABLE IF EXISTS view_nulls;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2475', () => {
    const query = `DROP TABLE dt64test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2476', () => {
    const query = `DROP TABLE IF EXISTS interval;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2477', () => {
    const query = `DROP TABLE IF EXISTS fl_interval;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2478', () => {
    const query = `DROP TABLE IF EXISTS dt_interval;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2479', () => {
    const query = `DROP TABLE IF EXISTS date_interval;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2480', () => {
    const query = `DROP TABLE interval;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2481', () => {
    const query = `DROP TABLE fl_interval;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2482', () => {
    const query = `DROP TABLE dt_interval;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2483', () => {
    const query = `DROP TABLE date_interval;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2484', () => {
    const query = `DROP FUNCTION 01856_test_function_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2485', () => {
    const query = `DROP DICTIONARY IF EXISTS dict_01864;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2486', () => {
    const query = `DROP TABLE IF EXISTS v1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2487', () => {
    const query = `DROP TABLE IF EXISTS v2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2488', () => {
    const query = `DROP TABLE IF EXISTS map_comb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2489', () => {
    const query = `DROP TABLE map_comb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2490', () => {
    const query = `DROP TABLE sum_map_decimal;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2491', () => {
    const query = `DROP TABLE IF EXISTS test_jit_nonnull;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2492', () => {
    const query = `DROP TABLE IF EXISTS test_jit_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2493', () => {
    const query = `DROP TABLE test_jit_nonnull;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2494', () => {
    const query = `DROP TABLE test_jit_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2495', () => {
    const query = `DROP TABLE IF EXISTS simple_key_source_table_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2496', () => {
    const query = `DROP DICTIONARY IF EXISTS simple_key_flat_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2497', () => {
    const query = `DROP DICTIONARY simple_key_flat_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2498', () => {
    const query = `DROP DICTIONARY IF EXISTS simple_key_direct_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2499', () => {
    const query = `DROP DICTIONARY simple_key_direct_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2500', () => {
    const query = `DROP DICTIONARY IF EXISTS simple_key_hashed_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2501', () => {
    const query = `DROP DICTIONARY simple_key_hashed_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2502', () => {
    const query = `DROP DICTIONARY IF EXISTS simple_key_sparse_hashed_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2503', () => {
    const query = `DROP DICTIONARY simple_key_sparse_hashed_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2504', () => {
    const query = `DROP DICTIONARY IF EXISTS simple_key_cache_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2505', () => {
    const query = `DROP DICTIONARY simple_key_cache_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2506', () => {
    const query = `DROP TABLE simple_key_source_table_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2507', () => {
    const query = `DROP TABLE IF EXISTS complex_key_source_table_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2508', () => {
    const query = `DROP DICTIONARY IF EXISTS complex_key_hashed_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2509', () => {
    const query = `DROP DICTIONARY complex_key_hashed_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2510', () => {
    const query = `DROP DICTIONARY IF EXISTS complex_key_direct_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2511', () => {
    const query = `DROP DICTIONARY complex_key_direct_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2512', () => {
    const query = `DROP DICTIONARY IF EXISTS complex_key_cache_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2513', () => {
    const query = `DROP DICTIONARY complex_key_cache_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2514', () => {
    const query = `DROP TABLE complex_key_source_table_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2515', () => {
    const query = `DROP TABLE IF EXISTS range_key_source_table_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2516', () => {
    const query = `DROP DICTIONARY IF EXISTS simple_key_range_hashed_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2517', () => {
    const query = `DROP DICTIONARY simple_key_range_hashed_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2518', () => {
    const query = `DROP TABLE range_key_source_table_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2519', () => {
    const query = `DROP TABLE IF EXISTS ip_trie_source_table_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2520', () => {
    const query = `DROP DICTIONARY IF EXISTS ip_trie_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2521', () => {
    const query = `DROP DICTIONARY ip_trie_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2522', () => {
    const query = `DROP TABLE ip_trie_source_table_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2523', () => {
    const query = `DROP TABLE IF EXISTS polygons_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2524', () => {
    const query = `DROP TABLE IF EXISTS points_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2525', () => {
    const query = `DROP DICTIONARY IF EXISTS polygon_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2526', () => {
    const query = `DROP DICTIONARY polygon_dictionary_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2527', () => {
    const query = `DROP TABLE polygons_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2528', () => {
    const query = `DROP TABLE points_01862;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2529', () => {
    const query = `DROP TABLE IF EXISTS \`01851_merge_tree\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2530', () => {
    const query = `DROP TABLE IF EXISTS \`001851_merge_tree_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2531', () => {
    const query = `DROP TABLE \`01851_merge_tree\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2532', () => {
    const query = `DROP TABLE \`01851_merge_tree_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2533', () => {
    const query = `drop table if exists dist_01850;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2534', () => {
    const query = `drop table if exists shard_0.data_01850;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2535', () => {
    const query = `drop table shard_0.data_01850;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2536', () => {
    const query = `DROP TABLE IF EXISTS s2_indexes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2537', () => {
    const query = `drop table if exists tbl2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2538', () => {
    const query = `drop table tbl2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2539', () => {
    const query = `DROP TABLE IF EXISTS test_null_as_default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2540', () => {
    const query = `DROP TABLE test_null_as_default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2541', () => {
    const query = `DROP DICTIONARY IF EXISTS example_simple_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2542', () => {
    const query = `DROP DICTIONARY IF EXISTS example_complex_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2543', () => {
    const query = `DROP DICTIONARY example_complex_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2544', () => {
    const query = `DROP DICTIONARY example_simple_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2545', () => {
    const query = `DROP DATABASE IF EXISTS 01837_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2546', () => {
    const query = `DROP TABLE IF EXISTS 01837_db.simple_key_dictionary_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2547', () => {
    const query = `DROP DICTIONARY IF EXISTS 01837_db.simple_key_direct_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2548', () => {
    const query = `DROP DICTIONARY 01837_db.simple_key_direct_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2549', () => {
    const query = `DROP TABLE 01837_db.simple_key_dictionary_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2550', () => {
    const query = `DROP DATABASE 01837_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2551', () => {
    const query = `DROP TABLE IF EXISTS tt_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2552', () => {
    const query = `DROP TABLE IF EXISTS tt_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2553', () => {
    const query = `DROP TABLE tt_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2554', () => {
    const query = `DROP TABLE tt_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2555', () => {
    const query = `DROP TABLE IF EXISTS db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2556', () => {
    const query = `DROP TABLE tb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2557', () => {
    const query = `DROP TABLE IF EXISTS test_collation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2558', () => {
    const query = `DROP TABLE test_collation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2559', () => {
    const query = `drop table if exists data_01832;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2560', () => {
    const query = `drop table data_01832;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2561', () => {
    const query = `DROP TABLE IF EXISTS t_json_wide_parts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2562', () => {
    const query = `DROP TABLE t_json_wide_parts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2563', () => {
    const query = `DROP TABLE IF EXISTS t_json_sparse;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2564', () => {
    const query = `DROP TABLE IF EXISTS t_json_partitions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2565', () => {
    const query = `DROP TABLE t_json_partitions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2566', () => {
    const query = `DROP TABLE IF EXISTS t_json_parallel;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2567', () => {
    const query = `DROP TABLE t_json_parallel;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2568', () => {
    const query = `DROP TABLE IF EXISTS t_json_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2569', () => {
    const query = `DROP TABLE t_json_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2570', () => {
    const query = `DROP TABLE IF EXISTS t_json_mutations;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2571', () => {
    const query = `DROP TABLE t_json_mutations;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2572', () => {
    const query = `DROP TABLE IF EXISTS t_json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2573', () => {
    const query = `DROP TABLE IF EXISTS type_json_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2574', () => {
    const query = `DROP TABLE IF EXISTS type_json_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2575', () => {
    const query = `DROP TABLE type_json_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2576', () => {
    const query = `DROP TABLE type_json_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2577', () => {
    const query = `DROP TABLE IF EXISTS t_json_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2578', () => {
    const query = `DROP TABLE t_json_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2579', () => {
    const query = `DROP TABLE IF EXISTS t_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2580', () => {
    const query = `DROP TABLE IF EXISTS t_json_field;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2581', () => {
    const query = `DROP TABLE IF EXISTS t_github_json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2582', () => {
    const query = `DROP TABLE t_github_json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2583', () => {
    const query = `DROP TABLE IF EXISTS t_json_empty_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2584', () => {
    const query = `DROP TABLE t_json_empty_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2585', () => {
    const query = `DROP TABLE IF EXISTS t_json_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2586', () => {
    const query = `DROP TABLE IF EXISTS t_json_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2587', () => {
    const query = `DROP TABLE IF EXISTS t_json_desc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2588', () => {
    const query = `DROP TABLE IF EXISTS t_json_bools;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2589', () => {
    const query = `DROP TABLE t_json_bools;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2590', () => {
    const query = `DROP TABLE IF EXISTS t_json_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2591', () => {
    const query = `DROP TABLE IF EXISTS t_json_str_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2592', () => {
    const query = `DROP TABLE t_json_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2593', () => {
    const query = `DROP TABLE t_json_str_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2594', () => {
    const query = `DROP TABLE IF EXISTS t_json_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2595', () => {
    const query = `DROP TABLE t_json_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2596', () => {
    const query = `DROP TABLE IF EXISTS t_json_17;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2597', () => {
    const query = `DROP FUNCTION IF EXISTS hasValidSizes17;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2598', () => {
    const query = `DROP FUNCTION hasValidSizes17;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2599', () => {
    const query = `DROP TABLE t_json_17;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2600', () => {
    const query = `DROP TABLE IF EXISTS t_json_14;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2601', () => {
    const query = `DROP TABLE t_json_14;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2602', () => {
    const query = `DROP TABLE IF EXISTS t_json_10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2603', () => {
    const query = `DROP TABLE t_json_10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2604', () => {
    const query = `DROP TABLE IF EXISTS replacing_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2605', () => {
    const query = `DROP TABLE IF EXISTS t1_shard;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2606', () => {
    const query = `DROP TABLE IF EXISTS t2_shard;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2607', () => {
    const query = `DROP TABLE IF EXISTS t1_distr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2608', () => {
    const query = `DROP TABLE IF EXISTS t2_distr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2609', () => {
    const query = `DROP TABLE t1_shard;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2610', () => {
    const query = `DROP TABLE t2_shard;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2611', () => {
    const query = `DROP TABLE t1_distr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2612', () => {
    const query = `DROP TABLE t2_distr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2613', () => {
    const query = `DROP DATABASE test_01824;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2614', () => {
    const query = `DROP TABLE IF EXISTS t_move_to_prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2615', () => {
    const query = `DROP TABLE t1, t2, t3, t4, t5, t6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2616', () => {
    const query = `DROP VIEW t7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2617', () => {
    const query = `DROP TABLE IF EXISTS join_table_mutation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2618', () => {
    const query = `DROP TABLE join_table_mutation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2619', () => {
    const query = `DROP TABLE IF EXISTS dictionary_primary_key_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2620', () => {
    const query = `DROP TABLE dictionary_primary_key_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2621', () => {
    const query = `DROP TABLE IF EXISTS main_table_01818;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2622', () => {
    const query = `DROP TABLE IF EXISTS tmp_table_01818;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2623', () => {
    const query = `drop table if exists data_01817;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2624', () => {
    const query = `drop table if exists buffer_01817;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2625', () => {
    const query = `DROP TABLE IF EXISTS data_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2626', () => {
    const query = `DROP TABLE data_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2627', () => {
    const query = `DROP TABLE IF EXISTS test_01344;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2628', () => {
    const query = `DROP TABLE test_01344;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2629', () => {
    const query = `drop table if exists data_01809;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2630', () => {
    const query = `drop table data_01809;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2631', () => {
    const query = `DROP TABLE IF EXISTS dictionary_decimal_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2632', () => {
    const query = `DROP TABLE dictionary_decimal_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2633', () => {
    const query = `DROP TABLE IF EXISTS ip_trie_dictionary_decimal_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2634', () => {
    const query = `DROP TABLE ip_trie_dictionary_decimal_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2635', () => {
    const query = `DROP TABLE IF EXISTS dictionary_decimal_polygons_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2636', () => {
    const query = `DROP TABLE dictionary_decimal_polygons_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2637', () => {
    const query = `DROP TABLE IF EXISTS t_map_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2638', () => {
    const query = `DROP TABLE t_map_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2639', () => {
    const query = `DROP TABLE IF EXISTS 01802_empsalary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2640', () => {
    const query = `drop table if exists data_01801;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2641', () => {
    const query = `drop table data_01801;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2642', () => {
    const query = `DROP TABLE IF EXISTS nested_01800_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2643', () => {
    const query = `DROP TABLE nested_01800_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2644', () => {
    const query = `DROP TABLE IF EXISTS nested_01800_stripe_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2645', () => {
    const query = `DROP TABLE nested_01800_stripe_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2646', () => {
    const query = `DROP TABLE IF EXISTS nested_01800_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2647', () => {
    const query = `DROP TABLE nested_01800_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2648', () => {
    const query = `DROP TABLE decimal;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2649', () => {
    const query = `DROP TABLE IF EXISTS stored_aggregates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2650', () => {
    const query = `DROP TABLE stored_aggregates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2651', () => {
    const query = `drop table if exists summing_merge_tree_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2652', () => {
    const query = `drop table if exists summing_merge_tree_aggregate_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2653', () => {
    const query = `drop table summing_merge_tree_aggregate_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2654', () => {
    const query = `drop table summing_merge_tree_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2655', () => {
    const query = `DROP TABLE IF EXISTS t_having;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2656', () => {
    const query = `DROP TABLE t_having;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2657', () => {
    const query = `DROP TABLE IF EXISTS underlying_01797;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2658', () => {
    const query = `DROP TABLE underlying_01797;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2659', () => {
    const query = `DROP TABLE IF EXISTS underlying_01796;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2660', () => {
    const query = `DROP TABLE underlying_01796;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2661', () => {
    const query = `DROP TABLE IF EXISTS underlying_01795;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2662', () => {
    const query = `DROP TABLE underlying_01795;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2663', () => {
    const query = `DROP TABLE IF EXISTS tmp_01781;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2664', () => {
    const query = `DROP TABLE IF EXISTS dist_01781;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2665', () => {
    const query = `DROP TABLE tmp_01781;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2666', () => {
    const query = `DROP TABLE dist_01781;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2667', () => {
    const query = `DROP TABLE IF EXISTS test_wide_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2668', () => {
    const query = `DROP TABLE test_wide_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2669', () => {
    const query = `DROP TABLE IF EXISTS test_wide_not_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2670', () => {
    const query = `DROP TABLE test_wide_not_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2671', () => {
    const query = `drop table if exists bug_repro_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2672', () => {
    const query = `DROP TABLE IF EXISTS group_by_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2673', () => {
    const query = `DROP TABLE foo_lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2674', () => {
    const query = `DROP DATABASE IF EXISTS 01785_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2675', () => {
    const query = `DROP TABLE IF EXISTS 01785_db.simple_key_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2676', () => {
    const query = `DROP DICTIONARY IF EXISTS 01785_db.simple_key_flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2677', () => {
    const query = `DROP DICTIONARY 01785_db.simple_key_flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2678', () => {
    const query = `DROP DICTIONARY 01785_db.simple_key_hashed_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2679', () => {
    const query = `DROP DICTIONARY 01785_db.simple_key_cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2680', () => {
    const query = `DROP TABLE 01785_db.simple_key_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2681', () => {
    const query = `DROP TABLE IF EXISTS 01785_db.complex_key_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2682', () => {
    const query = `DROP DICTIONARY 01785_db.complex_key_hashed_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2683', () => {
    const query = `DROP TABLE 01785_db.complex_key_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2684', () => {
    const query = `DROP DATABASE 01785_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2685', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2686', () => {
    const query = `DROP TABLE bloom_filter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2687', () => {
    const query = `DROP TABLE IF EXISTS merge_tree_deduplication;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2688', () => {
    const query = `DROP TABLE IF EXISTS merge_tree_no_deduplication;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2689', () => {
    const query = `DROP TABLE IF EXISTS simple_key_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2690', () => {
    const query = `DROP DICTIONARY IF EXISTS simple_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2691', () => {
    const query = `DROP DICTIONARY simple_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2692', () => {
    const query = `DROP TABLE simple_key_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2693', () => {
    const query = `DROP TABLE IF EXISTS complex_key_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2694', () => {
    const query = `DROP DICTIONARY IF EXISTS complex_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2695', () => {
    const query = `DROP DICTIONARY complex_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2696', () => {
    const query = `DROP TABLE complex_key_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2697', () => {
    const query = `DROP TABLE IF EXISTS range_key_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2698', () => {
    const query = `DROP DICTIONARY IF EXISTS range_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2699', () => {
    const query = `DROP DICTIONARY range_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2700', () => {
    const query = `DROP TABLE range_key_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2701', () => {
    const query = `DROP TABLE IF EXISTS sparse_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2702', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2703', () => {
    const query = `DROP TABLE IF EXISTS t_full_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2704', () => {
    const query = `DROP TABLE IF EXISTS sparse_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2705', () => {
    const query = `DROP TABLE IF EXISTS sparse_t ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2706', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_full;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2707', () => {
    const query = `DROP TABLE t_sparse_full;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2708', () => {
    const query = `DROP TABLE IF EXISTS t_sparse;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2709', () => {
    const query = `DROP TABLE t_sparse;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2710', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2711', () => {
    const query = `DROP TABLE t_sparse_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2712', () => {
    const query = `DROP TABLE IF EXISTS t_sparse_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2713', () => {
    const query = `DROP TABLE t_sparse_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2714', () => {
    const query = `DROP DATABASE IF EXISTS 01780_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2715', () => {
    const query = `DROP DICTIONARY IF EXISTS dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2716', () => {
    const query = `DROP DICTIONARY IF EXISTS dict2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2717', () => {
    const query = `DROP TABLE IF EXISTS 01780_db.dict3_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2718', () => {
    const query = `DROP DICTIONARY 01780_db.dict3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2719', () => {
    const query = `DROP DATABASE 01780_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2720', () => {
    const query = `DROP TABLE IF EXISTS ttt01778;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2721', () => {
    const query = `DROP TABLE IF EXISTS test_01778;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2722', () => {
    const query = `DROP TABLE test_01778;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2723', () => {
    const query = `DROP DATABASE IF EXISTS 01778_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2724', () => {
    const query = `DROP DICTIONARY 01778_db.hierarchy_flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2725', () => {
    const query = `DROP DICTIONARY 01778_db.hierarchy_hashed_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2726', () => {
    const query = `DROP DICTIONARY 01778_db.hierarchy_cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2727', () => {
    const query = `DROP DICTIONARY 01778_db.hierarchy_direct_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2728', () => {
    const query = `DROP TABLE 01778_db.hierarchy_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2729', () => {
    const query = `DROP DATABASE 01778_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2730', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_null_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2731', () => {
    const query = `DROP TABLE bloom_filter_null_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2732', () => {
    const query = `DROP TABLE IF EXISTS test_aggregation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2733', () => {
    const query = `DROP TABLE test_aggregation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2734', () => {
    const query = `DROP DATABASE IF EXISTS 01766_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2735', () => {
    const query = `DROP DICTIONARY 01766_db.hashed_dictionary_complex_key_simple_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2736', () => {
    const query = `DROP TABLE 01766_db.complex_key_simple_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2737', () => {
    const query = `DROP DICTIONARY 01766_db.hashed_dictionary_complex_key_complex_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2738', () => {
    const query = `DROP TABLE 01766_db.complex_key_complex_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2739', () => {
    const query = `DROP DATABASE 01766_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2740', () => {
    const query = `DROP TABLE IF EXISTS t_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2741', () => {
    const query = `DROP TABLE IF EXISTS t_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2742', () => {
    const query = `DROP TABLE t_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2743', () => {
    const query = `DROP TABLE t_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2744', () => {
    const query = `DROP DATABASE IF EXISTS 01765_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2745', () => {
    const query = `DROP DICTIONARY 01765_db.hashed_dictionary_simple_key_simple_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2746', () => {
    const query = `DROP DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_simple_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2747', () => {
    const query = `DROP TABLE 01765_db.simple_key_simple_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2748', () => {
    const query = `DROP DICTIONARY 01765_db.hashed_dictionary_simple_key_complex_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2749', () => {
    const query = `DROP DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_complex_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2750', () => {
    const query = `DROP TABLE 01765_db.simple_key_complex_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2751', () => {
    const query = `DROP DICTIONARY 01765_db.hashed_dictionary_simple_key_hierarchy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2752', () => {
    const query = `DROP DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_hierarchy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2753', () => {
    const query = `DROP TABLE 01765_db.simple_key_hierarchy_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2754', () => {
    const query = `DROP DATABASE 01765_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2755', () => {
    const query = `DROP TABLE IF EXISTS table_function_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2756', () => {
    const query = `DROP DICTIONARY IF EXISTS table_function_dictionary_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2757', () => {
    const query = `DROP DICTIONARY table_function_dictionary_test_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2758', () => {
    const query = `DROP TABLE table_function_dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2759', () => {
    const query = `DROP TABLE mytable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2760', () => {
    const query = `DROP TABLE IF EXISTS collapsing_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2761', () => {
    const query = `DROP TABLE IF EXISTS collapsing_suspicious_granularity;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2762', () => {
    const query = `DROP TABLE IF EXISTS map_lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2763', () => {
    const query = `DROP TABLE map_lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2764', () => {
    const query = `DROP TABLE IF EXISTS tt6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2765', () => {
    const query = `DROP TABLE IF EXISTS tt7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2766', () => {
    const query = `DROP TABLE IF EXISTS test_ttl_group_by01763;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2767', () => {
    const query = `DROP TABLE test_ttl_group_by01763;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2768', () => {
    const query = `DROP TABLE IF EXISTS test_alter_decimal;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2769', () => {
    const query = `DROP DATABASE IF EXISTS 01760_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2770', () => {
    const query = `DROP TABLE IF EXISTS 01760_db.example_simple_key_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2771', () => {
    const query = `DROP DICTIONARY IF EXISTS 01760_db.example_simple_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2772', () => {
    const query = `DROP DICTIONARY 01760_db.example_simple_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2773', () => {
    const query = `DROP TABLE 01760_db.example_simple_key_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2774', () => {
    const query = `DROP TABLE IF EXISTS 01760_db.example_complex_key_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2775', () => {
    const query = `DROP DICTIONARY IF EXISTS 01760_db.example_complex_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2776', () => {
    const query = `DROP DICTIONARY 01760_db.example_complex_key_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2777', () => {
    const query = `DROP TABLE 01760_db.example_complex_key_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2778', () => {
    const query = `DROP DATABASE 01760_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2779', () => {
    const query = `DROP TABLE IF EXISTS 01760_db.polygons;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2780', () => {
    const query = `DROP TABLE IF EXISTS 01760_db.points;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2781', () => {
    const query = `DROP DICTIONARY IF EXISTS 01760_db.dict_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2782', () => {
    const query = `DROP TABLE 01760_db.points;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2783', () => {
    const query = `DROP TABLE 01760_db.polygons;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2784', () => {
    const query = `DROP TABLE IF EXISTS ddl_dictonary_test_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2785', () => {
    const query = `DROP DICTIONARY IF EXISTS ddl_dictionary_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2786', () => {
    const query = `DROP DICTIONARY ddl_dictionary_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2787', () => {
    const query = `DROP TABLE ddl_dictonary_test_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2788', () => {
    const query = `DROP DATABASE IF EXISTS 01759_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2789', () => {
    const query = `DROP DATABASE 01759_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2790', () => {
    const query = `drop table if exists dist_01757;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2791', () => {
    const query = `drop table if exists dist_01756;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2792', () => {
    const query = `drop table if exists dist_01756_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2793', () => {
    const query = `drop table if exists dist_01756_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2794', () => {
    const query = `drop table if exists data_01756_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2795', () => {
    const query = `drop table if exists data_01756_signed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2796', () => {
    const query = `drop table dist_01756;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2797', () => {
    const query = `drop table dist_01756_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2798', () => {
    const query = `drop table dist_01756_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2799', () => {
    const query = `drop table data_01756_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2800', () => {
    const query = `drop table data_01756_signed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2801', () => {
    const query = `drop table if exists data_01755;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2802', () => {
    const query = `drop table if exists dist_01755;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2803', () => {
    const query = `DROP DATABASE IF EXISTS 01754_dictionary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2804', () => {
    const query = `DROP DICTIONARY 01754_dictionary_db.direct_dictionary_complex_key_simple_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2805', () => {
    const query = `DROP TABLE 01754_dictionary_db.complex_key_simple_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2806', () => {
    const query = `DROP DICTIONARY 01754_dictionary_db.direct_dictionary_complex_key_complex_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2807', () => {
    const query = `DROP TABLE 01754_dictionary_db.complex_key_complex_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2808', () => {
    const query = `DROP DATABASE 01754_dictionary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2809', () => {
    const query = `DROP TABLE IF EXISTS mmm;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2810', () => {
    const query = `DROP DATABASE IF EXISTS 01753_dictionary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2811', () => {
    const query = `DROP DICTIONARY 01753_dictionary_db.direct_dictionary_simple_key_simple_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2812', () => {
    const query = `DROP TABLE 01753_dictionary_db.simple_key_simple_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2813', () => {
    const query = `DROP DICTIONARY 01753_dictionary_db.direct_dictionary_simple_key_complex_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2814', () => {
    const query = `DROP TABLE 01753_dictionary_db.simple_key_complex_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2815', () => {
    const query = `DROP DICTIONARY 01753_dictionary_db.direct_dictionary_simple_key_hierarchy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2816', () => {
    const query = `DROP TABLE 01753_dictionary_db.simple_key_hierarchy_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2817', () => {
    const query = `DROP DATABASE 01753_dictionary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2818', () => {
    const query = `DROP DATABASE IF EXISTS test_01748;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2819', () => {
    const query = `DROP TABLE IF EXISTS \`test.txt\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2820', () => {
    const query = `DROP DATABASE test_01748;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2821', () => {
    const query = `drop table if exists summing_table01747;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2822', () => {
    const query = `drop view if exists rates01747;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2823', () => {
    const query = `drop view if exists agg_view01747;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2824', () => {
    const query = `drop table if exists dictst01747;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2825', () => {
    const query = `drop DICTIONARY if exists default.dict01747;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2826', () => {
    const query = `drop table summing_table01747;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2827', () => {
    const query = `drop view rates01747;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2828', () => {
    const query = `drop view agg_view01747;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2829', () => {
    const query = `drop DICTIONARY default.dict01747;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2830', () => {
    const query = `drop table dictst01747;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2831', () => {
    const query = `DROP TABLE IF EXISTS report;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2832', () => {
    const query = `DROP TABLE IF EXISTS replicated_report;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2833', () => {
    const query = `DROP TABLE IF EXISTS ttt01746;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2834', () => {
    const query = `DROP TABLE ttt01746;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2835', () => {
    const query = `drop table if exists lc_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2836', () => {
    const query = `DROP TABLE IF EXISTS \`01746_merge_tree\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2837', () => {
    const query = `DROP TABLE IF EXISTS \`01746_merge_tree_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2838', () => {
    const query = `DROP TABLE \`01746_merge_tree\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2839', () => {
    const query = `DROP TABLE \`01746_merge_tree_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2840', () => {
    const query = `DROP TABLE IF EXISTS \`01746_null\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2841', () => {
    const query = `DROP TABLE IF EXISTS \`01746_null_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2842', () => {
    const query = `DROP TABLE \`01746_null\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2843', () => {
    const query = `DROP TABLE \`01746_null_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2844', () => {
    const query = `DROP TABLE IF EXISTS \`01746_local\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2845', () => {
    const query = `DROP TABLE IF EXISTS \`01746_dist\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2846', () => {
    const query = `DROP TABLE IF EXISTS \`01746_dist_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2847', () => {
    const query = `DROP TABLE \`01746_local\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2848', () => {
    const query = `DROP TABLE \`01746_dist\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2849', () => {
    const query = `DROP TABLE \`01746_dist_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2850', () => {
    const query = `DROP TABLE IF EXISTS \`01746_merge_t\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2851', () => {
    const query = `DROP TABLE IF EXISTS \`01746_merge\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2852', () => {
    const query = `DROP TABLE IF EXISTS \`01746_merge_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2853', () => {
    const query = `DROP TABLE \`01746_merge_t\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2854', () => {
    const query = `DROP TABLE \`01746_merge\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2855', () => {
    const query = `DROP TABLE \`01746_merge_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2856', () => {
    const query = `DROP TABLE IF EXISTS \`01746_buffer_t\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2857', () => {
    const query = `DROP TABLE IF EXISTS \`01746_buffer\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2858', () => {
    const query = `DROP TABLE IF EXISTS \`01746_buffer_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2859', () => {
    const query = `DROP TABLE \`01746_buffer_t\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2860', () => {
    const query = `DROP TABLE \`01746_buffer\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2861', () => {
    const query = `DROP TABLE \`01746_buffer_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2862', () => {
    const query = `drop table if exists XXXX;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2863', () => {
    const query = `drop table XXXX;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2864', () => {
    const query = `DROP TABLE IF EXISTS prewhere_move_select_final;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2865', () => {
    const query = `DROP TABLE prewhere_move_select_final;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2866', () => {
    const query = `drop table if exists test_enum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2867', () => {
    const query = `drop table test_enum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2868', () => {
    const query = `DROP TABLE IF EXISTS join_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2869', () => {
    const query = `DROP TABLE IF EXISTS bad_conversions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2870', () => {
    const query = `DROP TABLE IF EXISTS bad_conversions_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2871', () => {
    const query = `drop table if exists data_01730;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2872', () => {
    const query = `drop table data_01730;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2873', () => {
    const query = `drop database if exists db_01721;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2874', () => {
    const query = `drop table if exists db_01721.table_decimal_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2875', () => {
    const query = `drop dictionary if exists db_01721.decimal_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2876', () => {
    const query = `drop table if exists table_decimal_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2877', () => {
    const query = `drop dictionary if exists cache_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2878', () => {
    const query = `DROP TABLE IF EXISTS constraint_constant_number_expression;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2879', () => {
    const query = `DROP TABLE constraint_constant_number_expression;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2880', () => {
    const query = `DROP TABLE IF EXISTS constraint_constant_number_expression_non_uint8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2881', () => {
    const query = `DROP TABLE constraint_constant_number_expression_non_uint8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2882', () => {
    const query = `DROP TABLE IF EXISTS constraint_constant_nullable_expression_that_contains_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2883', () => {
    const query = `DROP TABLE constraint_constant_nullable_expression_that_contains_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2884', () => {
    const query = `DROP TABLE IF EXISTS table_map_with_key_integer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2885', () => {
    const query = `DROP TABLE IF EXISTS file_engine_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2886', () => {
    const query = `DROP TABLE file_engine_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2887', () => {
    const query = `DROP DATABASE IF EXISTS 01720_dictionary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2888', () => {
    const query = `DROP DICTIONARY 01720_dictionary_db.dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2889', () => {
    const query = `DROP TABLE 01720_dictionary_db.dictionary_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2890', () => {
    const query = `DROP DATABASE 01720_dictionary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2891', () => {
    const query = `DROP TABLE IF EXISTS constraint_on_nullable_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2892', () => {
    const query = `DROP TABLE constraint_on_nullable_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2893', () => {
    const query = `DROP TABLE IF EXISTS constraint_on_low_cardinality_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2894', () => {
    const query = `DROP TABLE constraint_on_low_cardinality_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2895', () => {
    const query = `DROP TABLE IF EXISTS constraint_on_low_cardinality_nullable_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2896', () => {
    const query = `DROP TABLE constraint_on_low_cardinality_nullable_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2897', () => {
    const query = `DROP TABLE IF EXISTS signed_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2898', () => {
    const query = `DROP TABLE IF EXISTS test_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2899', () => {
    const query = `DROP TABLE test_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2900', () => {
    const query = `DROP TABLE IF EXISTS test_tuple_nested_in_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2901', () => {
    const query = `DROP TABLE test_tuple_nested_in_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2902', () => {
    const query = `DROP TABLE IF EXISTS test_tuple_nested_in_array_nested_in_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2903', () => {
    const query = `DROP TABLE test_tuple_nested_in_array_nested_in_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2904', () => {
    const query = `DROP TABLE IF EXISTS test_tuple_nested_in_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2905', () => {
    const query = `DROP TABLE test_tuple_nested_in_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2906', () => {
    const query = `DROP TABLE IF EXISTS test_tuple_nested_in_map_nested_in_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2907', () => {
    const query = `DROP TABLE test_tuple_nested_in_map_nested_in_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2908', () => {
    const query = `DROP TABLE IF EXISTS i20203_1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2909', () => {
    const query = `DROP TABLE IF EXISTS i20203_2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2910', () => {
    const query = `DROP TABLE i20203_1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2911', () => {
    const query = `DROP TABLE i20203_2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2912', () => {
    const query = `DROP TABLE IF EXISTS alter_drop_version;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2913', () => {
    const query = `DROP TABLE IF EXISTS old_school_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2914', () => {
    const query = `drop table if exists  data_proj_order_by_incomp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2915', () => {
    const query = `drop table if exists  data_proj_order_by_comp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2916', () => {
    const query = `drop table if exists projection_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2917', () => {
    const query = `drop table if exists projection_test_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2918', () => {
    const query = `drop table projection_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2919', () => {
    const query = `drop table projection_test_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2920', () => {
    const query = `drop table if exists projection_without_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2921', () => {
    const query = `drop table projection_without_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2922', () => {
    const query = `drop table if exists projection_test__fuzz_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2923', () => {
    const query = `drop table projection_test__fuzz_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2924', () => {
    const query = `drop row policy if exists filter on projection_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2925', () => {
    const query = `drop row policy filter on projection_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2926', () => {
    const query = `DROP TABLE IF EXISTS aggregate_functions_null_for_empty;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2927', () => {
    const query = `DROP TABLE aggregate_functions_null_for_empty;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2928', () => {
    const query = `DROP TABLE IF EXISTS transform_null_in;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2929', () => {
    const query = `DROP TABLE transform_null_in;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2930', () => {
    const query = `DROP TABLE IF EXISTS legacy_column_name_of_tuple_literal;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2931', () => {
    const query = `DROP TABLE legacy_column_name_of_tuple_literal;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2932', () => {
    const query = `DROP ROW POLICY rp ON t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2933', () => {
    const query = `drop table if exists z;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2934', () => {
    const query = `drop table z;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2935', () => {
    const query = `drop table if exists proj;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2936', () => {
    const query = `drop table proj;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2937', () => {
    const query = `drop table flows;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2938', () => {
    const query = `drop table if exists tp_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2939', () => {
    const query = `drop table if exists tp_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2940', () => {
    const query = `DROP TABLE IF EXISTS normal;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2941', () => {
    const query = `DROP TABLE normal;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2942', () => {
    const query = `drop table if exists atf_p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2943', () => {
    const query = `drop table atf_p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2944', () => {
    const query = `drop table if exists  data_order_by_proj_incomp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2945', () => {
    const query = `drop table if exists  data_order_by_proj_comp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2946', () => {
    const query = `drop table d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2947', () => {
    const query = `drop table if exists has_final_mark;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2948', () => {
    const query = `drop table if exists mixed_final_mark;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2949', () => {
    const query = `DROP TABLE r;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2950', () => {
    const query = `drop table if exists data_01709;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2951', () => {
    const query = `DROP TABLE IF EXISTS Y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2952', () => {
    const query = `DROP TABLE Y;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2953', () => {
    const query = `DROP DATABASE IF EXISTS sqllt SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2954', () => {
    const query = `DROP USER IF EXISTS sqllt_user;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2955', () => {
    const query = `DROP ROLE IF EXISTS sqllt_role;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2956', () => {
    const query = `DROP POLICY IF EXISTS sqllt_policy ON sqllt.table, sqllt.view, sqllt.dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2957', () => {
    const query = `DROP ROW POLICY IF EXISTS sqllt_row_policy ON sqllt.table, sqllt.view, sqllt.dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2958', () => {
    const query = `DROP QUOTA IF EXISTS sqllt_quota;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2959', () => {
    const query = `DROP SETTINGS PROFILE IF EXISTS sqllt_settings_profile;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2960', () => {
    const query = `DROP TABLE sqllt.table SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2961', () => {
    const query = `DROP DATABASE IF EXISTS sqllt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2962', () => {
    const query = `DROP TABLE IF EXISTS agg_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2963', () => {
    const query = `drop table tp_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2964', () => {
    const query = `DROP TABLE IF EXISTS sample_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2965', () => {
    const query = `DROP TABLE IF EXISTS 01686_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2966', () => {
    const query = `DROP TABLE IF EXISTS x_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2967', () => {
    const query = `DROP TABLE IF EXISTS y_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2968', () => {
    const query = `DROP TABLE x_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2969', () => {
    const query = `DROP TABLE y_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2970', () => {
    const query = `DROP DATABASE IF EXISTS 01681_database_for_flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2971', () => {
    const query = `DROP DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2972', () => {
    const query = `DROP TABLE 01681_database_for_flat_dictionary.simple_key_simple_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2973', () => {
    const query = `DROP DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2974', () => {
    const query = `DROP TABLE 01681_database_for_flat_dictionary.simple_key_complex_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2975', () => {
    const query = `DROP DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_hierarchy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2976', () => {
    const query = `DROP TABLE 01681_database_for_flat_dictionary.simple_key_hierarchy_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2977', () => {
    const query = `DROP DATABASE 01681_database_for_flat_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2978', () => {
    const query = `DROP TABLE IF EXISTS tmp_01683;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2979', () => {
    const query = `DROP TABLE IF EXISTS dist_01683;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2980', () => {
    const query = `DROP TABLE tmp_01683;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2981', () => {
    const query = `DROP TABLE dist_01683;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2982', () => {
    const query = `DROP TABLE IF EXISTS encryption_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2983', () => {
    const query = `DROP TABLE encryption_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2984', () => {
    const query = `DROP DATABASE IF EXISTS 01682_database_for_cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2985', () => {
    const query = `DROP DICTIONARY 01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2986', () => {
    const query = `DROP TABLE 01682_database_for_cache_dictionary.complex_key_simple_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2987', () => {
    const query = `DROP DICTIONARY 01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2988', () => {
    const query = `DROP TABLE 01682_database_for_cache_dictionary.complex_key_complex_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2989', () => {
    const query = `DROP DATABASE 01682_database_for_cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2990', () => {
    const query = `DROP DATABASE IF EXISTS 01681_database_for_cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2991', () => {
    const query = `DROP DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2992', () => {
    const query = `DROP TABLE 01681_database_for_cache_dictionary.simple_key_simple_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2993', () => {
    const query = `DROP DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2994', () => {
    const query = `DROP TABLE 01681_database_for_cache_dictionary.simple_key_complex_attributes_source_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2995', () => {
    const query = `DROP DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2996', () => {
    const query = `DROP TABLE 01681_database_for_cache_dictionary.simple_key_hierarchy_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2997', () => {
    const query = `DROP DATABASE 01681_database_for_cache_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2998', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_nullable_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 2999', () => {
    const query = `DROP TABLE IF EXISTS nullable_string_value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3000', () => {
    const query = `DROP TABLE nullable_string_value; `;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3001', () => {
    const query = `DROP TABLE bloom_filter_nullable_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3002', () => {
    const query = `DROP DATABASE IF EXISTS test_01676 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3003', () => {
    const query = `DROP DATABASE test_01676;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3004', () => {
    const query = `DROP TABLE IF EXISTS t_filter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3005', () => {
    const query = `DROP TABLE IF EXISTS group_bitmap_data_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3006', () => {
    const query = `drop table if exists neighbor_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3007', () => {
    const query = `drop table if exists dist_01670;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3008', () => {
    const query = `drop table if exists data_01670;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3009', () => {
    const query = `drop table dist_01670;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3010', () => {
    const query = `drop table data_01670;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3011', () => {
    const query = `DROP DICTIONARY IF EXISTS database_dictionary_test_key_expression.test_query_log_dictionary_simple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3012', () => {
    const query = `DROP DICTIONARY IF EXISTS database_dictionary_test_key_expression.test_query_log_dictionary_complex;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3013', () => {
    const query = `DROP TABLE IF EXISTS database_dictionary_test_key_expression.test_for_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3014', () => {
    const query = `DROP DATABASE IF EXISTS database_dictionary_test_key_expression;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3015', () => {
    const query = `DROP TABLE IF EXISTS test_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3016', () => {
    const query = `DROP TABLE IF EXISTS test_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3017', () => {
    const query = `DROP TABLE test_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3018', () => {
    const query = `DROP TABLE test_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3019', () => {
    const query = `DROP TABLE IF EXISTS data_01655;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3020', () => {
    const query = `DROP TABLE data_01655;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3021', () => {
    const query = `drop table tab3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3022', () => {
    const query = `DROP TABLE IF EXISTS data_01660;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3023', () => {
    const query = `DROP TABLE data_01660;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3024', () => {
    const query = `DROP TABLE IF EXISTS t_v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3025', () => {
    const query = `DROP database IF EXISTS test_query_log_factories_info1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3026', () => {
    const query = `DROP TABLE test_query_log_factories_info1.memory_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3027', () => {
    const query = `DROP DATABASE test_query_log_factories_info1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3028', () => {
    const query = `DROP TABLE IF EXISTS test_sequenceNextNode_Nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3029', () => {
    const query = `DROP TABLE IF EXISTS test_sequenceNextNode;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3030', () => {
    const query = `DROP TABLE IF EXISTS test_base_condition;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3031', () => {
    const query = `DROP TABLE table_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3032', () => {
    const query = `DROP TABLE table_with_enum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3033', () => {
    const query = `DROP TABLE IF EXISTS ttl_old_syntax;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3034', () => {
    const query = `DROP TABLE lc_null_int8_defnull;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3035', () => {
    const query = `drop table table_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3036', () => {
    const query = `drop table if exists perf_lc_num;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3037', () => {
    const query = `DROP TABLE IF EXISTS xp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3038', () => {
    const query = `DROP TABLE IF EXISTS xp_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3039', () => {
    const query = `DROP TABLE IF EXISTS trace_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3040', () => {
    const query = `DROP TABLE IF EXISTS test_01640;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3041', () => {
    const query = `DROP TABLE IF EXISTS restore_01640;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3042', () => {
    const query = `DROP TABLE test_01640;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3043', () => {
    const query = `DROP TABLE restore_01640;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3044', () => {
    const query = `DROP TABLE IF EXISTS partitioned_table SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3045', () => {
    const query = `drop table if exists alias_key_condition;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3046', () => {
    const query = `DROP TABLE IF EXISTS mutations_and_escaping_1648;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3047', () => {
    const query = `DROP TABLE mutations_and_escaping_1648;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3048', () => {
    const query = `DROP TABLE IF EXISTS data_01646;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3049', () => {
    const query = `DROP TABLE data_01646;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3050', () => {
    const query = `DROP TABLE IF EXISTS test_alias;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3051', () => {
    const query = `DROP TABLE test_alias;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3052', () => {
    const query = `DROP TABLE IF EXISTS trend;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3053', () => {
    const query = `DROP TABLE trend;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3054', () => {
    const query = `drop table if exists dist_01643;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3055', () => {
    const query = `drop table if exists data_01643;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3056', () => {
    const query = `drop table dist_01643;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3057', () => {
    const query = `drop table if exists rep_fsync_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3058', () => {
    const query = `drop table if exists rep_fsync_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3059', () => {
    const query = `drop table rep_fsync_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3060', () => {
    const query = `drop table rep_fsync_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3061', () => {
    const query = `drop table data_01643;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3062', () => {
    const query = `drop table if exists data_01641;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3063', () => {
    const query = `drop table data_01641;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3064', () => {
    const query = `DROP TABLE IF EXISTS adaptive_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3065', () => {
    const query = `DROP TABLE adaptive_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3066', () => {
    const query = `DROP TABLE IF EXISTS distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3067', () => {
    const query = `DROP TABLE distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3068', () => {
    const query = `DROP TABLE IF EXISTS open_events_tmp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3069', () => {
    const query = `DROP TABLE IF EXISTS tracking_events_tmp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3070', () => {
    const query = `DROP TABLE open_events_tmp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3071', () => {
    const query = `DROP TABLE tracking_events_tmp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3072', () => {
    const query = `DROP TABLE IF EXISTS sum_map_overflow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3073', () => {
    const query = `drop table if exists p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3074', () => {
    const query = `drop table if exists dt_overflow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3075', () => {
    const query = `drop table if exists test_smt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3076', () => {
    const query = `drop table if exists simple_agf_summing_mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3077', () => {
    const query = `DROP TABLE IF EXISTS simple_agf_aggregating_mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3078', () => {
    const query = `DROP TABLE simple_agf_aggregating_mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3079', () => {
    const query = `DROP TABLE simple_agf_summing_mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3080', () => {
    const query = `DROP TABLE IF EXISTS cnf_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3081', () => {
    const query = `DROP TABLE cnf_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3082', () => {
    const query = `DROP DATABASE IF EXISTS db_memory_01625;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3083', () => {
    const query = `DROP TABLE IF EXISTS index_append_test_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3084', () => {
    const query = `DROP TABLE index_append_test_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3085', () => {
    const query = `DROP DATABASE db_memory_01625;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3086', () => {
    const query = `DROP TABLE IF EXISTS column_swap_test_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3087', () => {
    const query = `DROP TABLE column_swap_test_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3088', () => {
    const query = `DROP TABLE IF EXISTS t_bad_constraint;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3089', () => {
    const query = `DROP TABLE t_bad_constraint;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3090', () => {
    const query = `DROP TABLE IF EXISTS ttl_where;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3091', () => {
    const query = `DROP TABLE ttl_where;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3092', () => {
    const query = `DROP TABLE IF EXISTS ttl_group_by;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3093', () => {
    const query = `DROP TABLE ttl_group_by;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3094', () => {
    const query = `drop table if exists json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3095', () => {
    const query = `DROP TABLE IF EXISTS t_constraints_where;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3096', () => {
    const query = `DROP TABLE t_constraints_where;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3097', () => {
    const query = `DROP TABLE IF EXISTS constraint_test_assumption;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3098', () => {
    const query = `DROP TABLE IF EXISTS constraint_test_transitivity;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3099', () => {
    const query = `DROP TABLE IF EXISTS constraint_test_transitivity2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3100', () => {
    const query = `DROP TABLE IF EXISTS constraint_test_transitivity3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3101', () => {
    const query = `DROP TABLE IF EXISTS constraint_test_constants_repl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3102', () => {
    const query = `DROP TABLE IF EXISTS constraint_test_constants;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3103', () => {
    const query = `DROP TABLE constraint_test_constants;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3104', () => {
    const query = `DROP TABLE IF EXISTS zstd_1_00;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3105', () => {
    const query = `DROP TABLE IF EXISTS zstd_1_24;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3106', () => {
    const query = `DROP TABLE IF EXISTS zstd_9_00;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3107', () => {
    const query = `DROP TABLE IF EXISTS zstd_9_24;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3108', () => {
    const query = `DROP TABLE IF EXISTS words;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3109', () => {
    const query = `DROP TABLE zstd_1_00;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3110', () => {
    const query = `DROP TABLE zstd_1_24;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3111', () => {
    const query = `DROP TABLE zstd_9_00;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3112', () => {
    const query = `DROP TABLE zstd_9_24;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3113', () => {
    const query = `DROP TABLE words;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3114', () => {
    const query = `drop table if exists test_byte_size_number0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3115', () => {
    const query = `drop table if exists test_byte_size_number1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3116', () => {
    const query = `drop table if exists test_byte_size_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3117', () => {
    const query = `drop table if exists test_byte_size_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3118', () => {
    const query = `drop table if exists test_byte_size_complex_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3119', () => {
    const query = `drop table if exists test_byte_size_other;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3120', () => {
    const query = `drop table if exists test_byte_size_more_complex;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3121', () => {
    const query = `drop table if exists ay;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3122', () => {
    const query = `drop table if exists bad_date_time;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3123', () => {
    const query = `drop table if exists shard_0.tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3124', () => {
    const query = `drop table if exists shard_1.tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3125', () => {
    const query = `drop table distr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3126', () => {
    const query = `DROP TABLE IF EXISTS table_with_lc_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3127', () => {
    const query = `DROP TABLE IF EXISTS table_with_string_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3128', () => {
    const query = `DROP TABLE IF EXISTS wide_to_comp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3129', () => {
    const query = `DROP TABLE wide_to_comp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3130', () => {
    const query = `DROP TABLE IF EXISTS skip_idx_comp_parts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3131', () => {
    const query = `DROP TABLE skip_idx_comp_parts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3132', () => {
    const query = `drop table if exists enum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3133', () => {
    const query = `DROP SETTINGS PROFILE 'test_01605';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3134', () => {
    const query = `DROP USER 'test_01605';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3135', () => {
    const query = `DROP TABLE IF EXISTS distinct_two_level;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3136', () => {
    const query = `DROP database IF EXISTS test_1603_rename_bug_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3137', () => {
    const query = `DROP DATABASE test_1603_rename_bug_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3138', () => {
    const query = `DROP database IF EXISTS test_1603_rename_bug_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3139', () => {
    const query = `DROP DATABASE test_1603_rename_bug_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3140', () => {
    const query = `DROP TABLE IF EXISTS table_with_column_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3141', () => {
    const query = `DROP TABLE table_with_column_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3142', () => {
    const query = `DROP TABLE IF EXISTS test01603;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3143', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS test_01602a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3144', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS test_01602b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3145', () => {
    const query = `DROP TEMPORARY TABLE test_01602a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3146', () => {
    const query = `DROP TEMPORARY TABLE test_01602b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3147', () => {
    const query = `DROP DATABASE IF EXISTS test_1602;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3148', () => {
    const query = `DROP TABLE IF EXISTS runningConcurrency_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3149', () => {
    const query = `DROP TABLE runningConcurrency_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3150', () => {
    const query = `DROP DATABASE IF EXISTS test1601_detach_permanently_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3151', () => {
    const query = `drop table test1601_detach_permanently_atomic.test_name_reuse; -- { serverError UNKNOWN_TABLE } create table test1601_detach_permanently_atomic.test_name_rename_attempt (number UInt64) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3152', () => {
    const query = `DROP DATABASE test1601_detach_permanently_atomic SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3153', () => {
    const query = `DROP DATABASE IF EXISTS test1601_detach_permanently_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3154', () => {
    const query = `drop table test1601_detach_permanently_ordinary.test_name_reuse; -- { serverError UNKNOWN_TABLE } create table test1601_detach_permanently_ordinary.test_name_rename_attempt (number UInt64) engine=MergeTree order by tuple();`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3155', () => {
    const query = `DROP DATABASE test1601_detach_permanently_ordinary; -- { serverError DATABASE_NOT_EMPTY } ATTACH DATABASE test1601_detach_permanently_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3156', () => {
    const query = `DROP TABLE test1601_detach_permanently_ordinary.test_name_reuse;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3157', () => {
    const query = `DROP DATABASE test1601_detach_permanently_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3158', () => {
    const query = `DROP DATABASE IF EXISTS test1601_detach_permanently_lazy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3159', () => {
    const query = `drop table test1601_detach_permanently_lazy.test_name_reuse; -- { serverError UNKNOWN_TABLE } create table test1601_detach_permanently_lazy.test_name_rename_attempt (number UInt64) engine=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3160', () => {
    const query = `DROP DATABASE test1601_detach_permanently_lazy; -- { serverError DATABASE_NOT_EMPTY } ATTACH DATABASE test1601_detach_permanently_lazy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3161', () => {
    const query = `DROP TABLE test1601_detach_permanently_lazy.test_name_reuse;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3162', () => {
    const query = `DROP DATABASE test1601_detach_permanently_lazy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3163', () => {
    const query = `DROP TABLE IF EXISTS select_in_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3164', () => {
    const query = `DROP TABLE select_in_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3165', () => {
    const query = `DROP TABLE IF EXISTS ms;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3166', () => {
    const query = `DROP TABLE ms;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3167', () => {
    const query = `DROP TABLE IF EXISTS joint; -- the table name from the original issue. DROP TABLE IF EXISTS t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3168', () => {
    const query = `DROP TABLE joint;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3169', () => {
    const query = `drop table if exists data_01593;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3170', () => {
    const query = `drop table data_01593;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3171', () => {
    const query = `drop table if exists stack;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3172', () => {
    const query = `drop table if exists window_mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3173', () => {
    const query = `drop table window_mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3174', () => {
    const query = `DROP TABLE low_card;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3175', () => {
    const query = `DROP TABLE IF EXISTS replicated_mutations_empty_partitions SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3176', () => {
    const query = `DROP TABLE IF EXISTS realtimebuff;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3177', () => {
    const query = `DROP TABLE realtimedrep;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3178', () => {
    const query = `DROP TABLE realtimedistributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3179', () => {
    const query = `DROP TABLE realtimebuff;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3180', () => {
    const query = `drop table if exists insub;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3181', () => {
    const query = `DROP TABLE IF EXISTS prewhere_move;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3182', () => {
    const query = `DROP TABLE prewhere_move;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3183', () => {
    const query = `DROP TABLE bar;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3184', () => {
    const query = `DROP TABLE IF EXISTS replicated_deduplicate_by_columns_r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3185', () => {
    const query = `DROP TABLE IF EXISTS replicated_deduplicate_by_columns_r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3186', () => {
    const query = `DROP TABLE replicated_deduplicate_by_columns_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3187', () => {
    const query = `DROP TABLE replicated_deduplicate_by_columns_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3188', () => {
    const query = `DROP TABLE IF EXISTS source_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3189', () => {
    const query = `DROP TABLE IF EXISTS full_duplicates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3190', () => {
    const query = `DROP TABLE IF EXISTS partial_duplicates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3191', () => {
    const query = `DROP TABLE full_duplicates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3192', () => {
    const query = `DROP TABLE partial_duplicates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3193', () => {
    const query = `DROP TABLE source_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3194', () => {
    const query = `drop table if exists test_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3195', () => {
    const query = `drop table pd;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3196', () => {
    const query = `drop table pl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3197', () => {
    const query = `DROP DATABASE IF EXISTS database_for_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3198', () => {
    const query = `DROP DICTIONARY IF EXISTS database_for_dict.dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3199', () => {
    const query = `DROP DICTIONARY database_for_dict.dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3200', () => {
    const query = `DROP TABLE database_for_dict.table_for_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3201', () => {
    const query = `drop table order_by_const;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3202', () => {
    const query = `drop table if exists t_01568;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3203', () => {
    const query = `drop table t_01568;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3204', () => {
    const query = `drop table values_01564;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3205', () => {
    const query = `DROP TABLE IF EXISTS empty1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3206', () => {
    const query = `DROP TABLE IF EXISTS empty2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3207', () => {
    const query = `DROP TABLE IF EXISTS replacing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3208', () => {
    const query = `DROP TABLE replacing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3209', () => {
    const query = `DROP TABLE IF EXISTS collapsing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3210', () => {
    const query = `DROP TABLE collapsing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3211', () => {
    const query = `DROP TABLE IF EXISTS versioned_collapsing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3212', () => {
    const query = `DROP TABLE versioned_collapsing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3213', () => {
    const query = `DROP TABLE IF EXISTS summing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3214', () => {
    const query = `DROP TABLE summing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3215', () => {
    const query = `DROP TABLE IF EXISTS aggregating_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3216', () => {
    const query = `DROP TABLE aggregating_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3217', () => {
    const query = `DROP TABLE IF EXISTS empty;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3218', () => {
    const query = `DROP TABLE empty;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3219', () => {
    const query = `DROP TABLE IF EXISTS cat_hist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3220', () => {
    const query = `DROP TABLE IF EXISTS prod_hist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3221', () => {
    const query = `DROP TABLE IF EXISTS products_l;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3222', () => {
    const query = `DROP TABLE cat_hist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3223', () => {
    const query = `DROP TABLE prod_hist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3224', () => {
    const query = `DROP TABLE products_l;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3225', () => {
    const query = `DROP TABLE IF EXISTS mann_whitney_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3226', () => {
    const query = `DROP TABLE IF EXISTS welch_ttest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3227', () => {
    const query = `DROP TABLE IF EXISTS student_ttest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3228', () => {
    const query = `DROP TABLE IF EXISTS null_in_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3229', () => {
    const query = `DROP TABLE IF EXISTS enum_as_num;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3230', () => {
    const query = `drop table if exists dist_01555;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3231', () => {
    const query = `drop table if exists data_01555;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3232', () => {
    const query = `drop table dist_01555;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3233', () => {
    const query = `drop table data_01555;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3234', () => {
    const query = `DROP TABLE 01154_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3235', () => {
    const query = `drop table if EXISTS test_bm;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3236', () => {
    const query = `drop table if EXISTS test_bm_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3237', () => {
    const query = `drop table test_bm;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3238', () => {
    const query = `drop table test_bm_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3239', () => {
    const query = `DROP TABLE IF EXISTS data_01551;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3240', () => {
    const query = `DROP TABLE data_01551;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3241', () => {
    const query = `DROP TABLE IF EXISTS f;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3242', () => {
    const query = `DROP TABLE IF EXISTS map_formats;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3243', () => {
    const query = `DROP TABLE map_formats;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3244', () => {
    const query = `DROP TABLE IF EXISTS HASH_TEST_INSERT;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3245', () => {
    const query = `DROP TABLE IF EXISTS HASH_MV;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3246', () => {
    const query = `DROP TABLE HASH_MV;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3247', () => {
    const query = `DROP TABLE HASH_TEST_INSERT;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3248', () => {
    const query = `DROP TABLE IF EXISTS uncomparable_keys;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3249', () => {
    const query = `DROP TABLE IF EXISTS fct_rt_dc_shop_sku_vender_day;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3250', () => {
    const query = `DROP TABLE fct_rt_dc_shop_sku_vender_day;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3251', () => {
    const query = `drop table file_delim;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3252', () => {
    const query = `drop table url_delim;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3253', () => {
    const query = `DROP TABLE IF EXISTS fromModifiedJulianDay_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3254', () => {
    const query = `DROP TABLE fromModifiedJulianDay_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3255', () => {
    const query = `DROP TABLE IF EXISTS toModifiedJulianDay_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3256', () => {
    const query = `DROP TABLE toModifiedJulianDay_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3257', () => {
    const query = `DROP TABLE IF EXISTS collate_test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3258', () => {
    const query = `DROP TABLE IF EXISTS collate_test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3259', () => {
    const query = `DROP TABLE IF EXISTS collate_test3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3260', () => {
    const query = `DROP TABLE collate_test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3261', () => {
    const query = `DROP TABLE collate_test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3262', () => {
    const query = `DROP TABLE collate_test3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3263', () => {
    const query = `drop table if exists xy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3264', () => {
    const query = `drop table if exists xyz;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3265', () => {
    const query = `DROP TABLE IF EXISTS optimize_final;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3266', () => {
    const query = `DROP TABLE optimize_final;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3267', () => {
    const query = `DROP TABLE IF EXISTS nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3268', () => {
    const query = `DROP TABLE nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3269', () => {
    const query = `DROP TABLE IF EXISTS bug_14144;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3270', () => {
    const query = `DROP TABLE bug_14144;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3271', () => {
    const query = `DROP TABLE IF EXISTS bug_13492;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3272', () => {
    const query = `DROP TABLE bug_13492;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3273', () => {
    const query = `DROP TABLE IF EXISTS test_collate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3274', () => {
    const query = `DROP TABLE test_collate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3275', () => {
    const query = `DROP TABLE IF EXISTS test_01532_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3276', () => {
    const query = `DROP TABLE IF EXISTS test_01532_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3277', () => {
    const query = `DROP TABLE IF EXISTS test_01532_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3278', () => {
    const query = `DROP TABLE IF EXISTS test_01532_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3279', () => {
    const query = `DROP TABLE test_01532_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3280', () => {
    const query = `DROP TABLE test_01532_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3281', () => {
    const query = `DROP TABLE test_01532_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3282', () => {
    const query = `DROP TABLE test_01532_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3283', () => {
    const query = `DROP TABLE IF EXISTS merge_tree_pk SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3284', () => {
    const query = `DROP TABLE IF EXISTS merge_tree_pk_sql SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3285', () => {
    const query = `DROP TABLE IF EXISTS replicated_merge_tree_pk_sql SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3286', () => {
    const query = `drop table if exists local_t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3287', () => {
    const query = `DROP TABLE IF EXISTS execute_on_single_replica_r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3288', () => {
    const query = `DROP TABLE IF EXISTS execute_on_single_replica_r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3289', () => {
    const query = `DROP TABLE execute_on_single_replica_r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3290', () => {
    const query = `DROP TABLE execute_on_single_replica_r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3291', () => {
    const query = `DROP TABLE IF EXISTS test_collate_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3292', () => {
    const query = `DROP TABLE test_collate_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3293', () => {
    const query = `drop database if exists db_01530_atomic sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3294', () => {
    const query = `drop database db_01530_atomic sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3295', () => {
    const query = `drop database db_01530_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3296', () => {
    const query = `DROP TABLE IF EXISTS to_uuid_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3297', () => {
    const query = `DROP TABLE to_uuid_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3298', () => {
    const query = `drop table if exists dist_01528;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3299', () => {
    const query = `drop table dist_01528;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3300', () => {
    const query = `drop database if exists db_01527_ranges;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3301', () => {
    const query = `drop table if exists dist_01527;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3302', () => {
    const query = `drop table if exists data_01527;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3303', () => {
    const query = `drop table db_01527_ranges.data sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3304', () => {
    const query = `drop table data_01527;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3305', () => {
    const query = `drop table dist_01527;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3306', () => {
    const query = `drop table db_01527_ranges.data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3307', () => {
    const query = `drop dictionary db_01527_ranges.dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3308', () => {
    const query = `drop database db_01527_ranges;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3309', () => {
    const query = `DROP DATABASE IF EXISTS db_01526;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3310', () => {
    const query = `DROP DICTIONARY db_01526.dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3311', () => {
    const query = `DROP TABLE db_01526.table_for_dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3312', () => {
    const query = `DROP DATABASE db_01526;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3313', () => {
    const query = `DROP TABLE IF EXISTS test_fetch;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3314', () => {
    const query = `DROP TABLE test_fetch;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3315', () => {
    const query = `DROP TABLE IF EXISTS select_final;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3316', () => {
    const query = `DROP TABLE select_final;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3317', () => {
    const query = `DROP TABLE IF EXISTS max_length_alias_14053;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3318', () => {
    const query = `DROP TABLE max_length_alias_14053;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3319', () => {
    const query = `DROP TABLE IF EXISTS enum_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3320', () => {
    const query = `DROP TABLE topXtest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3321', () => {
    const query = `DROP TABLE IF EXISTS testNullableStates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3322', () => {
    const query = `DROP TABLE IF EXISTS testNullableStatesAgg;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3323', () => {
    const query = `DROP TABLE testNullableStates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3324', () => {
    const query = `DROP TABLE testNullableStatesAgg;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3325', () => {
    const query = `DROP TABLE IF EXISTS logs;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3326', () => {
    const query = `DROP TABLE logs;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3327', () => {
    const query = `DROP TABLE IF EXISTS test5346;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3328', () => {
    const query = `DROP TABLE test5346;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3329', () => {
    const query = `drop database if exists db_01517_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3330', () => {
    const query = `drop table db_01517_atomic.mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3331', () => {
    const query = `drop table db_01517_atomic.source sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3332', () => {
    const query = `drop database if exists db_01517_atomic_sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3333', () => {
    const query = `drop table db_01517_atomic_sync.mv sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3334', () => {
    const query = `drop database if exists db_01517_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3335', () => {
    const query = `drop table db_01517_ordinary.mv sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3336', () => {
    const query = `drop table db_01517_atomic_sync.source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3337', () => {
    const query = `drop table db_01517_ordinary.source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3338', () => {
    const query = `drop database db_01517_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3339', () => {
    const query = `drop database db_01517_atomic_sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3340', () => {
    const query = `drop database db_01517_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3341', () => {
    const query = `DROP DATABASE IF EXISTS test_01516;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3342', () => {
    const query = `DROP TABLE IF EXISTS primary_key_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3343', () => {
    const query = `DROP TABLE primary_key_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3344', () => {
    const query = `DROP DATABASE test_01516;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3345', () => {
    const query = `DROP TABLE goal;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3346', () => {
    const query = `DROP TABLE goal_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3347', () => {
    const query = `DROP TABLE visits;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3348', () => {
    const query = `DROP TABLE IF EXISTS data_01515;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3349', () => {
    const query = `DROP TABLE data_01515;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3350', () => {
    const query = `drop table if exists tsv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3351', () => {
    const query = `drop table tsv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3352', () => {
    const query = `DROP TABLE IF EXISTS table_with_enum_column_for_tsv_insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3353', () => {
    const query = `DROP TABLE IF EXISTS table_with_enum_column_for_json_insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3354', () => {
    const query = `DROP TABLE IF EXISTS table_with_enum_column_for_csv_insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3355', () => {
    const query = `DROP TABLE IF EXISTS merge_tree_table1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3356', () => {
    const query = `DROP TABLE buffer_table1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3357', () => {
    const query = `drop table if exists data_01513;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3358', () => {
    const query = `DROP TABLE IF EXISTS defaults_on_defaults;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3359', () => {
    const query = `DROP TABLE IF EXISTS quorum1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3360', () => {
    const query = `DROP TABLE IF EXISTS quorum2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3361', () => {
    const query = `DROP TABLE IF EXISTS quorum3 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3362', () => {
    const query = `DROP TABLE quorum1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3363', () => {
    const query = `DROP TABLE quorum2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3364', () => {
    const query = `DROP TABLE quorum3 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3365', () => {
    const query = `DROP TABLE IF EXISTS  test_not_found_column_nothing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3366', () => {
    const query = `DROP TABLE test_not_found_column_nothing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3367', () => {
    const query = `DROP TABLE IF EXISTS repro_hits;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3368', () => {
    const query = `DROP TABLE IF EXISTS table_with_version_replicated_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3369', () => {
    const query = `DROP TABLE IF EXISTS table_with_version_replicated_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3370', () => {
    const query = `DROP TABLE IF EXISTS table_with_version;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3371', () => {
    const query = `DROP TABLE IF EXISTS r1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3372', () => {
    const query = `DROP TABLE IF EXISTS r2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3373', () => {
    const query = `DROP TABLE IF EXISTS derived_metrics_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3374', () => {
    const query = `DROP TABLE derived_metrics_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3375', () => {
    const query = `DROP TABLE IF EXISTS buf_dest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3376', () => {
    const query = `DROP TABLE IF EXISTS buf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3377', () => {
    const query = `drop table if exists test_two_args;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3378', () => {
    const query = `drop table test_two_args;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3379', () => {
    const query = `DROP TABLE IF EXISTS t_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3380', () => {
    const query = `DROP TABLE IF EXISTS t_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3381', () => {
    const query = `DROP TABLE t_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3382', () => {
    const query = `DROP TABLE t_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3383', () => {
    const query = `DROP TABLE IF EXISTS testv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3384', () => {
    const query = `DROP TABLE testv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3385', () => {
    const query = `DROP TABLE IF EXISTS 01504_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3386', () => {
    const query = `DROP TABLE IF EXISTS 01504_test_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3387', () => {
    const query = `DROP TABLE IF EXISTS columns_with_multiple_streams;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3388', () => {
    const query = `DROP TABLE IF EXISTS columns_with_multiple_streams_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3389', () => {
    const query = `DROP TABLE IF EXISTS columns_with_multiple_streams_bad_case;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3390', () => {
    const query = `drop database if exists db_01501;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3391', () => {
    const query = `drop dictionary db_01501.cache_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3392', () => {
    const query = `drop table db_01501.table_cache_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3393', () => {
    const query = `DROP TABLE IF EXISTS test_new_col;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3394', () => {
    const query = `DROP TABLE IF EXISTS cte1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3395', () => {
    const query = `DROP TABLE IF EXISTS cte2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3396', () => {
    const query = `DROP TABLE cte1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3397', () => {
    const query = `DROP TABLE cte2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3398', () => {
    const query = `drop table if exists with_test ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3399', () => {
    const query = `drop table  with_test ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3400', () => {
    const query = `DROP TABLE IF EXISTS join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3401', () => {
    const query = `DROP TABLE join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3402', () => {
    const query = `DROP TABLE IF EXISTS set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3403', () => {
    const query = `DROP TABLE IF EXISTS number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3404', () => {
    const query = `DROP TABLE set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3405', () => {
    const query = `DROP TABLE number;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3406', () => {
    const query = `DROP TABLE IF EXISTS default_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3407', () => {
    const query = `DROP TABLE IF EXISTS r_prop_table1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3408', () => {
    const query = `DROP TABLE IF EXISTS r_prop_table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3409', () => {
    const query = `DROP TABLE IF EXISTS prop_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3410', () => {
    const query = `DROP TABLE IF EXISTS no_prop_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3411', () => {
    const query = `DROP TABLE IF EXISTS r_no_prop_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3412', () => {
    const query = `DROP TABLE IF EXISTS t_enum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3413', () => {
    const query = `DROP TABLE IF EXISTS t_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3414', () => {
    const query = `DROP TABLE IF EXISTS APPLICATION;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3415', () => {
    const query = `DROP TABLE IF EXISTS DATABASE_IO;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3416', () => {
    const query = `DROP TABLE APPLICATION;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3417', () => {
    const query = `DROP TABLE DATABASE_IO;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3418', () => {
    const query = `DROP TABLE IF EXISTS binary_op_mono1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3419', () => {
    const query = `DROP TABLE IF EXISTS binary_op_mono2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3420', () => {
    const query = `DROP TABLE IF EXISTS binary_op_mono3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3421', () => {
    const query = `DROP TABLE IF EXISTS binary_op_mono4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3422', () => {
    const query = `DROP TABLE IF EXISTS binary_op_mono5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3423', () => {
    const query = `DROP TABLE IF EXISTS binary_op_mono6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3424', () => {
    const query = `DROP TABLE IF EXISTS binary_op_mono7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3425', () => {
    const query = `DROP TABLE IF EXISTS binary_op_mono8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3426', () => {
    const query = `DROP TABLE IF EXISTS nr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3427', () => {
    const query = `DROP TABLE nr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3428', () => {
    const query = `DROP TABLE IF EXISTS null_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3429', () => {
    const query = `DROP TABLE null_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3430', () => {
    const query = `DROP TABLE IF EXISTS map_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3431', () => {
    const query = `DROP TABLE map_subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3432', () => {
    const query = `DROP TABLE IF EXISTS subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3433', () => {
    const query = `DROP TABLE subcolumns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3434', () => {
    const query = `DROP TABLE IF EXISTS t_arr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3435', () => {
    const query = `DROP TABLE IF EXISTS t_tup;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3436', () => {
    const query = `DROP TABLE IF EXISTS t_nul;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3437', () => {
    const query = `DROP TABLE t_arr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3438', () => {
    const query = `DROP TABLE t_nul;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3439', () => {
    const query = `DROP TABLE t_tup;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3440', () => {
    const query = `DROP TABLE t_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3441', () => {
    const query = `DROP TABLE IF EXISTS mutation_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3442', () => {
    const query = `DROP TABLE IF EXISTS local_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3443', () => {
    const query = `DROP TABLE IF EXISTS dist_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3444', () => {
    const query = `DROP TABLE local_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3445', () => {
    const query = `DROP TABLE dist_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3446', () => {
    const query = `DROP TABLE IF EXISTS table_for_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3447', () => {
    const query = `DROP TABLE IF EXISTS insert_select_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3448', () => {
    const query = `DROP TABLE IF EXISTS insert_select_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3449', () => {
    const query = `drop database test_01470;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3450', () => {
    const query = `DROP TABLE IF EXISTS columns_transformers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3451', () => {
    const query = `DROP TABLE columns_transformers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3452', () => {
    const query = `DROP TABLE IF EXISTS recompression_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3453', () => {
    const query = `DROP TABLE recompression_table_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3454', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_on_alias;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3455', () => {
    const query = `DROP TABLE IF EXISTS table_from_remote;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3456', () => {
    const query = `DROP TABLE IF EXISTS table_from_select;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3457', () => {
    const query = `DROP TABLE IF EXISTS table_from_numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3458', () => {
    const query = `DROP TABLE IF EXISTS pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3459', () => {
    const query = `DROP TABLE IF EXISTS tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3460', () => {
    const query = `DROP TABLE tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3461', () => {
    const query = `drop table if exists order_by_nulls_first;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3462', () => {
    const query = `drop table if exists order_by_another;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3463', () => {
    const query = `DROP TABLE IF EXISTS invalid_min_index_granularity_bytes_setting;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3464', () => {
    const query = `DROP TABLE IF EXISTS valid_min_index_granularity_bytes_setting;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3465', () => {
    const query = `DROP DATABASE IF EXISTS test_01457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3466', () => {
    const query = `DROP DATABASE test_01457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3467', () => {
    const query = `drop  table if exists order_test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3468', () => {
    const query = `DROP TABLE order_test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3469', () => {
    const query = `DROP TABLE IF EXISTS moons;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3470', () => {
    const query = `DROP TABLE IF EXISTS circles;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3471', () => {
    const query = `DROP DATABASE IF EXISTS db_01455_rank_correlation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3472', () => {
    const query = `DROP TABLE IF EXISTS compress_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3473', () => {
    const query = `drop table if exists badFixedStringSort;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3474', () => {
    const query = `DROP TABLE IF EXISTS replica1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3475', () => {
    const query = `DROP TABLE IF EXISTS replica2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3476', () => {
    const query = `DROP TABLE replica1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3477', () => {
    const query = `DROP TABLE replica2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3478', () => {
    const query = `DROP TABLE IF EXISTS replica1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3479', () => {
    const query = `DROP TABLE IF EXISTS replica2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3480', () => {
    const query = `DROP TABLE IF EXISTS mt_01451;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3481', () => {
    const query = `DROP TABLE mt_01451;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3482', () => {
    const query = `DROP TABLE IF EXISTS test_mtree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3483', () => {
    const query = `DROP TABLE test_mtree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3484', () => {
    const query = `DROP TABLE IF EXISTS t_01411;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3485', () => {
    const query = `DROP TABLE IF EXISTS t_01411_num;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3486', () => {
    const query = `DROP TABLE IF EXISTS tdm;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3487', () => {
    const query = `DROP TABLE IF EXISTS tdm2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3488', () => {
    const query = `DROP TABLE tdm;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3489', () => {
    const query = `DROP TABLE tdm2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3490', () => {
    const query = `DROP TABLE IF EXISTS test1_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3491', () => {
    const query = `DROP TABLE IF EXISTS test_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3492', () => {
    const query = `DROP TABLE test_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3493', () => {
    const query = `DROP TABLE test1_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3494', () => {
    const query = `DROP TABLE IF EXISTS pk_func;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3495', () => {
    const query = `DROP TABLE IF EXISTS modify_sample;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3496', () => {
    const query = `DROP TABLE modify_sample_replicated;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3497', () => {
    const query = `DROP TABLE modify_sample_old;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3498', () => {
    const query = `DROP TABLE pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3499', () => {
    const query = `DROP TABLE IF EXISTS index_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3500', () => {
    const query = `DROP TABLE index_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3501', () => {
    const query = `DROP TABLE IF EXISTS mytable_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3502', () => {
    const query = `DROP TABLE mytable_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3503', () => {
    const query = `DROP TABLE IF EXISTS table_float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3504', () => {
    const query = `DROP TABLE table_float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3505', () => {
    const query = `DROP SETTINGS PROFILE IF EXISTS s1_01418, s2_01418;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3506', () => {
    const query = `DROP SETTINGS PROFILE s1_01418;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3507', () => {
    const query = `DROP SETTINGS PROFILE s2_01418;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3508', () => {
    const query = `DROP TABLE IF EXISTS tableCommon;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3509', () => {
    const query = `DROP TABLE IF EXISTS tableTrees;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3510', () => {
    const query = `DROP TABLE IF EXISTS tableFlowers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3511', () => {
    const query = `DROP TABLE IF EXISTS table_with_pk_clear;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3512', () => {
    const query = `DROP TABLE IF EXISTS numbers_indexed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3513', () => {
    const query = `DROP TABLE IF EXISTS squares;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3514', () => {
    const query = `DROP TABLE IF EXISTS lc_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3515', () => {
    const query = `DROP TABLE IF EXISTS test_bloom_filter_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3516', () => {
    const query = `DROP TABLE IF EXISTS truncate_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3517', () => {
    const query = `DROP TABLE truncate_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3518', () => {
    const query = `DROP TABLE IF EXISTS rows_events_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3519', () => {
    const query = `DROP TABLE rows_events_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3520', () => {
    const query = `DROP TABLE IF EXISTS non_metadata_alters;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3521', () => {
    const query = `drop table if exists tesd_dedupl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3522', () => {
    const query = `drop table if exists test_23634;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3523', () => {
    const query = `drop table test_23634;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3524', () => {
    const query = `DROP TABLE IF EXISTS nullable_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3525', () => {
    const query = `DROP TABLE IF EXISTS nullable_key_without_final_mark;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3526', () => {
    const query = `DROP TABLE IF EXISTS nullable_minmax_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3527', () => {
    const query = `DROP TABLE nullable_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3528', () => {
    const query = `DROP TABLE nullable_key_without_final_mark;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3529', () => {
    const query = `DROP TABLE nullable_minmax_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3530', () => {
    const query = `DROP TABLE IF EXISTS xxxx_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3531', () => {
    const query = `DROP TABLE xxxx_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3532', () => {
    const query = `drop table if EXISTS l;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3533', () => {
    const query = `drop table l;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3534', () => {
    const query = `drop table if exists data_01409;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3535', () => {
    const query = `drop table data_01409;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3536', () => {
    const query = `DROP TABLE IF EXISTS test_joinGet;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3537', () => {
    const query = `DROP TABLE test_joinGet;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3538', () => {
    const query = `DROP TABLE test_lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3539', () => {
    const query = `DROP TABLE IF EXISTS check_codec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3540', () => {
    const query = `DROP TABLE check_codec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3541', () => {
    const query = `DROP DATABASE IF EXISTS test_01383;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3542', () => {
    const query = `DROP DATABASE test_01383;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3543', () => {
    const query = `DROP TABLE IF EXISTS table_rename_with_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3544', () => {
    const query = `DROP DICTIONARY IF EXISTS dictdb_01376.dict_exists;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3545', () => {
    const query = `DROP DATABASE IF EXISTS dictdb_01376;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3546', () => {
    const query = `DROP DICTIONARY dictdb_01376.dict_exists;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3547', () => {
    const query = `DROP TABLE dictdb_01376.table_for_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3548', () => {
    const query = `DROP DATABASE dictdb_01376;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3549', () => {
    const query = `DROP TABLE IF EXISTS tmp_01375;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3550', () => {
    const query = `DROP TABLE IF EXISTS table_tsv_01375;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3551', () => {
    const query = `DROP TABLE IF EXISTS table_csv_01375;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3552', () => {
    const query = `DROP TABLE IF EXISTS null_issue_3767;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3553', () => {
    const query = `DROP TABLE null_issue_3767;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3554', () => {
    const query = `DROP TABLE IF EXISTS codecs;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3555', () => {
    const query = `DROP TABLE codecs;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3556', () => {
    const query = `DROP TABLE IF EXISTS tt_error_1373;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3557', () => {
    const query = `DROP TABLE IF EXISTS tt_01373;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3558', () => {
    const query = `DROP TABLE IF EXISTS t1_01361;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3559', () => {
    const query = `DROP TABLE IF EXISTS t2_01361;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3560', () => {
    const query = `DROP TABLE IF EXISTS mv1_01361;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3561', () => {
    const query = `DROP TABLE IF EXISTS b1_01361;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3562', () => {
    const query = `DROP TABLE IF EXISTS slow_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3563', () => {
    const query = `DROP TABLE IF EXISTS expected_times;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3564', () => {
    const query = `DROP TABLE slow_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3565', () => {
    const query = `DROP TABLE expected_times;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3566', () => {
    const query = `drop table if exists mutation_delete_null_rows;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3567', () => {
    const query = `drop table mutation_delete_null_rows;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3568', () => {
    const query = `DROP TEMPORARY TABLE constrained;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3569', () => {
    const query = `DROP TABLE IF EXISTS versioned_collapsing_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3570', () => {
    const query = `drop table if exists table_01356_view_threads;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3571', () => {
    const query = `DROP TABLE IF EXISTS alter_01355;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3572', () => {
    const query = `DROP TABLE IF EXISTS cdp_orders;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3573', () => {
    const query = `DROP TABLE cdp_orders;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3574', () => {
    const query = `DROP TABLE IF EXISTS test SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3575', () => {
    const query = `DROP TABLE IF EXISTS test2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3576', () => {
    const query = `DROP TABLE test2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3577', () => {
    const query = `DROP TABLE IF EXISTS index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3578', () => {
    const query = `DROP TABLE index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3579', () => {
    const query = `DROP TABLE IF EXISTS test_01343;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3580', () => {
    const query = `DROP TABLE test_01343;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3581', () => {
    const query = `drop table if exists tsv_raw;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3582', () => {
    const query = `drop table tsv_raw;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3583', () => {
    const query = `drop table if exists table_01323_many_parts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3584', () => {
    const query = `DROP TABLE IF EXISTS test_nullable_float_issue7347;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3585', () => {
    const query = `DROP TABLE test_nullable_float_issue7347;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3586', () => {
    const query = `DROP TABLE tags;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3587', () => {
    const query = `drop table if exists aaa;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3588', () => {
    const query = `drop table if exists bbb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3589', () => {
    const query = `drop table aaa;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3590', () => {
    const query = `drop table bbb;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3591', () => {
    const query = `drop table if exists data_01320;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3592', () => {
    const query = `drop table if exists dist_01320;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3593', () => {
    const query = `drop table dist_01320;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3594', () => {
    const query = `drop table if exists data_01319;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3595', () => {
    const query = `drop table if exists dist_01319;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3596', () => {
    const query = `drop table if exists dist_layer_01319;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3597', () => {
    const query = `drop table data_01319;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3598', () => {
    const query = `drop table dist_01319;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3599', () => {
    const query = `drop table dist_layer_01319;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3600', () => {
    const query = `DROP TABLE IF EXISTS distributed_table_merged;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3601', () => {
    const query = `DROP TABLE IF EXISTS distributed_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3602', () => {
    const query = `DROP TABLE IF EXISTS distributed_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3603', () => {
    const query = `DROP TABLE IF EXISTS local_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3604', () => {
    const query = `DROP TABLE IF EXISTS local_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3605', () => {
    const query = `DROP TABLE IF EXISTS local_table_merged;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3606', () => {
    const query = `DROP TABLE local_table_merged;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3607', () => {
    const query = `DROP TABLE IF EXISTS r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3608', () => {
    const query = `DROP TABLE IF EXISTS r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3609', () => {
    const query = `DROP TABLE r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3610', () => {
    const query = `DROP TABLE r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3611', () => {
    const query = `drop table if exists final_bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3612', () => {
    const query = `DROP TABLE IF EXISTS add_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3613', () => {
    const query = `DROP ROW POLICY IF EXISTS filter ON t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3614', () => {
    const query = `DROP ROW POLICY filter ON t;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3615', () => {
    const query = `DROP TABLE IF EXISTS test_01307;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3616', () => {
    const query = `DROP TABLE test_01307;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3617', () => {
    const query = `drop table if exists t_buf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3618', () => {
    const query = `drop table if exists h;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3619', () => {
    const query = `drop table if exists polygon_01302;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3620', () => {
    const query = `drop table polygon_01302;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3621', () => {
    const query = `DROP TABLE IF EXISTS geo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3622', () => {
    const query = `DROP TABLE geo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3623', () => {
    const query = `drop table if exists merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3624', () => {
    const query = `drop table merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3625', () => {
    const query = `drop table merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3626', () => {
    const query = `DROP QUOTA IF EXISTS q1_01297, q2_01297, q3_01297, q4_01297, q5_01297, q6_01297, q7_01297, q8_01297, q9_01297, q10_01297, q11_01297, q12_01297, q13_01297, q14_01297, q15_01297, q16_01297, q17_01297,q18_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3627', () => {
    const query = `DROP QUOTA IF EXISTS q2_01297_renamed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3628', () => {
    const query = `DROP USER IF EXISTS u1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3629', () => {
    const query = `DROP ROLE IF EXISTS r1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3630', () => {
    const query = `DROP QUOTA q1_01297, q2_01297_renamed, q3_01297, q4_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3631', () => {
    const query = `DROP QUOTA q1_01297, q2_01297, q3_01297, q4_01297, q5_01297, q6_01297, q7_01297, q8_01297, q9_01297, q10_01297, q11_01297, q12_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3632', () => {
    const query = `DROP QUOTA q1_01297, q2_01297, q3_01297, q4_01297, q5_01297, q6_01297, q7_01297, q8_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3633', () => {
    const query = `DROP QUOTA q1_01297, q2_01297, q3_01297, q4_01297, q5_01297, q6_01297, q7_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3634', () => {
    const query = `DROP QUOTA q1_01297, q2_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3635', () => {
    const query = `DROP QUOTA q1_01297, q2_01297, q3_01297, q4_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3636', () => {
    const query = `DROP ROLE r1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3637', () => {
    const query = `DROP USER u1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3638', () => {
    const query = `DROP QUOTA IF EXISTS q1_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3639', () => {
    const query = `DROP QUOTA IF EXISTS q2_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3640', () => {
    const query = `DROP QUOTA IF EXISTS q3_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3641', () => {
    const query = `DROP QUOTA IF EXISTS q4_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3642', () => {
    const query = `DROP QUOTA IF EXISTS q5_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3643', () => {
    const query = `DROP QUOTA IF EXISTS q6_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3644', () => {
    const query = `DROP QUOTA IF EXISTS q7_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3645', () => {
    const query = `DROP QUOTA IF EXISTS q8_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3646', () => {
    const query = `DROP QUOTA IF EXISTS q9_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3647', () => {
    const query = `DROP QUOTA IF EXISTS q10_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3648', () => {
    const query = `DROP QUOTA IF EXISTS q11_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3649', () => {
    const query = `DROP QUOTA IF EXISTS q12_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3650', () => {
    const query = `DROP QUOTA IF EXISTS q13_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3651', () => {
    const query = `DROP QUOTA IF EXISTS q14_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3652', () => {
    const query = `DROP QUOTA IF EXISTS q15_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3653', () => {
    const query = `DROP QUOTA IF EXISTS q16_01297;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3654', () => {
    const query = `drop table if exists merge_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3655', () => {
    const query = `drop table if exists merge_distributed1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3656', () => {
    const query = `drop table merge_distributed1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3657', () => {
    const query = `drop table if exists data_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3658', () => {
    const query = `drop table data_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3659', () => {
    const query = `DROP ROW POLICY IF EXISTS p1_01296, p2_01296, p3_01296, p4_01296, p5_01296 ON db_01296.table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3660', () => {
    const query = `DROP ROW POLICY IF EXISTS p3_01296, p5_01296 ON db_01296.table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3661', () => {
    const query = `DROP DATABASE IF EXISTS db_01296;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3662', () => {
    const query = `DROP USER IF EXISTS u1_01296;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3663', () => {
    const query = `DROP POLICY p1_01296 ON table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3664', () => {
    const query = `DROP POLICY p1_01296 ON db_01296.table; -- { serverError UNKNOWN_ROW_POLICY } -- Policy not found SELECT '-- multiple policies';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3665', () => {
    const query = `DROP POLICY p1_01296, p2_01296 ON table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3666', () => {
    const query = `DROP POLICY p3_01296 ON table, table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3667', () => {
    const query = `DROP POLICY p4_01296 ON table, p5_01296 ON table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3668', () => {
    const query = `DROP POLICY p1_01296 ON db_01296.table; -- { serverError UNKNOWN_ROW_POLICY } -- Policy not found DROP POLICY p2_01296 ON db_01296.table; -- { serverError UNKNOWN_ROW_POLICY } -- Policy not found
DROP POLICY p3_01296 ON db_01296.table; -- { serverError UNKNOWN_ROW_POLICY } -- Policy not found
DROP POLICY p3_01296 ON db_01296.table2; -- { serverError UNKNOWN_ROW_POLICY } -- Policy not found
DROP POLICY p4_01296 ON db_01296.table; -- { serverError UNKNOWN_ROW_POLICY } -- Policy not found
DROP POLICY p5_01296 ON db_01296.table2; -- { serverError UNKNOWN_ROW_POLICY } -- Policy not found
USE default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3669', () => {
    const query = `DROP DATABASE db_01296;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3670', () => {
    const query = `DROP USER u1_01296;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3671', () => {
    const query = `DROP TABLE IF EXISTS delta_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3672', () => {
    const query = `DROP TABLE IF EXISTS zstd_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3673', () => {
    const query = `DROP TABLE IF EXISTS lz4_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3674', () => {
    const query = `DROP ROW POLICY IF EXISTS p1_01295, p2_01295, p3_01295, p4_01295, p5_01295, p6_01295, p7_01295, p8_01295, p9_01295, p10_01295 ON db.table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3675', () => {
    const query = `DROP ROW POLICY IF EXISTS p2_01295_renamed ON db.table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3676', () => {
    const query = `DROP ROW POLICY IF EXISTS p3_01295 ON db.table, db2.table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3677', () => {
    const query = `DROP ROW POLICY IF EXISTS p4_01295 ON db.table, p5_01295 ON db2.table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3678', () => {
    const query = `DROP USER IF EXISTS u1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3679', () => {
    const query = `DROP ROLE IF EXISTS r1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3680', () => {
    const query = `DROP ROW POLICY p1_01295, p2_01295_renamed, p3_01295 ON db.table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3681', () => {
    const query = `DROP ROW POLICY p1_01295, p2_01295, p3_01295 ON db.table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3682', () => {
    const query = `DROP POLICY p1_01295, p2_01295, p3_01295, p4_01295, p5_01295, p6_01295, p7_01295 ON db.table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3683', () => {
    const query = `DROP POLICY p1_01295, p2_01295 ON db.table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3684', () => {
    const query = `DROP POLICY p3_01295 ON db.table, db2.table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3685', () => {
    const query = `DROP POLICY p4_01295 ON db.table, p5_01295 ON db2.table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3686', () => {
    const query = `DROP ROLE r1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3687', () => {
    const query = `DROP USER u1_01295;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3688', () => {
    const query = `drop database if exists db_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3689', () => {
    const query = `drop table if exists db_01294.dist_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3690', () => {
    const query = `drop database db_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3691', () => {
    const query = `DROP SETTINGS PROFILE IF EXISTS s1_01294, s2_01294, s3_01294, s4_01294, s5_01294, s6_01294, s7_01294, s8_01294, s9_01294, s10_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3692', () => {
    const query = `DROP SETTINGS PROFILE IF EXISTS s2_01294_renamed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3693', () => {
    const query = `DROP USER IF EXISTS u1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3694', () => {
    const query = `DROP ROLE IF EXISTS r1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3695', () => {
    const query = `DROP SETTINGS PROFILE s1_01294, s2_01294_renamed, s3_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3696', () => {
    const query = `DROP PROFILE s1_01294, s2_01294, s3_01294, s4_01294, s5_01294, s6_01294, s7_01294, s8_01294, s9_01294, s10_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3697', () => {
    const query = `DROP PROFILE s1_01294, s2_01294, s3_01294, s4_01294, s5_01294, s6_01294, s7_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3698', () => {
    const query = `DROP SETTINGS PROFILE s1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3699', () => {
    const query = `DROP PROFILE s1_01294, s2_01294, s3_01294, s4_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3700', () => {
    const query = `DROP PROFILE s1_01294, s2_01294, s3_01294, s4_01294, s5_01294, s6_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3701', () => {
    const query = `DROP ROLE r1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3702', () => {
    const query = `DROP USER u1_01294;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3703', () => {
    const query = `drop table if exists null_01293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3704', () => {
    const query = `drop table if exists dist_01293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3705', () => {
    const query = `drop table null_01293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3706', () => {
    const query = `drop table dist_01293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3707', () => {
    const query = `DROP ROLE IF EXISTS r1_01293, r2_01293, r3_01293, r4_01293, r5_01293, r6_01293, r7_01293, r8_01293, r9_01293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3708', () => {
    const query = `DROP ROLE IF EXISTS r2_01293_renamed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3709', () => {
    const query = `DROP ROLE IF EXISTS r1_01293@'%', 'r2_01293@%.myhost.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3710', () => {
    const query = `DROP ROLE r1_01293, r2_01293_renamed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3711', () => {
    const query = `DROP ROLE r1_01293@'%', 'r2_01293@%.myhost.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3712', () => {
    const query = `DROP ROLE r1_01293, r2_01293, r3_01293, r4_01293, r5_01293, r6_01293, r7_01293, r8_01293, r9_01293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3713', () => {
    const query = `DROP ROLE r1_01293, r2_01293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3714', () => {
    const query = `DROP ROLE r1_01293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3715', () => {
    const query = `DROP ROLE r1_01293, r2_01293, r3_01293, r4_01293, r5_01293;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3716', () => {
    const query = `drop table if exists data_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3717', () => {
    const query = `DROP USER IF EXISTS u1_01292, u2_01292, u3_01292, u4_01292, u5_01292, u6_01292, u7_01292, u8_01292, u9_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3718', () => {
    const query = `DROP USER IF EXISTS u10_01292, u11_01292, u12_01292, u13_01292, u14_01292, u15_01292, u16_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3719', () => {
    const query = `DROP USER IF EXISTS u2_01292_renamed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3720', () => {
    const query = `DROP USER IF EXISTS u1_01292@'%', 'u2_01292@%.myhost.com', u3_01292@'192.168.%.%', 'u4_01292@::1', u5_01292@'65:ff0c::/96';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3721', () => {
    const query = `DROP USER IF EXISTS u5_01292@'%.host.com', u6_01292@'%.host.com', u7_01292@'%.host.com', u8_01292@'%.otherhost.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3722', () => {
    const query = `DROP ROLE IF EXISTS r1_01292, r2_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3723', () => {
    const query = `DROP USER u1_01292, u2_01292_renamed, u3_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3724', () => {
    const query = `DROP USER u1_01292, u2_01292, u3_01292, u4_01292, u5_01292, u6_01292, u7_01292, u8_01292, u9_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3725', () => {
    const query = `DROP USER u10_01292, u11_01292, u12_01292, u13_01292, u14_01292, u15_01292, u16_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3726', () => {
    const query = `DROP USER u1_01292@'%', 'u2_01292@%.myhost.com', u3_01292@'192.168.%.%', 'u4_01292@::1', u5_01292@'65:ff0c::/96';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3727', () => {
    const query = `DROP USER u1_01292, u2_01292, u3_01292, u4_01292, u5_01292, u6_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3728', () => {
    const query = `DROP USER u1_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3729', () => {
    const query = `DROP USER u1_01292, u2_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3730', () => {
    const query = `DROP USER u1_01292, u2_01292, u3_01292, u4_01292, u5_01292@'%.host.com', u6_01292@'%.host.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3731', () => {
    const query = `DROP USER u7_01292@'%.host.com', u8_01292@'%.otherhost.com';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3732', () => {
    const query = `DROP USER u1_01292, u2_01292, u3_01292, u4_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3733', () => {
    const query = `DROP USER u1_01292, u2_01292, u3_01292, u4_01292, u5_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3734', () => {
    const query = `DROP ROLE r1_01292, r2_01292;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3735', () => {
    const query = `DROP TABLE IF EXISTS pk_order;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3736', () => {
    const query = `DROP TABLE pk_order;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3737', () => {
    const query = `drop table if exists count_lc_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3738', () => {
    const query = `DROP TABLE count_lc_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3739', () => {
    const query = `DROP TABLE IF EXISTS ES;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3740', () => {
    const query = `DROP TABLE ES;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3741', () => {
    const query = `DROP TABLE IF EXISTS default_constraints;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3742', () => {
    const query = `DROP TABLE default_constraints;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3743', () => {
    const query = `DROP TABLE IF EXISTS date_datetime_key_condition;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3744', () => {
    const query = `DROP TABLE date_datetime_key_condition;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3745', () => {
    const query = `DROP TABLE IF EXISTS data_01285;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3746', () => {
    const query = `DROP TABLE data_01285;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3747', () => {
    const query = `drop table if exists view_bug_const;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3748', () => {
    const query = `drop table if exists num_10m;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3749', () => {
    const query = `DROP TABLE IF EXISTS data_01283;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3750', () => {
    const query = `DROP TABLE data_01283;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3751', () => {
    const query = `DROP TABLE IF EXISTS ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3752', () => {
    const query = `DROP TABLE ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3753', () => {
    const query = `DROP TABLE IF EXISTS current_failed_query_metrics;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3754', () => {
    const query = `DROP TABLE IF EXISTS to_insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3755', () => {
    const query = `DROP TABLE current_failed_query_metrics;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3756', () => {
    const query = `DROP TABLE to_insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3757', () => {
    const query = `DROP TABLE IF EXISTS rename_table_multiple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3758', () => {
    const query = `DROP TABLE IF EXISTS rename_table_multiple_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3759', () => {
    const query = `drop table if exists data_01279;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3760', () => {
    const query = `drop table data_01279;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3761', () => {
    const query = `DROP TABLE IF EXISTS rename_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3762', () => {
    const query = `DROP TABLE IF EXISTS rename_table_polymorphic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3763', () => {
    const query = `drop table if exists out_01277;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3764', () => {
    const query = `drop table if exists in_01277;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3765', () => {
    const query = `drop table if exists buffer_01277;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3766', () => {
    const query = `drop table if exists mv_01277_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3767', () => {
    const query = `drop table if exists mv_01277_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3768', () => {
    const query = `drop table mv_01277_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3769', () => {
    const query = `drop table mv_01277_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3770', () => {
    const query = `drop table buffer_01277;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3771', () => {
    const query = `drop table out_01277;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3772', () => {
    const query = `drop table in_01277;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3773', () => {
    const query = `DROP TABLE IF EXISTS table_for_rename1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3774', () => {
    const query = `DROP TABLE IF EXISTS table_for_rename;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3775', () => {
    const query = `DROP TABLE IF EXISTS visits;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3776', () => {
    const query = `DROP TABLE IF EXISTS visits_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3777', () => {
    const query = `DROP TABLE visits_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3778', () => {
    const query = `DROP TABLE IF EXISTS codecs2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3779', () => {
    const query = `DROP TABLE IF EXISTS codecs3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3780', () => {
    const query = `DROP TABLE IF EXISTS codecs4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3781', () => {
    const query = `DROP TABLE IF EXISTS codecs5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3782', () => {
    const query = `DROP TABLE IF EXISTS codecs6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3783', () => {
    const query = `DROP TABLE IF EXISTS codecs7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3784', () => {
    const query = `DROP TABLE IF EXISTS codecs8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3785', () => {
    const query = `DROP TABLE IF EXISTS codecs9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3786', () => {
    const query = `DROP TABLE IF EXISTS codecs10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3787', () => {
    const query = `DROP TABLE IF EXISTS codecs11;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3788', () => {
    const query = `DROP TABLE codecs1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3789', () => {
    const query = `DROP TABLE codecs2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3790', () => {
    const query = `DROP TABLE codecs3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3791', () => {
    const query = `DROP TABLE codecs4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3792', () => {
    const query = `DROP TABLE codecs5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3793', () => {
    const query = `DROP TABLE codecs6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3794', () => {
    const query = `DROP TABLE codecs7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3795', () => {
    const query = `DROP TABLE codecs8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3796', () => {
    const query = `DROP TABLE codecs9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3797', () => {
    const query = `DROP TABLE codecs10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3798', () => {
    const query = `DROP TABLE codecs11;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3799', () => {
    const query = `DROP TABLE IF EXISTS offset_without_limit;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3800', () => {
    const query = `DROP TABLE offset_without_limit;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3801', () => {
    const query = `drop table if exists data_01270;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3802', () => {
    const query = `drop table if exists dist_01270;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3803', () => {
    const query = `drop table data_01270;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3804', () => {
    const query = `drop table dist_01270;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3805', () => {
    const query = `DROP TABLE IF EXISTS data_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3806', () => {
    const query = `DROP TABLE IF EXISTS set_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3807', () => {
    const query = `DROP TABLE IF EXISTS cannot_be_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3808', () => {
    const query = `DROP TABLE data_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3809', () => {
    const query = `DROP TABLE set_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3810', () => {
    const query = `DROP TABLE cannot_be_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3811', () => {
    const query = `DROP TABLE IF EXISTS data_01269;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3812', () => {
    const query = `DROP TABLE data_01269;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3813', () => {
    const query = `DROP TABLE IF EXISTS dest_table_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3814', () => {
    const query = `DROP TABLE IF EXISTS dest_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3815', () => {
    const query = `DROP VIEW IF EXISTS dst_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3816', () => {
    const query = `drop table dest_table_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3817', () => {
    const query = `drop table left_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3818', () => {
    const query = `drop table right_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3819', () => {
    const query = `drop table dest_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3820', () => {
    const query = `drop view dst_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3821', () => {
    const query = `DROP DATABASE IF EXISTS database_for_dict_01268;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3822', () => {
    const query = `DROP TABLE IF EXISTS database_for_dict_01268.table_for_dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3823', () => {
    const query = `DROP TABLE IF EXISTS database_for_dict_01268.table_for_dict2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3824', () => {
    const query = `DROP TABLE IF EXISTS database_for_dict_01268.table_for_dict3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3825', () => {
    const query = `DROP DATABASE IF EXISTS db_01268;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3826', () => {
    const query = `DROP DICTIONARY IF EXISTS db_01268.dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3827', () => {
    const query = `DROP DICTIONARY IF EXISTS db_01268.dict2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3828', () => {
    const query = `DROP DICTIONARY IF EXISTS db_01268.dict3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3829', () => {
    const query = `DROP TABLE IF EXISTS ints;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3830', () => {
    const query = `DROP TABLE IF EXISTS floats;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3831', () => {
    const query = `DROP TABLE IF EXISTS strings;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3832', () => {
    const query = `DROP TABLE floats;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3833', () => {
    const query = `DROP TABLE ints;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3834', () => {
    const query = `DROP TABLE strings;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3835', () => {
    const query = `DROP TABLE IF EXISTS test_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3836', () => {
    const query = `DROP TABLE test_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3837', () => {
    const query = `DROP TABLE IF EXISTS test_alter_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3838', () => {
    const query = `DROP TABLE IF EXISTS test_alter_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3839', () => {
    const query = `DROP TABLE test_alter_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3840', () => {
    const query = `DROP TABLE test_alter_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3841', () => {
    const query = `DROP TABLE IF EXISTS tztest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3842', () => {
    const query = `DROP TABLE tztest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3843', () => {
    const query = `DROP TABLE IF EXISTS LOG_T;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3844', () => {
    const query = `DROP TABLE LOG_T;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3845', () => {
    const query = `DROP TABLE IF EXISTS testView;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3846', () => {
    const query = `DROP DATABASE IF EXISTS ordinary_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3847', () => {
    const query = `DROP DICTIONARY IF EXISTS ordinary_db.dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3848', () => {
    const query = `DROP TABLE IF EXISTS table_for_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3849', () => {
    const query = `DROP DATABASE IF EXISTS test_dict_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3850', () => {
    const query = `DROP TABLE IF EXISTS tutorial;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3851', () => {
    const query = `DROP TABLE tutorial;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3852', () => {
    const query = `DROP TABLE IF EXISTS mass_table_457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3853', () => {
    const query = `DROP TABLE mass_table_457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3854', () => {
    const query = `DROP TABLE IF EXISTS test_table_sharded;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3855', () => {
    const query = `DROP TABLE test_table_sharded;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3856', () => {
    const query = `DROP TABLE IF EXISTS database_for_dict.dict_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3857', () => {
    const query = `DROP DICTIONARY IF EXISTS database_for_dict.dictionary_with_hierarchy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3858', () => {
    const query = `DROP DICTIONARY database_for_dict.dictionary_with_hierarchy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3859', () => {
    const query = `DROP TABLE database_for_dict.dict_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3860', () => {
    const query = `DROP DATABASE database_for_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3861', () => {
    const query = `DROP DATABASE IF EXISTS test_01249;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3862', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_idx_good;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3863', () => {
    const query = `DROP DATABASE test_01249;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3864', () => {
    const query = `drop table if exists dist_01247;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3865', () => {
    const query = `drop table if exists dist_layer_01247;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3866', () => {
    const query = `drop table if exists data_01247;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3867', () => {
    const query = `drop table dist_01247;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3868', () => {
    const query = `drop table dist_layer_01247;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3869', () => {
    const query = `drop table data_01247;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3870', () => {
    const query = `drop table if exists test_quantile;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3871', () => {
    const query = `drop table test_quantile;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3872', () => {
    const query = `DROP TABLE join_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3873', () => {
    const query = `drop table test_graphite;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3874', () => {
    const query = `DROP TABLE test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3875', () => {
    const query = `drop table if exists kv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3876', () => {
    const query = `drop table if exists shard_0.num_01232;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3877', () => {
    const query = `drop table if exists shard_0.num2_01232;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3878', () => {
    const query = `drop table if exists shard_1.num_01232;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3879', () => {
    const query = `drop table if exists shard_1.num2_01232;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3880', () => {
    const query = `drop table if exists distr2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3881', () => {
    const query = `DROP TABLE IF EXISTS null_in;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3882', () => {
    const query = `DROP TABLE IF EXISTS null_in_subquery;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3883', () => {
    const query = `DROP TABLE IF EXISTS null_in_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3884', () => {
    const query = `DROP TABLE test_set2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3885', () => {
    const query = `DROP TABLE IF EXISTS markdown;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3886', () => {
    const query = `drop table if exists shard_0.shard_01231_distributed_aggregation_memory_efficient;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3887', () => {
    const query = `drop table if exists shard_1.shard_01231_distributed_aggregation_memory_efficient;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3888', () => {
    const query = `drop table if exists ma_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3889', () => {
    const query = `drop table ma_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3890', () => {
    const query = `DROP TABLE IF EXISTS test_merge_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3891', () => {
    const query = `DROP TABLE IF EXISTS test_distributed_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3892', () => {
    const query = `DROP TABLE test_merge_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3893', () => {
    const query = `DROP TABLE test_distributed_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3894', () => {
    const query = `DROP TABLE test_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3895', () => {
    const query = `DROP TABLE test_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3896', () => {
    const query = `drop table if exists data_01227;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3897', () => {
    const query = `drop table data_01227;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3898', () => {
    const query = `DROP DATABASE IF EXISTS dict_db_01225;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3899', () => {
    const query = `DROP DATABASE IF EXISTS dict_db_01225_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3900', () => {
    const query = `DROP DATABASE dict_db_01225_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3901', () => {
    const query = `DROP TABLE dict; -- { serverError CANNOT_DETACH_DICTIONARY_AS_TABLE } DROP DICTIONARY dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3902', () => {
    const query = `DROP DATABASE IF EXISTS dict_db_01224;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3903', () => {
    const query = `DROP DATABASE IF EXISTS dict_db_01224_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3904', () => {
    const query = `DROP DICTIONARY dict_db_01224.dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3905', () => {
    const query = `DROP DATABASE dict_db_01224;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3906', () => {
    const query = `DROP DATABASE dict_db_01224_dictionary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3907', () => {
    const query = `drop table if exists merge_dist_01223;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3908', () => {
    const query = `drop table if exists dist_01223;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3909', () => {
    const query = `drop table if exists dist_layer_01223;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3910', () => {
    const query = `drop table if exists data_01223;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3911', () => {
    const query = `drop table dist_01223;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3912', () => {
    const query = `drop table dist_layer_01223;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3913', () => {
    const query = `drop table merge_dist_01223;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3914', () => {
    const query = `drop table data_01223;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3915', () => {
    const query = `drop table if exists cdp_segments;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3916', () => {
    const query = `drop table if exists cdp_customers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3917', () => {
    const query = `drop table cdp_segments;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3918', () => {
    const query = `drop table cdp_customers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3919', () => {
    const query = `DROP TABLE IF EXISTS tt1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3920', () => {
    const query = `DROP TABLE IF EXISTS tt2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3921', () => {
    const query = `DROP TABLE IF EXISTS tt3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3922', () => {
    const query = `DROP TABLE IF EXISTS tt4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3923', () => {
    const query = `DROP TABLE IF EXISTS tt_m;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3924', () => {
    const query = `DROP TABLE local_01213;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3925', () => {
    const query = `DROP TABLE dist_01213;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3926', () => {
    const query = `DROP TABLE IF EXISTS table_for_rename_nested;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3927', () => {
    const query = `DROP TABLE IF EXISTS table_rename_with_default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3928', () => {
    const query = `DROP TABLE IF EXISTS table_for_rename_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3929', () => {
    const query = `DROP TABLE IF EXISTS table_for_rename_with_primary_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3930', () => {
    const query = `DROP TABLE IF EXISTS table_with_compact_parts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3931', () => {
    const query = `drop table if exists data_02000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3932', () => {
    const query = `drop table if exists dist_02000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3933', () => {
    const query = `drop table data_02000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3934', () => {
    const query = `drop table dist_02000;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3935', () => {
    const query = `DROP VIEW IF EXISTS v_01210;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3936', () => {
    const query = `DROP TABLE IF EXISTS mv_01210;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3937', () => {
    const query = `DROP TABLE IF EXISTS \`.inner.mv_01210\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3938', () => {
    const query = `DROP VIEW v_01210;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3939', () => {
    const query = `DROP VIEW mv_01210;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3940', () => {
    const query = `drop table if exists mt_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3941', () => {
    const query = `DROP TABLE IF EXISTS table_with_single_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3942', () => {
    const query = `DROP TABLE IF EXISTS table_with_multi_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3943', () => {
    const query = `DROP TABLE IF EXISTS table_with_function_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3944', () => {
    const query = `DROP TABLE IF EXISTS table_without_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3945', () => {
    const query = `DROP TABLE IF EXISTS summing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3946', () => {
    const query = `DROP TABLE summing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3947', () => {
    const query = `DROP DATABASE IF EXISTS test_01191;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3948', () => {
    const query = `DROP DATABASE IF EXISTS dummy_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3949', () => {
    const query = `DROP DATABASE dummy_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3950', () => {
    const query = `DROP DATABASE test_01191;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3951', () => {
    const query = `DROP TABLE IF EXISTS table3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3952', () => {
    const query = `DROP TABLE table3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3953', () => {
    const query = `drop table if exists file;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3954', () => {
    const query = `drop table file;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3955', () => {
    const query = `DROP TABLE IF EXISTS numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3956', () => {
    const query = `DROP TABLE numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3957', () => {
    const query = `DROP TABLE IF EXISTS test_repl ON CLUSTER test_shard_localhost NO DELAY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3958', () => {
    const query = `DROP TABLE test_repl ON CLUSTER test_shard_localhost NO DELAY;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3959', () => {
    const query = `drop table mt1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3960', () => {
    const query = `drop table mt2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3961', () => {
    const query = `drop table if exists txn_counters;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3962', () => {
    const query = `drop table txn_counters;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3963', () => {
    const query = `drop table if exists trunc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3964', () => {
    const query = `drop table trunc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3965', () => {
    const query = `drop database if exists test_1164_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3966', () => {
    const query = `drop database test_1164_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3967', () => {
    const query = `DROP VIEW IF EXISTS mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3968', () => {
    const query = `DROP TABLE IF EXISTS kcu1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3969', () => {
    const query = `DROP TABLE IF EXISTS kcu2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3970', () => {
    const query = `DROP VIEW v;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3971', () => {
    const query = `DROP TABLE kcu1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3972', () => {
    const query = `DROP TABLE kcu2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3973', () => {
    const query = `drop table rmt sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3974', () => {
    const query = `drop table buf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3975', () => {
    const query = `DROP DATABASE IF EXISTS test_01155_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3976', () => {
    const query = `DROP DATABASE IF EXISTS test_01155_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3977', () => {
    const query = `DROP DATABASE test_01155_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3978', () => {
    const query = `DROP TABLE IF EXISTS ".inner_id.e15f3ab5-6cae-4df3-b879-f40deafd82c2";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3979', () => {
    const query = `DROP TABLE mv SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3980', () => {
    const query = `DROP TABLE IF EXISTS demo_loan_01568_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3981', () => {
    const query = `DROP TABLE demo_loan_01568_dist;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3982', () => {
    const query = `drop table if exists src_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3983', () => {
    const query = `drop table if exists src_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3984', () => {
    const query = `drop table if exists src_table_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3985', () => {
    const query = `drop table src_table_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3986', () => {
    const query = `drop table src_table_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3987', () => {
    const query = `drop table src_table_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3988', () => {
    const query = `drop table if exists rmt sync;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3989', () => {
    const query = `DROP TABLE IF EXISTS rmt1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3990', () => {
    const query = `DROP TABLE IF EXISTS rmt3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3991', () => {
    const query = `DROP DATABASE IF EXISTS test_01148_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3992', () => {
    const query = `DROP DATABASE IF EXISTS test_01148_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3993', () => {
    const query = `DROP DATABASE test_01148_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3994', () => {
    const query = `DROP DATABASE IF EXISTS imdb_01148;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3995', () => {
    const query = `DROP DATABASE imdb_01148;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3996', () => {
    const query = `DROP TABLE IF EXISTS multiword_types;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3997', () => {
    const query = `DROP TABLE IF EXISTS unsigned_types;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3998', () => {
    const query = `DROP TABLE multiword_types;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 3999', () => {
    const query = `DROP TABLE unsigned_types;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4000', () => {
    const query = `drop table if exists wt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4001', () => {
    const query = `DROP TABLE IF EXISTS foo_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4002', () => {
    const query = `DROP TABLE IF EXISTS foo_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4003', () => {
    const query = `DROP TABLE foo_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4004', () => {
    const query = `DROP TABLE foo_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4005', () => {
    const query = `DROP TABLE pk_func;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4006', () => {
    const query = `DROP TABLE IF EXISTS nORX;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4007', () => {
    const query = `DROP TABLE nORX;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4008', () => {
    const query = `DROP TABLE IF EXISTS default_table SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4009', () => {
    const query = `DROP DICTIONARY IF EXISTS system.dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4010', () => {
    const query = `DROP TABLE IF EXISTS mass_table_312;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4011', () => {
    const query = `DROP TABLE mass_table_312;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4012', () => {
    const query = `DROP TABLE IF EXISTS mass_table_117;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4013', () => {
    const query = `DROP TABLE mass_table_117;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4014', () => {
    const query = `DROP TABLE IF EXISTS dest_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4015', () => {
    const query = `DROP TABLE dest_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4016', () => {
    const query = `DROP TABLE IF EXISTS rollup_having;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4017', () => {
    const query = `drop user if exists "       ";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4018', () => {
    const query = `drop user if exists '   spaces';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4019', () => {
    const query = `drop user if exists 'spaces    ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4020', () => {
    const query = `drop user if exists " spaces ";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4021', () => {
    const query = `drop user if exists "test 01119";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4022', () => {
    const query = `drop user "       ";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4023', () => {
    const query = `drop user '   spaces';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4024', () => {
    const query = `drop user 'spaces    ';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4025', () => {
    const query = `drop user " spaces ";`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4026', () => {
    const query = `DROP TABLE IF EXISTS prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4027', () => {
    const query = `DROP TABLE prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4028', () => {
    const query = `DROP DICTIONARY IF EXISTS dict_flat;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4029', () => {
    const query = `DROP DICTIONARY IF EXISTS dict_hashed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4030', () => {
    const query = `DROP DICTIONARY IF EXISTS dict_complex_cache;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4031', () => {
    const query = `DROP DICTIONARY dict_flat;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4032', () => {
    const query = `DROP DICTIONARY dict_hashed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4033', () => {
    const query = `DROP DICTIONARY dict_complex_cache;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4034', () => {
    const query = `DROP DATABASE IF EXISTS conv_main;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4035', () => {
    const query = `DROP TABLE IF EXISTS minmax_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4036', () => {
    const query = `DROP TABLE minmax_compact;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4037', () => {
    const query = `DROP TABLE IF EXISTS clear_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4038', () => {
    const query = `DROP TABLE clear_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4039', () => {
    const query = `DROP TABLE IF EXISTS check_table_with_indices;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4040', () => {
    const query = `DROP TABLE check_table_with_indices;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4041', () => {
    const query = `DROP DATABASE IF EXISTS db_for_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4042', () => {
    const query = `DROP DATABASE IF EXISTS test_01109;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4043', () => {
    const query = `DROP DATABASE IF EXISTS test_01109_other_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4044', () => {
    const query = `DROP DATABASE IF EXISTS test_01109_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4045', () => {
    const query = `DROP DATABASE IF EXISTS test_01109_rename_exists;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4046', () => {
    const query = `DROP DATABASE test_01109;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4047', () => {
    const query = `DROP DATABASE test_01109_other_atomic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4048', () => {
    const query = `DROP DATABASE test_01109_ordinary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4049', () => {
    const query = `DROP DATABASE test_01109_rename_exists;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4050', () => {
    const query = `DROP TABLE IF EXISTS d_one;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4051', () => {
    const query = `DROP TABLE d_one;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4052', () => {
    const query = `DROP TABLE IF EXISTS d_numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4053', () => {
    const query = `DROP TABLE d_numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4054', () => {
    const query = `DROP DATABASE test_01103;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4055', () => {
    const query = `DROP TABLE IF EXISTS hits;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4056', () => {
    const query = `DROP TABLE IF EXISTS hits_layer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4057', () => {
    const query = `DROP TABLE IF EXISTS visits_layer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4058', () => {
    const query = `DROP TABLE hits;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4059', () => {
    const query = `DROP TABLE hits_layer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4060', () => {
    const query = `DROP TABLE visits_layer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4061', () => {
    const query = `DROP TABLE IF EXISTS test_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4062', () => {
    const query = `DROP TABLE IF EXISTS test_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4063', () => {
    const query = `DROP TABLE test_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4064', () => {
    const query = `DROP TABLE test_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4065', () => {
    const query = `DROP TABLE IF EXISTS local_01099_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4066', () => {
    const query = `DROP TABLE IF EXISTS local_01099_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4067', () => {
    const query = `DROP TABLE IF EXISTS distributed_01099_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4068', () => {
    const query = `DROP TABLE IF EXISTS distributed_01099_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4069', () => {
    const query = `DROP TABLE local_01099_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4070', () => {
    const query = `DROP TABLE local_01099_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4071', () => {
    const query = `DROP TABLE distributed_01099_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4072', () => {
    const query = `DROP TABLE distributed_01099_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4073', () => {
    const query = `DROP TABLE IF EXISTS table_with_cyclic_defaults;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4074', () => {
    const query = `DROP TABLE IF EXISTS part;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4075', () => {
    const query = `DROP TABLE IF EXISTS supplier;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4076', () => {
    const query = `DROP TABLE IF EXISTS partsupp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4077', () => {
    const query = `DROP TABLE IF EXISTS lineitem;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4078', () => {
    const query = `DROP TABLE IF EXISTS nation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4079', () => {
    const query = `DROP TABLE IF EXISTS region;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4080', () => {
    const query = `DROP TABLE supplier;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4081', () => {
    const query = `DROP TABLE partsupp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4082', () => {
    const query = `DROP TABLE customer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4083', () => {
    const query = `DROP TABLE lineitem;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4084', () => {
    const query = `DROP TABLE nation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4085', () => {
    const query = `DROP TABLE region;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4086', () => {
    const query = `DROP TABLE IF EXISTS table_with_complex_default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4087', () => {
    const query = `DROP TABLE IF EXISTS test_default_using_alias;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4088', () => {
    const query = `DROP TABLE IF EXISTS mutations_and_quorum1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4089', () => {
    const query = `DROP TABLE IF EXISTS mutations_and_quorum2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4090', () => {
    const query = `DROP TABLE IF EXISTS old_format_mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4091', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4092', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.wv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4093', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.wv SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4094', () => {
    const query = `DROP DATABASE {CLICKHOUSE_DATABASE_1:Identifier};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4095', () => {
    const query = `DROP TABLE IF EXISTS table_with_defaults_on_aliases;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4096', () => {
    const query = `DROP TABLE functional_index_mergetree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4097', () => {
    const query = `DROP TABLE IF EXISTS url;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4098', () => {
    const query = `DROP TABLE IF EXISTS buffer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4099', () => {
    const query = `DROP TABLE IF EXISTS merge_tf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4100', () => {
    const query = `DROP TABLE IF EXISTS distributed_tf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4101', () => {
    const query = `DROP TABLE IF EXISTS rich_syntax;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4102', () => {
    const query = `DROP TABLE url;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4103', () => {
    const query = `DROP TABLE buffer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4104', () => {
    const query = `DROP TABLE merge_tf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4105', () => {
    const query = `DROP TABLE distributed_tf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4106', () => {
    const query = `DROP TABLE rich_syntax;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4107', () => {
    const query = `drop table if exists ax;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4108', () => {
    const query = `drop table if exists bx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4109', () => {
    const query = `drop table ax;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4110', () => {
    const query = `drop table bx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4111', () => {
    const query = `drop table if exists da_memory_efficient_shard;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4112', () => {
    const query = `drop table if exists test_01081;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4113', () => {
    const query = `drop table if exists A1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4114', () => {
    const query = `drop table if exists A_M;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4115', () => {
    const query = `drop table A1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4116', () => {
    const query = `drop table A_M;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4117', () => {
    const query = `drop table if exists {CLICKHOUSE_DATABASE:Identifier}.test_table_01080;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4118', () => {
    const query = `drop DICTIONARY if exists {CLICKHOUSE_DATABASE:Identifier}.test_dict_01080;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4119', () => {
    const query = `drop DICTIONARY   {CLICKHOUSE_DATABASE:Identifier}.test_dict_01080;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4120', () => {
    const query = `drop table   {CLICKHOUSE_DATABASE:Identifier}.test_table_01080;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4121', () => {
    const query = `DROP TABLE IF EXISTS mt_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4122', () => {
    const query = `DROP TABLE mt_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4123', () => {
    const query = `DROP TABLE IF EXISTS alter_default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4124', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_not_has;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4125', () => {
    const query = `drop table if exists t50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4126', () => {
    const query = `drop table t50;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4127', () => {
    const query = `DROP TABLE IF EXISTS test_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4128', () => {
    const query = `DROP USER IF EXISTS test_user_01075, test_user_01075_x, test_user_01075_x@localhost, test_user_01075_x@'192.168.23.15';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4129', () => {
    const query = `DROP USER test_user_01075;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4130', () => {
    const query = `DROP USER 'test_user_01075_x@192.168.23.15';`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4131', () => {
    const query = `DROP USER IF EXISTS test_user_01074;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4132', () => {
    const query = `DROP USER test_user_01074;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4133', () => {
    const query = `DROP DATABASE {CLICKHOUSE_DATABASE:Identifier};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4134', () => {
    const query = `DROP USER IF EXISTS test_user_01073;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4135', () => {
    const query = `DROP ROLE IF EXISTS test_role_01073;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4136', () => {
    const query = `DROP USER test_user_01073;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4137', () => {
    const query = `DROP ROLE test_role_01073;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4138', () => {
    const query = `DROP TABLE IF EXISTS test_01073_crlf_end_of_line;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4139', () => {
    const query = `DROP TABLE aine;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4140', () => {
    const query = `drop table dist_01072;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4141', () => {
    const query = `drop table data_01072;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4142', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS table_to_drop;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4143', () => {
    const query = `DROP TABLE IF EXISTS table_to_drop;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4144', () => {
    const query = `DROP TEMPORARY TABLE table_to_drop;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4145', () => {
    const query = `DROP TEMPORARY TABLE table_to_drop; -- { serverError UNKNOWN_TABLE } DROP TABLE table_to_drop;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4146', () => {
    const query = `DROP TABLE table_to_drop; -- { serverError UNKNOWN_TABLE } CREATE TABLE table_to_drop(x Int8) ENGINE=Log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4147', () => {
    const query = `DROP TABLE table_to_drop;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4148', () => {
    const query = `DROP TABLE IF EXISTS old_syntax_01071_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4149', () => {
    const query = `DROP TABLE IF EXISTS new_syntax_01071_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4150', () => {
    const query = `drop table if exists data_01071;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4151', () => {
    const query = `drop table if exists dist_01071;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4152', () => {
    const query = `drop table if exists data2_01071;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4153', () => {
    const query = `drop table if exists dist2_01071;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4154', () => {
    const query = `drop table if exists dist2_layer_01071;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4155', () => {
    const query = `DROP TABLE IF EXISTS test_table_for_01070_exception_code_in_query_log_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4156', () => {
    const query = `drop table if exists alter_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4157', () => {
    const query = `drop table alter_ttl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4158', () => {
    const query = `DROP TABLE IF EXISTS testmt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4159', () => {
    const query = `DROP TABLE testmt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4160', () => {
    const query = `DROP TABLE IF EXISTS mv_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4161', () => {
    const query = `DROP TABLE IF EXISTS mv_target;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4162', () => {
    const query = `DROP TABLE mv_source;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4163', () => {
    const query = `DROP TABLE mv_target;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4164', () => {
    const query = `DROP DATABASE IF EXISTS memory_01069;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4165', () => {
    const query = `DROP TABLE memory_01069.mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4166', () => {
    const query = `DROP DATABASE memory_01069;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4167', () => {
    const query = `DROP TABLE IF EXISTS logins;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4168', () => {
    const query = `DROP TABLE IF EXISTS mv_logins2target;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4169', () => {
    const query = `DROP TABLE IF EXISTS checkouts;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4170', () => {
    const query = `DROP TABLE IF EXISTS mv_checkouts2target;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4171', () => {
    const query = `DROP TABLE target_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4172', () => {
    const query = `DROP TABLE IF EXISTS test_alter_on_mutation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4173', () => {
    const query = `DROP TABLE IF EXISTS nested_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4174', () => {
    const query = `DROP TABLE nested_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4175', () => {
    const query = `DROP TABLE IF EXISTS alter_bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4176', () => {
    const query = `DROP TABLE IF EXISTS defaults_all_columns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4177', () => {
    const query = `DROP TABLE defaults_all_columns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4178', () => {
    const query = `DROP TABLE IF EXISTS lv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4179', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE_1:Identifier}.dict_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4180', () => {
    const query = `DROP TABLE IF EXISTS test_prewhere_default_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4181', () => {
    const query = `DROP TABLE IF EXISTS test_prewhere_column_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4182', () => {
    const query = `DROP TABLE test_prewhere_default_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4183', () => {
    const query = `DROP TABLE test_prewhere_column_type;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4184', () => {
    const query = `drop table mt_compact_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4185', () => {
    const query = `drop table if exists test_01054_overflow.ints;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4186', () => {
    const query = `DROP TABLE if exists test_01054.ints;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4187', () => {
    const query = `DROP DATABASE test_01054_overflow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4188', () => {
    const query = `DROP TABLE IF EXISTS wv SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4189', () => {
    const query = `DROP TABLE c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4190', () => {
    const query = `DROP TABLE IF EXISTS any_left_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4191', () => {
    const query = `DROP TABLE IF EXISTS any_inner_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4192', () => {
    const query = `DROP TABLE IF EXISTS any_right_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4193', () => {
    const query = `DROP TABLE IF EXISTS any_full_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4194', () => {
    const query = `DROP TABLE IF EXISTS semi_left_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4195', () => {
    const query = `DROP TABLE IF EXISTS semi_right_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4196', () => {
    const query = `DROP TABLE IF EXISTS anti_left_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4197', () => {
    const query = `DROP TABLE IF EXISTS anti_right_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4198', () => {
    const query = `DROP TABLE any_left_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4199', () => {
    const query = `DROP TABLE any_inner_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4200', () => {
    const query = `DROP TABLE any_right_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4201', () => {
    const query = `DROP TABLE semi_left_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4202', () => {
    const query = `DROP TABLE semi_right_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4203', () => {
    const query = `DROP TABLE anti_left_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4204', () => {
    const query = `DROP TABLE anti_right_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4205', () => {
    const query = `DROP TABLE IF EXISTS left_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4206', () => {
    const query = `DROP TABLE IF EXISTS inner_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4207', () => {
    const query = `DROP TABLE IF EXISTS right_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4208', () => {
    const query = `DROP TABLE IF EXISTS full_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4209', () => {
    const query = `DROP TABLE left_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4210', () => {
    const query = `DROP TABLE inner_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4211', () => {
    const query = `DROP TABLE right_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4212', () => {
    const query = `DROP TABLE full_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4213', () => {
    const query = `DROP TABLE IF EXISTS id1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4214', () => {
    const query = `DROP TABLE IF EXISTS id2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4215', () => {
    const query = `DROP TABLE id1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4216', () => {
    const query = `DROP TABLE id2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4217', () => {
    const query = `DROP TABLE IF EXISTS testJoinTable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4218', () => {
    const query = `DROP TABLE testJoinTable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4219', () => {
    const query = `DROP TABLE IF EXISTS master;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4220', () => {
    const query = `DROP TABLE IF EXISTS transaction;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4221', () => {
    const query = `DROP TABLE master;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4222', () => {
    const query = `DROP TABLE transaction;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4223', () => {
    const query = `DROP TABLE IF EXISTS some_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4224', () => {
    const query = `DROP TABLE some_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4225', () => {
    const query = `drop dictionary if exists {CLICKHOUSE_DATABASE:Identifier}.test_dict_01051_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4226', () => {
    const query = `drop table if exists {CLICKHOUSE_DATABASE:Identifier}.test_01051_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4227', () => {
    const query = `drop table if exists {CLICKHOUSE_DATABASE:Identifier}.test_view_01051_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4228', () => {
    const query = `DROP TABLE IF EXISTS table_for_synchronous_mutations1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4229', () => {
    const query = `DROP TABLE IF EXISTS table_for_synchronous_mutations2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4230', () => {
    const query = `DROP TABLE IF EXISTS table_for_synchronous_mutations_no_replication;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4231', () => {
    const query = `DROP TABLE IF EXISTS Alpha;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4232', () => {
    const query = `DROP TABLE IF EXISTS Beta;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4233', () => {
    const query = `DROP TABLE Alpha;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4234', () => {
    const query = `DROP TABLE Beta;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4235', () => {
    const query = `DROP DATABASE IF EXISTS test_01048;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4236', () => {
    const query = `DROP TABLE IF EXISTS test_01048.mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4237', () => {
    const query = `DROP TABLE IF EXISTS test_01048.mt_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4238', () => {
    const query = `DROP TABLE IF EXISTS test_01048.wv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4239', () => {
    const query = `DROP TABLE test_01048.wv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4240', () => {
    const query = `DROP TABLE test_01048.mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4241', () => {
    const query = `DROP TABLE test_01048.mt_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4242', () => {
    const query = `DROP DATABASE IF EXISTS db_01048;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4243', () => {
    const query = `DROP TABLE IF EXISTS db_01048.t_01048;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4244', () => {
    const query = `DROP TABLE db_01048.t_01048;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4245', () => {
    const query = `DROP DICTIONARY IF EXISTS t_01048;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4246', () => {
    const query = `DROP TABLE db_01048.t_01048; -- { serverError CANNOT_DETACH_DICTIONARY_AS_TABLE } DROP DICTIONARY db_01048.t_01048;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4247', () => {
    const query = `DROP VIEW db_01048.v_01048;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4248', () => {
    const query = `DROP TABLE db_01048.t_01048_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4249', () => {
    const query = `DROP DATABASE db_01048;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4250', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.mt_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4251', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.\`.inner.wv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4252', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.wv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4253', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4254', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.mt_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4255', () => {
    const query = `DROP TABLE IF EXISTS column_size_bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4256', () => {
    const query = `DROP TABLE column_size_bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4257', () => {
    const query = `DROP TABLE IF EXISTS requests;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4258', () => {
    const query = `DROP TABLE requests;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4259', () => {
    const query = `DROP TABLE IF EXISTS test_count;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4260', () => {
    const query = `DROP TABLE test_count;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4261', () => {
    const query = `DROP TABLE IF EXISTS t_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4262', () => {
    const query = `DROP DICTIONARY IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.restricted_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4263', () => {
    const query = `DROP TABLE IF EXISTS check_query_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4264', () => {
    const query = `DROP TABLE IF EXISTS check_query_test_non_adaptive;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4265', () => {
    const query = `DROP DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict_exists;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4266', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.table_for_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4267', () => {
    const query = `DROP TABLE IF EXISTS test_01040;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4268', () => {
    const query = `DROP TABLE IF EXISTS dist_test_01040;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4269', () => {
    const query = `DROP TABLE dist_test_01040;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4270', () => {
    const query = `DROP TABLE test_01040;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4271', () => {
    const query = `DROP TABLE IF EXISTS array_of_tuples;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4272', () => {
    const query = `DROP TABLE array_of_tuples;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4273', () => {
    const query = `DROP TABLE IF EXISTS mt_without_pk SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4274', () => {
    const query = `DROP TABLE IF EXISTS replicated_mt_without_pk SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4275', () => {
    const query = `DROP DATABASE IF EXISTS \`foo 1234\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4276', () => {
    const query = `DROP DATABASE IF EXISTS \`foo 123\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4277', () => {
    const query = `DROP DICTIONARY \`foo 1234\`.dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4278', () => {
    const query = `DROP TABLE \`foo 1234\`.dict_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4279', () => {
    const query = `DROP DATABASE \`foo 1234\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4280', () => {
    const query = `DROP DATABASE \`foo 123\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4281', () => {
    const query = `DROP DATABASE IF EXISTS empty_db_01036;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4282', () => {
    const query = `drop table if exists audience_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4283', () => {
    const query = `DROP TABLE IF EXISTS test_01035_avg;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4284', () => {
    const query = `drop table if exists sample_final;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4285', () => {
    const query = `drop table if exists test_max_parallel_replicas_lr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4286', () => {
    const query = `drop table test_max_parallel_replicas_lr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4287', () => {
    const query = `DROP TABLE IF EXISTS BannerDict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4288', () => {
    const query = `DROP DICTIONARY IF EXISTS {CLICKHOUSE_DATABASE_1:Identifier}.dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4289', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.table_for_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4290', () => {
    const query = `DROP TABLE IF EXISTS sometable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4291', () => {
    const query = `drop table if exists test_table_url_syntax ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4292', () => {
    const query = `drop table if exists test_table_url ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4293', () => {
    const query = `drop table test_table_url;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4294', () => {
    const query = `drop table if exists test_table_hdfs_syntax ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4295', () => {
    const query = `drop table if exists tst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4296', () => {
    const query = `drop table tst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4297', () => {
    const query = `DROP TABLE IF EXISTS empty_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4298', () => {
    const query = `DROP TABLE empty_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4299', () => {
    const query = `DROP DATABASE IF EXISTS dict_in_01023;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4300', () => {
    const query = `DROP TABLE output;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4301', () => {
    const query = `DROP TABLE dist_out;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4302', () => {
    const query = `DROP TABLE buffer_;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4303', () => {
    const query = `DROP TABLE null_;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4304', () => {
    const query = `DROP TABLE input;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4305', () => {
    const query = `DROP DICTIONARY dict_in_01023.dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4306', () => {
    const query = `DROP TABLE dict_in_01023.input;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4307', () => {
    const query = `DROP DATABASE dict_in_01023;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4308', () => {
    const query = `DROP TABLE IF EXISTS tuple_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4309', () => {
    const query = `DROP TABLE tuple_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4310', () => {
    const query = `DROP TABLE IF EXISTS create_as_select_01021;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4311', () => {
    const query = `DROP TABLE create_as_select_01021;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4312', () => {
    const query = `DROP TABLE IF EXISTS mv_extra_columns_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4313', () => {
    const query = `DROP TABLE IF EXISTS mv_extra_columns_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4314', () => {
    const query = `DROP TABLE IF EXISTS mv_extra_columns_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4315', () => {
    const query = `DROP TABLE mv_extra_columns_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4316', () => {
    const query = `DROP TABLE mv_extra_columns_dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4317', () => {
    const query = `DROP TABLE IF EXISTS src_01019;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4318', () => {
    const query = `DROP TABLE IF EXISTS dest_01019;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4319', () => {
    const query = `DROP TABLE IF EXISTS pipe_01019;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4320', () => {
    const query = `DROP TABLE src_01019;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4321', () => {
    const query = `DROP TABLE dest_01019;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4322', () => {
    const query = `DROP TABLE pipe_01019;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4323', () => {
    const query = `DROP TABLE IF EXISTS null_;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4324', () => {
    const query = `DROP TABLE IF EXISTS buffer_;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4325', () => {
    const query = `DROP TABLE IF EXISTS aggregation_;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4326', () => {
    const query = `DROP TABLE aggregation_;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4327', () => {
    const query = `DROP TABLE IF EXISTS TESTTABLE4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4328', () => {
    const query = `DROP TABLE TESTTABLE4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4329', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.table_from_ipv4_trie_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4330', () => {
    const query = `DROP DICTIONARY IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.dict_ipv4_trie;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4331', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.table_ipv4_trie;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4332', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.table_from_ip_trie_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4333', () => {
    const query = `DROP DICTIONARY IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.dict_ip_trie;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4334', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.table_ip_trie;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4335', () => {
    const query = `DROP DICTIONARY {CLICKHOUSE_DATABASE:Identifier}.dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4336', () => {
    const query = `DROP DATABASE IF EXISTS memory_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4337', () => {
    const query = `DROP DATABASE IF EXISTS db_01018;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4338', () => {
    const query = `DROP DATABASE IF EXISTS database_for_dict_01018;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4339', () => {
    const query = `DROP DICTIONARY IF EXISTS db_01018.dict1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4340', () => {
    const query = `DROP DATABASE IF EXISTS lazy_db;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4341', () => {
    const query = `DROP DICTIONARY memory_db.dict2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4342', () => {
    const query = `DROP TABLE IF EXISTS database_for_dict_01018.table_for_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4343', () => {
    const query = `DROP TABLE IF EXISTS mem1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4344', () => {
    const query = `DROP TABLE IF EXISTS dist_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4345', () => {
    const query = `DROP TABLE IF EXISTS dist_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4346', () => {
    const query = `DROP TABLE IF EXISTS dist_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4347', () => {
    const query = `drop table if exists null_01016;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4348', () => {
    const query = `drop table null_01016;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4349', () => {
    const query = `DROP TABLE IF EXISTS tuple_01016;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4350', () => {
    const query = `DROP TABLE tuple_01016;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4351', () => {
    const query = `DROP TABLE IF EXISTS table_01;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4352', () => {
    const query = `DROP TABLE IF EXISTS new_table_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4353', () => {
    const query = `DROP TABLE IF EXISTS check_table_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4354', () => {
    const query = `DROP TABLE new_table_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4355', () => {
    const query = `DROP TABLE check_table_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4356', () => {
    const query = `DROP TABLE as_foo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4357', () => {
    const query = `DROP TABLE dist_as_foo;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4358', () => {
    const query = `DROP TABLE IF EXISTS test_insert_t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4359', () => {
    const query = `DROP TABLE IF EXISTS test_insert_t2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4360', () => {
    const query = `DROP TABLE IF EXISTS test_insert_t3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4361', () => {
    const query = `DROP TABLE test_insert_t1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4362', () => {
    const query = `DROP TABLE test_insert_t2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4363', () => {
    const query = `DROP TABLE test_insert_t3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4364', () => {
    const query = `DROP TABLE IF EXISTS view_foo_bar;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4365', () => {
    const query = `DROP TABLE view_foo_bar;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4366', () => {
    const query = `DROP TABLE IF EXISTS ttl_with_default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4367', () => {
    const query = `DROP TABLE ttl_with_default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4368', () => {
    const query = `DROP TABLE IF EXISTS enums;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4369', () => {
    const query = `DROP TABLE enums;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4370', () => {
    const query = `DROP TABLE IF EXISTS bad_skip_idx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4371', () => {
    const query = `DROP TABLE IF EXISTS test_vertical_merge;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4372', () => {
    const query = `DROP TABLE IF EXISTS constrained;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4373', () => {
    const query = `DROP TABLE constrained;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4374', () => {
    const query = `DROP TABLE IF EXISTS constrained2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4375', () => {
    const query = `DROP TABLE constrained2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4376', () => {
    const query = `DROP TABLE IF EXISTS set_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4377', () => {
    const query = `DROP TABLE set_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4378', () => {
    const query = `DROP TABLE IF EXISTS ties;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4379', () => {
    const query = `DROP TABLE ties;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4380', () => {
    const query = `DROP TABLE IF EXISTS fill;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4381', () => {
    const query = `DROP TABLE fill;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4382', () => {
    const query = `DROP TABLE IF EXISTS order_with_aggr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4383', () => {
    const query = `DROP TABLE order_with_aggr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4384', () => {
    const query = `drop table if exists bloom_filter2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4385', () => {
    const query = `DROP TABLE IF EXISTS replicated_constraints1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4386', () => {
    const query = `DROP TABLE IF EXISTS replicated_constraints2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4387', () => {
    const query = `DROP TABLE replicated_constraints2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4388', () => {
    const query = `DROP TABLE IF EXISTS distr0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4389', () => {
    const query = `DROP TABLE IF EXISTS distr1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4390', () => {
    const query = `DROP TABLE IF EXISTS mat_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4391', () => {
    const query = `DROP TABLE IF EXISTS topk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4392', () => {
    const query = `DROP TABLE topk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4393', () => {
    const query = `DROP TABLE IF EXISTS merge_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4394', () => {
    const query = `DROP TABLE IF EXISTS merge_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4395', () => {
    const query = `DROP TABLE IF EXISTS merge_ab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4396', () => {
    const query = `DROP TABLE merge_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4397', () => {
    const query = `DROP TABLE merge_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4398', () => {
    const query = `DROP TABLE merge_ab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4399', () => {
    const query = `DROP TABLE IF EXISTS replicated_table_for_alter1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4400', () => {
    const query = `DROP TABLE IF EXISTS replicated_table_for_alter2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4401', () => {
    const query = `DROP TABLE IF EXISTS replicated_table_for_reset_setting1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4402', () => {
    const query = `DROP TABLE IF EXISTS replicated_table_for_reset_setting2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4403', () => {
    const query = `DROP TABLE numbers500k;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4404', () => {
    const query = `DROP TABLE IF EXISTS log_for_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4405', () => {
    const query = `DROP TABLE IF EXISTS table_for_reset_setting;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4406', () => {
    const query = `drop table if exists test_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4407', () => {
    const query = `DROP TABLE test3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4408', () => {
    const query = `DROP TABLE IF EXISTS set_index_not;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4409', () => {
    const query = `DROP TABLE set_index_not;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4410', () => {
    const query = `DROP TABLE IF EXISTS num;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4411', () => {
    const query = `DROP TABLE num;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4412', () => {
    const query = `DROP TABLE IF EXISTS han_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4413', () => {
    const query = `DROP TABLE IF EXISTS values_list;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4414', () => {
    const query = `DROP TABLE values_list;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4415', () => {
    const query = `drop table sample_prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4416', () => {
    const query = `DROP TABLE IF EXISTS dst1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4417', () => {
    const query = `DROP TABLE IF EXISTS src_to_dst1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4418', () => {
    const query = `DROP TABLE IF EXISTS dst2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4419', () => {
    const query = `DROP TABLE src_to_dst1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4420', () => {
    const query = `DROP TABLE dst1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4421', () => {
    const query = `DROP TABLE dst2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4422', () => {
    const query = `DROP TABLE IF EXISTS test_move_partition_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4423', () => {
    const query = `DROP TABLE IF EXISTS test_move_partition_dest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4424', () => {
    const query = `DROP TABLE test_move_partition_src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4425', () => {
    const query = `DROP TABLE test_move_partition_dest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4426', () => {
    const query = `DROP TABLE IF EXISTS test_00974;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4427', () => {
    const query = `DROP TABLE test_00974;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4428', () => {
    const query = `DROP TABLE IF EXISTS source_table1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4429', () => {
    const query = `DROP TABLE IF EXISTS source_table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4430', () => {
    const query = `DROP TABLE IF EXISTS distributed_table1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4431', () => {
    const query = `DROP TABLE IF EXISTS distributed_table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4432', () => {
    const query = `DROP TABLE source_table1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4433', () => {
    const query = `DROP TABLE source_table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4434', () => {
    const query = `DROP TABLE distributed_table1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4435', () => {
    const query = `DROP TABLE distributed_table2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4436', () => {
    const query = `DROP TABLE IF EXISTS indexed_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4437', () => {
    const query = `DROP TABLE IF EXISTS another_indexed_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4438', () => {
    const query = `DROP TABLE part_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4439', () => {
    const query = `DROP TABLE part_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4440', () => {
    const query = `DROP TABLE part_c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4441', () => {
    const query = `DROP TABLE part_d;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4442', () => {
    const query = `DROP TABLE IF EXISTS upyachka;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4443', () => {
    const query = `DROP TABLE upyachka;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4444', () => {
    const query = `DROP TABLE IF EXISTS ColumnsClauseTest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4445', () => {
    const query = `DROP TABLE ColumnsClauseTest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4446', () => {
    const query = `DROP TABLE IF EXISTS tableFile_00968;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4447', () => {
    const query = `DROP TABLE IF EXISTS tableMergeTree_00968;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4448', () => {
    const query = `DROP TABLE tableFile_00968;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4449', () => {
    const query = `DROP TABLE tableMergeTree_00968;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4450', () => {
    const query = `DROP TABLE IF EXISTS dist_00967;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4451', () => {
    const query = `DROP TABLE IF EXISTS underlying_00967;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4452', () => {
    const query = `DROP TABLE dist_00967;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4453', () => {
    const query = `DROP TABLE underlying_00967;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4454', () => {
    const query = `DROP TABLE IF EXISTS test_startsWith;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4455', () => {
    const query = `DROP TABLE test_startsWith;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4456', () => {
    const query = `DROP TABLE IF EXISTS t_enum8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4457', () => {
    const query = `DROP TABLE t_enum8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4458', () => {
    const query = `DROP TABLE IF EXISTS t_enum16;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4459', () => {
    const query = `DROP TABLE t_enum16;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4460', () => {
    const query = `DROP TABLE IF EXISTS test_00961;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4461', () => {
    const query = `DROP TABLE test_00961;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4462', () => {
    const query = `DROP TABLE IF EXISTS mt_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4463', () => {
    const query = `DROP TABLE IF EXISTS segfault_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4464', () => {
    const query = `DROP TABLE IF EXISTS mt_with_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4465', () => {
    const query = `DROP TABLE IF EXISTS alter_attach;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4466', () => {
    const query = `DROP TABLE IF EXISTS alter_update_00806;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4467', () => {
    const query = `DROP TABLE IF EXISTS mt_without_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4468', () => {
    const query = `DROP TABLE IF EXISTS mt_with_small_granularity;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4469', () => {
    const query = `DROP TABLE IF EXISTS moving_sum_num;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4470', () => {
    const query = `DROP TABLE IF EXISTS moving_sum_dec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4471', () => {
    const query = `DROP TABLE moving_sum_dec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4472', () => {
    const query = `DROP TABLE moving_sum_num;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4473', () => {
    const query = `DROP TABLE IF EXISTS part_info;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4474', () => {
    const query = `DROP TABLE part_info;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4475', () => {
    const query = `DROP TABLE IF EXISTS local_00952;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4476', () => {
    const query = `DROP TABLE IF EXISTS distributed_00952;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4477', () => {
    const query = `DROP TABLE distributed_00952;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4478', () => {
    const query = `DROP TABLE local_00952;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4479', () => {
    const query = `drop table if exists test_entry_distance;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4480', () => {
    const query = `drop table if exists decimals;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4481', () => {
    const query = `DROP TABLE IF EXISTS test_generic_events_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4482', () => {
    const query = `DROP TABLE IF EXISTS type_names;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4483', () => {
    const query = `DROP TABLE IF EXISTS values_template;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4484', () => {
    const query = `DROP TABLE IF EXISTS values_template_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4485', () => {
    const query = `DROP TABLE IF EXISTS values_template_fallback;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4486', () => {
    const query = `DROP TABLE type_names;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4487', () => {
    const query = `DROP TABLE values_template;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4488', () => {
    const query = `DROP TABLE values_template_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4489', () => {
    const query = `DROP TABLE values_template_fallback;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4490', () => {
    const query = `DROP TABLE IF EXISTS model;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4491', () => {
    const query = `DROP TABLE IF EXISTS grouptest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4492', () => {
    const query = `DROP TABLE model;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4493', () => {
    const query = `DROP TABLE grouptest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4494', () => {
    const query = `DROP TABLE IF EXISTS single_column_bloom_filter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4495', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_types_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4496', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_array_types_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4497', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_null_types_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4498', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_lc_null_types_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4499', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_array_lc_null_types_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4500', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_array_offsets_lc_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4501', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_array_offsets_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4502', () => {
    const query = `DROP TABLE IF EXISTS bloom_filter_array_offsets_i;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4503', () => {
    const query = `DROP TABLE IF EXISTS test_bf_indexOf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4504', () => {
    const query = `DROP TABLE IF EXISTS test_bf_cast;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4505', () => {
    const query = `DROP TABLE test_bf_cast;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4506', () => {
    const query = `DROP TABLE IF EXISTS min_max_with_nullable_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4507', () => {
    const query = `DROP TABLE min_max_with_nullable_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4508', () => {
    const query = `DROP TABLE IF EXISTS original_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4509', () => {
    const query = `DROP TABLE IF EXISTS new_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4510', () => {
    const query = `DROP TABLE IF EXISTS src_00942;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4511', () => {
    const query = `DROP TABLE IF EXISTS view_table_00942;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4512', () => {
    const query = `DROP TABLE IF EXISTS new_view_table_00942;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4513', () => {
    const query = `DROP TABLE src_00942;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4514', () => {
    const query = `drop table if exists max_parts_in_total;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4515', () => {
    const query = `DROP TABLE IF EXISTS nullt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4516', () => {
    const query = `drop table if exists limit_by;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4517', () => {
    const query = `drop table limit_by;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4518', () => {
    const query = `DROP TABLE IF EXISTS retention_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4519', () => {
    const query = `DROP TABLE IF EXISTS ipv6_range;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4520', () => {
    const query = `DROP TABLE ipv6_range;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4521', () => {
    const query = `DROP TABLE IF EXISTS ipv4_range;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4522', () => {
    const query = `DROP TABLE ipv4_range;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4523', () => {
    const query = `DROP TABLE IF EXISTS samples;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4524', () => {
    const query = `drop table if exists ttl_00933_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4525', () => {
    const query = `drop table if exists ttl_00933_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4526', () => {
    const query = `DROP TABLE IF EXISTS reserved_word_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4527', () => {
    const query = `DROP TABLE reserved_word_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4528', () => {
    const query = `drop table if exists geohash_test_data;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4529', () => {
    const query = `drop table if exists test_in;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4530', () => {
    const query = `DROP TABLE IF EXISTS lc_00931;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4531', () => {
    const query = `drop table if exists lc;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4532', () => {
    const query = `DROP TABLE IF EXISTS partitions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4533', () => {
    const query = `drop table if exists array_intersect;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4534', () => {
    const query = `DROP TABLE IF EXISTS md;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4535', () => {
    const query = `DROP TABLE IF EXISTS tv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4536', () => {
    const query = `DROP TABLE md;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4537', () => {
    const query = `DROP TABLE tv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4538', () => {
    const query = `DROP TABLE IF EXISTS tvs;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4539', () => {
    const query = `DROP TABLE tvs;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4540', () => {
    const query = `DROP TABLE B1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4541', () => {
    const query = `DROP TABLE B2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4542', () => {
    const query = `DROP TABLE B3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4543', () => {
    const query = `DROP TABLE IF EXISTS zero_rows_per_granule1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4544', () => {
    const query = `DROP TABLE IF EXISTS zero_rows_per_granule2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4545', () => {
    const query = `DROP TABLE IF EXISTS four_rows_per_granule1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4546', () => {
    const query = `DROP TABLE IF EXISTS four_rows_per_granule2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4547', () => {
    const query = `DROP TABLE IF EXISTS adaptive_granularity_alter1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4548', () => {
    const query = `DROP TABLE IF EXISTS adaptive_granularity_alter2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4549', () => {
    const query = `DROP TABLE IF EXISTS zero_rows_per_granule;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4550', () => {
    const query = `DROP TABLE IF EXISTS four_rows_per_granule;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4551', () => {
    const query = `DROP TABLE IF EXISTS six_rows_per_granule;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4552', () => {
    const query = `DROP TABLE IF EXISTS two_rows_per_granule;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4553', () => {
    const query = `DROP TABLE IF EXISTS huge_granularity_small_blocks;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4554', () => {
    const query = `DROP TABLE IF EXISTS adaptive_granularity_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4555', () => {
    const query = `DROP TABLE IF EXISTS large_alter_table_00926;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4556', () => {
    const query = `DROP TABLE IF EXISTS store_of_hash_00926;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4557', () => {
    const query = `DROP TABLE IF EXISTS ANIMAL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4558', () => {
    const query = `DROP TABLE ANIMAL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4559', () => {
    const query = `DROP TABLE IF EXISTS add_materialized_column_after;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4560', () => {
    const query = `DROP TABLE add_materialized_column_after;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4561', () => {
    const query = `drop table if exists simple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4562', () => {
    const query = `drop table simple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4563', () => {
    const query = `drop table if exists with_overflow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4564', () => {
    const query = `drop table with_overflow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4565', () => {
    const query = `DROP TABLE IF EXISTS alter_compression_codec1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4566', () => {
    const query = `DROP TABLE IF EXISTS alter_compression_codec2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4567', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_replicated1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4568', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_replicated2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4569', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_multiple_replicated1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4570', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_multiple_replicated2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4571', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_multiple_more_types_replicated;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4572', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_multiple_with_key_replicated;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4573', () => {
    const query = `DROP TABLE compression_codec_multiple_more_types_replicated;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4574', () => {
    const query = `DROP TABLE IF EXISTS sensor_value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4575', () => {
    const query = `DROP TABLE sensor_value;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4576', () => {
    const query = `DROP TABLE IF EXISTS union1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4577', () => {
    const query = `DROP TABLE IF EXISTS union2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4578', () => {
    const query = `DROP TABLE union2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4579', () => {
    const query = `DROP TABLE IF EXISTS buffer_table1__fuzz_28;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4580', () => {
    const query = `drop table if exists test_distance;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4581', () => {
    const query = `DROP TABLE arrays_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4582', () => {
    const query = `DROP TABLE IF EXISTS arr_tests_visits;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4583', () => {
    const query = `DROP TABLE arr_tests_visits;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4584', () => {
    const query = `drop table if exists null_lc_set_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4585', () => {
    const query = `drop table if exists nullable_set_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4586', () => {
    const query = `drop table if exists lc_00906;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4587', () => {
    const query = `DROP TABLE IF EXISTS foo_c;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4588', () => {
    const query = `DROP TABLE IF EXISTS index_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4589', () => {
    const query = `DROP TABLE index_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4590', () => {
    const query = `DROP TABLE IF EXISTS nt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4591', () => {
    const query = `DROP TABLE IF EXISTS ntxy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4592', () => {
    const query = `DROP TABLE nt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4593', () => {
    const query = `DROP TABLE ntxy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4594', () => {
    const query = `DROP TABLE IF EXISTS t64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4595', () => {
    const query = `DROP TABLE t64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4596', () => {
    const query = `drop table if exists test1_00863;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4597', () => {
    const query = `drop table if exists test2_00863;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4598', () => {
    const query = `drop table if exists test3_00863;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4599', () => {
    const query = `drop table test1_00863;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4600', () => {
    const query = `drop table test2_00863;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4601', () => {
    const query = `drop table test3_00863;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4602', () => {
    const query = `DROP TABLE IF EXISTS temp;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4603', () => {
    const query = `DROP TABLE IF EXISTS test_00861;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4604', () => {
    const query = `DROP TABLE test_00861;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4605', () => {
    const query = `DROP TABLE IF EXISTS appointment_events;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4606', () => {
    const query = `DROP TABLE appointment_events;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4607', () => {
    const query = `drop table if exists fooL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4608', () => {
    const query = `drop table if exists fooR;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4609', () => {
    const query = `drop table fooL;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4610', () => {
    const query = `drop table fooR;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4611', () => {
    const query = `drop table if exists shard1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4612', () => {
    const query = `drop table if exists shard2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4613', () => {
    const query = `drop table shard1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4614', () => {
    const query = `drop table shard2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4615', () => {
    const query = `drop table distr1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4616', () => {
    const query = `drop table distr2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4617', () => {
    const query = `DROP TABLE IF EXISTS other_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4618', () => {
    const query = `DROP TABLE other_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4619', () => {
    const query = `DROP TABLE IF EXISTS t1_00856;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4620', () => {
    const query = `DROP TABLE IF EXISTS t2_00856;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4621', () => {
    const query = `DROP TABLE t1_00856;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4622', () => {
    const query = `DROP TABLE t2_00856;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4623', () => {
    const query = `DROP TABLE IF EXISTS table_a;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4624', () => {
    const query = `DROP TABLE IF EXISTS table_b;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4625', () => {
    const query = `DROP TABLE IF EXISTS t1_00850;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4626', () => {
    const query = `DROP TABLE IF EXISTS t2_00850;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4627', () => {
    const query = `DROP TABLE t1_00850;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4628', () => {
    const query = `DROP TABLE t2_00850;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4629', () => {
    const query = `DROP TABLE IF EXISTS t1_00848;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4630', () => {
    const query = `DROP TABLE IF EXISTS t2_00848;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4631', () => {
    const query = `DROP TABLE IF EXISTS t3_00848;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4632', () => {
    const query = `DROP TABLE t1_00848;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4633', () => {
    const query = `DROP TABLE t2_00848;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4634', () => {
    const query = `DROP TABLE t3_00848;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4635', () => {
    const query = `DROP TABLE IF EXISTS t1_00844;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4636', () => {
    const query = `DROP TABLE IF EXISTS t2_00844;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4637', () => {
    const query = `DROP TABLE t1_00844;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4638', () => {
    const query = `DROP TABLE t2_00844;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4639', () => {
    const query = `DROP TABLE IF EXISTS test1_00843;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4640', () => {
    const query = `DROP TABLE IF EXISTS test2_00843;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4641', () => {
    const query = `DROP TABLE IF EXISTS view_00843;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4642', () => {
    const query = `DROP TABLE test1_00843;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4643', () => {
    const query = `DROP TABLE view_00843;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4644', () => {
    const query = `DROP TABLE IF EXISTS minmax_idx1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4645', () => {
    const query = `DROP TABLE IF EXISTS minmax_idx2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4646', () => {
    const query = `DROP TABLE minmax_idx1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4647', () => {
    const query = `DROP TABLE minmax_idx2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4648', () => {
    const query = `DROP TABLE IF EXISTS minmax_idx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4649', () => {
    const query = `DROP TABLE IF EXISTS minmax_idx_r;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4650', () => {
    const query = `DROP TABLE IF EXISTS minmax_idx2_r;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4651', () => {
    const query = `DROP TABLE minmax_idx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4652', () => {
    const query = `DROP TABLE minmax_idx_r;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4653', () => {
    const query = `DROP TABLE minmax_idx2_r;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4654', () => {
    const query = `DROP TABLE kv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4655', () => {
    const query = `DROP TABLE kv_overwrite;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4656', () => {
    const query = `DROP TABLE IF EXISTS bitmap_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4657', () => {
    const query = `DROP TABLE IF EXISTS bitmap_state_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4658', () => {
    const query = `DROP TABLE IF EXISTS bitmap_column_expr_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4659', () => {
    const query = `DROP TABLE IF EXISTS bitmap_column_expr_test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4660', () => {
    const query = `DROP TABLE IF EXISTS bitmap_column_expr_test3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4661', () => {
    const query = `DROP TABLE IF EXISTS numbers10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4662', () => {
    const query = `drop table bitmap_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4663', () => {
    const query = `DROP TABLE bitmap_state_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4664', () => {
    const query = `DROP TABLE IF EXISTS t1_00826;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4665', () => {
    const query = `DROP TABLE IF EXISTS t2_00826;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4666', () => {
    const query = `DROP TABLE t1_00826;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4667', () => {
    const query = `DROP TABLE t2_00826;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4668', () => {
    const query = `DROP TABLE IF EXISTS sequence;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4669', () => {
    const query = `DROP TABLE sequence;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4670', () => {
    const query = `DROP TABLE IF EXISTS table5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4671', () => {
    const query = `DROP TABLE table5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4672', () => {
    const query = `DROP TABLE IF EXISTS table_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4673', () => {
    const query = `DROP TABLE table_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4674', () => {
    const query = `DROP TABLE IF EXISTS visits1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4675', () => {
    const query = `DROP TABLE visits1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4676', () => {
    const query = `drop table if exists t_00818;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4677', () => {
    const query = `drop table if exists s_00818;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4678', () => {
    const query = `drop table t_00818;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4679', () => {
    const query = `drop table s_00818;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4680', () => {
    const query = `DROP TABLE IF EXISTS test_00818;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4681', () => {
    const query = `DROP TABLE test_00818;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4682', () => {
    const query = `drop table if exists t1_00816;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4683', () => {
    const query = `drop table if exists t2_00816;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4684', () => {
    const query = `DROP TABLE t1_00816;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4685', () => {
    const query = `DROP TABLE t2_00816;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4686', () => {
    const query = `DROP TABLE IF EXISTS fact_cpc_clicks;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4687', () => {
    const query = `DROP TABLE IF EXISTS dim_model;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4688', () => {
    const query = `DROP TABLE IF EXISTS test_00808_push_down_with_finalizeAggregation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4689', () => {
    const query = `DROP TABLE alter_update_00806;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4690', () => {
    const query = `DROP TABLE IF EXISTS compression_codec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4691', () => {
    const query = `DROP TABLE IF EXISTS delta_codec_for_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4692', () => {
    const query = `DROP TABLE IF EXISTS delta_codec_synthetic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4693', () => {
    const query = `DROP TABLE IF EXISTS default_codec_synthetic;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4694', () => {
    const query = `DROP TABLE IF EXISTS delta_codec_float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4695', () => {
    const query = `DROP TABLE IF EXISTS default_codec_float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4696', () => {
    const query = `DROP TABLE IF EXISTS delta_codec_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4697', () => {
    const query = `DROP TABLE IF EXISTS default_codec_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4698', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4699', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_multiple_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4700', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4701', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_multiple_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4702', () => {
    const query = `DROP TABLE compression_codec_multiple_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4703', () => {
    const query = `DROP TABLE compression_codec_multiple_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4704', () => {
    const query = `DROP TABLE IF EXISTS bad_codec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4705', () => {
    const query = `DROP TABLE IF EXISTS params_when_no_params;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4706', () => {
    const query = `DROP TABLE IF EXISTS too_many_params;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4707', () => {
    const query = `DROP TABLE IF EXISTS codec_multiple_direct_specification_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4708', () => {
    const query = `DROP TABLE IF EXISTS codec_multiple_direct_specification_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4709', () => {
    const query = `DROP TABLE IF EXISTS delta_bad_params1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4710', () => {
    const query = `DROP TABLE IF EXISTS delta_bad_params2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4711', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_multiple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4712', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_multiple_more_types;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4713', () => {
    const query = `DROP TABLE IF EXISTS compression_codec_multiple_with_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4714', () => {
    const query = `DROP TABLE IF EXISTS test_default_delta;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4715', () => {
    const query = `DROP TABLE compression_codec_multiple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4716', () => {
    const query = `DROP TABLE compression_codec_multiple_more_types;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4717', () => {
    const query = `DROP TABLE IF EXISTS alter_compression_codec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4718', () => {
    const query = `DROP TABLE IF EXISTS alter_bad_codec;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4719', () => {
    const query = `DROP TABLE IF EXISTS large_alter_table_00804;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4720', () => {
    const query = `DROP TABLE IF EXISTS store_of_hash_00804;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4721', () => {
    const query = `DROP TABLE rollup_having;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4722', () => {
    const query = `DROP TABLE IF EXISTS datetime_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4723', () => {
    const query = `DROP TABLE IF EXISTS join_any_inner;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4724', () => {
    const query = `DROP TABLE IF EXISTS join_any_left;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4725', () => {
    const query = `DROP TABLE IF EXISTS join_any_left_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4726', () => {
    const query = `DROP TABLE IF EXISTS join_all_inner;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4727', () => {
    const query = `DROP TABLE IF EXISTS join_all_left;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4728', () => {
    const query = `DROP TABLE IF EXISTS join_string_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4729', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.join_any_inner;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4730', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.join_any_left;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4731', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.join_any_left_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4732', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.join_all_inner;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4733', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.join_all_left;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4734', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.join_string_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4735', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.join_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4736', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.join_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4737', () => {
    const query = `drop table if exists lc_00800_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4738', () => {
    const query = `DROP TABLE IF EXISTS low_cardinality;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4739', () => {
    const query = `DROP TABLE IF EXISTS low_cardinality_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4740', () => {
    const query = `drop table if exists lc_00800_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4741', () => {
    const query = `drop table if exists lc_00800_2 ;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4742', () => {
    const query = `DROP TABLE IF EXISTS bm;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4743', () => {
    const query = `DROP TABLE bm;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4744', () => {
    const query = `DROP TABLE IF EXISTS table_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4745', () => {
    const query = `drop table if exists td;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4746', () => {
    const query = `DROP TABLE IF EXISTS auto_assign_enum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4747', () => {
    const query = `DROP TABLE IF EXISTS auto_assign_enum1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4748', () => {
    const query = `DROP TABLE IF EXISTS auto_assign_enum2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4749', () => {
    const query = `DROP TABLE IF EXISTS auto_assign_enum3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4750', () => {
    const query = `DROP TABLE auto_assign_enum1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4751', () => {
    const query = `DROP TABLE auto_assign_enum2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4752', () => {
    const query = `DROP TABLE IF EXISTS size_hint;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4753', () => {
    const query = `DROP TABLE size_hint;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4754', () => {
    const query = `DROP TABLE IF EXISTS old_style;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4755', () => {
    const query = `DROP TABLE IF EXISTS summing_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4756', () => {
    const query = `DROP TABLE IF EXISTS summing_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4757', () => {
    const query = `DROP TABLE summing_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4758', () => {
    const query = `DROP TABLE summing_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4759', () => {
    const query = `DROP TABLE IF EXISTS no_order;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4760', () => {
    const query = `DROP TABLE IF EXISTS alter_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4761', () => {
    const query = `DROP TABLE alter_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4762', () => {
    const query = `DROP TABLE check_system_tables;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4763', () => {
    const query = `DROP TABLE IF EXISTS check_system_tables_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4764', () => {
    const query = `DROP TABLE check_system_tables_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4765', () => {
    const query = `DROP TABLE check_system_tables_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4766', () => {
    const query = `DROP TABLE IF EXISTS datetime;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4767', () => {
    const query = `DROP TABLE datetime;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4768', () => {
    const query = `DROP TABLE IF EXISTS check_comments;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4769', () => {
    const query = `DROP TABLE check_comments;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4770', () => {
    const query = `DROP TABLE IF EXISTS dst_00753;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4771', () => {
    const query = `DROP TABLE IF EXISTS buffer_00753;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4772', () => {
    const query = `DROP TABLE IF EXISTS detach_all_no_partition;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4773', () => {
    const query = `DROP TABLE alter_attach;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4774', () => {
    const query = `DROP TABLE detach_all_no_partition;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4775', () => {
    const query = `DROP TABLE IF EXISTS replicated_table_detach_all1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4776', () => {
    const query = `DROP TABLE IF EXISTS replicated_table_detach_all2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4777', () => {
    const query = `DROP TABLE replicated_table_detach_all2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4778', () => {
    const query = `DROP TABLE IF EXISTS partition_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4779', () => {
    const query = `DROP TABLE IF EXISTS partition_all2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4780', () => {
    const query = `DROP TABLE partition_all2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4781', () => {
    const query = `DROP TABLE partition_attach_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4782', () => {
    const query = `DROP TABLE replicated_partition_attach_all;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4783', () => {
    const query = `drop table if exists lc_perm;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4784', () => {
    const query = `drop table if exists radacct;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4785', () => {
    const query = `drop table if exists mv_traffic_by_tadig15min;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4786', () => {
    const query = `drop table if exists lc_00752;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4787', () => {
    const query = `drop table if exists lc_mv_00752;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4788', () => {
    const query = `drop table if exists lc_left_aj;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4789', () => {
    const query = `drop table if exists lc_lambda;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4790', () => {
    const query = `drop table if exists test_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4791', () => {
    const query = `drop table if exists low_null_float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4792', () => {
    const query = `DROP TABLE IF EXISTS t_00751;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4793', () => {
    const query = `DROP TABLE IF EXISTS t_mv_00751;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4794', () => {
    const query = `DROP TABLE IF EXISTS u_00751;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4795', () => {
    const query = `DROP TABLE IF EXISTS v_00751;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4796', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.t_00751;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4797', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.t_mv_00751;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4798', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.u_00751;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4799', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.v_00751;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4800', () => {
    const query = `DROP TABLE IF EXISTS sample_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4801', () => {
    const query = `DROP TABLE IF EXISTS arraytest;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4802', () => {
    const query = `DROP TABLE IF EXISTS time_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4803', () => {
    const query = `DROP TABLE IF EXISTS testx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4804', () => {
    const query = `DROP TABLE dt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4805', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS test_00744;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4806', () => {
    const query = `DROP TABLE IF EXISTS installation_stats;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4807', () => {
    const query = `DROP TABLE installation_stats;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4808', () => {
    const query = `DROP TABLE IF EXISTS perf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4809', () => {
    const query = `DROP TABLE perf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4810', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier};`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4811', () => {
    const query = `DROP TABLE IF EXISTS test_view_00740;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4812', () => {
    const query = `DROP TABLE IF EXISTS test_nested_view_00740;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4813', () => {
    const query = `DROP TABLE IF EXISTS test_joined_view_00740;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4814', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.test_00740;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4815', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.test_view_00740;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4816', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.test_nested_view_00740;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4817', () => {
    const query = `drop temporary table if exists wups;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4818', () => {
    const query = `drop temporary table wups;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4819', () => {
    const query = `DROP TABLE IF EXISTS sites;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4820', () => {
    const query = `DROP TABLE sites;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4821', () => {
    const query = `DROP TABLE IF EXISTS bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4822', () => {
    const query = `DROP TABLE bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4823', () => {
    const query = `DROP TABLE IF EXISTS or_expr_bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4824', () => {
    const query = `DROP TABLE or_expr_bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4825', () => {
    const query = `DROP TABLE IF EXISTS decimal_sum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4826', () => {
    const query = `drop table decimal_sum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4827', () => {
    const query = `DROP TABLE IF EXISTS unicode;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4828', () => {
    const query = `drop table if exists t1_00729;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4829', () => {
    const query = `DROP TABLE IF EXISTS concat_saf_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4830', () => {
    const query = `DROP TABLE concat_saf_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4831', () => {
    const query = `DROP TABLE IF EXISTS concat_nested_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4832', () => {
    const query = `DROP TABLE concat_nested_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4833', () => {
    const query = `DROP TABLE IF EXISTS src_00726;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4834', () => {
    const query = `DROP TABLE IF EXISTS mv1_00726;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4835', () => {
    const query = `DROP TABLE IF EXISTS mv2_00726;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4836', () => {
    const query = `DROP TABLE mv1_00726;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4837', () => {
    const query = `DROP TABLE mv2_00726;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4838', () => {
    const query = `DROP TABLE src_00726;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4839', () => {
    const query = `drop table if exists t_00725_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4840', () => {
    const query = `drop table if exists s_00725_4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4841', () => {
    const query = `drop table if exists t_00725_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4842', () => {
    const query = `drop table if exists z_00725_3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4843', () => {
    const query = `drop table if exists t_00725_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4844', () => {
    const query = `drop table if exists s_00725_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4845', () => {
    const query = `DROP TABLE IF EXISTS a2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4846', () => {
    const query = `DROP TABLE IF EXISTS check_query_comment_column;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4847', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS test_00724;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4848', () => {
    const query = `DROP TABLE IF EXISTS one;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4849', () => {
    const query = `DROP TABLE one;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4850', () => {
    const query = `DROP TABLE IF EXISTS byte_identical_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4851', () => {
    const query = `DROP TABLE IF EXISTS byte_identical_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4852', () => {
    const query = `DROP TABLE byte_identical_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4853', () => {
    const query = `DROP TABLE byte_identical_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4854', () => {
    const query = `DROP TABLE IF EXISTS cube;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4855', () => {
    const query = `DROP TABLE cube;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4856', () => {
    const query = `drop table if exists tab_00718;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4857', () => {
    const query = `DROP TABLE IF EXISTS test_local_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4858', () => {
    const query = `DROP TABLE IF EXISTS test_local_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4859', () => {
    const query = `DROP TABLE IF EXISTS test_distributed_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4860', () => {
    const query = `DROP TABLE IF EXISTS test_distributed_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4861', () => {
    const query = `DROP TABLE IF EXISTS test_u64_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4862', () => {
    const query = `DROP TABLE IF EXISTS test_s64_local;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4863', () => {
    const query = `DROP TABLE IF EXISTS test_u64_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4864', () => {
    const query = `DROP TABLE IF EXISTS test_s64_distributed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4865', () => {
    const query = `drop table if exists tab_00717;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4866', () => {
    const query = `DROP TABLE IF EXISTS test_low_null_float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4867', () => {
    const query = `DROP TABLE IF EXISTS dist_00717;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4868', () => {
    const query = `DROP TABLE IF EXISTS default_join1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4869', () => {
    const query = `DROP TABLE IF EXISTS default_join2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4870', () => {
    const query = `DROP TABLE default_join1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4871', () => {
    const query = `DROP TABLE default_join2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4872', () => {
    const query = `drop table if exists rate_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4873', () => {
    const query = `drop table if exists rate_test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4874', () => {
    const query = `drop table rate_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4875', () => {
    const query = `drop table rate_test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4876', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS temporary_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4877', () => {
    const query = `DROP TABLE IF EXISTS test_merge_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4878', () => {
    const query = `DROP TABLE IF EXISTS test_merge_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4879', () => {
    const query = `DROP TABLE IF EXISTS uuid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4880', () => {
    const query = `DROP TABLE uuid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4881', () => {
    const query = `DROP TABLE IF EXISTS collapsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4882', () => {
    const query = `DROP TABLE collapsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4883', () => {
    const query = `drop table if exists t_00712_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4884', () => {
    const query = `drop table if exists tab_00712_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4885', () => {
    const query = `DROP TABLE IF EXISTS sample_prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4886', () => {
    const query = `drop table if exists t_00712_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4887', () => {
    const query = `drop table t_00712_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4888', () => {
    const query = `DROP TABLE IF EXISTS mergetree_00712;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4889', () => {
    const query = `DROP TABLE mergetree_00712;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4890', () => {
    const query = `drop table if exists trepl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4891', () => {
    const query = `drop table trepl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4892', () => {
    const query = `drop table if exists versioned_collapsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4893', () => {
    const query = `drop table versioned_collapsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4894', () => {
    const query = `drop table if exists prewhere_alias;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4895', () => {
    const query = `drop table prewhere_alias;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4896', () => {
    const query = `drop table if exists tab_00712_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4897', () => {
    const query = `drop table tab_00712_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4898', () => {
    const query = `DROP TABLE IF EXISTS partition_id;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4899', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS test_00707;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4900', () => {
    const query = `DROP TABLE IF EXISTS add_aggregate;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4901', () => {
    const query = `drop table IF EXISTS tab1_copy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4902', () => {
    const query = `drop table tab1_copy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4903', () => {
    const query = `DROP TABLE IF EXISTS where_qualified;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4904', () => {
    const query = `DROP TABLE where_qualified;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4905', () => {
    const query = `DROP TABLE IF EXISTS using1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4906', () => {
    const query = `DROP TABLE IF EXISTS using2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4907', () => {
    const query = `DROP TABLE using1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4908', () => {
    const query = `DROP TABLE using2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4909', () => {
    const query = `drop table if exists persons;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4910', () => {
    const query = `drop table if exists children;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4911', () => {
    const query = `drop table persons;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4912', () => {
    const query = `drop table children;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4913', () => {
    const query = `DROP TABLE IF EXISTS rollup;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4914', () => {
    const query = `DROP TABLE rollup;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4915', () => {
    const query = `DROP TABLE IF EXISTS Issue_2231_Invalid_Nested_Columns_Size;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4916', () => {
    const query = `DROP TABLE Issue_2231_Invalid_Nested_Columns_Size;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4917', () => {
    const query = `DROP TABLE IF EXISTS mergetree_00698;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4918', () => {
    const query = `DROP TABLE mergetree_00698;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4919', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS t_00693;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4920', () => {
    const query = `drop table if exists lc_str_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4921', () => {
    const query = `drop table if exists lc_str_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4922', () => {
    const query = `drop table if exists lc_null_str_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4923', () => {
    const query = `drop table if exists lc_null_str_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4924', () => {
    const query = `drop table if exists lc_int8_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4925', () => {
    const query = `drop table if exists lc_int8_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4926', () => {
    const query = `drop table if exists lc_null_int8_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4927', () => {
    const query = `drop table if exists lc_null_int8_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4928', () => {
    const query = `drop table if exists lc_fix_str_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4929', () => {
    const query = `drop table if exists lc_fix_str_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4930', () => {
    const query = `drop table if exists lc_null_fix_str_0;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4931', () => {
    const query = `drop table if exists lc_null_fix_str_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4932', () => {
    const query = `drop table if exists lc_str_uuid;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4933', () => {
    const query = `drop table if exists lc_small_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4934', () => {
    const query = `drop table if exists lc_big_dict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4935', () => {
    const query = `drop table if exists lc_prewhere;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4936', () => {
    const query = `drop table if exists lc_null_int8_defnull;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4937', () => {
    const query = `drop table if exists lc_00688;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4938', () => {
    const query = `drop table if exists ary_lc_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4939', () => {
    const query = `drop table if exists lc_dict_reading;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4940', () => {
    const query = `drop table if exists cardinality;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4941', () => {
    const query = `DROP TABLE IF EXISTS test_00688;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4942', () => {
    const query = `DROP TABLE test_00688;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4943', () => {
    const query = `DROP TABLE retention_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4944', () => {
    const query = `DROP TABLE IF EXISTS test_00687;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4945', () => {
    const query = `DROP TABLE IF EXISTS mv_bad;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4946', () => {
    const query = `DROP TABLE IF EXISTS mv_good;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4947', () => {
    const query = `DROP TABLE IF EXISTS mv_group;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4948', () => {
    const query = `DROP TABLE mv_bad;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4949', () => {
    const query = `DROP TABLE mv_good;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4950', () => {
    const query = `DROP TABLE mv_group;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4951', () => {
    const query = `DROP TABLE test_00687;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4952', () => {
    const query = `DROP TABLE IF EXISTS test_00681;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4953', () => {
    const query = `DROP TABLE test_00681;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4954', () => {
    const query = `DROP TABLE IF EXISTS mergetree_00673;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4955', () => {
    const query = `DROP TABLE mergetree_00673;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4956', () => {
    const query = `DROP TABLE IF EXISTS arrayDistinct_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4957', () => {
    const query = `DROP TABLE arrayDistinct_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4958', () => {
    const query = `DROP TABLE IF EXISTS test1_00671;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4959', () => {
    const query = `DROP TABLE IF EXISTS test2_00671;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4960', () => {
    const query = `DROP TABLE test1_00671;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4961', () => {
    const query = `DROP TABLE test2_00671;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4962', () => {
    const query = `drop temporary table if exists test_00670;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4963', () => {
    const query = `drop temporary table test_00670;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4964', () => {
    const query = `DROP TABLE IF EXISTS array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4965', () => {
    const query = `DROP TABLE array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4966', () => {
    const query = `DROP TABLE IF EXISTS alter_00665;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4967', () => {
    const query = `DROP TABLE alter_00665;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4968', () => {
    const query = `DROP TABLE IF EXISTS 00662_has_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4969', () => {
    const query = `DROP TABLE 00662_has_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4970', () => {
    const query = `DROP TABLE IF EXISTS partitioned_by_tuple_replica1_00661 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4971', () => {
    const query = `DROP TABLE IF EXISTS partitioned_by_tuple_replica2_00661 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4972', () => {
    const query = `DROP TABLE partitioned_by_tuple_replica1_00661 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4973', () => {
    const query = `DROP TABLE partitioned_by_tuple_replica2_00661 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4974', () => {
    const query = `DROP TABLE IF EXISTS has_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4975', () => {
    const query = `DROP TABLE has_function;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4976', () => {
    const query = `DROP TABLE IF EXISTS partitioned_by_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4977', () => {
    const query = `DROP TABLE partitioned_by_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4978', () => {
    const query = `drop table if exists \`table_00653\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4979', () => {
    const query = `drop table table_00653;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4980', () => {
    const query = `drop table if exists tab_00650;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4981', () => {
    const query = `drop table tab_00650;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4982', () => {
    const query = `DROP TABLE IF EXISTS final_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4983', () => {
    const query = `DROP TABLE final_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4984', () => {
    const query = `DROP TABLE IF EXISTS mult_aggregation;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4985', () => {
    const query = `drop table if exists histogram;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4986', () => {
    const query = `DROP TABLE IF EXISTS weird_mmx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4987', () => {
    const query = `DROP TABLE weird_mmx;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4988', () => {
    const query = `DROP TABLE IF EXISTS cast1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4989', () => {
    const query = `DROP TABLE IF EXISTS cast2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4990', () => {
    const query = `DROP TABLE cast1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4991', () => {
    const query = `DROP TABLE cast2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4992', () => {
    const query = `DROP TABLE IF EXISTS cast;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4993', () => {
    const query = `DROP TABLE cast;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4994', () => {
    const query = `DROP TABLE IF EXISTS endsWith_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4995', () => {
    const query = `DROP TABLE IF EXISTS startsWith_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4996', () => {
    const query = `DROP TABLE startsWith_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4997', () => {
    const query = `DROP TABLE IF EXISTS test1_00634;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4998', () => {
    const query = `DROP TABLE IF EXISTS test2_00634;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 4999', () => {
    const query = `DROP TABLE IF EXISTS v_test1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5000', () => {
    const query = `DROP TABLE IF EXISTS v_test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5001', () => {
    const query = `DROP TABLE IF EXISTS v_test11;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5002', () => {
    const query = `DROP TABLE IF EXISTS v_test22;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5003', () => {
    const query = `DROP TABLE test1_00634;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5004', () => {
    const query = `DROP TABLE test2_00634;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5005', () => {
    const query = `DROP TABLE v_test11;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5006', () => {
    const query = `DROP TABLE v_test22;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5007', () => {
    const query = `drop table if exists orin_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5008', () => {
    const query = `drop table orin_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5009', () => {
    const query = `DROP TABLE IF EXISTS dict_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5010', () => {
    const query = `DROP TABLE IF EXISTS dict_ui64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5011', () => {
    const query = `DROP TABLE IF EXISTS video_views;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5012', () => {
    const query = `DROP TABLE dict_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5013', () => {
    const query = `DROP TABLE dict_ui64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5014', () => {
    const query = `DROP TABLE video_views;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5015', () => {
    const query = `DROP TABLE IF EXISTS sample_00632;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5016', () => {
    const query = `DROP TABLE sample_00632;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5017', () => {
    const query = `drop table if exists funnel_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5018', () => {
    const query = `drop table if exists funnel_test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5019', () => {
    const query = `drop table if exists funnel_test_u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5020', () => {
    const query = `drop table if exists funnel_test_strict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5021', () => {
    const query = `drop table funnel_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5022', () => {
    const query = `drop table funnel_test2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5023', () => {
    const query = `drop table funnel_test_u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5024', () => {
    const query = `drop table funnel_test_strict;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5025', () => {
    const query = `drop table if exists funnel_test_strict_order;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5026', () => {
    const query = `drop table funnel_test_strict_order;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5027', () => {
    const query = `drop table if exists strict_BiteTheDDDD;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5028', () => {
    const query = `drop table strict_BiteTheDDDD;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5029', () => {
    const query = `drop table if exists funnel_test_non_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5030', () => {
    const query = `drop table funnel_test_non_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5031', () => {
    const query = `drop table funnel_test_strict_increase;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5032', () => {
    const query = `drop table if exists test_in_tuple_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5033', () => {
    const query = `drop table if exists test_in_tuple_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5034', () => {
    const query = `drop table if exists test_in_tuple;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5035', () => {
    const query = `DROP TEMPORARY TABLE test_block_numbers;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5036', () => {
    const query = `DROP TABLE IF EXISTS tab_00625;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5037', () => {
    const query = `DROP TABLE tab_00625;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5038', () => {
    const query = `DROP TABLE IF EXISTS truncate_test_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5039', () => {
    const query = `DROP TABLE IF EXISTS truncate_test_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5040', () => {
    const query = `DROP TABLE IF EXISTS truncate_test_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5041', () => {
    const query = `DROP TABLE IF EXISTS truncate_test_stripe_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5042', () => {
    const query = `DROP TABLE IF EXISTS truncate_test_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5043', () => {
    const query = `DROP TABLE IF EXISTS truncate_test_materialized_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5044', () => {
    const query = `DROP TABLE IF EXISTS truncate_test_materialized_depend;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5045', () => {
    const query = `DROP TABLE IF EXISTS truncate_test_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5046', () => {
    const query = `DROP TABLE IF EXISTS replicated_truncate1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5047', () => {
    const query = `DROP TABLE IF EXISTS replicated_truncate2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5048', () => {
    const query = `DROP TABLE IF EXISTS regression_for_in_operator_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5049', () => {
    const query = `DROP TABLE IF EXISTS regression_for_in_operator;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5050', () => {
    const query = `DROP TABLE regression_for_in_operator_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5051', () => {
    const query = `DROP TABLE regression_for_in_operator;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5052', () => {
    const query = `DROP TABLE IF EXISTS rename1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5053', () => {
    const query = `DROP TABLE IF EXISTS rename2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5054', () => {
    const query = `DROP TABLE IF EXISTS rename3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5055', () => {
    const query = `DROP TABLE IF EXISTS union;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5056', () => {
    const query = `DROP TABLE union;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5057', () => {
    const query = `DROP TABLE IF EXISTS test_array_ops;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5058', () => {
    const query = `DROP TABLE test_array_ops;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5059', () => {
    const query = `DROP TABLE IF EXISTS test_00616;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5060', () => {
    const query = `DROP TABLE IF EXISTS replacing_00616;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5061', () => {
    const query = `DROP TABLE test_00616;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5062', () => {
    const query = `DROP TABLE replacing_00616;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5063', () => {
    const query = `DROP TABLE IF EXISTS test_00615;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5064', () => {
    const query = `DROP TABLE test_00615;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5065', () => {
    const query = `DROP TABLE IF EXISTS count;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5066', () => {
    const query = `DROP TABLE count;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5067', () => {
    const query = `drop table if exists tab_00612;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5068', () => {
    const query = `drop table tab_00612;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5069', () => {
    const query = `DROP TABLE IF EXISTS data_00612;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5070', () => {
    const query = `DROP TABLE IF EXISTS dist_00612;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5071', () => {
    const query = `DROP TABLE dist_00612;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5072', () => {
    const query = `DROP TABLE data_00612;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5073', () => {
    const query = `DROP TABLE IF EXISTS tab_00610;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5074', () => {
    const query = `DROP TABLE IF EXISTS mv_00610;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5075', () => {
    const query = `DROP TABLE tab_00610;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5076', () => {
    const query = `DROP TABLE mv_00610;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5077', () => {
    const query = `drop table if exists \`table_00609\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5078', () => {
    const query = `DROP TABLE IF EXISTS test_00609;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5079', () => {
    const query = `DROP TABLE IF EXISTS test_mv_00609;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5080', () => {
    const query = `DROP TABLE test_mv_00609;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5081', () => {
    const query = `DROP TABLE IF EXISTS mergetree_00609;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5082', () => {
    const query = `DROP TABLE IF EXISTS distributed_00609;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5083', () => {
    const query = `DROP TABLE mergetree_00609;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5084', () => {
    const query = `DROP TABLE distributed_00609;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5085', () => {
    const query = `DROP TABLE IF EXISTS test_00599;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5086', () => {
    const query = `DROP TABLE IF EXISTS test_view_00599;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5087', () => {
    const query = `DROP TABLE IF EXISTS test_00597;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5088', () => {
    const query = `DROP TABLE IF EXISTS test_view_00597;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5089', () => {
    const query = `DROP TABLE IF EXISTS alias_local10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5090', () => {
    const query = `DROP TABLE IF EXISTS alias10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5091', () => {
    const query = `DROP TABLE alias10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5092', () => {
    const query = `DROP TABLE IF EXISTS columns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5093', () => {
    const query = `DROP TABLE columns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5094', () => {
    const query = `DROP TABLE IF EXISTS mergetree_00588;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5095', () => {
    const query = `DROP TABLE IF EXISTS distributed_00588;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5096', () => {
    const query = `DROP TABLE mergetree_00588;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5097', () => {
    const query = `DROP TABLE distributed_00588;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5098', () => {
    const query = `DROP TABLE IF EXISTS local_statements;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5099', () => {
    const query = `DROP TABLE IF EXISTS statements;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5100', () => {
    const query = `DROP TABLE local_statements;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5101', () => {
    const query = `DROP TABLE statements;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5102', () => {
    const query = `DROP TABLE IF EXISTS clicks;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5103', () => {
    const query = `DROP TABLE IF EXISTS transactions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5104', () => {
    const query = `DROP TABLE clicks;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5105', () => {
    const query = `DROP TABLE transactions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5106', () => {
    const query = `DROP TABLE IF EXISTS Test_00584;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5107', () => {
    const query = `DROP TABLE TestView;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5108', () => {
    const query = `DROP TABLE Test_00584;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5109', () => {
    const query = `DROP TABLE IF EXISTS sample_00579_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5110', () => {
    const query = `DROP TABLE IF EXISTS sample_00579_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5111', () => {
    const query = `DROP TABLE IF EXISTS sample_merge_00579;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5112', () => {
    const query = `DROP TABLE sample_00579_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5113', () => {
    const query = `DROP TABLE sample_00579_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5114', () => {
    const query = `DROP TABLE sample_merge_00579;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5115', () => {
    const query = `DROP TABLE IF EXISTS partition_and_primary_keys_using_same_expression;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5116', () => {
    const query = `DROP TABLE partition_and_primary_keys_using_same_expression;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5117', () => {
    const query = `DROP TABLE IF EXISTS unsorted;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5118', () => {
    const query = `DROP TABLE unsorted;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5119', () => {
    const query = `DROP TABLE IF EXISTS unsorted_replacing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5120', () => {
    const query = `DROP TABLE unsorted_replacing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5121', () => {
    const query = `DROP TABLE IF EXISTS unsorted_collapsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5122', () => {
    const query = `DROP TABLE unsorted_collapsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5123', () => {
    const query = `DROP TABLE IF EXISTS numbers1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5124', () => {
    const query = `DROP TABLE IF EXISTS numbers2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5125', () => {
    const query = `DROP TABLE IF EXISTS numbers3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5126', () => {
    const query = `DROP TABLE IF EXISTS numbers4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5127', () => {
    const query = `DROP TABLE IF EXISTS numbers5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5128', () => {
    const query = `DROP TABLE numbers4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5129', () => {
    const query = `DROP TABLE numbers5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5130', () => {
    const query = `drop table if exists tab_00577;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5131', () => {
    const query = `drop table tab_00577;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5132', () => {
    const query = `DROP TABLE IF EXISTS t_00575;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5133', () => {
    const query = `DROP TABLE t_00575;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5134', () => {
    const query = `DROP TABLE IF EXISTS test_materialized_00571;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5135', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.test_00571;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5136', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.test_materialized_00571;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5137', () => {
    const query = `DROP TABLE IF EXISTS nullable_00571;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5138', () => {
    const query = `DROP TABLE nullable_00571;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5139', () => {
    const query = `DROP TABLE IF EXISTS defaulted;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5140', () => {
    const query = `DROP TABLE defaulted;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5141', () => {
    const query = `drop table if exists mult_tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5142', () => {
    const query = `DROP TABLE mult_tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5143', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS temp_tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5144', () => {
    const query = `DROP TEMPORARY TABLE temp_tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5145', () => {
    const query = `DROP TABLE IF EXISTS test_00563;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5146', () => {
    const query = `DROP TABLE IF EXISTS join_with_index;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5147', () => {
    const query = `DROP TABLE IF EXISTS test_00562;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5148', () => {
    const query = `drop table IF EXISTS joinbug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5149', () => {
    const query = `drop table IF EXISTS joinbug_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5150', () => {
    const query = `DROP TABLE joinbug_join;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5151', () => {
    const query = `DROP TABLE IF EXISTS null_00557;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5152', () => {
    const query = `DROP TABLE null_00557;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5153', () => {
    const query = `DROP TABLE IF EXISTS nums_buf;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5154', () => {
    const query = `DROP TABLE IF EXISTS null_00549;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5155', () => {
    const query = `DROP TABLE null_00549;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5156', () => {
    const query = `DROP TABLE IF EXISTS m1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5157', () => {
    const query = `DROP TABLE m1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5158', () => {
    const query = `DROP TEMPORARY TABLE readonly00542;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5159', () => {
    const query = `DROP TABLE IF EXISTS float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5160', () => {
    const query = `DROP TABLE float;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5161', () => {
    const query = `DROP TABLE IF EXISTS agg_over_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5162', () => {
    const query = `DROP TABLE agg_over_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5163', () => {
    const query = `DROP TABLE IF EXISTS arr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5164', () => {
    const query = `DROP TABLE arr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5165', () => {
    const query = `DROP TABLE IF EXISTS multidimensional;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5166', () => {
    const query = `DROP TABLE multidimensional;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5167', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS t1_00519;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5168', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS t3_00519;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5169', () => {
    const query = `DROP TABLE IF EXISTS date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5170', () => {
    const query = `DROP TABLE date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5171', () => {
    const query = `DROP TABLE IF EXISTS deduplication_by_partition;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5172', () => {
    const query = `DROP TABLE deduplication_by_partition;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5173', () => {
    const query = `DROP TABLE IF EXISTS with_deduplication;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5174', () => {
    const query = `DROP TABLE IF EXISTS without_deduplication;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5175', () => {
    const query = `DROP TABLE IF EXISTS with_deduplication_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5176', () => {
    const query = `DROP TABLE IF EXISTS without_deduplication_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5177', () => {
    const query = `DROP TABLE IF EXISTS replicated_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5178', () => {
    const query = `DROP TABLE replicated_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5179', () => {
    const query = `DROP TABLE IF EXISTS replicated_collapsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5180', () => {
    const query = `DROP TABLE replicated_collapsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5181', () => {
    const query = `DROP TABLE IF EXISTS replicated_versioned_collapsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5182', () => {
    const query = `DROP TABLE replicated_versioned_collapsing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5183', () => {
    const query = `DROP TABLE IF EXISTS with_settings;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5184', () => {
    const query = `DROP TABLE with_settings;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5185', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.mv_00508;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5186', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.src;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5187', () => {
    const query = `DROP TABLE {CLICKHOUSE_DATABASE:Identifier}.dst;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5188', () => {
    const query = `DROP TABLE IF EXISTS union3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5189', () => {
    const query = `DROP TABLE union1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5190', () => {
    const query = `DROP TABLE union3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5191', () => {
    const query = `DROP TABLE IF EXISTS globalin;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5192', () => {
    const query = `DROP TABLE globalin;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5193', () => {
    const query = `DROP TABLE IF EXISTS union_bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5194', () => {
    const query = `DROP TABLE union_bug;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5195', () => {
    const query = `drop table if exists test_ins_arr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5196', () => {
    const query = `drop table test_ins_arr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5197', () => {
    const query = `drop table if exists test_ins_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5198', () => {
    const query = `drop table test_ins_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5199', () => {
    const query = `drop table if exists test_ins_arr_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5200', () => {
    const query = `drop table test_ins_arr_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5201', () => {
    const query = `drop table if exists test_ins_arr_arr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5202', () => {
    const query = `drop table test_ins_arr_arr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5203', () => {
    const query = `drop table if exists test_ins_arr_arr_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5204', () => {
    const query = `drop table test_ins_arr_arr_null;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5205', () => {
    const query = `drop table if exists test_ins_arr_arr_arr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5206', () => {
    const query = `drop table test_ins_arr_arr_arr;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5207', () => {
    const query = `DROP TABLE IF EXISTS sum_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5208', () => {
    const query = `DROP TABLE sum_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5209', () => {
    const query = `DROP TABLE sum_map_overflow;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5210', () => {
    const query = `DROP TABLE IF EXISTS sum_map_decimal;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5211', () => {
    const query = `DROP TABLE sum_map_decimal_nullable;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5212', () => {
    const query = `DROP TABLE IF EXISTS not_partitioned_replica1_00502 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5213', () => {
    const query = `DROP TABLE IF EXISTS not_partitioned_replica2_00502 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5214', () => {
    const query = `DROP TABLE not_partitioned_replica1_00502 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5215', () => {
    const query = `DROP TABLE not_partitioned_replica2_00502 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5216', () => {
    const query = `DROP TABLE IF EXISTS partitioned_by_week_replica1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5217', () => {
    const query = `DROP TABLE IF EXISTS partitioned_by_week_replica2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5218', () => {
    const query = `DROP TABLE partitioned_by_week_replica1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5219', () => {
    const query = `DROP TABLE partitioned_by_week_replica2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5220', () => {
    const query = `DROP TABLE IF EXISTS partitioned_by_tuple_replica1_00502 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5221', () => {
    const query = `DROP TABLE IF EXISTS partitioned_by_tuple_replica2_00502 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5222', () => {
    const query = `DROP TABLE partitioned_by_tuple_replica1_00502 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5223', () => {
    const query = `DROP TABLE partitioned_by_tuple_replica2_00502 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5224', () => {
    const query = `DROP TABLE IF EXISTS partitioned_by_string_replica1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5225', () => {
    const query = `DROP TABLE IF EXISTS partitioned_by_string_replica2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5226', () => {
    const query = `DROP TABLE partitioned_by_string_replica1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5227', () => {
    const query = `DROP TABLE partitioned_by_string_replica2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5228', () => {
    const query = `DROP TABLE IF EXISTS without_fixed_size_columns_replica1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5229', () => {
    const query = `DROP TABLE IF EXISTS without_fixed_size_columns_replica2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5230', () => {
    const query = `DROP TABLE without_fixed_size_columns_replica1 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5231', () => {
    const query = `DROP TABLE without_fixed_size_columns_replica2 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5232', () => {
    const query = `DROP TABLE IF EXISTS not_partitioned;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5233', () => {
    const query = `DROP TABLE not_partitioned;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5234', () => {
    const query = `DROP TABLE IF EXISTS partitioned_by_week;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5235', () => {
    const query = `DROP TABLE partitioned_by_week;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5236', () => {
    const query = `DROP TABLE IF EXISTS partitioned_by_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5237', () => {
    const query = `DROP TABLE partitioned_by_string;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5238', () => {
    const query = `DROP TABLE IF EXISTS without_fixed_size_columns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5239', () => {
    const query = `DROP TABLE without_fixed_size_columns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5240', () => {
    const query = `DROP TABLE IF EXISTS polygons;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5241', () => {
    const query = `DROP TABLE polygons;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5242', () => {
    const query = `drop table if exists coords;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5243', () => {
    const query = `DROP TABLE p;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5244', () => {
    const query = `DROP TABLE json;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5245', () => {
    const query = `DROP TABLE if exists array_functions;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5246', () => {
    const query = `drop table if exists one_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5247', () => {
    const query = `DROP TABLE temp_tab;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5248', () => {
    const query = `DROP TABLE IF EXISTS non_ascii;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5249', () => {
    const query = `DROP TABLE non_ascii;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5250', () => {
    const query = `DROP TABLE IF EXISTS primary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5251', () => {
    const query = `DROP TABLE primary;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5252', () => {
    const query = `drop table if exists tab_00484;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5253', () => {
    const query = `drop table tab_00484;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5254', () => {
    const query = `drop table if exists \`table_00483\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5255', () => {
    const query = `DROP TABLE IF EXISTS tab_00481;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5256', () => {
    const query = `DROP TABLE tab_00481;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5257', () => {
    const query = `DROP TABLE IF EXISTS null_00481;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5258', () => {
    const query = `DROP TABLE IF EXISTS null_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5259', () => {
    const query = `DROP TABLE null_00481;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5260', () => {
    const query = `DROP TABLE null_view;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5261', () => {
    const query = `DROP TEMPORARY TABLE IF EXISTS t_00477;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5262', () => {
    const query = `DROP TABLE IF EXISTS t_00472;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5263', () => {
    const query = `DROP TABLE IF EXISTS mv_00472;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5264', () => {
    const query = `DROP TABLE IF EXISTS \`.inner.mv_00472\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5265', () => {
    const query = `DROP TABLE t_00472;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5266', () => {
    const query = `DROP TABLE mv_00472;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5267', () => {
    const query = `DROP TABLE IF EXISTS strings_00469;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5268', () => {
    const query = `DROP TABLE strings_00469;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5269', () => {
    const query = `DROP TABLE IF EXISTS nullable_00465;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5270', () => {
    const query = `DROP TABLE nullable_00465;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5271', () => {
    const query = `DROP TABLE IF EXISTS u32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5272', () => {
    const query = `DROP TABLE IF EXISTS u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5273', () => {
    const query = `DROP TABLE IF EXISTS merge_32_64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5274', () => {
    const query = `DROP TABLE u32;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5275', () => {
    const query = `DROP TABLE u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5276', () => {
    const query = `DROP TABLE merge_32_64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5277', () => {
    const query = `DROP TABLE IF EXISTS s64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5278', () => {
    const query = `DROP TABLE IF EXISTS merge_s64_u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5279', () => {
    const query = `DROP TABLE s64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5280', () => {
    const query = `DROP TABLE merge_s64_u64;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5281', () => {
    const query = `DROP TABLE IF EXISTS one_00458;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5282', () => {
    const query = `DROP TABLE IF EXISTS two_00458;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5283', () => {
    const query = `DROP TABLE IF EXISTS merge_one_two;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5284', () => {
    const query = `DROP TABLE IF EXISTS nullable_00457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5285', () => {
    const query = `DROP TABLE nullable_00457;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5286', () => {
    const query = `DROP TABLE IF EXISTS nullable_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5287', () => {
    const query = `DROP TABLE nullable_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5288', () => {
    const query = `DROP TABLE IF EXISTS cast_enums;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5289', () => {
    const query = `DROP TABLE IF EXISTS clear_column1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5290', () => {
    const query = `DROP TABLE IF EXISTS clear_column2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5291', () => {
    const query = `DROP TABLE clear_column1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5292', () => {
    const query = `DROP TABLE clear_column2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5293', () => {
    const query = `DROP TABLE IF EXISTS nulls;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5294', () => {
    const query = `DROP TABLE nulls;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5295', () => {
    const query = `DROP TABLE IF EXISTS agg_func_col;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5296', () => {
    const query = `DROP TABLE IF EXISTS nullable_00431;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5297', () => {
    const query = `DROP TABLE nullable_00431;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5298', () => {
    const query = `DROP TABLE IF EXISTS log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5299', () => {
    const query = `DROP TABLE IF EXISTS distinct;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5300', () => {
    const query = `DROP TABLE IF EXISTS const_in_const;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5301', () => {
    const query = `DROP TABLE IF EXISTS arena;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5302', () => {
    const query = `DROP TABLE IF EXISTS stripe1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5303', () => {
    const query = `DROP TABLE IF EXISTS stripe2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5304', () => {
    const query = `DROP TABLE IF EXISTS stripe3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5305', () => {
    const query = `DROP TABLE IF EXISTS stripe4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5306', () => {
    const query = `DROP TABLE IF EXISTS stripe5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5307', () => {
    const query = `DROP TABLE IF EXISTS stripe6;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5308', () => {
    const query = `DROP TABLE IF EXISTS stripe7;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5309', () => {
    const query = `DROP TABLE IF EXISTS stripe8;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5310', () => {
    const query = `DROP TABLE IF EXISTS stripe9;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5311', () => {
    const query = `DROP TABLE IF EXISTS stripe10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5312', () => {
    const query = `DROP TABLE IF EXISTS merge_00401;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5313', () => {
    const query = `DROP TABLE IF EXISTS grop_uniq_array_date;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5314', () => {
    const query = `DROP TABLE IF EXISTS replaceall;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5315', () => {
    const query = `DROP TABLE replaceall;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5316', () => {
    const query = `DROP TABLE IF EXISTS alter_00394;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5317', () => {
    const query = `DROP TABLE IF EXISTS enum_nested_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5318', () => {
    const query = `DROP TABLE enum_nested_alter;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5319', () => {
    const query = `DROP TABLE IF EXISTS enum_totals;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5320', () => {
    const query = `DROP TABLE enum_totals;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5321', () => {
    const query = `DROP TABLE IF EXISTS has_column_in_table;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5322', () => {
    const query = `DROP TABLE IF EXISTS enum_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5323', () => {
    const query = `DROP TABLE enum_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5324', () => {
    const query = `DROP TABLE IF EXISTS aggregates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5325', () => {
    const query = `DROP TABLE aggregates;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5326', () => {
    const query = `DROP TABLE IF EXISTS group_uniq_arr_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5327', () => {
    const query = `DROP TABLE IF EXISTS group_uniq_arr_int;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5328', () => {
    const query = `DROP TABLE IF EXISTS group_uniq_str;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5329', () => {
    const query = `DROP TABLE IF EXISTS prewhere_defaults;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5330', () => {
    const query = `DROP TABLE prewhere_defaults;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5331', () => {
    const query = `DROP TABLE IF EXISTS nested1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5332', () => {
    const query = `DROP TABLE IF EXISTS nested2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5333', () => {
    const query = `DROP TABLE nested1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5334', () => {
    const query = `DROP TABLE nested2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5335', () => {
    const query = `DROP TABLE IF EXISTS numbers_squashed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5336', () => {
    const query = `DROP TABLE numbers_squashed;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5337', () => {
    const query = `DROP TABLE IF EXISTS bad_arrays;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5338', () => {
    const query = `DROP TABLE bad_arrays;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5339', () => {
    const query = `DROP TABLE IF EXISTS ontime;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5340', () => {
    const query = `DROP TABLE ontime;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5341', () => {
    const query = `DROP TABLE myRMT;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5342', () => {
    const query = `DROP TABLE IF EXISTS replace;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5343', () => {
    const query = `DROP TABLE replace;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5344', () => {
    const query = `DROP TABLE v1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5345', () => {
    const query = `DROP TABLE v2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5346', () => {
    const query = `DROP TABLE IF EXISTS multi_if_check;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5347', () => {
    const query = `DROP TABLE IF EXISTS summing_composite_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5348', () => {
    const query = `DROP TABLE summing_composite_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5349', () => {
    const query = `DROP TABLE IF EXISTS pk_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5350', () => {
    const query = `DROP TABLE pk_set;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5351', () => {
    const query = `DROP TABLE IF EXISTS index_for_like;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5352', () => {
    const query = `DROP TABLE index_for_like;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5353', () => {
    const query = `DROP TABLE IF EXISTS sample_00314_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5354', () => {
    const query = `DROP TABLE IF EXISTS sample_00314_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5355', () => {
    const query = `DROP TABLE IF EXISTS sample_merge_00314;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5356', () => {
    const query = `DROP TABLE sample_00314_1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5357', () => {
    const query = `DROP TABLE sample_00314_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5358', () => {
    const query = `DROP TABLE sample_merge_00314;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5359', () => {
    const query = `DROP TABLE IF EXISTS array_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5360', () => {
    const query = `DROP TABLE array_pk;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5361', () => {
    const query = `DROP TABLE IF EXISTS test_00309_formats_case_insensitive;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5362', () => {
    const query = `DROP TABLE IF EXISTS insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5363', () => {
    const query = `DROP TABLE insert;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5364', () => {
    const query = `drop table if exists t_306;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5365', () => {
    const query = `DROP TABLE enum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5366', () => {
    const query = `drop table if exists enums_copy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5367', () => {
    const query = `drop table enums_copy;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5368', () => {
    const query = `DROP TABLE IF EXISTS numbers_10_00290;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5369', () => {
    const query = `DROP TABLE numbers_10_00290;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5370', () => {
    const query = `DROP TABLE IF EXISTS stripelog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5371', () => {
    const query = `DROP TABLE stripelog;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5372', () => {
    const query = `DROP TABLE IF EXISTS sorted;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5373', () => {
    const query = `DROP TABLE sorted;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5374', () => {
    const query = `DROP TABLE IF EXISTS sample_00276;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5375', () => {
    const query = `DROP TABLE sample_00276;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5376', () => {
    const query = `DROP TABLE IF EXISTS numbers_1001;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5377', () => {
    const query = `DROP TABLE numbers_1001;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5378', () => {
    const query = `DROP TABLE IF EXISTS view1_00270;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5379', () => {
    const query = `DROP TABLE IF EXISTS view2_00270;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5380', () => {
    const query = `DROP TABLE IF EXISTS merge_view_00270;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5381', () => {
    const query = `DROP TABLE view1_00270;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5382', () => {
    const query = `DROP TABLE view2_00270;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5383', () => {
    const query = `DROP TABLE merge_view_00270;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5384', () => {
    const query = `DROP TABLE IF EXISTS numbers_10k_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5385', () => {
    const query = `DROP TABLE numbers_10k_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5386', () => {
    const query = `drop table if exists aliases_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5387', () => {
    const query = `drop table aliases_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5388', () => {
    const query = `drop table if exists numbers_10;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5389', () => {
    const query = `DROP TABLE IF EXISTS elog_cut;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5390', () => {
    const query = `DROP TABLE elog_cut;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5391', () => {
    const query = `DROP TABLE IF EXISTS storage;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5392', () => {
    const query = `DROP TABLE storage;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5393', () => {
    const query = `DROP TABLE IF EXISTS attach_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5394', () => {
    const query = `DROP TABLE IF EXISTS attach_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5395', () => {
    const query = `DROP TABLE attach_r1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5396', () => {
    const query = `DROP TABLE attach_r2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5397', () => {
    const query = `drop temporary table if exists one_0023;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5398', () => {
    const query = `DROP TABLE foo_00234;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5399', () => {
    const query = `drop table if exists prewhere_column_missing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5400', () => {
    const query = `drop table prewhere_column_missing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5401', () => {
    const query = `DROP TABLE IF EXISTS deduplication;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5402', () => {
    const query = `DROP TABLE deduplication;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5403', () => {
    const query = `DROP TABLE IF EXISTS numbers_100k_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5404', () => {
    const query = `DROP TABLE numbers_100k_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5405', () => {
    const query = `drop table if exists sequence_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5406', () => {
    const query = `drop table sequence_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5407', () => {
    const query = `DROP TABLE IF EXISTS primary_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5408', () => {
    const query = `DROP TABLE primary_key;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5409', () => {
    const query = `DROP TABLE IF EXISTS test_00209;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5410', () => {
    const query = `DROP TABLE test_00209;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5411', () => {
    const query = `drop table if exists t_q1ht4gq_5;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5412', () => {
    const query = `DROP TABLE IF EXISTS t1_00203;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5413', () => {
    const query = `DROP TABLE IF EXISTS t2_00203;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5414', () => {
    const query = `DROP TABLE t1_00203;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5415', () => {
    const query = `DROP TABLE t2_00203;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5416', () => {
    const query = `DROP TABLE IF EXISTS numbers_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5417', () => {
    const query = `DROP TABLE numbers_memory;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5418', () => {
    const query = `DROP TABLE IF EXISTS parallel_replicas;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5419', () => {
    const query = `DROP TABLE IF EXISTS parallel_replicas_backup;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5420', () => {
    const query = `DROP TABLE parallel_replicas;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5421', () => {
    const query = `DROP TABLE parallel_replicas_backup;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5422', () => {
    const query = `DROP TABLE IF EXISTS aggregating_00191;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5423', () => {
    const query = `DROP TABLE aggregating_00191;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5424', () => {
    const query = `DROP TABLE IF EXISTS data_00184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5425', () => {
    const query = `drop table data_00184;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5426', () => {
    const query = `DROP TABLE IF EXISTS t_00180;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5427', () => {
    const query = `DROP TABLE IF EXISTS mv_00180;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5428', () => {
    const query = `DROP TABLE IF EXISTS \`.inner.mv_00180\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5429', () => {
    const query = `DROP TABLE t_00180;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5430', () => {
    const query = `DROP TABLE mv_00180;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5431', () => {
    const query = `DROP TABLE IF EXISTS datetime64_index_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5432', () => {
    const query = `DROP TABLE datetime64_index_tbl;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5433', () => {
    const query = `DROP TABLE IF EXISTS partition_by_ignore SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5434', () => {
    const query = `DROP TABLE IF EXISTS mt_00168;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5435', () => {
    const query = `DROP TABLE IF EXISTS mt_00168_buffer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5436', () => {
    const query = `DROP TABLE mt_00168_buffer;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5437', () => {
    const query = `DROP TABLE mt_00168;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5438', () => {
    const query = `DROP TABLE IF EXISTS mt_00160;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5439', () => {
    const query = `DROP TABLE IF EXISTS merge_00160;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5440', () => {
    const query = `DROP TABLE merge_00160;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5441', () => {
    const query = `DROP TABLE mt_00160;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5442', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.mt_buffer_00158;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5443', () => {
    const query = `DROP TABLE IF EXISTS {CLICKHOUSE_DATABASE:Identifier}.mt_00158;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5444', () => {
    const query = `drop table if exists nested_map_multiple_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5445', () => {
    const query = `drop table nested_map_multiple_values;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5446', () => {
    const query = `drop table if exists nested_not_a_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5447', () => {
    const query = `drop table nested_not_a_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5448', () => {
    const query = `DROP TABLE IF EXISTS alter_00147;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5449', () => {
    const query = `DROP TABLE alter_00147;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5450', () => {
    const query = `drop table if exists nested_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5451', () => {
    const query = `drop table nested_map;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5452', () => {
    const query = `drop table if exists nested_map_explicit;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5453', () => {
    const query = `drop table nested_map_explicit;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5454', () => {
    const query = `DROP TABLE IF EXISTS default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5455', () => {
    const query = `DROP TABLE default;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5456', () => {
    const query = `DROP TABLE IF EXISTS buffer_00126;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5457', () => {
    const query = `DROP TABLE IF EXISTS null_sink_00126;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5458', () => {
    const query = `DROP TABLE buffer_00126;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5459', () => {
    const query = `DROP TABLE null_sink_00126;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5460', () => {
    const query = `DROP TABLE report;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5461', () => {
    const query = `DROP TABLE IF EXISTS alter_00121 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5462', () => {
    const query = `DROP TABLE alter_00121 SYNC;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5463', () => {
    const query = `DROP TABLE IF EXISTS null_00117;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5464', () => {
    const query = `DROP TABLE null_00117;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5465', () => {
    const query = `DROP TABLE IF EXISTS set2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5466', () => {
    const query = `DROP TABLE IF EXISTS numbers_mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5467', () => {
    const query = `DROP TABLE numbers_mt;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5468', () => {
    const query = `DROP TABLE IF EXISTS numbers10m;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5469', () => {
    const query = `DROP TABLE numbers10m;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5470', () => {
    const query = `DROP TABLE IF EXISTS test_view_filtered;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5471', () => {
    const query = `DROP TABLE IF EXISTS tmp_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5472', () => {
    const query = `DROP TABLE IF EXISTS tmp_mv2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5473', () => {
    const query = `DROP TABLE IF EXISTS tmp_mv3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5474', () => {
    const query = `DROP TABLE IF EXISTS tmp_mv4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5475', () => {
    const query = `DROP TABLE IF EXISTS \`.inner.tmp_mv\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5476', () => {
    const query = `DROP TABLE IF EXISTS \`.inner.tmp_mv2\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5477', () => {
    const query = `DROP TABLE IF EXISTS \`.inner.tmp_mv3\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5478', () => {
    const query = `DROP TABLE IF EXISTS \`.inner.tmp_mv4\`;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5479', () => {
    const query = `DROP TABLE tmp_mv;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5480', () => {
    const query = `DROP TABLE tmp_mv2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5481', () => {
    const query = `DROP TABLE tmp_mv3;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5482', () => {
    const query = `DROP TABLE tmp_mv4;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5483', () => {
    const query = `DROP TABLE IF EXISTS report1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5484', () => {
    const query = `DROP TABLE IF EXISTS report2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5485', () => {
    const query = `DROP TABLE report1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5486', () => {
    const query = `DROP TABLE report2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5487', () => {
    const query = `DROP TABLE IF EXISTS data2013;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5488', () => {
    const query = `DROP TABLE IF EXISTS data2015;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5489', () => {
    const query = `DROP TABLE data2013;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5490', () => {
    const query = `DROP TABLE data2015;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5491', () => {
    const query = `DROP TABLE IF EXISTS data2014;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5492', () => {
    const query = `DROP TABLE data2014;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5493', () => {
    const query = `DROP TABLE IF EXISTS min_if;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5494', () => {
    const query = `DROP TABLE min_if;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5495', () => {
    const query = `DROP TABLE IF EXISTS summing_merge_tree_with_list_of_columns_to_sum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5496', () => {
    const query = `DROP TABLE IF EXISTS merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5497', () => {
    const query = `DROP TABLE IF EXISTS collapsing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5498', () => {
    const query = `DROP TABLE IF EXISTS versioned_collapsing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5499', () => {
    const query = `DROP TABLE IF EXISTS summing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5500', () => {
    const query = `DROP TABLE IF EXISTS summing_merge_tree_with_sampling_with_list_of_columns_to_sum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5501', () => {
    const query = `DROP TABLE IF EXISTS aggregating_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5502', () => {
    const query = `DROP TABLE IF EXISTS replicated_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5503', () => {
    const query = `DROP TABLE IF EXISTS replicated_collapsing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5504', () => {
    const query = `DROP TABLE IF EXISTS replicated_versioned_collapsing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5505', () => {
    const query = `DROP TABLE IF EXISTS replicated_summing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5506', () => {
    const query = `DROP TABLE IF EXISTS replicated_summing_merge_tree_with_list_of_columns_to_sum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5507', () => {
    const query = `DROP TABLE IF EXISTS replicated_aggregating_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5508', () => {
    const query = `DROP TABLE IF EXISTS replicated_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5509', () => {
    const query = `DROP TABLE IF EXISTS replicated_collapsing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5510', () => {
    const query = `DROP TABLE IF EXISTS replicated_versioned_collapsing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5511', () => {
    const query = `DROP TABLE IF EXISTS replicated_summing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5512', () => {
    const query = `DROP TABLE IF EXISTS replicated_summing_merge_tree_with_sampling_with_list_of_columns_to_sum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5513', () => {
    const query = `DROP TABLE IF EXISTS replicated_aggregating_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5514', () => {
    const query = `DROP TABLE summing_merge_tree_with_list_of_columns_to_sum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5515', () => {
    const query = `DROP TABLE merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5516', () => {
    const query = `DROP TABLE collapsing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5517', () => {
    const query = `DROP TABLE versioned_collapsing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5518', () => {
    const query = `DROP TABLE summing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5519', () => {
    const query = `DROP TABLE summing_merge_tree_with_sampling_with_list_of_columns_to_sum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5520', () => {
    const query = `DROP TABLE aggregating_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5521', () => {
    const query = `DROP TABLE replicated_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5522', () => {
    const query = `DROP TABLE replicated_collapsing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5523', () => {
    const query = `DROP TABLE replicated_versioned_collapsing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5524', () => {
    const query = `DROP TABLE replicated_summing_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5525', () => {
    const query = `DROP TABLE replicated_summing_merge_tree_with_list_of_columns_to_sum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5526', () => {
    const query = `DROP TABLE replicated_aggregating_merge_tree;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5527', () => {
    const query = `DROP TABLE replicated_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5528', () => {
    const query = `DROP TABLE replicated_collapsing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5529', () => {
    const query = `DROP TABLE replicated_versioned_collapsing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5530', () => {
    const query = `DROP TABLE replicated_summing_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5531', () => {
    const query = `DROP TABLE replicated_summing_merge_tree_with_sampling_with_list_of_columns_to_sum;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5532', () => {
    const query = `DROP TABLE replicated_aggregating_merge_tree_with_sampling;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5533', () => {
    const query = `DROP TABLE IF EXISTS addresses;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5534', () => {
    const query = `DROP TABLE addresses;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5535', () => {
    const query = `DROP TABLE IF EXISTS insert_fewer_columns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5536', () => {
    const query = `DROP TABLE IF EXISTS insert_fewer_columns_2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5537', () => {
    const query = `DROP TABLE insert_fewer_columns;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5538', () => {
    const query = `DROP TABLE empty_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5539', () => {
    const query = `DROP TABLE IF EXISTS check_query_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5540', () => {
    const query = `DROP TABLE IF EXISTS check_query_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5541', () => {
    const query = `DROP TABLE check_query_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5542', () => {
    const query = `DROP TABLE check_query_tiny_log;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5543', () => {
    const query = `DROP TABLE IF EXISTS replicated_alter1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5544', () => {
    const query = `DROP TABLE IF EXISTS replicated_alter2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5545', () => {
    const query = `DROP TABLE replicated_alter1;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5546', () => {
    const query = `DROP TABLE replicated_alter2;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5547', () => {
    const query = `DROP TABLE IF EXISTS alter_00061;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5548', () => {
    const query = `DROP TABLE alter_00061;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5549', () => {
    const query = `DROP TABLE IF EXISTS empty_summing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5550', () => {
    const query = `DROP TABLE empty_summing;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5551', () => {
    const query = `DROP TABLE IF EXISTS big_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5552', () => {
    const query = `DROP TABLE big_array;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5553', () => {
    const query = `DROP TABLE IF EXISTS array_element_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5554', () => {
    const query = `DROP TABLE array_element_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});

test('[DROP] should pass without errors: 5555', () => {
    const query = `DROP TABLE nested_test;`;

    const autocompleteResult = parseClickHouseQueryWithoutCursor(query);
    expect(autocompleteResult.errors).toHaveLength(0);
});
